// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: data_item.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_data_5fitem_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_data_5fitem_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "protobuf_data_pet.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_data_5fitem_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_data_5fitem_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_data_5fitem_2eproto;
namespace network {
class TItemAttribute;
struct TItemAttributeDefaultTypeInternal;
extern TItemAttributeDefaultTypeInternal _TItemAttribute_default_instance_;
class TItemData;
struct TItemDataDefaultTypeInternal;
extern TItemDataDefaultTypeInternal _TItemData_default_instance_;
class TItemDropInfo;
struct TItemDropInfoDefaultTypeInternal;
extern TItemDropInfoDefaultTypeInternal _TItemDropInfo_default_instance_;
class TItemPos;
struct TItemPosDefaultTypeInternal;
extern TItemPosDefaultTypeInternal _TItemPos_default_instance_;
class TShopExTabData;
struct TShopExTabDataDefaultTypeInternal;
extern TShopExTabDataDefaultTypeInternal _TShopExTabData_default_instance_;
class TShopItemTable;
struct TShopItemTableDefaultTypeInternal;
extern TShopItemTableDefaultTypeInternal _TShopItemTable_default_instance_;
}  // namespace network
PROTOBUF_NAMESPACE_OPEN
template<> ::network::TItemAttribute* Arena::CreateMaybeMessage<::network::TItemAttribute>(Arena*);
template<> ::network::TItemData* Arena::CreateMaybeMessage<::network::TItemData>(Arena*);
template<> ::network::TItemDropInfo* Arena::CreateMaybeMessage<::network::TItemDropInfo>(Arena*);
template<> ::network::TItemPos* Arena::CreateMaybeMessage<::network::TItemPos>(Arena*);
template<> ::network::TShopExTabData* Arena::CreateMaybeMessage<::network::TShopExTabData>(Arena*);
template<> ::network::TShopItemTable* Arena::CreateMaybeMessage<::network::TShopItemTable>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace network {

// ===================================================================

class TItemPos final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.TItemPos) */ {
 public:
  inline TItemPos() : TItemPos(nullptr) {}
  ~TItemPos() override;
  explicit PROTOBUF_CONSTEXPR TItemPos(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TItemPos(const TItemPos& from);
  TItemPos(TItemPos&& from) noexcept
    : TItemPos() {
    *this = ::std::move(from);
  }

  inline TItemPos& operator=(const TItemPos& from) {
    CopyFrom(from);
    return *this;
  }
  inline TItemPos& operator=(TItemPos&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TItemPos& default_instance() {
    return *internal_default_instance();
  }
  static inline const TItemPos* internal_default_instance() {
    return reinterpret_cast<const TItemPos*>(
               &_TItemPos_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TItemPos& a, TItemPos& b) {
    a.Swap(&b);
  }
  inline void Swap(TItemPos* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TItemPos* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TItemPos* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TItemPos>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TItemPos& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TItemPos& from) {
    TItemPos::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TItemPos* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.TItemPos";
  }
  protected:
  explicit TItemPos(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWindowTypeFieldNumber = 1,
    kCellFieldNumber = 2,
  };
  // uint32 window_type = 1;
  void clear_window_type();
  uint32_t window_type() const;
  void set_window_type(uint32_t value);
  private:
  uint32_t _internal_window_type() const;
  void _internal_set_window_type(uint32_t value);
  public:

  // uint32 cell = 2;
  void clear_cell();
  uint32_t cell() const;
  void set_cell(uint32_t value);
  private:
  uint32_t _internal_cell() const;
  void _internal_set_cell(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.TItemPos)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t window_type_;
    uint32_t cell_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_5fitem_2eproto;
};
// -------------------------------------------------------------------

class TShopItemTable final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.TShopItemTable) */ {
 public:
  inline TShopItemTable() : TShopItemTable(nullptr) {}
  ~TShopItemTable() override;
  explicit PROTOBUF_CONSTEXPR TShopItemTable(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TShopItemTable(const TShopItemTable& from);
  TShopItemTable(TShopItemTable&& from) noexcept
    : TShopItemTable() {
    *this = ::std::move(from);
  }

  inline TShopItemTable& operator=(const TShopItemTable& from) {
    CopyFrom(from);
    return *this;
  }
  inline TShopItemTable& operator=(TShopItemTable&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TShopItemTable& default_instance() {
    return *internal_default_instance();
  }
  static inline const TShopItemTable* internal_default_instance() {
    return reinterpret_cast<const TShopItemTable*>(
               &_TShopItemTable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TShopItemTable& a, TShopItemTable& b) {
    a.Swap(&b);
  }
  inline void Swap(TShopItemTable* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TShopItemTable* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TShopItemTable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TShopItemTable>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TShopItemTable& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TShopItemTable& from) {
    TShopItemTable::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TShopItemTable* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.TShopItemTable";
  }
  protected:
  explicit TShopItemTable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOwnerNameFieldNumber = 4,
    kItemFieldNumber = 1,
    kDisplayPosFieldNumber = 2,
    kPriceItemVnumFieldNumber = 3,
    kInsertionTimeFieldNumber = 5,
    kTimeoutTimeFieldNumber = 6,
    kAuctionTypeFieldNumber = 7,
    kMapIndexFieldNumber = 8,
    kChannelFieldNumber = 9,
    kPriceItemVnum2FieldNumber = 10,
    kPrice2FieldNumber = 11,
  };
  // bytes owner_name = 4;
  void clear_owner_name();
  const std::string& owner_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_owner_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_owner_name();
  PROTOBUF_NODISCARD std::string* release_owner_name();
  void set_allocated_owner_name(std::string* owner_name);
  private:
  const std::string& _internal_owner_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_owner_name(const std::string& value);
  std::string* _internal_mutable_owner_name();
  public:

  // .network.TItemData item = 1;
  bool has_item() const;
  private:
  bool _internal_has_item() const;
  public:
  void clear_item();
  const ::network::TItemData& item() const;
  PROTOBUF_NODISCARD ::network::TItemData* release_item();
  ::network::TItemData* mutable_item();
  void set_allocated_item(::network::TItemData* item);
  private:
  const ::network::TItemData& _internal_item() const;
  ::network::TItemData* _internal_mutable_item();
  public:
  void unsafe_arena_set_allocated_item(
      ::network::TItemData* item);
  ::network::TItemData* unsafe_arena_release_item();

  // uint32 display_pos = 2;
  void clear_display_pos();
  uint32_t display_pos() const;
  void set_display_pos(uint32_t value);
  private:
  uint32_t _internal_display_pos() const;
  void _internal_set_display_pos(uint32_t value);
  public:

  // uint32 price_item_vnum = 3;
  void clear_price_item_vnum();
  uint32_t price_item_vnum() const;
  void set_price_item_vnum(uint32_t value);
  private:
  uint32_t _internal_price_item_vnum() const;
  void _internal_set_price_item_vnum(uint32_t value);
  public:

  // uint32 insertion_time = 5;
  void clear_insertion_time();
  uint32_t insertion_time() const;
  void set_insertion_time(uint32_t value);
  private:
  uint32_t _internal_insertion_time() const;
  void _internal_set_insertion_time(uint32_t value);
  public:

  // uint32 timeout_time = 6;
  void clear_timeout_time();
  uint32_t timeout_time() const;
  void set_timeout_time(uint32_t value);
  private:
  uint32_t _internal_timeout_time() const;
  void _internal_set_timeout_time(uint32_t value);
  public:

  // uint32 auction_type = 7;
  void clear_auction_type();
  uint32_t auction_type() const;
  void set_auction_type(uint32_t value);
  private:
  uint32_t _internal_auction_type() const;
  void _internal_set_auction_type(uint32_t value);
  public:

  // uint32 map_index = 8;
  void clear_map_index();
  uint32_t map_index() const;
  void set_map_index(uint32_t value);
  private:
  uint32_t _internal_map_index() const;
  void _internal_set_map_index(uint32_t value);
  public:

  // uint32 channel = 9;
  void clear_channel();
  uint32_t channel() const;
  void set_channel(uint32_t value);
  private:
  uint32_t _internal_channel() const;
  void _internal_set_channel(uint32_t value);
  public:

  // uint32 price_item_vnum2 = 10;
  void clear_price_item_vnum2();
  uint32_t price_item_vnum2() const;
  void set_price_item_vnum2(uint32_t value);
  private:
  uint32_t _internal_price_item_vnum2() const;
  void _internal_set_price_item_vnum2(uint32_t value);
  public:

  // uint32 price2 = 11;
  void clear_price2();
  uint32_t price2() const;
  void set_price2(uint32_t value);
  private:
  uint32_t _internal_price2() const;
  void _internal_set_price2(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.TShopItemTable)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_name_;
    ::network::TItemData* item_;
    uint32_t display_pos_;
    uint32_t price_item_vnum_;
    uint32_t insertion_time_;
    uint32_t timeout_time_;
    uint32_t auction_type_;
    uint32_t map_index_;
    uint32_t channel_;
    uint32_t price_item_vnum2_;
    uint32_t price2_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_5fitem_2eproto;
};
// -------------------------------------------------------------------

class TShopExTabData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.TShopExTabData) */ {
 public:
  inline TShopExTabData() : TShopExTabData(nullptr) {}
  ~TShopExTabData() override;
  explicit PROTOBUF_CONSTEXPR TShopExTabData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TShopExTabData(const TShopExTabData& from);
  TShopExTabData(TShopExTabData&& from) noexcept
    : TShopExTabData() {
    *this = ::std::move(from);
  }

  inline TShopExTabData& operator=(const TShopExTabData& from) {
    CopyFrom(from);
    return *this;
  }
  inline TShopExTabData& operator=(TShopExTabData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TShopExTabData& default_instance() {
    return *internal_default_instance();
  }
  static inline const TShopExTabData* internal_default_instance() {
    return reinterpret_cast<const TShopExTabData*>(
               &_TShopExTabData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TShopExTabData& a, TShopExTabData& b) {
    a.Swap(&b);
  }
  inline void Swap(TShopExTabData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TShopExTabData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TShopExTabData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TShopExTabData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TShopExTabData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TShopExTabData& from) {
    TShopExTabData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TShopExTabData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.TShopExTabData";
  }
  protected:
  explicit TShopExTabData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 3,
    kNameFieldNumber = 1,
    kCoinTypeFieldNumber = 2,
  };
  // repeated .network.TShopItemTable items = 3;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::network::TShopItemTable* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TShopItemTable >*
      mutable_items();
  private:
  const ::network::TShopItemTable& _internal_items(int index) const;
  ::network::TShopItemTable* _internal_add_items();
  public:
  const ::network::TShopItemTable& items(int index) const;
  ::network::TShopItemTable* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TShopItemTable >&
      items() const;

  // bytes name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 coin_type = 2;
  void clear_coin_type();
  uint32_t coin_type() const;
  void set_coin_type(uint32_t value);
  private:
  uint32_t _internal_coin_type() const;
  void _internal_set_coin_type(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.TShopExTabData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TShopItemTable > items_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    uint32_t coin_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_5fitem_2eproto;
};
// -------------------------------------------------------------------

class TItemDropInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.TItemDropInfo) */ {
 public:
  inline TItemDropInfo() : TItemDropInfo(nullptr) {}
  ~TItemDropInfo() override;
  explicit PROTOBUF_CONSTEXPR TItemDropInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TItemDropInfo(const TItemDropInfo& from);
  TItemDropInfo(TItemDropInfo&& from) noexcept
    : TItemDropInfo() {
    *this = ::std::move(from);
  }

  inline TItemDropInfo& operator=(const TItemDropInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline TItemDropInfo& operator=(TItemDropInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TItemDropInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const TItemDropInfo* internal_default_instance() {
    return reinterpret_cast<const TItemDropInfo*>(
               &_TItemDropInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TItemDropInfo& a, TItemDropInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(TItemDropInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TItemDropInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TItemDropInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TItemDropInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TItemDropInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TItemDropInfo& from) {
    TItemDropInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TItemDropInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.TItemDropInfo";
  }
  protected:
  explicit TItemDropInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVnumFieldNumber = 1,
    kCountFieldNumber = 2,
    kMinLevelFieldNumber = 3,
    kMaxLevelFieldNumber = 4,
  };
  // uint32 vnum = 1;
  void clear_vnum();
  uint32_t vnum() const;
  void set_vnum(uint32_t value);
  private:
  uint32_t _internal_vnum() const;
  void _internal_set_vnum(uint32_t value);
  public:

  // uint32 count = 2;
  void clear_count();
  uint32_t count() const;
  void set_count(uint32_t value);
  private:
  uint32_t _internal_count() const;
  void _internal_set_count(uint32_t value);
  public:

  // int32 min_level = 3;
  void clear_min_level();
  int32_t min_level() const;
  void set_min_level(int32_t value);
  private:
  int32_t _internal_min_level() const;
  void _internal_set_min_level(int32_t value);
  public:

  // int32 max_level = 4;
  void clear_max_level();
  int32_t max_level() const;
  void set_max_level(int32_t value);
  private:
  int32_t _internal_max_level() const;
  void _internal_set_max_level(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.TItemDropInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t vnum_;
    uint32_t count_;
    int32_t min_level_;
    int32_t max_level_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_5fitem_2eproto;
};
// -------------------------------------------------------------------

class TItemAttribute final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.TItemAttribute) */ {
 public:
  inline TItemAttribute() : TItemAttribute(nullptr) {}
  ~TItemAttribute() override;
  explicit PROTOBUF_CONSTEXPR TItemAttribute(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TItemAttribute(const TItemAttribute& from);
  TItemAttribute(TItemAttribute&& from) noexcept
    : TItemAttribute() {
    *this = ::std::move(from);
  }

  inline TItemAttribute& operator=(const TItemAttribute& from) {
    CopyFrom(from);
    return *this;
  }
  inline TItemAttribute& operator=(TItemAttribute&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TItemAttribute& default_instance() {
    return *internal_default_instance();
  }
  static inline const TItemAttribute* internal_default_instance() {
    return reinterpret_cast<const TItemAttribute*>(
               &_TItemAttribute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TItemAttribute& a, TItemAttribute& b) {
    a.Swap(&b);
  }
  inline void Swap(TItemAttribute* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TItemAttribute* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TItemAttribute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TItemAttribute>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TItemAttribute& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TItemAttribute& from) {
    TItemAttribute::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TItemAttribute* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.TItemAttribute";
  }
  protected:
  explicit TItemAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // uint32 type = 1;
  void clear_type();
  uint32_t type() const;
  void set_type(uint32_t value);
  private:
  uint32_t _internal_type() const;
  void _internal_set_type(uint32_t value);
  public:

  // sint32 value = 2;
  void clear_value();
  int32_t value() const;
  void set_value(int32_t value);
  private:
  int32_t _internal_value() const;
  void _internal_set_value(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.TItemAttribute)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t type_;
    int32_t value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_5fitem_2eproto;
};
// -------------------------------------------------------------------

class TItemData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.TItemData) */ {
 public:
  inline TItemData() : TItemData(nullptr) {}
  ~TItemData() override;
  explicit PROTOBUF_CONSTEXPR TItemData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TItemData(const TItemData& from);
  TItemData(TItemData&& from) noexcept
    : TItemData() {
    *this = ::std::move(from);
  }

  inline TItemData& operator=(const TItemData& from) {
    CopyFrom(from);
    return *this;
  }
  inline TItemData& operator=(TItemData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TItemData& default_instance() {
    return *internal_default_instance();
  }
  static inline const TItemData* internal_default_instance() {
    return reinterpret_cast<const TItemData*>(
               &_TItemData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(TItemData& a, TItemData& b) {
    a.Swap(&b);
  }
  inline void Swap(TItemData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TItemData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TItemData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TItemData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TItemData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TItemData& from) {
    TItemData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TItemData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.TItemData";
  }
  protected:
  explicit TItemData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSocketsFieldNumber = 5,
    kAttributesFieldNumber = 6,
    kCellFieldNumber = 7,
    kPetInfoFieldNumber = 11,
    kIdFieldNumber = 1,
    kVnumFieldNumber = 2,
    kCountFieldNumber = 3,
    kSpecialFlagFieldNumber = 4,
    kPriceFieldNumber = 9,
    kOwnerFieldNumber = 8,
    kIsGmOwnerFieldNumber = 10,
  };
  // repeated sint32 sockets = 5;
  int sockets_size() const;
  private:
  int _internal_sockets_size() const;
  public:
  void clear_sockets();
  private:
  int32_t _internal_sockets(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_sockets() const;
  void _internal_add_sockets(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_sockets();
  public:
  int32_t sockets(int index) const;
  void set_sockets(int index, int32_t value);
  void add_sockets(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      sockets() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_sockets();

  // repeated .network.TItemAttribute attributes = 6;
  int attributes_size() const;
  private:
  int _internal_attributes_size() const;
  public:
  void clear_attributes();
  ::network::TItemAttribute* mutable_attributes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemAttribute >*
      mutable_attributes();
  private:
  const ::network::TItemAttribute& _internal_attributes(int index) const;
  ::network::TItemAttribute* _internal_add_attributes();
  public:
  const ::network::TItemAttribute& attributes(int index) const;
  ::network::TItemAttribute* add_attributes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemAttribute >&
      attributes() const;

  // .network.TItemPos cell = 7;
  bool has_cell() const;
  private:
  bool _internal_has_cell() const;
  public:
  void clear_cell();
  const ::network::TItemPos& cell() const;
  PROTOBUF_NODISCARD ::network::TItemPos* release_cell();
  ::network::TItemPos* mutable_cell();
  void set_allocated_cell(::network::TItemPos* cell);
  private:
  const ::network::TItemPos& _internal_cell() const;
  ::network::TItemPos* _internal_mutable_cell();
  public:
  void unsafe_arena_set_allocated_cell(
      ::network::TItemPos* cell);
  ::network::TItemPos* unsafe_arena_release_cell();

  // .network.TPetAdvancedTable pet_info = 11;
  bool has_pet_info() const;
  private:
  bool _internal_has_pet_info() const;
  public:
  void clear_pet_info();
  const ::network::TPetAdvancedTable& pet_info() const;
  PROTOBUF_NODISCARD ::network::TPetAdvancedTable* release_pet_info();
  ::network::TPetAdvancedTable* mutable_pet_info();
  void set_allocated_pet_info(::network::TPetAdvancedTable* pet_info);
  private:
  const ::network::TPetAdvancedTable& _internal_pet_info() const;
  ::network::TPetAdvancedTable* _internal_mutable_pet_info();
  public:
  void unsafe_arena_set_allocated_pet_info(
      ::network::TPetAdvancedTable* pet_info);
  ::network::TPetAdvancedTable* unsafe_arena_release_pet_info();

  // uint32 id = 1;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // uint32 vnum = 2;
  void clear_vnum();
  uint32_t vnum() const;
  void set_vnum(uint32_t value);
  private:
  uint32_t _internal_vnum() const;
  void _internal_set_vnum(uint32_t value);
  public:

  // uint32 count = 3;
  void clear_count();
  uint32_t count() const;
  void set_count(uint32_t value);
  private:
  uint32_t _internal_count() const;
  void _internal_set_count(uint32_t value);
  public:

  // uint32 special_flag = 4;
  void clear_special_flag();
  uint32_t special_flag() const;
  void set_special_flag(uint32_t value);
  private:
  uint32_t _internal_special_flag() const;
  void _internal_set_special_flag(uint32_t value);
  public:

  // int64 price = 9;
  void clear_price();
  int64_t price() const;
  void set_price(int64_t value);
  private:
  int64_t _internal_price() const;
  void _internal_set_price(int64_t value);
  public:

  // uint32 owner = 8;
  void clear_owner();
  uint32_t owner() const;
  void set_owner(uint32_t value);
  private:
  uint32_t _internal_owner() const;
  void _internal_set_owner(uint32_t value);
  public:

  // bool is_gm_owner = 10;
  void clear_is_gm_owner();
  bool is_gm_owner() const;
  void set_is_gm_owner(bool value);
  private:
  bool _internal_is_gm_owner() const;
  void _internal_set_is_gm_owner(bool value);
  public:

  // @@protoc_insertion_point(class_scope:network.TItemData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > sockets_;
    mutable std::atomic<int> _sockets_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemAttribute > attributes_;
    ::network::TItemPos* cell_;
    ::network::TPetAdvancedTable* pet_info_;
    uint32_t id_;
    uint32_t vnum_;
    uint32_t count_;
    uint32_t special_flag_;
    int64_t price_;
    uint32_t owner_;
    bool is_gm_owner_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_5fitem_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TItemPos

// uint32 window_type = 1;
inline void TItemPos::clear_window_type() {
  _impl_.window_type_ = 0u;
}
inline uint32_t TItemPos::_internal_window_type() const {
  return _impl_.window_type_;
}
inline uint32_t TItemPos::window_type() const {
  // @@protoc_insertion_point(field_get:network.TItemPos.window_type)
  return _internal_window_type();
}
inline void TItemPos::_internal_set_window_type(uint32_t value) {
  
  _impl_.window_type_ = value;
}
inline void TItemPos::set_window_type(uint32_t value) {
  _internal_set_window_type(value);
  // @@protoc_insertion_point(field_set:network.TItemPos.window_type)
}

// uint32 cell = 2;
inline void TItemPos::clear_cell() {
  _impl_.cell_ = 0u;
}
inline uint32_t TItemPos::_internal_cell() const {
  return _impl_.cell_;
}
inline uint32_t TItemPos::cell() const {
  // @@protoc_insertion_point(field_get:network.TItemPos.cell)
  return _internal_cell();
}
inline void TItemPos::_internal_set_cell(uint32_t value) {
  
  _impl_.cell_ = value;
}
inline void TItemPos::set_cell(uint32_t value) {
  _internal_set_cell(value);
  // @@protoc_insertion_point(field_set:network.TItemPos.cell)
}

// -------------------------------------------------------------------

// TShopItemTable

// .network.TItemData item = 1;
inline bool TShopItemTable::_internal_has_item() const {
  return this != internal_default_instance() && _impl_.item_ != nullptr;
}
inline bool TShopItemTable::has_item() const {
  return _internal_has_item();
}
inline void TShopItemTable::clear_item() {
  if (GetArenaForAllocation() == nullptr && _impl_.item_ != nullptr) {
    delete _impl_.item_;
  }
  _impl_.item_ = nullptr;
}
inline const ::network::TItemData& TShopItemTable::_internal_item() const {
  const ::network::TItemData* p = _impl_.item_;
  return p != nullptr ? *p : reinterpret_cast<const ::network::TItemData&>(
      ::network::_TItemData_default_instance_);
}
inline const ::network::TItemData& TShopItemTable::item() const {
  // @@protoc_insertion_point(field_get:network.TShopItemTable.item)
  return _internal_item();
}
inline void TShopItemTable::unsafe_arena_set_allocated_item(
    ::network::TItemData* item) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.item_);
  }
  _impl_.item_ = item;
  if (item) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:network.TShopItemTable.item)
}
inline ::network::TItemData* TShopItemTable::release_item() {
  
  ::network::TItemData* temp = _impl_.item_;
  _impl_.item_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::network::TItemData* TShopItemTable::unsafe_arena_release_item() {
  // @@protoc_insertion_point(field_release:network.TShopItemTable.item)
  
  ::network::TItemData* temp = _impl_.item_;
  _impl_.item_ = nullptr;
  return temp;
}
inline ::network::TItemData* TShopItemTable::_internal_mutable_item() {
  
  if (_impl_.item_ == nullptr) {
    auto* p = CreateMaybeMessage<::network::TItemData>(GetArenaForAllocation());
    _impl_.item_ = p;
  }
  return _impl_.item_;
}
inline ::network::TItemData* TShopItemTable::mutable_item() {
  ::network::TItemData* _msg = _internal_mutable_item();
  // @@protoc_insertion_point(field_mutable:network.TShopItemTable.item)
  return _msg;
}
inline void TShopItemTable::set_allocated_item(::network::TItemData* item) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.item_;
  }
  if (item) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(item);
    if (message_arena != submessage_arena) {
      item = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, item, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.item_ = item;
  // @@protoc_insertion_point(field_set_allocated:network.TShopItemTable.item)
}

// uint32 display_pos = 2;
inline void TShopItemTable::clear_display_pos() {
  _impl_.display_pos_ = 0u;
}
inline uint32_t TShopItemTable::_internal_display_pos() const {
  return _impl_.display_pos_;
}
inline uint32_t TShopItemTable::display_pos() const {
  // @@protoc_insertion_point(field_get:network.TShopItemTable.display_pos)
  return _internal_display_pos();
}
inline void TShopItemTable::_internal_set_display_pos(uint32_t value) {
  
  _impl_.display_pos_ = value;
}
inline void TShopItemTable::set_display_pos(uint32_t value) {
  _internal_set_display_pos(value);
  // @@protoc_insertion_point(field_set:network.TShopItemTable.display_pos)
}

// uint32 price_item_vnum = 3;
inline void TShopItemTable::clear_price_item_vnum() {
  _impl_.price_item_vnum_ = 0u;
}
inline uint32_t TShopItemTable::_internal_price_item_vnum() const {
  return _impl_.price_item_vnum_;
}
inline uint32_t TShopItemTable::price_item_vnum() const {
  // @@protoc_insertion_point(field_get:network.TShopItemTable.price_item_vnum)
  return _internal_price_item_vnum();
}
inline void TShopItemTable::_internal_set_price_item_vnum(uint32_t value) {
  
  _impl_.price_item_vnum_ = value;
}
inline void TShopItemTable::set_price_item_vnum(uint32_t value) {
  _internal_set_price_item_vnum(value);
  // @@protoc_insertion_point(field_set:network.TShopItemTable.price_item_vnum)
}

// bytes owner_name = 4;
inline void TShopItemTable::clear_owner_name() {
  _impl_.owner_name_.ClearToEmpty();
}
inline const std::string& TShopItemTable::owner_name() const {
  // @@protoc_insertion_point(field_get:network.TShopItemTable.owner_name)
  return _internal_owner_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TShopItemTable::set_owner_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.owner_name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.TShopItemTable.owner_name)
}
inline std::string* TShopItemTable::mutable_owner_name() {
  std::string* _s = _internal_mutable_owner_name();
  // @@protoc_insertion_point(field_mutable:network.TShopItemTable.owner_name)
  return _s;
}
inline const std::string& TShopItemTable::_internal_owner_name() const {
  return _impl_.owner_name_.Get();
}
inline void TShopItemTable::_internal_set_owner_name(const std::string& value) {
  
  _impl_.owner_name_.Set(value, GetArenaForAllocation());
}
inline std::string* TShopItemTable::_internal_mutable_owner_name() {
  
  return _impl_.owner_name_.Mutable(GetArenaForAllocation());
}
inline std::string* TShopItemTable::release_owner_name() {
  // @@protoc_insertion_point(field_release:network.TShopItemTable.owner_name)
  return _impl_.owner_name_.Release();
}
inline void TShopItemTable::set_allocated_owner_name(std::string* owner_name) {
  if (owner_name != nullptr) {
    
  } else {
    
  }
  _impl_.owner_name_.SetAllocated(owner_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.owner_name_.IsDefault()) {
    _impl_.owner_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.TShopItemTable.owner_name)
}

// uint32 insertion_time = 5;
inline void TShopItemTable::clear_insertion_time() {
  _impl_.insertion_time_ = 0u;
}
inline uint32_t TShopItemTable::_internal_insertion_time() const {
  return _impl_.insertion_time_;
}
inline uint32_t TShopItemTable::insertion_time() const {
  // @@protoc_insertion_point(field_get:network.TShopItemTable.insertion_time)
  return _internal_insertion_time();
}
inline void TShopItemTable::_internal_set_insertion_time(uint32_t value) {
  
  _impl_.insertion_time_ = value;
}
inline void TShopItemTable::set_insertion_time(uint32_t value) {
  _internal_set_insertion_time(value);
  // @@protoc_insertion_point(field_set:network.TShopItemTable.insertion_time)
}

// uint32 timeout_time = 6;
inline void TShopItemTable::clear_timeout_time() {
  _impl_.timeout_time_ = 0u;
}
inline uint32_t TShopItemTable::_internal_timeout_time() const {
  return _impl_.timeout_time_;
}
inline uint32_t TShopItemTable::timeout_time() const {
  // @@protoc_insertion_point(field_get:network.TShopItemTable.timeout_time)
  return _internal_timeout_time();
}
inline void TShopItemTable::_internal_set_timeout_time(uint32_t value) {
  
  _impl_.timeout_time_ = value;
}
inline void TShopItemTable::set_timeout_time(uint32_t value) {
  _internal_set_timeout_time(value);
  // @@protoc_insertion_point(field_set:network.TShopItemTable.timeout_time)
}

// uint32 auction_type = 7;
inline void TShopItemTable::clear_auction_type() {
  _impl_.auction_type_ = 0u;
}
inline uint32_t TShopItemTable::_internal_auction_type() const {
  return _impl_.auction_type_;
}
inline uint32_t TShopItemTable::auction_type() const {
  // @@protoc_insertion_point(field_get:network.TShopItemTable.auction_type)
  return _internal_auction_type();
}
inline void TShopItemTable::_internal_set_auction_type(uint32_t value) {
  
  _impl_.auction_type_ = value;
}
inline void TShopItemTable::set_auction_type(uint32_t value) {
  _internal_set_auction_type(value);
  // @@protoc_insertion_point(field_set:network.TShopItemTable.auction_type)
}

// uint32 map_index = 8;
inline void TShopItemTable::clear_map_index() {
  _impl_.map_index_ = 0u;
}
inline uint32_t TShopItemTable::_internal_map_index() const {
  return _impl_.map_index_;
}
inline uint32_t TShopItemTable::map_index() const {
  // @@protoc_insertion_point(field_get:network.TShopItemTable.map_index)
  return _internal_map_index();
}
inline void TShopItemTable::_internal_set_map_index(uint32_t value) {
  
  _impl_.map_index_ = value;
}
inline void TShopItemTable::set_map_index(uint32_t value) {
  _internal_set_map_index(value);
  // @@protoc_insertion_point(field_set:network.TShopItemTable.map_index)
}

// uint32 channel = 9;
inline void TShopItemTable::clear_channel() {
  _impl_.channel_ = 0u;
}
inline uint32_t TShopItemTable::_internal_channel() const {
  return _impl_.channel_;
}
inline uint32_t TShopItemTable::channel() const {
  // @@protoc_insertion_point(field_get:network.TShopItemTable.channel)
  return _internal_channel();
}
inline void TShopItemTable::_internal_set_channel(uint32_t value) {
  
  _impl_.channel_ = value;
}
inline void TShopItemTable::set_channel(uint32_t value) {
  _internal_set_channel(value);
  // @@protoc_insertion_point(field_set:network.TShopItemTable.channel)
}

// uint32 price_item_vnum2 = 10;
inline void TShopItemTable::clear_price_item_vnum2() {
  _impl_.price_item_vnum2_ = 0u;
}
inline uint32_t TShopItemTable::_internal_price_item_vnum2() const {
  return _impl_.price_item_vnum2_;
}
inline uint32_t TShopItemTable::price_item_vnum2() const {
  // @@protoc_insertion_point(field_get:network.TShopItemTable.price_item_vnum2)
  return _internal_price_item_vnum2();
}
inline void TShopItemTable::_internal_set_price_item_vnum2(uint32_t value) {
  
  _impl_.price_item_vnum2_ = value;
}
inline void TShopItemTable::set_price_item_vnum2(uint32_t value) {
  _internal_set_price_item_vnum2(value);
  // @@protoc_insertion_point(field_set:network.TShopItemTable.price_item_vnum2)
}

// uint32 price2 = 11;
inline void TShopItemTable::clear_price2() {
  _impl_.price2_ = 0u;
}
inline uint32_t TShopItemTable::_internal_price2() const {
  return _impl_.price2_;
}
inline uint32_t TShopItemTable::price2() const {
  // @@protoc_insertion_point(field_get:network.TShopItemTable.price2)
  return _internal_price2();
}
inline void TShopItemTable::_internal_set_price2(uint32_t value) {
  
  _impl_.price2_ = value;
}
inline void TShopItemTable::set_price2(uint32_t value) {
  _internal_set_price2(value);
  // @@protoc_insertion_point(field_set:network.TShopItemTable.price2)
}

// -------------------------------------------------------------------

// TShopExTabData

// bytes name = 1;
inline void TShopExTabData::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& TShopExTabData::name() const {
  // @@protoc_insertion_point(field_get:network.TShopExTabData.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TShopExTabData::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.TShopExTabData.name)
}
inline std::string* TShopExTabData::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:network.TShopExTabData.name)
  return _s;
}
inline const std::string& TShopExTabData::_internal_name() const {
  return _impl_.name_.Get();
}
inline void TShopExTabData::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* TShopExTabData::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* TShopExTabData::release_name() {
  // @@protoc_insertion_point(field_release:network.TShopExTabData.name)
  return _impl_.name_.Release();
}
inline void TShopExTabData::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.TShopExTabData.name)
}

// uint32 coin_type = 2;
inline void TShopExTabData::clear_coin_type() {
  _impl_.coin_type_ = 0u;
}
inline uint32_t TShopExTabData::_internal_coin_type() const {
  return _impl_.coin_type_;
}
inline uint32_t TShopExTabData::coin_type() const {
  // @@protoc_insertion_point(field_get:network.TShopExTabData.coin_type)
  return _internal_coin_type();
}
inline void TShopExTabData::_internal_set_coin_type(uint32_t value) {
  
  _impl_.coin_type_ = value;
}
inline void TShopExTabData::set_coin_type(uint32_t value) {
  _internal_set_coin_type(value);
  // @@protoc_insertion_point(field_set:network.TShopExTabData.coin_type)
}

// repeated .network.TShopItemTable items = 3;
inline int TShopExTabData::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int TShopExTabData::items_size() const {
  return _internal_items_size();
}
inline void TShopExTabData::clear_items() {
  _impl_.items_.Clear();
}
inline ::network::TShopItemTable* TShopExTabData::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:network.TShopExTabData.items)
  return _impl_.items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TShopItemTable >*
TShopExTabData::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:network.TShopExTabData.items)
  return &_impl_.items_;
}
inline const ::network::TShopItemTable& TShopExTabData::_internal_items(int index) const {
  return _impl_.items_.Get(index);
}
inline const ::network::TShopItemTable& TShopExTabData::items(int index) const {
  // @@protoc_insertion_point(field_get:network.TShopExTabData.items)
  return _internal_items(index);
}
inline ::network::TShopItemTable* TShopExTabData::_internal_add_items() {
  return _impl_.items_.Add();
}
inline ::network::TShopItemTable* TShopExTabData::add_items() {
  ::network::TShopItemTable* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:network.TShopExTabData.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TShopItemTable >&
TShopExTabData::items() const {
  // @@protoc_insertion_point(field_list:network.TShopExTabData.items)
  return _impl_.items_;
}

// -------------------------------------------------------------------

// TItemDropInfo

// uint32 vnum = 1;
inline void TItemDropInfo::clear_vnum() {
  _impl_.vnum_ = 0u;
}
inline uint32_t TItemDropInfo::_internal_vnum() const {
  return _impl_.vnum_;
}
inline uint32_t TItemDropInfo::vnum() const {
  // @@protoc_insertion_point(field_get:network.TItemDropInfo.vnum)
  return _internal_vnum();
}
inline void TItemDropInfo::_internal_set_vnum(uint32_t value) {
  
  _impl_.vnum_ = value;
}
inline void TItemDropInfo::set_vnum(uint32_t value) {
  _internal_set_vnum(value);
  // @@protoc_insertion_point(field_set:network.TItemDropInfo.vnum)
}

// uint32 count = 2;
inline void TItemDropInfo::clear_count() {
  _impl_.count_ = 0u;
}
inline uint32_t TItemDropInfo::_internal_count() const {
  return _impl_.count_;
}
inline uint32_t TItemDropInfo::count() const {
  // @@protoc_insertion_point(field_get:network.TItemDropInfo.count)
  return _internal_count();
}
inline void TItemDropInfo::_internal_set_count(uint32_t value) {
  
  _impl_.count_ = value;
}
inline void TItemDropInfo::set_count(uint32_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:network.TItemDropInfo.count)
}

// int32 min_level = 3;
inline void TItemDropInfo::clear_min_level() {
  _impl_.min_level_ = 0;
}
inline int32_t TItemDropInfo::_internal_min_level() const {
  return _impl_.min_level_;
}
inline int32_t TItemDropInfo::min_level() const {
  // @@protoc_insertion_point(field_get:network.TItemDropInfo.min_level)
  return _internal_min_level();
}
inline void TItemDropInfo::_internal_set_min_level(int32_t value) {
  
  _impl_.min_level_ = value;
}
inline void TItemDropInfo::set_min_level(int32_t value) {
  _internal_set_min_level(value);
  // @@protoc_insertion_point(field_set:network.TItemDropInfo.min_level)
}

// int32 max_level = 4;
inline void TItemDropInfo::clear_max_level() {
  _impl_.max_level_ = 0;
}
inline int32_t TItemDropInfo::_internal_max_level() const {
  return _impl_.max_level_;
}
inline int32_t TItemDropInfo::max_level() const {
  // @@protoc_insertion_point(field_get:network.TItemDropInfo.max_level)
  return _internal_max_level();
}
inline void TItemDropInfo::_internal_set_max_level(int32_t value) {
  
  _impl_.max_level_ = value;
}
inline void TItemDropInfo::set_max_level(int32_t value) {
  _internal_set_max_level(value);
  // @@protoc_insertion_point(field_set:network.TItemDropInfo.max_level)
}

// -------------------------------------------------------------------

// TItemAttribute

// uint32 type = 1;
inline void TItemAttribute::clear_type() {
  _impl_.type_ = 0u;
}
inline uint32_t TItemAttribute::_internal_type() const {
  return _impl_.type_;
}
inline uint32_t TItemAttribute::type() const {
  // @@protoc_insertion_point(field_get:network.TItemAttribute.type)
  return _internal_type();
}
inline void TItemAttribute::_internal_set_type(uint32_t value) {
  
  _impl_.type_ = value;
}
inline void TItemAttribute::set_type(uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:network.TItemAttribute.type)
}

// sint32 value = 2;
inline void TItemAttribute::clear_value() {
  _impl_.value_ = 0;
}
inline int32_t TItemAttribute::_internal_value() const {
  return _impl_.value_;
}
inline int32_t TItemAttribute::value() const {
  // @@protoc_insertion_point(field_get:network.TItemAttribute.value)
  return _internal_value();
}
inline void TItemAttribute::_internal_set_value(int32_t value) {
  
  _impl_.value_ = value;
}
inline void TItemAttribute::set_value(int32_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:network.TItemAttribute.value)
}

// -------------------------------------------------------------------

// TItemData

// uint32 id = 1;
inline void TItemData::clear_id() {
  _impl_.id_ = 0u;
}
inline uint32_t TItemData::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t TItemData::id() const {
  // @@protoc_insertion_point(field_get:network.TItemData.id)
  return _internal_id();
}
inline void TItemData::_internal_set_id(uint32_t value) {
  
  _impl_.id_ = value;
}
inline void TItemData::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:network.TItemData.id)
}

// uint32 vnum = 2;
inline void TItemData::clear_vnum() {
  _impl_.vnum_ = 0u;
}
inline uint32_t TItemData::_internal_vnum() const {
  return _impl_.vnum_;
}
inline uint32_t TItemData::vnum() const {
  // @@protoc_insertion_point(field_get:network.TItemData.vnum)
  return _internal_vnum();
}
inline void TItemData::_internal_set_vnum(uint32_t value) {
  
  _impl_.vnum_ = value;
}
inline void TItemData::set_vnum(uint32_t value) {
  _internal_set_vnum(value);
  // @@protoc_insertion_point(field_set:network.TItemData.vnum)
}

// uint32 count = 3;
inline void TItemData::clear_count() {
  _impl_.count_ = 0u;
}
inline uint32_t TItemData::_internal_count() const {
  return _impl_.count_;
}
inline uint32_t TItemData::count() const {
  // @@protoc_insertion_point(field_get:network.TItemData.count)
  return _internal_count();
}
inline void TItemData::_internal_set_count(uint32_t value) {
  
  _impl_.count_ = value;
}
inline void TItemData::set_count(uint32_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:network.TItemData.count)
}

// uint32 special_flag = 4;
inline void TItemData::clear_special_flag() {
  _impl_.special_flag_ = 0u;
}
inline uint32_t TItemData::_internal_special_flag() const {
  return _impl_.special_flag_;
}
inline uint32_t TItemData::special_flag() const {
  // @@protoc_insertion_point(field_get:network.TItemData.special_flag)
  return _internal_special_flag();
}
inline void TItemData::_internal_set_special_flag(uint32_t value) {
  
  _impl_.special_flag_ = value;
}
inline void TItemData::set_special_flag(uint32_t value) {
  _internal_set_special_flag(value);
  // @@protoc_insertion_point(field_set:network.TItemData.special_flag)
}

// repeated sint32 sockets = 5;
inline int TItemData::_internal_sockets_size() const {
  return _impl_.sockets_.size();
}
inline int TItemData::sockets_size() const {
  return _internal_sockets_size();
}
inline void TItemData::clear_sockets() {
  _impl_.sockets_.Clear();
}
inline int32_t TItemData::_internal_sockets(int index) const {
  return _impl_.sockets_.Get(index);
}
inline int32_t TItemData::sockets(int index) const {
  // @@protoc_insertion_point(field_get:network.TItemData.sockets)
  return _internal_sockets(index);
}
inline void TItemData::set_sockets(int index, int32_t value) {
  _impl_.sockets_.Set(index, value);
  // @@protoc_insertion_point(field_set:network.TItemData.sockets)
}
inline void TItemData::_internal_add_sockets(int32_t value) {
  _impl_.sockets_.Add(value);
}
inline void TItemData::add_sockets(int32_t value) {
  _internal_add_sockets(value);
  // @@protoc_insertion_point(field_add:network.TItemData.sockets)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TItemData::_internal_sockets() const {
  return _impl_.sockets_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TItemData::sockets() const {
  // @@protoc_insertion_point(field_list:network.TItemData.sockets)
  return _internal_sockets();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TItemData::_internal_mutable_sockets() {
  return &_impl_.sockets_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TItemData::mutable_sockets() {
  // @@protoc_insertion_point(field_mutable_list:network.TItemData.sockets)
  return _internal_mutable_sockets();
}

// repeated .network.TItemAttribute attributes = 6;
inline int TItemData::_internal_attributes_size() const {
  return _impl_.attributes_.size();
}
inline int TItemData::attributes_size() const {
  return _internal_attributes_size();
}
inline void TItemData::clear_attributes() {
  _impl_.attributes_.Clear();
}
inline ::network::TItemAttribute* TItemData::mutable_attributes(int index) {
  // @@protoc_insertion_point(field_mutable:network.TItemData.attributes)
  return _impl_.attributes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemAttribute >*
TItemData::mutable_attributes() {
  // @@protoc_insertion_point(field_mutable_list:network.TItemData.attributes)
  return &_impl_.attributes_;
}
inline const ::network::TItemAttribute& TItemData::_internal_attributes(int index) const {
  return _impl_.attributes_.Get(index);
}
inline const ::network::TItemAttribute& TItemData::attributes(int index) const {
  // @@protoc_insertion_point(field_get:network.TItemData.attributes)
  return _internal_attributes(index);
}
inline ::network::TItemAttribute* TItemData::_internal_add_attributes() {
  return _impl_.attributes_.Add();
}
inline ::network::TItemAttribute* TItemData::add_attributes() {
  ::network::TItemAttribute* _add = _internal_add_attributes();
  // @@protoc_insertion_point(field_add:network.TItemData.attributes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemAttribute >&
TItemData::attributes() const {
  // @@protoc_insertion_point(field_list:network.TItemData.attributes)
  return _impl_.attributes_;
}

// .network.TItemPos cell = 7;
inline bool TItemData::_internal_has_cell() const {
  return this != internal_default_instance() && _impl_.cell_ != nullptr;
}
inline bool TItemData::has_cell() const {
  return _internal_has_cell();
}
inline void TItemData::clear_cell() {
  if (GetArenaForAllocation() == nullptr && _impl_.cell_ != nullptr) {
    delete _impl_.cell_;
  }
  _impl_.cell_ = nullptr;
}
inline const ::network::TItemPos& TItemData::_internal_cell() const {
  const ::network::TItemPos* p = _impl_.cell_;
  return p != nullptr ? *p : reinterpret_cast<const ::network::TItemPos&>(
      ::network::_TItemPos_default_instance_);
}
inline const ::network::TItemPos& TItemData::cell() const {
  // @@protoc_insertion_point(field_get:network.TItemData.cell)
  return _internal_cell();
}
inline void TItemData::unsafe_arena_set_allocated_cell(
    ::network::TItemPos* cell) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cell_);
  }
  _impl_.cell_ = cell;
  if (cell) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:network.TItemData.cell)
}
inline ::network::TItemPos* TItemData::release_cell() {
  
  ::network::TItemPos* temp = _impl_.cell_;
  _impl_.cell_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::network::TItemPos* TItemData::unsafe_arena_release_cell() {
  // @@protoc_insertion_point(field_release:network.TItemData.cell)
  
  ::network::TItemPos* temp = _impl_.cell_;
  _impl_.cell_ = nullptr;
  return temp;
}
inline ::network::TItemPos* TItemData::_internal_mutable_cell() {
  
  if (_impl_.cell_ == nullptr) {
    auto* p = CreateMaybeMessage<::network::TItemPos>(GetArenaForAllocation());
    _impl_.cell_ = p;
  }
  return _impl_.cell_;
}
inline ::network::TItemPos* TItemData::mutable_cell() {
  ::network::TItemPos* _msg = _internal_mutable_cell();
  // @@protoc_insertion_point(field_mutable:network.TItemData.cell)
  return _msg;
}
inline void TItemData::set_allocated_cell(::network::TItemPos* cell) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.cell_;
  }
  if (cell) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(cell);
    if (message_arena != submessage_arena) {
      cell = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cell, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.cell_ = cell;
  // @@protoc_insertion_point(field_set_allocated:network.TItemData.cell)
}

// uint32 owner = 8;
inline void TItemData::clear_owner() {
  _impl_.owner_ = 0u;
}
inline uint32_t TItemData::_internal_owner() const {
  return _impl_.owner_;
}
inline uint32_t TItemData::owner() const {
  // @@protoc_insertion_point(field_get:network.TItemData.owner)
  return _internal_owner();
}
inline void TItemData::_internal_set_owner(uint32_t value) {
  
  _impl_.owner_ = value;
}
inline void TItemData::set_owner(uint32_t value) {
  _internal_set_owner(value);
  // @@protoc_insertion_point(field_set:network.TItemData.owner)
}

// int64 price = 9;
inline void TItemData::clear_price() {
  _impl_.price_ = int64_t{0};
}
inline int64_t TItemData::_internal_price() const {
  return _impl_.price_;
}
inline int64_t TItemData::price() const {
  // @@protoc_insertion_point(field_get:network.TItemData.price)
  return _internal_price();
}
inline void TItemData::_internal_set_price(int64_t value) {
  
  _impl_.price_ = value;
}
inline void TItemData::set_price(int64_t value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:network.TItemData.price)
}

// bool is_gm_owner = 10;
inline void TItemData::clear_is_gm_owner() {
  _impl_.is_gm_owner_ = false;
}
inline bool TItemData::_internal_is_gm_owner() const {
  return _impl_.is_gm_owner_;
}
inline bool TItemData::is_gm_owner() const {
  // @@protoc_insertion_point(field_get:network.TItemData.is_gm_owner)
  return _internal_is_gm_owner();
}
inline void TItemData::_internal_set_is_gm_owner(bool value) {
  
  _impl_.is_gm_owner_ = value;
}
inline void TItemData::set_is_gm_owner(bool value) {
  _internal_set_is_gm_owner(value);
  // @@protoc_insertion_point(field_set:network.TItemData.is_gm_owner)
}

// .network.TPetAdvancedTable pet_info = 11;
inline bool TItemData::_internal_has_pet_info() const {
  return this != internal_default_instance() && _impl_.pet_info_ != nullptr;
}
inline bool TItemData::has_pet_info() const {
  return _internal_has_pet_info();
}
inline const ::network::TPetAdvancedTable& TItemData::_internal_pet_info() const {
  const ::network::TPetAdvancedTable* p = _impl_.pet_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::network::TPetAdvancedTable&>(
      ::network::_TPetAdvancedTable_default_instance_);
}
inline const ::network::TPetAdvancedTable& TItemData::pet_info() const {
  // @@protoc_insertion_point(field_get:network.TItemData.pet_info)
  return _internal_pet_info();
}
inline void TItemData::unsafe_arena_set_allocated_pet_info(
    ::network::TPetAdvancedTable* pet_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pet_info_);
  }
  _impl_.pet_info_ = pet_info;
  if (pet_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:network.TItemData.pet_info)
}
inline ::network::TPetAdvancedTable* TItemData::release_pet_info() {
  
  ::network::TPetAdvancedTable* temp = _impl_.pet_info_;
  _impl_.pet_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::network::TPetAdvancedTable* TItemData::unsafe_arena_release_pet_info() {
  // @@protoc_insertion_point(field_release:network.TItemData.pet_info)
  
  ::network::TPetAdvancedTable* temp = _impl_.pet_info_;
  _impl_.pet_info_ = nullptr;
  return temp;
}
inline ::network::TPetAdvancedTable* TItemData::_internal_mutable_pet_info() {
  
  if (_impl_.pet_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::network::TPetAdvancedTable>(GetArenaForAllocation());
    _impl_.pet_info_ = p;
  }
  return _impl_.pet_info_;
}
inline ::network::TPetAdvancedTable* TItemData::mutable_pet_info() {
  ::network::TPetAdvancedTable* _msg = _internal_mutable_pet_info();
  // @@protoc_insertion_point(field_mutable:network.TItemData.pet_info)
  return _msg;
}
inline void TItemData::set_allocated_pet_info(::network::TPetAdvancedTable* pet_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pet_info_);
  }
  if (pet_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pet_info));
    if (message_arena != submessage_arena) {
      pet_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pet_info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pet_info_ = pet_info;
  // @@protoc_insertion_point(field_set_allocated:network.TItemData.pet_info)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace network

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_data_5fitem_2eproto
