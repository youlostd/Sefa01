// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gc_packets.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_gc_5fpackets_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_gc_5fpackets_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "protobuf_data.h"
#include "protobuf_data_item.h"
#include "protobuf_data_player.h"
#include "protobuf_data_pet.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_gc_5fpackets_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_gc_5fpackets_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gc_5fpackets_2eproto;
namespace network {
class GCAddFlyTargetingPacket;
struct GCAddFlyTargetingPacketDefaultTypeInternal;
extern GCAddFlyTargetingPacketDefaultTypeInternal _GCAddFlyTargetingPacket_default_instance_;
class GCAffectAddPacket;
struct GCAffectAddPacketDefaultTypeInternal;
extern GCAffectAddPacketDefaultTypeInternal _GCAffectAddPacket_default_instance_;
class GCAffectRemovePacket;
struct GCAffectRemovePacketDefaultTypeInternal;
extern GCAffectRemovePacketDefaultTypeInternal _GCAffectRemovePacket_default_instance_;
class GCAttributesToClientPacket;
struct GCAttributesToClientPacketDefaultTypeInternal;
extern GCAttributesToClientPacketDefaultTypeInternal _GCAttributesToClientPacket_default_instance_;
class GCAttributesToClientPacket_Attribute;
struct GCAttributesToClientPacket_AttributeDefaultTypeInternal;
extern GCAttributesToClientPacket_AttributeDefaultTypeInternal _GCAttributesToClientPacket_Attribute_default_instance_;
class GCAttrtreeLevelPacket;
struct GCAttrtreeLevelPacketDefaultTypeInternal;
extern GCAttrtreeLevelPacketDefaultTypeInternal _GCAttrtreeLevelPacket_default_instance_;
class GCAttrtreeRefinePacket;
struct GCAttrtreeRefinePacketDefaultTypeInternal;
extern GCAttrtreeRefinePacketDefaultTypeInternal _GCAttrtreeRefinePacket_default_instance_;
class GCAuctionAveragePricePacket;
struct GCAuctionAveragePricePacketDefaultTypeInternal;
extern GCAuctionAveragePricePacketDefaultTypeInternal _GCAuctionAveragePricePacket_default_instance_;
class GCAuctionMessagePacket;
struct GCAuctionMessagePacketDefaultTypeInternal;
extern GCAuctionMessagePacketDefaultTypeInternal _GCAuctionMessagePacket_default_instance_;
class GCAuctionOwnedGoldPacket;
struct GCAuctionOwnedGoldPacketDefaultTypeInternal;
extern GCAuctionOwnedGoldPacketDefaultTypeInternal _GCAuctionOwnedGoldPacket_default_instance_;
class GCAuctionOwnedItemPacket;
struct GCAuctionOwnedItemPacketDefaultTypeInternal;
extern GCAuctionOwnedItemPacketDefaultTypeInternal _GCAuctionOwnedItemPacket_default_instance_;
class GCAuctionSearchResultPacket;
struct GCAuctionSearchResultPacketDefaultTypeInternal;
extern GCAuctionSearchResultPacketDefaultTypeInternal _GCAuctionSearchResultPacket_default_instance_;
class GCAuctionShopGoldPacket;
struct GCAuctionShopGoldPacketDefaultTypeInternal;
extern GCAuctionShopGoldPacketDefaultTypeInternal _GCAuctionShopGoldPacket_default_instance_;
class GCAuctionShopGuestOpenPacket;
struct GCAuctionShopGuestOpenPacketDefaultTypeInternal;
extern GCAuctionShopGuestOpenPacketDefaultTypeInternal _GCAuctionShopGuestOpenPacket_default_instance_;
class GCAuctionShopGuestUpdatePacket;
struct GCAuctionShopGuestUpdatePacketDefaultTypeInternal;
extern GCAuctionShopGuestUpdatePacketDefaultTypeInternal _GCAuctionShopGuestUpdatePacket_default_instance_;
class GCAuctionShopHistoryPacket;
struct GCAuctionShopHistoryPacketDefaultTypeInternal;
extern GCAuctionShopHistoryPacketDefaultTypeInternal _GCAuctionShopHistoryPacket_default_instance_;
class GCAuctionShopOwnedPacket;
struct GCAuctionShopOwnedPacketDefaultTypeInternal;
extern GCAuctionShopOwnedPacketDefaultTypeInternal _GCAuctionShopOwnedPacket_default_instance_;
class GCAuctionShopPacket;
struct GCAuctionShopPacketDefaultTypeInternal;
extern GCAuctionShopPacketDefaultTypeInternal _GCAuctionShopPacket_default_instance_;
class GCAuctionShopTimeoutPacket;
struct GCAuctionShopTimeoutPacketDefaultTypeInternal;
extern GCAuctionShopTimeoutPacketDefaultTypeInternal _GCAuctionShopTimeoutPacket_default_instance_;
class GCAuthSuccessOpenIDPacket;
struct GCAuthSuccessOpenIDPacketDefaultTypeInternal;
extern GCAuthSuccessOpenIDPacketDefaultTypeInternal _GCAuthSuccessOpenIDPacket_default_instance_;
class GCAuthSuccessPacket;
struct GCAuthSuccessPacketDefaultTypeInternal;
extern GCAuthSuccessPacketDefaultTypeInternal _GCAuthSuccessPacket_default_instance_;
class GCBattlepassDataPacket;
struct GCBattlepassDataPacketDefaultTypeInternal;
extern GCBattlepassDataPacketDefaultTypeInternal _GCBattlepassDataPacket_default_instance_;
class GCCBTItemSetPacket;
struct GCCBTItemSetPacketDefaultTypeInternal;
extern GCCBTItemSetPacketDefaultTypeInternal _GCCBTItemSetPacket_default_instance_;
class GCChangeNamePacket;
struct GCChangeNamePacketDefaultTypeInternal;
extern GCChangeNamePacketDefaultTypeInternal _GCChangeNamePacket_default_instance_;
class GCChangeSkillGroupPacket;
struct GCChangeSkillGroupPacketDefaultTypeInternal;
extern GCChangeSkillGroupPacketDefaultTypeInternal _GCChangeSkillGroupPacket_default_instance_;
class GCChannelPacket;
struct GCChannelPacketDefaultTypeInternal;
extern GCChannelPacketDefaultTypeInternal _GCChannelPacket_default_instance_;
class GCCharacterAddPacket;
struct GCCharacterAddPacketDefaultTypeInternal;
extern GCCharacterAddPacketDefaultTypeInternal _GCCharacterAddPacket_default_instance_;
class GCCharacterAddPacket_AffectColor;
struct GCCharacterAddPacket_AffectColorDefaultTypeInternal;
extern GCCharacterAddPacket_AffectColorDefaultTypeInternal _GCCharacterAddPacket_AffectColor_default_instance_;
class GCCharacterAdditionalInfoPacket;
struct GCCharacterAdditionalInfoPacketDefaultTypeInternal;
extern GCCharacterAdditionalInfoPacketDefaultTypeInternal _GCCharacterAdditionalInfoPacket_default_instance_;
class GCCharacterDeletePacket;
struct GCCharacterDeletePacketDefaultTypeInternal;
extern GCCharacterDeletePacketDefaultTypeInternal _GCCharacterDeletePacket_default_instance_;
class GCCharacterShiningPacket;
struct GCCharacterShiningPacketDefaultTypeInternal;
extern GCCharacterShiningPacketDefaultTypeInternal _GCCharacterShiningPacket_default_instance_;
class GCCharacterUpdatePacket;
struct GCCharacterUpdatePacketDefaultTypeInternal;
extern GCCharacterUpdatePacketDefaultTypeInternal _GCCharacterUpdatePacket_default_instance_;
class GCChatPacket;
struct GCChatPacketDefaultTypeInternal;
extern GCChatPacketDefaultTypeInternal _GCChatPacket_default_instance_;
class GCCombatZoneRankingDataPacket;
struct GCCombatZoneRankingDataPacketDefaultTypeInternal;
extern GCCombatZoneRankingDataPacketDefaultTypeInternal _GCCombatZoneRankingDataPacket_default_instance_;
class GCCreateFailurePacket;
struct GCCreateFailurePacketDefaultTypeInternal;
extern GCCreateFailurePacketDefaultTypeInternal _GCCreateFailurePacket_default_instance_;
class GCCreateFlyPacket;
struct GCCreateFlyPacketDefaultTypeInternal;
extern GCCreateFlyPacketDefaultTypeInternal _GCCreateFlyPacket_default_instance_;
class GCCrystalRefinePacket;
struct GCCrystalRefinePacketDefaultTypeInternal;
extern GCCrystalRefinePacketDefaultTypeInternal _GCCrystalRefinePacket_default_instance_;
class GCCrystalUsingSlotPacket;
struct GCCrystalUsingSlotPacketDefaultTypeInternal;
extern GCCrystalUsingSlotPacketDefaultTypeInternal _GCCrystalUsingSlotPacket_default_instance_;
class GCDamageInfoPacket;
struct GCDamageInfoPacketDefaultTypeInternal;
extern GCDamageInfoPacketDefaultTypeInternal _GCDamageInfoPacket_default_instance_;
class GCDeadPacket;
struct GCDeadPacketDefaultTypeInternal;
extern GCDeadPacketDefaultTypeInternal _GCDeadPacket_default_instance_;
class GCDeleteSuccessPacket;
struct GCDeleteSuccessPacketDefaultTypeInternal;
extern GCDeleteSuccessPacketDefaultTypeInternal _GCDeleteSuccessPacket_default_instance_;
class GCDigMotionPacket;
struct GCDigMotionPacketDefaultTypeInternal;
extern GCDigMotionPacketDefaultTypeInternal _GCDigMotionPacket_default_instance_;
class GCDmgMeterPacket;
struct GCDmgMeterPacketDefaultTypeInternal;
extern GCDmgMeterPacketDefaultTypeInternal _GCDmgMeterPacket_default_instance_;
class GCDragonSoulRefinePacket;
struct GCDragonSoulRefinePacketDefaultTypeInternal;
extern GCDragonSoulRefinePacketDefaultTypeInternal _GCDragonSoulRefinePacket_default_instance_;
class GCDuelStartPacket;
struct GCDuelStartPacketDefaultTypeInternal;
extern GCDuelStartPacketDefaultTypeInternal _GCDuelStartPacket_default_instance_;
class GCDungeonDestinationPositionPacket;
struct GCDungeonDestinationPositionPacketDefaultTypeInternal;
extern GCDungeonDestinationPositionPacketDefaultTypeInternal _GCDungeonDestinationPositionPacket_default_instance_;
class GCEmpirePacket;
struct GCEmpirePacketDefaultTypeInternal;
extern GCEmpirePacketDefaultTypeInternal _GCEmpirePacket_default_instance_;
class GCEquipmentPageLoadPacket;
struct GCEquipmentPageLoadPacketDefaultTypeInternal;
extern GCEquipmentPageLoadPacketDefaultTypeInternal _GCEquipmentPageLoadPacket_default_instance_;
class GCEventCancelPacket;
struct GCEventCancelPacketDefaultTypeInternal;
extern GCEventCancelPacketDefaultTypeInternal _GCEventCancelPacket_default_instance_;
class GCEventEmpireWarLoadPacket;
struct GCEventEmpireWarLoadPacketDefaultTypeInternal;
extern GCEventEmpireWarLoadPacketDefaultTypeInternal _GCEventEmpireWarLoadPacket_default_instance_;
class GCEventEmpireWarUpdatePacket;
struct GCEventEmpireWarUpdatePacketDefaultTypeInternal;
extern GCEventEmpireWarUpdatePacketDefaultTypeInternal _GCEventEmpireWarUpdatePacket_default_instance_;
class GCEventRequestPacket;
struct GCEventRequestPacketDefaultTypeInternal;
extern GCEventRequestPacketDefaultTypeInternal _GCEventRequestPacket_default_instance_;
class GCExchangeAcceptPacket;
struct GCExchangeAcceptPacketDefaultTypeInternal;
extern GCExchangeAcceptPacketDefaultTypeInternal _GCExchangeAcceptPacket_default_instance_;
class GCExchangeGoldAddPacket;
struct GCExchangeGoldAddPacketDefaultTypeInternal;
extern GCExchangeGoldAddPacketDefaultTypeInternal _GCExchangeGoldAddPacket_default_instance_;
class GCExchangeItemAddPacket;
struct GCExchangeItemAddPacketDefaultTypeInternal;
extern GCExchangeItemAddPacketDefaultTypeInternal _GCExchangeItemAddPacket_default_instance_;
class GCExchangeItemDelPacket;
struct GCExchangeItemDelPacketDefaultTypeInternal;
extern GCExchangeItemDelPacketDefaultTypeInternal _GCExchangeItemDelPacket_default_instance_;
class GCExchangeStartPacket;
struct GCExchangeStartPacketDefaultTypeInternal;
extern GCExchangeStartPacketDefaultTypeInternal _GCExchangeStartPacket_default_instance_;
class GCFakeBuffSkillPacket;
struct GCFakeBuffSkillPacketDefaultTypeInternal;
extern GCFakeBuffSkillPacketDefaultTypeInternal _GCFakeBuffSkillPacket_default_instance_;
class GCFishingFailPacket;
struct GCFishingFailPacketDefaultTypeInternal;
extern GCFishingFailPacketDefaultTypeInternal _GCFishingFailPacket_default_instance_;
class GCFishingFishInfoPacket;
struct GCFishingFishInfoPacketDefaultTypeInternal;
extern GCFishingFishInfoPacketDefaultTypeInternal _GCFishingFishInfoPacket_default_instance_;
class GCFishingReactPacket;
struct GCFishingReactPacketDefaultTypeInternal;
extern GCFishingReactPacketDefaultTypeInternal _GCFishingReactPacket_default_instance_;
class GCFishingStartPacket;
struct GCFishingStartPacketDefaultTypeInternal;
extern GCFishingStartPacketDefaultTypeInternal _GCFishingStartPacket_default_instance_;
class GCFishingStopPacket;
struct GCFishingStopPacketDefaultTypeInternal;
extern GCFishingStopPacketDefaultTypeInternal _GCFishingStopPacket_default_instance_;
class GCFishingSuccessPacket;
struct GCFishingSuccessPacketDefaultTypeInternal;
extern GCFishingSuccessPacketDefaultTypeInternal _GCFishingSuccessPacket_default_instance_;
class GCFlyTargetingPacket;
struct GCFlyTargetingPacketDefaultTypeInternal;
extern GCFlyTargetingPacketDefaultTypeInternal _GCFlyTargetingPacket_default_instance_;
class GCGayaShopOpenPacket;
struct GCGayaShopOpenPacketDefaultTypeInternal;
extern GCGayaShopOpenPacketDefaultTypeInternal _GCGayaShopOpenPacket_default_instance_;
class GCGuildBattleStatsPacket;
struct GCGuildBattleStatsPacketDefaultTypeInternal;
extern GCGuildBattleStatsPacketDefaultTypeInternal _GCGuildBattleStatsPacket_default_instance_;
class GCGuildChangeExpPacket;
struct GCGuildChangeExpPacketDefaultTypeInternal;
extern GCGuildChangeExpPacketDefaultTypeInternal _GCGuildChangeExpPacket_default_instance_;
class GCGuildChangeMemberGeneralPacket;
struct GCGuildChangeMemberGeneralPacketDefaultTypeInternal;
extern GCGuildChangeMemberGeneralPacketDefaultTypeInternal _GCGuildChangeMemberGeneralPacket_default_instance_;
class GCGuildChangeMemberGradePacket;
struct GCGuildChangeMemberGradePacketDefaultTypeInternal;
extern GCGuildChangeMemberGradePacketDefaultTypeInternal _GCGuildChangeMemberGradePacket_default_instance_;
class GCGuildCommentsPacket;
struct GCGuildCommentsPacketDefaultTypeInternal;
extern GCGuildCommentsPacketDefaultTypeInternal _GCGuildCommentsPacket_default_instance_;
class GCGuildCommentsPacket_Comment;
struct GCGuildCommentsPacket_CommentDefaultTypeInternal;
extern GCGuildCommentsPacket_CommentDefaultTypeInternal _GCGuildCommentsPacket_Comment_default_instance_;
class GCGuildGradeAuthPacket;
struct GCGuildGradeAuthPacketDefaultTypeInternal;
extern GCGuildGradeAuthPacketDefaultTypeInternal _GCGuildGradeAuthPacket_default_instance_;
class GCGuildGradeNamePacket;
struct GCGuildGradeNamePacketDefaultTypeInternal;
extern GCGuildGradeNamePacketDefaultTypeInternal _GCGuildGradeNamePacket_default_instance_;
class GCGuildGradePacket;
struct GCGuildGradePacketDefaultTypeInternal;
extern GCGuildGradePacketDefaultTypeInternal _GCGuildGradePacket_default_instance_;
class GCGuildGradePacket_GradeData;
struct GCGuildGradePacket_GradeDataDefaultTypeInternal;
extern GCGuildGradePacket_GradeDataDefaultTypeInternal _GCGuildGradePacket_GradeData_default_instance_;
class GCGuildInfoPacket;
struct GCGuildInfoPacketDefaultTypeInternal;
extern GCGuildInfoPacketDefaultTypeInternal _GCGuildInfoPacket_default_instance_;
class GCGuildInvitePacket;
struct GCGuildInvitePacketDefaultTypeInternal;
extern GCGuildInvitePacketDefaultTypeInternal _GCGuildInvitePacket_default_instance_;
class GCGuildLadderListPacket;
struct GCGuildLadderListPacketDefaultTypeInternal;
extern GCGuildLadderListPacketDefaultTypeInternal _GCGuildLadderListPacket_default_instance_;
class GCGuildLadderSearchResultPacket;
struct GCGuildLadderSearchResultPacketDefaultTypeInternal;
extern GCGuildLadderSearchResultPacketDefaultTypeInternal _GCGuildLadderSearchResultPacket_default_instance_;
class GCGuildLoginPacket;
struct GCGuildLoginPacketDefaultTypeInternal;
extern GCGuildLoginPacketDefaultTypeInternal _GCGuildLoginPacket_default_instance_;
class GCGuildLogoutPacket;
struct GCGuildLogoutPacketDefaultTypeInternal;
extern GCGuildLogoutPacketDefaultTypeInternal _GCGuildLogoutPacket_default_instance_;
class GCGuildMemberLastPlayedPacket;
struct GCGuildMemberLastPlayedPacketDefaultTypeInternal;
extern GCGuildMemberLastPlayedPacketDefaultTypeInternal _GCGuildMemberLastPlayedPacket_default_instance_;
class GCGuildMemberLastPlayedPacket_MemberInfo;
struct GCGuildMemberLastPlayedPacket_MemberInfoDefaultTypeInternal;
extern GCGuildMemberLastPlayedPacket_MemberInfoDefaultTypeInternal _GCGuildMemberLastPlayedPacket_MemberInfo_default_instance_;
class GCGuildMemberListPacket;
struct GCGuildMemberListPacketDefaultTypeInternal;
extern GCGuildMemberListPacketDefaultTypeInternal _GCGuildMemberListPacket_default_instance_;
class GCGuildMoneyChangePacket;
struct GCGuildMoneyChangePacketDefaultTypeInternal;
extern GCGuildMoneyChangePacketDefaultTypeInternal _GCGuildMoneyChangePacket_default_instance_;
class GCGuildNamePacket;
struct GCGuildNamePacketDefaultTypeInternal;
extern GCGuildNamePacketDefaultTypeInternal _GCGuildNamePacket_default_instance_;
class GCGuildNamePacket_NameInfo;
struct GCGuildNamePacket_NameInfoDefaultTypeInternal;
extern GCGuildNamePacket_NameInfoDefaultTypeInternal _GCGuildNamePacket_NameInfo_default_instance_;
class GCGuildRankAndPointPacket;
struct GCGuildRankAndPointPacketDefaultTypeInternal;
extern GCGuildRankAndPointPacketDefaultTypeInternal _GCGuildRankAndPointPacket_default_instance_;
class GCGuildRemovePacket;
struct GCGuildRemovePacketDefaultTypeInternal;
extern GCGuildRemovePacketDefaultTypeInternal _GCGuildRemovePacket_default_instance_;
class GCGuildSafeboxAppendLogPacket;
struct GCGuildSafeboxAppendLogPacketDefaultTypeInternal;
extern GCGuildSafeboxAppendLogPacketDefaultTypeInternal _GCGuildSafeboxAppendLogPacket_default_instance_;
class GCGuildSafeboxGoldPacket;
struct GCGuildSafeboxGoldPacketDefaultTypeInternal;
extern GCGuildSafeboxGoldPacketDefaultTypeInternal _GCGuildSafeboxGoldPacket_default_instance_;
class GCGuildSafeboxLoadLogPacket;
struct GCGuildSafeboxLoadLogPacketDefaultTypeInternal;
extern GCGuildSafeboxLoadLogPacketDefaultTypeInternal _GCGuildSafeboxLoadLogPacket_default_instance_;
class GCGuildSafeboxOpenPacket;
struct GCGuildSafeboxOpenPacketDefaultTypeInternal;
extern GCGuildSafeboxOpenPacketDefaultTypeInternal _GCGuildSafeboxOpenPacket_default_instance_;
class GCGuildSkillInfoPacket;
struct GCGuildSkillInfoPacketDefaultTypeInternal;
extern GCGuildSkillInfoPacketDefaultTypeInternal _GCGuildSkillInfoPacket_default_instance_;
class GCGuildSymbolDataPacket;
struct GCGuildSymbolDataPacketDefaultTypeInternal;
extern GCGuildSymbolDataPacketDefaultTypeInternal _GCGuildSymbolDataPacket_default_instance_;
class GCGuildWarEndListPacket;
struct GCGuildWarEndListPacketDefaultTypeInternal;
extern GCGuildWarEndListPacketDefaultTypeInternal _GCGuildWarEndListPacket_default_instance_;
class GCGuildWarListPacket;
struct GCGuildWarListPacketDefaultTypeInternal;
extern GCGuildWarListPacketDefaultTypeInternal _GCGuildWarListPacket_default_instance_;
class GCGuildWarListPacket_WarInfo;
struct GCGuildWarListPacket_WarInfoDefaultTypeInternal;
extern GCGuildWarListPacket_WarInfoDefaultTypeInternal _GCGuildWarListPacket_WarInfo_default_instance_;
class GCGuildWarPacket;
struct GCGuildWarPacketDefaultTypeInternal;
extern GCGuildWarPacketDefaultTypeInternal _GCGuildWarPacket_default_instance_;
class GCGuildWarPointPacket;
struct GCGuildWarPointPacketDefaultTypeInternal;
extern GCGuildWarPointPacketDefaultTypeInternal _GCGuildWarPointPacket_default_instance_;
class GCHandshakePacket;
struct GCHandshakePacketDefaultTypeInternal;
extern GCHandshakePacketDefaultTypeInternal _GCHandshakePacket_default_instance_;
class GCHorseRefineInfoPacket;
struct GCHorseRefineInfoPacketDefaultTypeInternal;
extern GCHorseRefineInfoPacketDefaultTypeInternal _GCHorseRefineInfoPacket_default_instance_;
class GCHorseRefineResultPacket;
struct GCHorseRefineResultPacketDefaultTypeInternal;
extern GCHorseRefineResultPacketDefaultTypeInternal _GCHorseRefineResultPacket_default_instance_;
class GCHybridCryptKeysPacket;
struct GCHybridCryptKeysPacketDefaultTypeInternal;
extern GCHybridCryptKeysPacketDefaultTypeInternal _GCHybridCryptKeysPacket_default_instance_;
class GCHybridCryptSDBPacket;
struct GCHybridCryptSDBPacketDefaultTypeInternal;
extern GCHybridCryptSDBPacketDefaultTypeInternal _GCHybridCryptSDBPacket_default_instance_;
class GCInventoryMaxNumPacket;
struct GCInventoryMaxNumPacketDefaultTypeInternal;
extern GCInventoryMaxNumPacketDefaultTypeInternal _GCInventoryMaxNumPacket_default_instance_;
class GCItemGroundAddPacket;
struct GCItemGroundAddPacketDefaultTypeInternal;
extern GCItemGroundAddPacketDefaultTypeInternal _GCItemGroundAddPacket_default_instance_;
class GCItemGroundDeletePacket;
struct GCItemGroundDeletePacketDefaultTypeInternal;
extern GCItemGroundDeletePacketDefaultTypeInternal _GCItemGroundDeletePacket_default_instance_;
class GCItemOwnershipPacket;
struct GCItemOwnershipPacketDefaultTypeInternal;
extern GCItemOwnershipPacketDefaultTypeInternal _GCItemOwnershipPacket_default_instance_;
class GCItemSetPacket;
struct GCItemSetPacketDefaultTypeInternal;
extern GCItemSetPacketDefaultTypeInternal _GCItemSetPacket_default_instance_;
class GCItemUpdatePacket;
struct GCItemUpdatePacketDefaultTypeInternal;
extern GCItemUpdatePacketDefaultTypeInternal _GCItemUpdatePacket_default_instance_;
class GCKeyAgreementPacket;
struct GCKeyAgreementPacketDefaultTypeInternal;
extern GCKeyAgreementPacketDefaultTypeInternal _GCKeyAgreementPacket_default_instance_;
class GCLandListPacket;
struct GCLandListPacketDefaultTypeInternal;
extern GCLandListPacketDefaultTypeInternal _GCLandListPacket_default_instance_;
class GCLoginFailurePacket;
struct GCLoginFailurePacketDefaultTypeInternal;
extern GCLoginFailurePacketDefaultTypeInternal _GCLoginFailurePacket_default_instance_;
class GCLoginSuccessPacket;
struct GCLoginSuccessPacketDefaultTypeInternal;
extern GCLoginSuccessPacketDefaultTypeInternal _GCLoginSuccessPacket_default_instance_;
class GCLoginVersionAnswerPacket;
struct GCLoginVersionAnswerPacketDefaultTypeInternal;
extern GCLoginVersionAnswerPacketDefaultTypeInternal _GCLoginVersionAnswerPacket_default_instance_;
class GCLoverInfoPacket;
struct GCLoverInfoPacketDefaultTypeInternal;
extern GCLoverInfoPacketDefaultTypeInternal _GCLoverInfoPacket_default_instance_;
class GCLoverPointUpdatePacket;
struct GCLoverPointUpdatePacketDefaultTypeInternal;
extern GCLoverPointUpdatePacketDefaultTypeInternal _GCLoverPointUpdatePacket_default_instance_;
class GCMainCharacterPacket;
struct GCMainCharacterPacketDefaultTypeInternal;
extern GCMainCharacterPacketDefaultTypeInternal _GCMainCharacterPacket_default_instance_;
class GCMaintenanceInfoPacket;
struct GCMaintenanceInfoPacketDefaultTypeInternal;
extern GCMaintenanceInfoPacketDefaultTypeInternal _GCMaintenanceInfoPacket_default_instance_;
class GCMallOpenPacket;
struct GCMallOpenPacketDefaultTypeInternal;
extern GCMallOpenPacketDefaultTypeInternal _GCMallOpenPacket_default_instance_;
class GCMarkBlockPacket;
struct GCMarkBlockPacketDefaultTypeInternal;
extern GCMarkBlockPacketDefaultTypeInternal _GCMarkBlockPacket_default_instance_;
class GCMarkIDXListPacket;
struct GCMarkIDXListPacketDefaultTypeInternal;
extern GCMarkIDXListPacketDefaultTypeInternal _GCMarkIDXListPacket_default_instance_;
class GCMarkIDXListPacket_Element;
struct GCMarkIDXListPacket_ElementDefaultTypeInternal;
extern GCMarkIDXListPacket_ElementDefaultTypeInternal _GCMarkIDXListPacket_Element_default_instance_;
class GCMessengerBlockListPacket;
struct GCMessengerBlockListPacketDefaultTypeInternal;
extern GCMessengerBlockListPacketDefaultTypeInternal _GCMessengerBlockListPacket_default_instance_;
class GCMessengerBlockListPacket_Entry;
struct GCMessengerBlockListPacket_EntryDefaultTypeInternal;
extern GCMessengerBlockListPacket_EntryDefaultTypeInternal _GCMessengerBlockListPacket_Entry_default_instance_;
class GCMessengerBlockLoginPacket;
struct GCMessengerBlockLoginPacketDefaultTypeInternal;
extern GCMessengerBlockLoginPacketDefaultTypeInternal _GCMessengerBlockLoginPacket_default_instance_;
class GCMessengerBlockLogoutPacket;
struct GCMessengerBlockLogoutPacketDefaultTypeInternal;
extern GCMessengerBlockLogoutPacketDefaultTypeInternal _GCMessengerBlockLogoutPacket_default_instance_;
class GCMessengerListPacket;
struct GCMessengerListPacketDefaultTypeInternal;
extern GCMessengerListPacketDefaultTypeInternal _GCMessengerListPacket_default_instance_;
class GCMessengerListPacket_Entry;
struct GCMessengerListPacket_EntryDefaultTypeInternal;
extern GCMessengerListPacket_EntryDefaultTypeInternal _GCMessengerListPacket_Entry_default_instance_;
class GCMessengerLoginPacket;
struct GCMessengerLoginPacketDefaultTypeInternal;
extern GCMessengerLoginPacketDefaultTypeInternal _GCMessengerLoginPacket_default_instance_;
class GCMessengerLogoutPacket;
struct GCMessengerLogoutPacketDefaultTypeInternal;
extern GCMessengerLogoutPacketDefaultTypeInternal _GCMessengerLogoutPacket_default_instance_;
class GCMessengerMobilePacket;
struct GCMessengerMobilePacketDefaultTypeInternal;
extern GCMessengerMobilePacketDefaultTypeInternal _GCMessengerMobilePacket_default_instance_;
class GCMotionPacket;
struct GCMotionPacketDefaultTypeInternal;
extern GCMotionPacketDefaultTypeInternal _GCMotionPacket_default_instance_;
class GCMovePacket;
struct GCMovePacketDefaultTypeInternal;
extern GCMovePacketDefaultTypeInternal _GCMovePacket_default_instance_;
class GCNPCListPacket;
struct GCNPCListPacketDefaultTypeInternal;
extern GCNPCListPacketDefaultTypeInternal _GCNPCListPacket_default_instance_;
class GCNPCListPacket_Position;
struct GCNPCListPacket_PositionDefaultTypeInternal;
extern GCNPCListPacket_PositionDefaultTypeInternal _GCNPCListPacket_Position_default_instance_;
class GCObserverAddPacket;
struct GCObserverAddPacketDefaultTypeInternal;
extern GCObserverAddPacketDefaultTypeInternal _GCObserverAddPacket_default_instance_;
class GCObserverMovePacket;
struct GCObserverMovePacketDefaultTypeInternal;
extern GCObserverMovePacketDefaultTypeInternal _GCObserverMovePacket_default_instance_;
class GCObserverRemovePacket;
struct GCObserverRemovePacketDefaultTypeInternal;
extern GCObserverRemovePacketDefaultTypeInternal _GCObserverRemovePacket_default_instance_;
class GCOwnershipPacket;
struct GCOwnershipPacketDefaultTypeInternal;
extern GCOwnershipPacketDefaultTypeInternal _GCOwnershipPacket_default_instance_;
class GCPVPPacket;
struct GCPVPPacketDefaultTypeInternal;
extern GCPVPPacketDefaultTypeInternal _GCPVPPacket_default_instance_;
class GCPVPTeamPacket;
struct GCPVPTeamPacketDefaultTypeInternal;
extern GCPVPTeamPacketDefaultTypeInternal _GCPVPTeamPacket_default_instance_;
class GCPanamaPackPacket;
struct GCPanamaPackPacketDefaultTypeInternal;
extern GCPanamaPackPacketDefaultTypeInternal _GCPanamaPackPacket_default_instance_;
class GCPartyAddPacket;
struct GCPartyAddPacketDefaultTypeInternal;
extern GCPartyAddPacketDefaultTypeInternal _GCPartyAddPacket_default_instance_;
class GCPartyInvitePacket;
struct GCPartyInvitePacketDefaultTypeInternal;
extern GCPartyInvitePacketDefaultTypeInternal _GCPartyInvitePacket_default_instance_;
class GCPartyLinkPacket;
struct GCPartyLinkPacketDefaultTypeInternal;
extern GCPartyLinkPacketDefaultTypeInternal _GCPartyLinkPacket_default_instance_;
class GCPartyParameterPacket;
struct GCPartyParameterPacketDefaultTypeInternal;
extern GCPartyParameterPacketDefaultTypeInternal _GCPartyParameterPacket_default_instance_;
class GCPartyPositionPacket;
struct GCPartyPositionPacketDefaultTypeInternal;
extern GCPartyPositionPacketDefaultTypeInternal _GCPartyPositionPacket_default_instance_;
class GCPartyRemovePacket;
struct GCPartyRemovePacketDefaultTypeInternal;
extern GCPartyRemovePacketDefaultTypeInternal _GCPartyRemovePacket_default_instance_;
class GCPartyUnlinkPacket;
struct GCPartyUnlinkPacketDefaultTypeInternal;
extern GCPartyUnlinkPacketDefaultTypeInternal _GCPartyUnlinkPacket_default_instance_;
class GCPartyUpdatePacket;
struct GCPartyUpdatePacketDefaultTypeInternal;
extern GCPartyUpdatePacketDefaultTypeInternal _GCPartyUpdatePacket_default_instance_;
class GCPetAttrRefineInfoPacket;
struct GCPetAttrRefineInfoPacketDefaultTypeInternal;
extern GCPetAttrRefineInfoPacketDefaultTypeInternal _GCPetAttrRefineInfoPacket_default_instance_;
class GCPetEvolutionInfoPacket;
struct GCPetEvolutionInfoPacketDefaultTypeInternal;
extern GCPetEvolutionInfoPacketDefaultTypeInternal _GCPetEvolutionInfoPacket_default_instance_;
class GCPetEvolveResultPacket;
struct GCPetEvolveResultPacketDefaultTypeInternal;
extern GCPetEvolveResultPacketDefaultTypeInternal _GCPetEvolveResultPacket_default_instance_;
class GCPetSummonPacket;
struct GCPetSummonPacketDefaultTypeInternal;
extern GCPetSummonPacketDefaultTypeInternal _GCPetSummonPacket_default_instance_;
class GCPetUpdateAttrPacket;
struct GCPetUpdateAttrPacketDefaultTypeInternal;
extern GCPetUpdateAttrPacketDefaultTypeInternal _GCPetUpdateAttrPacket_default_instance_;
class GCPetUpdateExpPacket;
struct GCPetUpdateExpPacketDefaultTypeInternal;
extern GCPetUpdateExpPacketDefaultTypeInternal _GCPetUpdateExpPacket_default_instance_;
class GCPetUpdateLevelPacket;
struct GCPetUpdateLevelPacketDefaultTypeInternal;
extern GCPetUpdateLevelPacketDefaultTypeInternal _GCPetUpdateLevelPacket_default_instance_;
class GCPetUpdateSkillPacket;
struct GCPetUpdateSkillPacketDefaultTypeInternal;
extern GCPetUpdateSkillPacketDefaultTypeInternal _GCPetUpdateSkillPacket_default_instance_;
class GCPetUpdateSkillpowerPacket;
struct GCPetUpdateSkillpowerPacketDefaultTypeInternal;
extern GCPetUpdateSkillpowerPacketDefaultTypeInternal _GCPetUpdateSkillpowerPacket_default_instance_;
class GCPhasePacket;
struct GCPhasePacketDefaultTypeInternal;
extern GCPhasePacketDefaultTypeInternal _GCPhasePacket_default_instance_;
class GCPlayerCreateSuccessPacket;
struct GCPlayerCreateSuccessPacketDefaultTypeInternal;
extern GCPlayerCreateSuccessPacketDefaultTypeInternal _GCPlayerCreateSuccessPacket_default_instance_;
class GCPlayerOnlineInformationPacket;
struct GCPlayerOnlineInformationPacketDefaultTypeInternal;
extern GCPlayerOnlineInformationPacketDefaultTypeInternal _GCPlayerOnlineInformationPacket_default_instance_;
class GCPointChangePacket;
struct GCPointChangePacketDefaultTypeInternal;
extern GCPointChangePacketDefaultTypeInternal _GCPointChangePacket_default_instance_;
class GCPointsPacket;
struct GCPointsPacketDefaultTypeInternal;
extern GCPointsPacketDefaultTypeInternal _GCPointsPacket_default_instance_;
class GCPositionPacket;
struct GCPositionPacketDefaultTypeInternal;
extern GCPositionPacketDefaultTypeInternal _GCPositionPacket_default_instance_;
class GCQuestConfirmPacket;
struct GCQuestConfirmPacketDefaultTypeInternal;
extern GCQuestConfirmPacketDefaultTypeInternal _GCQuestConfirmPacket_default_instance_;
class GCQuestCooldownPacket;
struct GCQuestCooldownPacketDefaultTypeInternal;
extern GCQuestCooldownPacketDefaultTypeInternal _GCQuestCooldownPacket_default_instance_;
class GCQuestCooldownPacket_Cooldown;
struct GCQuestCooldownPacket_CooldownDefaultTypeInternal;
extern GCQuestCooldownPacket_CooldownDefaultTypeInternal _GCQuestCooldownPacket_Cooldown_default_instance_;
class GCQuestInfoPacket;
struct GCQuestInfoPacketDefaultTypeInternal;
extern GCQuestInfoPacketDefaultTypeInternal _GCQuestInfoPacket_default_instance_;
class GCQuickslotAddPacket;
struct GCQuickslotAddPacketDefaultTypeInternal;
extern GCQuickslotAddPacketDefaultTypeInternal _GCQuickslotAddPacket_default_instance_;
class GCQuickslotDelPacket;
struct GCQuickslotDelPacketDefaultTypeInternal;
extern GCQuickslotDelPacketDefaultTypeInternal _GCQuickslotDelPacket_default_instance_;
class GCQuickslotSwapPacket;
struct GCQuickslotSwapPacketDefaultTypeInternal;
extern GCQuickslotSwapPacketDefaultTypeInternal _GCQuickslotSwapPacket_default_instance_;
class GCRealPointSetPacket;
struct GCRealPointSetPacketDefaultTypeInternal;
extern GCRealPointSetPacketDefaultTypeInternal _GCRealPointSetPacket_default_instance_;
class GCRefineInformationPacket;
struct GCRefineInformationPacketDefaultTypeInternal;
extern GCRefineInformationPacketDefaultTypeInternal _GCRefineInformationPacket_default_instance_;
class GCRespondChannelStatusPacket;
struct GCRespondChannelStatusPacketDefaultTypeInternal;
extern GCRespondChannelStatusPacketDefaultTypeInternal _GCRespondChannelStatusPacket_default_instance_;
class GCRuneLevelupPacket;
struct GCRuneLevelupPacketDefaultTypeInternal;
extern GCRuneLevelupPacketDefaultTypeInternal _GCRuneLevelupPacket_default_instance_;
class GCRunePacket;
struct GCRunePacketDefaultTypeInternal;
extern GCRunePacketDefaultTypeInternal _GCRunePacket_default_instance_;
class GCRunePagePacket;
struct GCRunePagePacketDefaultTypeInternal;
extern GCRunePagePacketDefaultTypeInternal _GCRunePagePacket_default_instance_;
class GCRuneRefinePacket;
struct GCRuneRefinePacketDefaultTypeInternal;
extern GCRuneRefinePacketDefaultTypeInternal _GCRuneRefinePacket_default_instance_;
class GCSafeboxMoneyChangePacket;
struct GCSafeboxMoneyChangePacketDefaultTypeInternal;
extern GCSafeboxMoneyChangePacketDefaultTypeInternal _GCSafeboxMoneyChangePacket_default_instance_;
class GCSafeboxSizePacket;
struct GCSafeboxSizePacketDefaultTypeInternal;
extern GCSafeboxSizePacketDefaultTypeInternal _GCSafeboxSizePacket_default_instance_;
class GCScriptPacket;
struct GCScriptPacketDefaultTypeInternal;
extern GCScriptPacketDefaultTypeInternal _GCScriptPacket_default_instance_;
class GCSendCombatZonePacket;
struct GCSendCombatZonePacketDefaultTypeInternal;
extern GCSendCombatZonePacketDefaultTypeInternal _GCSendCombatZonePacket_default_instance_;
class GCSetVerifyKeyPacket;
struct GCSetVerifyKeyPacketDefaultTypeInternal;
extern GCSetVerifyKeyPacketDefaultTypeInternal _GCSetVerifyKeyPacket_default_instance_;
class GCShopExStartPacket;
struct GCShopExStartPacketDefaultTypeInternal;
extern GCShopExStartPacketDefaultTypeInternal _GCShopExStartPacket_default_instance_;
class GCShopSignPacket;
struct GCShopSignPacketDefaultTypeInternal;
extern GCShopSignPacketDefaultTypeInternal _GCShopSignPacket_default_instance_;
class GCShopStartPacket;
struct GCShopStartPacketDefaultTypeInternal;
extern GCShopStartPacketDefaultTypeInternal _GCShopStartPacket_default_instance_;
class GCShopUpdateItemPacket;
struct GCShopUpdateItemPacketDefaultTypeInternal;
extern GCShopUpdateItemPacketDefaultTypeInternal _GCShopUpdateItemPacket_default_instance_;
class GCSkillLevelPacket;
struct GCSkillLevelPacketDefaultTypeInternal;
extern GCSkillLevelPacketDefaultTypeInternal _GCSkillLevelPacket_default_instance_;
class GCSkillMotionPacket;
struct GCSkillMotionPacketDefaultTypeInternal;
extern GCSkillMotionPacketDefaultTypeInternal _GCSkillMotionPacket_default_instance_;
class GCSoulRefineInfoPacket;
struct GCSoulRefineInfoPacketDefaultTypeInternal;
extern GCSoulRefineInfoPacketDefaultTypeInternal _GCSoulRefineInfoPacket_default_instance_;
class GCSpecialEffectPacket;
struct GCSpecialEffectPacketDefaultTypeInternal;
extern GCSpecialEffectPacketDefaultTypeInternal _GCSpecialEffectPacket_default_instance_;
class GCSpecificEffectPacket;
struct GCSpecificEffectPacketDefaultTypeInternal;
extern GCSpecificEffectPacketDefaultTypeInternal _GCSpecificEffectPacket_default_instance_;
class GCStunPacket;
struct GCStunPacketDefaultTypeInternal;
extern GCStunPacketDefaultTypeInternal _GCStunPacket_default_instance_;
class GCSyncPositionPacket;
struct GCSyncPositionPacketDefaultTypeInternal;
extern GCSyncPositionPacketDefaultTypeInternal _GCSyncPositionPacket_default_instance_;
class GCTargetCreatePacket;
struct GCTargetCreatePacketDefaultTypeInternal;
extern GCTargetCreatePacketDefaultTypeInternal _GCTargetCreatePacket_default_instance_;
class GCTargetDeletePacket;
struct GCTargetDeletePacketDefaultTypeInternal;
extern GCTargetDeletePacketDefaultTypeInternal _GCTargetDeletePacket_default_instance_;
class GCTargetMonsterInfoPacket;
struct GCTargetMonsterInfoPacketDefaultTypeInternal;
extern GCTargetMonsterInfoPacketDefaultTypeInternal _GCTargetMonsterInfoPacket_default_instance_;
class GCTargetPacket;
struct GCTargetPacketDefaultTypeInternal;
extern GCTargetPacketDefaultTypeInternal _GCTargetPacket_default_instance_;
class GCTargetUpdatePacket;
struct GCTargetUpdatePacketDefaultTypeInternal;
extern GCTargetUpdatePacketDefaultTypeInternal _GCTargetUpdatePacket_default_instance_;
class GCTeamlerShowPacket;
struct GCTeamlerShowPacketDefaultTypeInternal;
extern GCTeamlerShowPacketDefaultTypeInternal _GCTeamlerShowPacket_default_instance_;
class GCTeamlerStatusPacket;
struct GCTeamlerStatusPacketDefaultTypeInternal;
extern GCTeamlerStatusPacketDefaultTypeInternal _GCTeamlerStatusPacket_default_instance_;
class GCTimePacket;
struct GCTimePacketDefaultTypeInternal;
extern GCTimePacketDefaultTypeInternal _GCTimePacket_default_instance_;
class GCUpdateCharacterScalePacket;
struct GCUpdateCharacterScalePacketDefaultTypeInternal;
extern GCUpdateCharacterScalePacketDefaultTypeInternal _GCUpdateCharacterScalePacket_default_instance_;
class GCViewEquipPacket;
struct GCViewEquipPacketDefaultTypeInternal;
extern GCViewEquipPacketDefaultTypeInternal _GCViewEquipPacket_default_instance_;
class GCWalkModePacket;
struct GCWalkModePacketDefaultTypeInternal;
extern GCWalkModePacketDefaultTypeInternal _GCWalkModePacket_default_instance_;
class GCWarpPacket;
struct GCWarpPacketDefaultTypeInternal;
extern GCWarpPacketDefaultTypeInternal _GCWarpPacket_default_instance_;
class GCWhisperPacket;
struct GCWhisperPacketDefaultTypeInternal;
extern GCWhisperPacketDefaultTypeInternal _GCWhisperPacket_default_instance_;
class GCWikiMobPacket;
struct GCWikiMobPacketDefaultTypeInternal;
extern GCWikiMobPacketDefaultTypeInternal _GCWikiMobPacket_default_instance_;
class GCWikiPacket;
struct GCWikiPacketDefaultTypeInternal;
extern GCWikiPacketDefaultTypeInternal _GCWikiPacket_default_instance_;
class GCXTrapCS1RequestPacket;
struct GCXTrapCS1RequestPacketDefaultTypeInternal;
extern GCXTrapCS1RequestPacketDefaultTypeInternal _GCXTrapCS1RequestPacket_default_instance_;
}  // namespace network
PROTOBUF_NAMESPACE_OPEN
template<> ::network::GCAddFlyTargetingPacket* Arena::CreateMaybeMessage<::network::GCAddFlyTargetingPacket>(Arena*);
template<> ::network::GCAffectAddPacket* Arena::CreateMaybeMessage<::network::GCAffectAddPacket>(Arena*);
template<> ::network::GCAffectRemovePacket* Arena::CreateMaybeMessage<::network::GCAffectRemovePacket>(Arena*);
template<> ::network::GCAttributesToClientPacket* Arena::CreateMaybeMessage<::network::GCAttributesToClientPacket>(Arena*);
template<> ::network::GCAttributesToClientPacket_Attribute* Arena::CreateMaybeMessage<::network::GCAttributesToClientPacket_Attribute>(Arena*);
template<> ::network::GCAttrtreeLevelPacket* Arena::CreateMaybeMessage<::network::GCAttrtreeLevelPacket>(Arena*);
template<> ::network::GCAttrtreeRefinePacket* Arena::CreateMaybeMessage<::network::GCAttrtreeRefinePacket>(Arena*);
template<> ::network::GCAuctionAveragePricePacket* Arena::CreateMaybeMessage<::network::GCAuctionAveragePricePacket>(Arena*);
template<> ::network::GCAuctionMessagePacket* Arena::CreateMaybeMessage<::network::GCAuctionMessagePacket>(Arena*);
template<> ::network::GCAuctionOwnedGoldPacket* Arena::CreateMaybeMessage<::network::GCAuctionOwnedGoldPacket>(Arena*);
template<> ::network::GCAuctionOwnedItemPacket* Arena::CreateMaybeMessage<::network::GCAuctionOwnedItemPacket>(Arena*);
template<> ::network::GCAuctionSearchResultPacket* Arena::CreateMaybeMessage<::network::GCAuctionSearchResultPacket>(Arena*);
template<> ::network::GCAuctionShopGoldPacket* Arena::CreateMaybeMessage<::network::GCAuctionShopGoldPacket>(Arena*);
template<> ::network::GCAuctionShopGuestOpenPacket* Arena::CreateMaybeMessage<::network::GCAuctionShopGuestOpenPacket>(Arena*);
template<> ::network::GCAuctionShopGuestUpdatePacket* Arena::CreateMaybeMessage<::network::GCAuctionShopGuestUpdatePacket>(Arena*);
template<> ::network::GCAuctionShopHistoryPacket* Arena::CreateMaybeMessage<::network::GCAuctionShopHistoryPacket>(Arena*);
template<> ::network::GCAuctionShopOwnedPacket* Arena::CreateMaybeMessage<::network::GCAuctionShopOwnedPacket>(Arena*);
template<> ::network::GCAuctionShopPacket* Arena::CreateMaybeMessage<::network::GCAuctionShopPacket>(Arena*);
template<> ::network::GCAuctionShopTimeoutPacket* Arena::CreateMaybeMessage<::network::GCAuctionShopTimeoutPacket>(Arena*);
template<> ::network::GCAuthSuccessOpenIDPacket* Arena::CreateMaybeMessage<::network::GCAuthSuccessOpenIDPacket>(Arena*);
template<> ::network::GCAuthSuccessPacket* Arena::CreateMaybeMessage<::network::GCAuthSuccessPacket>(Arena*);
template<> ::network::GCBattlepassDataPacket* Arena::CreateMaybeMessage<::network::GCBattlepassDataPacket>(Arena*);
template<> ::network::GCCBTItemSetPacket* Arena::CreateMaybeMessage<::network::GCCBTItemSetPacket>(Arena*);
template<> ::network::GCChangeNamePacket* Arena::CreateMaybeMessage<::network::GCChangeNamePacket>(Arena*);
template<> ::network::GCChangeSkillGroupPacket* Arena::CreateMaybeMessage<::network::GCChangeSkillGroupPacket>(Arena*);
template<> ::network::GCChannelPacket* Arena::CreateMaybeMessage<::network::GCChannelPacket>(Arena*);
template<> ::network::GCCharacterAddPacket* Arena::CreateMaybeMessage<::network::GCCharacterAddPacket>(Arena*);
template<> ::network::GCCharacterAddPacket_AffectColor* Arena::CreateMaybeMessage<::network::GCCharacterAddPacket_AffectColor>(Arena*);
template<> ::network::GCCharacterAdditionalInfoPacket* Arena::CreateMaybeMessage<::network::GCCharacterAdditionalInfoPacket>(Arena*);
template<> ::network::GCCharacterDeletePacket* Arena::CreateMaybeMessage<::network::GCCharacterDeletePacket>(Arena*);
template<> ::network::GCCharacterShiningPacket* Arena::CreateMaybeMessage<::network::GCCharacterShiningPacket>(Arena*);
template<> ::network::GCCharacterUpdatePacket* Arena::CreateMaybeMessage<::network::GCCharacterUpdatePacket>(Arena*);
template<> ::network::GCChatPacket* Arena::CreateMaybeMessage<::network::GCChatPacket>(Arena*);
template<> ::network::GCCombatZoneRankingDataPacket* Arena::CreateMaybeMessage<::network::GCCombatZoneRankingDataPacket>(Arena*);
template<> ::network::GCCreateFailurePacket* Arena::CreateMaybeMessage<::network::GCCreateFailurePacket>(Arena*);
template<> ::network::GCCreateFlyPacket* Arena::CreateMaybeMessage<::network::GCCreateFlyPacket>(Arena*);
template<> ::network::GCCrystalRefinePacket* Arena::CreateMaybeMessage<::network::GCCrystalRefinePacket>(Arena*);
template<> ::network::GCCrystalUsingSlotPacket* Arena::CreateMaybeMessage<::network::GCCrystalUsingSlotPacket>(Arena*);
template<> ::network::GCDamageInfoPacket* Arena::CreateMaybeMessage<::network::GCDamageInfoPacket>(Arena*);
template<> ::network::GCDeadPacket* Arena::CreateMaybeMessage<::network::GCDeadPacket>(Arena*);
template<> ::network::GCDeleteSuccessPacket* Arena::CreateMaybeMessage<::network::GCDeleteSuccessPacket>(Arena*);
template<> ::network::GCDigMotionPacket* Arena::CreateMaybeMessage<::network::GCDigMotionPacket>(Arena*);
template<> ::network::GCDmgMeterPacket* Arena::CreateMaybeMessage<::network::GCDmgMeterPacket>(Arena*);
template<> ::network::GCDragonSoulRefinePacket* Arena::CreateMaybeMessage<::network::GCDragonSoulRefinePacket>(Arena*);
template<> ::network::GCDuelStartPacket* Arena::CreateMaybeMessage<::network::GCDuelStartPacket>(Arena*);
template<> ::network::GCDungeonDestinationPositionPacket* Arena::CreateMaybeMessage<::network::GCDungeonDestinationPositionPacket>(Arena*);
template<> ::network::GCEmpirePacket* Arena::CreateMaybeMessage<::network::GCEmpirePacket>(Arena*);
template<> ::network::GCEquipmentPageLoadPacket* Arena::CreateMaybeMessage<::network::GCEquipmentPageLoadPacket>(Arena*);
template<> ::network::GCEventCancelPacket* Arena::CreateMaybeMessage<::network::GCEventCancelPacket>(Arena*);
template<> ::network::GCEventEmpireWarLoadPacket* Arena::CreateMaybeMessage<::network::GCEventEmpireWarLoadPacket>(Arena*);
template<> ::network::GCEventEmpireWarUpdatePacket* Arena::CreateMaybeMessage<::network::GCEventEmpireWarUpdatePacket>(Arena*);
template<> ::network::GCEventRequestPacket* Arena::CreateMaybeMessage<::network::GCEventRequestPacket>(Arena*);
template<> ::network::GCExchangeAcceptPacket* Arena::CreateMaybeMessage<::network::GCExchangeAcceptPacket>(Arena*);
template<> ::network::GCExchangeGoldAddPacket* Arena::CreateMaybeMessage<::network::GCExchangeGoldAddPacket>(Arena*);
template<> ::network::GCExchangeItemAddPacket* Arena::CreateMaybeMessage<::network::GCExchangeItemAddPacket>(Arena*);
template<> ::network::GCExchangeItemDelPacket* Arena::CreateMaybeMessage<::network::GCExchangeItemDelPacket>(Arena*);
template<> ::network::GCExchangeStartPacket* Arena::CreateMaybeMessage<::network::GCExchangeStartPacket>(Arena*);
template<> ::network::GCFakeBuffSkillPacket* Arena::CreateMaybeMessage<::network::GCFakeBuffSkillPacket>(Arena*);
template<> ::network::GCFishingFailPacket* Arena::CreateMaybeMessage<::network::GCFishingFailPacket>(Arena*);
template<> ::network::GCFishingFishInfoPacket* Arena::CreateMaybeMessage<::network::GCFishingFishInfoPacket>(Arena*);
template<> ::network::GCFishingReactPacket* Arena::CreateMaybeMessage<::network::GCFishingReactPacket>(Arena*);
template<> ::network::GCFishingStartPacket* Arena::CreateMaybeMessage<::network::GCFishingStartPacket>(Arena*);
template<> ::network::GCFishingStopPacket* Arena::CreateMaybeMessage<::network::GCFishingStopPacket>(Arena*);
template<> ::network::GCFishingSuccessPacket* Arena::CreateMaybeMessage<::network::GCFishingSuccessPacket>(Arena*);
template<> ::network::GCFlyTargetingPacket* Arena::CreateMaybeMessage<::network::GCFlyTargetingPacket>(Arena*);
template<> ::network::GCGayaShopOpenPacket* Arena::CreateMaybeMessage<::network::GCGayaShopOpenPacket>(Arena*);
template<> ::network::GCGuildBattleStatsPacket* Arena::CreateMaybeMessage<::network::GCGuildBattleStatsPacket>(Arena*);
template<> ::network::GCGuildChangeExpPacket* Arena::CreateMaybeMessage<::network::GCGuildChangeExpPacket>(Arena*);
template<> ::network::GCGuildChangeMemberGeneralPacket* Arena::CreateMaybeMessage<::network::GCGuildChangeMemberGeneralPacket>(Arena*);
template<> ::network::GCGuildChangeMemberGradePacket* Arena::CreateMaybeMessage<::network::GCGuildChangeMemberGradePacket>(Arena*);
template<> ::network::GCGuildCommentsPacket* Arena::CreateMaybeMessage<::network::GCGuildCommentsPacket>(Arena*);
template<> ::network::GCGuildCommentsPacket_Comment* Arena::CreateMaybeMessage<::network::GCGuildCommentsPacket_Comment>(Arena*);
template<> ::network::GCGuildGradeAuthPacket* Arena::CreateMaybeMessage<::network::GCGuildGradeAuthPacket>(Arena*);
template<> ::network::GCGuildGradeNamePacket* Arena::CreateMaybeMessage<::network::GCGuildGradeNamePacket>(Arena*);
template<> ::network::GCGuildGradePacket* Arena::CreateMaybeMessage<::network::GCGuildGradePacket>(Arena*);
template<> ::network::GCGuildGradePacket_GradeData* Arena::CreateMaybeMessage<::network::GCGuildGradePacket_GradeData>(Arena*);
template<> ::network::GCGuildInfoPacket* Arena::CreateMaybeMessage<::network::GCGuildInfoPacket>(Arena*);
template<> ::network::GCGuildInvitePacket* Arena::CreateMaybeMessage<::network::GCGuildInvitePacket>(Arena*);
template<> ::network::GCGuildLadderListPacket* Arena::CreateMaybeMessage<::network::GCGuildLadderListPacket>(Arena*);
template<> ::network::GCGuildLadderSearchResultPacket* Arena::CreateMaybeMessage<::network::GCGuildLadderSearchResultPacket>(Arena*);
template<> ::network::GCGuildLoginPacket* Arena::CreateMaybeMessage<::network::GCGuildLoginPacket>(Arena*);
template<> ::network::GCGuildLogoutPacket* Arena::CreateMaybeMessage<::network::GCGuildLogoutPacket>(Arena*);
template<> ::network::GCGuildMemberLastPlayedPacket* Arena::CreateMaybeMessage<::network::GCGuildMemberLastPlayedPacket>(Arena*);
template<> ::network::GCGuildMemberLastPlayedPacket_MemberInfo* Arena::CreateMaybeMessage<::network::GCGuildMemberLastPlayedPacket_MemberInfo>(Arena*);
template<> ::network::GCGuildMemberListPacket* Arena::CreateMaybeMessage<::network::GCGuildMemberListPacket>(Arena*);
template<> ::network::GCGuildMoneyChangePacket* Arena::CreateMaybeMessage<::network::GCGuildMoneyChangePacket>(Arena*);
template<> ::network::GCGuildNamePacket* Arena::CreateMaybeMessage<::network::GCGuildNamePacket>(Arena*);
template<> ::network::GCGuildNamePacket_NameInfo* Arena::CreateMaybeMessage<::network::GCGuildNamePacket_NameInfo>(Arena*);
template<> ::network::GCGuildRankAndPointPacket* Arena::CreateMaybeMessage<::network::GCGuildRankAndPointPacket>(Arena*);
template<> ::network::GCGuildRemovePacket* Arena::CreateMaybeMessage<::network::GCGuildRemovePacket>(Arena*);
template<> ::network::GCGuildSafeboxAppendLogPacket* Arena::CreateMaybeMessage<::network::GCGuildSafeboxAppendLogPacket>(Arena*);
template<> ::network::GCGuildSafeboxGoldPacket* Arena::CreateMaybeMessage<::network::GCGuildSafeboxGoldPacket>(Arena*);
template<> ::network::GCGuildSafeboxLoadLogPacket* Arena::CreateMaybeMessage<::network::GCGuildSafeboxLoadLogPacket>(Arena*);
template<> ::network::GCGuildSafeboxOpenPacket* Arena::CreateMaybeMessage<::network::GCGuildSafeboxOpenPacket>(Arena*);
template<> ::network::GCGuildSkillInfoPacket* Arena::CreateMaybeMessage<::network::GCGuildSkillInfoPacket>(Arena*);
template<> ::network::GCGuildSymbolDataPacket* Arena::CreateMaybeMessage<::network::GCGuildSymbolDataPacket>(Arena*);
template<> ::network::GCGuildWarEndListPacket* Arena::CreateMaybeMessage<::network::GCGuildWarEndListPacket>(Arena*);
template<> ::network::GCGuildWarListPacket* Arena::CreateMaybeMessage<::network::GCGuildWarListPacket>(Arena*);
template<> ::network::GCGuildWarListPacket_WarInfo* Arena::CreateMaybeMessage<::network::GCGuildWarListPacket_WarInfo>(Arena*);
template<> ::network::GCGuildWarPacket* Arena::CreateMaybeMessage<::network::GCGuildWarPacket>(Arena*);
template<> ::network::GCGuildWarPointPacket* Arena::CreateMaybeMessage<::network::GCGuildWarPointPacket>(Arena*);
template<> ::network::GCHandshakePacket* Arena::CreateMaybeMessage<::network::GCHandshakePacket>(Arena*);
template<> ::network::GCHorseRefineInfoPacket* Arena::CreateMaybeMessage<::network::GCHorseRefineInfoPacket>(Arena*);
template<> ::network::GCHorseRefineResultPacket* Arena::CreateMaybeMessage<::network::GCHorseRefineResultPacket>(Arena*);
template<> ::network::GCHybridCryptKeysPacket* Arena::CreateMaybeMessage<::network::GCHybridCryptKeysPacket>(Arena*);
template<> ::network::GCHybridCryptSDBPacket* Arena::CreateMaybeMessage<::network::GCHybridCryptSDBPacket>(Arena*);
template<> ::network::GCInventoryMaxNumPacket* Arena::CreateMaybeMessage<::network::GCInventoryMaxNumPacket>(Arena*);
template<> ::network::GCItemGroundAddPacket* Arena::CreateMaybeMessage<::network::GCItemGroundAddPacket>(Arena*);
template<> ::network::GCItemGroundDeletePacket* Arena::CreateMaybeMessage<::network::GCItemGroundDeletePacket>(Arena*);
template<> ::network::GCItemOwnershipPacket* Arena::CreateMaybeMessage<::network::GCItemOwnershipPacket>(Arena*);
template<> ::network::GCItemSetPacket* Arena::CreateMaybeMessage<::network::GCItemSetPacket>(Arena*);
template<> ::network::GCItemUpdatePacket* Arena::CreateMaybeMessage<::network::GCItemUpdatePacket>(Arena*);
template<> ::network::GCKeyAgreementPacket* Arena::CreateMaybeMessage<::network::GCKeyAgreementPacket>(Arena*);
template<> ::network::GCLandListPacket* Arena::CreateMaybeMessage<::network::GCLandListPacket>(Arena*);
template<> ::network::GCLoginFailurePacket* Arena::CreateMaybeMessage<::network::GCLoginFailurePacket>(Arena*);
template<> ::network::GCLoginSuccessPacket* Arena::CreateMaybeMessage<::network::GCLoginSuccessPacket>(Arena*);
template<> ::network::GCLoginVersionAnswerPacket* Arena::CreateMaybeMessage<::network::GCLoginVersionAnswerPacket>(Arena*);
template<> ::network::GCLoverInfoPacket* Arena::CreateMaybeMessage<::network::GCLoverInfoPacket>(Arena*);
template<> ::network::GCLoverPointUpdatePacket* Arena::CreateMaybeMessage<::network::GCLoverPointUpdatePacket>(Arena*);
template<> ::network::GCMainCharacterPacket* Arena::CreateMaybeMessage<::network::GCMainCharacterPacket>(Arena*);
template<> ::network::GCMaintenanceInfoPacket* Arena::CreateMaybeMessage<::network::GCMaintenanceInfoPacket>(Arena*);
template<> ::network::GCMallOpenPacket* Arena::CreateMaybeMessage<::network::GCMallOpenPacket>(Arena*);
template<> ::network::GCMarkBlockPacket* Arena::CreateMaybeMessage<::network::GCMarkBlockPacket>(Arena*);
template<> ::network::GCMarkIDXListPacket* Arena::CreateMaybeMessage<::network::GCMarkIDXListPacket>(Arena*);
template<> ::network::GCMarkIDXListPacket_Element* Arena::CreateMaybeMessage<::network::GCMarkIDXListPacket_Element>(Arena*);
template<> ::network::GCMessengerBlockListPacket* Arena::CreateMaybeMessage<::network::GCMessengerBlockListPacket>(Arena*);
template<> ::network::GCMessengerBlockListPacket_Entry* Arena::CreateMaybeMessage<::network::GCMessengerBlockListPacket_Entry>(Arena*);
template<> ::network::GCMessengerBlockLoginPacket* Arena::CreateMaybeMessage<::network::GCMessengerBlockLoginPacket>(Arena*);
template<> ::network::GCMessengerBlockLogoutPacket* Arena::CreateMaybeMessage<::network::GCMessengerBlockLogoutPacket>(Arena*);
template<> ::network::GCMessengerListPacket* Arena::CreateMaybeMessage<::network::GCMessengerListPacket>(Arena*);
template<> ::network::GCMessengerListPacket_Entry* Arena::CreateMaybeMessage<::network::GCMessengerListPacket_Entry>(Arena*);
template<> ::network::GCMessengerLoginPacket* Arena::CreateMaybeMessage<::network::GCMessengerLoginPacket>(Arena*);
template<> ::network::GCMessengerLogoutPacket* Arena::CreateMaybeMessage<::network::GCMessengerLogoutPacket>(Arena*);
template<> ::network::GCMessengerMobilePacket* Arena::CreateMaybeMessage<::network::GCMessengerMobilePacket>(Arena*);
template<> ::network::GCMotionPacket* Arena::CreateMaybeMessage<::network::GCMotionPacket>(Arena*);
template<> ::network::GCMovePacket* Arena::CreateMaybeMessage<::network::GCMovePacket>(Arena*);
template<> ::network::GCNPCListPacket* Arena::CreateMaybeMessage<::network::GCNPCListPacket>(Arena*);
template<> ::network::GCNPCListPacket_Position* Arena::CreateMaybeMessage<::network::GCNPCListPacket_Position>(Arena*);
template<> ::network::GCObserverAddPacket* Arena::CreateMaybeMessage<::network::GCObserverAddPacket>(Arena*);
template<> ::network::GCObserverMovePacket* Arena::CreateMaybeMessage<::network::GCObserverMovePacket>(Arena*);
template<> ::network::GCObserverRemovePacket* Arena::CreateMaybeMessage<::network::GCObserverRemovePacket>(Arena*);
template<> ::network::GCOwnershipPacket* Arena::CreateMaybeMessage<::network::GCOwnershipPacket>(Arena*);
template<> ::network::GCPVPPacket* Arena::CreateMaybeMessage<::network::GCPVPPacket>(Arena*);
template<> ::network::GCPVPTeamPacket* Arena::CreateMaybeMessage<::network::GCPVPTeamPacket>(Arena*);
template<> ::network::GCPanamaPackPacket* Arena::CreateMaybeMessage<::network::GCPanamaPackPacket>(Arena*);
template<> ::network::GCPartyAddPacket* Arena::CreateMaybeMessage<::network::GCPartyAddPacket>(Arena*);
template<> ::network::GCPartyInvitePacket* Arena::CreateMaybeMessage<::network::GCPartyInvitePacket>(Arena*);
template<> ::network::GCPartyLinkPacket* Arena::CreateMaybeMessage<::network::GCPartyLinkPacket>(Arena*);
template<> ::network::GCPartyParameterPacket* Arena::CreateMaybeMessage<::network::GCPartyParameterPacket>(Arena*);
template<> ::network::GCPartyPositionPacket* Arena::CreateMaybeMessage<::network::GCPartyPositionPacket>(Arena*);
template<> ::network::GCPartyRemovePacket* Arena::CreateMaybeMessage<::network::GCPartyRemovePacket>(Arena*);
template<> ::network::GCPartyUnlinkPacket* Arena::CreateMaybeMessage<::network::GCPartyUnlinkPacket>(Arena*);
template<> ::network::GCPartyUpdatePacket* Arena::CreateMaybeMessage<::network::GCPartyUpdatePacket>(Arena*);
template<> ::network::GCPetAttrRefineInfoPacket* Arena::CreateMaybeMessage<::network::GCPetAttrRefineInfoPacket>(Arena*);
template<> ::network::GCPetEvolutionInfoPacket* Arena::CreateMaybeMessage<::network::GCPetEvolutionInfoPacket>(Arena*);
template<> ::network::GCPetEvolveResultPacket* Arena::CreateMaybeMessage<::network::GCPetEvolveResultPacket>(Arena*);
template<> ::network::GCPetSummonPacket* Arena::CreateMaybeMessage<::network::GCPetSummonPacket>(Arena*);
template<> ::network::GCPetUpdateAttrPacket* Arena::CreateMaybeMessage<::network::GCPetUpdateAttrPacket>(Arena*);
template<> ::network::GCPetUpdateExpPacket* Arena::CreateMaybeMessage<::network::GCPetUpdateExpPacket>(Arena*);
template<> ::network::GCPetUpdateLevelPacket* Arena::CreateMaybeMessage<::network::GCPetUpdateLevelPacket>(Arena*);
template<> ::network::GCPetUpdateSkillPacket* Arena::CreateMaybeMessage<::network::GCPetUpdateSkillPacket>(Arena*);
template<> ::network::GCPetUpdateSkillpowerPacket* Arena::CreateMaybeMessage<::network::GCPetUpdateSkillpowerPacket>(Arena*);
template<> ::network::GCPhasePacket* Arena::CreateMaybeMessage<::network::GCPhasePacket>(Arena*);
template<> ::network::GCPlayerCreateSuccessPacket* Arena::CreateMaybeMessage<::network::GCPlayerCreateSuccessPacket>(Arena*);
template<> ::network::GCPlayerOnlineInformationPacket* Arena::CreateMaybeMessage<::network::GCPlayerOnlineInformationPacket>(Arena*);
template<> ::network::GCPointChangePacket* Arena::CreateMaybeMessage<::network::GCPointChangePacket>(Arena*);
template<> ::network::GCPointsPacket* Arena::CreateMaybeMessage<::network::GCPointsPacket>(Arena*);
template<> ::network::GCPositionPacket* Arena::CreateMaybeMessage<::network::GCPositionPacket>(Arena*);
template<> ::network::GCQuestConfirmPacket* Arena::CreateMaybeMessage<::network::GCQuestConfirmPacket>(Arena*);
template<> ::network::GCQuestCooldownPacket* Arena::CreateMaybeMessage<::network::GCQuestCooldownPacket>(Arena*);
template<> ::network::GCQuestCooldownPacket_Cooldown* Arena::CreateMaybeMessage<::network::GCQuestCooldownPacket_Cooldown>(Arena*);
template<> ::network::GCQuestInfoPacket* Arena::CreateMaybeMessage<::network::GCQuestInfoPacket>(Arena*);
template<> ::network::GCQuickslotAddPacket* Arena::CreateMaybeMessage<::network::GCQuickslotAddPacket>(Arena*);
template<> ::network::GCQuickslotDelPacket* Arena::CreateMaybeMessage<::network::GCQuickslotDelPacket>(Arena*);
template<> ::network::GCQuickslotSwapPacket* Arena::CreateMaybeMessage<::network::GCQuickslotSwapPacket>(Arena*);
template<> ::network::GCRealPointSetPacket* Arena::CreateMaybeMessage<::network::GCRealPointSetPacket>(Arena*);
template<> ::network::GCRefineInformationPacket* Arena::CreateMaybeMessage<::network::GCRefineInformationPacket>(Arena*);
template<> ::network::GCRespondChannelStatusPacket* Arena::CreateMaybeMessage<::network::GCRespondChannelStatusPacket>(Arena*);
template<> ::network::GCRuneLevelupPacket* Arena::CreateMaybeMessage<::network::GCRuneLevelupPacket>(Arena*);
template<> ::network::GCRunePacket* Arena::CreateMaybeMessage<::network::GCRunePacket>(Arena*);
template<> ::network::GCRunePagePacket* Arena::CreateMaybeMessage<::network::GCRunePagePacket>(Arena*);
template<> ::network::GCRuneRefinePacket* Arena::CreateMaybeMessage<::network::GCRuneRefinePacket>(Arena*);
template<> ::network::GCSafeboxMoneyChangePacket* Arena::CreateMaybeMessage<::network::GCSafeboxMoneyChangePacket>(Arena*);
template<> ::network::GCSafeboxSizePacket* Arena::CreateMaybeMessage<::network::GCSafeboxSizePacket>(Arena*);
template<> ::network::GCScriptPacket* Arena::CreateMaybeMessage<::network::GCScriptPacket>(Arena*);
template<> ::network::GCSendCombatZonePacket* Arena::CreateMaybeMessage<::network::GCSendCombatZonePacket>(Arena*);
template<> ::network::GCSetVerifyKeyPacket* Arena::CreateMaybeMessage<::network::GCSetVerifyKeyPacket>(Arena*);
template<> ::network::GCShopExStartPacket* Arena::CreateMaybeMessage<::network::GCShopExStartPacket>(Arena*);
template<> ::network::GCShopSignPacket* Arena::CreateMaybeMessage<::network::GCShopSignPacket>(Arena*);
template<> ::network::GCShopStartPacket* Arena::CreateMaybeMessage<::network::GCShopStartPacket>(Arena*);
template<> ::network::GCShopUpdateItemPacket* Arena::CreateMaybeMessage<::network::GCShopUpdateItemPacket>(Arena*);
template<> ::network::GCSkillLevelPacket* Arena::CreateMaybeMessage<::network::GCSkillLevelPacket>(Arena*);
template<> ::network::GCSkillMotionPacket* Arena::CreateMaybeMessage<::network::GCSkillMotionPacket>(Arena*);
template<> ::network::GCSoulRefineInfoPacket* Arena::CreateMaybeMessage<::network::GCSoulRefineInfoPacket>(Arena*);
template<> ::network::GCSpecialEffectPacket* Arena::CreateMaybeMessage<::network::GCSpecialEffectPacket>(Arena*);
template<> ::network::GCSpecificEffectPacket* Arena::CreateMaybeMessage<::network::GCSpecificEffectPacket>(Arena*);
template<> ::network::GCStunPacket* Arena::CreateMaybeMessage<::network::GCStunPacket>(Arena*);
template<> ::network::GCSyncPositionPacket* Arena::CreateMaybeMessage<::network::GCSyncPositionPacket>(Arena*);
template<> ::network::GCTargetCreatePacket* Arena::CreateMaybeMessage<::network::GCTargetCreatePacket>(Arena*);
template<> ::network::GCTargetDeletePacket* Arena::CreateMaybeMessage<::network::GCTargetDeletePacket>(Arena*);
template<> ::network::GCTargetMonsterInfoPacket* Arena::CreateMaybeMessage<::network::GCTargetMonsterInfoPacket>(Arena*);
template<> ::network::GCTargetPacket* Arena::CreateMaybeMessage<::network::GCTargetPacket>(Arena*);
template<> ::network::GCTargetUpdatePacket* Arena::CreateMaybeMessage<::network::GCTargetUpdatePacket>(Arena*);
template<> ::network::GCTeamlerShowPacket* Arena::CreateMaybeMessage<::network::GCTeamlerShowPacket>(Arena*);
template<> ::network::GCTeamlerStatusPacket* Arena::CreateMaybeMessage<::network::GCTeamlerStatusPacket>(Arena*);
template<> ::network::GCTimePacket* Arena::CreateMaybeMessage<::network::GCTimePacket>(Arena*);
template<> ::network::GCUpdateCharacterScalePacket* Arena::CreateMaybeMessage<::network::GCUpdateCharacterScalePacket>(Arena*);
template<> ::network::GCViewEquipPacket* Arena::CreateMaybeMessage<::network::GCViewEquipPacket>(Arena*);
template<> ::network::GCWalkModePacket* Arena::CreateMaybeMessage<::network::GCWalkModePacket>(Arena*);
template<> ::network::GCWarpPacket* Arena::CreateMaybeMessage<::network::GCWarpPacket>(Arena*);
template<> ::network::GCWhisperPacket* Arena::CreateMaybeMessage<::network::GCWhisperPacket>(Arena*);
template<> ::network::GCWikiMobPacket* Arena::CreateMaybeMessage<::network::GCWikiMobPacket>(Arena*);
template<> ::network::GCWikiPacket* Arena::CreateMaybeMessage<::network::GCWikiPacket>(Arena*);
template<> ::network::GCXTrapCS1RequestPacket* Arena::CreateMaybeMessage<::network::GCXTrapCS1RequestPacket>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace network {

// ===================================================================

class GCSetVerifyKeyPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCSetVerifyKeyPacket) */ {
 public:
  inline GCSetVerifyKeyPacket() : GCSetVerifyKeyPacket(nullptr) {}
  ~GCSetVerifyKeyPacket() override;
  explicit PROTOBUF_CONSTEXPR GCSetVerifyKeyPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCSetVerifyKeyPacket(const GCSetVerifyKeyPacket& from);
  GCSetVerifyKeyPacket(GCSetVerifyKeyPacket&& from) noexcept
    : GCSetVerifyKeyPacket() {
    *this = ::std::move(from);
  }

  inline GCSetVerifyKeyPacket& operator=(const GCSetVerifyKeyPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCSetVerifyKeyPacket& operator=(GCSetVerifyKeyPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCSetVerifyKeyPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCSetVerifyKeyPacket* internal_default_instance() {
    return reinterpret_cast<const GCSetVerifyKeyPacket*>(
               &_GCSetVerifyKeyPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GCSetVerifyKeyPacket& a, GCSetVerifyKeyPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCSetVerifyKeyPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCSetVerifyKeyPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCSetVerifyKeyPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCSetVerifyKeyPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCSetVerifyKeyPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCSetVerifyKeyPacket& from) {
    GCSetVerifyKeyPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCSetVerifyKeyPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCSetVerifyKeyPacket";
  }
  protected:
  explicit GCSetVerifyKeyPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVerifyKeyFieldNumber = 1,
  };
  // uint32 verify_key = 1;
  void clear_verify_key();
  uint32_t verify_key() const;
  void set_verify_key(uint32_t value);
  private:
  uint32_t _internal_verify_key() const;
  void _internal_set_verify_key(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCSetVerifyKeyPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t verify_key_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCLoginFailurePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCLoginFailurePacket) */ {
 public:
  inline GCLoginFailurePacket() : GCLoginFailurePacket(nullptr) {}
  ~GCLoginFailurePacket() override;
  explicit PROTOBUF_CONSTEXPR GCLoginFailurePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCLoginFailurePacket(const GCLoginFailurePacket& from);
  GCLoginFailurePacket(GCLoginFailurePacket&& from) noexcept
    : GCLoginFailurePacket() {
    *this = ::std::move(from);
  }

  inline GCLoginFailurePacket& operator=(const GCLoginFailurePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCLoginFailurePacket& operator=(GCLoginFailurePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCLoginFailurePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCLoginFailurePacket* internal_default_instance() {
    return reinterpret_cast<const GCLoginFailurePacket*>(
               &_GCLoginFailurePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GCLoginFailurePacket& a, GCLoginFailurePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCLoginFailurePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCLoginFailurePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCLoginFailurePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCLoginFailurePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCLoginFailurePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCLoginFailurePacket& from) {
    GCLoginFailurePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCLoginFailurePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCLoginFailurePacket";
  }
  protected:
  explicit GCLoginFailurePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kDataFieldNumber = 2,
  };
  // bytes status = 1;
  void clear_status();
  const std::string& status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status();
  PROTOBUF_NODISCARD std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // int32 data = 2;
  void clear_data();
  int32_t data() const;
  void set_data(int32_t value);
  private:
  int32_t _internal_data() const;
  void _internal_set_data(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCLoginFailurePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
    int32_t data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCCreateFailurePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCCreateFailurePacket) */ {
 public:
  inline GCCreateFailurePacket() : GCCreateFailurePacket(nullptr) {}
  ~GCCreateFailurePacket() override;
  explicit PROTOBUF_CONSTEXPR GCCreateFailurePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCCreateFailurePacket(const GCCreateFailurePacket& from);
  GCCreateFailurePacket(GCCreateFailurePacket&& from) noexcept
    : GCCreateFailurePacket() {
    *this = ::std::move(from);
  }

  inline GCCreateFailurePacket& operator=(const GCCreateFailurePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCCreateFailurePacket& operator=(GCCreateFailurePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCCreateFailurePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCCreateFailurePacket* internal_default_instance() {
    return reinterpret_cast<const GCCreateFailurePacket*>(
               &_GCCreateFailurePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GCCreateFailurePacket& a, GCCreateFailurePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCCreateFailurePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCCreateFailurePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCCreateFailurePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCCreateFailurePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCCreateFailurePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCCreateFailurePacket& from) {
    GCCreateFailurePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCCreateFailurePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCCreateFailurePacket";
  }
  protected:
  explicit GCCreateFailurePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
  };
  // uint32 type = 1;
  void clear_type();
  uint32_t type() const;
  void set_type(uint32_t value);
  private:
  uint32_t _internal_type() const;
  void _internal_set_type(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCCreateFailurePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCDeleteSuccessPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCDeleteSuccessPacket) */ {
 public:
  inline GCDeleteSuccessPacket() : GCDeleteSuccessPacket(nullptr) {}
  ~GCDeleteSuccessPacket() override;
  explicit PROTOBUF_CONSTEXPR GCDeleteSuccessPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCDeleteSuccessPacket(const GCDeleteSuccessPacket& from);
  GCDeleteSuccessPacket(GCDeleteSuccessPacket&& from) noexcept
    : GCDeleteSuccessPacket() {
    *this = ::std::move(from);
  }

  inline GCDeleteSuccessPacket& operator=(const GCDeleteSuccessPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCDeleteSuccessPacket& operator=(GCDeleteSuccessPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCDeleteSuccessPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCDeleteSuccessPacket* internal_default_instance() {
    return reinterpret_cast<const GCDeleteSuccessPacket*>(
               &_GCDeleteSuccessPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GCDeleteSuccessPacket& a, GCDeleteSuccessPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCDeleteSuccessPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCDeleteSuccessPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCDeleteSuccessPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCDeleteSuccessPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCDeleteSuccessPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCDeleteSuccessPacket& from) {
    GCDeleteSuccessPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCDeleteSuccessPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCDeleteSuccessPacket";
  }
  protected:
  explicit GCDeleteSuccessPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIndexFieldNumber = 1,
  };
  // uint32 account_index = 1;
  void clear_account_index();
  uint32_t account_index() const;
  void set_account_index(uint32_t value);
  private:
  uint32_t _internal_account_index() const;
  void _internal_set_account_index(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCDeleteSuccessPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t account_index_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCPlayerCreateSuccessPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCPlayerCreateSuccessPacket) */ {
 public:
  inline GCPlayerCreateSuccessPacket() : GCPlayerCreateSuccessPacket(nullptr) {}
  ~GCPlayerCreateSuccessPacket() override;
  explicit PROTOBUF_CONSTEXPR GCPlayerCreateSuccessPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCPlayerCreateSuccessPacket(const GCPlayerCreateSuccessPacket& from);
  GCPlayerCreateSuccessPacket(GCPlayerCreateSuccessPacket&& from) noexcept
    : GCPlayerCreateSuccessPacket() {
    *this = ::std::move(from);
  }

  inline GCPlayerCreateSuccessPacket& operator=(const GCPlayerCreateSuccessPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCPlayerCreateSuccessPacket& operator=(GCPlayerCreateSuccessPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCPlayerCreateSuccessPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCPlayerCreateSuccessPacket* internal_default_instance() {
    return reinterpret_cast<const GCPlayerCreateSuccessPacket*>(
               &_GCPlayerCreateSuccessPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GCPlayerCreateSuccessPacket& a, GCPlayerCreateSuccessPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCPlayerCreateSuccessPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCPlayerCreateSuccessPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCPlayerCreateSuccessPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCPlayerCreateSuccessPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCPlayerCreateSuccessPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCPlayerCreateSuccessPacket& from) {
    GCPlayerCreateSuccessPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCPlayerCreateSuccessPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCPlayerCreateSuccessPacket";
  }
  protected:
  explicit GCPlayerCreateSuccessPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerFieldNumber = 2,
    kAccountIndexFieldNumber = 1,
  };
  // .network.TSimplePlayer player = 2;
  bool has_player() const;
  private:
  bool _internal_has_player() const;
  public:
  void clear_player();
  const ::network::TSimplePlayer& player() const;
  PROTOBUF_NODISCARD ::network::TSimplePlayer* release_player();
  ::network::TSimplePlayer* mutable_player();
  void set_allocated_player(::network::TSimplePlayer* player);
  private:
  const ::network::TSimplePlayer& _internal_player() const;
  ::network::TSimplePlayer* _internal_mutable_player();
  public:
  void unsafe_arena_set_allocated_player(
      ::network::TSimplePlayer* player);
  ::network::TSimplePlayer* unsafe_arena_release_player();

  // uint32 account_index = 1;
  void clear_account_index();
  uint32_t account_index() const;
  void set_account_index(uint32_t value);
  private:
  uint32_t _internal_account_index() const;
  void _internal_set_account_index(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCPlayerCreateSuccessPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::network::TSimplePlayer* player_;
    uint32_t account_index_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCEmpirePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCEmpirePacket) */ {
 public:
  inline GCEmpirePacket() : GCEmpirePacket(nullptr) {}
  ~GCEmpirePacket() override;
  explicit PROTOBUF_CONSTEXPR GCEmpirePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCEmpirePacket(const GCEmpirePacket& from);
  GCEmpirePacket(GCEmpirePacket&& from) noexcept
    : GCEmpirePacket() {
    *this = ::std::move(from);
  }

  inline GCEmpirePacket& operator=(const GCEmpirePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCEmpirePacket& operator=(GCEmpirePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCEmpirePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCEmpirePacket* internal_default_instance() {
    return reinterpret_cast<const GCEmpirePacket*>(
               &_GCEmpirePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GCEmpirePacket& a, GCEmpirePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCEmpirePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCEmpirePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCEmpirePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCEmpirePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCEmpirePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCEmpirePacket& from) {
    GCEmpirePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCEmpirePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCEmpirePacket";
  }
  protected:
  explicit GCEmpirePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmpireFieldNumber = 1,
  };
  // uint32 empire = 1;
  void clear_empire();
  uint32_t empire() const;
  void set_empire(uint32_t value);
  private:
  uint32_t _internal_empire() const;
  void _internal_set_empire(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCEmpirePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t empire_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCLoginSuccessPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCLoginSuccessPacket) */ {
 public:
  inline GCLoginSuccessPacket() : GCLoginSuccessPacket(nullptr) {}
  ~GCLoginSuccessPacket() override;
  explicit PROTOBUF_CONSTEXPR GCLoginSuccessPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCLoginSuccessPacket(const GCLoginSuccessPacket& from);
  GCLoginSuccessPacket(GCLoginSuccessPacket&& from) noexcept
    : GCLoginSuccessPacket() {
    *this = ::std::move(from);
  }

  inline GCLoginSuccessPacket& operator=(const GCLoginSuccessPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCLoginSuccessPacket& operator=(GCLoginSuccessPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCLoginSuccessPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCLoginSuccessPacket* internal_default_instance() {
    return reinterpret_cast<const GCLoginSuccessPacket*>(
               &_GCLoginSuccessPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GCLoginSuccessPacket& a, GCLoginSuccessPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCLoginSuccessPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCLoginSuccessPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCLoginSuccessPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCLoginSuccessPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCLoginSuccessPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCLoginSuccessPacket& from) {
    GCLoginSuccessPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCLoginSuccessPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCLoginSuccessPacket";
  }
  protected:
  explicit GCLoginSuccessPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayersFieldNumber = 1,
    kHandleFieldNumber = 2,
    kRandomKeyFieldNumber = 3,
  };
  // repeated .network.TSimplePlayer players = 1;
  int players_size() const;
  private:
  int _internal_players_size() const;
  public:
  void clear_players();
  ::network::TSimplePlayer* mutable_players(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TSimplePlayer >*
      mutable_players();
  private:
  const ::network::TSimplePlayer& _internal_players(int index) const;
  ::network::TSimplePlayer* _internal_add_players();
  public:
  const ::network::TSimplePlayer& players(int index) const;
  ::network::TSimplePlayer* add_players();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TSimplePlayer >&
      players() const;

  // uint32 handle = 2;
  void clear_handle();
  uint32_t handle() const;
  void set_handle(uint32_t value);
  private:
  uint32_t _internal_handle() const;
  void _internal_set_handle(uint32_t value);
  public:

  // uint32 random_key = 3;
  void clear_random_key();
  uint32_t random_key() const;
  void set_random_key(uint32_t value);
  private:
  uint32_t _internal_random_key() const;
  void _internal_set_random_key(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCLoginSuccessPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TSimplePlayer > players_;
    uint32_t handle_;
    uint32_t random_key_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCAuthSuccessPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCAuthSuccessPacket) */ {
 public:
  inline GCAuthSuccessPacket() : GCAuthSuccessPacket(nullptr) {}
  ~GCAuthSuccessPacket() override;
  explicit PROTOBUF_CONSTEXPR GCAuthSuccessPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCAuthSuccessPacket(const GCAuthSuccessPacket& from);
  GCAuthSuccessPacket(GCAuthSuccessPacket&& from) noexcept
    : GCAuthSuccessPacket() {
    *this = ::std::move(from);
  }

  inline GCAuthSuccessPacket& operator=(const GCAuthSuccessPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCAuthSuccessPacket& operator=(GCAuthSuccessPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCAuthSuccessPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCAuthSuccessPacket* internal_default_instance() {
    return reinterpret_cast<const GCAuthSuccessPacket*>(
               &_GCAuthSuccessPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GCAuthSuccessPacket& a, GCAuthSuccessPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCAuthSuccessPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCAuthSuccessPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCAuthSuccessPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCAuthSuccessPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCAuthSuccessPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCAuthSuccessPacket& from) {
    GCAuthSuccessPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCAuthSuccessPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCAuthSuccessPacket";
  }
  protected:
  explicit GCAuthSuccessPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLoginKeyFieldNumber = 1,
    kResultFieldNumber = 2,
  };
  // uint32 login_key = 1;
  void clear_login_key();
  uint32_t login_key() const;
  void set_login_key(uint32_t value);
  private:
  uint32_t _internal_login_key() const;
  void _internal_set_login_key(uint32_t value);
  public:

  // bool result = 2;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCAuthSuccessPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t login_key_;
    bool result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCAuthSuccessOpenIDPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCAuthSuccessOpenIDPacket) */ {
 public:
  inline GCAuthSuccessOpenIDPacket() : GCAuthSuccessOpenIDPacket(nullptr) {}
  ~GCAuthSuccessOpenIDPacket() override;
  explicit PROTOBUF_CONSTEXPR GCAuthSuccessOpenIDPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCAuthSuccessOpenIDPacket(const GCAuthSuccessOpenIDPacket& from);
  GCAuthSuccessOpenIDPacket(GCAuthSuccessOpenIDPacket&& from) noexcept
    : GCAuthSuccessOpenIDPacket() {
    *this = ::std::move(from);
  }

  inline GCAuthSuccessOpenIDPacket& operator=(const GCAuthSuccessOpenIDPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCAuthSuccessOpenIDPacket& operator=(GCAuthSuccessOpenIDPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCAuthSuccessOpenIDPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCAuthSuccessOpenIDPacket* internal_default_instance() {
    return reinterpret_cast<const GCAuthSuccessOpenIDPacket*>(
               &_GCAuthSuccessOpenIDPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GCAuthSuccessOpenIDPacket& a, GCAuthSuccessOpenIDPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCAuthSuccessOpenIDPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCAuthSuccessOpenIDPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCAuthSuccessOpenIDPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCAuthSuccessOpenIDPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCAuthSuccessOpenIDPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCAuthSuccessOpenIDPacket& from) {
    GCAuthSuccessOpenIDPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCAuthSuccessOpenIDPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCAuthSuccessOpenIDPacket";
  }
  protected:
  explicit GCAuthSuccessOpenIDPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLoginFieldNumber = 3,
    kLoginKeyFieldNumber = 1,
    kResultFieldNumber = 2,
  };
  // bytes login = 3;
  void clear_login();
  const std::string& login() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_login(ArgT0&& arg0, ArgT... args);
  std::string* mutable_login();
  PROTOBUF_NODISCARD std::string* release_login();
  void set_allocated_login(std::string* login);
  private:
  const std::string& _internal_login() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_login(const std::string& value);
  std::string* _internal_mutable_login();
  public:

  // uint32 login_key = 1;
  void clear_login_key();
  uint32_t login_key() const;
  void set_login_key(uint32_t value);
  private:
  uint32_t _internal_login_key() const;
  void _internal_set_login_key(uint32_t value);
  public:

  // bool result = 2;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCAuthSuccessOpenIDPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr login_;
    uint32_t login_key_;
    bool result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCChangeNamePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCChangeNamePacket) */ {
 public:
  inline GCChangeNamePacket() : GCChangeNamePacket(nullptr) {}
  ~GCChangeNamePacket() override;
  explicit PROTOBUF_CONSTEXPR GCChangeNamePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCChangeNamePacket(const GCChangeNamePacket& from);
  GCChangeNamePacket(GCChangeNamePacket&& from) noexcept
    : GCChangeNamePacket() {
    *this = ::std::move(from);
  }

  inline GCChangeNamePacket& operator=(const GCChangeNamePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCChangeNamePacket& operator=(GCChangeNamePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCChangeNamePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCChangeNamePacket* internal_default_instance() {
    return reinterpret_cast<const GCChangeNamePacket*>(
               &_GCChangeNamePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(GCChangeNamePacket& a, GCChangeNamePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCChangeNamePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCChangeNamePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCChangeNamePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCChangeNamePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCChangeNamePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCChangeNamePacket& from) {
    GCChangeNamePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCChangeNamePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCChangeNamePacket";
  }
  protected:
  explicit GCChangeNamePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kPidFieldNumber = 1,
  };
  // bytes name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 pid = 1;
  void clear_pid();
  uint32_t pid() const;
  void set_pid(uint32_t value);
  private:
  uint32_t _internal_pid() const;
  void _internal_set_pid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCChangeNamePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    uint32_t pid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCHybridCryptSDBPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCHybridCryptSDBPacket) */ {
 public:
  inline GCHybridCryptSDBPacket() : GCHybridCryptSDBPacket(nullptr) {}
  ~GCHybridCryptSDBPacket() override;
  explicit PROTOBUF_CONSTEXPR GCHybridCryptSDBPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCHybridCryptSDBPacket(const GCHybridCryptSDBPacket& from);
  GCHybridCryptSDBPacket(GCHybridCryptSDBPacket&& from) noexcept
    : GCHybridCryptSDBPacket() {
    *this = ::std::move(from);
  }

  inline GCHybridCryptSDBPacket& operator=(const GCHybridCryptSDBPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCHybridCryptSDBPacket& operator=(GCHybridCryptSDBPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCHybridCryptSDBPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCHybridCryptSDBPacket* internal_default_instance() {
    return reinterpret_cast<const GCHybridCryptSDBPacket*>(
               &_GCHybridCryptSDBPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(GCHybridCryptSDBPacket& a, GCHybridCryptSDBPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCHybridCryptSDBPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCHybridCryptSDBPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCHybridCryptSDBPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCHybridCryptSDBPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCHybridCryptSDBPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCHybridCryptSDBPacket& from) {
    GCHybridCryptSDBPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCHybridCryptSDBPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCHybridCryptSDBPacket";
  }
  protected:
  explicit GCHybridCryptSDBPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataStreamFieldNumber = 1,
  };
  // bytes data_stream = 1;
  void clear_data_stream();
  const std::string& data_stream() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data_stream(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data_stream();
  PROTOBUF_NODISCARD std::string* release_data_stream();
  void set_allocated_data_stream(std::string* data_stream);
  private:
  const std::string& _internal_data_stream() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data_stream(const std::string& value);
  std::string* _internal_mutable_data_stream();
  public:

  // @@protoc_insertion_point(class_scope:network.GCHybridCryptSDBPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_stream_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCHybridCryptKeysPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCHybridCryptKeysPacket) */ {
 public:
  inline GCHybridCryptKeysPacket() : GCHybridCryptKeysPacket(nullptr) {}
  ~GCHybridCryptKeysPacket() override;
  explicit PROTOBUF_CONSTEXPR GCHybridCryptKeysPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCHybridCryptKeysPacket(const GCHybridCryptKeysPacket& from);
  GCHybridCryptKeysPacket(GCHybridCryptKeysPacket&& from) noexcept
    : GCHybridCryptKeysPacket() {
    *this = ::std::move(from);
  }

  inline GCHybridCryptKeysPacket& operator=(const GCHybridCryptKeysPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCHybridCryptKeysPacket& operator=(GCHybridCryptKeysPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCHybridCryptKeysPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCHybridCryptKeysPacket* internal_default_instance() {
    return reinterpret_cast<const GCHybridCryptKeysPacket*>(
               &_GCHybridCryptKeysPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(GCHybridCryptKeysPacket& a, GCHybridCryptKeysPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCHybridCryptKeysPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCHybridCryptKeysPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCHybridCryptKeysPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCHybridCryptKeysPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCHybridCryptKeysPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCHybridCryptKeysPacket& from) {
    GCHybridCryptKeysPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCHybridCryptKeysPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCHybridCryptKeysPacket";
  }
  protected:
  explicit GCHybridCryptKeysPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataStreamFieldNumber = 1,
  };
  // bytes data_stream = 1;
  void clear_data_stream();
  const std::string& data_stream() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data_stream(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data_stream();
  PROTOBUF_NODISCARD std::string* release_data_stream();
  void set_allocated_data_stream(std::string* data_stream);
  private:
  const std::string& _internal_data_stream() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data_stream(const std::string& value);
  std::string* _internal_mutable_data_stream();
  public:

  // @@protoc_insertion_point(class_scope:network.GCHybridCryptKeysPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_stream_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCRespondChannelStatusPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCRespondChannelStatusPacket) */ {
 public:
  inline GCRespondChannelStatusPacket() : GCRespondChannelStatusPacket(nullptr) {}
  ~GCRespondChannelStatusPacket() override;
  explicit PROTOBUF_CONSTEXPR GCRespondChannelStatusPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCRespondChannelStatusPacket(const GCRespondChannelStatusPacket& from);
  GCRespondChannelStatusPacket(GCRespondChannelStatusPacket&& from) noexcept
    : GCRespondChannelStatusPacket() {
    *this = ::std::move(from);
  }

  inline GCRespondChannelStatusPacket& operator=(const GCRespondChannelStatusPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCRespondChannelStatusPacket& operator=(GCRespondChannelStatusPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCRespondChannelStatusPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCRespondChannelStatusPacket* internal_default_instance() {
    return reinterpret_cast<const GCRespondChannelStatusPacket*>(
               &_GCRespondChannelStatusPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(GCRespondChannelStatusPacket& a, GCRespondChannelStatusPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCRespondChannelStatusPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCRespondChannelStatusPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCRespondChannelStatusPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCRespondChannelStatusPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCRespondChannelStatusPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCRespondChannelStatusPacket& from) {
    GCRespondChannelStatusPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCRespondChannelStatusPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCRespondChannelStatusPacket";
  }
  protected:
  explicit GCRespondChannelStatusPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatesFieldNumber = 1,
    kSuccessFieldNumber = 2,
  };
  // repeated .network.TChannelStatus states = 1;
  int states_size() const;
  private:
  int _internal_states_size() const;
  public:
  void clear_states();
  ::network::TChannelStatus* mutable_states(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TChannelStatus >*
      mutable_states();
  private:
  const ::network::TChannelStatus& _internal_states(int index) const;
  ::network::TChannelStatus* _internal_add_states();
  public:
  const ::network::TChannelStatus& states(int index) const;
  ::network::TChannelStatus* add_states();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TChannelStatus >&
      states() const;

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCRespondChannelStatusPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TChannelStatus > states_;
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCPhasePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCPhasePacket) */ {
 public:
  inline GCPhasePacket() : GCPhasePacket(nullptr) {}
  ~GCPhasePacket() override;
  explicit PROTOBUF_CONSTEXPR GCPhasePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCPhasePacket(const GCPhasePacket& from);
  GCPhasePacket(GCPhasePacket&& from) noexcept
    : GCPhasePacket() {
    *this = ::std::move(from);
  }

  inline GCPhasePacket& operator=(const GCPhasePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCPhasePacket& operator=(GCPhasePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCPhasePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCPhasePacket* internal_default_instance() {
    return reinterpret_cast<const GCPhasePacket*>(
               &_GCPhasePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(GCPhasePacket& a, GCPhasePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCPhasePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCPhasePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCPhasePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCPhasePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCPhasePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCPhasePacket& from) {
    GCPhasePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCPhasePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCPhasePacket";
  }
  protected:
  explicit GCPhasePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPhaseFieldNumber = 1,
  };
  // uint32 phase = 1;
  void clear_phase();
  uint32_t phase() const;
  void set_phase(uint32_t value);
  private:
  uint32_t _internal_phase() const;
  void _internal_set_phase(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCPhasePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t phase_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCHandshakePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCHandshakePacket) */ {
 public:
  inline GCHandshakePacket() : GCHandshakePacket(nullptr) {}
  ~GCHandshakePacket() override;
  explicit PROTOBUF_CONSTEXPR GCHandshakePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCHandshakePacket(const GCHandshakePacket& from);
  GCHandshakePacket(GCHandshakePacket&& from) noexcept
    : GCHandshakePacket() {
    *this = ::std::move(from);
  }

  inline GCHandshakePacket& operator=(const GCHandshakePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCHandshakePacket& operator=(GCHandshakePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCHandshakePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCHandshakePacket* internal_default_instance() {
    return reinterpret_cast<const GCHandshakePacket*>(
               &_GCHandshakePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(GCHandshakePacket& a, GCHandshakePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCHandshakePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCHandshakePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCHandshakePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCHandshakePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCHandshakePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCHandshakePacket& from) {
    GCHandshakePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCHandshakePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCHandshakePacket";
  }
  protected:
  explicit GCHandshakePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHandshakeFieldNumber = 1,
    kTimeFieldNumber = 2,
    kDeltaFieldNumber = 3,
    kCryptKeyFieldNumber = 4,
  };
  // uint32 handshake = 1;
  void clear_handshake();
  uint32_t handshake() const;
  void set_handshake(uint32_t value);
  private:
  uint32_t _internal_handshake() const;
  void _internal_set_handshake(uint32_t value);
  public:

  // uint32 time = 2;
  void clear_time();
  uint32_t time() const;
  void set_time(uint32_t value);
  private:
  uint32_t _internal_time() const;
  void _internal_set_time(uint32_t value);
  public:

  // int32 delta = 3;
  void clear_delta();
  int32_t delta() const;
  void set_delta(int32_t value);
  private:
  int32_t _internal_delta() const;
  void _internal_set_delta(int32_t value);
  public:

  // uint32 crypt_key = 4;
  void clear_crypt_key();
  uint32_t crypt_key() const;
  void set_crypt_key(uint32_t value);
  private:
  uint32_t _internal_crypt_key() const;
  void _internal_set_crypt_key(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCHandshakePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t handshake_;
    uint32_t time_;
    int32_t delta_;
    uint32_t crypt_key_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCKeyAgreementPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCKeyAgreementPacket) */ {
 public:
  inline GCKeyAgreementPacket() : GCKeyAgreementPacket(nullptr) {}
  ~GCKeyAgreementPacket() override;
  explicit PROTOBUF_CONSTEXPR GCKeyAgreementPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCKeyAgreementPacket(const GCKeyAgreementPacket& from);
  GCKeyAgreementPacket(GCKeyAgreementPacket&& from) noexcept
    : GCKeyAgreementPacket() {
    *this = ::std::move(from);
  }

  inline GCKeyAgreementPacket& operator=(const GCKeyAgreementPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCKeyAgreementPacket& operator=(GCKeyAgreementPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCKeyAgreementPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCKeyAgreementPacket* internal_default_instance() {
    return reinterpret_cast<const GCKeyAgreementPacket*>(
               &_GCKeyAgreementPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(GCKeyAgreementPacket& a, GCKeyAgreementPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCKeyAgreementPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCKeyAgreementPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCKeyAgreementPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCKeyAgreementPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCKeyAgreementPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCKeyAgreementPacket& from) {
    GCKeyAgreementPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCKeyAgreementPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCKeyAgreementPacket";
  }
  protected:
  explicit GCKeyAgreementPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
    kAgreedLengthFieldNumber = 2,
  };
  // bytes data = 1;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // uint32 agreed_length = 2;
  void clear_agreed_length();
  uint32_t agreed_length() const;
  void set_agreed_length(uint32_t value);
  private:
  uint32_t _internal_agreed_length() const;
  void _internal_set_agreed_length(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCKeyAgreementPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    uint32_t agreed_length_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCXTrapCS1RequestPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCXTrapCS1RequestPacket) */ {
 public:
  inline GCXTrapCS1RequestPacket() : GCXTrapCS1RequestPacket(nullptr) {}
  ~GCXTrapCS1RequestPacket() override;
  explicit PROTOBUF_CONSTEXPR GCXTrapCS1RequestPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCXTrapCS1RequestPacket(const GCXTrapCS1RequestPacket& from);
  GCXTrapCS1RequestPacket(GCXTrapCS1RequestPacket&& from) noexcept
    : GCXTrapCS1RequestPacket() {
    *this = ::std::move(from);
  }

  inline GCXTrapCS1RequestPacket& operator=(const GCXTrapCS1RequestPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCXTrapCS1RequestPacket& operator=(GCXTrapCS1RequestPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCXTrapCS1RequestPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCXTrapCS1RequestPacket* internal_default_instance() {
    return reinterpret_cast<const GCXTrapCS1RequestPacket*>(
               &_GCXTrapCS1RequestPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(GCXTrapCS1RequestPacket& a, GCXTrapCS1RequestPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCXTrapCS1RequestPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCXTrapCS1RequestPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCXTrapCS1RequestPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCXTrapCS1RequestPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCXTrapCS1RequestPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCXTrapCS1RequestPacket& from) {
    GCXTrapCS1RequestPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCXTrapCS1RequestPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCXTrapCS1RequestPacket";
  }
  protected:
  explicit GCXTrapCS1RequestPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // bytes data = 1;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:network.GCXTrapCS1RequestPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCPanamaPackPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCPanamaPackPacket) */ {
 public:
  inline GCPanamaPackPacket() : GCPanamaPackPacket(nullptr) {}
  ~GCPanamaPackPacket() override;
  explicit PROTOBUF_CONSTEXPR GCPanamaPackPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCPanamaPackPacket(const GCPanamaPackPacket& from);
  GCPanamaPackPacket(GCPanamaPackPacket&& from) noexcept
    : GCPanamaPackPacket() {
    *this = ::std::move(from);
  }

  inline GCPanamaPackPacket& operator=(const GCPanamaPackPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCPanamaPackPacket& operator=(GCPanamaPackPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCPanamaPackPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCPanamaPackPacket* internal_default_instance() {
    return reinterpret_cast<const GCPanamaPackPacket*>(
               &_GCPanamaPackPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(GCPanamaPackPacket& a, GCPanamaPackPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCPanamaPackPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCPanamaPackPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCPanamaPackPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCPanamaPackPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCPanamaPackPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCPanamaPackPacket& from) {
    GCPanamaPackPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCPanamaPackPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCPanamaPackPacket";
  }
  protected:
  explicit GCPanamaPackPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPackNameFieldNumber = 1,
    kAbIVFieldNumber = 2,
  };
  // bytes pack_name = 1;
  void clear_pack_name();
  const std::string& pack_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pack_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pack_name();
  PROTOBUF_NODISCARD std::string* release_pack_name();
  void set_allocated_pack_name(std::string* pack_name);
  private:
  const std::string& _internal_pack_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pack_name(const std::string& value);
  std::string* _internal_mutable_pack_name();
  public:

  // bytes abIV = 2;
  void clear_abiv();
  const std::string& abiv() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_abiv(ArgT0&& arg0, ArgT... args);
  std::string* mutable_abiv();
  PROTOBUF_NODISCARD std::string* release_abiv();
  void set_allocated_abiv(std::string* abiv);
  private:
  const std::string& _internal_abiv() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_abiv(const std::string& value);
  std::string* _internal_mutable_abiv();
  public:

  // @@protoc_insertion_point(class_scope:network.GCPanamaPackPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pack_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr abiv_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCLoginVersionAnswerPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCLoginVersionAnswerPacket) */ {
 public:
  inline GCLoginVersionAnswerPacket() : GCLoginVersionAnswerPacket(nullptr) {}
  ~GCLoginVersionAnswerPacket() override;
  explicit PROTOBUF_CONSTEXPR GCLoginVersionAnswerPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCLoginVersionAnswerPacket(const GCLoginVersionAnswerPacket& from);
  GCLoginVersionAnswerPacket(GCLoginVersionAnswerPacket&& from) noexcept
    : GCLoginVersionAnswerPacket() {
    *this = ::std::move(from);
  }

  inline GCLoginVersionAnswerPacket& operator=(const GCLoginVersionAnswerPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCLoginVersionAnswerPacket& operator=(GCLoginVersionAnswerPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCLoginVersionAnswerPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCLoginVersionAnswerPacket* internal_default_instance() {
    return reinterpret_cast<const GCLoginVersionAnswerPacket*>(
               &_GCLoginVersionAnswerPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(GCLoginVersionAnswerPacket& a, GCLoginVersionAnswerPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCLoginVersionAnswerPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCLoginVersionAnswerPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCLoginVersionAnswerPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCLoginVersionAnswerPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCLoginVersionAnswerPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCLoginVersionAnswerPacket& from) {
    GCLoginVersionAnswerPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCLoginVersionAnswerPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCLoginVersionAnswerPacket";
  }
  protected:
  explicit GCLoginVersionAnswerPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnswerFieldNumber = 1,
  };
  // bool answer = 1;
  void clear_answer();
  bool answer() const;
  void set_answer(bool value);
  private:
  bool _internal_answer() const;
  void _internal_set_answer(bool value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCLoginVersionAnswerPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool answer_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCTimePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCTimePacket) */ {
 public:
  inline GCTimePacket() : GCTimePacket(nullptr) {}
  ~GCTimePacket() override;
  explicit PROTOBUF_CONSTEXPR GCTimePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCTimePacket(const GCTimePacket& from);
  GCTimePacket(GCTimePacket&& from) noexcept
    : GCTimePacket() {
    *this = ::std::move(from);
  }

  inline GCTimePacket& operator=(const GCTimePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCTimePacket& operator=(GCTimePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCTimePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCTimePacket* internal_default_instance() {
    return reinterpret_cast<const GCTimePacket*>(
               &_GCTimePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(GCTimePacket& a, GCTimePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCTimePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCTimePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCTimePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCTimePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCTimePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCTimePacket& from) {
    GCTimePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCTimePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCTimePacket";
  }
  protected:
  explicit GCTimePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFieldNumber = 1,
    kRandomFieldNumber = 2,
    kChannelFieldNumber = 4,
    kTestServerFieldNumber = 5,
    kCombatzoneFieldNumber = 3,
    kCoinsFieldNumber = 7,
    kMapIndexFieldNumber = 6,
  };
  // uint32 time = 1;
  void clear_time();
  uint32_t time() const;
  void set_time(uint32_t value);
  private:
  uint32_t _internal_time() const;
  void _internal_set_time(uint32_t value);
  public:

  // uint32 random = 2;
  void clear_random();
  uint32_t random() const;
  void set_random(uint32_t value);
  private:
  uint32_t _internal_random() const;
  void _internal_set_random(uint32_t value);
  public:

  // uint32 channel = 4;
  void clear_channel();
  uint32_t channel() const;
  void set_channel(uint32_t value);
  private:
  uint32_t _internal_channel() const;
  void _internal_set_channel(uint32_t value);
  public:

  // uint32 test_server = 5;
  void clear_test_server();
  uint32_t test_server() const;
  void set_test_server(uint32_t value);
  private:
  uint32_t _internal_test_server() const;
  void _internal_set_test_server(uint32_t value);
  public:

  // bool combatzone = 3;
  void clear_combatzone();
  bool combatzone() const;
  void set_combatzone(bool value);
  private:
  bool _internal_combatzone() const;
  void _internal_set_combatzone(bool value);
  public:

  // bool coins = 7;
  void clear_coins();
  bool coins() const;
  void set_coins(bool value);
  private:
  bool _internal_coins() const;
  void _internal_set_coins(bool value);
  public:

  // uint32 map_index = 6;
  void clear_map_index();
  uint32_t map_index() const;
  void set_map_index(uint32_t value);
  private:
  uint32_t _internal_map_index() const;
  void _internal_set_map_index(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCTimePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t time_;
    uint32_t random_;
    uint32_t channel_;
    uint32_t test_server_;
    bool combatzone_;
    bool coins_;
    uint32_t map_index_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCChannelPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCChannelPacket) */ {
 public:
  inline GCChannelPacket() : GCChannelPacket(nullptr) {}
  ~GCChannelPacket() override;
  explicit PROTOBUF_CONSTEXPR GCChannelPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCChannelPacket(const GCChannelPacket& from);
  GCChannelPacket(GCChannelPacket&& from) noexcept
    : GCChannelPacket() {
    *this = ::std::move(from);
  }

  inline GCChannelPacket& operator=(const GCChannelPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCChannelPacket& operator=(GCChannelPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCChannelPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCChannelPacket* internal_default_instance() {
    return reinterpret_cast<const GCChannelPacket*>(
               &_GCChannelPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(GCChannelPacket& a, GCChannelPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCChannelPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCChannelPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCChannelPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCChannelPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCChannelPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCChannelPacket& from) {
    GCChannelPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCChannelPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCChannelPacket";
  }
  protected:
  explicit GCChannelPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelFieldNumber = 1,
  };
  // uint32 channel = 1;
  void clear_channel();
  uint32_t channel() const;
  void set_channel(uint32_t value);
  private:
  uint32_t _internal_channel() const;
  void _internal_set_channel(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCChannelPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t channel_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCWhisperPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCWhisperPacket) */ {
 public:
  inline GCWhisperPacket() : GCWhisperPacket(nullptr) {}
  ~GCWhisperPacket() override;
  explicit PROTOBUF_CONSTEXPR GCWhisperPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCWhisperPacket(const GCWhisperPacket& from);
  GCWhisperPacket(GCWhisperPacket&& from) noexcept
    : GCWhisperPacket() {
    *this = ::std::move(from);
  }

  inline GCWhisperPacket& operator=(const GCWhisperPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCWhisperPacket& operator=(GCWhisperPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCWhisperPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCWhisperPacket* internal_default_instance() {
    return reinterpret_cast<const GCWhisperPacket*>(
               &_GCWhisperPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(GCWhisperPacket& a, GCWhisperPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCWhisperPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCWhisperPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCWhisperPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCWhisperPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCWhisperPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCWhisperPacket& from) {
    GCWhisperPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCWhisperPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCWhisperPacket";
  }
  protected:
  explicit GCWhisperPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFromFieldNumber = 3,
    kMessageFieldNumber = 4,
    kTypeFieldNumber = 1,
    kLocaleFieldNumber = 2,
  };
  // bytes name_from = 3;
  void clear_name_from();
  const std::string& name_from() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name_from(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name_from();
  PROTOBUF_NODISCARD std::string* release_name_from();
  void set_allocated_name_from(std::string* name_from);
  private:
  const std::string& _internal_name_from() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name_from(const std::string& value);
  std::string* _internal_mutable_name_from();
  public:

  // bytes message = 4;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // uint32 type = 1;
  void clear_type();
  uint32_t type() const;
  void set_type(uint32_t value);
  private:
  uint32_t _internal_type() const;
  void _internal_set_type(uint32_t value);
  public:

  // int32 locale = 2;
  void clear_locale();
  int32_t locale() const;
  void set_locale(int32_t value);
  private:
  int32_t _internal_locale() const;
  void _internal_set_locale(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCWhisperPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_from_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    uint32_t type_;
    int32_t locale_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCChatPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCChatPacket) */ {
 public:
  inline GCChatPacket() : GCChatPacket(nullptr) {}
  ~GCChatPacket() override;
  explicit PROTOBUF_CONSTEXPR GCChatPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCChatPacket(const GCChatPacket& from);
  GCChatPacket(GCChatPacket&& from) noexcept
    : GCChatPacket() {
    *this = ::std::move(from);
  }

  inline GCChatPacket& operator=(const GCChatPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCChatPacket& operator=(GCChatPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCChatPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCChatPacket* internal_default_instance() {
    return reinterpret_cast<const GCChatPacket*>(
               &_GCChatPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(GCChatPacket& a, GCChatPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCChatPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCChatPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCChatPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCChatPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCChatPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCChatPacket& from) {
    GCChatPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCChatPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCChatPacket";
  }
  protected:
  explicit GCChatPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 3,
    kTypeFieldNumber = 1,
    kIdFieldNumber = 2,
    kEmpireFieldNumber = 4,
  };
  // bytes message = 3;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // uint32 type = 1;
  void clear_type();
  uint32_t type() const;
  void set_type(uint32_t value);
  private:
  uint32_t _internal_type() const;
  void _internal_set_type(uint32_t value);
  public:

  // uint32 id = 2;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // uint32 empire = 4;
  void clear_empire();
  uint32_t empire() const;
  void set_empire(uint32_t value);
  private:
  uint32_t _internal_empire() const;
  void _internal_set_empire(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCChatPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    uint32_t type_;
    uint32_t id_;
    uint32_t empire_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCMovePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCMovePacket) */ {
 public:
  inline GCMovePacket() : GCMovePacket(nullptr) {}
  ~GCMovePacket() override;
  explicit PROTOBUF_CONSTEXPR GCMovePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCMovePacket(const GCMovePacket& from);
  GCMovePacket(GCMovePacket&& from) noexcept
    : GCMovePacket() {
    *this = ::std::move(from);
  }

  inline GCMovePacket& operator=(const GCMovePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCMovePacket& operator=(GCMovePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCMovePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCMovePacket* internal_default_instance() {
    return reinterpret_cast<const GCMovePacket*>(
               &_GCMovePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(GCMovePacket& a, GCMovePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCMovePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCMovePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCMovePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCMovePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCMovePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCMovePacket& from) {
    GCMovePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCMovePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCMovePacket";
  }
  protected:
  explicit GCMovePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFuncFieldNumber = 1,
    kArgFieldNumber = 2,
    kRotFieldNumber = 3,
    kVidFieldNumber = 4,
    kXFieldNumber = 5,
    kYFieldNumber = 6,
    kTimeFieldNumber = 7,
    kDurationFieldNumber = 8,
  };
  // uint32 func = 1;
  void clear_func();
  uint32_t func() const;
  void set_func(uint32_t value);
  private:
  uint32_t _internal_func() const;
  void _internal_set_func(uint32_t value);
  public:

  // uint32 arg = 2;
  void clear_arg();
  uint32_t arg() const;
  void set_arg(uint32_t value);
  private:
  uint32_t _internal_arg() const;
  void _internal_set_arg(uint32_t value);
  public:

  // uint32 rot = 3;
  void clear_rot();
  uint32_t rot() const;
  void set_rot(uint32_t value);
  private:
  uint32_t _internal_rot() const;
  void _internal_set_rot(uint32_t value);
  public:

  // uint32 vid = 4;
  void clear_vid();
  uint32_t vid() const;
  void set_vid(uint32_t value);
  private:
  uint32_t _internal_vid() const;
  void _internal_set_vid(uint32_t value);
  public:

  // int32 x = 5;
  void clear_x();
  int32_t x() const;
  void set_x(int32_t value);
  private:
  int32_t _internal_x() const;
  void _internal_set_x(int32_t value);
  public:

  // int32 y = 6;
  void clear_y();
  int32_t y() const;
  void set_y(int32_t value);
  private:
  int32_t _internal_y() const;
  void _internal_set_y(int32_t value);
  public:

  // uint32 time = 7;
  void clear_time();
  uint32_t time() const;
  void set_time(uint32_t value);
  private:
  uint32_t _internal_time() const;
  void _internal_set_time(uint32_t value);
  public:

  // uint32 duration = 8;
  void clear_duration();
  uint32_t duration() const;
  void set_duration(uint32_t value);
  private:
  uint32_t _internal_duration() const;
  void _internal_set_duration(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCMovePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t func_;
    uint32_t arg_;
    uint32_t rot_;
    uint32_t vid_;
    int32_t x_;
    int32_t y_;
    uint32_t time_;
    uint32_t duration_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCSyncPositionPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCSyncPositionPacket) */ {
 public:
  inline GCSyncPositionPacket() : GCSyncPositionPacket(nullptr) {}
  ~GCSyncPositionPacket() override;
  explicit PROTOBUF_CONSTEXPR GCSyncPositionPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCSyncPositionPacket(const GCSyncPositionPacket& from);
  GCSyncPositionPacket(GCSyncPositionPacket&& from) noexcept
    : GCSyncPositionPacket() {
    *this = ::std::move(from);
  }

  inline GCSyncPositionPacket& operator=(const GCSyncPositionPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCSyncPositionPacket& operator=(GCSyncPositionPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCSyncPositionPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCSyncPositionPacket* internal_default_instance() {
    return reinterpret_cast<const GCSyncPositionPacket*>(
               &_GCSyncPositionPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(GCSyncPositionPacket& a, GCSyncPositionPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCSyncPositionPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCSyncPositionPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCSyncPositionPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCSyncPositionPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCSyncPositionPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCSyncPositionPacket& from) {
    GCSyncPositionPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCSyncPositionPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCSyncPositionPacket";
  }
  protected:
  explicit GCSyncPositionPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kElementsFieldNumber = 1,
  };
  // repeated .network.SyncPositionElement elements = 1;
  int elements_size() const;
  private:
  int _internal_elements_size() const;
  public:
  void clear_elements();
  ::network::SyncPositionElement* mutable_elements(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::SyncPositionElement >*
      mutable_elements();
  private:
  const ::network::SyncPositionElement& _internal_elements(int index) const;
  ::network::SyncPositionElement* _internal_add_elements();
  public:
  const ::network::SyncPositionElement& elements(int index) const;
  ::network::SyncPositionElement* add_elements();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::SyncPositionElement >&
      elements() const;

  // @@protoc_insertion_point(class_scope:network.GCSyncPositionPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::SyncPositionElement > elements_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCFlyTargetingPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCFlyTargetingPacket) */ {
 public:
  inline GCFlyTargetingPacket() : GCFlyTargetingPacket(nullptr) {}
  ~GCFlyTargetingPacket() override;
  explicit PROTOBUF_CONSTEXPR GCFlyTargetingPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCFlyTargetingPacket(const GCFlyTargetingPacket& from);
  GCFlyTargetingPacket(GCFlyTargetingPacket&& from) noexcept
    : GCFlyTargetingPacket() {
    *this = ::std::move(from);
  }

  inline GCFlyTargetingPacket& operator=(const GCFlyTargetingPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCFlyTargetingPacket& operator=(GCFlyTargetingPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCFlyTargetingPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCFlyTargetingPacket* internal_default_instance() {
    return reinterpret_cast<const GCFlyTargetingPacket*>(
               &_GCFlyTargetingPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(GCFlyTargetingPacket& a, GCFlyTargetingPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCFlyTargetingPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCFlyTargetingPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCFlyTargetingPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCFlyTargetingPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCFlyTargetingPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCFlyTargetingPacket& from) {
    GCFlyTargetingPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCFlyTargetingPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCFlyTargetingPacket";
  }
  protected:
  explicit GCFlyTargetingPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShooterVidFieldNumber = 1,
    kTargetVidFieldNumber = 2,
    kXFieldNumber = 3,
    kYFieldNumber = 4,
  };
  // uint32 shooter_vid = 1;
  void clear_shooter_vid();
  uint32_t shooter_vid() const;
  void set_shooter_vid(uint32_t value);
  private:
  uint32_t _internal_shooter_vid() const;
  void _internal_set_shooter_vid(uint32_t value);
  public:

  // uint32 target_vid = 2;
  void clear_target_vid();
  uint32_t target_vid() const;
  void set_target_vid(uint32_t value);
  private:
  uint32_t _internal_target_vid() const;
  void _internal_set_target_vid(uint32_t value);
  public:

  // int32 x = 3;
  void clear_x();
  int32_t x() const;
  void set_x(int32_t value);
  private:
  int32_t _internal_x() const;
  void _internal_set_x(int32_t value);
  public:

  // int32 y = 4;
  void clear_y();
  int32_t y() const;
  void set_y(int32_t value);
  private:
  int32_t _internal_y() const;
  void _internal_set_y(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCFlyTargetingPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t shooter_vid_;
    uint32_t target_vid_;
    int32_t x_;
    int32_t y_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCAddFlyTargetingPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCAddFlyTargetingPacket) */ {
 public:
  inline GCAddFlyTargetingPacket() : GCAddFlyTargetingPacket(nullptr) {}
  ~GCAddFlyTargetingPacket() override;
  explicit PROTOBUF_CONSTEXPR GCAddFlyTargetingPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCAddFlyTargetingPacket(const GCAddFlyTargetingPacket& from);
  GCAddFlyTargetingPacket(GCAddFlyTargetingPacket&& from) noexcept
    : GCAddFlyTargetingPacket() {
    *this = ::std::move(from);
  }

  inline GCAddFlyTargetingPacket& operator=(const GCAddFlyTargetingPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCAddFlyTargetingPacket& operator=(GCAddFlyTargetingPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCAddFlyTargetingPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCAddFlyTargetingPacket* internal_default_instance() {
    return reinterpret_cast<const GCAddFlyTargetingPacket*>(
               &_GCAddFlyTargetingPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(GCAddFlyTargetingPacket& a, GCAddFlyTargetingPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCAddFlyTargetingPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCAddFlyTargetingPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCAddFlyTargetingPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCAddFlyTargetingPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCAddFlyTargetingPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCAddFlyTargetingPacket& from) {
    GCAddFlyTargetingPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCAddFlyTargetingPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCAddFlyTargetingPacket";
  }
  protected:
  explicit GCAddFlyTargetingPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShooterVidFieldNumber = 1,
    kTargetVidFieldNumber = 2,
    kXFieldNumber = 3,
    kYFieldNumber = 4,
  };
  // uint32 shooter_vid = 1;
  void clear_shooter_vid();
  uint32_t shooter_vid() const;
  void set_shooter_vid(uint32_t value);
  private:
  uint32_t _internal_shooter_vid() const;
  void _internal_set_shooter_vid(uint32_t value);
  public:

  // uint32 target_vid = 2;
  void clear_target_vid();
  uint32_t target_vid() const;
  void set_target_vid(uint32_t value);
  private:
  uint32_t _internal_target_vid() const;
  void _internal_set_target_vid(uint32_t value);
  public:

  // int32 x = 3;
  void clear_x();
  int32_t x() const;
  void set_x(int32_t value);
  private:
  int32_t _internal_x() const;
  void _internal_set_x(int32_t value);
  public:

  // int32 y = 4;
  void clear_y();
  int32_t y() const;
  void set_y(int32_t value);
  private:
  int32_t _internal_y() const;
  void _internal_set_y(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCAddFlyTargetingPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t shooter_vid_;
    uint32_t target_vid_;
    int32_t x_;
    int32_t y_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCTargetPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCTargetPacket) */ {
 public:
  inline GCTargetPacket() : GCTargetPacket(nullptr) {}
  ~GCTargetPacket() override;
  explicit PROTOBUF_CONSTEXPR GCTargetPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCTargetPacket(const GCTargetPacket& from);
  GCTargetPacket(GCTargetPacket&& from) noexcept
    : GCTargetPacket() {
    *this = ::std::move(from);
  }

  inline GCTargetPacket& operator=(const GCTargetPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCTargetPacket& operator=(GCTargetPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCTargetPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCTargetPacket* internal_default_instance() {
    return reinterpret_cast<const GCTargetPacket*>(
               &_GCTargetPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(GCTargetPacket& a, GCTargetPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCTargetPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCTargetPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCTargetPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCTargetPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCTargetPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCTargetPacket& from) {
    GCTargetPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCTargetPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCTargetPacket";
  }
  protected:
  explicit GCTargetPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVidFieldNumber = 1,
    kCurHpFieldNumber = 2,
    kMaxHpFieldNumber = 3,
    kHppercentFieldNumber = 4,
    kElementFieldNumber = 5,
  };
  // uint32 vid = 1;
  void clear_vid();
  uint32_t vid() const;
  void set_vid(uint32_t value);
  private:
  uint32_t _internal_vid() const;
  void _internal_set_vid(uint32_t value);
  public:

  // int32 cur_hp = 2;
  void clear_cur_hp();
  int32_t cur_hp() const;
  void set_cur_hp(int32_t value);
  private:
  int32_t _internal_cur_hp() const;
  void _internal_set_cur_hp(int32_t value);
  public:

  // int32 max_hp = 3;
  void clear_max_hp();
  int32_t max_hp() const;
  void set_max_hp(int32_t value);
  private:
  int32_t _internal_max_hp() const;
  void _internal_set_max_hp(int32_t value);
  public:

  // uint32 hppercent = 4;
  void clear_hppercent();
  uint32_t hppercent() const;
  void set_hppercent(uint32_t value);
  private:
  uint32_t _internal_hppercent() const;
  void _internal_set_hppercent(uint32_t value);
  public:

  // uint32 element = 5;
  void clear_element();
  uint32_t element() const;
  void set_element(uint32_t value);
  private:
  uint32_t _internal_element() const;
  void _internal_set_element(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCTargetPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t vid_;
    int32_t cur_hp_;
    int32_t max_hp_;
    uint32_t hppercent_;
    uint32_t element_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCTargetMonsterInfoPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCTargetMonsterInfoPacket) */ {
 public:
  inline GCTargetMonsterInfoPacket() : GCTargetMonsterInfoPacket(nullptr) {}
  ~GCTargetMonsterInfoPacket() override;
  explicit PROTOBUF_CONSTEXPR GCTargetMonsterInfoPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCTargetMonsterInfoPacket(const GCTargetMonsterInfoPacket& from);
  GCTargetMonsterInfoPacket(GCTargetMonsterInfoPacket&& from) noexcept
    : GCTargetMonsterInfoPacket() {
    *this = ::std::move(from);
  }

  inline GCTargetMonsterInfoPacket& operator=(const GCTargetMonsterInfoPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCTargetMonsterInfoPacket& operator=(GCTargetMonsterInfoPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCTargetMonsterInfoPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCTargetMonsterInfoPacket* internal_default_instance() {
    return reinterpret_cast<const GCTargetMonsterInfoPacket*>(
               &_GCTargetMonsterInfoPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(GCTargetMonsterInfoPacket& a, GCTargetMonsterInfoPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCTargetMonsterInfoPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCTargetMonsterInfoPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCTargetMonsterInfoPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCTargetMonsterInfoPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCTargetMonsterInfoPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCTargetMonsterInfoPacket& from) {
    GCTargetMonsterInfoPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCTargetMonsterInfoPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCTargetMonsterInfoPacket";
  }
  protected:
  explicit GCTargetMonsterInfoPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDropsFieldNumber = 2,
    kRaceNumFieldNumber = 1,
  };
  // repeated .network.TTargetMonsterDropInfoTable drops = 2;
  int drops_size() const;
  private:
  int _internal_drops_size() const;
  public:
  void clear_drops();
  ::network::TTargetMonsterDropInfoTable* mutable_drops(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TTargetMonsterDropInfoTable >*
      mutable_drops();
  private:
  const ::network::TTargetMonsterDropInfoTable& _internal_drops(int index) const;
  ::network::TTargetMonsterDropInfoTable* _internal_add_drops();
  public:
  const ::network::TTargetMonsterDropInfoTable& drops(int index) const;
  ::network::TTargetMonsterDropInfoTable* add_drops();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TTargetMonsterDropInfoTable >&
      drops() const;

  // uint32 race_num = 1;
  void clear_race_num();
  uint32_t race_num() const;
  void set_race_num(uint32_t value);
  private:
  uint32_t _internal_race_num() const;
  void _internal_set_race_num(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCTargetMonsterInfoPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TTargetMonsterDropInfoTable > drops_;
    uint32_t race_num_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCPlayerOnlineInformationPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCPlayerOnlineInformationPacket) */ {
 public:
  inline GCPlayerOnlineInformationPacket() : GCPlayerOnlineInformationPacket(nullptr) {}
  ~GCPlayerOnlineInformationPacket() override;
  explicit PROTOBUF_CONSTEXPR GCPlayerOnlineInformationPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCPlayerOnlineInformationPacket(const GCPlayerOnlineInformationPacket& from);
  GCPlayerOnlineInformationPacket(GCPlayerOnlineInformationPacket&& from) noexcept
    : GCPlayerOnlineInformationPacket() {
    *this = ::std::move(from);
  }

  inline GCPlayerOnlineInformationPacket& operator=(const GCPlayerOnlineInformationPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCPlayerOnlineInformationPacket& operator=(GCPlayerOnlineInformationPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCPlayerOnlineInformationPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCPlayerOnlineInformationPacket* internal_default_instance() {
    return reinterpret_cast<const GCPlayerOnlineInformationPacket*>(
               &_GCPlayerOnlineInformationPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(GCPlayerOnlineInformationPacket& a, GCPlayerOnlineInformationPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCPlayerOnlineInformationPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCPlayerOnlineInformationPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCPlayerOnlineInformationPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCPlayerOnlineInformationPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCPlayerOnlineInformationPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCPlayerOnlineInformationPacket& from) {
    GCPlayerOnlineInformationPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCPlayerOnlineInformationPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCPlayerOnlineInformationPacket";
  }
  protected:
  explicit GCPlayerOnlineInformationPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerNameFieldNumber = 1,
    kLanguageIdFieldNumber = 2,
  };
  // bytes player_name = 1;
  void clear_player_name();
  const std::string& player_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_player_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_player_name();
  PROTOBUF_NODISCARD std::string* release_player_name();
  void set_allocated_player_name(std::string* player_name);
  private:
  const std::string& _internal_player_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_player_name(const std::string& value);
  std::string* _internal_mutable_player_name();
  public:

  // int32 language_id = 2;
  void clear_language_id();
  int32_t language_id() const;
  void set_language_id(int32_t value);
  private:
  int32_t _internal_language_id() const;
  void _internal_set_language_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCPlayerOnlineInformationPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr player_name_;
    int32_t language_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCUpdateCharacterScalePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCUpdateCharacterScalePacket) */ {
 public:
  inline GCUpdateCharacterScalePacket() : GCUpdateCharacterScalePacket(nullptr) {}
  ~GCUpdateCharacterScalePacket() override;
  explicit PROTOBUF_CONSTEXPR GCUpdateCharacterScalePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCUpdateCharacterScalePacket(const GCUpdateCharacterScalePacket& from);
  GCUpdateCharacterScalePacket(GCUpdateCharacterScalePacket&& from) noexcept
    : GCUpdateCharacterScalePacket() {
    *this = ::std::move(from);
  }

  inline GCUpdateCharacterScalePacket& operator=(const GCUpdateCharacterScalePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCUpdateCharacterScalePacket& operator=(GCUpdateCharacterScalePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCUpdateCharacterScalePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCUpdateCharacterScalePacket* internal_default_instance() {
    return reinterpret_cast<const GCUpdateCharacterScalePacket*>(
               &_GCUpdateCharacterScalePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(GCUpdateCharacterScalePacket& a, GCUpdateCharacterScalePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCUpdateCharacterScalePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCUpdateCharacterScalePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCUpdateCharacterScalePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCUpdateCharacterScalePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCUpdateCharacterScalePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCUpdateCharacterScalePacket& from) {
    GCUpdateCharacterScalePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCUpdateCharacterScalePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCUpdateCharacterScalePacket";
  }
  protected:
  explicit GCUpdateCharacterScalePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVidFieldNumber = 1,
    kScaleFieldNumber = 2,
  };
  // uint32 vid = 1;
  void clear_vid();
  uint32_t vid() const;
  void set_vid(uint32_t value);
  private:
  uint32_t _internal_vid() const;
  void _internal_set_vid(uint32_t value);
  public:

  // float scale = 2;
  void clear_scale();
  float scale() const;
  void set_scale(float value);
  private:
  float _internal_scale() const;
  void _internal_set_scale(float value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCUpdateCharacterScalePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t vid_;
    float scale_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCMaintenanceInfoPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCMaintenanceInfoPacket) */ {
 public:
  inline GCMaintenanceInfoPacket() : GCMaintenanceInfoPacket(nullptr) {}
  ~GCMaintenanceInfoPacket() override;
  explicit PROTOBUF_CONSTEXPR GCMaintenanceInfoPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCMaintenanceInfoPacket(const GCMaintenanceInfoPacket& from);
  GCMaintenanceInfoPacket(GCMaintenanceInfoPacket&& from) noexcept
    : GCMaintenanceInfoPacket() {
    *this = ::std::move(from);
  }

  inline GCMaintenanceInfoPacket& operator=(const GCMaintenanceInfoPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCMaintenanceInfoPacket& operator=(GCMaintenanceInfoPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCMaintenanceInfoPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCMaintenanceInfoPacket* internal_default_instance() {
    return reinterpret_cast<const GCMaintenanceInfoPacket*>(
               &_GCMaintenanceInfoPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(GCMaintenanceInfoPacket& a, GCMaintenanceInfoPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCMaintenanceInfoPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCMaintenanceInfoPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCMaintenanceInfoPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCMaintenanceInfoPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCMaintenanceInfoPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCMaintenanceInfoPacket& from) {
    GCMaintenanceInfoPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCMaintenanceInfoPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCMaintenanceInfoPacket";
  }
  protected:
  explicit GCMaintenanceInfoPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCauseFieldNumber = 3,
    kRemainingTimeFieldNumber = 1,
    kDurationFieldNumber = 2,
  };
  // bytes cause = 3;
  void clear_cause();
  const std::string& cause() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cause(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cause();
  PROTOBUF_NODISCARD std::string* release_cause();
  void set_allocated_cause(std::string* cause);
  private:
  const std::string& _internal_cause() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cause(const std::string& value);
  std::string* _internal_mutable_cause();
  public:

  // uint32 remaining_time = 1;
  void clear_remaining_time();
  uint32_t remaining_time() const;
  void set_remaining_time(uint32_t value);
  private:
  uint32_t _internal_remaining_time() const;
  void _internal_set_remaining_time(uint32_t value);
  public:

  // uint32 duration = 2;
  void clear_duration();
  uint32_t duration() const;
  void set_duration(uint32_t value);
  private:
  uint32_t _internal_duration() const;
  void _internal_set_duration(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCMaintenanceInfoPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cause_;
    uint32_t remaining_time_;
    uint32_t duration_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCObserverAddPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCObserverAddPacket) */ {
 public:
  inline GCObserverAddPacket() : GCObserverAddPacket(nullptr) {}
  ~GCObserverAddPacket() override;
  explicit PROTOBUF_CONSTEXPR GCObserverAddPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCObserverAddPacket(const GCObserverAddPacket& from);
  GCObserverAddPacket(GCObserverAddPacket&& from) noexcept
    : GCObserverAddPacket() {
    *this = ::std::move(from);
  }

  inline GCObserverAddPacket& operator=(const GCObserverAddPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCObserverAddPacket& operator=(GCObserverAddPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCObserverAddPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCObserverAddPacket* internal_default_instance() {
    return reinterpret_cast<const GCObserverAddPacket*>(
               &_GCObserverAddPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(GCObserverAddPacket& a, GCObserverAddPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCObserverAddPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCObserverAddPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCObserverAddPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCObserverAddPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCObserverAddPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCObserverAddPacket& from) {
    GCObserverAddPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCObserverAddPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCObserverAddPacket";
  }
  protected:
  explicit GCObserverAddPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVidFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
  };
  // uint32 vid = 1;
  void clear_vid();
  uint32_t vid() const;
  void set_vid(uint32_t value);
  private:
  uint32_t _internal_vid() const;
  void _internal_set_vid(uint32_t value);
  public:

  // int32 x = 2;
  void clear_x();
  int32_t x() const;
  void set_x(int32_t value);
  private:
  int32_t _internal_x() const;
  void _internal_set_x(int32_t value);
  public:

  // int32 y = 3;
  void clear_y();
  int32_t y() const;
  void set_y(int32_t value);
  private:
  int32_t _internal_y() const;
  void _internal_set_y(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCObserverAddPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t vid_;
    int32_t x_;
    int32_t y_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCObserverRemovePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCObserverRemovePacket) */ {
 public:
  inline GCObserverRemovePacket() : GCObserverRemovePacket(nullptr) {}
  ~GCObserverRemovePacket() override;
  explicit PROTOBUF_CONSTEXPR GCObserverRemovePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCObserverRemovePacket(const GCObserverRemovePacket& from);
  GCObserverRemovePacket(GCObserverRemovePacket&& from) noexcept
    : GCObserverRemovePacket() {
    *this = ::std::move(from);
  }

  inline GCObserverRemovePacket& operator=(const GCObserverRemovePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCObserverRemovePacket& operator=(GCObserverRemovePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCObserverRemovePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCObserverRemovePacket* internal_default_instance() {
    return reinterpret_cast<const GCObserverRemovePacket*>(
               &_GCObserverRemovePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(GCObserverRemovePacket& a, GCObserverRemovePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCObserverRemovePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCObserverRemovePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCObserverRemovePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCObserverRemovePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCObserverRemovePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCObserverRemovePacket& from) {
    GCObserverRemovePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCObserverRemovePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCObserverRemovePacket";
  }
  protected:
  explicit GCObserverRemovePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVidFieldNumber = 1,
  };
  // uint32 vid = 1;
  void clear_vid();
  uint32_t vid() const;
  void set_vid(uint32_t value);
  private:
  uint32_t _internal_vid() const;
  void _internal_set_vid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCObserverRemovePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t vid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCObserverMovePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCObserverMovePacket) */ {
 public:
  inline GCObserverMovePacket() : GCObserverMovePacket(nullptr) {}
  ~GCObserverMovePacket() override;
  explicit PROTOBUF_CONSTEXPR GCObserverMovePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCObserverMovePacket(const GCObserverMovePacket& from);
  GCObserverMovePacket(GCObserverMovePacket&& from) noexcept
    : GCObserverMovePacket() {
    *this = ::std::move(from);
  }

  inline GCObserverMovePacket& operator=(const GCObserverMovePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCObserverMovePacket& operator=(GCObserverMovePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCObserverMovePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCObserverMovePacket* internal_default_instance() {
    return reinterpret_cast<const GCObserverMovePacket*>(
               &_GCObserverMovePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(GCObserverMovePacket& a, GCObserverMovePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCObserverMovePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCObserverMovePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCObserverMovePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCObserverMovePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCObserverMovePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCObserverMovePacket& from) {
    GCObserverMovePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCObserverMovePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCObserverMovePacket";
  }
  protected:
  explicit GCObserverMovePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVidFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
  };
  // uint32 vid = 1;
  void clear_vid();
  uint32_t vid() const;
  void set_vid(uint32_t value);
  private:
  uint32_t _internal_vid() const;
  void _internal_set_vid(uint32_t value);
  public:

  // int32 x = 2;
  void clear_x();
  int32_t x() const;
  void set_x(int32_t value);
  private:
  int32_t _internal_x() const;
  void _internal_set_x(int32_t value);
  public:

  // int32 y = 3;
  void clear_y();
  int32_t y() const;
  void set_y(int32_t value);
  private:
  int32_t _internal_y() const;
  void _internal_set_y(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCObserverMovePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t vid_;
    int32_t x_;
    int32_t y_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCSafeboxSizePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCSafeboxSizePacket) */ {
 public:
  inline GCSafeboxSizePacket() : GCSafeboxSizePacket(nullptr) {}
  ~GCSafeboxSizePacket() override;
  explicit PROTOBUF_CONSTEXPR GCSafeboxSizePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCSafeboxSizePacket(const GCSafeboxSizePacket& from);
  GCSafeboxSizePacket(GCSafeboxSizePacket&& from) noexcept
    : GCSafeboxSizePacket() {
    *this = ::std::move(from);
  }

  inline GCSafeboxSizePacket& operator=(const GCSafeboxSizePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCSafeboxSizePacket& operator=(GCSafeboxSizePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCSafeboxSizePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCSafeboxSizePacket* internal_default_instance() {
    return reinterpret_cast<const GCSafeboxSizePacket*>(
               &_GCSafeboxSizePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(GCSafeboxSizePacket& a, GCSafeboxSizePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCSafeboxSizePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCSafeboxSizePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCSafeboxSizePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCSafeboxSizePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCSafeboxSizePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCSafeboxSizePacket& from) {
    GCSafeboxSizePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCSafeboxSizePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCSafeboxSizePacket";
  }
  protected:
  explicit GCSafeboxSizePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSizeFieldNumber = 1,
  };
  // uint32 size = 1;
  void clear_size();
  uint32_t size() const;
  void set_size(uint32_t value);
  private:
  uint32_t _internal_size() const;
  void _internal_set_size(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCSafeboxSizePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCSafeboxMoneyChangePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCSafeboxMoneyChangePacket) */ {
 public:
  inline GCSafeboxMoneyChangePacket() : GCSafeboxMoneyChangePacket(nullptr) {}
  ~GCSafeboxMoneyChangePacket() override;
  explicit PROTOBUF_CONSTEXPR GCSafeboxMoneyChangePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCSafeboxMoneyChangePacket(const GCSafeboxMoneyChangePacket& from);
  GCSafeboxMoneyChangePacket(GCSafeboxMoneyChangePacket&& from) noexcept
    : GCSafeboxMoneyChangePacket() {
    *this = ::std::move(from);
  }

  inline GCSafeboxMoneyChangePacket& operator=(const GCSafeboxMoneyChangePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCSafeboxMoneyChangePacket& operator=(GCSafeboxMoneyChangePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCSafeboxMoneyChangePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCSafeboxMoneyChangePacket* internal_default_instance() {
    return reinterpret_cast<const GCSafeboxMoneyChangePacket*>(
               &_GCSafeboxMoneyChangePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(GCSafeboxMoneyChangePacket& a, GCSafeboxMoneyChangePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCSafeboxMoneyChangePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCSafeboxMoneyChangePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCSafeboxMoneyChangePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCSafeboxMoneyChangePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCSafeboxMoneyChangePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCSafeboxMoneyChangePacket& from) {
    GCSafeboxMoneyChangePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCSafeboxMoneyChangePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCSafeboxMoneyChangePacket";
  }
  protected:
  explicit GCSafeboxMoneyChangePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMoneyFieldNumber = 1,
  };
  // uint32 money = 1;
  void clear_money();
  uint32_t money() const;
  void set_money(uint32_t value);
  private:
  uint32_t _internal_money() const;
  void _internal_set_money(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCSafeboxMoneyChangePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t money_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCWarpPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCWarpPacket) */ {
 public:
  inline GCWarpPacket() : GCWarpPacket(nullptr) {}
  ~GCWarpPacket() override;
  explicit PROTOBUF_CONSTEXPR GCWarpPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCWarpPacket(const GCWarpPacket& from);
  GCWarpPacket(GCWarpPacket&& from) noexcept
    : GCWarpPacket() {
    *this = ::std::move(from);
  }

  inline GCWarpPacket& operator=(const GCWarpPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCWarpPacket& operator=(GCWarpPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCWarpPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCWarpPacket* internal_default_instance() {
    return reinterpret_cast<const GCWarpPacket*>(
               &_GCWarpPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(GCWarpPacket& a, GCWarpPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCWarpPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCWarpPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCWarpPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCWarpPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCWarpPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCWarpPacket& from) {
    GCWarpPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCWarpPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCWarpPacket";
  }
  protected:
  explicit GCWarpPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kAddrFieldNumber = 3,
    kPortFieldNumber = 4,
  };
  // int32 x = 1;
  void clear_x();
  int32_t x() const;
  void set_x(int32_t value);
  private:
  int32_t _internal_x() const;
  void _internal_set_x(int32_t value);
  public:

  // int32 y = 2;
  void clear_y();
  int32_t y() const;
  void set_y(int32_t value);
  private:
  int32_t _internal_y() const;
  void _internal_set_y(int32_t value);
  public:

  // int32 addr = 3;
  void clear_addr();
  int32_t addr() const;
  void set_addr(int32_t value);
  private:
  int32_t _internal_addr() const;
  void _internal_set_addr(int32_t value);
  public:

  // uint32 port = 4;
  void clear_port();
  uint32_t port() const;
  void set_port(uint32_t value);
  private:
  uint32_t _internal_port() const;
  void _internal_set_port(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCWarpPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t x_;
    int32_t y_;
    int32_t addr_;
    uint32_t port_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCPVPPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCPVPPacket) */ {
 public:
  inline GCPVPPacket() : GCPVPPacket(nullptr) {}
  ~GCPVPPacket() override;
  explicit PROTOBUF_CONSTEXPR GCPVPPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCPVPPacket(const GCPVPPacket& from);
  GCPVPPacket(GCPVPPacket&& from) noexcept
    : GCPVPPacket() {
    *this = ::std::move(from);
  }

  inline GCPVPPacket& operator=(const GCPVPPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCPVPPacket& operator=(GCPVPPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCPVPPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCPVPPacket* internal_default_instance() {
    return reinterpret_cast<const GCPVPPacket*>(
               &_GCPVPPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(GCPVPPacket& a, GCPVPPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCPVPPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCPVPPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCPVPPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCPVPPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCPVPPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCPVPPacket& from) {
    GCPVPPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCPVPPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCPVPPacket";
  }
  protected:
  explicit GCPVPPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVidSrcFieldNumber = 1,
    kVidDstFieldNumber = 2,
    kModeFieldNumber = 3,
  };
  // uint32 vid_src = 1;
  void clear_vid_src();
  uint32_t vid_src() const;
  void set_vid_src(uint32_t value);
  private:
  uint32_t _internal_vid_src() const;
  void _internal_set_vid_src(uint32_t value);
  public:

  // uint32 vid_dst = 2;
  void clear_vid_dst();
  uint32_t vid_dst() const;
  void set_vid_dst(uint32_t value);
  private:
  uint32_t _internal_vid_dst() const;
  void _internal_set_vid_dst(uint32_t value);
  public:

  // uint32 mode = 3;
  void clear_mode();
  uint32_t mode() const;
  void set_mode(uint32_t value);
  private:
  uint32_t _internal_mode() const;
  void _internal_set_mode(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCPVPPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t vid_src_;
    uint32_t vid_dst_;
    uint32_t mode_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCDuelStartPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCDuelStartPacket) */ {
 public:
  inline GCDuelStartPacket() : GCDuelStartPacket(nullptr) {}
  ~GCDuelStartPacket() override;
  explicit PROTOBUF_CONSTEXPR GCDuelStartPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCDuelStartPacket(const GCDuelStartPacket& from);
  GCDuelStartPacket(GCDuelStartPacket&& from) noexcept
    : GCDuelStartPacket() {
    *this = ::std::move(from);
  }

  inline GCDuelStartPacket& operator=(const GCDuelStartPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCDuelStartPacket& operator=(GCDuelStartPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCDuelStartPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCDuelStartPacket* internal_default_instance() {
    return reinterpret_cast<const GCDuelStartPacket*>(
               &_GCDuelStartPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(GCDuelStartPacket& a, GCDuelStartPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCDuelStartPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCDuelStartPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCDuelStartPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCDuelStartPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCDuelStartPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCDuelStartPacket& from) {
    GCDuelStartPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCDuelStartPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCDuelStartPacket";
  }
  protected:
  explicit GCDuelStartPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVidsFieldNumber = 1,
  };
  // repeated uint32 vids = 1;
  int vids_size() const;
  private:
  int _internal_vids_size() const;
  public:
  void clear_vids();
  private:
  uint32_t _internal_vids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_vids() const;
  void _internal_add_vids(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_vids();
  public:
  uint32_t vids(int index) const;
  void set_vids(int index, uint32_t value);
  void add_vids(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      vids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_vids();

  // @@protoc_insertion_point(class_scope:network.GCDuelStartPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > vids_;
    mutable std::atomic<int> _vids_cached_byte_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCOwnershipPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCOwnershipPacket) */ {
 public:
  inline GCOwnershipPacket() : GCOwnershipPacket(nullptr) {}
  ~GCOwnershipPacket() override;
  explicit PROTOBUF_CONSTEXPR GCOwnershipPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCOwnershipPacket(const GCOwnershipPacket& from);
  GCOwnershipPacket(GCOwnershipPacket&& from) noexcept
    : GCOwnershipPacket() {
    *this = ::std::move(from);
  }

  inline GCOwnershipPacket& operator=(const GCOwnershipPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCOwnershipPacket& operator=(GCOwnershipPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCOwnershipPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCOwnershipPacket* internal_default_instance() {
    return reinterpret_cast<const GCOwnershipPacket*>(
               &_GCOwnershipPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(GCOwnershipPacket& a, GCOwnershipPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCOwnershipPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCOwnershipPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCOwnershipPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCOwnershipPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCOwnershipPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCOwnershipPacket& from) {
    GCOwnershipPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCOwnershipPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCOwnershipPacket";
  }
  protected:
  explicit GCOwnershipPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOwnerVidFieldNumber = 1,
    kVictimVidFieldNumber = 2,
  };
  // uint32 owner_vid = 1;
  void clear_owner_vid();
  uint32_t owner_vid() const;
  void set_owner_vid(uint32_t value);
  private:
  uint32_t _internal_owner_vid() const;
  void _internal_set_owner_vid(uint32_t value);
  public:

  // uint32 victim_vid = 2;
  void clear_victim_vid();
  uint32_t victim_vid() const;
  void set_victim_vid(uint32_t value);
  private:
  uint32_t _internal_victim_vid() const;
  void _internal_set_victim_vid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCOwnershipPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t owner_vid_;
    uint32_t victim_vid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCPositionPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCPositionPacket) */ {
 public:
  inline GCPositionPacket() : GCPositionPacket(nullptr) {}
  ~GCPositionPacket() override;
  explicit PROTOBUF_CONSTEXPR GCPositionPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCPositionPacket(const GCPositionPacket& from);
  GCPositionPacket(GCPositionPacket&& from) noexcept
    : GCPositionPacket() {
    *this = ::std::move(from);
  }

  inline GCPositionPacket& operator=(const GCPositionPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCPositionPacket& operator=(GCPositionPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCPositionPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCPositionPacket* internal_default_instance() {
    return reinterpret_cast<const GCPositionPacket*>(
               &_GCPositionPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(GCPositionPacket& a, GCPositionPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCPositionPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCPositionPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCPositionPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCPositionPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCPositionPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCPositionPacket& from) {
    GCPositionPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCPositionPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCPositionPacket";
  }
  protected:
  explicit GCPositionPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVidFieldNumber = 1,
    kPositionFieldNumber = 2,
  };
  // uint32 vid = 1;
  void clear_vid();
  uint32_t vid() const;
  void set_vid(uint32_t value);
  private:
  uint32_t _internal_vid() const;
  void _internal_set_vid(uint32_t value);
  public:

  // uint32 position = 2;
  void clear_position();
  uint32_t position() const;
  void set_position(uint32_t value);
  private:
  uint32_t _internal_position() const;
  void _internal_set_position(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCPositionPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t vid_;
    uint32_t position_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCStunPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCStunPacket) */ {
 public:
  inline GCStunPacket() : GCStunPacket(nullptr) {}
  ~GCStunPacket() override;
  explicit PROTOBUF_CONSTEXPR GCStunPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCStunPacket(const GCStunPacket& from);
  GCStunPacket(GCStunPacket&& from) noexcept
    : GCStunPacket() {
    *this = ::std::move(from);
  }

  inline GCStunPacket& operator=(const GCStunPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCStunPacket& operator=(GCStunPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCStunPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCStunPacket* internal_default_instance() {
    return reinterpret_cast<const GCStunPacket*>(
               &_GCStunPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(GCStunPacket& a, GCStunPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCStunPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCStunPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCStunPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCStunPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCStunPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCStunPacket& from) {
    GCStunPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCStunPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCStunPacket";
  }
  protected:
  explicit GCStunPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVidFieldNumber = 1,
  };
  // uint32 vid = 1;
  void clear_vid();
  uint32_t vid() const;
  void set_vid(uint32_t value);
  private:
  uint32_t _internal_vid() const;
  void _internal_set_vid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCStunPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t vid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCDeadPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCDeadPacket) */ {
 public:
  inline GCDeadPacket() : GCDeadPacket(nullptr) {}
  ~GCDeadPacket() override;
  explicit PROTOBUF_CONSTEXPR GCDeadPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCDeadPacket(const GCDeadPacket& from);
  GCDeadPacket(GCDeadPacket&& from) noexcept
    : GCDeadPacket() {
    *this = ::std::move(from);
  }

  inline GCDeadPacket& operator=(const GCDeadPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCDeadPacket& operator=(GCDeadPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCDeadPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCDeadPacket* internal_default_instance() {
    return reinterpret_cast<const GCDeadPacket*>(
               &_GCDeadPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(GCDeadPacket& a, GCDeadPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCDeadPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCDeadPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCDeadPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCDeadPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCDeadPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCDeadPacket& from) {
    GCDeadPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCDeadPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCDeadPacket";
  }
  protected:
  explicit GCDeadPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVidFieldNumber = 1,
    kKillerIsPcFieldNumber = 2,
  };
  // uint32 vid = 1;
  void clear_vid();
  uint32_t vid() const;
  void set_vid(uint32_t value);
  private:
  uint32_t _internal_vid() const;
  void _internal_set_vid(uint32_t value);
  public:

  // bool killer_is_pc = 2;
  void clear_killer_is_pc();
  bool killer_is_pc() const;
  void set_killer_is_pc(bool value);
  private:
  bool _internal_killer_is_pc() const;
  void _internal_set_killer_is_pc(bool value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCDeadPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t vid_;
    bool killer_is_pc_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCPointsPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCPointsPacket) */ {
 public:
  inline GCPointsPacket() : GCPointsPacket(nullptr) {}
  ~GCPointsPacket() override;
  explicit PROTOBUF_CONSTEXPR GCPointsPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCPointsPacket(const GCPointsPacket& from);
  GCPointsPacket(GCPointsPacket&& from) noexcept
    : GCPointsPacket() {
    *this = ::std::move(from);
  }

  inline GCPointsPacket& operator=(const GCPointsPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCPointsPacket& operator=(GCPointsPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCPointsPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCPointsPacket* internal_default_instance() {
    return reinterpret_cast<const GCPointsPacket*>(
               &_GCPointsPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(GCPointsPacket& a, GCPointsPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCPointsPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCPointsPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCPointsPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCPointsPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCPointsPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCPointsPacket& from) {
    GCPointsPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCPointsPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCPointsPacket";
  }
  protected:
  explicit GCPointsPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointsFieldNumber = 1,
    kRealPointsFieldNumber = 2,
  };
  // repeated int64 points = 1;
  int points_size() const;
  private:
  int _internal_points_size() const;
  public:
  void clear_points();
  private:
  int64_t _internal_points(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_points() const;
  void _internal_add_points(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_points();
  public:
  int64_t points(int index) const;
  void set_points(int index, int64_t value);
  void add_points(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      points() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_points();

  // repeated int64 real_points = 2;
  int real_points_size() const;
  private:
  int _internal_real_points_size() const;
  public:
  void clear_real_points();
  private:
  int64_t _internal_real_points(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_real_points() const;
  void _internal_add_real_points(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_real_points();
  public:
  int64_t real_points(int index) const;
  void set_real_points(int index, int64_t value);
  void add_real_points(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      real_points() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_real_points();

  // @@protoc_insertion_point(class_scope:network.GCPointsPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > points_;
    mutable std::atomic<int> _points_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > real_points_;
    mutable std::atomic<int> _real_points_cached_byte_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCPointChangePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCPointChangePacket) */ {
 public:
  inline GCPointChangePacket() : GCPointChangePacket(nullptr) {}
  ~GCPointChangePacket() override;
  explicit PROTOBUF_CONSTEXPR GCPointChangePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCPointChangePacket(const GCPointChangePacket& from);
  GCPointChangePacket(GCPointChangePacket&& from) noexcept
    : GCPointChangePacket() {
    *this = ::std::move(from);
  }

  inline GCPointChangePacket& operator=(const GCPointChangePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCPointChangePacket& operator=(GCPointChangePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCPointChangePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCPointChangePacket* internal_default_instance() {
    return reinterpret_cast<const GCPointChangePacket*>(
               &_GCPointChangePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(GCPointChangePacket& a, GCPointChangePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCPointChangePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCPointChangePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCPointChangePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCPointChangePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCPointChangePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCPointChangePacket& from) {
    GCPointChangePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCPointChangePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCPointChangePacket";
  }
  protected:
  explicit GCPointChangePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVidFieldNumber = 1,
    kTypeFieldNumber = 2,
    kAmountFieldNumber = 3,
    kValueFieldNumber = 4,
  };
  // uint32 vid = 1;
  void clear_vid();
  uint32_t vid() const;
  void set_vid(uint32_t value);
  private:
  uint32_t _internal_vid() const;
  void _internal_set_vid(uint32_t value);
  public:

  // uint32 type = 2;
  void clear_type();
  uint32_t type() const;
  void set_type(uint32_t value);
  private:
  uint32_t _internal_type() const;
  void _internal_set_type(uint32_t value);
  public:

  // int64 amount = 3;
  void clear_amount();
  int64_t amount() const;
  void set_amount(int64_t value);
  private:
  int64_t _internal_amount() const;
  void _internal_set_amount(int64_t value);
  public:

  // int64 value = 4;
  void clear_value();
  int64_t value() const;
  void set_value(int64_t value);
  private:
  int64_t _internal_value() const;
  void _internal_set_value(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCPointChangePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t vid_;
    uint32_t type_;
    int64_t amount_;
    int64_t value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCRealPointSetPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCRealPointSetPacket) */ {
 public:
  inline GCRealPointSetPacket() : GCRealPointSetPacket(nullptr) {}
  ~GCRealPointSetPacket() override;
  explicit PROTOBUF_CONSTEXPR GCRealPointSetPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCRealPointSetPacket(const GCRealPointSetPacket& from);
  GCRealPointSetPacket(GCRealPointSetPacket&& from) noexcept
    : GCRealPointSetPacket() {
    *this = ::std::move(from);
  }

  inline GCRealPointSetPacket& operator=(const GCRealPointSetPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCRealPointSetPacket& operator=(GCRealPointSetPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCRealPointSetPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCRealPointSetPacket* internal_default_instance() {
    return reinterpret_cast<const GCRealPointSetPacket*>(
               &_GCRealPointSetPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(GCRealPointSetPacket& a, GCRealPointSetPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCRealPointSetPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCRealPointSetPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCRealPointSetPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCRealPointSetPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCRealPointSetPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCRealPointSetPacket& from) {
    GCRealPointSetPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCRealPointSetPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCRealPointSetPacket";
  }
  protected:
  explicit GCRealPointSetPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // int64 value = 2;
  void clear_value();
  int64_t value() const;
  void set_value(int64_t value);
  private:
  int64_t _internal_value() const;
  void _internal_set_value(int64_t value);
  public:

  // uint32 type = 1;
  void clear_type();
  uint32_t type() const;
  void set_type(uint32_t value);
  private:
  uint32_t _internal_type() const;
  void _internal_set_type(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCRealPointSetPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t value_;
    uint32_t type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCQuickslotAddPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCQuickslotAddPacket) */ {
 public:
  inline GCQuickslotAddPacket() : GCQuickslotAddPacket(nullptr) {}
  ~GCQuickslotAddPacket() override;
  explicit PROTOBUF_CONSTEXPR GCQuickslotAddPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCQuickslotAddPacket(const GCQuickslotAddPacket& from);
  GCQuickslotAddPacket(GCQuickslotAddPacket&& from) noexcept
    : GCQuickslotAddPacket() {
    *this = ::std::move(from);
  }

  inline GCQuickslotAddPacket& operator=(const GCQuickslotAddPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCQuickslotAddPacket& operator=(GCQuickslotAddPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCQuickslotAddPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCQuickslotAddPacket* internal_default_instance() {
    return reinterpret_cast<const GCQuickslotAddPacket*>(
               &_GCQuickslotAddPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(GCQuickslotAddPacket& a, GCQuickslotAddPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCQuickslotAddPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCQuickslotAddPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCQuickslotAddPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCQuickslotAddPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCQuickslotAddPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCQuickslotAddPacket& from) {
    GCQuickslotAddPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCQuickslotAddPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCQuickslotAddPacket";
  }
  protected:
  explicit GCQuickslotAddPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSlotFieldNumber = 2,
    kPosFieldNumber = 1,
  };
  // .TQuickslot slot = 2;
  bool has_slot() const;
  private:
  bool _internal_has_slot() const;
  public:
  void clear_slot();
  const ::TQuickslot& slot() const;
  PROTOBUF_NODISCARD ::TQuickslot* release_slot();
  ::TQuickslot* mutable_slot();
  void set_allocated_slot(::TQuickslot* slot);
  private:
  const ::TQuickslot& _internal_slot() const;
  ::TQuickslot* _internal_mutable_slot();
  public:
  void unsafe_arena_set_allocated_slot(
      ::TQuickslot* slot);
  ::TQuickslot* unsafe_arena_release_slot();

  // uint32 pos = 1;
  void clear_pos();
  uint32_t pos() const;
  void set_pos(uint32_t value);
  private:
  uint32_t _internal_pos() const;
  void _internal_set_pos(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCQuickslotAddPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::TQuickslot* slot_;
    uint32_t pos_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCQuickslotDelPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCQuickslotDelPacket) */ {
 public:
  inline GCQuickslotDelPacket() : GCQuickslotDelPacket(nullptr) {}
  ~GCQuickslotDelPacket() override;
  explicit PROTOBUF_CONSTEXPR GCQuickslotDelPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCQuickslotDelPacket(const GCQuickslotDelPacket& from);
  GCQuickslotDelPacket(GCQuickslotDelPacket&& from) noexcept
    : GCQuickslotDelPacket() {
    *this = ::std::move(from);
  }

  inline GCQuickslotDelPacket& operator=(const GCQuickslotDelPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCQuickslotDelPacket& operator=(GCQuickslotDelPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCQuickslotDelPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCQuickslotDelPacket* internal_default_instance() {
    return reinterpret_cast<const GCQuickslotDelPacket*>(
               &_GCQuickslotDelPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(GCQuickslotDelPacket& a, GCQuickslotDelPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCQuickslotDelPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCQuickslotDelPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCQuickslotDelPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCQuickslotDelPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCQuickslotDelPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCQuickslotDelPacket& from) {
    GCQuickslotDelPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCQuickslotDelPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCQuickslotDelPacket";
  }
  protected:
  explicit GCQuickslotDelPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosFieldNumber = 1,
  };
  // uint32 pos = 1;
  void clear_pos();
  uint32_t pos() const;
  void set_pos(uint32_t value);
  private:
  uint32_t _internal_pos() const;
  void _internal_set_pos(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCQuickslotDelPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t pos_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCQuickslotSwapPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCQuickslotSwapPacket) */ {
 public:
  inline GCQuickslotSwapPacket() : GCQuickslotSwapPacket(nullptr) {}
  ~GCQuickslotSwapPacket() override;
  explicit PROTOBUF_CONSTEXPR GCQuickslotSwapPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCQuickslotSwapPacket(const GCQuickslotSwapPacket& from);
  GCQuickslotSwapPacket(GCQuickslotSwapPacket&& from) noexcept
    : GCQuickslotSwapPacket() {
    *this = ::std::move(from);
  }

  inline GCQuickslotSwapPacket& operator=(const GCQuickslotSwapPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCQuickslotSwapPacket& operator=(GCQuickslotSwapPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCQuickslotSwapPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCQuickslotSwapPacket* internal_default_instance() {
    return reinterpret_cast<const GCQuickslotSwapPacket*>(
               &_GCQuickslotSwapPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(GCQuickslotSwapPacket& a, GCQuickslotSwapPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCQuickslotSwapPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCQuickslotSwapPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCQuickslotSwapPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCQuickslotSwapPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCQuickslotSwapPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCQuickslotSwapPacket& from) {
    GCQuickslotSwapPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCQuickslotSwapPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCQuickslotSwapPacket";
  }
  protected:
  explicit GCQuickslotSwapPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosFieldNumber = 1,
    kChangePosFieldNumber = 2,
  };
  // uint32 pos = 1;
  void clear_pos();
  uint32_t pos() const;
  void set_pos(uint32_t value);
  private:
  uint32_t _internal_pos() const;
  void _internal_set_pos(uint32_t value);
  public:

  // uint32 change_pos = 2;
  void clear_change_pos();
  uint32_t change_pos() const;
  void set_change_pos(uint32_t value);
  private:
  uint32_t _internal_change_pos() const;
  void _internal_set_change_pos(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCQuickslotSwapPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t pos_;
    uint32_t change_pos_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCMotionPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCMotionPacket) */ {
 public:
  inline GCMotionPacket() : GCMotionPacket(nullptr) {}
  ~GCMotionPacket() override;
  explicit PROTOBUF_CONSTEXPR GCMotionPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCMotionPacket(const GCMotionPacket& from);
  GCMotionPacket(GCMotionPacket&& from) noexcept
    : GCMotionPacket() {
    *this = ::std::move(from);
  }

  inline GCMotionPacket& operator=(const GCMotionPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCMotionPacket& operator=(GCMotionPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCMotionPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCMotionPacket* internal_default_instance() {
    return reinterpret_cast<const GCMotionPacket*>(
               &_GCMotionPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(GCMotionPacket& a, GCMotionPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCMotionPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCMotionPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCMotionPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCMotionPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCMotionPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCMotionPacket& from) {
    GCMotionPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCMotionPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCMotionPacket";
  }
  protected:
  explicit GCMotionPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVidFieldNumber = 1,
    kVictimVidFieldNumber = 2,
    kMotionFieldNumber = 3,
  };
  // uint32 vid = 1;
  void clear_vid();
  uint32_t vid() const;
  void set_vid(uint32_t value);
  private:
  uint32_t _internal_vid() const;
  void _internal_set_vid(uint32_t value);
  public:

  // uint32 victim_vid = 2;
  void clear_victim_vid();
  uint32_t victim_vid() const;
  void set_victim_vid(uint32_t value);
  private:
  uint32_t _internal_victim_vid() const;
  void _internal_set_victim_vid(uint32_t value);
  public:

  // uint32 motion = 3;
  void clear_motion();
  uint32_t motion() const;
  void set_motion(uint32_t value);
  private:
  uint32_t _internal_motion() const;
  void _internal_set_motion(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCMotionPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t vid_;
    uint32_t victim_vid_;
    uint32_t motion_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCDamageInfoPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCDamageInfoPacket) */ {
 public:
  inline GCDamageInfoPacket() : GCDamageInfoPacket(nullptr) {}
  ~GCDamageInfoPacket() override;
  explicit PROTOBUF_CONSTEXPR GCDamageInfoPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCDamageInfoPacket(const GCDamageInfoPacket& from);
  GCDamageInfoPacket(GCDamageInfoPacket&& from) noexcept
    : GCDamageInfoPacket() {
    *this = ::std::move(from);
  }

  inline GCDamageInfoPacket& operator=(const GCDamageInfoPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCDamageInfoPacket& operator=(GCDamageInfoPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCDamageInfoPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCDamageInfoPacket* internal_default_instance() {
    return reinterpret_cast<const GCDamageInfoPacket*>(
               &_GCDamageInfoPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(GCDamageInfoPacket& a, GCDamageInfoPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCDamageInfoPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCDamageInfoPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCDamageInfoPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCDamageInfoPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCDamageInfoPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCDamageInfoPacket& from) {
    GCDamageInfoPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCDamageInfoPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCDamageInfoPacket";
  }
  protected:
  explicit GCDamageInfoPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVidFieldNumber = 1,
    kFlagFieldNumber = 2,
    kDamageFieldNumber = 3,
    kTargetVidFieldNumber = 4,
  };
  // uint32 vid = 1;
  void clear_vid();
  uint32_t vid() const;
  void set_vid(uint32_t value);
  private:
  uint32_t _internal_vid() const;
  void _internal_set_vid(uint32_t value);
  public:

  // uint32 flag = 2;
  void clear_flag();
  uint32_t flag() const;
  void set_flag(uint32_t value);
  private:
  uint32_t _internal_flag() const;
  void _internal_set_flag(uint32_t value);
  public:

  // int32 damage = 3;
  void clear_damage();
  int32_t damage() const;
  void set_damage(int32_t value);
  private:
  int32_t _internal_damage() const;
  void _internal_set_damage(int32_t value);
  public:

  // uint32 target_vid = 4;
  void clear_target_vid();
  uint32_t target_vid() const;
  void set_target_vid(uint32_t value);
  private:
  uint32_t _internal_target_vid() const;
  void _internal_set_target_vid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCDamageInfoPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t vid_;
    uint32_t flag_;
    int32_t damage_;
    uint32_t target_vid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCCreateFlyPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCCreateFlyPacket) */ {
 public:
  inline GCCreateFlyPacket() : GCCreateFlyPacket(nullptr) {}
  ~GCCreateFlyPacket() override;
  explicit PROTOBUF_CONSTEXPR GCCreateFlyPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCCreateFlyPacket(const GCCreateFlyPacket& from);
  GCCreateFlyPacket(GCCreateFlyPacket&& from) noexcept
    : GCCreateFlyPacket() {
    *this = ::std::move(from);
  }

  inline GCCreateFlyPacket& operator=(const GCCreateFlyPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCCreateFlyPacket& operator=(GCCreateFlyPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCCreateFlyPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCCreateFlyPacket* internal_default_instance() {
    return reinterpret_cast<const GCCreateFlyPacket*>(
               &_GCCreateFlyPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(GCCreateFlyPacket& a, GCCreateFlyPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCCreateFlyPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCCreateFlyPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCCreateFlyPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCCreateFlyPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCCreateFlyPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCCreateFlyPacket& from) {
    GCCreateFlyPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCCreateFlyPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCCreateFlyPacket";
  }
  protected:
  explicit GCCreateFlyPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kStartVidFieldNumber = 2,
    kEndVidFieldNumber = 3,
  };
  // uint32 type = 1;
  void clear_type();
  uint32_t type() const;
  void set_type(uint32_t value);
  private:
  uint32_t _internal_type() const;
  void _internal_set_type(uint32_t value);
  public:

  // uint32 start_vid = 2;
  void clear_start_vid();
  uint32_t start_vid() const;
  void set_start_vid(uint32_t value);
  private:
  uint32_t _internal_start_vid() const;
  void _internal_set_start_vid(uint32_t value);
  public:

  // uint32 end_vid = 3;
  void clear_end_vid();
  uint32_t end_vid() const;
  void set_end_vid(uint32_t value);
  private:
  uint32_t _internal_end_vid() const;
  void _internal_set_end_vid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCCreateFlyPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t type_;
    uint32_t start_vid_;
    uint32_t end_vid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCDungeonDestinationPositionPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCDungeonDestinationPositionPacket) */ {
 public:
  inline GCDungeonDestinationPositionPacket() : GCDungeonDestinationPositionPacket(nullptr) {}
  ~GCDungeonDestinationPositionPacket() override;
  explicit PROTOBUF_CONSTEXPR GCDungeonDestinationPositionPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCDungeonDestinationPositionPacket(const GCDungeonDestinationPositionPacket& from);
  GCDungeonDestinationPositionPacket(GCDungeonDestinationPositionPacket&& from) noexcept
    : GCDungeonDestinationPositionPacket() {
    *this = ::std::move(from);
  }

  inline GCDungeonDestinationPositionPacket& operator=(const GCDungeonDestinationPositionPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCDungeonDestinationPositionPacket& operator=(GCDungeonDestinationPositionPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCDungeonDestinationPositionPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCDungeonDestinationPositionPacket* internal_default_instance() {
    return reinterpret_cast<const GCDungeonDestinationPositionPacket*>(
               &_GCDungeonDestinationPositionPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(GCDungeonDestinationPositionPacket& a, GCDungeonDestinationPositionPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCDungeonDestinationPositionPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCDungeonDestinationPositionPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCDungeonDestinationPositionPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCDungeonDestinationPositionPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCDungeonDestinationPositionPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCDungeonDestinationPositionPacket& from) {
    GCDungeonDestinationPositionPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCDungeonDestinationPositionPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCDungeonDestinationPositionPacket";
  }
  protected:
  explicit GCDungeonDestinationPositionPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // uint32 x = 1;
  void clear_x();
  uint32_t x() const;
  void set_x(uint32_t value);
  private:
  uint32_t _internal_x() const;
  void _internal_set_x(uint32_t value);
  public:

  // uint32 y = 2;
  void clear_y();
  uint32_t y() const;
  void set_y(uint32_t value);
  private:
  uint32_t _internal_y() const;
  void _internal_set_y(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCDungeonDestinationPositionPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t x_;
    uint32_t y_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCSkillLevelPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCSkillLevelPacket) */ {
 public:
  inline GCSkillLevelPacket() : GCSkillLevelPacket(nullptr) {}
  ~GCSkillLevelPacket() override;
  explicit PROTOBUF_CONSTEXPR GCSkillLevelPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCSkillLevelPacket(const GCSkillLevelPacket& from);
  GCSkillLevelPacket(GCSkillLevelPacket&& from) noexcept
    : GCSkillLevelPacket() {
    *this = ::std::move(from);
  }

  inline GCSkillLevelPacket& operator=(const GCSkillLevelPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCSkillLevelPacket& operator=(GCSkillLevelPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCSkillLevelPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCSkillLevelPacket* internal_default_instance() {
    return reinterpret_cast<const GCSkillLevelPacket*>(
               &_GCSkillLevelPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(GCSkillLevelPacket& a, GCSkillLevelPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCSkillLevelPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCSkillLevelPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCSkillLevelPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCSkillLevelPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCSkillLevelPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCSkillLevelPacket& from) {
    GCSkillLevelPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCSkillLevelPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCSkillLevelPacket";
  }
  protected:
  explicit GCSkillLevelPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLevelsFieldNumber = 1,
  };
  // repeated .TPlayerSkill levels = 1;
  int levels_size() const;
  private:
  int _internal_levels_size() const;
  public:
  void clear_levels();
  ::TPlayerSkill* mutable_levels(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TPlayerSkill >*
      mutable_levels();
  private:
  const ::TPlayerSkill& _internal_levels(int index) const;
  ::TPlayerSkill* _internal_add_levels();
  public:
  const ::TPlayerSkill& levels(int index) const;
  ::TPlayerSkill* add_levels();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TPlayerSkill >&
      levels() const;

  // @@protoc_insertion_point(class_scope:network.GCSkillLevelPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TPlayerSkill > levels_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCMessengerListPacket_Entry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCMessengerListPacket.Entry) */ {
 public:
  inline GCMessengerListPacket_Entry() : GCMessengerListPacket_Entry(nullptr) {}
  ~GCMessengerListPacket_Entry() override;
  explicit PROTOBUF_CONSTEXPR GCMessengerListPacket_Entry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCMessengerListPacket_Entry(const GCMessengerListPacket_Entry& from);
  GCMessengerListPacket_Entry(GCMessengerListPacket_Entry&& from) noexcept
    : GCMessengerListPacket_Entry() {
    *this = ::std::move(from);
  }

  inline GCMessengerListPacket_Entry& operator=(const GCMessengerListPacket_Entry& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCMessengerListPacket_Entry& operator=(GCMessengerListPacket_Entry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCMessengerListPacket_Entry& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCMessengerListPacket_Entry* internal_default_instance() {
    return reinterpret_cast<const GCMessengerListPacket_Entry*>(
               &_GCMessengerListPacket_Entry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(GCMessengerListPacket_Entry& a, GCMessengerListPacket_Entry& b) {
    a.Swap(&b);
  }
  inline void Swap(GCMessengerListPacket_Entry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCMessengerListPacket_Entry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCMessengerListPacket_Entry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCMessengerListPacket_Entry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCMessengerListPacket_Entry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCMessengerListPacket_Entry& from) {
    GCMessengerListPacket_Entry::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCMessengerListPacket_Entry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCMessengerListPacket.Entry";
  }
  protected:
  explicit GCMessengerListPacket_Entry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kConnectedFieldNumber = 1,
  };
  // bytes name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 connected = 1;
  void clear_connected();
  uint32_t connected() const;
  void set_connected(uint32_t value);
  private:
  uint32_t _internal_connected() const;
  void _internal_set_connected(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCMessengerListPacket.Entry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    uint32_t connected_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCMessengerListPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCMessengerListPacket) */ {
 public:
  inline GCMessengerListPacket() : GCMessengerListPacket(nullptr) {}
  ~GCMessengerListPacket() override;
  explicit PROTOBUF_CONSTEXPR GCMessengerListPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCMessengerListPacket(const GCMessengerListPacket& from);
  GCMessengerListPacket(GCMessengerListPacket&& from) noexcept
    : GCMessengerListPacket() {
    *this = ::std::move(from);
  }

  inline GCMessengerListPacket& operator=(const GCMessengerListPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCMessengerListPacket& operator=(GCMessengerListPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCMessengerListPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCMessengerListPacket* internal_default_instance() {
    return reinterpret_cast<const GCMessengerListPacket*>(
               &_GCMessengerListPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(GCMessengerListPacket& a, GCMessengerListPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCMessengerListPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCMessengerListPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCMessengerListPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCMessengerListPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCMessengerListPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCMessengerListPacket& from) {
    GCMessengerListPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCMessengerListPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCMessengerListPacket";
  }
  protected:
  explicit GCMessengerListPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GCMessengerListPacket_Entry Entry;

  // accessors -------------------------------------------------------

  enum : int {
    kPlayersFieldNumber = 1,
  };
  // repeated .network.GCMessengerListPacket.Entry players = 1;
  int players_size() const;
  private:
  int _internal_players_size() const;
  public:
  void clear_players();
  ::network::GCMessengerListPacket_Entry* mutable_players(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::GCMessengerListPacket_Entry >*
      mutable_players();
  private:
  const ::network::GCMessengerListPacket_Entry& _internal_players(int index) const;
  ::network::GCMessengerListPacket_Entry* _internal_add_players();
  public:
  const ::network::GCMessengerListPacket_Entry& players(int index) const;
  ::network::GCMessengerListPacket_Entry* add_players();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::GCMessengerListPacket_Entry >&
      players() const;

  // @@protoc_insertion_point(class_scope:network.GCMessengerListPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::GCMessengerListPacket_Entry > players_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCMessengerBlockListPacket_Entry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCMessengerBlockListPacket.Entry) */ {
 public:
  inline GCMessengerBlockListPacket_Entry() : GCMessengerBlockListPacket_Entry(nullptr) {}
  ~GCMessengerBlockListPacket_Entry() override;
  explicit PROTOBUF_CONSTEXPR GCMessengerBlockListPacket_Entry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCMessengerBlockListPacket_Entry(const GCMessengerBlockListPacket_Entry& from);
  GCMessengerBlockListPacket_Entry(GCMessengerBlockListPacket_Entry&& from) noexcept
    : GCMessengerBlockListPacket_Entry() {
    *this = ::std::move(from);
  }

  inline GCMessengerBlockListPacket_Entry& operator=(const GCMessengerBlockListPacket_Entry& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCMessengerBlockListPacket_Entry& operator=(GCMessengerBlockListPacket_Entry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCMessengerBlockListPacket_Entry& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCMessengerBlockListPacket_Entry* internal_default_instance() {
    return reinterpret_cast<const GCMessengerBlockListPacket_Entry*>(
               &_GCMessengerBlockListPacket_Entry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(GCMessengerBlockListPacket_Entry& a, GCMessengerBlockListPacket_Entry& b) {
    a.Swap(&b);
  }
  inline void Swap(GCMessengerBlockListPacket_Entry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCMessengerBlockListPacket_Entry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCMessengerBlockListPacket_Entry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCMessengerBlockListPacket_Entry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCMessengerBlockListPacket_Entry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCMessengerBlockListPacket_Entry& from) {
    GCMessengerBlockListPacket_Entry::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCMessengerBlockListPacket_Entry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCMessengerBlockListPacket.Entry";
  }
  protected:
  explicit GCMessengerBlockListPacket_Entry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kConnectedFieldNumber = 1,
  };
  // bytes name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 connected = 1;
  void clear_connected();
  uint32_t connected() const;
  void set_connected(uint32_t value);
  private:
  uint32_t _internal_connected() const;
  void _internal_set_connected(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCMessengerBlockListPacket.Entry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    uint32_t connected_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCMessengerBlockListPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCMessengerBlockListPacket) */ {
 public:
  inline GCMessengerBlockListPacket() : GCMessengerBlockListPacket(nullptr) {}
  ~GCMessengerBlockListPacket() override;
  explicit PROTOBUF_CONSTEXPR GCMessengerBlockListPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCMessengerBlockListPacket(const GCMessengerBlockListPacket& from);
  GCMessengerBlockListPacket(GCMessengerBlockListPacket&& from) noexcept
    : GCMessengerBlockListPacket() {
    *this = ::std::move(from);
  }

  inline GCMessengerBlockListPacket& operator=(const GCMessengerBlockListPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCMessengerBlockListPacket& operator=(GCMessengerBlockListPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCMessengerBlockListPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCMessengerBlockListPacket* internal_default_instance() {
    return reinterpret_cast<const GCMessengerBlockListPacket*>(
               &_GCMessengerBlockListPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(GCMessengerBlockListPacket& a, GCMessengerBlockListPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCMessengerBlockListPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCMessengerBlockListPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCMessengerBlockListPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCMessengerBlockListPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCMessengerBlockListPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCMessengerBlockListPacket& from) {
    GCMessengerBlockListPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCMessengerBlockListPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCMessengerBlockListPacket";
  }
  protected:
  explicit GCMessengerBlockListPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GCMessengerBlockListPacket_Entry Entry;

  // accessors -------------------------------------------------------

  enum : int {
    kPlayersFieldNumber = 1,
  };
  // repeated .network.GCMessengerBlockListPacket.Entry players = 1;
  int players_size() const;
  private:
  int _internal_players_size() const;
  public:
  void clear_players();
  ::network::GCMessengerBlockListPacket_Entry* mutable_players(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::GCMessengerBlockListPacket_Entry >*
      mutable_players();
  private:
  const ::network::GCMessengerBlockListPacket_Entry& _internal_players(int index) const;
  ::network::GCMessengerBlockListPacket_Entry* _internal_add_players();
  public:
  const ::network::GCMessengerBlockListPacket_Entry& players(int index) const;
  ::network::GCMessengerBlockListPacket_Entry* add_players();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::GCMessengerBlockListPacket_Entry >&
      players() const;

  // @@protoc_insertion_point(class_scope:network.GCMessengerBlockListPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::GCMessengerBlockListPacket_Entry > players_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCMessengerLoginPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCMessengerLoginPacket) */ {
 public:
  inline GCMessengerLoginPacket() : GCMessengerLoginPacket(nullptr) {}
  ~GCMessengerLoginPacket() override;
  explicit PROTOBUF_CONSTEXPR GCMessengerLoginPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCMessengerLoginPacket(const GCMessengerLoginPacket& from);
  GCMessengerLoginPacket(GCMessengerLoginPacket&& from) noexcept
    : GCMessengerLoginPacket() {
    *this = ::std::move(from);
  }

  inline GCMessengerLoginPacket& operator=(const GCMessengerLoginPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCMessengerLoginPacket& operator=(GCMessengerLoginPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCMessengerLoginPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCMessengerLoginPacket* internal_default_instance() {
    return reinterpret_cast<const GCMessengerLoginPacket*>(
               &_GCMessengerLoginPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(GCMessengerLoginPacket& a, GCMessengerLoginPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCMessengerLoginPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCMessengerLoginPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCMessengerLoginPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCMessengerLoginPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCMessengerLoginPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCMessengerLoginPacket& from) {
    GCMessengerLoginPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCMessengerLoginPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCMessengerLoginPacket";
  }
  protected:
  explicit GCMessengerLoginPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // bytes name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:network.GCMessengerLoginPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCMessengerLogoutPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCMessengerLogoutPacket) */ {
 public:
  inline GCMessengerLogoutPacket() : GCMessengerLogoutPacket(nullptr) {}
  ~GCMessengerLogoutPacket() override;
  explicit PROTOBUF_CONSTEXPR GCMessengerLogoutPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCMessengerLogoutPacket(const GCMessengerLogoutPacket& from);
  GCMessengerLogoutPacket(GCMessengerLogoutPacket&& from) noexcept
    : GCMessengerLogoutPacket() {
    *this = ::std::move(from);
  }

  inline GCMessengerLogoutPacket& operator=(const GCMessengerLogoutPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCMessengerLogoutPacket& operator=(GCMessengerLogoutPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCMessengerLogoutPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCMessengerLogoutPacket* internal_default_instance() {
    return reinterpret_cast<const GCMessengerLogoutPacket*>(
               &_GCMessengerLogoutPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(GCMessengerLogoutPacket& a, GCMessengerLogoutPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCMessengerLogoutPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCMessengerLogoutPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCMessengerLogoutPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCMessengerLogoutPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCMessengerLogoutPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCMessengerLogoutPacket& from) {
    GCMessengerLogoutPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCMessengerLogoutPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCMessengerLogoutPacket";
  }
  protected:
  explicit GCMessengerLogoutPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // bytes name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:network.GCMessengerLogoutPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCMessengerBlockLoginPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCMessengerBlockLoginPacket) */ {
 public:
  inline GCMessengerBlockLoginPacket() : GCMessengerBlockLoginPacket(nullptr) {}
  ~GCMessengerBlockLoginPacket() override;
  explicit PROTOBUF_CONSTEXPR GCMessengerBlockLoginPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCMessengerBlockLoginPacket(const GCMessengerBlockLoginPacket& from);
  GCMessengerBlockLoginPacket(GCMessengerBlockLoginPacket&& from) noexcept
    : GCMessengerBlockLoginPacket() {
    *this = ::std::move(from);
  }

  inline GCMessengerBlockLoginPacket& operator=(const GCMessengerBlockLoginPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCMessengerBlockLoginPacket& operator=(GCMessengerBlockLoginPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCMessengerBlockLoginPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCMessengerBlockLoginPacket* internal_default_instance() {
    return reinterpret_cast<const GCMessengerBlockLoginPacket*>(
               &_GCMessengerBlockLoginPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(GCMessengerBlockLoginPacket& a, GCMessengerBlockLoginPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCMessengerBlockLoginPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCMessengerBlockLoginPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCMessengerBlockLoginPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCMessengerBlockLoginPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCMessengerBlockLoginPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCMessengerBlockLoginPacket& from) {
    GCMessengerBlockLoginPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCMessengerBlockLoginPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCMessengerBlockLoginPacket";
  }
  protected:
  explicit GCMessengerBlockLoginPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // bytes name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:network.GCMessengerBlockLoginPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCMessengerBlockLogoutPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCMessengerBlockLogoutPacket) */ {
 public:
  inline GCMessengerBlockLogoutPacket() : GCMessengerBlockLogoutPacket(nullptr) {}
  ~GCMessengerBlockLogoutPacket() override;
  explicit PROTOBUF_CONSTEXPR GCMessengerBlockLogoutPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCMessengerBlockLogoutPacket(const GCMessengerBlockLogoutPacket& from);
  GCMessengerBlockLogoutPacket(GCMessengerBlockLogoutPacket&& from) noexcept
    : GCMessengerBlockLogoutPacket() {
    *this = ::std::move(from);
  }

  inline GCMessengerBlockLogoutPacket& operator=(const GCMessengerBlockLogoutPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCMessengerBlockLogoutPacket& operator=(GCMessengerBlockLogoutPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCMessengerBlockLogoutPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCMessengerBlockLogoutPacket* internal_default_instance() {
    return reinterpret_cast<const GCMessengerBlockLogoutPacket*>(
               &_GCMessengerBlockLogoutPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(GCMessengerBlockLogoutPacket& a, GCMessengerBlockLogoutPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCMessengerBlockLogoutPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCMessengerBlockLogoutPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCMessengerBlockLogoutPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCMessengerBlockLogoutPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCMessengerBlockLogoutPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCMessengerBlockLogoutPacket& from) {
    GCMessengerBlockLogoutPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCMessengerBlockLogoutPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCMessengerBlockLogoutPacket";
  }
  protected:
  explicit GCMessengerBlockLogoutPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // bytes name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:network.GCMessengerBlockLogoutPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCMessengerMobilePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCMessengerMobilePacket) */ {
 public:
  inline GCMessengerMobilePacket() : GCMessengerMobilePacket(nullptr) {}
  ~GCMessengerMobilePacket() override;
  explicit PROTOBUF_CONSTEXPR GCMessengerMobilePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCMessengerMobilePacket(const GCMessengerMobilePacket& from);
  GCMessengerMobilePacket(GCMessengerMobilePacket&& from) noexcept
    : GCMessengerMobilePacket() {
    *this = ::std::move(from);
  }

  inline GCMessengerMobilePacket& operator=(const GCMessengerMobilePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCMessengerMobilePacket& operator=(GCMessengerMobilePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCMessengerMobilePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCMessengerMobilePacket* internal_default_instance() {
    return reinterpret_cast<const GCMessengerMobilePacket*>(
               &_GCMessengerMobilePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(GCMessengerMobilePacket& a, GCMessengerMobilePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCMessengerMobilePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCMessengerMobilePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCMessengerMobilePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCMessengerMobilePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCMessengerMobilePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCMessengerMobilePacket& from) {
    GCMessengerMobilePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCMessengerMobilePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCMessengerMobilePacket";
  }
  protected:
  explicit GCMessengerMobilePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kStateFieldNumber = 2,
  };
  // bytes name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 state = 2;
  void clear_state();
  uint32_t state() const;
  void set_state(uint32_t value);
  private:
  uint32_t _internal_state() const;
  void _internal_set_state(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCMessengerMobilePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    uint32_t state_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCWalkModePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCWalkModePacket) */ {
 public:
  inline GCWalkModePacket() : GCWalkModePacket(nullptr) {}
  ~GCWalkModePacket() override;
  explicit PROTOBUF_CONSTEXPR GCWalkModePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCWalkModePacket(const GCWalkModePacket& from);
  GCWalkModePacket(GCWalkModePacket&& from) noexcept
    : GCWalkModePacket() {
    *this = ::std::move(from);
  }

  inline GCWalkModePacket& operator=(const GCWalkModePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCWalkModePacket& operator=(GCWalkModePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCWalkModePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCWalkModePacket* internal_default_instance() {
    return reinterpret_cast<const GCWalkModePacket*>(
               &_GCWalkModePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(GCWalkModePacket& a, GCWalkModePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCWalkModePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCWalkModePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCWalkModePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCWalkModePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCWalkModePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCWalkModePacket& from) {
    GCWalkModePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCWalkModePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCWalkModePacket";
  }
  protected:
  explicit GCWalkModePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVidFieldNumber = 1,
    kModeFieldNumber = 2,
  };
  // uint32 vid = 1;
  void clear_vid();
  uint32_t vid() const;
  void set_vid(uint32_t value);
  private:
  uint32_t _internal_vid() const;
  void _internal_set_vid(uint32_t value);
  public:

  // uint32 mode = 2;
  void clear_mode();
  uint32_t mode() const;
  void set_mode(uint32_t value);
  private:
  uint32_t _internal_mode() const;
  void _internal_set_mode(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCWalkModePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t vid_;
    uint32_t mode_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCChangeSkillGroupPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCChangeSkillGroupPacket) */ {
 public:
  inline GCChangeSkillGroupPacket() : GCChangeSkillGroupPacket(nullptr) {}
  ~GCChangeSkillGroupPacket() override;
  explicit PROTOBUF_CONSTEXPR GCChangeSkillGroupPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCChangeSkillGroupPacket(const GCChangeSkillGroupPacket& from);
  GCChangeSkillGroupPacket(GCChangeSkillGroupPacket&& from) noexcept
    : GCChangeSkillGroupPacket() {
    *this = ::std::move(from);
  }

  inline GCChangeSkillGroupPacket& operator=(const GCChangeSkillGroupPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCChangeSkillGroupPacket& operator=(GCChangeSkillGroupPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCChangeSkillGroupPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCChangeSkillGroupPacket* internal_default_instance() {
    return reinterpret_cast<const GCChangeSkillGroupPacket*>(
               &_GCChangeSkillGroupPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(GCChangeSkillGroupPacket& a, GCChangeSkillGroupPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCChangeSkillGroupPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCChangeSkillGroupPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCChangeSkillGroupPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCChangeSkillGroupPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCChangeSkillGroupPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCChangeSkillGroupPacket& from) {
    GCChangeSkillGroupPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCChangeSkillGroupPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCChangeSkillGroupPacket";
  }
  protected:
  explicit GCChangeSkillGroupPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSkillGroupFieldNumber = 1,
  };
  // uint32 skill_group = 1;
  void clear_skill_group();
  uint32_t skill_group() const;
  void set_skill_group(uint32_t value);
  private:
  uint32_t _internal_skill_group() const;
  void _internal_set_skill_group(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCChangeSkillGroupPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t skill_group_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCRefineInformationPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCRefineInformationPacket) */ {
 public:
  inline GCRefineInformationPacket() : GCRefineInformationPacket(nullptr) {}
  ~GCRefineInformationPacket() override;
  explicit PROTOBUF_CONSTEXPR GCRefineInformationPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCRefineInformationPacket(const GCRefineInformationPacket& from);
  GCRefineInformationPacket(GCRefineInformationPacket&& from) noexcept
    : GCRefineInformationPacket() {
    *this = ::std::move(from);
  }

  inline GCRefineInformationPacket& operator=(const GCRefineInformationPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCRefineInformationPacket& operator=(GCRefineInformationPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCRefineInformationPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCRefineInformationPacket* internal_default_instance() {
    return reinterpret_cast<const GCRefineInformationPacket*>(
               &_GCRefineInformationPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  friend void swap(GCRefineInformationPacket& a, GCRefineInformationPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCRefineInformationPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCRefineInformationPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCRefineInformationPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCRefineInformationPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCRefineInformationPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCRefineInformationPacket& from) {
    GCRefineInformationPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCRefineInformationPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCRefineInformationPacket";
  }
  protected:
  explicit GCRefineInformationPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosFieldNumber = 1,
    kRefineTableFieldNumber = 5,
    kTypeFieldNumber = 2,
    kSrcVnumFieldNumber = 3,
    kResultVnumFieldNumber = 4,
    kCanFastRefineFieldNumber = 6,
    kCostFieldNumber = 7,
    kProbFieldNumber = 8,
  };
  // .network.TItemPos pos = 1;
  bool has_pos() const;
  private:
  bool _internal_has_pos() const;
  public:
  void clear_pos();
  const ::network::TItemPos& pos() const;
  PROTOBUF_NODISCARD ::network::TItemPos* release_pos();
  ::network::TItemPos* mutable_pos();
  void set_allocated_pos(::network::TItemPos* pos);
  private:
  const ::network::TItemPos& _internal_pos() const;
  ::network::TItemPos* _internal_mutable_pos();
  public:
  void unsafe_arena_set_allocated_pos(
      ::network::TItemPos* pos);
  ::network::TItemPos* unsafe_arena_release_pos();

  // .network.TRefineTable refine_table = 5;
  bool has_refine_table() const;
  private:
  bool _internal_has_refine_table() const;
  public:
  void clear_refine_table();
  const ::network::TRefineTable& refine_table() const;
  PROTOBUF_NODISCARD ::network::TRefineTable* release_refine_table();
  ::network::TRefineTable* mutable_refine_table();
  void set_allocated_refine_table(::network::TRefineTable* refine_table);
  private:
  const ::network::TRefineTable& _internal_refine_table() const;
  ::network::TRefineTable* _internal_mutable_refine_table();
  public:
  void unsafe_arena_set_allocated_refine_table(
      ::network::TRefineTable* refine_table);
  ::network::TRefineTable* unsafe_arena_release_refine_table();

  // uint32 type = 2;
  void clear_type();
  uint32_t type() const;
  void set_type(uint32_t value);
  private:
  uint32_t _internal_type() const;
  void _internal_set_type(uint32_t value);
  public:

  // uint32 src_vnum = 3;
  void clear_src_vnum();
  uint32_t src_vnum() const;
  void set_src_vnum(uint32_t value);
  private:
  uint32_t _internal_src_vnum() const;
  void _internal_set_src_vnum(uint32_t value);
  public:

  // uint32 result_vnum = 4;
  void clear_result_vnum();
  uint32_t result_vnum() const;
  void set_result_vnum(uint32_t value);
  private:
  uint32_t _internal_result_vnum() const;
  void _internal_set_result_vnum(uint32_t value);
  public:

  // bool can_fast_refine = 6;
  void clear_can_fast_refine();
  bool can_fast_refine() const;
  void set_can_fast_refine(bool value);
  private:
  bool _internal_can_fast_refine() const;
  void _internal_set_can_fast_refine(bool value);
  public:

  // uint64 cost = 7;
  void clear_cost();
  uint64_t cost() const;
  void set_cost(uint64_t value);
  private:
  uint64_t _internal_cost() const;
  void _internal_set_cost(uint64_t value);
  public:

  // uint32 prob = 8;
  void clear_prob();
  uint32_t prob() const;
  void set_prob(uint32_t value);
  private:
  uint32_t _internal_prob() const;
  void _internal_set_prob(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCRefineInformationPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::network::TItemPos* pos_;
    ::network::TRefineTable* refine_table_;
    uint32_t type_;
    uint32_t src_vnum_;
    uint32_t result_vnum_;
    bool can_fast_refine_;
    uint64_t cost_;
    uint32_t prob_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCSpecialEffectPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCSpecialEffectPacket) */ {
 public:
  inline GCSpecialEffectPacket() : GCSpecialEffectPacket(nullptr) {}
  ~GCSpecialEffectPacket() override;
  explicit PROTOBUF_CONSTEXPR GCSpecialEffectPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCSpecialEffectPacket(const GCSpecialEffectPacket& from);
  GCSpecialEffectPacket(GCSpecialEffectPacket&& from) noexcept
    : GCSpecialEffectPacket() {
    *this = ::std::move(from);
  }

  inline GCSpecialEffectPacket& operator=(const GCSpecialEffectPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCSpecialEffectPacket& operator=(GCSpecialEffectPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCSpecialEffectPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCSpecialEffectPacket* internal_default_instance() {
    return reinterpret_cast<const GCSpecialEffectPacket*>(
               &_GCSpecialEffectPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  friend void swap(GCSpecialEffectPacket& a, GCSpecialEffectPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCSpecialEffectPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCSpecialEffectPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCSpecialEffectPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCSpecialEffectPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCSpecialEffectPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCSpecialEffectPacket& from) {
    GCSpecialEffectPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCSpecialEffectPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCSpecialEffectPacket";
  }
  protected:
  explicit GCSpecialEffectPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kVidFieldNumber = 2,
  };
  // uint32 type = 1;
  void clear_type();
  uint32_t type() const;
  void set_type(uint32_t value);
  private:
  uint32_t _internal_type() const;
  void _internal_set_type(uint32_t value);
  public:

  // uint32 vid = 2;
  void clear_vid();
  uint32_t vid() const;
  void set_vid(uint32_t value);
  private:
  uint32_t _internal_vid() const;
  void _internal_set_vid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCSpecialEffectPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t type_;
    uint32_t vid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCNPCListPacket_Position final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCNPCListPacket.Position) */ {
 public:
  inline GCNPCListPacket_Position() : GCNPCListPacket_Position(nullptr) {}
  ~GCNPCListPacket_Position() override;
  explicit PROTOBUF_CONSTEXPR GCNPCListPacket_Position(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCNPCListPacket_Position(const GCNPCListPacket_Position& from);
  GCNPCListPacket_Position(GCNPCListPacket_Position&& from) noexcept
    : GCNPCListPacket_Position() {
    *this = ::std::move(from);
  }

  inline GCNPCListPacket_Position& operator=(const GCNPCListPacket_Position& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCNPCListPacket_Position& operator=(GCNPCListPacket_Position&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCNPCListPacket_Position& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCNPCListPacket_Position* internal_default_instance() {
    return reinterpret_cast<const GCNPCListPacket_Position*>(
               &_GCNPCListPacket_Position_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  friend void swap(GCNPCListPacket_Position& a, GCNPCListPacket_Position& b) {
    a.Swap(&b);
  }
  inline void Swap(GCNPCListPacket_Position* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCNPCListPacket_Position* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCNPCListPacket_Position* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCNPCListPacket_Position>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCNPCListPacket_Position& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCNPCListPacket_Position& from) {
    GCNPCListPacket_Position::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCNPCListPacket_Position* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCNPCListPacket.Position";
  }
  protected:
  explicit GCNPCListPacket_Position(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kTypeFieldNumber = 1,
    kXFieldNumber = 3,
    kYFieldNumber = 4,
    kRaceFieldNumber = 5,
  };
  // bytes name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 type = 1;
  void clear_type();
  uint32_t type() const;
  void set_type(uint32_t value);
  private:
  uint32_t _internal_type() const;
  void _internal_set_type(uint32_t value);
  public:

  // int32 x = 3;
  void clear_x();
  int32_t x() const;
  void set_x(int32_t value);
  private:
  int32_t _internal_x() const;
  void _internal_set_x(int32_t value);
  public:

  // int32 y = 4;
  void clear_y();
  int32_t y() const;
  void set_y(int32_t value);
  private:
  int32_t _internal_y() const;
  void _internal_set_y(int32_t value);
  public:

  // uint32 race = 5;
  void clear_race();
  uint32_t race() const;
  void set_race(uint32_t value);
  private:
  uint32_t _internal_race() const;
  void _internal_set_race(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCNPCListPacket.Position)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    uint32_t type_;
    int32_t x_;
    int32_t y_;
    uint32_t race_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCNPCListPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCNPCListPacket) */ {
 public:
  inline GCNPCListPacket() : GCNPCListPacket(nullptr) {}
  ~GCNPCListPacket() override;
  explicit PROTOBUF_CONSTEXPR GCNPCListPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCNPCListPacket(const GCNPCListPacket& from);
  GCNPCListPacket(GCNPCListPacket&& from) noexcept
    : GCNPCListPacket() {
    *this = ::std::move(from);
  }

  inline GCNPCListPacket& operator=(const GCNPCListPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCNPCListPacket& operator=(GCNPCListPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCNPCListPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCNPCListPacket* internal_default_instance() {
    return reinterpret_cast<const GCNPCListPacket*>(
               &_GCNPCListPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  friend void swap(GCNPCListPacket& a, GCNPCListPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCNPCListPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCNPCListPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCNPCListPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCNPCListPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCNPCListPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCNPCListPacket& from) {
    GCNPCListPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCNPCListPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCNPCListPacket";
  }
  protected:
  explicit GCNPCListPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GCNPCListPacket_Position Position;

  // accessors -------------------------------------------------------

  enum : int {
    kPositionsFieldNumber = 1,
  };
  // repeated .network.GCNPCListPacket.Position positions = 1;
  int positions_size() const;
  private:
  int _internal_positions_size() const;
  public:
  void clear_positions();
  ::network::GCNPCListPacket_Position* mutable_positions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::GCNPCListPacket_Position >*
      mutable_positions();
  private:
  const ::network::GCNPCListPacket_Position& _internal_positions(int index) const;
  ::network::GCNPCListPacket_Position* _internal_add_positions();
  public:
  const ::network::GCNPCListPacket_Position& positions(int index) const;
  ::network::GCNPCListPacket_Position* add_positions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::GCNPCListPacket_Position >&
      positions() const;

  // @@protoc_insertion_point(class_scope:network.GCNPCListPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::GCNPCListPacket_Position > positions_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCViewEquipPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCViewEquipPacket) */ {
 public:
  inline GCViewEquipPacket() : GCViewEquipPacket(nullptr) {}
  ~GCViewEquipPacket() override;
  explicit PROTOBUF_CONSTEXPR GCViewEquipPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCViewEquipPacket(const GCViewEquipPacket& from);
  GCViewEquipPacket(GCViewEquipPacket&& from) noexcept
    : GCViewEquipPacket() {
    *this = ::std::move(from);
  }

  inline GCViewEquipPacket& operator=(const GCViewEquipPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCViewEquipPacket& operator=(GCViewEquipPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCViewEquipPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCViewEquipPacket* internal_default_instance() {
    return reinterpret_cast<const GCViewEquipPacket*>(
               &_GCViewEquipPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  friend void swap(GCViewEquipPacket& a, GCViewEquipPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCViewEquipPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCViewEquipPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCViewEquipPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCViewEquipPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCViewEquipPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCViewEquipPacket& from) {
    GCViewEquipPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCViewEquipPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCViewEquipPacket";
  }
  protected:
  explicit GCViewEquipPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEquipsFieldNumber = 2,
    kVidFieldNumber = 1,
  };
  // repeated .network.TItemData equips = 2;
  int equips_size() const;
  private:
  int _internal_equips_size() const;
  public:
  void clear_equips();
  ::network::TItemData* mutable_equips(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemData >*
      mutable_equips();
  private:
  const ::network::TItemData& _internal_equips(int index) const;
  ::network::TItemData* _internal_add_equips();
  public:
  const ::network::TItemData& equips(int index) const;
  ::network::TItemData* add_equips();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemData >&
      equips() const;

  // uint32 vid = 1;
  void clear_vid();
  uint32_t vid() const;
  void set_vid(uint32_t value);
  private:
  uint32_t _internal_vid() const;
  void _internal_set_vid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCViewEquipPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemData > equips_;
    uint32_t vid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCLandListPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCLandListPacket) */ {
 public:
  inline GCLandListPacket() : GCLandListPacket(nullptr) {}
  ~GCLandListPacket() override;
  explicit PROTOBUF_CONSTEXPR GCLandListPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCLandListPacket(const GCLandListPacket& from);
  GCLandListPacket(GCLandListPacket&& from) noexcept
    : GCLandListPacket() {
    *this = ::std::move(from);
  }

  inline GCLandListPacket& operator=(const GCLandListPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCLandListPacket& operator=(GCLandListPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCLandListPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCLandListPacket* internal_default_instance() {
    return reinterpret_cast<const GCLandListPacket*>(
               &_GCLandListPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  friend void swap(GCLandListPacket& a, GCLandListPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCLandListPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCLandListPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCLandListPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCLandListPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCLandListPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCLandListPacket& from) {
    GCLandListPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCLandListPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCLandListPacket";
  }
  protected:
  explicit GCLandListPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLandsFieldNumber = 1,
  };
  // repeated .network.TBuildingLand lands = 1;
  int lands_size() const;
  private:
  int _internal_lands_size() const;
  public:
  void clear_lands();
  ::network::TBuildingLand* mutable_lands(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TBuildingLand >*
      mutable_lands();
  private:
  const ::network::TBuildingLand& _internal_lands(int index) const;
  ::network::TBuildingLand* _internal_add_lands();
  public:
  const ::network::TBuildingLand& lands(int index) const;
  ::network::TBuildingLand* add_lands();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TBuildingLand >&
      lands() const;

  // @@protoc_insertion_point(class_scope:network.GCLandListPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TBuildingLand > lands_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCTargetCreatePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCTargetCreatePacket) */ {
 public:
  inline GCTargetCreatePacket() : GCTargetCreatePacket(nullptr) {}
  ~GCTargetCreatePacket() override;
  explicit PROTOBUF_CONSTEXPR GCTargetCreatePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCTargetCreatePacket(const GCTargetCreatePacket& from);
  GCTargetCreatePacket(GCTargetCreatePacket&& from) noexcept
    : GCTargetCreatePacket() {
    *this = ::std::move(from);
  }

  inline GCTargetCreatePacket& operator=(const GCTargetCreatePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCTargetCreatePacket& operator=(GCTargetCreatePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCTargetCreatePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCTargetCreatePacket* internal_default_instance() {
    return reinterpret_cast<const GCTargetCreatePacket*>(
               &_GCTargetCreatePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    72;

  friend void swap(GCTargetCreatePacket& a, GCTargetCreatePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCTargetCreatePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCTargetCreatePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCTargetCreatePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCTargetCreatePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCTargetCreatePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCTargetCreatePacket& from) {
    GCTargetCreatePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCTargetCreatePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCTargetCreatePacket";
  }
  protected:
  explicit GCTargetCreatePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kIdFieldNumber = 1,
    kVidFieldNumber = 3,
    kTypeFieldNumber = 4,
  };
  // bytes name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // uint32 vid = 3;
  void clear_vid();
  uint32_t vid() const;
  void set_vid(uint32_t value);
  private:
  uint32_t _internal_vid() const;
  void _internal_set_vid(uint32_t value);
  public:

  // uint32 type = 4;
  void clear_type();
  uint32_t type() const;
  void set_type(uint32_t value);
  private:
  uint32_t _internal_type() const;
  void _internal_set_type(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCTargetCreatePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int32_t id_;
    uint32_t vid_;
    uint32_t type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCTargetUpdatePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCTargetUpdatePacket) */ {
 public:
  inline GCTargetUpdatePacket() : GCTargetUpdatePacket(nullptr) {}
  ~GCTargetUpdatePacket() override;
  explicit PROTOBUF_CONSTEXPR GCTargetUpdatePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCTargetUpdatePacket(const GCTargetUpdatePacket& from);
  GCTargetUpdatePacket(GCTargetUpdatePacket&& from) noexcept
    : GCTargetUpdatePacket() {
    *this = ::std::move(from);
  }

  inline GCTargetUpdatePacket& operator=(const GCTargetUpdatePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCTargetUpdatePacket& operator=(GCTargetUpdatePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCTargetUpdatePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCTargetUpdatePacket* internal_default_instance() {
    return reinterpret_cast<const GCTargetUpdatePacket*>(
               &_GCTargetUpdatePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    73;

  friend void swap(GCTargetUpdatePacket& a, GCTargetUpdatePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCTargetUpdatePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCTargetUpdatePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCTargetUpdatePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCTargetUpdatePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCTargetUpdatePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCTargetUpdatePacket& from) {
    GCTargetUpdatePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCTargetUpdatePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCTargetUpdatePacket";
  }
  protected:
  explicit GCTargetUpdatePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
  };
  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // int32 x = 2;
  void clear_x();
  int32_t x() const;
  void set_x(int32_t value);
  private:
  int32_t _internal_x() const;
  void _internal_set_x(int32_t value);
  public:

  // int32 y = 3;
  void clear_y();
  int32_t y() const;
  void set_y(int32_t value);
  private:
  int32_t _internal_y() const;
  void _internal_set_y(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCTargetUpdatePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t id_;
    int32_t x_;
    int32_t y_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCTargetDeletePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCTargetDeletePacket) */ {
 public:
  inline GCTargetDeletePacket() : GCTargetDeletePacket(nullptr) {}
  ~GCTargetDeletePacket() override;
  explicit PROTOBUF_CONSTEXPR GCTargetDeletePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCTargetDeletePacket(const GCTargetDeletePacket& from);
  GCTargetDeletePacket(GCTargetDeletePacket&& from) noexcept
    : GCTargetDeletePacket() {
    *this = ::std::move(from);
  }

  inline GCTargetDeletePacket& operator=(const GCTargetDeletePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCTargetDeletePacket& operator=(GCTargetDeletePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCTargetDeletePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCTargetDeletePacket* internal_default_instance() {
    return reinterpret_cast<const GCTargetDeletePacket*>(
               &_GCTargetDeletePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    74;

  friend void swap(GCTargetDeletePacket& a, GCTargetDeletePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCTargetDeletePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCTargetDeletePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCTargetDeletePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCTargetDeletePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCTargetDeletePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCTargetDeletePacket& from) {
    GCTargetDeletePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCTargetDeletePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCTargetDeletePacket";
  }
  protected:
  explicit GCTargetDeletePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCTargetDeletePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCAffectAddPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCAffectAddPacket) */ {
 public:
  inline GCAffectAddPacket() : GCAffectAddPacket(nullptr) {}
  ~GCAffectAddPacket() override;
  explicit PROTOBUF_CONSTEXPR GCAffectAddPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCAffectAddPacket(const GCAffectAddPacket& from);
  GCAffectAddPacket(GCAffectAddPacket&& from) noexcept
    : GCAffectAddPacket() {
    *this = ::std::move(from);
  }

  inline GCAffectAddPacket& operator=(const GCAffectAddPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCAffectAddPacket& operator=(GCAffectAddPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCAffectAddPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCAffectAddPacket* internal_default_instance() {
    return reinterpret_cast<const GCAffectAddPacket*>(
               &_GCAffectAddPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    75;

  friend void swap(GCAffectAddPacket& a, GCAffectAddPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCAffectAddPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCAffectAddPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCAffectAddPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCAffectAddPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCAffectAddPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCAffectAddPacket& from) {
    GCAffectAddPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCAffectAddPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCAffectAddPacket";
  }
  protected:
  explicit GCAffectAddPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kElemFieldNumber = 1,
  };
  // .TPacketAffectElement elem = 1;
  bool has_elem() const;
  private:
  bool _internal_has_elem() const;
  public:
  void clear_elem();
  const ::TPacketAffectElement& elem() const;
  PROTOBUF_NODISCARD ::TPacketAffectElement* release_elem();
  ::TPacketAffectElement* mutable_elem();
  void set_allocated_elem(::TPacketAffectElement* elem);
  private:
  const ::TPacketAffectElement& _internal_elem() const;
  ::TPacketAffectElement* _internal_mutable_elem();
  public:
  void unsafe_arena_set_allocated_elem(
      ::TPacketAffectElement* elem);
  ::TPacketAffectElement* unsafe_arena_release_elem();

  // @@protoc_insertion_point(class_scope:network.GCAffectAddPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::TPacketAffectElement* elem_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCAffectRemovePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCAffectRemovePacket) */ {
 public:
  inline GCAffectRemovePacket() : GCAffectRemovePacket(nullptr) {}
  ~GCAffectRemovePacket() override;
  explicit PROTOBUF_CONSTEXPR GCAffectRemovePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCAffectRemovePacket(const GCAffectRemovePacket& from);
  GCAffectRemovePacket(GCAffectRemovePacket&& from) noexcept
    : GCAffectRemovePacket() {
    *this = ::std::move(from);
  }

  inline GCAffectRemovePacket& operator=(const GCAffectRemovePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCAffectRemovePacket& operator=(GCAffectRemovePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCAffectRemovePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCAffectRemovePacket* internal_default_instance() {
    return reinterpret_cast<const GCAffectRemovePacket*>(
               &_GCAffectRemovePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    76;

  friend void swap(GCAffectRemovePacket& a, GCAffectRemovePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCAffectRemovePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCAffectRemovePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCAffectRemovePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCAffectRemovePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCAffectRemovePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCAffectRemovePacket& from) {
    GCAffectRemovePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCAffectRemovePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCAffectRemovePacket";
  }
  protected:
  explicit GCAffectRemovePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kApplyOnFieldNumber = 2,
    kApplyValueFieldNumber = 3,
    kFlagFieldNumber = 4,
  };
  // uint32 type = 1;
  void clear_type();
  uint32_t type() const;
  void set_type(uint32_t value);
  private:
  uint32_t _internal_type() const;
  void _internal_set_type(uint32_t value);
  public:

  // uint32 apply_on = 2;
  void clear_apply_on();
  uint32_t apply_on() const;
  void set_apply_on(uint32_t value);
  private:
  uint32_t _internal_apply_on() const;
  void _internal_set_apply_on(uint32_t value);
  public:

  // int32 apply_value = 3;
  void clear_apply_value();
  int32_t apply_value() const;
  void set_apply_value(int32_t value);
  private:
  int32_t _internal_apply_value() const;
  void _internal_set_apply_value(int32_t value);
  public:

  // uint32 flag = 4;
  void clear_flag();
  uint32_t flag() const;
  void set_flag(uint32_t value);
  private:
  uint32_t _internal_flag() const;
  void _internal_set_flag(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCAffectRemovePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t type_;
    uint32_t apply_on_;
    int32_t apply_value_;
    uint32_t flag_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCMallOpenPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCMallOpenPacket) */ {
 public:
  inline GCMallOpenPacket() : GCMallOpenPacket(nullptr) {}
  ~GCMallOpenPacket() override;
  explicit PROTOBUF_CONSTEXPR GCMallOpenPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCMallOpenPacket(const GCMallOpenPacket& from);
  GCMallOpenPacket(GCMallOpenPacket&& from) noexcept
    : GCMallOpenPacket() {
    *this = ::std::move(from);
  }

  inline GCMallOpenPacket& operator=(const GCMallOpenPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCMallOpenPacket& operator=(GCMallOpenPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCMallOpenPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCMallOpenPacket* internal_default_instance() {
    return reinterpret_cast<const GCMallOpenPacket*>(
               &_GCMallOpenPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    77;

  friend void swap(GCMallOpenPacket& a, GCMallOpenPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCMallOpenPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCMallOpenPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCMallOpenPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCMallOpenPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCMallOpenPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCMallOpenPacket& from) {
    GCMallOpenPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCMallOpenPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCMallOpenPacket";
  }
  protected:
  explicit GCMallOpenPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSizeFieldNumber = 1,
  };
  // uint32 size = 1;
  void clear_size();
  uint32_t size() const;
  void set_size(uint32_t value);
  private:
  uint32_t _internal_size() const;
  void _internal_set_size(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCMallOpenPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCLoverInfoPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCLoverInfoPacket) */ {
 public:
  inline GCLoverInfoPacket() : GCLoverInfoPacket(nullptr) {}
  ~GCLoverInfoPacket() override;
  explicit PROTOBUF_CONSTEXPR GCLoverInfoPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCLoverInfoPacket(const GCLoverInfoPacket& from);
  GCLoverInfoPacket(GCLoverInfoPacket&& from) noexcept
    : GCLoverInfoPacket() {
    *this = ::std::move(from);
  }

  inline GCLoverInfoPacket& operator=(const GCLoverInfoPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCLoverInfoPacket& operator=(GCLoverInfoPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCLoverInfoPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCLoverInfoPacket* internal_default_instance() {
    return reinterpret_cast<const GCLoverInfoPacket*>(
               &_GCLoverInfoPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    78;

  friend void swap(GCLoverInfoPacket& a, GCLoverInfoPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCLoverInfoPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCLoverInfoPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCLoverInfoPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCLoverInfoPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCLoverInfoPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCLoverInfoPacket& from) {
    GCLoverInfoPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCLoverInfoPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCLoverInfoPacket";
  }
  protected:
  explicit GCLoverInfoPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kLovePointFieldNumber = 2,
  };
  // bytes name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 love_point = 2;
  void clear_love_point();
  uint32_t love_point() const;
  void set_love_point(uint32_t value);
  private:
  uint32_t _internal_love_point() const;
  void _internal_set_love_point(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCLoverInfoPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    uint32_t love_point_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCLoverPointUpdatePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCLoverPointUpdatePacket) */ {
 public:
  inline GCLoverPointUpdatePacket() : GCLoverPointUpdatePacket(nullptr) {}
  ~GCLoverPointUpdatePacket() override;
  explicit PROTOBUF_CONSTEXPR GCLoverPointUpdatePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCLoverPointUpdatePacket(const GCLoverPointUpdatePacket& from);
  GCLoverPointUpdatePacket(GCLoverPointUpdatePacket&& from) noexcept
    : GCLoverPointUpdatePacket() {
    *this = ::std::move(from);
  }

  inline GCLoverPointUpdatePacket& operator=(const GCLoverPointUpdatePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCLoverPointUpdatePacket& operator=(GCLoverPointUpdatePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCLoverPointUpdatePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCLoverPointUpdatePacket* internal_default_instance() {
    return reinterpret_cast<const GCLoverPointUpdatePacket*>(
               &_GCLoverPointUpdatePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    79;

  friend void swap(GCLoverPointUpdatePacket& a, GCLoverPointUpdatePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCLoverPointUpdatePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCLoverPointUpdatePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCLoverPointUpdatePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCLoverPointUpdatePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCLoverPointUpdatePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCLoverPointUpdatePacket& from) {
    GCLoverPointUpdatePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCLoverPointUpdatePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCLoverPointUpdatePacket";
  }
  protected:
  explicit GCLoverPointUpdatePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLovePointFieldNumber = 1,
  };
  // uint32 love_point = 1;
  void clear_love_point();
  uint32_t love_point() const;
  void set_love_point(uint32_t value);
  private:
  uint32_t _internal_love_point() const;
  void _internal_set_love_point(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCLoverPointUpdatePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t love_point_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCDigMotionPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCDigMotionPacket) */ {
 public:
  inline GCDigMotionPacket() : GCDigMotionPacket(nullptr) {}
  ~GCDigMotionPacket() override;
  explicit PROTOBUF_CONSTEXPR GCDigMotionPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCDigMotionPacket(const GCDigMotionPacket& from);
  GCDigMotionPacket(GCDigMotionPacket&& from) noexcept
    : GCDigMotionPacket() {
    *this = ::std::move(from);
  }

  inline GCDigMotionPacket& operator=(const GCDigMotionPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCDigMotionPacket& operator=(GCDigMotionPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCDigMotionPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCDigMotionPacket* internal_default_instance() {
    return reinterpret_cast<const GCDigMotionPacket*>(
               &_GCDigMotionPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    80;

  friend void swap(GCDigMotionPacket& a, GCDigMotionPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCDigMotionPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCDigMotionPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCDigMotionPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCDigMotionPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCDigMotionPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCDigMotionPacket& from) {
    GCDigMotionPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCDigMotionPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCDigMotionPacket";
  }
  protected:
  explicit GCDigMotionPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVidFieldNumber = 1,
    kTargetVidFieldNumber = 2,
    kCountFieldNumber = 3,
  };
  // uint32 vid = 1;
  void clear_vid();
  uint32_t vid() const;
  void set_vid(uint32_t value);
  private:
  uint32_t _internal_vid() const;
  void _internal_set_vid(uint32_t value);
  public:

  // uint32 target_vid = 2;
  void clear_target_vid();
  uint32_t target_vid() const;
  void set_target_vid(uint32_t value);
  private:
  uint32_t _internal_target_vid() const;
  void _internal_set_target_vid(uint32_t value);
  public:

  // uint32 count = 3;
  void clear_count();
  uint32_t count() const;
  void set_count(uint32_t value);
  private:
  uint32_t _internal_count() const;
  void _internal_set_count(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCDigMotionPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t vid_;
    uint32_t target_vid_;
    uint32_t count_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCSpecificEffectPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCSpecificEffectPacket) */ {
 public:
  inline GCSpecificEffectPacket() : GCSpecificEffectPacket(nullptr) {}
  ~GCSpecificEffectPacket() override;
  explicit PROTOBUF_CONSTEXPR GCSpecificEffectPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCSpecificEffectPacket(const GCSpecificEffectPacket& from);
  GCSpecificEffectPacket(GCSpecificEffectPacket&& from) noexcept
    : GCSpecificEffectPacket() {
    *this = ::std::move(from);
  }

  inline GCSpecificEffectPacket& operator=(const GCSpecificEffectPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCSpecificEffectPacket& operator=(GCSpecificEffectPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCSpecificEffectPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCSpecificEffectPacket* internal_default_instance() {
    return reinterpret_cast<const GCSpecificEffectPacket*>(
               &_GCSpecificEffectPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    81;

  friend void swap(GCSpecificEffectPacket& a, GCSpecificEffectPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCSpecificEffectPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCSpecificEffectPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCSpecificEffectPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCSpecificEffectPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCSpecificEffectPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCSpecificEffectPacket& from) {
    GCSpecificEffectPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCSpecificEffectPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCSpecificEffectPacket";
  }
  protected:
  explicit GCSpecificEffectPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEffectFileFieldNumber = 2,
    kVidFieldNumber = 1,
  };
  // bytes effect_file = 2;
  void clear_effect_file();
  const std::string& effect_file() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_effect_file(ArgT0&& arg0, ArgT... args);
  std::string* mutable_effect_file();
  PROTOBUF_NODISCARD std::string* release_effect_file();
  void set_allocated_effect_file(std::string* effect_file);
  private:
  const std::string& _internal_effect_file() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_effect_file(const std::string& value);
  std::string* _internal_mutable_effect_file();
  public:

  // uint32 vid = 1;
  void clear_vid();
  uint32_t vid() const;
  void set_vid(uint32_t value);
  private:
  uint32_t _internal_vid() const;
  void _internal_set_vid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCSpecificEffectPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr effect_file_;
    uint32_t vid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCDragonSoulRefinePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCDragonSoulRefinePacket) */ {
 public:
  inline GCDragonSoulRefinePacket() : GCDragonSoulRefinePacket(nullptr) {}
  ~GCDragonSoulRefinePacket() override;
  explicit PROTOBUF_CONSTEXPR GCDragonSoulRefinePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCDragonSoulRefinePacket(const GCDragonSoulRefinePacket& from);
  GCDragonSoulRefinePacket(GCDragonSoulRefinePacket&& from) noexcept
    : GCDragonSoulRefinePacket() {
    *this = ::std::move(from);
  }

  inline GCDragonSoulRefinePacket& operator=(const GCDragonSoulRefinePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCDragonSoulRefinePacket& operator=(GCDragonSoulRefinePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCDragonSoulRefinePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCDragonSoulRefinePacket* internal_default_instance() {
    return reinterpret_cast<const GCDragonSoulRefinePacket*>(
               &_GCDragonSoulRefinePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    82;

  friend void swap(GCDragonSoulRefinePacket& a, GCDragonSoulRefinePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCDragonSoulRefinePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCDragonSoulRefinePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCDragonSoulRefinePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCDragonSoulRefinePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCDragonSoulRefinePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCDragonSoulRefinePacket& from) {
    GCDragonSoulRefinePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCDragonSoulRefinePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCDragonSoulRefinePacket";
  }
  protected:
  explicit GCDragonSoulRefinePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCellFieldNumber = 2,
    kSubTypeFieldNumber = 1,
  };
  // .network.TItemPos cell = 2;
  bool has_cell() const;
  private:
  bool _internal_has_cell() const;
  public:
  void clear_cell();
  const ::network::TItemPos& cell() const;
  PROTOBUF_NODISCARD ::network::TItemPos* release_cell();
  ::network::TItemPos* mutable_cell();
  void set_allocated_cell(::network::TItemPos* cell);
  private:
  const ::network::TItemPos& _internal_cell() const;
  ::network::TItemPos* _internal_mutable_cell();
  public:
  void unsafe_arena_set_allocated_cell(
      ::network::TItemPos* cell);
  ::network::TItemPos* unsafe_arena_release_cell();

  // uint32 sub_type = 1;
  void clear_sub_type();
  uint32_t sub_type() const;
  void set_sub_type(uint32_t value);
  private:
  uint32_t _internal_sub_type() const;
  void _internal_set_sub_type(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCDragonSoulRefinePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::network::TItemPos* cell_;
    uint32_t sub_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCTeamlerStatusPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCTeamlerStatusPacket) */ {
 public:
  inline GCTeamlerStatusPacket() : GCTeamlerStatusPacket(nullptr) {}
  ~GCTeamlerStatusPacket() override;
  explicit PROTOBUF_CONSTEXPR GCTeamlerStatusPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCTeamlerStatusPacket(const GCTeamlerStatusPacket& from);
  GCTeamlerStatusPacket(GCTeamlerStatusPacket&& from) noexcept
    : GCTeamlerStatusPacket() {
    *this = ::std::move(from);
  }

  inline GCTeamlerStatusPacket& operator=(const GCTeamlerStatusPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCTeamlerStatusPacket& operator=(GCTeamlerStatusPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCTeamlerStatusPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCTeamlerStatusPacket* internal_default_instance() {
    return reinterpret_cast<const GCTeamlerStatusPacket*>(
               &_GCTeamlerStatusPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    83;

  friend void swap(GCTeamlerStatusPacket& a, GCTeamlerStatusPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCTeamlerStatusPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCTeamlerStatusPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCTeamlerStatusPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCTeamlerStatusPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCTeamlerStatusPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCTeamlerStatusPacket& from) {
    GCTeamlerStatusPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCTeamlerStatusPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCTeamlerStatusPacket";
  }
  protected:
  explicit GCTeamlerStatusPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kIsOnlineFieldNumber = 2,
  };
  // bytes name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bool is_online = 2;
  void clear_is_online();
  bool is_online() const;
  void set_is_online(bool value);
  private:
  bool _internal_is_online() const;
  void _internal_set_is_online(bool value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCTeamlerStatusPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    bool is_online_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCTeamlerShowPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCTeamlerShowPacket) */ {
 public:
  inline GCTeamlerShowPacket() : GCTeamlerShowPacket(nullptr) {}
  ~GCTeamlerShowPacket() override;
  explicit PROTOBUF_CONSTEXPR GCTeamlerShowPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCTeamlerShowPacket(const GCTeamlerShowPacket& from);
  GCTeamlerShowPacket(GCTeamlerShowPacket&& from) noexcept
    : GCTeamlerShowPacket() {
    *this = ::std::move(from);
  }

  inline GCTeamlerShowPacket& operator=(const GCTeamlerShowPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCTeamlerShowPacket& operator=(GCTeamlerShowPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCTeamlerShowPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCTeamlerShowPacket* internal_default_instance() {
    return reinterpret_cast<const GCTeamlerShowPacket*>(
               &_GCTeamlerShowPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    84;

  friend void swap(GCTeamlerShowPacket& a, GCTeamlerShowPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCTeamlerShowPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCTeamlerShowPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCTeamlerShowPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCTeamlerShowPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCTeamlerShowPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCTeamlerShowPacket& from) {
    GCTeamlerShowPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCTeamlerShowPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCTeamlerShowPacket";
  }
  protected:
  explicit GCTeamlerShowPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsShowFieldNumber = 1,
  };
  // bool is_show = 1;
  void clear_is_show();
  bool is_show() const;
  void set_is_show(bool value);
  private:
  bool _internal_is_show() const;
  void _internal_set_is_show(bool value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCTeamlerShowPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool is_show_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCPartyPositionPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCPartyPositionPacket) */ {
 public:
  inline GCPartyPositionPacket() : GCPartyPositionPacket(nullptr) {}
  ~GCPartyPositionPacket() override;
  explicit PROTOBUF_CONSTEXPR GCPartyPositionPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCPartyPositionPacket(const GCPartyPositionPacket& from);
  GCPartyPositionPacket(GCPartyPositionPacket&& from) noexcept
    : GCPartyPositionPacket() {
    *this = ::std::move(from);
  }

  inline GCPartyPositionPacket& operator=(const GCPartyPositionPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCPartyPositionPacket& operator=(GCPartyPositionPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCPartyPositionPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCPartyPositionPacket* internal_default_instance() {
    return reinterpret_cast<const GCPartyPositionPacket*>(
               &_GCPartyPositionPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    85;

  friend void swap(GCPartyPositionPacket& a, GCPartyPositionPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCPartyPositionPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCPartyPositionPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCPartyPositionPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCPartyPositionPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCPartyPositionPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCPartyPositionPacket& from) {
    GCPartyPositionPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCPartyPositionPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCPartyPositionPacket";
  }
  protected:
  explicit GCPartyPositionPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPidFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
  };
  // uint32 pid = 1;
  void clear_pid();
  uint32_t pid() const;
  void set_pid(uint32_t value);
  private:
  uint32_t _internal_pid() const;
  void _internal_set_pid(uint32_t value);
  public:

  // uint32 x = 2;
  void clear_x();
  uint32_t x() const;
  void set_x(uint32_t value);
  private:
  uint32_t _internal_x() const;
  void _internal_set_x(uint32_t value);
  public:

  // uint32 y = 3;
  void clear_y();
  uint32_t y() const;
  void set_y(uint32_t value);
  private:
  uint32_t _internal_y() const;
  void _internal_set_y(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCPartyPositionPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t pid_;
    uint32_t x_;
    uint32_t y_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCWikiPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCWikiPacket) */ {
 public:
  inline GCWikiPacket() : GCWikiPacket(nullptr) {}
  ~GCWikiPacket() override;
  explicit PROTOBUF_CONSTEXPR GCWikiPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCWikiPacket(const GCWikiPacket& from);
  GCWikiPacket(GCWikiPacket&& from) noexcept
    : GCWikiPacket() {
    *this = ::std::move(from);
  }

  inline GCWikiPacket& operator=(const GCWikiPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCWikiPacket& operator=(GCWikiPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCWikiPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCWikiPacket* internal_default_instance() {
    return reinterpret_cast<const GCWikiPacket*>(
               &_GCWikiPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    86;

  friend void swap(GCWikiPacket& a, GCWikiPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCWikiPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCWikiPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCWikiPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCWikiPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCWikiPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCWikiPacket& from) {
    GCWikiPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCWikiPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCWikiPacket";
  }
  protected:
  explicit GCWikiPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOriginInfosFieldNumber = 4,
    kWikiInfoFieldNumber = 3,
    kRetIdFieldNumber = 1,
    kVnumFieldNumber = 2,
  };
  // repeated .network.TWikiItemOriginInfo origin_infos = 4;
  int origin_infos_size() const;
  private:
  int _internal_origin_infos_size() const;
  public:
  void clear_origin_infos();
  ::network::TWikiItemOriginInfo* mutable_origin_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TWikiItemOriginInfo >*
      mutable_origin_infos();
  private:
  const ::network::TWikiItemOriginInfo& _internal_origin_infos(int index) const;
  ::network::TWikiItemOriginInfo* _internal_add_origin_infos();
  public:
  const ::network::TWikiItemOriginInfo& origin_infos(int index) const;
  ::network::TWikiItemOriginInfo* add_origin_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TWikiItemOriginInfo >&
      origin_infos() const;

  // .network.TWikiInfoTable wiki_info = 3;
  bool has_wiki_info() const;
  private:
  bool _internal_has_wiki_info() const;
  public:
  void clear_wiki_info();
  const ::network::TWikiInfoTable& wiki_info() const;
  PROTOBUF_NODISCARD ::network::TWikiInfoTable* release_wiki_info();
  ::network::TWikiInfoTable* mutable_wiki_info();
  void set_allocated_wiki_info(::network::TWikiInfoTable* wiki_info);
  private:
  const ::network::TWikiInfoTable& _internal_wiki_info() const;
  ::network::TWikiInfoTable* _internal_mutable_wiki_info();
  public:
  void unsafe_arena_set_allocated_wiki_info(
      ::network::TWikiInfoTable* wiki_info);
  ::network::TWikiInfoTable* unsafe_arena_release_wiki_info();

  // uint64 ret_id = 1;
  void clear_ret_id();
  uint64_t ret_id() const;
  void set_ret_id(uint64_t value);
  private:
  uint64_t _internal_ret_id() const;
  void _internal_set_ret_id(uint64_t value);
  public:

  // uint32 vnum = 2;
  void clear_vnum();
  uint32_t vnum() const;
  void set_vnum(uint32_t value);
  private:
  uint32_t _internal_vnum() const;
  void _internal_set_vnum(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCWikiPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TWikiItemOriginInfo > origin_infos_;
    ::network::TWikiInfoTable* wiki_info_;
    uint64_t ret_id_;
    uint32_t vnum_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCWikiMobPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCWikiMobPacket) */ {
 public:
  inline GCWikiMobPacket() : GCWikiMobPacket(nullptr) {}
  ~GCWikiMobPacket() override;
  explicit PROTOBUF_CONSTEXPR GCWikiMobPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCWikiMobPacket(const GCWikiMobPacket& from);
  GCWikiMobPacket(GCWikiMobPacket&& from) noexcept
    : GCWikiMobPacket() {
    *this = ::std::move(from);
  }

  inline GCWikiMobPacket& operator=(const GCWikiMobPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCWikiMobPacket& operator=(GCWikiMobPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCWikiMobPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCWikiMobPacket* internal_default_instance() {
    return reinterpret_cast<const GCWikiMobPacket*>(
               &_GCWikiMobPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    87;

  friend void swap(GCWikiMobPacket& a, GCWikiMobPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCWikiMobPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCWikiMobPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCWikiMobPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCWikiMobPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCWikiMobPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCWikiMobPacket& from) {
    GCWikiMobPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCWikiMobPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCWikiMobPacket";
  }
  protected:
  explicit GCWikiMobPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMobsFieldNumber = 3,
    kRetIdFieldNumber = 1,
    kVnumFieldNumber = 2,
  };
  // repeated uint32 mobs = 3;
  int mobs_size() const;
  private:
  int _internal_mobs_size() const;
  public:
  void clear_mobs();
  private:
  uint32_t _internal_mobs(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_mobs() const;
  void _internal_add_mobs(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_mobs();
  public:
  uint32_t mobs(int index) const;
  void set_mobs(int index, uint32_t value);
  void add_mobs(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      mobs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_mobs();

  // uint64 ret_id = 1;
  void clear_ret_id();
  uint64_t ret_id() const;
  void set_ret_id(uint64_t value);
  private:
  uint64_t _internal_ret_id() const;
  void _internal_set_ret_id(uint64_t value);
  public:

  // uint32 vnum = 2;
  void clear_vnum();
  uint32_t vnum() const;
  void set_vnum(uint32_t value);
  private:
  uint32_t _internal_vnum() const;
  void _internal_set_vnum(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCWikiMobPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > mobs_;
    mutable std::atomic<int> _mobs_cached_byte_size_;
    uint64_t ret_id_;
    uint32_t vnum_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCSendCombatZonePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCSendCombatZonePacket) */ {
 public:
  inline GCSendCombatZonePacket() : GCSendCombatZonePacket(nullptr) {}
  ~GCSendCombatZonePacket() override;
  explicit PROTOBUF_CONSTEXPR GCSendCombatZonePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCSendCombatZonePacket(const GCSendCombatZonePacket& from);
  GCSendCombatZonePacket(GCSendCombatZonePacket&& from) noexcept
    : GCSendCombatZonePacket() {
    *this = ::std::move(from);
  }

  inline GCSendCombatZonePacket& operator=(const GCSendCombatZonePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCSendCombatZonePacket& operator=(GCSendCombatZonePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCSendCombatZonePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCSendCombatZonePacket* internal_default_instance() {
    return reinterpret_cast<const GCSendCombatZonePacket*>(
               &_GCSendCombatZonePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    88;

  friend void swap(GCSendCombatZonePacket& a, GCSendCombatZonePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCSendCombatZonePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCSendCombatZonePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCSendCombatZonePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCSendCombatZonePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCSendCombatZonePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCSendCombatZonePacket& from) {
    GCSendCombatZonePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCSendCombatZonePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCSendCombatZonePacket";
  }
  protected:
  explicit GCSendCombatZonePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataInfosFieldNumber = 3,
    kDataDaysFieldNumber = 4,
    kSubHeaderFieldNumber = 1,
    kIsRunningFieldNumber = 2,
  };
  // repeated uint32 data_infos = 3;
  int data_infos_size() const;
  private:
  int _internal_data_infos_size() const;
  public:
  void clear_data_infos();
  private:
  uint32_t _internal_data_infos(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_data_infos() const;
  void _internal_add_data_infos(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_data_infos();
  public:
  uint32_t data_infos(int index) const;
  void set_data_infos(int index, uint32_t value);
  void add_data_infos(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      data_infos() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_data_infos();

  // repeated uint32 data_days = 4;
  int data_days_size() const;
  private:
  int _internal_data_days_size() const;
  public:
  void clear_data_days();
  private:
  uint32_t _internal_data_days(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_data_days() const;
  void _internal_add_data_days(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_data_days();
  public:
  uint32_t data_days(int index) const;
  void set_data_days(int index, uint32_t value);
  void add_data_days(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      data_days() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_data_days();

  // uint32 sub_header = 1;
  void clear_sub_header();
  uint32_t sub_header() const;
  void set_sub_header(uint32_t value);
  private:
  uint32_t _internal_sub_header() const;
  void _internal_set_sub_header(uint32_t value);
  public:

  // bool is_running = 2;
  void clear_is_running();
  bool is_running() const;
  void set_is_running(bool value);
  private:
  bool _internal_is_running() const;
  void _internal_set_is_running(bool value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCSendCombatZonePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > data_infos_;
    mutable std::atomic<int> _data_infos_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > data_days_;
    mutable std::atomic<int> _data_days_cached_byte_size_;
    uint32_t sub_header_;
    bool is_running_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCCombatZoneRankingDataPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCCombatZoneRankingDataPacket) */ {
 public:
  inline GCCombatZoneRankingDataPacket() : GCCombatZoneRankingDataPacket(nullptr) {}
  ~GCCombatZoneRankingDataPacket() override;
  explicit PROTOBUF_CONSTEXPR GCCombatZoneRankingDataPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCCombatZoneRankingDataPacket(const GCCombatZoneRankingDataPacket& from);
  GCCombatZoneRankingDataPacket(GCCombatZoneRankingDataPacket&& from) noexcept
    : GCCombatZoneRankingDataPacket() {
    *this = ::std::move(from);
  }

  inline GCCombatZoneRankingDataPacket& operator=(const GCCombatZoneRankingDataPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCCombatZoneRankingDataPacket& operator=(GCCombatZoneRankingDataPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCCombatZoneRankingDataPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCCombatZoneRankingDataPacket* internal_default_instance() {
    return reinterpret_cast<const GCCombatZoneRankingDataPacket*>(
               &_GCCombatZoneRankingDataPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    89;

  friend void swap(GCCombatZoneRankingDataPacket& a, GCCombatZoneRankingDataPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCCombatZoneRankingDataPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCCombatZoneRankingDataPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCCombatZoneRankingDataPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCCombatZoneRankingDataPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCCombatZoneRankingDataPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCCombatZoneRankingDataPacket& from) {
    GCCombatZoneRankingDataPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCCombatZoneRankingDataPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCCombatZoneRankingDataPacket";
  }
  protected:
  explicit GCCombatZoneRankingDataPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // repeated .network.TCombatZoneRankingPlayer data = 1;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::network::TCombatZoneRankingPlayer* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TCombatZoneRankingPlayer >*
      mutable_data();
  private:
  const ::network::TCombatZoneRankingPlayer& _internal_data(int index) const;
  ::network::TCombatZoneRankingPlayer* _internal_add_data();
  public:
  const ::network::TCombatZoneRankingPlayer& data(int index) const;
  ::network::TCombatZoneRankingPlayer* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TCombatZoneRankingPlayer >&
      data() const;

  // @@protoc_insertion_point(class_scope:network.GCCombatZoneRankingDataPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TCombatZoneRankingPlayer > data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCEventRequestPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCEventRequestPacket) */ {
 public:
  inline GCEventRequestPacket() : GCEventRequestPacket(nullptr) {}
  ~GCEventRequestPacket() override;
  explicit PROTOBUF_CONSTEXPR GCEventRequestPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCEventRequestPacket(const GCEventRequestPacket& from);
  GCEventRequestPacket(GCEventRequestPacket&& from) noexcept
    : GCEventRequestPacket() {
    *this = ::std::move(from);
  }

  inline GCEventRequestPacket& operator=(const GCEventRequestPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCEventRequestPacket& operator=(GCEventRequestPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCEventRequestPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCEventRequestPacket* internal_default_instance() {
    return reinterpret_cast<const GCEventRequestPacket*>(
               &_GCEventRequestPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    90;

  friend void swap(GCEventRequestPacket& a, GCEventRequestPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCEventRequestPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCEventRequestPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCEventRequestPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCEventRequestPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCEventRequestPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCEventRequestPacket& from) {
    GCEventRequestPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCEventRequestPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCEventRequestPacket";
  }
  protected:
  explicit GCEventRequestPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kDescFieldNumber = 3,
    kEventIndexFieldNumber = 1,
  };
  // bytes name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bytes desc = 3;
  void clear_desc();
  const std::string& desc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_desc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_desc();
  PROTOBUF_NODISCARD std::string* release_desc();
  void set_allocated_desc(std::string* desc);
  private:
  const std::string& _internal_desc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_desc(const std::string& value);
  std::string* _internal_mutable_desc();
  public:

  // uint32 event_index = 1;
  void clear_event_index();
  uint32_t event_index() const;
  void set_event_index(uint32_t value);
  private:
  uint32_t _internal_event_index() const;
  void _internal_set_event_index(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCEventRequestPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr desc_;
    uint32_t event_index_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCEventCancelPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCEventCancelPacket) */ {
 public:
  inline GCEventCancelPacket() : GCEventCancelPacket(nullptr) {}
  ~GCEventCancelPacket() override;
  explicit PROTOBUF_CONSTEXPR GCEventCancelPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCEventCancelPacket(const GCEventCancelPacket& from);
  GCEventCancelPacket(GCEventCancelPacket&& from) noexcept
    : GCEventCancelPacket() {
    *this = ::std::move(from);
  }

  inline GCEventCancelPacket& operator=(const GCEventCancelPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCEventCancelPacket& operator=(GCEventCancelPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCEventCancelPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCEventCancelPacket* internal_default_instance() {
    return reinterpret_cast<const GCEventCancelPacket*>(
               &_GCEventCancelPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    91;

  friend void swap(GCEventCancelPacket& a, GCEventCancelPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCEventCancelPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCEventCancelPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCEventCancelPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCEventCancelPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCEventCancelPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCEventCancelPacket& from) {
    GCEventCancelPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCEventCancelPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCEventCancelPacket";
  }
  protected:
  explicit GCEventCancelPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventIndexFieldNumber = 1,
  };
  // uint32 event_index = 1;
  void clear_event_index();
  uint32_t event_index() const;
  void set_event_index(uint32_t value);
  private:
  uint32_t _internal_event_index() const;
  void _internal_set_event_index(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCEventCancelPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t event_index_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCEventEmpireWarLoadPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCEventEmpireWarLoadPacket) */ {
 public:
  inline GCEventEmpireWarLoadPacket() : GCEventEmpireWarLoadPacket(nullptr) {}
  ~GCEventEmpireWarLoadPacket() override;
  explicit PROTOBUF_CONSTEXPR GCEventEmpireWarLoadPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCEventEmpireWarLoadPacket(const GCEventEmpireWarLoadPacket& from);
  GCEventEmpireWarLoadPacket(GCEventEmpireWarLoadPacket&& from) noexcept
    : GCEventEmpireWarLoadPacket() {
    *this = ::std::move(from);
  }

  inline GCEventEmpireWarLoadPacket& operator=(const GCEventEmpireWarLoadPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCEventEmpireWarLoadPacket& operator=(GCEventEmpireWarLoadPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCEventEmpireWarLoadPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCEventEmpireWarLoadPacket* internal_default_instance() {
    return reinterpret_cast<const GCEventEmpireWarLoadPacket*>(
               &_GCEventEmpireWarLoadPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    92;

  friend void swap(GCEventEmpireWarLoadPacket& a, GCEventEmpireWarLoadPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCEventEmpireWarLoadPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCEventEmpireWarLoadPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCEventEmpireWarLoadPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCEventEmpireWarLoadPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCEventEmpireWarLoadPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCEventEmpireWarLoadPacket& from) {
    GCEventEmpireWarLoadPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCEventEmpireWarLoadPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCEventEmpireWarLoadPacket";
  }
  protected:
  explicit GCEventEmpireWarLoadPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKillsFieldNumber = 2,
    kDeathsFieldNumber = 3,
    kTimeLeftFieldNumber = 1,
  };
  // repeated int32 kills = 2;
  int kills_size() const;
  private:
  int _internal_kills_size() const;
  public:
  void clear_kills();
  private:
  int32_t _internal_kills(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_kills() const;
  void _internal_add_kills(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_kills();
  public:
  int32_t kills(int index) const;
  void set_kills(int index, int32_t value);
  void add_kills(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      kills() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_kills();

  // repeated int32 deaths = 3;
  int deaths_size() const;
  private:
  int _internal_deaths_size() const;
  public:
  void clear_deaths();
  private:
  int32_t _internal_deaths(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_deaths() const;
  void _internal_add_deaths(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_deaths();
  public:
  int32_t deaths(int index) const;
  void set_deaths(int index, int32_t value);
  void add_deaths(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      deaths() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_deaths();

  // int32 time_left = 1;
  void clear_time_left();
  int32_t time_left() const;
  void set_time_left(int32_t value);
  private:
  int32_t _internal_time_left() const;
  void _internal_set_time_left(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCEventEmpireWarLoadPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > kills_;
    mutable std::atomic<int> _kills_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > deaths_;
    mutable std::atomic<int> _deaths_cached_byte_size_;
    int32_t time_left_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCEventEmpireWarUpdatePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCEventEmpireWarUpdatePacket) */ {
 public:
  inline GCEventEmpireWarUpdatePacket() : GCEventEmpireWarUpdatePacket(nullptr) {}
  ~GCEventEmpireWarUpdatePacket() override;
  explicit PROTOBUF_CONSTEXPR GCEventEmpireWarUpdatePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCEventEmpireWarUpdatePacket(const GCEventEmpireWarUpdatePacket& from);
  GCEventEmpireWarUpdatePacket(GCEventEmpireWarUpdatePacket&& from) noexcept
    : GCEventEmpireWarUpdatePacket() {
    *this = ::std::move(from);
  }

  inline GCEventEmpireWarUpdatePacket& operator=(const GCEventEmpireWarUpdatePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCEventEmpireWarUpdatePacket& operator=(GCEventEmpireWarUpdatePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCEventEmpireWarUpdatePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCEventEmpireWarUpdatePacket* internal_default_instance() {
    return reinterpret_cast<const GCEventEmpireWarUpdatePacket*>(
               &_GCEventEmpireWarUpdatePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    93;

  friend void swap(GCEventEmpireWarUpdatePacket& a, GCEventEmpireWarUpdatePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCEventEmpireWarUpdatePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCEventEmpireWarUpdatePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCEventEmpireWarUpdatePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCEventEmpireWarUpdatePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCEventEmpireWarUpdatePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCEventEmpireWarUpdatePacket& from) {
    GCEventEmpireWarUpdatePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCEventEmpireWarUpdatePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCEventEmpireWarUpdatePacket";
  }
  protected:
  explicit GCEventEmpireWarUpdatePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmpireFieldNumber = 1,
    kKillsFieldNumber = 2,
    kDeathsFieldNumber = 3,
  };
  // uint32 empire = 1;
  void clear_empire();
  uint32_t empire() const;
  void set_empire(uint32_t value);
  private:
  uint32_t _internal_empire() const;
  void _internal_set_empire(uint32_t value);
  public:

  // uint32 kills = 2;
  void clear_kills();
  uint32_t kills() const;
  void set_kills(uint32_t value);
  private:
  uint32_t _internal_kills() const;
  void _internal_set_kills(uint32_t value);
  public:

  // uint32 deaths = 3;
  void clear_deaths();
  uint32_t deaths() const;
  void set_deaths(uint32_t value);
  private:
  uint32_t _internal_deaths() const;
  void _internal_set_deaths(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCEventEmpireWarUpdatePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t empire_;
    uint32_t kills_;
    uint32_t deaths_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCAttrtreeLevelPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCAttrtreeLevelPacket) */ {
 public:
  inline GCAttrtreeLevelPacket() : GCAttrtreeLevelPacket(nullptr) {}
  ~GCAttrtreeLevelPacket() override;
  explicit PROTOBUF_CONSTEXPR GCAttrtreeLevelPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCAttrtreeLevelPacket(const GCAttrtreeLevelPacket& from);
  GCAttrtreeLevelPacket(GCAttrtreeLevelPacket&& from) noexcept
    : GCAttrtreeLevelPacket() {
    *this = ::std::move(from);
  }

  inline GCAttrtreeLevelPacket& operator=(const GCAttrtreeLevelPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCAttrtreeLevelPacket& operator=(GCAttrtreeLevelPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCAttrtreeLevelPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCAttrtreeLevelPacket* internal_default_instance() {
    return reinterpret_cast<const GCAttrtreeLevelPacket*>(
               &_GCAttrtreeLevelPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    94;

  friend void swap(GCAttrtreeLevelPacket& a, GCAttrtreeLevelPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCAttrtreeLevelPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCAttrtreeLevelPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCAttrtreeLevelPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCAttrtreeLevelPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCAttrtreeLevelPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCAttrtreeLevelPacket& from) {
    GCAttrtreeLevelPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCAttrtreeLevelPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCAttrtreeLevelPacket";
  }
  protected:
  explicit GCAttrtreeLevelPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kLevelFieldNumber = 2,
  };
  // uint32 id = 1;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // uint32 level = 2;
  void clear_level();
  uint32_t level() const;
  void set_level(uint32_t value);
  private:
  uint32_t _internal_level() const;
  void _internal_set_level(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCAttrtreeLevelPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t id_;
    uint32_t level_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCAttrtreeRefinePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCAttrtreeRefinePacket) */ {
 public:
  inline GCAttrtreeRefinePacket() : GCAttrtreeRefinePacket(nullptr) {}
  ~GCAttrtreeRefinePacket() override;
  explicit PROTOBUF_CONSTEXPR GCAttrtreeRefinePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCAttrtreeRefinePacket(const GCAttrtreeRefinePacket& from);
  GCAttrtreeRefinePacket(GCAttrtreeRefinePacket&& from) noexcept
    : GCAttrtreeRefinePacket() {
    *this = ::std::move(from);
  }

  inline GCAttrtreeRefinePacket& operator=(const GCAttrtreeRefinePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCAttrtreeRefinePacket& operator=(GCAttrtreeRefinePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCAttrtreeRefinePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCAttrtreeRefinePacket* internal_default_instance() {
    return reinterpret_cast<const GCAttrtreeRefinePacket*>(
               &_GCAttrtreeRefinePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    95;

  friend void swap(GCAttrtreeRefinePacket& a, GCAttrtreeRefinePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCAttrtreeRefinePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCAttrtreeRefinePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCAttrtreeRefinePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCAttrtreeRefinePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCAttrtreeRefinePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCAttrtreeRefinePacket& from) {
    GCAttrtreeRefinePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCAttrtreeRefinePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCAttrtreeRefinePacket";
  }
  protected:
  explicit GCAttrtreeRefinePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRefineTableFieldNumber = 2,
    kPosFieldNumber = 1,
  };
  // .network.TRefineTable refine_table = 2;
  bool has_refine_table() const;
  private:
  bool _internal_has_refine_table() const;
  public:
  void clear_refine_table();
  const ::network::TRefineTable& refine_table() const;
  PROTOBUF_NODISCARD ::network::TRefineTable* release_refine_table();
  ::network::TRefineTable* mutable_refine_table();
  void set_allocated_refine_table(::network::TRefineTable* refine_table);
  private:
  const ::network::TRefineTable& _internal_refine_table() const;
  ::network::TRefineTable* _internal_mutable_refine_table();
  public:
  void unsafe_arena_set_allocated_refine_table(
      ::network::TRefineTable* refine_table);
  ::network::TRefineTable* unsafe_arena_release_refine_table();

  // uint32 pos = 1;
  void clear_pos();
  uint32_t pos() const;
  void set_pos(uint32_t value);
  private:
  uint32_t _internal_pos() const;
  void _internal_set_pos(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCAttrtreeRefinePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::network::TRefineTable* refine_table_;
    uint32_t pos_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCRunePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCRunePacket) */ {
 public:
  inline GCRunePacket() : GCRunePacket(nullptr) {}
  ~GCRunePacket() override;
  explicit PROTOBUF_CONSTEXPR GCRunePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCRunePacket(const GCRunePacket& from);
  GCRunePacket(GCRunePacket&& from) noexcept
    : GCRunePacket() {
    *this = ::std::move(from);
  }

  inline GCRunePacket& operator=(const GCRunePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCRunePacket& operator=(GCRunePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCRunePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCRunePacket* internal_default_instance() {
    return reinterpret_cast<const GCRunePacket*>(
               &_GCRunePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    96;

  friend void swap(GCRunePacket& a, GCRunePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCRunePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCRunePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCRunePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCRunePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCRunePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCRunePacket& from) {
    GCRunePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCRunePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCRunePacket";
  }
  protected:
  explicit GCRunePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVnumFieldNumber = 1,
  };
  // uint32 vnum = 1;
  void clear_vnum();
  uint32_t vnum() const;
  void set_vnum(uint32_t value);
  private:
  uint32_t _internal_vnum() const;
  void _internal_set_vnum(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCRunePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t vnum_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCRuneRefinePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCRuneRefinePacket) */ {
 public:
  inline GCRuneRefinePacket() : GCRuneRefinePacket(nullptr) {}
  ~GCRuneRefinePacket() override;
  explicit PROTOBUF_CONSTEXPR GCRuneRefinePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCRuneRefinePacket(const GCRuneRefinePacket& from);
  GCRuneRefinePacket(GCRuneRefinePacket&& from) noexcept
    : GCRuneRefinePacket() {
    *this = ::std::move(from);
  }

  inline GCRuneRefinePacket& operator=(const GCRuneRefinePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCRuneRefinePacket& operator=(GCRuneRefinePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCRuneRefinePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCRuneRefinePacket* internal_default_instance() {
    return reinterpret_cast<const GCRuneRefinePacket*>(
               &_GCRuneRefinePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    97;

  friend void swap(GCRuneRefinePacket& a, GCRuneRefinePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCRuneRefinePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCRuneRefinePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCRuneRefinePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCRuneRefinePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCRuneRefinePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCRuneRefinePacket& from) {
    GCRuneRefinePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCRuneRefinePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCRuneRefinePacket";
  }
  protected:
  explicit GCRuneRefinePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRefineTableFieldNumber = 2,
    kNextPointFieldNumber = 1,
  };
  // .network.TRefineTable refine_table = 2;
  bool has_refine_table() const;
  private:
  bool _internal_has_refine_table() const;
  public:
  void clear_refine_table();
  const ::network::TRefineTable& refine_table() const;
  PROTOBUF_NODISCARD ::network::TRefineTable* release_refine_table();
  ::network::TRefineTable* mutable_refine_table();
  void set_allocated_refine_table(::network::TRefineTable* refine_table);
  private:
  const ::network::TRefineTable& _internal_refine_table() const;
  ::network::TRefineTable* _internal_mutable_refine_table();
  public:
  void unsafe_arena_set_allocated_refine_table(
      ::network::TRefineTable* refine_table);
  ::network::TRefineTable* unsafe_arena_release_refine_table();

  // uint32 next_point = 1;
  void clear_next_point();
  uint32_t next_point() const;
  void set_next_point(uint32_t value);
  private:
  uint32_t _internal_next_point() const;
  void _internal_set_next_point(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCRuneRefinePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::network::TRefineTable* refine_table_;
    uint32_t next_point_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCRunePagePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCRunePagePacket) */ {
 public:
  inline GCRunePagePacket() : GCRunePagePacket(nullptr) {}
  ~GCRunePagePacket() override;
  explicit PROTOBUF_CONSTEXPR GCRunePagePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCRunePagePacket(const GCRunePagePacket& from);
  GCRunePagePacket(GCRunePagePacket&& from) noexcept
    : GCRunePagePacket() {
    *this = ::std::move(from);
  }

  inline GCRunePagePacket& operator=(const GCRunePagePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCRunePagePacket& operator=(GCRunePagePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCRunePagePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCRunePagePacket* internal_default_instance() {
    return reinterpret_cast<const GCRunePagePacket*>(
               &_GCRunePagePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    98;

  friend void swap(GCRunePagePacket& a, GCRunePagePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCRunePagePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCRunePagePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCRunePagePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCRunePagePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCRunePagePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCRunePagePacket& from) {
    GCRunePagePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCRunePagePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCRunePagePacket";
  }
  protected:
  explicit GCRunePagePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // .TRunePageData data = 1;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::TRunePageData& data() const;
  PROTOBUF_NODISCARD ::TRunePageData* release_data();
  ::TRunePageData* mutable_data();
  void set_allocated_data(::TRunePageData* data);
  private:
  const ::TRunePageData& _internal_data() const;
  ::TRunePageData* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::TRunePageData* data);
  ::TRunePageData* unsafe_arena_release_data();

  // @@protoc_insertion_point(class_scope:network.GCRunePagePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::TRunePageData* data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCRuneLevelupPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCRuneLevelupPacket) */ {
 public:
  inline GCRuneLevelupPacket() : GCRuneLevelupPacket(nullptr) {}
  ~GCRuneLevelupPacket() override;
  explicit PROTOBUF_CONSTEXPR GCRuneLevelupPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCRuneLevelupPacket(const GCRuneLevelupPacket& from);
  GCRuneLevelupPacket(GCRuneLevelupPacket&& from) noexcept
    : GCRuneLevelupPacket() {
    *this = ::std::move(from);
  }

  inline GCRuneLevelupPacket& operator=(const GCRuneLevelupPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCRuneLevelupPacket& operator=(GCRuneLevelupPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCRuneLevelupPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCRuneLevelupPacket* internal_default_instance() {
    return reinterpret_cast<const GCRuneLevelupPacket*>(
               &_GCRuneLevelupPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    99;

  friend void swap(GCRuneLevelupPacket& a, GCRuneLevelupPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCRuneLevelupPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCRuneLevelupPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCRuneLevelupPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCRuneLevelupPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCRuneLevelupPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCRuneLevelupPacket& from) {
    GCRuneLevelupPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCRuneLevelupPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCRuneLevelupPacket";
  }
  protected:
  explicit GCRuneLevelupPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRefineTableFieldNumber = 2,
    kPosFieldNumber = 1,
  };
  // .network.TRefineTable refine_table = 2;
  bool has_refine_table() const;
  private:
  bool _internal_has_refine_table() const;
  public:
  void clear_refine_table();
  const ::network::TRefineTable& refine_table() const;
  PROTOBUF_NODISCARD ::network::TRefineTable* release_refine_table();
  ::network::TRefineTable* mutable_refine_table();
  void set_allocated_refine_table(::network::TRefineTable* refine_table);
  private:
  const ::network::TRefineTable& _internal_refine_table() const;
  ::network::TRefineTable* _internal_mutable_refine_table();
  public:
  void unsafe_arena_set_allocated_refine_table(
      ::network::TRefineTable* refine_table);
  ::network::TRefineTable* unsafe_arena_release_refine_table();

  // uint32 pos = 1;
  void clear_pos();
  uint32_t pos() const;
  void set_pos(uint32_t value);
  private:
  uint32_t _internal_pos() const;
  void _internal_set_pos(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCRuneLevelupPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::network::TRefineTable* refine_table_;
    uint32_t pos_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCEquipmentPageLoadPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCEquipmentPageLoadPacket) */ {
 public:
  inline GCEquipmentPageLoadPacket() : GCEquipmentPageLoadPacket(nullptr) {}
  ~GCEquipmentPageLoadPacket() override;
  explicit PROTOBUF_CONSTEXPR GCEquipmentPageLoadPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCEquipmentPageLoadPacket(const GCEquipmentPageLoadPacket& from);
  GCEquipmentPageLoadPacket(GCEquipmentPageLoadPacket&& from) noexcept
    : GCEquipmentPageLoadPacket() {
    *this = ::std::move(from);
  }

  inline GCEquipmentPageLoadPacket& operator=(const GCEquipmentPageLoadPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCEquipmentPageLoadPacket& operator=(GCEquipmentPageLoadPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCEquipmentPageLoadPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCEquipmentPageLoadPacket* internal_default_instance() {
    return reinterpret_cast<const GCEquipmentPageLoadPacket*>(
               &_GCEquipmentPageLoadPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    100;

  friend void swap(GCEquipmentPageLoadPacket& a, GCEquipmentPageLoadPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCEquipmentPageLoadPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCEquipmentPageLoadPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCEquipmentPageLoadPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCEquipmentPageLoadPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCEquipmentPageLoadPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCEquipmentPageLoadPacket& from) {
    GCEquipmentPageLoadPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCEquipmentPageLoadPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCEquipmentPageLoadPacket";
  }
  protected:
  explicit GCEquipmentPageLoadPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPagesFieldNumber = 1,
    kSelectedIndexFieldNumber = 2,
  };
  // repeated .network.TEquipmentPageInfo pages = 1;
  int pages_size() const;
  private:
  int _internal_pages_size() const;
  public:
  void clear_pages();
  ::network::TEquipmentPageInfo* mutable_pages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TEquipmentPageInfo >*
      mutable_pages();
  private:
  const ::network::TEquipmentPageInfo& _internal_pages(int index) const;
  ::network::TEquipmentPageInfo* _internal_add_pages();
  public:
  const ::network::TEquipmentPageInfo& pages(int index) const;
  ::network::TEquipmentPageInfo* add_pages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TEquipmentPageInfo >&
      pages() const;

  // uint32 selected_index = 2;
  void clear_selected_index();
  uint32_t selected_index() const;
  void set_selected_index(uint32_t value);
  private:
  uint32_t _internal_selected_index() const;
  void _internal_set_selected_index(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCEquipmentPageLoadPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TEquipmentPageInfo > pages_;
    uint32_t selected_index_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCDmgMeterPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCDmgMeterPacket) */ {
 public:
  inline GCDmgMeterPacket() : GCDmgMeterPacket(nullptr) {}
  ~GCDmgMeterPacket() override;
  explicit PROTOBUF_CONSTEXPR GCDmgMeterPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCDmgMeterPacket(const GCDmgMeterPacket& from);
  GCDmgMeterPacket(GCDmgMeterPacket&& from) noexcept
    : GCDmgMeterPacket() {
    *this = ::std::move(from);
  }

  inline GCDmgMeterPacket& operator=(const GCDmgMeterPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCDmgMeterPacket& operator=(GCDmgMeterPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCDmgMeterPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCDmgMeterPacket* internal_default_instance() {
    return reinterpret_cast<const GCDmgMeterPacket*>(
               &_GCDmgMeterPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    101;

  friend void swap(GCDmgMeterPacket& a, GCDmgMeterPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCDmgMeterPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCDmgMeterPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCDmgMeterPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCDmgMeterPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCDmgMeterPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCDmgMeterPacket& from) {
    GCDmgMeterPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCDmgMeterPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCDmgMeterPacket";
  }
  protected:
  explicit GCDmgMeterPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDmgFieldNumber = 1,
    kVidFieldNumber = 2,
  };
  // int32 dmg = 1;
  void clear_dmg();
  int32_t dmg() const;
  void set_dmg(int32_t value);
  private:
  int32_t _internal_dmg() const;
  void _internal_set_dmg(int32_t value);
  public:

  // int32 vid = 2;
  void clear_vid();
  int32_t vid() const;
  void set_vid(int32_t value);
  private:
  int32_t _internal_vid() const;
  void _internal_set_vid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCDmgMeterPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t dmg_;
    int32_t vid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCSkillMotionPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCSkillMotionPacket) */ {
 public:
  inline GCSkillMotionPacket() : GCSkillMotionPacket(nullptr) {}
  ~GCSkillMotionPacket() override;
  explicit PROTOBUF_CONSTEXPR GCSkillMotionPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCSkillMotionPacket(const GCSkillMotionPacket& from);
  GCSkillMotionPacket(GCSkillMotionPacket&& from) noexcept
    : GCSkillMotionPacket() {
    *this = ::std::move(from);
  }

  inline GCSkillMotionPacket& operator=(const GCSkillMotionPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCSkillMotionPacket& operator=(GCSkillMotionPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCSkillMotionPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCSkillMotionPacket* internal_default_instance() {
    return reinterpret_cast<const GCSkillMotionPacket*>(
               &_GCSkillMotionPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    102;

  friend void swap(GCSkillMotionPacket& a, GCSkillMotionPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCSkillMotionPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCSkillMotionPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCSkillMotionPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCSkillMotionPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCSkillMotionPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCSkillMotionPacket& from) {
    GCSkillMotionPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCSkillMotionPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCSkillMotionPacket";
  }
  protected:
  explicit GCSkillMotionPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVidFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
    kRotationFieldNumber = 4,
    kTimeFieldNumber = 5,
    kSkillVnumFieldNumber = 6,
    kSkillLevelFieldNumber = 7,
    kSkillGradeFieldNumber = 8,
  };
  // uint32 vid = 1;
  void clear_vid();
  uint32_t vid() const;
  void set_vid(uint32_t value);
  private:
  uint32_t _internal_vid() const;
  void _internal_set_vid(uint32_t value);
  public:

  // int32 x = 2;
  void clear_x();
  int32_t x() const;
  void set_x(int32_t value);
  private:
  int32_t _internal_x() const;
  void _internal_set_x(int32_t value);
  public:

  // int32 y = 3;
  void clear_y();
  int32_t y() const;
  void set_y(int32_t value);
  private:
  int32_t _internal_y() const;
  void _internal_set_y(int32_t value);
  public:

  // int32 rotation = 4;
  void clear_rotation();
  int32_t rotation() const;
  void set_rotation(int32_t value);
  private:
  int32_t _internal_rotation() const;
  void _internal_set_rotation(int32_t value);
  public:

  // uint32 time = 5;
  void clear_time();
  uint32_t time() const;
  void set_time(uint32_t value);
  private:
  uint32_t _internal_time() const;
  void _internal_set_time(uint32_t value);
  public:

  // uint32 skill_vnum = 6;
  void clear_skill_vnum();
  uint32_t skill_vnum() const;
  void set_skill_vnum(uint32_t value);
  private:
  uint32_t _internal_skill_vnum() const;
  void _internal_set_skill_vnum(uint32_t value);
  public:

  // uint32 skill_level = 7;
  void clear_skill_level();
  uint32_t skill_level() const;
  void set_skill_level(uint32_t value);
  private:
  uint32_t _internal_skill_level() const;
  void _internal_set_skill_level(uint32_t value);
  public:

  // uint32 skill_grade = 8;
  void clear_skill_grade();
  uint32_t skill_grade() const;
  void set_skill_grade(uint32_t value);
  private:
  uint32_t _internal_skill_grade() const;
  void _internal_set_skill_grade(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCSkillMotionPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t vid_;
    int32_t x_;
    int32_t y_;
    int32_t rotation_;
    uint32_t time_;
    uint32_t skill_vnum_;
    uint32_t skill_level_;
    uint32_t skill_grade_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCFakeBuffSkillPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCFakeBuffSkillPacket) */ {
 public:
  inline GCFakeBuffSkillPacket() : GCFakeBuffSkillPacket(nullptr) {}
  ~GCFakeBuffSkillPacket() override;
  explicit PROTOBUF_CONSTEXPR GCFakeBuffSkillPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCFakeBuffSkillPacket(const GCFakeBuffSkillPacket& from);
  GCFakeBuffSkillPacket(GCFakeBuffSkillPacket&& from) noexcept
    : GCFakeBuffSkillPacket() {
    *this = ::std::move(from);
  }

  inline GCFakeBuffSkillPacket& operator=(const GCFakeBuffSkillPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCFakeBuffSkillPacket& operator=(GCFakeBuffSkillPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCFakeBuffSkillPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCFakeBuffSkillPacket* internal_default_instance() {
    return reinterpret_cast<const GCFakeBuffSkillPacket*>(
               &_GCFakeBuffSkillPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    103;

  friend void swap(GCFakeBuffSkillPacket& a, GCFakeBuffSkillPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCFakeBuffSkillPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCFakeBuffSkillPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCFakeBuffSkillPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCFakeBuffSkillPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCFakeBuffSkillPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCFakeBuffSkillPacket& from) {
    GCFakeBuffSkillPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCFakeBuffSkillPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCFakeBuffSkillPacket";
  }
  protected:
  explicit GCFakeBuffSkillPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSkillVnumFieldNumber = 1,
    kLevelFieldNumber = 2,
  };
  // uint32 skill_vnum = 1;
  void clear_skill_vnum();
  uint32_t skill_vnum() const;
  void set_skill_vnum(uint32_t value);
  private:
  uint32_t _internal_skill_vnum() const;
  void _internal_set_skill_vnum(uint32_t value);
  public:

  // uint32 level = 2;
  void clear_level();
  uint32_t level() const;
  void set_level(uint32_t value);
  private:
  uint32_t _internal_level() const;
  void _internal_set_level(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCFakeBuffSkillPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t skill_vnum_;
    uint32_t level_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCCBTItemSetPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCCBTItemSetPacket) */ {
 public:
  inline GCCBTItemSetPacket() : GCCBTItemSetPacket(nullptr) {}
  ~GCCBTItemSetPacket() override;
  explicit PROTOBUF_CONSTEXPR GCCBTItemSetPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCCBTItemSetPacket(const GCCBTItemSetPacket& from);
  GCCBTItemSetPacket(GCCBTItemSetPacket&& from) noexcept
    : GCCBTItemSetPacket() {
    *this = ::std::move(from);
  }

  inline GCCBTItemSetPacket& operator=(const GCCBTItemSetPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCCBTItemSetPacket& operator=(GCCBTItemSetPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCCBTItemSetPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCCBTItemSetPacket* internal_default_instance() {
    return reinterpret_cast<const GCCBTItemSetPacket*>(
               &_GCCBTItemSetPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    104;

  friend void swap(GCCBTItemSetPacket& a, GCCBTItemSetPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCCBTItemSetPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCCBTItemSetPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCCBTItemSetPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCCBTItemSetPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCCBTItemSetPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCCBTItemSetPacket& from) {
    GCCBTItemSetPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCCBTItemSetPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCCBTItemSetPacket";
  }
  protected:
  explicit GCCBTItemSetPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
    kCbtPosFieldNumber = 2,
  };
  // .network.TItemData data = 1;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::network::TItemData& data() const;
  PROTOBUF_NODISCARD ::network::TItemData* release_data();
  ::network::TItemData* mutable_data();
  void set_allocated_data(::network::TItemData* data);
  private:
  const ::network::TItemData& _internal_data() const;
  ::network::TItemData* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::network::TItemData* data);
  ::network::TItemData* unsafe_arena_release_data();

  // uint32 cbt_pos = 2;
  void clear_cbt_pos();
  uint32_t cbt_pos() const;
  void set_cbt_pos(uint32_t value);
  private:
  uint32_t _internal_cbt_pos() const;
  void _internal_set_cbt_pos(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCCBTItemSetPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::network::TItemData* data_;
    uint32_t cbt_pos_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCSoulRefineInfoPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCSoulRefineInfoPacket) */ {
 public:
  inline GCSoulRefineInfoPacket() : GCSoulRefineInfoPacket(nullptr) {}
  ~GCSoulRefineInfoPacket() override;
  explicit PROTOBUF_CONSTEXPR GCSoulRefineInfoPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCSoulRefineInfoPacket(const GCSoulRefineInfoPacket& from);
  GCSoulRefineInfoPacket(GCSoulRefineInfoPacket&& from) noexcept
    : GCSoulRefineInfoPacket() {
    *this = ::std::move(from);
  }

  inline GCSoulRefineInfoPacket& operator=(const GCSoulRefineInfoPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCSoulRefineInfoPacket& operator=(GCSoulRefineInfoPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCSoulRefineInfoPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCSoulRefineInfoPacket* internal_default_instance() {
    return reinterpret_cast<const GCSoulRefineInfoPacket*>(
               &_GCSoulRefineInfoPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    105;

  friend void swap(GCSoulRefineInfoPacket& a, GCSoulRefineInfoPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCSoulRefineInfoPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCSoulRefineInfoPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCSoulRefineInfoPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCSoulRefineInfoPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCSoulRefineInfoPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCSoulRefineInfoPacket& from) {
    GCSoulRefineInfoPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCSoulRefineInfoPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCSoulRefineInfoPacket";
  }
  protected:
  explicit GCSoulRefineInfoPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kApplyValuesFieldNumber = 4,
    kRefineFieldNumber = 5,
    kVnumFieldNumber = 1,
    kApplyTypeFieldNumber = 2,
    kTypeFieldNumber = 3,
  };
  // repeated int32 apply_values = 4;
  int apply_values_size() const;
  private:
  int _internal_apply_values_size() const;
  public:
  void clear_apply_values();
  private:
  int32_t _internal_apply_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_apply_values() const;
  void _internal_add_apply_values(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_apply_values();
  public:
  int32_t apply_values(int index) const;
  void set_apply_values(int index, int32_t value);
  void add_apply_values(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      apply_values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_apply_values();

  // .network.TRefineTable refine = 5;
  bool has_refine() const;
  private:
  bool _internal_has_refine() const;
  public:
  void clear_refine();
  const ::network::TRefineTable& refine() const;
  PROTOBUF_NODISCARD ::network::TRefineTable* release_refine();
  ::network::TRefineTable* mutable_refine();
  void set_allocated_refine(::network::TRefineTable* refine);
  private:
  const ::network::TRefineTable& _internal_refine() const;
  ::network::TRefineTable* _internal_mutable_refine();
  public:
  void unsafe_arena_set_allocated_refine(
      ::network::TRefineTable* refine);
  ::network::TRefineTable* unsafe_arena_release_refine();

  // uint32 vnum = 1;
  void clear_vnum();
  uint32_t vnum() const;
  void set_vnum(uint32_t value);
  private:
  uint32_t _internal_vnum() const;
  void _internal_set_vnum(uint32_t value);
  public:

  // uint32 apply_type = 2;
  void clear_apply_type();
  uint32_t apply_type() const;
  void set_apply_type(uint32_t value);
  private:
  uint32_t _internal_apply_type() const;
  void _internal_set_apply_type(uint32_t value);
  public:

  // uint32 type = 3;
  void clear_type();
  uint32_t type() const;
  void set_type(uint32_t value);
  private:
  uint32_t _internal_type() const;
  void _internal_set_type(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCSoulRefineInfoPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > apply_values_;
    mutable std::atomic<int> _apply_values_cached_byte_size_;
    ::network::TRefineTable* refine_;
    uint32_t vnum_;
    uint32_t apply_type_;
    uint32_t type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCPVPTeamPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCPVPTeamPacket) */ {
 public:
  inline GCPVPTeamPacket() : GCPVPTeamPacket(nullptr) {}
  ~GCPVPTeamPacket() override;
  explicit PROTOBUF_CONSTEXPR GCPVPTeamPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCPVPTeamPacket(const GCPVPTeamPacket& from);
  GCPVPTeamPacket(GCPVPTeamPacket&& from) noexcept
    : GCPVPTeamPacket() {
    *this = ::std::move(from);
  }

  inline GCPVPTeamPacket& operator=(const GCPVPTeamPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCPVPTeamPacket& operator=(GCPVPTeamPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCPVPTeamPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCPVPTeamPacket* internal_default_instance() {
    return reinterpret_cast<const GCPVPTeamPacket*>(
               &_GCPVPTeamPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    106;

  friend void swap(GCPVPTeamPacket& a, GCPVPTeamPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCPVPTeamPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCPVPTeamPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCPVPTeamPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCPVPTeamPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCPVPTeamPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCPVPTeamPacket& from) {
    GCPVPTeamPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCPVPTeamPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCPVPTeamPacket";
  }
  protected:
  explicit GCPVPTeamPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVidFieldNumber = 1,
    kTeamFieldNumber = 2,
  };
  // uint32 vid = 1;
  void clear_vid();
  uint32_t vid() const;
  void set_vid(uint32_t value);
  private:
  uint32_t _internal_vid() const;
  void _internal_set_vid(uint32_t value);
  public:

  // sint32 team = 2;
  void clear_team();
  int32_t team() const;
  void set_team(int32_t value);
  private:
  int32_t _internal_team() const;
  void _internal_set_team(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCPVPTeamPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t vid_;
    int32_t team_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCInventoryMaxNumPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCInventoryMaxNumPacket) */ {
 public:
  inline GCInventoryMaxNumPacket() : GCInventoryMaxNumPacket(nullptr) {}
  ~GCInventoryMaxNumPacket() override;
  explicit PROTOBUF_CONSTEXPR GCInventoryMaxNumPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCInventoryMaxNumPacket(const GCInventoryMaxNumPacket& from);
  GCInventoryMaxNumPacket(GCInventoryMaxNumPacket&& from) noexcept
    : GCInventoryMaxNumPacket() {
    *this = ::std::move(from);
  }

  inline GCInventoryMaxNumPacket& operator=(const GCInventoryMaxNumPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCInventoryMaxNumPacket& operator=(GCInventoryMaxNumPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCInventoryMaxNumPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCInventoryMaxNumPacket* internal_default_instance() {
    return reinterpret_cast<const GCInventoryMaxNumPacket*>(
               &_GCInventoryMaxNumPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    107;

  friend void swap(GCInventoryMaxNumPacket& a, GCInventoryMaxNumPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCInventoryMaxNumPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCInventoryMaxNumPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCInventoryMaxNumPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCInventoryMaxNumPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCInventoryMaxNumPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCInventoryMaxNumPacket& from) {
    GCInventoryMaxNumPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCInventoryMaxNumPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCInventoryMaxNumPacket";
  }
  protected:
  explicit GCInventoryMaxNumPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInvTypeFieldNumber = 1,
    kMaxNumFieldNumber = 2,
  };
  // uint32 inv_type = 1;
  void clear_inv_type();
  uint32_t inv_type() const;
  void set_inv_type(uint32_t value);
  private:
  uint32_t _internal_inv_type() const;
  void _internal_set_inv_type(uint32_t value);
  public:

  // uint32 max_num = 2;
  void clear_max_num();
  uint32_t max_num() const;
  void set_max_num(uint32_t value);
  private:
  uint32_t _internal_max_num() const;
  void _internal_set_max_num(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCInventoryMaxNumPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t inv_type_;
    uint32_t max_num_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCAttributesToClientPacket_Attribute final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCAttributesToClientPacket.Attribute) */ {
 public:
  inline GCAttributesToClientPacket_Attribute() : GCAttributesToClientPacket_Attribute(nullptr) {}
  ~GCAttributesToClientPacket_Attribute() override;
  explicit PROTOBUF_CONSTEXPR GCAttributesToClientPacket_Attribute(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCAttributesToClientPacket_Attribute(const GCAttributesToClientPacket_Attribute& from);
  GCAttributesToClientPacket_Attribute(GCAttributesToClientPacket_Attribute&& from) noexcept
    : GCAttributesToClientPacket_Attribute() {
    *this = ::std::move(from);
  }

  inline GCAttributesToClientPacket_Attribute& operator=(const GCAttributesToClientPacket_Attribute& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCAttributesToClientPacket_Attribute& operator=(GCAttributesToClientPacket_Attribute&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCAttributesToClientPacket_Attribute& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCAttributesToClientPacket_Attribute* internal_default_instance() {
    return reinterpret_cast<const GCAttributesToClientPacket_Attribute*>(
               &_GCAttributesToClientPacket_Attribute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    108;

  friend void swap(GCAttributesToClientPacket_Attribute& a, GCAttributesToClientPacket_Attribute& b) {
    a.Swap(&b);
  }
  inline void Swap(GCAttributesToClientPacket_Attribute* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCAttributesToClientPacket_Attribute* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCAttributesToClientPacket_Attribute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCAttributesToClientPacket_Attribute>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCAttributesToClientPacket_Attribute& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCAttributesToClientPacket_Attribute& from) {
    GCAttributesToClientPacket_Attribute::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCAttributesToClientPacket_Attribute* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCAttributesToClientPacket.Attribute";
  }
  protected:
  explicit GCAttributesToClientPacket_Attribute(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // uint32 type = 1;
  void clear_type();
  uint32_t type() const;
  void set_type(uint32_t value);
  private:
  uint32_t _internal_type() const;
  void _internal_set_type(uint32_t value);
  public:

  // int32 value = 2;
  void clear_value();
  int32_t value() const;
  void set_value(int32_t value);
  private:
  int32_t _internal_value() const;
  void _internal_set_value(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCAttributesToClientPacket.Attribute)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t type_;
    int32_t value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCAttributesToClientPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCAttributesToClientPacket) */ {
 public:
  inline GCAttributesToClientPacket() : GCAttributesToClientPacket(nullptr) {}
  ~GCAttributesToClientPacket() override;
  explicit PROTOBUF_CONSTEXPR GCAttributesToClientPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCAttributesToClientPacket(const GCAttributesToClientPacket& from);
  GCAttributesToClientPacket(GCAttributesToClientPacket&& from) noexcept
    : GCAttributesToClientPacket() {
    *this = ::std::move(from);
  }

  inline GCAttributesToClientPacket& operator=(const GCAttributesToClientPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCAttributesToClientPacket& operator=(GCAttributesToClientPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCAttributesToClientPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCAttributesToClientPacket* internal_default_instance() {
    return reinterpret_cast<const GCAttributesToClientPacket*>(
               &_GCAttributesToClientPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    109;

  friend void swap(GCAttributesToClientPacket& a, GCAttributesToClientPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCAttributesToClientPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCAttributesToClientPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCAttributesToClientPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCAttributesToClientPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCAttributesToClientPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCAttributesToClientPacket& from) {
    GCAttributesToClientPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCAttributesToClientPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCAttributesToClientPacket";
  }
  protected:
  explicit GCAttributesToClientPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GCAttributesToClientPacket_Attribute Attribute;

  // accessors -------------------------------------------------------

  enum : int {
    kAttrsFieldNumber = 3,
    kItemTypeFieldNumber = 1,
    kItemSubTypeFieldNumber = 2,
  };
  // repeated .network.GCAttributesToClientPacket.Attribute attrs = 3;
  int attrs_size() const;
  private:
  int _internal_attrs_size() const;
  public:
  void clear_attrs();
  ::network::GCAttributesToClientPacket_Attribute* mutable_attrs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::GCAttributesToClientPacket_Attribute >*
      mutable_attrs();
  private:
  const ::network::GCAttributesToClientPacket_Attribute& _internal_attrs(int index) const;
  ::network::GCAttributesToClientPacket_Attribute* _internal_add_attrs();
  public:
  const ::network::GCAttributesToClientPacket_Attribute& attrs(int index) const;
  ::network::GCAttributesToClientPacket_Attribute* add_attrs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::GCAttributesToClientPacket_Attribute >&
      attrs() const;

  // uint32 item_type = 1;
  void clear_item_type();
  uint32_t item_type() const;
  void set_item_type(uint32_t value);
  private:
  uint32_t _internal_item_type() const;
  void _internal_set_item_type(uint32_t value);
  public:

  // sint32 item_sub_type = 2;
  void clear_item_sub_type();
  int32_t item_sub_type() const;
  void set_item_sub_type(int32_t value);
  private:
  int32_t _internal_item_sub_type() const;
  void _internal_set_item_sub_type(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCAttributesToClientPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::GCAttributesToClientPacket_Attribute > attrs_;
    uint32_t item_type_;
    int32_t item_sub_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCHorseRefineInfoPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCHorseRefineInfoPacket) */ {
 public:
  inline GCHorseRefineInfoPacket() : GCHorseRefineInfoPacket(nullptr) {}
  ~GCHorseRefineInfoPacket() override;
  explicit PROTOBUF_CONSTEXPR GCHorseRefineInfoPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCHorseRefineInfoPacket(const GCHorseRefineInfoPacket& from);
  GCHorseRefineInfoPacket(GCHorseRefineInfoPacket&& from) noexcept
    : GCHorseRefineInfoPacket() {
    *this = ::std::move(from);
  }

  inline GCHorseRefineInfoPacket& operator=(const GCHorseRefineInfoPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCHorseRefineInfoPacket& operator=(GCHorseRefineInfoPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCHorseRefineInfoPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCHorseRefineInfoPacket* internal_default_instance() {
    return reinterpret_cast<const GCHorseRefineInfoPacket*>(
               &_GCHorseRefineInfoPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    110;

  friend void swap(GCHorseRefineInfoPacket& a, GCHorseRefineInfoPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCHorseRefineInfoPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCHorseRefineInfoPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCHorseRefineInfoPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCHorseRefineInfoPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCHorseRefineInfoPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCHorseRefineInfoPacket& from) {
    GCHorseRefineInfoPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCHorseRefineInfoPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCHorseRefineInfoPacket";
  }
  protected:
  explicit GCHorseRefineInfoPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRefineFieldNumber = 3,
    kRefineIndexFieldNumber = 1,
    kCurrentLevelFieldNumber = 2,
  };
  // .network.TRefineTable refine = 3;
  bool has_refine() const;
  private:
  bool _internal_has_refine() const;
  public:
  void clear_refine();
  const ::network::TRefineTable& refine() const;
  PROTOBUF_NODISCARD ::network::TRefineTable* release_refine();
  ::network::TRefineTable* mutable_refine();
  void set_allocated_refine(::network::TRefineTable* refine);
  private:
  const ::network::TRefineTable& _internal_refine() const;
  ::network::TRefineTable* _internal_mutable_refine();
  public:
  void unsafe_arena_set_allocated_refine(
      ::network::TRefineTable* refine);
  ::network::TRefineTable* unsafe_arena_release_refine();

  // uint32 refine_index = 1;
  void clear_refine_index();
  uint32_t refine_index() const;
  void set_refine_index(uint32_t value);
  private:
  uint32_t _internal_refine_index() const;
  void _internal_set_refine_index(uint32_t value);
  public:

  // uint32 current_level = 2;
  void clear_current_level();
  uint32_t current_level() const;
  void set_current_level(uint32_t value);
  private:
  uint32_t _internal_current_level() const;
  void _internal_set_current_level(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCHorseRefineInfoPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::network::TRefineTable* refine_;
    uint32_t refine_index_;
    uint32_t current_level_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCHorseRefineResultPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCHorseRefineResultPacket) */ {
 public:
  inline GCHorseRefineResultPacket() : GCHorseRefineResultPacket(nullptr) {}
  ~GCHorseRefineResultPacket() override;
  explicit PROTOBUF_CONSTEXPR GCHorseRefineResultPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCHorseRefineResultPacket(const GCHorseRefineResultPacket& from);
  GCHorseRefineResultPacket(GCHorseRefineResultPacket&& from) noexcept
    : GCHorseRefineResultPacket() {
    *this = ::std::move(from);
  }

  inline GCHorseRefineResultPacket& operator=(const GCHorseRefineResultPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCHorseRefineResultPacket& operator=(GCHorseRefineResultPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCHorseRefineResultPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCHorseRefineResultPacket* internal_default_instance() {
    return reinterpret_cast<const GCHorseRefineResultPacket*>(
               &_GCHorseRefineResultPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    111;

  friend void swap(GCHorseRefineResultPacket& a, GCHorseRefineResultPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCHorseRefineResultPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCHorseRefineResultPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCHorseRefineResultPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCHorseRefineResultPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCHorseRefineResultPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCHorseRefineResultPacket& from) {
    GCHorseRefineResultPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCHorseRefineResultPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCHorseRefineResultPacket";
  }
  protected:
  explicit GCHorseRefineResultPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCHorseRefineResultPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCGayaShopOpenPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCGayaShopOpenPacket) */ {
 public:
  inline GCGayaShopOpenPacket() : GCGayaShopOpenPacket(nullptr) {}
  ~GCGayaShopOpenPacket() override;
  explicit PROTOBUF_CONSTEXPR GCGayaShopOpenPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCGayaShopOpenPacket(const GCGayaShopOpenPacket& from);
  GCGayaShopOpenPacket(GCGayaShopOpenPacket&& from) noexcept
    : GCGayaShopOpenPacket() {
    *this = ::std::move(from);
  }

  inline GCGayaShopOpenPacket& operator=(const GCGayaShopOpenPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCGayaShopOpenPacket& operator=(GCGayaShopOpenPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCGayaShopOpenPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCGayaShopOpenPacket* internal_default_instance() {
    return reinterpret_cast<const GCGayaShopOpenPacket*>(
               &_GCGayaShopOpenPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    112;

  friend void swap(GCGayaShopOpenPacket& a, GCGayaShopOpenPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCGayaShopOpenPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCGayaShopOpenPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCGayaShopOpenPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCGayaShopOpenPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCGayaShopOpenPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCGayaShopOpenPacket& from) {
    GCGayaShopOpenPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCGayaShopOpenPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCGayaShopOpenPacket";
  }
  protected:
  explicit GCGayaShopOpenPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDatasFieldNumber = 1,
  };
  // repeated .network.TGayaShopData datas = 1;
  int datas_size() const;
  private:
  int _internal_datas_size() const;
  public:
  void clear_datas();
  ::network::TGayaShopData* mutable_datas(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TGayaShopData >*
      mutable_datas();
  private:
  const ::network::TGayaShopData& _internal_datas(int index) const;
  ::network::TGayaShopData* _internal_add_datas();
  public:
  const ::network::TGayaShopData& datas(int index) const;
  ::network::TGayaShopData* add_datas();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TGayaShopData >&
      datas() const;

  // @@protoc_insertion_point(class_scope:network.GCGayaShopOpenPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TGayaShopData > datas_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCBattlepassDataPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCBattlepassDataPacket) */ {
 public:
  inline GCBattlepassDataPacket() : GCBattlepassDataPacket(nullptr) {}
  ~GCBattlepassDataPacket() override;
  explicit PROTOBUF_CONSTEXPR GCBattlepassDataPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCBattlepassDataPacket(const GCBattlepassDataPacket& from);
  GCBattlepassDataPacket(GCBattlepassDataPacket&& from) noexcept
    : GCBattlepassDataPacket() {
    *this = ::std::move(from);
  }

  inline GCBattlepassDataPacket& operator=(const GCBattlepassDataPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCBattlepassDataPacket& operator=(GCBattlepassDataPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCBattlepassDataPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCBattlepassDataPacket* internal_default_instance() {
    return reinterpret_cast<const GCBattlepassDataPacket*>(
               &_GCBattlepassDataPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    113;

  friend void swap(GCBattlepassDataPacket& a, GCBattlepassDataPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCBattlepassDataPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCBattlepassDataPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCBattlepassDataPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCBattlepassDataPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCBattlepassDataPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCBattlepassDataPacket& from) {
    GCBattlepassDataPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCBattlepassDataPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCBattlepassDataPacket";
  }
  protected:
  explicit GCBattlepassDataPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kIndexFieldNumber = 1,
  };
  // .network.TBattlepassData data = 2;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::network::TBattlepassData& data() const;
  PROTOBUF_NODISCARD ::network::TBattlepassData* release_data();
  ::network::TBattlepassData* mutable_data();
  void set_allocated_data(::network::TBattlepassData* data);
  private:
  const ::network::TBattlepassData& _internal_data() const;
  ::network::TBattlepassData* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::network::TBattlepassData* data);
  ::network::TBattlepassData* unsafe_arena_release_data();

  // uint32 index = 1;
  void clear_index();
  uint32_t index() const;
  void set_index(uint32_t value);
  private:
  uint32_t _internal_index() const;
  void _internal_set_index(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCBattlepassDataPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::network::TBattlepassData* data_;
    uint32_t index_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCCrystalRefinePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCCrystalRefinePacket) */ {
 public:
  inline GCCrystalRefinePacket() : GCCrystalRefinePacket(nullptr) {}
  ~GCCrystalRefinePacket() override;
  explicit PROTOBUF_CONSTEXPR GCCrystalRefinePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCCrystalRefinePacket(const GCCrystalRefinePacket& from);
  GCCrystalRefinePacket(GCCrystalRefinePacket&& from) noexcept
    : GCCrystalRefinePacket() {
    *this = ::std::move(from);
  }

  inline GCCrystalRefinePacket& operator=(const GCCrystalRefinePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCCrystalRefinePacket& operator=(GCCrystalRefinePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCCrystalRefinePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCCrystalRefinePacket* internal_default_instance() {
    return reinterpret_cast<const GCCrystalRefinePacket*>(
               &_GCCrystalRefinePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    114;

  friend void swap(GCCrystalRefinePacket& a, GCCrystalRefinePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCCrystalRefinePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCCrystalRefinePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCCrystalRefinePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCCrystalRefinePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCCrystalRefinePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCCrystalRefinePacket& from) {
    GCCrystalRefinePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCCrystalRefinePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCCrystalRefinePacket";
  }
  protected:
  explicit GCCrystalRefinePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNextAttributesFieldNumber = 5,
    kCrystalCellFieldNumber = 1,
    kScrollCellFieldNumber = 2,
    kNextClarityTypeFieldNumber = 3,
    kNextClarityLevelFieldNumber = 4,
    kRequiredFragmentsFieldNumber = 6,
  };
  // repeated .network.TItemAttribute next_attributes = 5;
  int next_attributes_size() const;
  private:
  int _internal_next_attributes_size() const;
  public:
  void clear_next_attributes();
  ::network::TItemAttribute* mutable_next_attributes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemAttribute >*
      mutable_next_attributes();
  private:
  const ::network::TItemAttribute& _internal_next_attributes(int index) const;
  ::network::TItemAttribute* _internal_add_next_attributes();
  public:
  const ::network::TItemAttribute& next_attributes(int index) const;
  ::network::TItemAttribute* add_next_attributes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemAttribute >&
      next_attributes() const;

  // .network.TItemPos crystal_cell = 1;
  bool has_crystal_cell() const;
  private:
  bool _internal_has_crystal_cell() const;
  public:
  void clear_crystal_cell();
  const ::network::TItemPos& crystal_cell() const;
  PROTOBUF_NODISCARD ::network::TItemPos* release_crystal_cell();
  ::network::TItemPos* mutable_crystal_cell();
  void set_allocated_crystal_cell(::network::TItemPos* crystal_cell);
  private:
  const ::network::TItemPos& _internal_crystal_cell() const;
  ::network::TItemPos* _internal_mutable_crystal_cell();
  public:
  void unsafe_arena_set_allocated_crystal_cell(
      ::network::TItemPos* crystal_cell);
  ::network::TItemPos* unsafe_arena_release_crystal_cell();

  // .network.TItemPos scroll_cell = 2;
  bool has_scroll_cell() const;
  private:
  bool _internal_has_scroll_cell() const;
  public:
  void clear_scroll_cell();
  const ::network::TItemPos& scroll_cell() const;
  PROTOBUF_NODISCARD ::network::TItemPos* release_scroll_cell();
  ::network::TItemPos* mutable_scroll_cell();
  void set_allocated_scroll_cell(::network::TItemPos* scroll_cell);
  private:
  const ::network::TItemPos& _internal_scroll_cell() const;
  ::network::TItemPos* _internal_mutable_scroll_cell();
  public:
  void unsafe_arena_set_allocated_scroll_cell(
      ::network::TItemPos* scroll_cell);
  ::network::TItemPos* unsafe_arena_release_scroll_cell();

  // uint32 next_clarity_type = 3;
  void clear_next_clarity_type();
  uint32_t next_clarity_type() const;
  void set_next_clarity_type(uint32_t value);
  private:
  uint32_t _internal_next_clarity_type() const;
  void _internal_set_next_clarity_type(uint32_t value);
  public:

  // uint32 next_clarity_level = 4;
  void clear_next_clarity_level();
  uint32_t next_clarity_level() const;
  void set_next_clarity_level(uint32_t value);
  private:
  uint32_t _internal_next_clarity_level() const;
  void _internal_set_next_clarity_level(uint32_t value);
  public:

  // uint32 required_fragments = 6;
  void clear_required_fragments();
  uint32_t required_fragments() const;
  void set_required_fragments(uint32_t value);
  private:
  uint32_t _internal_required_fragments() const;
  void _internal_set_required_fragments(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCCrystalRefinePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemAttribute > next_attributes_;
    ::network::TItemPos* crystal_cell_;
    ::network::TItemPos* scroll_cell_;
    uint32_t next_clarity_type_;
    uint32_t next_clarity_level_;
    uint32_t required_fragments_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCCrystalUsingSlotPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCCrystalUsingSlotPacket) */ {
 public:
  inline GCCrystalUsingSlotPacket() : GCCrystalUsingSlotPacket(nullptr) {}
  ~GCCrystalUsingSlotPacket() override;
  explicit PROTOBUF_CONSTEXPR GCCrystalUsingSlotPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCCrystalUsingSlotPacket(const GCCrystalUsingSlotPacket& from);
  GCCrystalUsingSlotPacket(GCCrystalUsingSlotPacket&& from) noexcept
    : GCCrystalUsingSlotPacket() {
    *this = ::std::move(from);
  }

  inline GCCrystalUsingSlotPacket& operator=(const GCCrystalUsingSlotPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCCrystalUsingSlotPacket& operator=(GCCrystalUsingSlotPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCCrystalUsingSlotPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCCrystalUsingSlotPacket* internal_default_instance() {
    return reinterpret_cast<const GCCrystalUsingSlotPacket*>(
               &_GCCrystalUsingSlotPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    115;

  friend void swap(GCCrystalUsingSlotPacket& a, GCCrystalUsingSlotPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCCrystalUsingSlotPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCCrystalUsingSlotPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCCrystalUsingSlotPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCCrystalUsingSlotPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCCrystalUsingSlotPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCCrystalUsingSlotPacket& from) {
    GCCrystalUsingSlotPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCCrystalUsingSlotPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCCrystalUsingSlotPacket";
  }
  protected:
  explicit GCCrystalUsingSlotPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCellFieldNumber = 1,
    kActiveFieldNumber = 2,
  };
  // .network.TItemPos cell = 1;
  bool has_cell() const;
  private:
  bool _internal_has_cell() const;
  public:
  void clear_cell();
  const ::network::TItemPos& cell() const;
  PROTOBUF_NODISCARD ::network::TItemPos* release_cell();
  ::network::TItemPos* mutable_cell();
  void set_allocated_cell(::network::TItemPos* cell);
  private:
  const ::network::TItemPos& _internal_cell() const;
  ::network::TItemPos* _internal_mutable_cell();
  public:
  void unsafe_arena_set_allocated_cell(
      ::network::TItemPos* cell);
  ::network::TItemPos* unsafe_arena_release_cell();

  // bool active = 2;
  void clear_active();
  bool active() const;
  void set_active(bool value);
  private:
  bool _internal_active() const;
  void _internal_set_active(bool value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCCrystalUsingSlotPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::network::TItemPos* cell_;
    bool active_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCAuctionOwnedGoldPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCAuctionOwnedGoldPacket) */ {
 public:
  inline GCAuctionOwnedGoldPacket() : GCAuctionOwnedGoldPacket(nullptr) {}
  ~GCAuctionOwnedGoldPacket() override;
  explicit PROTOBUF_CONSTEXPR GCAuctionOwnedGoldPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCAuctionOwnedGoldPacket(const GCAuctionOwnedGoldPacket& from);
  GCAuctionOwnedGoldPacket(GCAuctionOwnedGoldPacket&& from) noexcept
    : GCAuctionOwnedGoldPacket() {
    *this = ::std::move(from);
  }

  inline GCAuctionOwnedGoldPacket& operator=(const GCAuctionOwnedGoldPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCAuctionOwnedGoldPacket& operator=(GCAuctionOwnedGoldPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCAuctionOwnedGoldPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCAuctionOwnedGoldPacket* internal_default_instance() {
    return reinterpret_cast<const GCAuctionOwnedGoldPacket*>(
               &_GCAuctionOwnedGoldPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    116;

  friend void swap(GCAuctionOwnedGoldPacket& a, GCAuctionOwnedGoldPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCAuctionOwnedGoldPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCAuctionOwnedGoldPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCAuctionOwnedGoldPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCAuctionOwnedGoldPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCAuctionOwnedGoldPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCAuctionOwnedGoldPacket& from) {
    GCAuctionOwnedGoldPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCAuctionOwnedGoldPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCAuctionOwnedGoldPacket";
  }
  protected:
  explicit GCAuctionOwnedGoldPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGoldFieldNumber = 1,
  };
  // uint64 gold = 1;
  void clear_gold();
  uint64_t gold() const;
  void set_gold(uint64_t value);
  private:
  uint64_t _internal_gold() const;
  void _internal_set_gold(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCAuctionOwnedGoldPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t gold_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCAuctionOwnedItemPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCAuctionOwnedItemPacket) */ {
 public:
  inline GCAuctionOwnedItemPacket() : GCAuctionOwnedItemPacket(nullptr) {}
  ~GCAuctionOwnedItemPacket() override;
  explicit PROTOBUF_CONSTEXPR GCAuctionOwnedItemPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCAuctionOwnedItemPacket(const GCAuctionOwnedItemPacket& from);
  GCAuctionOwnedItemPacket(GCAuctionOwnedItemPacket&& from) noexcept
    : GCAuctionOwnedItemPacket() {
    *this = ::std::move(from);
  }

  inline GCAuctionOwnedItemPacket& operator=(const GCAuctionOwnedItemPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCAuctionOwnedItemPacket& operator=(GCAuctionOwnedItemPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCAuctionOwnedItemPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCAuctionOwnedItemPacket* internal_default_instance() {
    return reinterpret_cast<const GCAuctionOwnedItemPacket*>(
               &_GCAuctionOwnedItemPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    117;

  friend void swap(GCAuctionOwnedItemPacket& a, GCAuctionOwnedItemPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCAuctionOwnedItemPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCAuctionOwnedItemPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCAuctionOwnedItemPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCAuctionOwnedItemPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCAuctionOwnedItemPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCAuctionOwnedItemPacket& from) {
    GCAuctionOwnedItemPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCAuctionOwnedItemPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCAuctionOwnedItemPacket";
  }
  protected:
  explicit GCAuctionOwnedItemPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemFieldNumber = 1,
  };
  // .network.TShopItemTable item = 1;
  bool has_item() const;
  private:
  bool _internal_has_item() const;
  public:
  void clear_item();
  const ::network::TShopItemTable& item() const;
  PROTOBUF_NODISCARD ::network::TShopItemTable* release_item();
  ::network::TShopItemTable* mutable_item();
  void set_allocated_item(::network::TShopItemTable* item);
  private:
  const ::network::TShopItemTable& _internal_item() const;
  ::network::TShopItemTable* _internal_mutable_item();
  public:
  void unsafe_arena_set_allocated_item(
      ::network::TShopItemTable* item);
  ::network::TShopItemTable* unsafe_arena_release_item();

  // @@protoc_insertion_point(class_scope:network.GCAuctionOwnedItemPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::network::TShopItemTable* item_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCAuctionSearchResultPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCAuctionSearchResultPacket) */ {
 public:
  inline GCAuctionSearchResultPacket() : GCAuctionSearchResultPacket(nullptr) {}
  ~GCAuctionSearchResultPacket() override;
  explicit PROTOBUF_CONSTEXPR GCAuctionSearchResultPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCAuctionSearchResultPacket(const GCAuctionSearchResultPacket& from);
  GCAuctionSearchResultPacket(GCAuctionSearchResultPacket&& from) noexcept
    : GCAuctionSearchResultPacket() {
    *this = ::std::move(from);
  }

  inline GCAuctionSearchResultPacket& operator=(const GCAuctionSearchResultPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCAuctionSearchResultPacket& operator=(GCAuctionSearchResultPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCAuctionSearchResultPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCAuctionSearchResultPacket* internal_default_instance() {
    return reinterpret_cast<const GCAuctionSearchResultPacket*>(
               &_GCAuctionSearchResultPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    118;

  friend void swap(GCAuctionSearchResultPacket& a, GCAuctionSearchResultPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCAuctionSearchResultPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCAuctionSearchResultPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCAuctionSearchResultPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCAuctionSearchResultPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCAuctionSearchResultPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCAuctionSearchResultPacket& from) {
    GCAuctionSearchResultPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCAuctionSearchResultPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCAuctionSearchResultPacket";
  }
  protected:
  explicit GCAuctionSearchResultPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 3,
    kPageFieldNumber = 1,
    kMaxPageFieldNumber = 2,
  };
  // repeated .network.TShopItemTable items = 3;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::network::TShopItemTable* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TShopItemTable >*
      mutable_items();
  private:
  const ::network::TShopItemTable& _internal_items(int index) const;
  ::network::TShopItemTable* _internal_add_items();
  public:
  const ::network::TShopItemTable& items(int index) const;
  ::network::TShopItemTable* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TShopItemTable >&
      items() const;

  // sint32 page = 1;
  void clear_page();
  int32_t page() const;
  void set_page(int32_t value);
  private:
  int32_t _internal_page() const;
  void _internal_set_page(int32_t value);
  public:

  // sint32 max_page = 2;
  void clear_max_page();
  int32_t max_page() const;
  void set_max_page(int32_t value);
  private:
  int32_t _internal_max_page() const;
  void _internal_set_max_page(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCAuctionSearchResultPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TShopItemTable > items_;
    int32_t page_;
    int32_t max_page_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCAuctionMessagePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCAuctionMessagePacket) */ {
 public:
  inline GCAuctionMessagePacket() : GCAuctionMessagePacket(nullptr) {}
  ~GCAuctionMessagePacket() override;
  explicit PROTOBUF_CONSTEXPR GCAuctionMessagePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCAuctionMessagePacket(const GCAuctionMessagePacket& from);
  GCAuctionMessagePacket(GCAuctionMessagePacket&& from) noexcept
    : GCAuctionMessagePacket() {
    *this = ::std::move(from);
  }

  inline GCAuctionMessagePacket& operator=(const GCAuctionMessagePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCAuctionMessagePacket& operator=(GCAuctionMessagePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCAuctionMessagePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCAuctionMessagePacket* internal_default_instance() {
    return reinterpret_cast<const GCAuctionMessagePacket*>(
               &_GCAuctionMessagePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    119;

  friend void swap(GCAuctionMessagePacket& a, GCAuctionMessagePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCAuctionMessagePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCAuctionMessagePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCAuctionMessagePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCAuctionMessagePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCAuctionMessagePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCAuctionMessagePacket& from) {
    GCAuctionMessagePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCAuctionMessagePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCAuctionMessagePacket";
  }
  protected:
  explicit GCAuctionMessagePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
  };
  // string message = 1;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // @@protoc_insertion_point(class_scope:network.GCAuctionMessagePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCAuctionShopOwnedPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCAuctionShopOwnedPacket) */ {
 public:
  inline GCAuctionShopOwnedPacket() : GCAuctionShopOwnedPacket(nullptr) {}
  ~GCAuctionShopOwnedPacket() override;
  explicit PROTOBUF_CONSTEXPR GCAuctionShopOwnedPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCAuctionShopOwnedPacket(const GCAuctionShopOwnedPacket& from);
  GCAuctionShopOwnedPacket(GCAuctionShopOwnedPacket&& from) noexcept
    : GCAuctionShopOwnedPacket() {
    *this = ::std::move(from);
  }

  inline GCAuctionShopOwnedPacket& operator=(const GCAuctionShopOwnedPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCAuctionShopOwnedPacket& operator=(GCAuctionShopOwnedPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCAuctionShopOwnedPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCAuctionShopOwnedPacket* internal_default_instance() {
    return reinterpret_cast<const GCAuctionShopOwnedPacket*>(
               &_GCAuctionShopOwnedPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    120;

  friend void swap(GCAuctionShopOwnedPacket& a, GCAuctionShopOwnedPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCAuctionShopOwnedPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCAuctionShopOwnedPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCAuctionShopOwnedPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCAuctionShopOwnedPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCAuctionShopOwnedPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCAuctionShopOwnedPacket& from) {
    GCAuctionShopOwnedPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCAuctionShopOwnedPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCAuctionShopOwnedPacket";
  }
  protected:
  explicit GCAuctionShopOwnedPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOwnedFieldNumber = 1,
  };
  // bool owned = 1;
  void clear_owned();
  bool owned() const;
  void set_owned(bool value);
  private:
  bool _internal_owned() const;
  void _internal_set_owned(bool value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCAuctionShopOwnedPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool owned_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCAuctionShopPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCAuctionShopPacket) */ {
 public:
  inline GCAuctionShopPacket() : GCAuctionShopPacket(nullptr) {}
  ~GCAuctionShopPacket() override;
  explicit PROTOBUF_CONSTEXPR GCAuctionShopPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCAuctionShopPacket(const GCAuctionShopPacket& from);
  GCAuctionShopPacket(GCAuctionShopPacket&& from) noexcept
    : GCAuctionShopPacket() {
    *this = ::std::move(from);
  }

  inline GCAuctionShopPacket& operator=(const GCAuctionShopPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCAuctionShopPacket& operator=(GCAuctionShopPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCAuctionShopPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCAuctionShopPacket* internal_default_instance() {
    return reinterpret_cast<const GCAuctionShopPacket*>(
               &_GCAuctionShopPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    121;

  friend void swap(GCAuctionShopPacket& a, GCAuctionShopPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCAuctionShopPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCAuctionShopPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCAuctionShopPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCAuctionShopPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCAuctionShopPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCAuctionShopPacket& from) {
    GCAuctionShopPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCAuctionShopPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCAuctionShopPacket";
  }
  protected:
  explicit GCAuctionShopPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 4,
    kNameFieldNumber = 1,
    kGoldFieldNumber = 3,
    kTimeoutFieldNumber = 2,
  };
  // repeated .network.TItemData items = 4;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::network::TItemData* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemData >*
      mutable_items();
  private:
  const ::network::TItemData& _internal_items(int index) const;
  ::network::TItemData* _internal_add_items();
  public:
  const ::network::TItemData& items(int index) const;
  ::network::TItemData* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemData >&
      items() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint64 gold = 3;
  void clear_gold();
  uint64_t gold() const;
  void set_gold(uint64_t value);
  private:
  uint64_t _internal_gold() const;
  void _internal_set_gold(uint64_t value);
  public:

  // uint32 timeout = 2;
  void clear_timeout();
  uint32_t timeout() const;
  void set_timeout(uint32_t value);
  private:
  uint32_t _internal_timeout() const;
  void _internal_set_timeout(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCAuctionShopPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemData > items_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    uint64_t gold_;
    uint32_t timeout_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCAuctionShopGoldPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCAuctionShopGoldPacket) */ {
 public:
  inline GCAuctionShopGoldPacket() : GCAuctionShopGoldPacket(nullptr) {}
  ~GCAuctionShopGoldPacket() override;
  explicit PROTOBUF_CONSTEXPR GCAuctionShopGoldPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCAuctionShopGoldPacket(const GCAuctionShopGoldPacket& from);
  GCAuctionShopGoldPacket(GCAuctionShopGoldPacket&& from) noexcept
    : GCAuctionShopGoldPacket() {
    *this = ::std::move(from);
  }

  inline GCAuctionShopGoldPacket& operator=(const GCAuctionShopGoldPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCAuctionShopGoldPacket& operator=(GCAuctionShopGoldPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCAuctionShopGoldPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCAuctionShopGoldPacket* internal_default_instance() {
    return reinterpret_cast<const GCAuctionShopGoldPacket*>(
               &_GCAuctionShopGoldPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    122;

  friend void swap(GCAuctionShopGoldPacket& a, GCAuctionShopGoldPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCAuctionShopGoldPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCAuctionShopGoldPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCAuctionShopGoldPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCAuctionShopGoldPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCAuctionShopGoldPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCAuctionShopGoldPacket& from) {
    GCAuctionShopGoldPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCAuctionShopGoldPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCAuctionShopGoldPacket";
  }
  protected:
  explicit GCAuctionShopGoldPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGoldFieldNumber = 1,
  };
  // uint64 gold = 1;
  void clear_gold();
  uint64_t gold() const;
  void set_gold(uint64_t value);
  private:
  uint64_t _internal_gold() const;
  void _internal_set_gold(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCAuctionShopGoldPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t gold_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCAuctionShopTimeoutPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCAuctionShopTimeoutPacket) */ {
 public:
  inline GCAuctionShopTimeoutPacket() : GCAuctionShopTimeoutPacket(nullptr) {}
  ~GCAuctionShopTimeoutPacket() override;
  explicit PROTOBUF_CONSTEXPR GCAuctionShopTimeoutPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCAuctionShopTimeoutPacket(const GCAuctionShopTimeoutPacket& from);
  GCAuctionShopTimeoutPacket(GCAuctionShopTimeoutPacket&& from) noexcept
    : GCAuctionShopTimeoutPacket() {
    *this = ::std::move(from);
  }

  inline GCAuctionShopTimeoutPacket& operator=(const GCAuctionShopTimeoutPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCAuctionShopTimeoutPacket& operator=(GCAuctionShopTimeoutPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCAuctionShopTimeoutPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCAuctionShopTimeoutPacket* internal_default_instance() {
    return reinterpret_cast<const GCAuctionShopTimeoutPacket*>(
               &_GCAuctionShopTimeoutPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    123;

  friend void swap(GCAuctionShopTimeoutPacket& a, GCAuctionShopTimeoutPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCAuctionShopTimeoutPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCAuctionShopTimeoutPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCAuctionShopTimeoutPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCAuctionShopTimeoutPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCAuctionShopTimeoutPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCAuctionShopTimeoutPacket& from) {
    GCAuctionShopTimeoutPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCAuctionShopTimeoutPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCAuctionShopTimeoutPacket";
  }
  protected:
  explicit GCAuctionShopTimeoutPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeoutFieldNumber = 1,
  };
  // uint32 timeout = 1;
  void clear_timeout();
  uint32_t timeout() const;
  void set_timeout(uint32_t value);
  private:
  uint32_t _internal_timeout() const;
  void _internal_set_timeout(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCAuctionShopTimeoutPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t timeout_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCAuctionShopGuestOpenPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCAuctionShopGuestOpenPacket) */ {
 public:
  inline GCAuctionShopGuestOpenPacket() : GCAuctionShopGuestOpenPacket(nullptr) {}
  ~GCAuctionShopGuestOpenPacket() override;
  explicit PROTOBUF_CONSTEXPR GCAuctionShopGuestOpenPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCAuctionShopGuestOpenPacket(const GCAuctionShopGuestOpenPacket& from);
  GCAuctionShopGuestOpenPacket(GCAuctionShopGuestOpenPacket&& from) noexcept
    : GCAuctionShopGuestOpenPacket() {
    *this = ::std::move(from);
  }

  inline GCAuctionShopGuestOpenPacket& operator=(const GCAuctionShopGuestOpenPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCAuctionShopGuestOpenPacket& operator=(GCAuctionShopGuestOpenPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCAuctionShopGuestOpenPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCAuctionShopGuestOpenPacket* internal_default_instance() {
    return reinterpret_cast<const GCAuctionShopGuestOpenPacket*>(
               &_GCAuctionShopGuestOpenPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    124;

  friend void swap(GCAuctionShopGuestOpenPacket& a, GCAuctionShopGuestOpenPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCAuctionShopGuestOpenPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCAuctionShopGuestOpenPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCAuctionShopGuestOpenPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCAuctionShopGuestOpenPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCAuctionShopGuestOpenPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCAuctionShopGuestOpenPacket& from) {
    GCAuctionShopGuestOpenPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCAuctionShopGuestOpenPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCAuctionShopGuestOpenPacket";
  }
  protected:
  explicit GCAuctionShopGuestOpenPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 2,
    kNameFieldNumber = 1,
  };
  // repeated .network.TItemData items = 2;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::network::TItemData* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemData >*
      mutable_items();
  private:
  const ::network::TItemData& _internal_items(int index) const;
  ::network::TItemData* _internal_add_items();
  public:
  const ::network::TItemData& items(int index) const;
  ::network::TItemData* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemData >&
      items() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:network.GCAuctionShopGuestOpenPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemData > items_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCAuctionShopGuestUpdatePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCAuctionShopGuestUpdatePacket) */ {
 public:
  inline GCAuctionShopGuestUpdatePacket() : GCAuctionShopGuestUpdatePacket(nullptr) {}
  ~GCAuctionShopGuestUpdatePacket() override;
  explicit PROTOBUF_CONSTEXPR GCAuctionShopGuestUpdatePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCAuctionShopGuestUpdatePacket(const GCAuctionShopGuestUpdatePacket& from);
  GCAuctionShopGuestUpdatePacket(GCAuctionShopGuestUpdatePacket&& from) noexcept
    : GCAuctionShopGuestUpdatePacket() {
    *this = ::std::move(from);
  }

  inline GCAuctionShopGuestUpdatePacket& operator=(const GCAuctionShopGuestUpdatePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCAuctionShopGuestUpdatePacket& operator=(GCAuctionShopGuestUpdatePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCAuctionShopGuestUpdatePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCAuctionShopGuestUpdatePacket* internal_default_instance() {
    return reinterpret_cast<const GCAuctionShopGuestUpdatePacket*>(
               &_GCAuctionShopGuestUpdatePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    125;

  friend void swap(GCAuctionShopGuestUpdatePacket& a, GCAuctionShopGuestUpdatePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCAuctionShopGuestUpdatePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCAuctionShopGuestUpdatePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCAuctionShopGuestUpdatePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCAuctionShopGuestUpdatePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCAuctionShopGuestUpdatePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCAuctionShopGuestUpdatePacket& from) {
    GCAuctionShopGuestUpdatePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCAuctionShopGuestUpdatePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCAuctionShopGuestUpdatePacket";
  }
  protected:
  explicit GCAuctionShopGuestUpdatePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemFieldNumber = 1,
  };
  // .network.TItemData item = 1;
  bool has_item() const;
  private:
  bool _internal_has_item() const;
  public:
  void clear_item();
  const ::network::TItemData& item() const;
  PROTOBUF_NODISCARD ::network::TItemData* release_item();
  ::network::TItemData* mutable_item();
  void set_allocated_item(::network::TItemData* item);
  private:
  const ::network::TItemData& _internal_item() const;
  ::network::TItemData* _internal_mutable_item();
  public:
  void unsafe_arena_set_allocated_item(
      ::network::TItemData* item);
  ::network::TItemData* unsafe_arena_release_item();

  // @@protoc_insertion_point(class_scope:network.GCAuctionShopGuestUpdatePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::network::TItemData* item_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCAuctionShopHistoryPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCAuctionShopHistoryPacket) */ {
 public:
  inline GCAuctionShopHistoryPacket() : GCAuctionShopHistoryPacket(nullptr) {}
  ~GCAuctionShopHistoryPacket() override;
  explicit PROTOBUF_CONSTEXPR GCAuctionShopHistoryPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCAuctionShopHistoryPacket(const GCAuctionShopHistoryPacket& from);
  GCAuctionShopHistoryPacket(GCAuctionShopHistoryPacket&& from) noexcept
    : GCAuctionShopHistoryPacket() {
    *this = ::std::move(from);
  }

  inline GCAuctionShopHistoryPacket& operator=(const GCAuctionShopHistoryPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCAuctionShopHistoryPacket& operator=(GCAuctionShopHistoryPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCAuctionShopHistoryPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCAuctionShopHistoryPacket* internal_default_instance() {
    return reinterpret_cast<const GCAuctionShopHistoryPacket*>(
               &_GCAuctionShopHistoryPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    126;

  friend void swap(GCAuctionShopHistoryPacket& a, GCAuctionShopHistoryPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCAuctionShopHistoryPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCAuctionShopHistoryPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCAuctionShopHistoryPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCAuctionShopHistoryPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCAuctionShopHistoryPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCAuctionShopHistoryPacket& from) {
    GCAuctionShopHistoryPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCAuctionShopHistoryPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCAuctionShopHistoryPacket";
  }
  protected:
  explicit GCAuctionShopHistoryPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kElemsFieldNumber = 1,
  };
  // repeated .network.TAuctionShopHistoryElement elems = 1;
  int elems_size() const;
  private:
  int _internal_elems_size() const;
  public:
  void clear_elems();
  ::network::TAuctionShopHistoryElement* mutable_elems(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TAuctionShopHistoryElement >*
      mutable_elems();
  private:
  const ::network::TAuctionShopHistoryElement& _internal_elems(int index) const;
  ::network::TAuctionShopHistoryElement* _internal_add_elems();
  public:
  const ::network::TAuctionShopHistoryElement& elems(int index) const;
  ::network::TAuctionShopHistoryElement* add_elems();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TAuctionShopHistoryElement >&
      elems() const;

  // @@protoc_insertion_point(class_scope:network.GCAuctionShopHistoryPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TAuctionShopHistoryElement > elems_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCAuctionAveragePricePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCAuctionAveragePricePacket) */ {
 public:
  inline GCAuctionAveragePricePacket() : GCAuctionAveragePricePacket(nullptr) {}
  ~GCAuctionAveragePricePacket() override;
  explicit PROTOBUF_CONSTEXPR GCAuctionAveragePricePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCAuctionAveragePricePacket(const GCAuctionAveragePricePacket& from);
  GCAuctionAveragePricePacket(GCAuctionAveragePricePacket&& from) noexcept
    : GCAuctionAveragePricePacket() {
    *this = ::std::move(from);
  }

  inline GCAuctionAveragePricePacket& operator=(const GCAuctionAveragePricePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCAuctionAveragePricePacket& operator=(GCAuctionAveragePricePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCAuctionAveragePricePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCAuctionAveragePricePacket* internal_default_instance() {
    return reinterpret_cast<const GCAuctionAveragePricePacket*>(
               &_GCAuctionAveragePricePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    127;

  friend void swap(GCAuctionAveragePricePacket& a, GCAuctionAveragePricePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCAuctionAveragePricePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCAuctionAveragePricePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCAuctionAveragePricePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCAuctionAveragePricePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCAuctionAveragePricePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCAuctionAveragePricePacket& from) {
    GCAuctionAveragePricePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCAuctionAveragePricePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCAuctionAveragePricePacket";
  }
  protected:
  explicit GCAuctionAveragePricePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPriceFieldNumber = 2,
    kRequestorFieldNumber = 1,
  };
  // uint64 price = 2;
  void clear_price();
  uint64_t price() const;
  void set_price(uint64_t value);
  private:
  uint64_t _internal_price() const;
  void _internal_set_price(uint64_t value);
  public:

  // uint32 requestor = 1;
  void clear_requestor();
  uint32_t requestor() const;
  void set_requestor(uint32_t value);
  private:
  uint32_t _internal_requestor() const;
  void _internal_set_requestor(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCAuctionAveragePricePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t price_;
    uint32_t requestor_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCMainCharacterPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCMainCharacterPacket) */ {
 public:
  inline GCMainCharacterPacket() : GCMainCharacterPacket(nullptr) {}
  ~GCMainCharacterPacket() override;
  explicit PROTOBUF_CONSTEXPR GCMainCharacterPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCMainCharacterPacket(const GCMainCharacterPacket& from);
  GCMainCharacterPacket(GCMainCharacterPacket&& from) noexcept
    : GCMainCharacterPacket() {
    *this = ::std::move(from);
  }

  inline GCMainCharacterPacket& operator=(const GCMainCharacterPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCMainCharacterPacket& operator=(GCMainCharacterPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCMainCharacterPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCMainCharacterPacket* internal_default_instance() {
    return reinterpret_cast<const GCMainCharacterPacket*>(
               &_GCMainCharacterPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    128;

  friend void swap(GCMainCharacterPacket& a, GCMainCharacterPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCMainCharacterPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCMainCharacterPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCMainCharacterPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCMainCharacterPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCMainCharacterPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCMainCharacterPacket& from) {
    GCMainCharacterPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCMainCharacterPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCMainCharacterPacket";
  }
  protected:
  explicit GCMainCharacterPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChrNameFieldNumber = 3,
    kBgmNameFieldNumber = 4,
    kVidFieldNumber = 1,
    kRaceNumFieldNumber = 2,
    kBgmVolFieldNumber = 5,
    kXFieldNumber = 6,
    kYFieldNumber = 7,
    kZFieldNumber = 8,
    kEmpireFieldNumber = 9,
    kSkillGroupFieldNumber = 10,
  };
  // bytes chr_name = 3;
  void clear_chr_name();
  const std::string& chr_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_chr_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_chr_name();
  PROTOBUF_NODISCARD std::string* release_chr_name();
  void set_allocated_chr_name(std::string* chr_name);
  private:
  const std::string& _internal_chr_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chr_name(const std::string& value);
  std::string* _internal_mutable_chr_name();
  public:

  // bytes bgm_name = 4;
  void clear_bgm_name();
  const std::string& bgm_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bgm_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bgm_name();
  PROTOBUF_NODISCARD std::string* release_bgm_name();
  void set_allocated_bgm_name(std::string* bgm_name);
  private:
  const std::string& _internal_bgm_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bgm_name(const std::string& value);
  std::string* _internal_mutable_bgm_name();
  public:

  // uint32 vid = 1;
  void clear_vid();
  uint32_t vid() const;
  void set_vid(uint32_t value);
  private:
  uint32_t _internal_vid() const;
  void _internal_set_vid(uint32_t value);
  public:

  // uint32 race_num = 2;
  void clear_race_num();
  uint32_t race_num() const;
  void set_race_num(uint32_t value);
  private:
  uint32_t _internal_race_num() const;
  void _internal_set_race_num(uint32_t value);
  public:

  // float bgm_vol = 5;
  void clear_bgm_vol();
  float bgm_vol() const;
  void set_bgm_vol(float value);
  private:
  float _internal_bgm_vol() const;
  void _internal_set_bgm_vol(float value);
  public:

  // int32 x = 6;
  void clear_x();
  int32_t x() const;
  void set_x(int32_t value);
  private:
  int32_t _internal_x() const;
  void _internal_set_x(int32_t value);
  public:

  // int32 y = 7;
  void clear_y();
  int32_t y() const;
  void set_y(int32_t value);
  private:
  int32_t _internal_y() const;
  void _internal_set_y(int32_t value);
  public:

  // int32 z = 8;
  void clear_z();
  int32_t z() const;
  void set_z(int32_t value);
  private:
  int32_t _internal_z() const;
  void _internal_set_z(int32_t value);
  public:

  // uint32 empire = 9;
  void clear_empire();
  uint32_t empire() const;
  void set_empire(uint32_t value);
  private:
  uint32_t _internal_empire() const;
  void _internal_set_empire(uint32_t value);
  public:

  // uint32 skill_group = 10;
  void clear_skill_group();
  uint32_t skill_group() const;
  void set_skill_group(uint32_t value);
  private:
  uint32_t _internal_skill_group() const;
  void _internal_set_skill_group(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCMainCharacterPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chr_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bgm_name_;
    uint32_t vid_;
    uint32_t race_num_;
    float bgm_vol_;
    int32_t x_;
    int32_t y_;
    int32_t z_;
    uint32_t empire_;
    uint32_t skill_group_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCCharacterAddPacket_AffectColor final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCCharacterAddPacket.AffectColor) */ {
 public:
  inline GCCharacterAddPacket_AffectColor() : GCCharacterAddPacket_AffectColor(nullptr) {}
  ~GCCharacterAddPacket_AffectColor() override;
  explicit PROTOBUF_CONSTEXPR GCCharacterAddPacket_AffectColor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCCharacterAddPacket_AffectColor(const GCCharacterAddPacket_AffectColor& from);
  GCCharacterAddPacket_AffectColor(GCCharacterAddPacket_AffectColor&& from) noexcept
    : GCCharacterAddPacket_AffectColor() {
    *this = ::std::move(from);
  }

  inline GCCharacterAddPacket_AffectColor& operator=(const GCCharacterAddPacket_AffectColor& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCCharacterAddPacket_AffectColor& operator=(GCCharacterAddPacket_AffectColor&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCCharacterAddPacket_AffectColor& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCCharacterAddPacket_AffectColor* internal_default_instance() {
    return reinterpret_cast<const GCCharacterAddPacket_AffectColor*>(
               &_GCCharacterAddPacket_AffectColor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    129;

  friend void swap(GCCharacterAddPacket_AffectColor& a, GCCharacterAddPacket_AffectColor& b) {
    a.Swap(&b);
  }
  inline void Swap(GCCharacterAddPacket_AffectColor* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCCharacterAddPacket_AffectColor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCCharacterAddPacket_AffectColor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCCharacterAddPacket_AffectColor>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCCharacterAddPacket_AffectColor& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCCharacterAddPacket_AffectColor& from) {
    GCCharacterAddPacket_AffectColor::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCCharacterAddPacket_AffectColor* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCCharacterAddPacket.AffectColor";
  }
  protected:
  explicit GCCharacterAddPacket_AffectColor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFlagFieldNumber = 1,
    kColorFieldNumber = 2,
  };
  // uint32 flag = 1;
  void clear_flag();
  uint32_t flag() const;
  void set_flag(uint32_t value);
  private:
  uint32_t _internal_flag() const;
  void _internal_set_flag(uint32_t value);
  public:

  // uint32 color = 2;
  void clear_color();
  uint32_t color() const;
  void set_color(uint32_t value);
  private:
  uint32_t _internal_color() const;
  void _internal_set_color(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCCharacterAddPacket.AffectColor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t flag_;
    uint32_t color_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCCharacterAddPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCCharacterAddPacket) */ {
 public:
  inline GCCharacterAddPacket() : GCCharacterAddPacket(nullptr) {}
  ~GCCharacterAddPacket() override;
  explicit PROTOBUF_CONSTEXPR GCCharacterAddPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCCharacterAddPacket(const GCCharacterAddPacket& from);
  GCCharacterAddPacket(GCCharacterAddPacket&& from) noexcept
    : GCCharacterAddPacket() {
    *this = ::std::move(from);
  }

  inline GCCharacterAddPacket& operator=(const GCCharacterAddPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCCharacterAddPacket& operator=(GCCharacterAddPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCCharacterAddPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCCharacterAddPacket* internal_default_instance() {
    return reinterpret_cast<const GCCharacterAddPacket*>(
               &_GCCharacterAddPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    130;

  friend void swap(GCCharacterAddPacket& a, GCCharacterAddPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCCharacterAddPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCCharacterAddPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCCharacterAddPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCCharacterAddPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCCharacterAddPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCCharacterAddPacket& from) {
    GCCharacterAddPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCCharacterAddPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCCharacterAddPacket";
  }
  protected:
  explicit GCCharacterAddPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GCCharacterAddPacket_AffectColor AffectColor;

  // accessors -------------------------------------------------------

  enum : int {
    kAffectFlagsFieldNumber = 13,
    kAffectColorsFieldNumber = 14,
    kToggleShiningFlagsFieldNumber = 15,
    kVidFieldNumber = 1,
    kLevelFieldNumber = 2,
    kAiFlagFieldNumber = 3,
    kAngleFieldNumber = 4,
    kXFieldNumber = 5,
    kYFieldNumber = 6,
    kZFieldNumber = 7,
    kTypeFieldNumber = 8,
    kRaceNumFieldNumber = 9,
    kMovingSpeedFieldNumber = 10,
    kAttackSpeedFieldNumber = 11,
    kStateFlagFieldNumber = 12,
  };
  // repeated uint32 affect_flags = 13;
  int affect_flags_size() const;
  private:
  int _internal_affect_flags_size() const;
  public:
  void clear_affect_flags();
  private:
  uint32_t _internal_affect_flags(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_affect_flags() const;
  void _internal_add_affect_flags(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_affect_flags();
  public:
  uint32_t affect_flags(int index) const;
  void set_affect_flags(int index, uint32_t value);
  void add_affect_flags(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      affect_flags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_affect_flags();

  // repeated .network.GCCharacterAddPacket.AffectColor affect_colors = 14;
  int affect_colors_size() const;
  private:
  int _internal_affect_colors_size() const;
  public:
  void clear_affect_colors();
  ::network::GCCharacterAddPacket_AffectColor* mutable_affect_colors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::GCCharacterAddPacket_AffectColor >*
      mutable_affect_colors();
  private:
  const ::network::GCCharacterAddPacket_AffectColor& _internal_affect_colors(int index) const;
  ::network::GCCharacterAddPacket_AffectColor* _internal_add_affect_colors();
  public:
  const ::network::GCCharacterAddPacket_AffectColor& affect_colors(int index) const;
  ::network::GCCharacterAddPacket_AffectColor* add_affect_colors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::GCCharacterAddPacket_AffectColor >&
      affect_colors() const;

  // repeated uint32 toggle_shining_flags = 15;
  int toggle_shining_flags_size() const;
  private:
  int _internal_toggle_shining_flags_size() const;
  public:
  void clear_toggle_shining_flags();
  private:
  uint32_t _internal_toggle_shining_flags(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_toggle_shining_flags() const;
  void _internal_add_toggle_shining_flags(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_toggle_shining_flags();
  public:
  uint32_t toggle_shining_flags(int index) const;
  void set_toggle_shining_flags(int index, uint32_t value);
  void add_toggle_shining_flags(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      toggle_shining_flags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_toggle_shining_flags();

  // uint32 vid = 1;
  void clear_vid();
  uint32_t vid() const;
  void set_vid(uint32_t value);
  private:
  uint32_t _internal_vid() const;
  void _internal_set_vid(uint32_t value);
  public:

  // uint32 level = 2;
  void clear_level();
  uint32_t level() const;
  void set_level(uint32_t value);
  private:
  uint32_t _internal_level() const;
  void _internal_set_level(uint32_t value);
  public:

  // uint32 ai_flag = 3;
  void clear_ai_flag();
  uint32_t ai_flag() const;
  void set_ai_flag(uint32_t value);
  private:
  uint32_t _internal_ai_flag() const;
  void _internal_set_ai_flag(uint32_t value);
  public:

  // float angle = 4;
  void clear_angle();
  float angle() const;
  void set_angle(float value);
  private:
  float _internal_angle() const;
  void _internal_set_angle(float value);
  public:

  // int32 x = 5;
  void clear_x();
  int32_t x() const;
  void set_x(int32_t value);
  private:
  int32_t _internal_x() const;
  void _internal_set_x(int32_t value);
  public:

  // int32 y = 6;
  void clear_y();
  int32_t y() const;
  void set_y(int32_t value);
  private:
  int32_t _internal_y() const;
  void _internal_set_y(int32_t value);
  public:

  // int32 z = 7;
  void clear_z();
  int32_t z() const;
  void set_z(int32_t value);
  private:
  int32_t _internal_z() const;
  void _internal_set_z(int32_t value);
  public:

  // uint32 type = 8;
  void clear_type();
  uint32_t type() const;
  void set_type(uint32_t value);
  private:
  uint32_t _internal_type() const;
  void _internal_set_type(uint32_t value);
  public:

  // uint32 race_num = 9;
  void clear_race_num();
  uint32_t race_num() const;
  void set_race_num(uint32_t value);
  private:
  uint32_t _internal_race_num() const;
  void _internal_set_race_num(uint32_t value);
  public:

  // uint32 moving_speed = 10;
  void clear_moving_speed();
  uint32_t moving_speed() const;
  void set_moving_speed(uint32_t value);
  private:
  uint32_t _internal_moving_speed() const;
  void _internal_set_moving_speed(uint32_t value);
  public:

  // uint32 attack_speed = 11;
  void clear_attack_speed();
  uint32_t attack_speed() const;
  void set_attack_speed(uint32_t value);
  private:
  uint32_t _internal_attack_speed() const;
  void _internal_set_attack_speed(uint32_t value);
  public:

  // uint32 state_flag = 12;
  void clear_state_flag();
  uint32_t state_flag() const;
  void set_state_flag(uint32_t value);
  private:
  uint32_t _internal_state_flag() const;
  void _internal_set_state_flag(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCCharacterAddPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > affect_flags_;
    mutable std::atomic<int> _affect_flags_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::GCCharacterAddPacket_AffectColor > affect_colors_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > toggle_shining_flags_;
    mutable std::atomic<int> _toggle_shining_flags_cached_byte_size_;
    uint32_t vid_;
    uint32_t level_;
    uint32_t ai_flag_;
    float angle_;
    int32_t x_;
    int32_t y_;
    int32_t z_;
    uint32_t type_;
    uint32_t race_num_;
    uint32_t moving_speed_;
    uint32_t attack_speed_;
    uint32_t state_flag_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCCharacterAdditionalInfoPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCCharacterAdditionalInfoPacket) */ {
 public:
  inline GCCharacterAdditionalInfoPacket() : GCCharacterAdditionalInfoPacket(nullptr) {}
  ~GCCharacterAdditionalInfoPacket() override;
  explicit PROTOBUF_CONSTEXPR GCCharacterAdditionalInfoPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCCharacterAdditionalInfoPacket(const GCCharacterAdditionalInfoPacket& from);
  GCCharacterAdditionalInfoPacket(GCCharacterAdditionalInfoPacket&& from) noexcept
    : GCCharacterAdditionalInfoPacket() {
    *this = ::std::move(from);
  }

  inline GCCharacterAdditionalInfoPacket& operator=(const GCCharacterAdditionalInfoPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCCharacterAdditionalInfoPacket& operator=(GCCharacterAdditionalInfoPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCCharacterAdditionalInfoPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCCharacterAdditionalInfoPacket* internal_default_instance() {
    return reinterpret_cast<const GCCharacterAdditionalInfoPacket*>(
               &_GCCharacterAdditionalInfoPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    131;

  friend void swap(GCCharacterAdditionalInfoPacket& a, GCCharacterAdditionalInfoPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCCharacterAdditionalInfoPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCCharacterAdditionalInfoPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCCharacterAdditionalInfoPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCCharacterAdditionalInfoPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCCharacterAdditionalInfoPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCCharacterAdditionalInfoPacket& from) {
    GCCharacterAdditionalInfoPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCCharacterAdditionalInfoPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCCharacterAdditionalInfoPacket";
  }
  protected:
  explicit GCCharacterAdditionalInfoPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartsFieldNumber = 3,
    kSkillColorsFieldNumber = 14,
    kNameFieldNumber = 2,
    kVidFieldNumber = 1,
    kAcceSparkleFieldNumber = 4,
    kEmpireFieldNumber = 5,
    kGuildIdFieldNumber = 6,
    kLevelFieldNumber = 7,
    kAlignmentFieldNumber = 8,
    kPkModeFieldNumber = 9,
    kMountVnumFieldNumber = 10,
    kLocaleFieldNumber = 11,
    kPvpTeamFieldNumber = 12,
    kCombatZoneRankFieldNumber = 13,
    kMobScaleFieldNumber = 15,
  };
  // repeated uint32 parts = 3;
  int parts_size() const;
  private:
  int _internal_parts_size() const;
  public:
  void clear_parts();
  private:
  uint32_t _internal_parts(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_parts() const;
  void _internal_add_parts(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_parts();
  public:
  uint32_t parts(int index) const;
  void set_parts(int index, uint32_t value);
  void add_parts(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      parts() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_parts();

  // repeated uint32 skill_colors = 14;
  int skill_colors_size() const;
  private:
  int _internal_skill_colors_size() const;
  public:
  void clear_skill_colors();
  private:
  uint32_t _internal_skill_colors(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_skill_colors() const;
  void _internal_add_skill_colors(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_skill_colors();
  public:
  uint32_t skill_colors(int index) const;
  void set_skill_colors(int index, uint32_t value);
  void add_skill_colors(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      skill_colors() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_skill_colors();

  // bytes name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 vid = 1;
  void clear_vid();
  uint32_t vid() const;
  void set_vid(uint32_t value);
  private:
  uint32_t _internal_vid() const;
  void _internal_set_vid(uint32_t value);
  public:

  // bool acce_sparkle = 4;
  void clear_acce_sparkle();
  bool acce_sparkle() const;
  void set_acce_sparkle(bool value);
  private:
  bool _internal_acce_sparkle() const;
  void _internal_set_acce_sparkle(bool value);
  public:

  // uint32 empire = 5;
  void clear_empire();
  uint32_t empire() const;
  void set_empire(uint32_t value);
  private:
  uint32_t _internal_empire() const;
  void _internal_set_empire(uint32_t value);
  public:

  // uint32 guild_id = 6;
  void clear_guild_id();
  uint32_t guild_id() const;
  void set_guild_id(uint32_t value);
  private:
  uint32_t _internal_guild_id() const;
  void _internal_set_guild_id(uint32_t value);
  public:

  // uint32 level = 7;
  void clear_level();
  uint32_t level() const;
  void set_level(uint32_t value);
  private:
  uint32_t _internal_level() const;
  void _internal_set_level(uint32_t value);
  public:

  // sint32 alignment = 8;
  void clear_alignment();
  int32_t alignment() const;
  void set_alignment(int32_t value);
  private:
  int32_t _internal_alignment() const;
  void _internal_set_alignment(int32_t value);
  public:

  // uint32 pk_mode = 9;
  void clear_pk_mode();
  uint32_t pk_mode() const;
  void set_pk_mode(uint32_t value);
  private:
  uint32_t _internal_pk_mode() const;
  void _internal_set_pk_mode(uint32_t value);
  public:

  // uint32 mount_vnum = 10;
  void clear_mount_vnum();
  uint32_t mount_vnum() const;
  void set_mount_vnum(uint32_t value);
  private:
  uint32_t _internal_mount_vnum() const;
  void _internal_set_mount_vnum(uint32_t value);
  public:

  // int32 locale = 11;
  void clear_locale();
  int32_t locale() const;
  void set_locale(int32_t value);
  private:
  int32_t _internal_locale() const;
  void _internal_set_locale(int32_t value);
  public:

  // sint32 pvp_team = 12;
  void clear_pvp_team();
  int32_t pvp_team() const;
  void set_pvp_team(int32_t value);
  private:
  int32_t _internal_pvp_team() const;
  void _internal_set_pvp_team(int32_t value);
  public:

  // uint32 combat_zone_rank = 13;
  void clear_combat_zone_rank();
  uint32_t combat_zone_rank() const;
  void set_combat_zone_rank(uint32_t value);
  private:
  uint32_t _internal_combat_zone_rank() const;
  void _internal_set_combat_zone_rank(uint32_t value);
  public:

  // float mob_scale = 15;
  void clear_mob_scale();
  float mob_scale() const;
  void set_mob_scale(float value);
  private:
  float _internal_mob_scale() const;
  void _internal_set_mob_scale(float value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCCharacterAdditionalInfoPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > parts_;
    mutable std::atomic<int> _parts_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > skill_colors_;
    mutable std::atomic<int> _skill_colors_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    uint32_t vid_;
    bool acce_sparkle_;
    uint32_t empire_;
    uint32_t guild_id_;
    uint32_t level_;
    int32_t alignment_;
    uint32_t pk_mode_;
    uint32_t mount_vnum_;
    int32_t locale_;
    int32_t pvp_team_;
    uint32_t combat_zone_rank_;
    float mob_scale_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCCharacterUpdatePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCCharacterUpdatePacket) */ {
 public:
  inline GCCharacterUpdatePacket() : GCCharacterUpdatePacket(nullptr) {}
  ~GCCharacterUpdatePacket() override;
  explicit PROTOBUF_CONSTEXPR GCCharacterUpdatePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCCharacterUpdatePacket(const GCCharacterUpdatePacket& from);
  GCCharacterUpdatePacket(GCCharacterUpdatePacket&& from) noexcept
    : GCCharacterUpdatePacket() {
    *this = ::std::move(from);
  }

  inline GCCharacterUpdatePacket& operator=(const GCCharacterUpdatePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCCharacterUpdatePacket& operator=(GCCharacterUpdatePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCCharacterUpdatePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCCharacterUpdatePacket* internal_default_instance() {
    return reinterpret_cast<const GCCharacterUpdatePacket*>(
               &_GCCharacterUpdatePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    132;

  friend void swap(GCCharacterUpdatePacket& a, GCCharacterUpdatePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCCharacterUpdatePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCCharacterUpdatePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCCharacterUpdatePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCCharacterUpdatePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCCharacterUpdatePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCCharacterUpdatePacket& from) {
    GCCharacterUpdatePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCCharacterUpdatePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCCharacterUpdatePacket";
  }
  protected:
  explicit GCCharacterUpdatePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartsFieldNumber = 2,
    kAffectFlagsFieldNumber = 7,
    kAffectColorsFieldNumber = 8,
    kToggleShiningFlagsFieldNumber = 9,
    kSkillColorsFieldNumber = 15,
    kVidFieldNumber = 1,
    kAcceSparkleFieldNumber = 3,
    kMovingSpeedFieldNumber = 4,
    kAttackSpeedFieldNumber = 5,
    kStateFlagFieldNumber = 6,
    kGuildIdFieldNumber = 10,
    kAlignmentFieldNumber = 11,
    kPkModeFieldNumber = 12,
    kMountVnumFieldNumber = 13,
    kCombatZonePointsFieldNumber = 14,
  };
  // repeated uint32 parts = 2;
  int parts_size() const;
  private:
  int _internal_parts_size() const;
  public:
  void clear_parts();
  private:
  uint32_t _internal_parts(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_parts() const;
  void _internal_add_parts(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_parts();
  public:
  uint32_t parts(int index) const;
  void set_parts(int index, uint32_t value);
  void add_parts(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      parts() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_parts();

  // repeated uint32 affect_flags = 7;
  int affect_flags_size() const;
  private:
  int _internal_affect_flags_size() const;
  public:
  void clear_affect_flags();
  private:
  uint32_t _internal_affect_flags(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_affect_flags() const;
  void _internal_add_affect_flags(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_affect_flags();
  public:
  uint32_t affect_flags(int index) const;
  void set_affect_flags(int index, uint32_t value);
  void add_affect_flags(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      affect_flags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_affect_flags();

  // repeated .network.GCCharacterAddPacket.AffectColor affect_colors = 8;
  int affect_colors_size() const;
  private:
  int _internal_affect_colors_size() const;
  public:
  void clear_affect_colors();
  ::network::GCCharacterAddPacket_AffectColor* mutable_affect_colors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::GCCharacterAddPacket_AffectColor >*
      mutable_affect_colors();
  private:
  const ::network::GCCharacterAddPacket_AffectColor& _internal_affect_colors(int index) const;
  ::network::GCCharacterAddPacket_AffectColor* _internal_add_affect_colors();
  public:
  const ::network::GCCharacterAddPacket_AffectColor& affect_colors(int index) const;
  ::network::GCCharacterAddPacket_AffectColor* add_affect_colors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::GCCharacterAddPacket_AffectColor >&
      affect_colors() const;

  // repeated uint32 toggle_shining_flags = 9;
  int toggle_shining_flags_size() const;
  private:
  int _internal_toggle_shining_flags_size() const;
  public:
  void clear_toggle_shining_flags();
  private:
  uint32_t _internal_toggle_shining_flags(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_toggle_shining_flags() const;
  void _internal_add_toggle_shining_flags(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_toggle_shining_flags();
  public:
  uint32_t toggle_shining_flags(int index) const;
  void set_toggle_shining_flags(int index, uint32_t value);
  void add_toggle_shining_flags(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      toggle_shining_flags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_toggle_shining_flags();

  // repeated uint32 skill_colors = 15;
  int skill_colors_size() const;
  private:
  int _internal_skill_colors_size() const;
  public:
  void clear_skill_colors();
  private:
  uint32_t _internal_skill_colors(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_skill_colors() const;
  void _internal_add_skill_colors(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_skill_colors();
  public:
  uint32_t skill_colors(int index) const;
  void set_skill_colors(int index, uint32_t value);
  void add_skill_colors(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      skill_colors() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_skill_colors();

  // uint32 vid = 1;
  void clear_vid();
  uint32_t vid() const;
  void set_vid(uint32_t value);
  private:
  uint32_t _internal_vid() const;
  void _internal_set_vid(uint32_t value);
  public:

  // bool acce_sparkle = 3;
  void clear_acce_sparkle();
  bool acce_sparkle() const;
  void set_acce_sparkle(bool value);
  private:
  bool _internal_acce_sparkle() const;
  void _internal_set_acce_sparkle(bool value);
  public:

  // uint32 moving_speed = 4;
  void clear_moving_speed();
  uint32_t moving_speed() const;
  void set_moving_speed(uint32_t value);
  private:
  uint32_t _internal_moving_speed() const;
  void _internal_set_moving_speed(uint32_t value);
  public:

  // uint32 attack_speed = 5;
  void clear_attack_speed();
  uint32_t attack_speed() const;
  void set_attack_speed(uint32_t value);
  private:
  uint32_t _internal_attack_speed() const;
  void _internal_set_attack_speed(uint32_t value);
  public:

  // uint32 state_flag = 6;
  void clear_state_flag();
  uint32_t state_flag() const;
  void set_state_flag(uint32_t value);
  private:
  uint32_t _internal_state_flag() const;
  void _internal_set_state_flag(uint32_t value);
  public:

  // uint32 guild_id = 10;
  void clear_guild_id();
  uint32_t guild_id() const;
  void set_guild_id(uint32_t value);
  private:
  uint32_t _internal_guild_id() const;
  void _internal_set_guild_id(uint32_t value);
  public:

  // sint32 alignment = 11;
  void clear_alignment();
  int32_t alignment() const;
  void set_alignment(int32_t value);
  private:
  int32_t _internal_alignment() const;
  void _internal_set_alignment(int32_t value);
  public:

  // uint32 pk_mode = 12;
  void clear_pk_mode();
  uint32_t pk_mode() const;
  void set_pk_mode(uint32_t value);
  private:
  uint32_t _internal_pk_mode() const;
  void _internal_set_pk_mode(uint32_t value);
  public:

  // uint32 mount_vnum = 13;
  void clear_mount_vnum();
  uint32_t mount_vnum() const;
  void set_mount_vnum(uint32_t value);
  private:
  uint32_t _internal_mount_vnum() const;
  void _internal_set_mount_vnum(uint32_t value);
  public:

  // uint32 combat_zone_points = 14;
  void clear_combat_zone_points();
  uint32_t combat_zone_points() const;
  void set_combat_zone_points(uint32_t value);
  private:
  uint32_t _internal_combat_zone_points() const;
  void _internal_set_combat_zone_points(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCCharacterUpdatePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > parts_;
    mutable std::atomic<int> _parts_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > affect_flags_;
    mutable std::atomic<int> _affect_flags_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::GCCharacterAddPacket_AffectColor > affect_colors_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > toggle_shining_flags_;
    mutable std::atomic<int> _toggle_shining_flags_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > skill_colors_;
    mutable std::atomic<int> _skill_colors_cached_byte_size_;
    uint32_t vid_;
    bool acce_sparkle_;
    uint32_t moving_speed_;
    uint32_t attack_speed_;
    uint32_t state_flag_;
    uint32_t guild_id_;
    int32_t alignment_;
    uint32_t pk_mode_;
    uint32_t mount_vnum_;
    uint32_t combat_zone_points_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCCharacterShiningPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCCharacterShiningPacket) */ {
 public:
  inline GCCharacterShiningPacket() : GCCharacterShiningPacket(nullptr) {}
  ~GCCharacterShiningPacket() override;
  explicit PROTOBUF_CONSTEXPR GCCharacterShiningPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCCharacterShiningPacket(const GCCharacterShiningPacket& from);
  GCCharacterShiningPacket(GCCharacterShiningPacket&& from) noexcept
    : GCCharacterShiningPacket() {
    *this = ::std::move(from);
  }

  inline GCCharacterShiningPacket& operator=(const GCCharacterShiningPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCCharacterShiningPacket& operator=(GCCharacterShiningPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCCharacterShiningPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCCharacterShiningPacket* internal_default_instance() {
    return reinterpret_cast<const GCCharacterShiningPacket*>(
               &_GCCharacterShiningPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    133;

  friend void swap(GCCharacterShiningPacket& a, GCCharacterShiningPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCCharacterShiningPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCCharacterShiningPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCCharacterShiningPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCCharacterShiningPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCCharacterShiningPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCCharacterShiningPacket& from) {
    GCCharacterShiningPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCCharacterShiningPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCCharacterShiningPacket";
  }
  protected:
  explicit GCCharacterShiningPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShiningsFieldNumber = 2,
    kVidFieldNumber = 1,
  };
  // repeated uint32 shinings = 2;
  int shinings_size() const;
  private:
  int _internal_shinings_size() const;
  public:
  void clear_shinings();
  private:
  uint32_t _internal_shinings(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_shinings() const;
  void _internal_add_shinings(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_shinings();
  public:
  uint32_t shinings(int index) const;
  void set_shinings(int index, uint32_t value);
  void add_shinings(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      shinings() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_shinings();

  // uint32 vid = 1;
  void clear_vid();
  uint32_t vid() const;
  void set_vid(uint32_t value);
  private:
  uint32_t _internal_vid() const;
  void _internal_set_vid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCCharacterShiningPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > shinings_;
    mutable std::atomic<int> _shinings_cached_byte_size_;
    uint32_t vid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCCharacterDeletePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCCharacterDeletePacket) */ {
 public:
  inline GCCharacterDeletePacket() : GCCharacterDeletePacket(nullptr) {}
  ~GCCharacterDeletePacket() override;
  explicit PROTOBUF_CONSTEXPR GCCharacterDeletePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCCharacterDeletePacket(const GCCharacterDeletePacket& from);
  GCCharacterDeletePacket(GCCharacterDeletePacket&& from) noexcept
    : GCCharacterDeletePacket() {
    *this = ::std::move(from);
  }

  inline GCCharacterDeletePacket& operator=(const GCCharacterDeletePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCCharacterDeletePacket& operator=(GCCharacterDeletePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCCharacterDeletePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCCharacterDeletePacket* internal_default_instance() {
    return reinterpret_cast<const GCCharacterDeletePacket*>(
               &_GCCharacterDeletePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    134;

  friend void swap(GCCharacterDeletePacket& a, GCCharacterDeletePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCCharacterDeletePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCCharacterDeletePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCCharacterDeletePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCCharacterDeletePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCCharacterDeletePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCCharacterDeletePacket& from) {
    GCCharacterDeletePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCCharacterDeletePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCCharacterDeletePacket";
  }
  protected:
  explicit GCCharacterDeletePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVidFieldNumber = 1,
  };
  // uint32 vid = 1;
  void clear_vid();
  uint32_t vid() const;
  void set_vid(uint32_t value);
  private:
  uint32_t _internal_vid() const;
  void _internal_set_vid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCCharacterDeletePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t vid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCFishingStartPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCFishingStartPacket) */ {
 public:
  inline GCFishingStartPacket() : GCFishingStartPacket(nullptr) {}
  ~GCFishingStartPacket() override;
  explicit PROTOBUF_CONSTEXPR GCFishingStartPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCFishingStartPacket(const GCFishingStartPacket& from);
  GCFishingStartPacket(GCFishingStartPacket&& from) noexcept
    : GCFishingStartPacket() {
    *this = ::std::move(from);
  }

  inline GCFishingStartPacket& operator=(const GCFishingStartPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCFishingStartPacket& operator=(GCFishingStartPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCFishingStartPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCFishingStartPacket* internal_default_instance() {
    return reinterpret_cast<const GCFishingStartPacket*>(
               &_GCFishingStartPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    135;

  friend void swap(GCFishingStartPacket& a, GCFishingStartPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCFishingStartPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCFishingStartPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCFishingStartPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCFishingStartPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCFishingStartPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCFishingStartPacket& from) {
    GCFishingStartPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCFishingStartPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCFishingStartPacket";
  }
  protected:
  explicit GCFishingStartPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVidFieldNumber = 1,
    kDirFieldNumber = 2,
  };
  // uint32 vid = 1;
  void clear_vid();
  uint32_t vid() const;
  void set_vid(uint32_t value);
  private:
  uint32_t _internal_vid() const;
  void _internal_set_vid(uint32_t value);
  public:

  // uint32 dir = 2;
  void clear_dir();
  uint32_t dir() const;
  void set_dir(uint32_t value);
  private:
  uint32_t _internal_dir() const;
  void _internal_set_dir(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCFishingStartPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t vid_;
    uint32_t dir_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCFishingStopPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCFishingStopPacket) */ {
 public:
  inline GCFishingStopPacket() : GCFishingStopPacket(nullptr) {}
  ~GCFishingStopPacket() override;
  explicit PROTOBUF_CONSTEXPR GCFishingStopPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCFishingStopPacket(const GCFishingStopPacket& from);
  GCFishingStopPacket(GCFishingStopPacket&& from) noexcept
    : GCFishingStopPacket() {
    *this = ::std::move(from);
  }

  inline GCFishingStopPacket& operator=(const GCFishingStopPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCFishingStopPacket& operator=(GCFishingStopPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCFishingStopPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCFishingStopPacket* internal_default_instance() {
    return reinterpret_cast<const GCFishingStopPacket*>(
               &_GCFishingStopPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    136;

  friend void swap(GCFishingStopPacket& a, GCFishingStopPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCFishingStopPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCFishingStopPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCFishingStopPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCFishingStopPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCFishingStopPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCFishingStopPacket& from) {
    GCFishingStopPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCFishingStopPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCFishingStopPacket";
  }
  protected:
  explicit GCFishingStopPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVidFieldNumber = 1,
  };
  // uint32 vid = 1;
  void clear_vid();
  uint32_t vid() const;
  void set_vid(uint32_t value);
  private:
  uint32_t _internal_vid() const;
  void _internal_set_vid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCFishingStopPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t vid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCFishingReactPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCFishingReactPacket) */ {
 public:
  inline GCFishingReactPacket() : GCFishingReactPacket(nullptr) {}
  ~GCFishingReactPacket() override;
  explicit PROTOBUF_CONSTEXPR GCFishingReactPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCFishingReactPacket(const GCFishingReactPacket& from);
  GCFishingReactPacket(GCFishingReactPacket&& from) noexcept
    : GCFishingReactPacket() {
    *this = ::std::move(from);
  }

  inline GCFishingReactPacket& operator=(const GCFishingReactPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCFishingReactPacket& operator=(GCFishingReactPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCFishingReactPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCFishingReactPacket* internal_default_instance() {
    return reinterpret_cast<const GCFishingReactPacket*>(
               &_GCFishingReactPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    137;

  friend void swap(GCFishingReactPacket& a, GCFishingReactPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCFishingReactPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCFishingReactPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCFishingReactPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCFishingReactPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCFishingReactPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCFishingReactPacket& from) {
    GCFishingReactPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCFishingReactPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCFishingReactPacket";
  }
  protected:
  explicit GCFishingReactPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVidFieldNumber = 1,
  };
  // uint32 vid = 1;
  void clear_vid();
  uint32_t vid() const;
  void set_vid(uint32_t value);
  private:
  uint32_t _internal_vid() const;
  void _internal_set_vid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCFishingReactPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t vid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCFishingSuccessPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCFishingSuccessPacket) */ {
 public:
  inline GCFishingSuccessPacket() : GCFishingSuccessPacket(nullptr) {}
  ~GCFishingSuccessPacket() override;
  explicit PROTOBUF_CONSTEXPR GCFishingSuccessPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCFishingSuccessPacket(const GCFishingSuccessPacket& from);
  GCFishingSuccessPacket(GCFishingSuccessPacket&& from) noexcept
    : GCFishingSuccessPacket() {
    *this = ::std::move(from);
  }

  inline GCFishingSuccessPacket& operator=(const GCFishingSuccessPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCFishingSuccessPacket& operator=(GCFishingSuccessPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCFishingSuccessPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCFishingSuccessPacket* internal_default_instance() {
    return reinterpret_cast<const GCFishingSuccessPacket*>(
               &_GCFishingSuccessPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    138;

  friend void swap(GCFishingSuccessPacket& a, GCFishingSuccessPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCFishingSuccessPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCFishingSuccessPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCFishingSuccessPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCFishingSuccessPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCFishingSuccessPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCFishingSuccessPacket& from) {
    GCFishingSuccessPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCFishingSuccessPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCFishingSuccessPacket";
  }
  protected:
  explicit GCFishingSuccessPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVidFieldNumber = 1,
  };
  // uint32 vid = 1;
  void clear_vid();
  uint32_t vid() const;
  void set_vid(uint32_t value);
  private:
  uint32_t _internal_vid() const;
  void _internal_set_vid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCFishingSuccessPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t vid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCFishingFailPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCFishingFailPacket) */ {
 public:
  inline GCFishingFailPacket() : GCFishingFailPacket(nullptr) {}
  ~GCFishingFailPacket() override;
  explicit PROTOBUF_CONSTEXPR GCFishingFailPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCFishingFailPacket(const GCFishingFailPacket& from);
  GCFishingFailPacket(GCFishingFailPacket&& from) noexcept
    : GCFishingFailPacket() {
    *this = ::std::move(from);
  }

  inline GCFishingFailPacket& operator=(const GCFishingFailPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCFishingFailPacket& operator=(GCFishingFailPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCFishingFailPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCFishingFailPacket* internal_default_instance() {
    return reinterpret_cast<const GCFishingFailPacket*>(
               &_GCFishingFailPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    139;

  friend void swap(GCFishingFailPacket& a, GCFishingFailPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCFishingFailPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCFishingFailPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCFishingFailPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCFishingFailPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCFishingFailPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCFishingFailPacket& from) {
    GCFishingFailPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCFishingFailPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCFishingFailPacket";
  }
  protected:
  explicit GCFishingFailPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVidFieldNumber = 1,
  };
  // uint32 vid = 1;
  void clear_vid();
  uint32_t vid() const;
  void set_vid(uint32_t value);
  private:
  uint32_t _internal_vid() const;
  void _internal_set_vid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCFishingFailPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t vid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCFishingFishInfoPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCFishingFishInfoPacket) */ {
 public:
  inline GCFishingFishInfoPacket() : GCFishingFishInfoPacket(nullptr) {}
  ~GCFishingFishInfoPacket() override;
  explicit PROTOBUF_CONSTEXPR GCFishingFishInfoPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCFishingFishInfoPacket(const GCFishingFishInfoPacket& from);
  GCFishingFishInfoPacket(GCFishingFishInfoPacket&& from) noexcept
    : GCFishingFishInfoPacket() {
    *this = ::std::move(from);
  }

  inline GCFishingFishInfoPacket& operator=(const GCFishingFishInfoPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCFishingFishInfoPacket& operator=(GCFishingFishInfoPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCFishingFishInfoPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCFishingFishInfoPacket* internal_default_instance() {
    return reinterpret_cast<const GCFishingFishInfoPacket*>(
               &_GCFishingFishInfoPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    140;

  friend void swap(GCFishingFishInfoPacket& a, GCFishingFishInfoPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCFishingFishInfoPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCFishingFishInfoPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCFishingFishInfoPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCFishingFishInfoPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCFishingFishInfoPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCFishingFishInfoPacket& from) {
    GCFishingFishInfoPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCFishingFishInfoPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCFishingFishInfoPacket";
  }
  protected:
  explicit GCFishingFishInfoPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 1,
  };
  // uint32 info = 1;
  void clear_info();
  uint32_t info() const;
  void set_info(uint32_t value);
  private:
  uint32_t _internal_info() const;
  void _internal_set_info(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCFishingFishInfoPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t info_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCItemSetPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCItemSetPacket) */ {
 public:
  inline GCItemSetPacket() : GCItemSetPacket(nullptr) {}
  ~GCItemSetPacket() override;
  explicit PROTOBUF_CONSTEXPR GCItemSetPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCItemSetPacket(const GCItemSetPacket& from);
  GCItemSetPacket(GCItemSetPacket&& from) noexcept
    : GCItemSetPacket() {
    *this = ::std::move(from);
  }

  inline GCItemSetPacket& operator=(const GCItemSetPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCItemSetPacket& operator=(GCItemSetPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCItemSetPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCItemSetPacket* internal_default_instance() {
    return reinterpret_cast<const GCItemSetPacket*>(
               &_GCItemSetPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    141;

  friend void swap(GCItemSetPacket& a, GCItemSetPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCItemSetPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCItemSetPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCItemSetPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCItemSetPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCItemSetPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCItemSetPacket& from) {
    GCItemSetPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCItemSetPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCItemSetPacket";
  }
  protected:
  explicit GCItemSetPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
    kHighlightFieldNumber = 2,
  };
  // .network.TItemData data = 1;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::network::TItemData& data() const;
  PROTOBUF_NODISCARD ::network::TItemData* release_data();
  ::network::TItemData* mutable_data();
  void set_allocated_data(::network::TItemData* data);
  private:
  const ::network::TItemData& _internal_data() const;
  ::network::TItemData* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::network::TItemData* data);
  ::network::TItemData* unsafe_arena_release_data();

  // bool highlight = 2;
  void clear_highlight();
  bool highlight() const;
  void set_highlight(bool value);
  private:
  bool _internal_highlight() const;
  void _internal_set_highlight(bool value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCItemSetPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::network::TItemData* data_;
    bool highlight_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCItemUpdatePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCItemUpdatePacket) */ {
 public:
  inline GCItemUpdatePacket() : GCItemUpdatePacket(nullptr) {}
  ~GCItemUpdatePacket() override;
  explicit PROTOBUF_CONSTEXPR GCItemUpdatePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCItemUpdatePacket(const GCItemUpdatePacket& from);
  GCItemUpdatePacket(GCItemUpdatePacket&& from) noexcept
    : GCItemUpdatePacket() {
    *this = ::std::move(from);
  }

  inline GCItemUpdatePacket& operator=(const GCItemUpdatePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCItemUpdatePacket& operator=(GCItemUpdatePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCItemUpdatePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCItemUpdatePacket* internal_default_instance() {
    return reinterpret_cast<const GCItemUpdatePacket*>(
               &_GCItemUpdatePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    142;

  friend void swap(GCItemUpdatePacket& a, GCItemUpdatePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCItemUpdatePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCItemUpdatePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCItemUpdatePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCItemUpdatePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCItemUpdatePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCItemUpdatePacket& from) {
    GCItemUpdatePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCItemUpdatePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCItemUpdatePacket";
  }
  protected:
  explicit GCItemUpdatePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // .network.TItemData data = 1;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::network::TItemData& data() const;
  PROTOBUF_NODISCARD ::network::TItemData* release_data();
  ::network::TItemData* mutable_data();
  void set_allocated_data(::network::TItemData* data);
  private:
  const ::network::TItemData& _internal_data() const;
  ::network::TItemData* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::network::TItemData* data);
  ::network::TItemData* unsafe_arena_release_data();

  // @@protoc_insertion_point(class_scope:network.GCItemUpdatePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::network::TItemData* data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCItemGroundAddPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCItemGroundAddPacket) */ {
 public:
  inline GCItemGroundAddPacket() : GCItemGroundAddPacket(nullptr) {}
  ~GCItemGroundAddPacket() override;
  explicit PROTOBUF_CONSTEXPR GCItemGroundAddPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCItemGroundAddPacket(const GCItemGroundAddPacket& from);
  GCItemGroundAddPacket(GCItemGroundAddPacket&& from) noexcept
    : GCItemGroundAddPacket() {
    *this = ::std::move(from);
  }

  inline GCItemGroundAddPacket& operator=(const GCItemGroundAddPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCItemGroundAddPacket& operator=(GCItemGroundAddPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCItemGroundAddPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCItemGroundAddPacket* internal_default_instance() {
    return reinterpret_cast<const GCItemGroundAddPacket*>(
               &_GCItemGroundAddPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    143;

  friend void swap(GCItemGroundAddPacket& a, GCItemGroundAddPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCItemGroundAddPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCItemGroundAddPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCItemGroundAddPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCItemGroundAddPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCItemGroundAddPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCItemGroundAddPacket& from) {
    GCItemGroundAddPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCItemGroundAddPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCItemGroundAddPacket";
  }
  protected:
  explicit GCItemGroundAddPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSocketsFieldNumber = 7,
    kAttributesFieldNumber = 8,
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kVidFieldNumber = 4,
    kVnumFieldNumber = 5,
    kCountFieldNumber = 6,
  };
  // repeated int32 sockets = 7;
  int sockets_size() const;
  private:
  int _internal_sockets_size() const;
  public:
  void clear_sockets();
  private:
  int32_t _internal_sockets(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_sockets() const;
  void _internal_add_sockets(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_sockets();
  public:
  int32_t sockets(int index) const;
  void set_sockets(int index, int32_t value);
  void add_sockets(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      sockets() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_sockets();

  // repeated .network.TItemAttribute attributes = 8;
  int attributes_size() const;
  private:
  int _internal_attributes_size() const;
  public:
  void clear_attributes();
  ::network::TItemAttribute* mutable_attributes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemAttribute >*
      mutable_attributes();
  private:
  const ::network::TItemAttribute& _internal_attributes(int index) const;
  ::network::TItemAttribute* _internal_add_attributes();
  public:
  const ::network::TItemAttribute& attributes(int index) const;
  ::network::TItemAttribute* add_attributes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemAttribute >&
      attributes() const;

  // int32 x = 1;
  void clear_x();
  int32_t x() const;
  void set_x(int32_t value);
  private:
  int32_t _internal_x() const;
  void _internal_set_x(int32_t value);
  public:

  // int32 y = 2;
  void clear_y();
  int32_t y() const;
  void set_y(int32_t value);
  private:
  int32_t _internal_y() const;
  void _internal_set_y(int32_t value);
  public:

  // int32 z = 3;
  void clear_z();
  int32_t z() const;
  void set_z(int32_t value);
  private:
  int32_t _internal_z() const;
  void _internal_set_z(int32_t value);
  public:

  // uint32 vid = 4;
  void clear_vid();
  uint32_t vid() const;
  void set_vid(uint32_t value);
  private:
  uint32_t _internal_vid() const;
  void _internal_set_vid(uint32_t value);
  public:

  // uint32 vnum = 5;
  void clear_vnum();
  uint32_t vnum() const;
  void set_vnum(uint32_t value);
  private:
  uint32_t _internal_vnum() const;
  void _internal_set_vnum(uint32_t value);
  public:

  // uint32 count = 6;
  void clear_count();
  uint32_t count() const;
  void set_count(uint32_t value);
  private:
  uint32_t _internal_count() const;
  void _internal_set_count(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCItemGroundAddPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > sockets_;
    mutable std::atomic<int> _sockets_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemAttribute > attributes_;
    int32_t x_;
    int32_t y_;
    int32_t z_;
    uint32_t vid_;
    uint32_t vnum_;
    uint32_t count_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCItemGroundDeletePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCItemGroundDeletePacket) */ {
 public:
  inline GCItemGroundDeletePacket() : GCItemGroundDeletePacket(nullptr) {}
  ~GCItemGroundDeletePacket() override;
  explicit PROTOBUF_CONSTEXPR GCItemGroundDeletePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCItemGroundDeletePacket(const GCItemGroundDeletePacket& from);
  GCItemGroundDeletePacket(GCItemGroundDeletePacket&& from) noexcept
    : GCItemGroundDeletePacket() {
    *this = ::std::move(from);
  }

  inline GCItemGroundDeletePacket& operator=(const GCItemGroundDeletePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCItemGroundDeletePacket& operator=(GCItemGroundDeletePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCItemGroundDeletePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCItemGroundDeletePacket* internal_default_instance() {
    return reinterpret_cast<const GCItemGroundDeletePacket*>(
               &_GCItemGroundDeletePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    144;

  friend void swap(GCItemGroundDeletePacket& a, GCItemGroundDeletePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCItemGroundDeletePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCItemGroundDeletePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCItemGroundDeletePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCItemGroundDeletePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCItemGroundDeletePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCItemGroundDeletePacket& from) {
    GCItemGroundDeletePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCItemGroundDeletePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCItemGroundDeletePacket";
  }
  protected:
  explicit GCItemGroundDeletePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVidFieldNumber = 1,
  };
  // uint32 vid = 1;
  void clear_vid();
  uint32_t vid() const;
  void set_vid(uint32_t value);
  private:
  uint32_t _internal_vid() const;
  void _internal_set_vid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCItemGroundDeletePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t vid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCItemOwnershipPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCItemOwnershipPacket) */ {
 public:
  inline GCItemOwnershipPacket() : GCItemOwnershipPacket(nullptr) {}
  ~GCItemOwnershipPacket() override;
  explicit PROTOBUF_CONSTEXPR GCItemOwnershipPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCItemOwnershipPacket(const GCItemOwnershipPacket& from);
  GCItemOwnershipPacket(GCItemOwnershipPacket&& from) noexcept
    : GCItemOwnershipPacket() {
    *this = ::std::move(from);
  }

  inline GCItemOwnershipPacket& operator=(const GCItemOwnershipPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCItemOwnershipPacket& operator=(GCItemOwnershipPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCItemOwnershipPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCItemOwnershipPacket* internal_default_instance() {
    return reinterpret_cast<const GCItemOwnershipPacket*>(
               &_GCItemOwnershipPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    145;

  friend void swap(GCItemOwnershipPacket& a, GCItemOwnershipPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCItemOwnershipPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCItemOwnershipPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCItemOwnershipPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCItemOwnershipPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCItemOwnershipPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCItemOwnershipPacket& from) {
    GCItemOwnershipPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCItemOwnershipPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCItemOwnershipPacket";
  }
  protected:
  explicit GCItemOwnershipPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kVidFieldNumber = 1,
  };
  // bytes name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 vid = 1;
  void clear_vid();
  uint32_t vid() const;
  void set_vid(uint32_t value);
  private:
  uint32_t _internal_vid() const;
  void _internal_set_vid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCItemOwnershipPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    uint32_t vid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCExchangeStartPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCExchangeStartPacket) */ {
 public:
  inline GCExchangeStartPacket() : GCExchangeStartPacket(nullptr) {}
  ~GCExchangeStartPacket() override;
  explicit PROTOBUF_CONSTEXPR GCExchangeStartPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCExchangeStartPacket(const GCExchangeStartPacket& from);
  GCExchangeStartPacket(GCExchangeStartPacket&& from) noexcept
    : GCExchangeStartPacket() {
    *this = ::std::move(from);
  }

  inline GCExchangeStartPacket& operator=(const GCExchangeStartPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCExchangeStartPacket& operator=(GCExchangeStartPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCExchangeStartPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCExchangeStartPacket* internal_default_instance() {
    return reinterpret_cast<const GCExchangeStartPacket*>(
               &_GCExchangeStartPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    146;

  friend void swap(GCExchangeStartPacket& a, GCExchangeStartPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCExchangeStartPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCExchangeStartPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCExchangeStartPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCExchangeStartPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCExchangeStartPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCExchangeStartPacket& from) {
    GCExchangeStartPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCExchangeStartPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCExchangeStartPacket";
  }
  protected:
  explicit GCExchangeStartPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetVidFieldNumber = 1,
  };
  // uint32 target_vid = 1;
  void clear_target_vid();
  uint32_t target_vid() const;
  void set_target_vid(uint32_t value);
  private:
  uint32_t _internal_target_vid() const;
  void _internal_set_target_vid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCExchangeStartPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t target_vid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCExchangeItemAddPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCExchangeItemAddPacket) */ {
 public:
  inline GCExchangeItemAddPacket() : GCExchangeItemAddPacket(nullptr) {}
  ~GCExchangeItemAddPacket() override;
  explicit PROTOBUF_CONSTEXPR GCExchangeItemAddPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCExchangeItemAddPacket(const GCExchangeItemAddPacket& from);
  GCExchangeItemAddPacket(GCExchangeItemAddPacket&& from) noexcept
    : GCExchangeItemAddPacket() {
    *this = ::std::move(from);
  }

  inline GCExchangeItemAddPacket& operator=(const GCExchangeItemAddPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCExchangeItemAddPacket& operator=(GCExchangeItemAddPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCExchangeItemAddPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCExchangeItemAddPacket* internal_default_instance() {
    return reinterpret_cast<const GCExchangeItemAddPacket*>(
               &_GCExchangeItemAddPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    147;

  friend void swap(GCExchangeItemAddPacket& a, GCExchangeItemAddPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCExchangeItemAddPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCExchangeItemAddPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCExchangeItemAddPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCExchangeItemAddPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCExchangeItemAddPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCExchangeItemAddPacket& from) {
    GCExchangeItemAddPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCExchangeItemAddPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCExchangeItemAddPacket";
  }
  protected:
  explicit GCExchangeItemAddPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kDisplayPosFieldNumber = 1,
    kIsMeFieldNumber = 3,
  };
  // .network.TItemData data = 2;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::network::TItemData& data() const;
  PROTOBUF_NODISCARD ::network::TItemData* release_data();
  ::network::TItemData* mutable_data();
  void set_allocated_data(::network::TItemData* data);
  private:
  const ::network::TItemData& _internal_data() const;
  ::network::TItemData* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::network::TItemData* data);
  ::network::TItemData* unsafe_arena_release_data();

  // uint32 display_pos = 1;
  void clear_display_pos();
  uint32_t display_pos() const;
  void set_display_pos(uint32_t value);
  private:
  uint32_t _internal_display_pos() const;
  void _internal_set_display_pos(uint32_t value);
  public:

  // bool is_me = 3;
  void clear_is_me();
  bool is_me() const;
  void set_is_me(bool value);
  private:
  bool _internal_is_me() const;
  void _internal_set_is_me(bool value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCExchangeItemAddPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::network::TItemData* data_;
    uint32_t display_pos_;
    bool is_me_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCExchangeItemDelPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCExchangeItemDelPacket) */ {
 public:
  inline GCExchangeItemDelPacket() : GCExchangeItemDelPacket(nullptr) {}
  ~GCExchangeItemDelPacket() override;
  explicit PROTOBUF_CONSTEXPR GCExchangeItemDelPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCExchangeItemDelPacket(const GCExchangeItemDelPacket& from);
  GCExchangeItemDelPacket(GCExchangeItemDelPacket&& from) noexcept
    : GCExchangeItemDelPacket() {
    *this = ::std::move(from);
  }

  inline GCExchangeItemDelPacket& operator=(const GCExchangeItemDelPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCExchangeItemDelPacket& operator=(GCExchangeItemDelPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCExchangeItemDelPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCExchangeItemDelPacket* internal_default_instance() {
    return reinterpret_cast<const GCExchangeItemDelPacket*>(
               &_GCExchangeItemDelPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    148;

  friend void swap(GCExchangeItemDelPacket& a, GCExchangeItemDelPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCExchangeItemDelPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCExchangeItemDelPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCExchangeItemDelPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCExchangeItemDelPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCExchangeItemDelPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCExchangeItemDelPacket& from) {
    GCExchangeItemDelPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCExchangeItemDelPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCExchangeItemDelPacket";
  }
  protected:
  explicit GCExchangeItemDelPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInventoryPosFieldNumber = 2,
    kDisplayPosFieldNumber = 1,
    kIsMeFieldNumber = 3,
  };
  // .network.TItemPos inventory_pos = 2;
  bool has_inventory_pos() const;
  private:
  bool _internal_has_inventory_pos() const;
  public:
  void clear_inventory_pos();
  const ::network::TItemPos& inventory_pos() const;
  PROTOBUF_NODISCARD ::network::TItemPos* release_inventory_pos();
  ::network::TItemPos* mutable_inventory_pos();
  void set_allocated_inventory_pos(::network::TItemPos* inventory_pos);
  private:
  const ::network::TItemPos& _internal_inventory_pos() const;
  ::network::TItemPos* _internal_mutable_inventory_pos();
  public:
  void unsafe_arena_set_allocated_inventory_pos(
      ::network::TItemPos* inventory_pos);
  ::network::TItemPos* unsafe_arena_release_inventory_pos();

  // uint32 display_pos = 1;
  void clear_display_pos();
  uint32_t display_pos() const;
  void set_display_pos(uint32_t value);
  private:
  uint32_t _internal_display_pos() const;
  void _internal_set_display_pos(uint32_t value);
  public:

  // bool is_me = 3;
  void clear_is_me();
  bool is_me() const;
  void set_is_me(bool value);
  private:
  bool _internal_is_me() const;
  void _internal_set_is_me(bool value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCExchangeItemDelPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::network::TItemPos* inventory_pos_;
    uint32_t display_pos_;
    bool is_me_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCExchangeGoldAddPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCExchangeGoldAddPacket) */ {
 public:
  inline GCExchangeGoldAddPacket() : GCExchangeGoldAddPacket(nullptr) {}
  ~GCExchangeGoldAddPacket() override;
  explicit PROTOBUF_CONSTEXPR GCExchangeGoldAddPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCExchangeGoldAddPacket(const GCExchangeGoldAddPacket& from);
  GCExchangeGoldAddPacket(GCExchangeGoldAddPacket&& from) noexcept
    : GCExchangeGoldAddPacket() {
    *this = ::std::move(from);
  }

  inline GCExchangeGoldAddPacket& operator=(const GCExchangeGoldAddPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCExchangeGoldAddPacket& operator=(GCExchangeGoldAddPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCExchangeGoldAddPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCExchangeGoldAddPacket* internal_default_instance() {
    return reinterpret_cast<const GCExchangeGoldAddPacket*>(
               &_GCExchangeGoldAddPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    149;

  friend void swap(GCExchangeGoldAddPacket& a, GCExchangeGoldAddPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCExchangeGoldAddPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCExchangeGoldAddPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCExchangeGoldAddPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCExchangeGoldAddPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCExchangeGoldAddPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCExchangeGoldAddPacket& from) {
    GCExchangeGoldAddPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCExchangeGoldAddPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCExchangeGoldAddPacket";
  }
  protected:
  explicit GCExchangeGoldAddPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGoldFieldNumber = 1,
    kIsMeFieldNumber = 2,
  };
  // int64 gold = 1;
  void clear_gold();
  int64_t gold() const;
  void set_gold(int64_t value);
  private:
  int64_t _internal_gold() const;
  void _internal_set_gold(int64_t value);
  public:

  // bool is_me = 2;
  void clear_is_me();
  bool is_me() const;
  void set_is_me(bool value);
  private:
  bool _internal_is_me() const;
  void _internal_set_is_me(bool value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCExchangeGoldAddPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t gold_;
    bool is_me_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCExchangeAcceptPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCExchangeAcceptPacket) */ {
 public:
  inline GCExchangeAcceptPacket() : GCExchangeAcceptPacket(nullptr) {}
  ~GCExchangeAcceptPacket() override;
  explicit PROTOBUF_CONSTEXPR GCExchangeAcceptPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCExchangeAcceptPacket(const GCExchangeAcceptPacket& from);
  GCExchangeAcceptPacket(GCExchangeAcceptPacket&& from) noexcept
    : GCExchangeAcceptPacket() {
    *this = ::std::move(from);
  }

  inline GCExchangeAcceptPacket& operator=(const GCExchangeAcceptPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCExchangeAcceptPacket& operator=(GCExchangeAcceptPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCExchangeAcceptPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCExchangeAcceptPacket* internal_default_instance() {
    return reinterpret_cast<const GCExchangeAcceptPacket*>(
               &_GCExchangeAcceptPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    150;

  friend void swap(GCExchangeAcceptPacket& a, GCExchangeAcceptPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCExchangeAcceptPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCExchangeAcceptPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCExchangeAcceptPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCExchangeAcceptPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCExchangeAcceptPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCExchangeAcceptPacket& from) {
    GCExchangeAcceptPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCExchangeAcceptPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCExchangeAcceptPacket";
  }
  protected:
  explicit GCExchangeAcceptPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAcceptFieldNumber = 1,
    kIsMeFieldNumber = 2,
  };
  // bool accept = 1;
  void clear_accept();
  bool accept() const;
  void set_accept(bool value);
  private:
  bool _internal_accept() const;
  void _internal_set_accept(bool value);
  public:

  // bool is_me = 2;
  void clear_is_me();
  bool is_me() const;
  void set_is_me(bool value);
  private:
  bool _internal_is_me() const;
  void _internal_set_is_me(bool value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCExchangeAcceptPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool accept_;
    bool is_me_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCShopStartPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCShopStartPacket) */ {
 public:
  inline GCShopStartPacket() : GCShopStartPacket(nullptr) {}
  ~GCShopStartPacket() override;
  explicit PROTOBUF_CONSTEXPR GCShopStartPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCShopStartPacket(const GCShopStartPacket& from);
  GCShopStartPacket(GCShopStartPacket&& from) noexcept
    : GCShopStartPacket() {
    *this = ::std::move(from);
  }

  inline GCShopStartPacket& operator=(const GCShopStartPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCShopStartPacket& operator=(GCShopStartPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCShopStartPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCShopStartPacket* internal_default_instance() {
    return reinterpret_cast<const GCShopStartPacket*>(
               &_GCShopStartPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    151;

  friend void swap(GCShopStartPacket& a, GCShopStartPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCShopStartPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCShopStartPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCShopStartPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCShopStartPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCShopStartPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCShopStartPacket& from) {
    GCShopStartPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCShopStartPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCShopStartPacket";
  }
  protected:
  explicit GCShopStartPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 2,
    kVidFieldNumber = 1,
  };
  // repeated .network.TShopItemTable items = 2;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::network::TShopItemTable* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TShopItemTable >*
      mutable_items();
  private:
  const ::network::TShopItemTable& _internal_items(int index) const;
  ::network::TShopItemTable* _internal_add_items();
  public:
  const ::network::TShopItemTable& items(int index) const;
  ::network::TShopItemTable* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TShopItemTable >&
      items() const;

  // uint32 vid = 1;
  void clear_vid();
  uint32_t vid() const;
  void set_vid(uint32_t value);
  private:
  uint32_t _internal_vid() const;
  void _internal_set_vid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCShopStartPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TShopItemTable > items_;
    uint32_t vid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCShopExStartPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCShopExStartPacket) */ {
 public:
  inline GCShopExStartPacket() : GCShopExStartPacket(nullptr) {}
  ~GCShopExStartPacket() override;
  explicit PROTOBUF_CONSTEXPR GCShopExStartPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCShopExStartPacket(const GCShopExStartPacket& from);
  GCShopExStartPacket(GCShopExStartPacket&& from) noexcept
    : GCShopExStartPacket() {
    *this = ::std::move(from);
  }

  inline GCShopExStartPacket& operator=(const GCShopExStartPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCShopExStartPacket& operator=(GCShopExStartPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCShopExStartPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCShopExStartPacket* internal_default_instance() {
    return reinterpret_cast<const GCShopExStartPacket*>(
               &_GCShopExStartPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    152;

  friend void swap(GCShopExStartPacket& a, GCShopExStartPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCShopExStartPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCShopExStartPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCShopExStartPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCShopExStartPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCShopExStartPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCShopExStartPacket& from) {
    GCShopExStartPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCShopExStartPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCShopExStartPacket";
  }
  protected:
  explicit GCShopExStartPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTabsFieldNumber = 2,
    kVidFieldNumber = 1,
    kPointsFieldNumber = 3,
    kCurLimitFieldNumber = 4,
    kMaxLimitFieldNumber = 5,
  };
  // repeated .network.TShopExTabData tabs = 2;
  int tabs_size() const;
  private:
  int _internal_tabs_size() const;
  public:
  void clear_tabs();
  ::network::TShopExTabData* mutable_tabs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TShopExTabData >*
      mutable_tabs();
  private:
  const ::network::TShopExTabData& _internal_tabs(int index) const;
  ::network::TShopExTabData* _internal_add_tabs();
  public:
  const ::network::TShopExTabData& tabs(int index) const;
  ::network::TShopExTabData* add_tabs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TShopExTabData >&
      tabs() const;

  // uint32 vid = 1;
  void clear_vid();
  uint32_t vid() const;
  void set_vid(uint32_t value);
  private:
  uint32_t _internal_vid() const;
  void _internal_set_vid(uint32_t value);
  public:

  // uint32 points = 3;
  void clear_points();
  uint32_t points() const;
  void set_points(uint32_t value);
  private:
  uint32_t _internal_points() const;
  void _internal_set_points(uint32_t value);
  public:

  // int32 cur_limit = 4;
  void clear_cur_limit();
  int32_t cur_limit() const;
  void set_cur_limit(int32_t value);
  private:
  int32_t _internal_cur_limit() const;
  void _internal_set_cur_limit(int32_t value);
  public:

  // int32 max_limit = 5;
  void clear_max_limit();
  int32_t max_limit() const;
  void set_max_limit(int32_t value);
  private:
  int32_t _internal_max_limit() const;
  void _internal_set_max_limit(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCShopExStartPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TShopExTabData > tabs_;
    uint32_t vid_;
    uint32_t points_;
    int32_t cur_limit_;
    int32_t max_limit_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCShopUpdateItemPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCShopUpdateItemPacket) */ {
 public:
  inline GCShopUpdateItemPacket() : GCShopUpdateItemPacket(nullptr) {}
  ~GCShopUpdateItemPacket() override;
  explicit PROTOBUF_CONSTEXPR GCShopUpdateItemPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCShopUpdateItemPacket(const GCShopUpdateItemPacket& from);
  GCShopUpdateItemPacket(GCShopUpdateItemPacket&& from) noexcept
    : GCShopUpdateItemPacket() {
    *this = ::std::move(from);
  }

  inline GCShopUpdateItemPacket& operator=(const GCShopUpdateItemPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCShopUpdateItemPacket& operator=(GCShopUpdateItemPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCShopUpdateItemPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCShopUpdateItemPacket* internal_default_instance() {
    return reinterpret_cast<const GCShopUpdateItemPacket*>(
               &_GCShopUpdateItemPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    153;

  friend void swap(GCShopUpdateItemPacket& a, GCShopUpdateItemPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCShopUpdateItemPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCShopUpdateItemPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCShopUpdateItemPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCShopUpdateItemPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCShopUpdateItemPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCShopUpdateItemPacket& from) {
    GCShopUpdateItemPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCShopUpdateItemPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCShopUpdateItemPacket";
  }
  protected:
  explicit GCShopUpdateItemPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemFieldNumber = 1,
  };
  // .network.TShopItemTable item = 1;
  bool has_item() const;
  private:
  bool _internal_has_item() const;
  public:
  void clear_item();
  const ::network::TShopItemTable& item() const;
  PROTOBUF_NODISCARD ::network::TShopItemTable* release_item();
  ::network::TShopItemTable* mutable_item();
  void set_allocated_item(::network::TShopItemTable* item);
  private:
  const ::network::TShopItemTable& _internal_item() const;
  ::network::TShopItemTable* _internal_mutable_item();
  public:
  void unsafe_arena_set_allocated_item(
      ::network::TShopItemTable* item);
  ::network::TShopItemTable* unsafe_arena_release_item();

  // @@protoc_insertion_point(class_scope:network.GCShopUpdateItemPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::network::TShopItemTable* item_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCShopSignPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCShopSignPacket) */ {
 public:
  inline GCShopSignPacket() : GCShopSignPacket(nullptr) {}
  ~GCShopSignPacket() override;
  explicit PROTOBUF_CONSTEXPR GCShopSignPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCShopSignPacket(const GCShopSignPacket& from);
  GCShopSignPacket(GCShopSignPacket&& from) noexcept
    : GCShopSignPacket() {
    *this = ::std::move(from);
  }

  inline GCShopSignPacket& operator=(const GCShopSignPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCShopSignPacket& operator=(GCShopSignPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCShopSignPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCShopSignPacket* internal_default_instance() {
    return reinterpret_cast<const GCShopSignPacket*>(
               &_GCShopSignPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    154;

  friend void swap(GCShopSignPacket& a, GCShopSignPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCShopSignPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCShopSignPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCShopSignPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCShopSignPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCShopSignPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCShopSignPacket& from) {
    GCShopSignPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCShopSignPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCShopSignPacket";
  }
  protected:
  explicit GCShopSignPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignFieldNumber = 2,
    kVidFieldNumber = 1,
    kRedFieldNumber = 3,
    kGreenFieldNumber = 4,
    kBlueFieldNumber = 5,
    kStyleFieldNumber = 6,
  };
  // bytes sign = 2;
  void clear_sign();
  const std::string& sign() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sign(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sign();
  PROTOBUF_NODISCARD std::string* release_sign();
  void set_allocated_sign(std::string* sign);
  private:
  const std::string& _internal_sign() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sign(const std::string& value);
  std::string* _internal_mutable_sign();
  public:

  // uint32 vid = 1;
  void clear_vid();
  uint32_t vid() const;
  void set_vid(uint32_t value);
  private:
  uint32_t _internal_vid() const;
  void _internal_set_vid(uint32_t value);
  public:

  // float red = 3;
  void clear_red();
  float red() const;
  void set_red(float value);
  private:
  float _internal_red() const;
  void _internal_set_red(float value);
  public:

  // float green = 4;
  void clear_green();
  float green() const;
  void set_green(float value);
  private:
  float _internal_green() const;
  void _internal_set_green(float value);
  public:

  // float blue = 5;
  void clear_blue();
  float blue() const;
  void set_blue(float value);
  private:
  float _internal_blue() const;
  void _internal_set_blue(float value);
  public:

  // uint32 style = 6;
  void clear_style();
  uint32_t style() const;
  void set_style(uint32_t value);
  private:
  uint32_t _internal_style() const;
  void _internal_set_style(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCShopSignPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sign_;
    uint32_t vid_;
    float red_;
    float green_;
    float blue_;
    uint32_t style_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCQuestInfoPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCQuestInfoPacket) */ {
 public:
  inline GCQuestInfoPacket() : GCQuestInfoPacket(nullptr) {}
  ~GCQuestInfoPacket() override;
  explicit PROTOBUF_CONSTEXPR GCQuestInfoPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCQuestInfoPacket(const GCQuestInfoPacket& from);
  GCQuestInfoPacket(GCQuestInfoPacket&& from) noexcept
    : GCQuestInfoPacket() {
    *this = ::std::move(from);
  }

  inline GCQuestInfoPacket& operator=(const GCQuestInfoPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCQuestInfoPacket& operator=(GCQuestInfoPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCQuestInfoPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCQuestInfoPacket* internal_default_instance() {
    return reinterpret_cast<const GCQuestInfoPacket*>(
               &_GCQuestInfoPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    155;

  friend void swap(GCQuestInfoPacket& a, GCQuestInfoPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCQuestInfoPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCQuestInfoPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCQuestInfoPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCQuestInfoPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCQuestInfoPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCQuestInfoPacket& from) {
    GCQuestInfoPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCQuestInfoPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCQuestInfoPacket";
  }
  protected:
  explicit GCQuestInfoPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTitleFieldNumber = 4,
    kClockNameFieldNumber = 6,
    kCounterNameFieldNumber = 8,
    kIconFileNameFieldNumber = 10,
    kIndexFieldNumber = 1,
    kFlagFieldNumber = 2,
    kIsBeginFieldNumber = 3,
    kCatIdFieldNumber = 5,
    kClockValueFieldNumber = 7,
    kCounterValueFieldNumber = 9,
  };
  // bytes title = 4;
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // bytes clock_name = 6;
  void clear_clock_name();
  const std::string& clock_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_clock_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_clock_name();
  PROTOBUF_NODISCARD std::string* release_clock_name();
  void set_allocated_clock_name(std::string* clock_name);
  private:
  const std::string& _internal_clock_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_clock_name(const std::string& value);
  std::string* _internal_mutable_clock_name();
  public:

  // bytes counter_name = 8;
  void clear_counter_name();
  const std::string& counter_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_counter_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_counter_name();
  PROTOBUF_NODISCARD std::string* release_counter_name();
  void set_allocated_counter_name(std::string* counter_name);
  private:
  const std::string& _internal_counter_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_counter_name(const std::string& value);
  std::string* _internal_mutable_counter_name();
  public:

  // bytes icon_file_name = 10;
  void clear_icon_file_name();
  const std::string& icon_file_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_icon_file_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_icon_file_name();
  PROTOBUF_NODISCARD std::string* release_icon_file_name();
  void set_allocated_icon_file_name(std::string* icon_file_name);
  private:
  const std::string& _internal_icon_file_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_icon_file_name(const std::string& value);
  std::string* _internal_mutable_icon_file_name();
  public:

  // uint32 index = 1;
  void clear_index();
  uint32_t index() const;
  void set_index(uint32_t value);
  private:
  uint32_t _internal_index() const;
  void _internal_set_index(uint32_t value);
  public:

  // uint32 flag = 2;
  void clear_flag();
  uint32_t flag() const;
  void set_flag(uint32_t value);
  private:
  uint32_t _internal_flag() const;
  void _internal_set_flag(uint32_t value);
  public:

  // bool is_begin = 3;
  void clear_is_begin();
  bool is_begin() const;
  void set_is_begin(bool value);
  private:
  bool _internal_is_begin() const;
  void _internal_set_is_begin(bool value);
  public:

  // uint32 cat_id = 5;
  void clear_cat_id();
  uint32_t cat_id() const;
  void set_cat_id(uint32_t value);
  private:
  uint32_t _internal_cat_id() const;
  void _internal_set_cat_id(uint32_t value);
  public:

  // int32 clock_value = 7;
  void clear_clock_value();
  int32_t clock_value() const;
  void set_clock_value(int32_t value);
  private:
  int32_t _internal_clock_value() const;
  void _internal_set_clock_value(int32_t value);
  public:

  // int32 counter_value = 9;
  void clear_counter_value();
  int32_t counter_value() const;
  void set_counter_value(int32_t value);
  private:
  int32_t _internal_counter_value() const;
  void _internal_set_counter_value(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCQuestInfoPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clock_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr counter_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr icon_file_name_;
    uint32_t index_;
    uint32_t flag_;
    bool is_begin_;
    uint32_t cat_id_;
    int32_t clock_value_;
    int32_t counter_value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCScriptPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCScriptPacket) */ {
 public:
  inline GCScriptPacket() : GCScriptPacket(nullptr) {}
  ~GCScriptPacket() override;
  explicit PROTOBUF_CONSTEXPR GCScriptPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCScriptPacket(const GCScriptPacket& from);
  GCScriptPacket(GCScriptPacket&& from) noexcept
    : GCScriptPacket() {
    *this = ::std::move(from);
  }

  inline GCScriptPacket& operator=(const GCScriptPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCScriptPacket& operator=(GCScriptPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCScriptPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCScriptPacket* internal_default_instance() {
    return reinterpret_cast<const GCScriptPacket*>(
               &_GCScriptPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    156;

  friend void swap(GCScriptPacket& a, GCScriptPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCScriptPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCScriptPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCScriptPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCScriptPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCScriptPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCScriptPacket& from) {
    GCScriptPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCScriptPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCScriptPacket";
  }
  protected:
  explicit GCScriptPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScriptFieldNumber = 2,
    kSkinFieldNumber = 1,
  };
  // bytes script = 2;
  void clear_script();
  const std::string& script() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_script(ArgT0&& arg0, ArgT... args);
  std::string* mutable_script();
  PROTOBUF_NODISCARD std::string* release_script();
  void set_allocated_script(std::string* script);
  private:
  const std::string& _internal_script() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_script(const std::string& value);
  std::string* _internal_mutable_script();
  public:

  // uint32 skin = 1;
  void clear_skin();
  uint32_t skin() const;
  void set_skin(uint32_t value);
  private:
  uint32_t _internal_skin() const;
  void _internal_set_skin(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCScriptPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr script_;
    uint32_t skin_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCQuestConfirmPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCQuestConfirmPacket) */ {
 public:
  inline GCQuestConfirmPacket() : GCQuestConfirmPacket(nullptr) {}
  ~GCQuestConfirmPacket() override;
  explicit PROTOBUF_CONSTEXPR GCQuestConfirmPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCQuestConfirmPacket(const GCQuestConfirmPacket& from);
  GCQuestConfirmPacket(GCQuestConfirmPacket&& from) noexcept
    : GCQuestConfirmPacket() {
    *this = ::std::move(from);
  }

  inline GCQuestConfirmPacket& operator=(const GCQuestConfirmPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCQuestConfirmPacket& operator=(GCQuestConfirmPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCQuestConfirmPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCQuestConfirmPacket* internal_default_instance() {
    return reinterpret_cast<const GCQuestConfirmPacket*>(
               &_GCQuestConfirmPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    157;

  friend void swap(GCQuestConfirmPacket& a, GCQuestConfirmPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCQuestConfirmPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCQuestConfirmPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCQuestConfirmPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCQuestConfirmPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCQuestConfirmPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCQuestConfirmPacket& from) {
    GCQuestConfirmPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCQuestConfirmPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCQuestConfirmPacket";
  }
  protected:
  explicit GCQuestConfirmPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
    kTimeoutFieldNumber = 2,
    kRequestPidFieldNumber = 3,
  };
  // bytes message = 1;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // int32 timeout = 2;
  void clear_timeout();
  int32_t timeout() const;
  void set_timeout(int32_t value);
  private:
  int32_t _internal_timeout() const;
  void _internal_set_timeout(int32_t value);
  public:

  // uint32 request_pid = 3;
  void clear_request_pid();
  uint32_t request_pid() const;
  void set_request_pid(uint32_t value);
  private:
  uint32_t _internal_request_pid() const;
  void _internal_set_request_pid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCQuestConfirmPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    int32_t timeout_;
    uint32_t request_pid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCQuestCooldownPacket_Cooldown final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCQuestCooldownPacket.Cooldown) */ {
 public:
  inline GCQuestCooldownPacket_Cooldown() : GCQuestCooldownPacket_Cooldown(nullptr) {}
  ~GCQuestCooldownPacket_Cooldown() override;
  explicit PROTOBUF_CONSTEXPR GCQuestCooldownPacket_Cooldown(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCQuestCooldownPacket_Cooldown(const GCQuestCooldownPacket_Cooldown& from);
  GCQuestCooldownPacket_Cooldown(GCQuestCooldownPacket_Cooldown&& from) noexcept
    : GCQuestCooldownPacket_Cooldown() {
    *this = ::std::move(from);
  }

  inline GCQuestCooldownPacket_Cooldown& operator=(const GCQuestCooldownPacket_Cooldown& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCQuestCooldownPacket_Cooldown& operator=(GCQuestCooldownPacket_Cooldown&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCQuestCooldownPacket_Cooldown& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCQuestCooldownPacket_Cooldown* internal_default_instance() {
    return reinterpret_cast<const GCQuestCooldownPacket_Cooldown*>(
               &_GCQuestCooldownPacket_Cooldown_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    158;

  friend void swap(GCQuestCooldownPacket_Cooldown& a, GCQuestCooldownPacket_Cooldown& b) {
    a.Swap(&b);
  }
  inline void Swap(GCQuestCooldownPacket_Cooldown* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCQuestCooldownPacket_Cooldown* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCQuestCooldownPacket_Cooldown* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCQuestCooldownPacket_Cooldown>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCQuestCooldownPacket_Cooldown& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCQuestCooldownPacket_Cooldown& from) {
    GCQuestCooldownPacket_Cooldown::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCQuestCooldownPacket_Cooldown* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCQuestCooldownPacket.Cooldown";
  }
  protected:
  explicit GCQuestCooldownPacket_Cooldown(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 5,
    kCooldownFieldNumber = 1,
    kDoneFieldNumber = 2,
    kTimeFieldNumber = 3,
    kDamageFieldNumber = 4,
  };
  // bytes name = 5;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 cooldown = 1;
  void clear_cooldown();
  int32_t cooldown() const;
  void set_cooldown(int32_t value);
  private:
  int32_t _internal_cooldown() const;
  void _internal_set_cooldown(int32_t value);
  public:

  // int32 done = 2;
  void clear_done();
  int32_t done() const;
  void set_done(int32_t value);
  private:
  int32_t _internal_done() const;
  void _internal_set_done(int32_t value);
  public:

  // int32 time = 3;
  void clear_time();
  int32_t time() const;
  void set_time(int32_t value);
  private:
  int32_t _internal_time() const;
  void _internal_set_time(int32_t value);
  public:

  // int32 damage = 4;
  void clear_damage();
  int32_t damage() const;
  void set_damage(int32_t value);
  private:
  int32_t _internal_damage() const;
  void _internal_set_damage(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCQuestCooldownPacket.Cooldown)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int32_t cooldown_;
    int32_t done_;
    int32_t time_;
    int32_t damage_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCQuestCooldownPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCQuestCooldownPacket) */ {
 public:
  inline GCQuestCooldownPacket() : GCQuestCooldownPacket(nullptr) {}
  ~GCQuestCooldownPacket() override;
  explicit PROTOBUF_CONSTEXPR GCQuestCooldownPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCQuestCooldownPacket(const GCQuestCooldownPacket& from);
  GCQuestCooldownPacket(GCQuestCooldownPacket&& from) noexcept
    : GCQuestCooldownPacket() {
    *this = ::std::move(from);
  }

  inline GCQuestCooldownPacket& operator=(const GCQuestCooldownPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCQuestCooldownPacket& operator=(GCQuestCooldownPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCQuestCooldownPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCQuestCooldownPacket* internal_default_instance() {
    return reinterpret_cast<const GCQuestCooldownPacket*>(
               &_GCQuestCooldownPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    159;

  friend void swap(GCQuestCooldownPacket& a, GCQuestCooldownPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCQuestCooldownPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCQuestCooldownPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCQuestCooldownPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCQuestCooldownPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCQuestCooldownPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCQuestCooldownPacket& from) {
    GCQuestCooldownPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCQuestCooldownPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCQuestCooldownPacket";
  }
  protected:
  explicit GCQuestCooldownPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GCQuestCooldownPacket_Cooldown Cooldown;

  // accessors -------------------------------------------------------

  enum : int {
    kDatasFieldNumber = 1,
  };
  // repeated .network.GCQuestCooldownPacket.Cooldown datas = 1;
  int datas_size() const;
  private:
  int _internal_datas_size() const;
  public:
  void clear_datas();
  ::network::GCQuestCooldownPacket_Cooldown* mutable_datas(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::GCQuestCooldownPacket_Cooldown >*
      mutable_datas();
  private:
  const ::network::GCQuestCooldownPacket_Cooldown& _internal_datas(int index) const;
  ::network::GCQuestCooldownPacket_Cooldown* _internal_add_datas();
  public:
  const ::network::GCQuestCooldownPacket_Cooldown& datas(int index) const;
  ::network::GCQuestCooldownPacket_Cooldown* add_datas();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::GCQuestCooldownPacket_Cooldown >&
      datas() const;

  // @@protoc_insertion_point(class_scope:network.GCQuestCooldownPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::GCQuestCooldownPacket_Cooldown > datas_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCPetSummonPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCPetSummonPacket) */ {
 public:
  inline GCPetSummonPacket() : GCPetSummonPacket(nullptr) {}
  ~GCPetSummonPacket() override;
  explicit PROTOBUF_CONSTEXPR GCPetSummonPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCPetSummonPacket(const GCPetSummonPacket& from);
  GCPetSummonPacket(GCPetSummonPacket&& from) noexcept
    : GCPetSummonPacket() {
    *this = ::std::move(from);
  }

  inline GCPetSummonPacket& operator=(const GCPetSummonPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCPetSummonPacket& operator=(GCPetSummonPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCPetSummonPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCPetSummonPacket* internal_default_instance() {
    return reinterpret_cast<const GCPetSummonPacket*>(
               &_GCPetSummonPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    160;

  friend void swap(GCPetSummonPacket& a, GCPetSummonPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCPetSummonPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCPetSummonPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCPetSummonPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCPetSummonPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCPetSummonPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCPetSummonPacket& from) {
    GCPetSummonPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCPetSummonPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCPetSummonPacket";
  }
  protected:
  explicit GCPetSummonPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPetFieldNumber = 3,
    kVidFieldNumber = 1,
    kItemVnumFieldNumber = 2,
    kNextExpFieldNumber = 4,
  };
  // .network.TPetAdvancedTable pet = 3;
  bool has_pet() const;
  private:
  bool _internal_has_pet() const;
  public:
  void clear_pet();
  const ::network::TPetAdvancedTable& pet() const;
  PROTOBUF_NODISCARD ::network::TPetAdvancedTable* release_pet();
  ::network::TPetAdvancedTable* mutable_pet();
  void set_allocated_pet(::network::TPetAdvancedTable* pet);
  private:
  const ::network::TPetAdvancedTable& _internal_pet() const;
  ::network::TPetAdvancedTable* _internal_mutable_pet();
  public:
  void unsafe_arena_set_allocated_pet(
      ::network::TPetAdvancedTable* pet);
  ::network::TPetAdvancedTable* unsafe_arena_release_pet();

  // uint32 vid = 1;
  void clear_vid();
  uint32_t vid() const;
  void set_vid(uint32_t value);
  private:
  uint32_t _internal_vid() const;
  void _internal_set_vid(uint32_t value);
  public:

  // uint32 item_vnum = 2;
  void clear_item_vnum();
  uint32_t item_vnum() const;
  void set_item_vnum(uint32_t value);
  private:
  uint32_t _internal_item_vnum() const;
  void _internal_set_item_vnum(uint32_t value);
  public:

  // int64 next_exp = 4;
  void clear_next_exp();
  int64_t next_exp() const;
  void set_next_exp(int64_t value);
  private:
  int64_t _internal_next_exp() const;
  void _internal_set_next_exp(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCPetSummonPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::network::TPetAdvancedTable* pet_;
    uint32_t vid_;
    uint32_t item_vnum_;
    int64_t next_exp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCPetUpdateExpPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCPetUpdateExpPacket) */ {
 public:
  inline GCPetUpdateExpPacket() : GCPetUpdateExpPacket(nullptr) {}
  ~GCPetUpdateExpPacket() override;
  explicit PROTOBUF_CONSTEXPR GCPetUpdateExpPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCPetUpdateExpPacket(const GCPetUpdateExpPacket& from);
  GCPetUpdateExpPacket(GCPetUpdateExpPacket&& from) noexcept
    : GCPetUpdateExpPacket() {
    *this = ::std::move(from);
  }

  inline GCPetUpdateExpPacket& operator=(const GCPetUpdateExpPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCPetUpdateExpPacket& operator=(GCPetUpdateExpPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCPetUpdateExpPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCPetUpdateExpPacket* internal_default_instance() {
    return reinterpret_cast<const GCPetUpdateExpPacket*>(
               &_GCPetUpdateExpPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    161;

  friend void swap(GCPetUpdateExpPacket& a, GCPetUpdateExpPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCPetUpdateExpPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCPetUpdateExpPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCPetUpdateExpPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCPetUpdateExpPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCPetUpdateExpPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCPetUpdateExpPacket& from) {
    GCPetUpdateExpPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCPetUpdateExpPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCPetUpdateExpPacket";
  }
  protected:
  explicit GCPetUpdateExpPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExpFieldNumber = 1,
  };
  // int64 exp = 1;
  void clear_exp();
  int64_t exp() const;
  void set_exp(int64_t value);
  private:
  int64_t _internal_exp() const;
  void _internal_set_exp(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCPetUpdateExpPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t exp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCPetUpdateLevelPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCPetUpdateLevelPacket) */ {
 public:
  inline GCPetUpdateLevelPacket() : GCPetUpdateLevelPacket(nullptr) {}
  ~GCPetUpdateLevelPacket() override;
  explicit PROTOBUF_CONSTEXPR GCPetUpdateLevelPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCPetUpdateLevelPacket(const GCPetUpdateLevelPacket& from);
  GCPetUpdateLevelPacket(GCPetUpdateLevelPacket&& from) noexcept
    : GCPetUpdateLevelPacket() {
    *this = ::std::move(from);
  }

  inline GCPetUpdateLevelPacket& operator=(const GCPetUpdateLevelPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCPetUpdateLevelPacket& operator=(GCPetUpdateLevelPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCPetUpdateLevelPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCPetUpdateLevelPacket* internal_default_instance() {
    return reinterpret_cast<const GCPetUpdateLevelPacket*>(
               &_GCPetUpdateLevelPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    162;

  friend void swap(GCPetUpdateLevelPacket& a, GCPetUpdateLevelPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCPetUpdateLevelPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCPetUpdateLevelPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCPetUpdateLevelPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCPetUpdateLevelPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCPetUpdateLevelPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCPetUpdateLevelPacket& from) {
    GCPetUpdateLevelPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCPetUpdateLevelPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCPetUpdateLevelPacket";
  }
  protected:
  explicit GCPetUpdateLevelPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNextExpFieldNumber = 2,
    kLevelFieldNumber = 1,
  };
  // int64 next_exp = 2;
  void clear_next_exp();
  int64_t next_exp() const;
  void set_next_exp(int64_t value);
  private:
  int64_t _internal_next_exp() const;
  void _internal_set_next_exp(int64_t value);
  public:

  // uint32 level = 1;
  void clear_level();
  uint32_t level() const;
  void set_level(uint32_t value);
  private:
  uint32_t _internal_level() const;
  void _internal_set_level(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCPetUpdateLevelPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t next_exp_;
    uint32_t level_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCPetUpdateSkillPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCPetUpdateSkillPacket) */ {
 public:
  inline GCPetUpdateSkillPacket() : GCPetUpdateSkillPacket(nullptr) {}
  ~GCPetUpdateSkillPacket() override;
  explicit PROTOBUF_CONSTEXPR GCPetUpdateSkillPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCPetUpdateSkillPacket(const GCPetUpdateSkillPacket& from);
  GCPetUpdateSkillPacket(GCPetUpdateSkillPacket&& from) noexcept
    : GCPetUpdateSkillPacket() {
    *this = ::std::move(from);
  }

  inline GCPetUpdateSkillPacket& operator=(const GCPetUpdateSkillPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCPetUpdateSkillPacket& operator=(GCPetUpdateSkillPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCPetUpdateSkillPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCPetUpdateSkillPacket* internal_default_instance() {
    return reinterpret_cast<const GCPetUpdateSkillPacket*>(
               &_GCPetUpdateSkillPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    163;

  friend void swap(GCPetUpdateSkillPacket& a, GCPetUpdateSkillPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCPetUpdateSkillPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCPetUpdateSkillPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCPetUpdateSkillPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCPetUpdateSkillPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCPetUpdateSkillPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCPetUpdateSkillPacket& from) {
    GCPetUpdateSkillPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCPetUpdateSkillPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCPetUpdateSkillPacket";
  }
  protected:
  explicit GCPetUpdateSkillPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSkillFieldNumber = 2,
    kIndexFieldNumber = 1,
  };
  // .network.TPetAdvancedSkillData skill = 2;
  bool has_skill() const;
  private:
  bool _internal_has_skill() const;
  public:
  void clear_skill();
  const ::network::TPetAdvancedSkillData& skill() const;
  PROTOBUF_NODISCARD ::network::TPetAdvancedSkillData* release_skill();
  ::network::TPetAdvancedSkillData* mutable_skill();
  void set_allocated_skill(::network::TPetAdvancedSkillData* skill);
  private:
  const ::network::TPetAdvancedSkillData& _internal_skill() const;
  ::network::TPetAdvancedSkillData* _internal_mutable_skill();
  public:
  void unsafe_arena_set_allocated_skill(
      ::network::TPetAdvancedSkillData* skill);
  ::network::TPetAdvancedSkillData* unsafe_arena_release_skill();

  // uint32 index = 1;
  void clear_index();
  uint32_t index() const;
  void set_index(uint32_t value);
  private:
  uint32_t _internal_index() const;
  void _internal_set_index(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCPetUpdateSkillPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::network::TPetAdvancedSkillData* skill_;
    uint32_t index_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCPetUpdateAttrPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCPetUpdateAttrPacket) */ {
 public:
  inline GCPetUpdateAttrPacket() : GCPetUpdateAttrPacket(nullptr) {}
  ~GCPetUpdateAttrPacket() override;
  explicit PROTOBUF_CONSTEXPR GCPetUpdateAttrPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCPetUpdateAttrPacket(const GCPetUpdateAttrPacket& from);
  GCPetUpdateAttrPacket(GCPetUpdateAttrPacket&& from) noexcept
    : GCPetUpdateAttrPacket() {
    *this = ::std::move(from);
  }

  inline GCPetUpdateAttrPacket& operator=(const GCPetUpdateAttrPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCPetUpdateAttrPacket& operator=(GCPetUpdateAttrPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCPetUpdateAttrPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCPetUpdateAttrPacket* internal_default_instance() {
    return reinterpret_cast<const GCPetUpdateAttrPacket*>(
               &_GCPetUpdateAttrPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    164;

  friend void swap(GCPetUpdateAttrPacket& a, GCPetUpdateAttrPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCPetUpdateAttrPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCPetUpdateAttrPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCPetUpdateAttrPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCPetUpdateAttrPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCPetUpdateAttrPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCPetUpdateAttrPacket& from) {
    GCPetUpdateAttrPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCPetUpdateAttrPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCPetUpdateAttrPacket";
  }
  protected:
  explicit GCPetUpdateAttrPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexFieldNumber = 1,
    kTypeFieldNumber = 2,
    kLevelFieldNumber = 3,
    kValueFieldNumber = 4,
    kCanUpgradeFieldNumber = 5,
  };
  // uint32 index = 1;
  void clear_index();
  uint32_t index() const;
  void set_index(uint32_t value);
  private:
  uint32_t _internal_index() const;
  void _internal_set_index(uint32_t value);
  public:

  // uint32 type = 2;
  void clear_type();
  uint32_t type() const;
  void set_type(uint32_t value);
  private:
  uint32_t _internal_type() const;
  void _internal_set_type(uint32_t value);
  public:

  // uint32 level = 3;
  void clear_level();
  uint32_t level() const;
  void set_level(uint32_t value);
  private:
  uint32_t _internal_level() const;
  void _internal_set_level(uint32_t value);
  public:

  // int32 value = 4;
  void clear_value();
  int32_t value() const;
  void set_value(int32_t value);
  private:
  int32_t _internal_value() const;
  void _internal_set_value(int32_t value);
  public:

  // bool can_upgrade = 5;
  void clear_can_upgrade();
  bool can_upgrade() const;
  void set_can_upgrade(bool value);
  private:
  bool _internal_can_upgrade() const;
  void _internal_set_can_upgrade(bool value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCPetUpdateAttrPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t index_;
    uint32_t type_;
    uint32_t level_;
    int32_t value_;
    bool can_upgrade_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCPetUpdateSkillpowerPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCPetUpdateSkillpowerPacket) */ {
 public:
  inline GCPetUpdateSkillpowerPacket() : GCPetUpdateSkillpowerPacket(nullptr) {}
  ~GCPetUpdateSkillpowerPacket() override;
  explicit PROTOBUF_CONSTEXPR GCPetUpdateSkillpowerPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCPetUpdateSkillpowerPacket(const GCPetUpdateSkillpowerPacket& from);
  GCPetUpdateSkillpowerPacket(GCPetUpdateSkillpowerPacket&& from) noexcept
    : GCPetUpdateSkillpowerPacket() {
    *this = ::std::move(from);
  }

  inline GCPetUpdateSkillpowerPacket& operator=(const GCPetUpdateSkillpowerPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCPetUpdateSkillpowerPacket& operator=(GCPetUpdateSkillpowerPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCPetUpdateSkillpowerPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCPetUpdateSkillpowerPacket* internal_default_instance() {
    return reinterpret_cast<const GCPetUpdateSkillpowerPacket*>(
               &_GCPetUpdateSkillpowerPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    165;

  friend void swap(GCPetUpdateSkillpowerPacket& a, GCPetUpdateSkillpowerPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCPetUpdateSkillpowerPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCPetUpdateSkillpowerPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCPetUpdateSkillpowerPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCPetUpdateSkillpowerPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCPetUpdateSkillpowerPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCPetUpdateSkillpowerPacket& from) {
    GCPetUpdateSkillpowerPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCPetUpdateSkillpowerPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCPetUpdateSkillpowerPacket";
  }
  protected:
  explicit GCPetUpdateSkillpowerPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPowerFieldNumber = 1,
  };
  // uint32 power = 1;
  void clear_power();
  uint32_t power() const;
  void set_power(uint32_t value);
  private:
  uint32_t _internal_power() const;
  void _internal_set_power(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCPetUpdateSkillpowerPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t power_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCPetEvolutionInfoPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCPetEvolutionInfoPacket) */ {
 public:
  inline GCPetEvolutionInfoPacket() : GCPetEvolutionInfoPacket(nullptr) {}
  ~GCPetEvolutionInfoPacket() override;
  explicit PROTOBUF_CONSTEXPR GCPetEvolutionInfoPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCPetEvolutionInfoPacket(const GCPetEvolutionInfoPacket& from);
  GCPetEvolutionInfoPacket(GCPetEvolutionInfoPacket&& from) noexcept
    : GCPetEvolutionInfoPacket() {
    *this = ::std::move(from);
  }

  inline GCPetEvolutionInfoPacket& operator=(const GCPetEvolutionInfoPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCPetEvolutionInfoPacket& operator=(GCPetEvolutionInfoPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCPetEvolutionInfoPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCPetEvolutionInfoPacket* internal_default_instance() {
    return reinterpret_cast<const GCPetEvolutionInfoPacket*>(
               &_GCPetEvolutionInfoPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    166;

  friend void swap(GCPetEvolutionInfoPacket& a, GCPetEvolutionInfoPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCPetEvolutionInfoPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCPetEvolutionInfoPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCPetEvolutionInfoPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCPetEvolutionInfoPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCPetEvolutionInfoPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCPetEvolutionInfoPacket& from) {
    GCPetEvolutionInfoPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCPetEvolutionInfoPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCPetEvolutionInfoPacket";
  }
  protected:
  explicit GCPetEvolutionInfoPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaterialsFieldNumber = 3,
    kCostFieldNumber = 1,
    kProbFieldNumber = 2,
  };
  // repeated .network.TRefineMaterial materials = 3;
  int materials_size() const;
  private:
  int _internal_materials_size() const;
  public:
  void clear_materials();
  ::network::TRefineMaterial* mutable_materials(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TRefineMaterial >*
      mutable_materials();
  private:
  const ::network::TRefineMaterial& _internal_materials(int index) const;
  ::network::TRefineMaterial* _internal_add_materials();
  public:
  const ::network::TRefineMaterial& materials(int index) const;
  ::network::TRefineMaterial* add_materials();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TRefineMaterial >&
      materials() const;

  // int64 cost = 1;
  void clear_cost();
  int64_t cost() const;
  void set_cost(int64_t value);
  private:
  int64_t _internal_cost() const;
  void _internal_set_cost(int64_t value);
  public:

  // uint32 prob = 2;
  void clear_prob();
  uint32_t prob() const;
  void set_prob(uint32_t value);
  private:
  uint32_t _internal_prob() const;
  void _internal_set_prob(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCPetEvolutionInfoPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TRefineMaterial > materials_;
    int64_t cost_;
    uint32_t prob_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCPetEvolveResultPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCPetEvolveResultPacket) */ {
 public:
  inline GCPetEvolveResultPacket() : GCPetEvolveResultPacket(nullptr) {}
  ~GCPetEvolveResultPacket() override;
  explicit PROTOBUF_CONSTEXPR GCPetEvolveResultPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCPetEvolveResultPacket(const GCPetEvolveResultPacket& from);
  GCPetEvolveResultPacket(GCPetEvolveResultPacket&& from) noexcept
    : GCPetEvolveResultPacket() {
    *this = ::std::move(from);
  }

  inline GCPetEvolveResultPacket& operator=(const GCPetEvolveResultPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCPetEvolveResultPacket& operator=(GCPetEvolveResultPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCPetEvolveResultPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCPetEvolveResultPacket* internal_default_instance() {
    return reinterpret_cast<const GCPetEvolveResultPacket*>(
               &_GCPetEvolveResultPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    167;

  friend void swap(GCPetEvolveResultPacket& a, GCPetEvolveResultPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCPetEvolveResultPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCPetEvolveResultPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCPetEvolveResultPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCPetEvolveResultPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCPetEvolveResultPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCPetEvolveResultPacket& from) {
    GCPetEvolveResultPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCPetEvolveResultPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCPetEvolveResultPacket";
  }
  protected:
  explicit GCPetEvolveResultPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // bool result = 1;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCPetEvolveResultPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCPetAttrRefineInfoPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCPetAttrRefineInfoPacket) */ {
 public:
  inline GCPetAttrRefineInfoPacket() : GCPetAttrRefineInfoPacket(nullptr) {}
  ~GCPetAttrRefineInfoPacket() override;
  explicit PROTOBUF_CONSTEXPR GCPetAttrRefineInfoPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCPetAttrRefineInfoPacket(const GCPetAttrRefineInfoPacket& from);
  GCPetAttrRefineInfoPacket(GCPetAttrRefineInfoPacket&& from) noexcept
    : GCPetAttrRefineInfoPacket() {
    *this = ::std::move(from);
  }

  inline GCPetAttrRefineInfoPacket& operator=(const GCPetAttrRefineInfoPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCPetAttrRefineInfoPacket& operator=(GCPetAttrRefineInfoPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCPetAttrRefineInfoPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCPetAttrRefineInfoPacket* internal_default_instance() {
    return reinterpret_cast<const GCPetAttrRefineInfoPacket*>(
               &_GCPetAttrRefineInfoPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    168;

  friend void swap(GCPetAttrRefineInfoPacket& a, GCPetAttrRefineInfoPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCPetAttrRefineInfoPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCPetAttrRefineInfoPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCPetAttrRefineInfoPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCPetAttrRefineInfoPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCPetAttrRefineInfoPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCPetAttrRefineInfoPacket& from) {
    GCPetAttrRefineInfoPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCPetAttrRefineInfoPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCPetAttrRefineInfoPacket";
  }
  protected:
  explicit GCPetAttrRefineInfoPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaterialsFieldNumber = 3,
    kCostFieldNumber = 2,
    kIndexFieldNumber = 1,
  };
  // repeated .network.TRefineMaterial materials = 3;
  int materials_size() const;
  private:
  int _internal_materials_size() const;
  public:
  void clear_materials();
  ::network::TRefineMaterial* mutable_materials(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TRefineMaterial >*
      mutable_materials();
  private:
  const ::network::TRefineMaterial& _internal_materials(int index) const;
  ::network::TRefineMaterial* _internal_add_materials();
  public:
  const ::network::TRefineMaterial& materials(int index) const;
  ::network::TRefineMaterial* add_materials();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TRefineMaterial >&
      materials() const;

  // int64 cost = 2;
  void clear_cost();
  int64_t cost() const;
  void set_cost(int64_t value);
  private:
  int64_t _internal_cost() const;
  void _internal_set_cost(int64_t value);
  public:

  // uint32 index = 1;
  void clear_index();
  uint32_t index() const;
  void set_index(uint32_t value);
  private:
  uint32_t _internal_index() const;
  void _internal_set_index(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCPetAttrRefineInfoPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TRefineMaterial > materials_;
    int64_t cost_;
    uint32_t index_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCPartyInvitePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCPartyInvitePacket) */ {
 public:
  inline GCPartyInvitePacket() : GCPartyInvitePacket(nullptr) {}
  ~GCPartyInvitePacket() override;
  explicit PROTOBUF_CONSTEXPR GCPartyInvitePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCPartyInvitePacket(const GCPartyInvitePacket& from);
  GCPartyInvitePacket(GCPartyInvitePacket&& from) noexcept
    : GCPartyInvitePacket() {
    *this = ::std::move(from);
  }

  inline GCPartyInvitePacket& operator=(const GCPartyInvitePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCPartyInvitePacket& operator=(GCPartyInvitePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCPartyInvitePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCPartyInvitePacket* internal_default_instance() {
    return reinterpret_cast<const GCPartyInvitePacket*>(
               &_GCPartyInvitePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    169;

  friend void swap(GCPartyInvitePacket& a, GCPartyInvitePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCPartyInvitePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCPartyInvitePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCPartyInvitePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCPartyInvitePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCPartyInvitePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCPartyInvitePacket& from) {
    GCPartyInvitePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCPartyInvitePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCPartyInvitePacket";
  }
  protected:
  explicit GCPartyInvitePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeaderVidFieldNumber = 1,
  };
  // uint32 leader_vid = 1;
  void clear_leader_vid();
  uint32_t leader_vid() const;
  void set_leader_vid(uint32_t value);
  private:
  uint32_t _internal_leader_vid() const;
  void _internal_set_leader_vid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCPartyInvitePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t leader_vid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCPartyAddPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCPartyAddPacket) */ {
 public:
  inline GCPartyAddPacket() : GCPartyAddPacket(nullptr) {}
  ~GCPartyAddPacket() override;
  explicit PROTOBUF_CONSTEXPR GCPartyAddPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCPartyAddPacket(const GCPartyAddPacket& from);
  GCPartyAddPacket(GCPartyAddPacket&& from) noexcept
    : GCPartyAddPacket() {
    *this = ::std::move(from);
  }

  inline GCPartyAddPacket& operator=(const GCPartyAddPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCPartyAddPacket& operator=(GCPartyAddPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCPartyAddPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCPartyAddPacket* internal_default_instance() {
    return reinterpret_cast<const GCPartyAddPacket*>(
               &_GCPartyAddPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    170;

  friend void swap(GCPartyAddPacket& a, GCPartyAddPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCPartyAddPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCPartyAddPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCPartyAddPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCPartyAddPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCPartyAddPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCPartyAddPacket& from) {
    GCPartyAddPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCPartyAddPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCPartyAddPacket";
  }
  protected:
  explicit GCPartyAddPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kPidFieldNumber = 1,
  };
  // bytes name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 pid = 1;
  void clear_pid();
  uint32_t pid() const;
  void set_pid(uint32_t value);
  private:
  uint32_t _internal_pid() const;
  void _internal_set_pid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCPartyAddPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    uint32_t pid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCPartyUpdatePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCPartyUpdatePacket) */ {
 public:
  inline GCPartyUpdatePacket() : GCPartyUpdatePacket(nullptr) {}
  ~GCPartyUpdatePacket() override;
  explicit PROTOBUF_CONSTEXPR GCPartyUpdatePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCPartyUpdatePacket(const GCPartyUpdatePacket& from);
  GCPartyUpdatePacket(GCPartyUpdatePacket&& from) noexcept
    : GCPartyUpdatePacket() {
    *this = ::std::move(from);
  }

  inline GCPartyUpdatePacket& operator=(const GCPartyUpdatePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCPartyUpdatePacket& operator=(GCPartyUpdatePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCPartyUpdatePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCPartyUpdatePacket* internal_default_instance() {
    return reinterpret_cast<const GCPartyUpdatePacket*>(
               &_GCPartyUpdatePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    171;

  friend void swap(GCPartyUpdatePacket& a, GCPartyUpdatePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCPartyUpdatePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCPartyUpdatePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCPartyUpdatePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCPartyUpdatePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCPartyUpdatePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCPartyUpdatePacket& from) {
    GCPartyUpdatePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCPartyUpdatePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCPartyUpdatePacket";
  }
  protected:
  explicit GCPartyUpdatePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAffectsFieldNumber = 4,
    kPidFieldNumber = 1,
    kRoleFieldNumber = 2,
    kPercentHpFieldNumber = 3,
    kLeaderFieldNumber = 5,
  };
  // repeated int32 affects = 4;
  int affects_size() const;
  private:
  int _internal_affects_size() const;
  public:
  void clear_affects();
  private:
  int32_t _internal_affects(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_affects() const;
  void _internal_add_affects(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_affects();
  public:
  int32_t affects(int index) const;
  void set_affects(int index, int32_t value);
  void add_affects(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      affects() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_affects();

  // uint32 pid = 1;
  void clear_pid();
  uint32_t pid() const;
  void set_pid(uint32_t value);
  private:
  uint32_t _internal_pid() const;
  void _internal_set_pid(uint32_t value);
  public:

  // uint32 role = 2;
  void clear_role();
  uint32_t role() const;
  void set_role(uint32_t value);
  private:
  uint32_t _internal_role() const;
  void _internal_set_role(uint32_t value);
  public:

  // uint32 percent_hp = 3;
  void clear_percent_hp();
  uint32_t percent_hp() const;
  void set_percent_hp(uint32_t value);
  private:
  uint32_t _internal_percent_hp() const;
  void _internal_set_percent_hp(uint32_t value);
  public:

  // bool leader = 5;
  void clear_leader();
  bool leader() const;
  void set_leader(bool value);
  private:
  bool _internal_leader() const;
  void _internal_set_leader(bool value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCPartyUpdatePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > affects_;
    mutable std::atomic<int> _affects_cached_byte_size_;
    uint32_t pid_;
    uint32_t role_;
    uint32_t percent_hp_;
    bool leader_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCPartyRemovePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCPartyRemovePacket) */ {
 public:
  inline GCPartyRemovePacket() : GCPartyRemovePacket(nullptr) {}
  ~GCPartyRemovePacket() override;
  explicit PROTOBUF_CONSTEXPR GCPartyRemovePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCPartyRemovePacket(const GCPartyRemovePacket& from);
  GCPartyRemovePacket(GCPartyRemovePacket&& from) noexcept
    : GCPartyRemovePacket() {
    *this = ::std::move(from);
  }

  inline GCPartyRemovePacket& operator=(const GCPartyRemovePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCPartyRemovePacket& operator=(GCPartyRemovePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCPartyRemovePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCPartyRemovePacket* internal_default_instance() {
    return reinterpret_cast<const GCPartyRemovePacket*>(
               &_GCPartyRemovePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    172;

  friend void swap(GCPartyRemovePacket& a, GCPartyRemovePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCPartyRemovePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCPartyRemovePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCPartyRemovePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCPartyRemovePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCPartyRemovePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCPartyRemovePacket& from) {
    GCPartyRemovePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCPartyRemovePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCPartyRemovePacket";
  }
  protected:
  explicit GCPartyRemovePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPidFieldNumber = 1,
  };
  // uint32 pid = 1;
  void clear_pid();
  uint32_t pid() const;
  void set_pid(uint32_t value);
  private:
  uint32_t _internal_pid() const;
  void _internal_set_pid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCPartyRemovePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t pid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCPartyLinkPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCPartyLinkPacket) */ {
 public:
  inline GCPartyLinkPacket() : GCPartyLinkPacket(nullptr) {}
  ~GCPartyLinkPacket() override;
  explicit PROTOBUF_CONSTEXPR GCPartyLinkPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCPartyLinkPacket(const GCPartyLinkPacket& from);
  GCPartyLinkPacket(GCPartyLinkPacket&& from) noexcept
    : GCPartyLinkPacket() {
    *this = ::std::move(from);
  }

  inline GCPartyLinkPacket& operator=(const GCPartyLinkPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCPartyLinkPacket& operator=(GCPartyLinkPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCPartyLinkPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCPartyLinkPacket* internal_default_instance() {
    return reinterpret_cast<const GCPartyLinkPacket*>(
               &_GCPartyLinkPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    173;

  friend void swap(GCPartyLinkPacket& a, GCPartyLinkPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCPartyLinkPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCPartyLinkPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCPartyLinkPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCPartyLinkPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCPartyLinkPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCPartyLinkPacket& from) {
    GCPartyLinkPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCPartyLinkPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCPartyLinkPacket";
  }
  protected:
  explicit GCPartyLinkPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPidFieldNumber = 1,
    kVidFieldNumber = 2,
  };
  // uint32 pid = 1;
  void clear_pid();
  uint32_t pid() const;
  void set_pid(uint32_t value);
  private:
  uint32_t _internal_pid() const;
  void _internal_set_pid(uint32_t value);
  public:

  // uint32 vid = 2;
  void clear_vid();
  uint32_t vid() const;
  void set_vid(uint32_t value);
  private:
  uint32_t _internal_vid() const;
  void _internal_set_vid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCPartyLinkPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t pid_;
    uint32_t vid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCPartyUnlinkPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCPartyUnlinkPacket) */ {
 public:
  inline GCPartyUnlinkPacket() : GCPartyUnlinkPacket(nullptr) {}
  ~GCPartyUnlinkPacket() override;
  explicit PROTOBUF_CONSTEXPR GCPartyUnlinkPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCPartyUnlinkPacket(const GCPartyUnlinkPacket& from);
  GCPartyUnlinkPacket(GCPartyUnlinkPacket&& from) noexcept
    : GCPartyUnlinkPacket() {
    *this = ::std::move(from);
  }

  inline GCPartyUnlinkPacket& operator=(const GCPartyUnlinkPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCPartyUnlinkPacket& operator=(GCPartyUnlinkPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCPartyUnlinkPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCPartyUnlinkPacket* internal_default_instance() {
    return reinterpret_cast<const GCPartyUnlinkPacket*>(
               &_GCPartyUnlinkPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    174;

  friend void swap(GCPartyUnlinkPacket& a, GCPartyUnlinkPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCPartyUnlinkPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCPartyUnlinkPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCPartyUnlinkPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCPartyUnlinkPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCPartyUnlinkPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCPartyUnlinkPacket& from) {
    GCPartyUnlinkPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCPartyUnlinkPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCPartyUnlinkPacket";
  }
  protected:
  explicit GCPartyUnlinkPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPidFieldNumber = 1,
    kVidFieldNumber = 2,
  };
  // uint32 pid = 1;
  void clear_pid();
  uint32_t pid() const;
  void set_pid(uint32_t value);
  private:
  uint32_t _internal_pid() const;
  void _internal_set_pid(uint32_t value);
  public:

  // uint32 vid = 2;
  void clear_vid();
  uint32_t vid() const;
  void set_vid(uint32_t value);
  private:
  uint32_t _internal_vid() const;
  void _internal_set_vid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCPartyUnlinkPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t pid_;
    uint32_t vid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCPartyParameterPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCPartyParameterPacket) */ {
 public:
  inline GCPartyParameterPacket() : GCPartyParameterPacket(nullptr) {}
  ~GCPartyParameterPacket() override;
  explicit PROTOBUF_CONSTEXPR GCPartyParameterPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCPartyParameterPacket(const GCPartyParameterPacket& from);
  GCPartyParameterPacket(GCPartyParameterPacket&& from) noexcept
    : GCPartyParameterPacket() {
    *this = ::std::move(from);
  }

  inline GCPartyParameterPacket& operator=(const GCPartyParameterPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCPartyParameterPacket& operator=(GCPartyParameterPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCPartyParameterPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCPartyParameterPacket* internal_default_instance() {
    return reinterpret_cast<const GCPartyParameterPacket*>(
               &_GCPartyParameterPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    175;

  friend void swap(GCPartyParameterPacket& a, GCPartyParameterPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCPartyParameterPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCPartyParameterPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCPartyParameterPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCPartyParameterPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCPartyParameterPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCPartyParameterPacket& from) {
    GCPartyParameterPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCPartyParameterPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCPartyParameterPacket";
  }
  protected:
  explicit GCPartyParameterPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDistributeModeFieldNumber = 1,
  };
  // uint32 distribute_mode = 1;
  void clear_distribute_mode();
  uint32_t distribute_mode() const;
  void set_distribute_mode(uint32_t value);
  private:
  uint32_t _internal_distribute_mode() const;
  void _internal_set_distribute_mode(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCPartyParameterPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t distribute_mode_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCGuildLoginPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCGuildLoginPacket) */ {
 public:
  inline GCGuildLoginPacket() : GCGuildLoginPacket(nullptr) {}
  ~GCGuildLoginPacket() override;
  explicit PROTOBUF_CONSTEXPR GCGuildLoginPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCGuildLoginPacket(const GCGuildLoginPacket& from);
  GCGuildLoginPacket(GCGuildLoginPacket&& from) noexcept
    : GCGuildLoginPacket() {
    *this = ::std::move(from);
  }

  inline GCGuildLoginPacket& operator=(const GCGuildLoginPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCGuildLoginPacket& operator=(GCGuildLoginPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCGuildLoginPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCGuildLoginPacket* internal_default_instance() {
    return reinterpret_cast<const GCGuildLoginPacket*>(
               &_GCGuildLoginPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    176;

  friend void swap(GCGuildLoginPacket& a, GCGuildLoginPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCGuildLoginPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCGuildLoginPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCGuildLoginPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCGuildLoginPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCGuildLoginPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCGuildLoginPacket& from) {
    GCGuildLoginPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCGuildLoginPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCGuildLoginPacket";
  }
  protected:
  explicit GCGuildLoginPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPidFieldNumber = 1,
  };
  // uint32 pid = 1;
  void clear_pid();
  uint32_t pid() const;
  void set_pid(uint32_t value);
  private:
  uint32_t _internal_pid() const;
  void _internal_set_pid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCGuildLoginPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t pid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCGuildLogoutPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCGuildLogoutPacket) */ {
 public:
  inline GCGuildLogoutPacket() : GCGuildLogoutPacket(nullptr) {}
  ~GCGuildLogoutPacket() override;
  explicit PROTOBUF_CONSTEXPR GCGuildLogoutPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCGuildLogoutPacket(const GCGuildLogoutPacket& from);
  GCGuildLogoutPacket(GCGuildLogoutPacket&& from) noexcept
    : GCGuildLogoutPacket() {
    *this = ::std::move(from);
  }

  inline GCGuildLogoutPacket& operator=(const GCGuildLogoutPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCGuildLogoutPacket& operator=(GCGuildLogoutPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCGuildLogoutPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCGuildLogoutPacket* internal_default_instance() {
    return reinterpret_cast<const GCGuildLogoutPacket*>(
               &_GCGuildLogoutPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    177;

  friend void swap(GCGuildLogoutPacket& a, GCGuildLogoutPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCGuildLogoutPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCGuildLogoutPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCGuildLogoutPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCGuildLogoutPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCGuildLogoutPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCGuildLogoutPacket& from) {
    GCGuildLogoutPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCGuildLogoutPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCGuildLogoutPacket";
  }
  protected:
  explicit GCGuildLogoutPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPidFieldNumber = 1,
  };
  // uint32 pid = 1;
  void clear_pid();
  uint32_t pid() const;
  void set_pid(uint32_t value);
  private:
  uint32_t _internal_pid() const;
  void _internal_set_pid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCGuildLogoutPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t pid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCGuildRemovePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCGuildRemovePacket) */ {
 public:
  inline GCGuildRemovePacket() : GCGuildRemovePacket(nullptr) {}
  ~GCGuildRemovePacket() override;
  explicit PROTOBUF_CONSTEXPR GCGuildRemovePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCGuildRemovePacket(const GCGuildRemovePacket& from);
  GCGuildRemovePacket(GCGuildRemovePacket&& from) noexcept
    : GCGuildRemovePacket() {
    *this = ::std::move(from);
  }

  inline GCGuildRemovePacket& operator=(const GCGuildRemovePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCGuildRemovePacket& operator=(GCGuildRemovePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCGuildRemovePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCGuildRemovePacket* internal_default_instance() {
    return reinterpret_cast<const GCGuildRemovePacket*>(
               &_GCGuildRemovePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    178;

  friend void swap(GCGuildRemovePacket& a, GCGuildRemovePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCGuildRemovePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCGuildRemovePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCGuildRemovePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCGuildRemovePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCGuildRemovePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCGuildRemovePacket& from) {
    GCGuildRemovePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCGuildRemovePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCGuildRemovePacket";
  }
  protected:
  explicit GCGuildRemovePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPidFieldNumber = 1,
  };
  // uint32 pid = 1;
  void clear_pid();
  uint32_t pid() const;
  void set_pid(uint32_t value);
  private:
  uint32_t _internal_pid() const;
  void _internal_set_pid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCGuildRemovePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t pid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCGuildMemberListPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCGuildMemberListPacket) */ {
 public:
  inline GCGuildMemberListPacket() : GCGuildMemberListPacket(nullptr) {}
  ~GCGuildMemberListPacket() override;
  explicit PROTOBUF_CONSTEXPR GCGuildMemberListPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCGuildMemberListPacket(const GCGuildMemberListPacket& from);
  GCGuildMemberListPacket(GCGuildMemberListPacket&& from) noexcept
    : GCGuildMemberListPacket() {
    *this = ::std::move(from);
  }

  inline GCGuildMemberListPacket& operator=(const GCGuildMemberListPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCGuildMemberListPacket& operator=(GCGuildMemberListPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCGuildMemberListPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCGuildMemberListPacket* internal_default_instance() {
    return reinterpret_cast<const GCGuildMemberListPacket*>(
               &_GCGuildMemberListPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    179;

  friend void swap(GCGuildMemberListPacket& a, GCGuildMemberListPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCGuildMemberListPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCGuildMemberListPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCGuildMemberListPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCGuildMemberListPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCGuildMemberListPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCGuildMemberListPacket& from) {
    GCGuildMemberListPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCGuildMemberListPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCGuildMemberListPacket";
  }
  protected:
  explicit GCGuildMemberListPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMembersFieldNumber = 1,
  };
  // repeated .network.TGuildMemberInfo members = 1;
  int members_size() const;
  private:
  int _internal_members_size() const;
  public:
  void clear_members();
  ::network::TGuildMemberInfo* mutable_members(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TGuildMemberInfo >*
      mutable_members();
  private:
  const ::network::TGuildMemberInfo& _internal_members(int index) const;
  ::network::TGuildMemberInfo* _internal_add_members();
  public:
  const ::network::TGuildMemberInfo& members(int index) const;
  ::network::TGuildMemberInfo* add_members();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TGuildMemberInfo >&
      members() const;

  // @@protoc_insertion_point(class_scope:network.GCGuildMemberListPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TGuildMemberInfo > members_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCGuildGradePacket_GradeData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCGuildGradePacket.GradeData) */ {
 public:
  inline GCGuildGradePacket_GradeData() : GCGuildGradePacket_GradeData(nullptr) {}
  ~GCGuildGradePacket_GradeData() override;
  explicit PROTOBUF_CONSTEXPR GCGuildGradePacket_GradeData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCGuildGradePacket_GradeData(const GCGuildGradePacket_GradeData& from);
  GCGuildGradePacket_GradeData(GCGuildGradePacket_GradeData&& from) noexcept
    : GCGuildGradePacket_GradeData() {
    *this = ::std::move(from);
  }

  inline GCGuildGradePacket_GradeData& operator=(const GCGuildGradePacket_GradeData& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCGuildGradePacket_GradeData& operator=(GCGuildGradePacket_GradeData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCGuildGradePacket_GradeData& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCGuildGradePacket_GradeData* internal_default_instance() {
    return reinterpret_cast<const GCGuildGradePacket_GradeData*>(
               &_GCGuildGradePacket_GradeData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    180;

  friend void swap(GCGuildGradePacket_GradeData& a, GCGuildGradePacket_GradeData& b) {
    a.Swap(&b);
  }
  inline void Swap(GCGuildGradePacket_GradeData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCGuildGradePacket_GradeData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCGuildGradePacket_GradeData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCGuildGradePacket_GradeData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCGuildGradePacket_GradeData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCGuildGradePacket_GradeData& from) {
    GCGuildGradePacket_GradeData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCGuildGradePacket_GradeData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCGuildGradePacket.GradeData";
  }
  protected:
  explicit GCGuildGradePacket_GradeData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kIndexFieldNumber = 1,
    kAuthFlagFieldNumber = 3,
  };
  // bytes name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 index = 1;
  void clear_index();
  uint32_t index() const;
  void set_index(uint32_t value);
  private:
  uint32_t _internal_index() const;
  void _internal_set_index(uint32_t value);
  public:

  // uint32 auth_flag = 3;
  void clear_auth_flag();
  uint32_t auth_flag() const;
  void set_auth_flag(uint32_t value);
  private:
  uint32_t _internal_auth_flag() const;
  void _internal_set_auth_flag(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCGuildGradePacket.GradeData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    uint32_t index_;
    uint32_t auth_flag_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCGuildGradePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCGuildGradePacket) */ {
 public:
  inline GCGuildGradePacket() : GCGuildGradePacket(nullptr) {}
  ~GCGuildGradePacket() override;
  explicit PROTOBUF_CONSTEXPR GCGuildGradePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCGuildGradePacket(const GCGuildGradePacket& from);
  GCGuildGradePacket(GCGuildGradePacket&& from) noexcept
    : GCGuildGradePacket() {
    *this = ::std::move(from);
  }

  inline GCGuildGradePacket& operator=(const GCGuildGradePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCGuildGradePacket& operator=(GCGuildGradePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCGuildGradePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCGuildGradePacket* internal_default_instance() {
    return reinterpret_cast<const GCGuildGradePacket*>(
               &_GCGuildGradePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    181;

  friend void swap(GCGuildGradePacket& a, GCGuildGradePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCGuildGradePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCGuildGradePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCGuildGradePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCGuildGradePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCGuildGradePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCGuildGradePacket& from) {
    GCGuildGradePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCGuildGradePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCGuildGradePacket";
  }
  protected:
  explicit GCGuildGradePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GCGuildGradePacket_GradeData GradeData;

  // accessors -------------------------------------------------------

  enum : int {
    kGradesFieldNumber = 1,
  };
  // repeated .network.GCGuildGradePacket.GradeData grades = 1;
  int grades_size() const;
  private:
  int _internal_grades_size() const;
  public:
  void clear_grades();
  ::network::GCGuildGradePacket_GradeData* mutable_grades(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::GCGuildGradePacket_GradeData >*
      mutable_grades();
  private:
  const ::network::GCGuildGradePacket_GradeData& _internal_grades(int index) const;
  ::network::GCGuildGradePacket_GradeData* _internal_add_grades();
  public:
  const ::network::GCGuildGradePacket_GradeData& grades(int index) const;
  ::network::GCGuildGradePacket_GradeData* add_grades();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::GCGuildGradePacket_GradeData >&
      grades() const;

  // @@protoc_insertion_point(class_scope:network.GCGuildGradePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::GCGuildGradePacket_GradeData > grades_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCGuildGradeNamePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCGuildGradeNamePacket) */ {
 public:
  inline GCGuildGradeNamePacket() : GCGuildGradeNamePacket(nullptr) {}
  ~GCGuildGradeNamePacket() override;
  explicit PROTOBUF_CONSTEXPR GCGuildGradeNamePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCGuildGradeNamePacket(const GCGuildGradeNamePacket& from);
  GCGuildGradeNamePacket(GCGuildGradeNamePacket&& from) noexcept
    : GCGuildGradeNamePacket() {
    *this = ::std::move(from);
  }

  inline GCGuildGradeNamePacket& operator=(const GCGuildGradeNamePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCGuildGradeNamePacket& operator=(GCGuildGradeNamePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCGuildGradeNamePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCGuildGradeNamePacket* internal_default_instance() {
    return reinterpret_cast<const GCGuildGradeNamePacket*>(
               &_GCGuildGradeNamePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    182;

  friend void swap(GCGuildGradeNamePacket& a, GCGuildGradeNamePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCGuildGradeNamePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCGuildGradeNamePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCGuildGradeNamePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCGuildGradeNamePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCGuildGradeNamePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCGuildGradeNamePacket& from) {
    GCGuildGradeNamePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCGuildGradeNamePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCGuildGradeNamePacket";
  }
  protected:
  explicit GCGuildGradeNamePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kIndexFieldNumber = 1,
  };
  // bytes name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 index = 1;
  void clear_index();
  uint32_t index() const;
  void set_index(uint32_t value);
  private:
  uint32_t _internal_index() const;
  void _internal_set_index(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCGuildGradeNamePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    uint32_t index_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCGuildGradeAuthPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCGuildGradeAuthPacket) */ {
 public:
  inline GCGuildGradeAuthPacket() : GCGuildGradeAuthPacket(nullptr) {}
  ~GCGuildGradeAuthPacket() override;
  explicit PROTOBUF_CONSTEXPR GCGuildGradeAuthPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCGuildGradeAuthPacket(const GCGuildGradeAuthPacket& from);
  GCGuildGradeAuthPacket(GCGuildGradeAuthPacket&& from) noexcept
    : GCGuildGradeAuthPacket() {
    *this = ::std::move(from);
  }

  inline GCGuildGradeAuthPacket& operator=(const GCGuildGradeAuthPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCGuildGradeAuthPacket& operator=(GCGuildGradeAuthPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCGuildGradeAuthPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCGuildGradeAuthPacket* internal_default_instance() {
    return reinterpret_cast<const GCGuildGradeAuthPacket*>(
               &_GCGuildGradeAuthPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    183;

  friend void swap(GCGuildGradeAuthPacket& a, GCGuildGradeAuthPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCGuildGradeAuthPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCGuildGradeAuthPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCGuildGradeAuthPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCGuildGradeAuthPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCGuildGradeAuthPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCGuildGradeAuthPacket& from) {
    GCGuildGradeAuthPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCGuildGradeAuthPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCGuildGradeAuthPacket";
  }
  protected:
  explicit GCGuildGradeAuthPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexFieldNumber = 1,
    kAuthFlagFieldNumber = 2,
  };
  // uint32 index = 1;
  void clear_index();
  uint32_t index() const;
  void set_index(uint32_t value);
  private:
  uint32_t _internal_index() const;
  void _internal_set_index(uint32_t value);
  public:

  // uint32 auth_flag = 2;
  void clear_auth_flag();
  uint32_t auth_flag() const;
  void set_auth_flag(uint32_t value);
  private:
  uint32_t _internal_auth_flag() const;
  void _internal_set_auth_flag(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCGuildGradeAuthPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t index_;
    uint32_t auth_flag_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCGuildInfoPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCGuildInfoPacket) */ {
 public:
  inline GCGuildInfoPacket() : GCGuildInfoPacket(nullptr) {}
  ~GCGuildInfoPacket() override;
  explicit PROTOBUF_CONSTEXPR GCGuildInfoPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCGuildInfoPacket(const GCGuildInfoPacket& from);
  GCGuildInfoPacket(GCGuildInfoPacket&& from) noexcept
    : GCGuildInfoPacket() {
    *this = ::std::move(from);
  }

  inline GCGuildInfoPacket& operator=(const GCGuildInfoPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCGuildInfoPacket& operator=(GCGuildInfoPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCGuildInfoPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCGuildInfoPacket* internal_default_instance() {
    return reinterpret_cast<const GCGuildInfoPacket*>(
               &_GCGuildInfoPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    184;

  friend void swap(GCGuildInfoPacket& a, GCGuildInfoPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCGuildInfoPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCGuildInfoPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCGuildInfoPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCGuildInfoPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCGuildInfoPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCGuildInfoPacket& from) {
    GCGuildInfoPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCGuildInfoPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCGuildInfoPacket";
  }
  protected:
  explicit GCGuildInfoPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWinsFieldNumber = 12,
    kDrawsFieldNumber = 13,
    kLossesFieldNumber = 14,
    kNameFieldNumber = 7,
    kMemberCountFieldNumber = 1,
    kMaxMemberCountFieldNumber = 2,
    kGuildIdFieldNumber = 3,
    kMasterPidFieldNumber = 4,
    kExpFieldNumber = 5,
    kLevelFieldNumber = 6,
    kGoldFieldNumber = 8,
    kHasLandFieldNumber = 9,
    kGuildPointFieldNumber = 10,
    kGuildRankFieldNumber = 11,
  };
  // repeated uint32 wins = 12;
  int wins_size() const;
  private:
  int _internal_wins_size() const;
  public:
  void clear_wins();
  private:
  uint32_t _internal_wins(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_wins() const;
  void _internal_add_wins(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_wins();
  public:
  uint32_t wins(int index) const;
  void set_wins(int index, uint32_t value);
  void add_wins(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      wins() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_wins();

  // repeated uint32 draws = 13;
  int draws_size() const;
  private:
  int _internal_draws_size() const;
  public:
  void clear_draws();
  private:
  uint32_t _internal_draws(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_draws() const;
  void _internal_add_draws(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_draws();
  public:
  uint32_t draws(int index) const;
  void set_draws(int index, uint32_t value);
  void add_draws(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      draws() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_draws();

  // repeated uint32 losses = 14;
  int losses_size() const;
  private:
  int _internal_losses_size() const;
  public:
  void clear_losses();
  private:
  uint32_t _internal_losses(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_losses() const;
  void _internal_add_losses(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_losses();
  public:
  uint32_t losses(int index) const;
  void set_losses(int index, uint32_t value);
  void add_losses(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      losses() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_losses();

  // bytes name = 7;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 member_count = 1;
  void clear_member_count();
  uint32_t member_count() const;
  void set_member_count(uint32_t value);
  private:
  uint32_t _internal_member_count() const;
  void _internal_set_member_count(uint32_t value);
  public:

  // uint32 max_member_count = 2;
  void clear_max_member_count();
  uint32_t max_member_count() const;
  void set_max_member_count(uint32_t value);
  private:
  uint32_t _internal_max_member_count() const;
  void _internal_set_max_member_count(uint32_t value);
  public:

  // uint32 guild_id = 3;
  void clear_guild_id();
  uint32_t guild_id() const;
  void set_guild_id(uint32_t value);
  private:
  uint32_t _internal_guild_id() const;
  void _internal_set_guild_id(uint32_t value);
  public:

  // uint32 master_pid = 4;
  void clear_master_pid();
  uint32_t master_pid() const;
  void set_master_pid(uint32_t value);
  private:
  uint32_t _internal_master_pid() const;
  void _internal_set_master_pid(uint32_t value);
  public:

  // uint32 exp = 5;
  void clear_exp();
  uint32_t exp() const;
  void set_exp(uint32_t value);
  private:
  uint32_t _internal_exp() const;
  void _internal_set_exp(uint32_t value);
  public:

  // uint32 level = 6;
  void clear_level();
  uint32_t level() const;
  void set_level(uint32_t value);
  private:
  uint32_t _internal_level() const;
  void _internal_set_level(uint32_t value);
  public:

  // uint32 gold = 8;
  void clear_gold();
  uint32_t gold() const;
  void set_gold(uint32_t value);
  private:
  uint32_t _internal_gold() const;
  void _internal_set_gold(uint32_t value);
  public:

  // bool has_land = 9;
  void clear_has_land();
  bool has_land() const;
  void set_has_land(bool value);
  private:
  bool _internal_has_land() const;
  void _internal_set_has_land(bool value);
  public:

  // uint32 guild_point = 10;
  void clear_guild_point();
  uint32_t guild_point() const;
  void set_guild_point(uint32_t value);
  private:
  uint32_t _internal_guild_point() const;
  void _internal_set_guild_point(uint32_t value);
  public:

  // uint32 guild_rank = 11;
  void clear_guild_rank();
  uint32_t guild_rank() const;
  void set_guild_rank(uint32_t value);
  private:
  uint32_t _internal_guild_rank() const;
  void _internal_set_guild_rank(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCGuildInfoPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > wins_;
    mutable std::atomic<int> _wins_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > draws_;
    mutable std::atomic<int> _draws_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > losses_;
    mutable std::atomic<int> _losses_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    uint32_t member_count_;
    uint32_t max_member_count_;
    uint32_t guild_id_;
    uint32_t master_pid_;
    uint32_t exp_;
    uint32_t level_;
    uint32_t gold_;
    bool has_land_;
    uint32_t guild_point_;
    uint32_t guild_rank_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCGuildCommentsPacket_Comment final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCGuildCommentsPacket.Comment) */ {
 public:
  inline GCGuildCommentsPacket_Comment() : GCGuildCommentsPacket_Comment(nullptr) {}
  ~GCGuildCommentsPacket_Comment() override;
  explicit PROTOBUF_CONSTEXPR GCGuildCommentsPacket_Comment(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCGuildCommentsPacket_Comment(const GCGuildCommentsPacket_Comment& from);
  GCGuildCommentsPacket_Comment(GCGuildCommentsPacket_Comment&& from) noexcept
    : GCGuildCommentsPacket_Comment() {
    *this = ::std::move(from);
  }

  inline GCGuildCommentsPacket_Comment& operator=(const GCGuildCommentsPacket_Comment& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCGuildCommentsPacket_Comment& operator=(GCGuildCommentsPacket_Comment&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCGuildCommentsPacket_Comment& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCGuildCommentsPacket_Comment* internal_default_instance() {
    return reinterpret_cast<const GCGuildCommentsPacket_Comment*>(
               &_GCGuildCommentsPacket_Comment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    185;

  friend void swap(GCGuildCommentsPacket_Comment& a, GCGuildCommentsPacket_Comment& b) {
    a.Swap(&b);
  }
  inline void Swap(GCGuildCommentsPacket_Comment* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCGuildCommentsPacket_Comment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCGuildCommentsPacket_Comment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCGuildCommentsPacket_Comment>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCGuildCommentsPacket_Comment& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCGuildCommentsPacket_Comment& from) {
    GCGuildCommentsPacket_Comment::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCGuildCommentsPacket_Comment* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCGuildCommentsPacket.Comment";
  }
  protected:
  explicit GCGuildCommentsPacket_Comment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kMessageFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // bytes name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bytes message = 3;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // uint32 id = 1;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCGuildCommentsPacket.Comment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    uint32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCGuildCommentsPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCGuildCommentsPacket) */ {
 public:
  inline GCGuildCommentsPacket() : GCGuildCommentsPacket(nullptr) {}
  ~GCGuildCommentsPacket() override;
  explicit PROTOBUF_CONSTEXPR GCGuildCommentsPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCGuildCommentsPacket(const GCGuildCommentsPacket& from);
  GCGuildCommentsPacket(GCGuildCommentsPacket&& from) noexcept
    : GCGuildCommentsPacket() {
    *this = ::std::move(from);
  }

  inline GCGuildCommentsPacket& operator=(const GCGuildCommentsPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCGuildCommentsPacket& operator=(GCGuildCommentsPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCGuildCommentsPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCGuildCommentsPacket* internal_default_instance() {
    return reinterpret_cast<const GCGuildCommentsPacket*>(
               &_GCGuildCommentsPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    186;

  friend void swap(GCGuildCommentsPacket& a, GCGuildCommentsPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCGuildCommentsPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCGuildCommentsPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCGuildCommentsPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCGuildCommentsPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCGuildCommentsPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCGuildCommentsPacket& from) {
    GCGuildCommentsPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCGuildCommentsPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCGuildCommentsPacket";
  }
  protected:
  explicit GCGuildCommentsPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GCGuildCommentsPacket_Comment Comment;

  // accessors -------------------------------------------------------

  enum : int {
    kCommentsFieldNumber = 1,
  };
  // repeated .network.GCGuildCommentsPacket.Comment comments = 1;
  int comments_size() const;
  private:
  int _internal_comments_size() const;
  public:
  void clear_comments();
  ::network::GCGuildCommentsPacket_Comment* mutable_comments(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::GCGuildCommentsPacket_Comment >*
      mutable_comments();
  private:
  const ::network::GCGuildCommentsPacket_Comment& _internal_comments(int index) const;
  ::network::GCGuildCommentsPacket_Comment* _internal_add_comments();
  public:
  const ::network::GCGuildCommentsPacket_Comment& comments(int index) const;
  ::network::GCGuildCommentsPacket_Comment* add_comments();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::GCGuildCommentsPacket_Comment >&
      comments() const;

  // @@protoc_insertion_point(class_scope:network.GCGuildCommentsPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::GCGuildCommentsPacket_Comment > comments_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCGuildChangeExpPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCGuildChangeExpPacket) */ {
 public:
  inline GCGuildChangeExpPacket() : GCGuildChangeExpPacket(nullptr) {}
  ~GCGuildChangeExpPacket() override;
  explicit PROTOBUF_CONSTEXPR GCGuildChangeExpPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCGuildChangeExpPacket(const GCGuildChangeExpPacket& from);
  GCGuildChangeExpPacket(GCGuildChangeExpPacket&& from) noexcept
    : GCGuildChangeExpPacket() {
    *this = ::std::move(from);
  }

  inline GCGuildChangeExpPacket& operator=(const GCGuildChangeExpPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCGuildChangeExpPacket& operator=(GCGuildChangeExpPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCGuildChangeExpPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCGuildChangeExpPacket* internal_default_instance() {
    return reinterpret_cast<const GCGuildChangeExpPacket*>(
               &_GCGuildChangeExpPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    187;

  friend void swap(GCGuildChangeExpPacket& a, GCGuildChangeExpPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCGuildChangeExpPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCGuildChangeExpPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCGuildChangeExpPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCGuildChangeExpPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCGuildChangeExpPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCGuildChangeExpPacket& from) {
    GCGuildChangeExpPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCGuildChangeExpPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCGuildChangeExpPacket";
  }
  protected:
  explicit GCGuildChangeExpPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLevelFieldNumber = 1,
    kExpFieldNumber = 2,
  };
  // uint32 level = 1;
  void clear_level();
  uint32_t level() const;
  void set_level(uint32_t value);
  private:
  uint32_t _internal_level() const;
  void _internal_set_level(uint32_t value);
  public:

  // uint32 exp = 2;
  void clear_exp();
  uint32_t exp() const;
  void set_exp(uint32_t value);
  private:
  uint32_t _internal_exp() const;
  void _internal_set_exp(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCGuildChangeExpPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t level_;
    uint32_t exp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCGuildChangeMemberGradePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCGuildChangeMemberGradePacket) */ {
 public:
  inline GCGuildChangeMemberGradePacket() : GCGuildChangeMemberGradePacket(nullptr) {}
  ~GCGuildChangeMemberGradePacket() override;
  explicit PROTOBUF_CONSTEXPR GCGuildChangeMemberGradePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCGuildChangeMemberGradePacket(const GCGuildChangeMemberGradePacket& from);
  GCGuildChangeMemberGradePacket(GCGuildChangeMemberGradePacket&& from) noexcept
    : GCGuildChangeMemberGradePacket() {
    *this = ::std::move(from);
  }

  inline GCGuildChangeMemberGradePacket& operator=(const GCGuildChangeMemberGradePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCGuildChangeMemberGradePacket& operator=(GCGuildChangeMemberGradePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCGuildChangeMemberGradePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCGuildChangeMemberGradePacket* internal_default_instance() {
    return reinterpret_cast<const GCGuildChangeMemberGradePacket*>(
               &_GCGuildChangeMemberGradePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    188;

  friend void swap(GCGuildChangeMemberGradePacket& a, GCGuildChangeMemberGradePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCGuildChangeMemberGradePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCGuildChangeMemberGradePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCGuildChangeMemberGradePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCGuildChangeMemberGradePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCGuildChangeMemberGradePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCGuildChangeMemberGradePacket& from) {
    GCGuildChangeMemberGradePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCGuildChangeMemberGradePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCGuildChangeMemberGradePacket";
  }
  protected:
  explicit GCGuildChangeMemberGradePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPidFieldNumber = 1,
    kGradeFieldNumber = 2,
  };
  // uint32 pid = 1;
  void clear_pid();
  uint32_t pid() const;
  void set_pid(uint32_t value);
  private:
  uint32_t _internal_pid() const;
  void _internal_set_pid(uint32_t value);
  public:

  // uint32 grade = 2;
  void clear_grade();
  uint32_t grade() const;
  void set_grade(uint32_t value);
  private:
  uint32_t _internal_grade() const;
  void _internal_set_grade(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCGuildChangeMemberGradePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t pid_;
    uint32_t grade_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCGuildSkillInfoPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCGuildSkillInfoPacket) */ {
 public:
  inline GCGuildSkillInfoPacket() : GCGuildSkillInfoPacket(nullptr) {}
  ~GCGuildSkillInfoPacket() override;
  explicit PROTOBUF_CONSTEXPR GCGuildSkillInfoPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCGuildSkillInfoPacket(const GCGuildSkillInfoPacket& from);
  GCGuildSkillInfoPacket(GCGuildSkillInfoPacket&& from) noexcept
    : GCGuildSkillInfoPacket() {
    *this = ::std::move(from);
  }

  inline GCGuildSkillInfoPacket& operator=(const GCGuildSkillInfoPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCGuildSkillInfoPacket& operator=(GCGuildSkillInfoPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCGuildSkillInfoPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCGuildSkillInfoPacket* internal_default_instance() {
    return reinterpret_cast<const GCGuildSkillInfoPacket*>(
               &_GCGuildSkillInfoPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    189;

  friend void swap(GCGuildSkillInfoPacket& a, GCGuildSkillInfoPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCGuildSkillInfoPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCGuildSkillInfoPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCGuildSkillInfoPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCGuildSkillInfoPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCGuildSkillInfoPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCGuildSkillInfoPacket& from) {
    GCGuildSkillInfoPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCGuildSkillInfoPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCGuildSkillInfoPacket";
  }
  protected:
  explicit GCGuildSkillInfoPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSkillLevelsFieldNumber = 2,
    kSkillPointFieldNumber = 1,
    kGuildPointFieldNumber = 3,
    kMaxGuildPointFieldNumber = 4,
  };
  // repeated uint32 skill_levels = 2;
  int skill_levels_size() const;
  private:
  int _internal_skill_levels_size() const;
  public:
  void clear_skill_levels();
  private:
  uint32_t _internal_skill_levels(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_skill_levels() const;
  void _internal_add_skill_levels(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_skill_levels();
  public:
  uint32_t skill_levels(int index) const;
  void set_skill_levels(int index, uint32_t value);
  void add_skill_levels(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      skill_levels() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_skill_levels();

  // uint32 skill_point = 1;
  void clear_skill_point();
  uint32_t skill_point() const;
  void set_skill_point(uint32_t value);
  private:
  uint32_t _internal_skill_point() const;
  void _internal_set_skill_point(uint32_t value);
  public:

  // uint32 guild_point = 3;
  void clear_guild_point();
  uint32_t guild_point() const;
  void set_guild_point(uint32_t value);
  private:
  uint32_t _internal_guild_point() const;
  void _internal_set_guild_point(uint32_t value);
  public:

  // uint32 max_guild_point = 4;
  void clear_max_guild_point();
  uint32_t max_guild_point() const;
  void set_max_guild_point(uint32_t value);
  private:
  uint32_t _internal_max_guild_point() const;
  void _internal_set_max_guild_point(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCGuildSkillInfoPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > skill_levels_;
    mutable std::atomic<int> _skill_levels_cached_byte_size_;
    uint32_t skill_point_;
    uint32_t guild_point_;
    uint32_t max_guild_point_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCGuildChangeMemberGeneralPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCGuildChangeMemberGeneralPacket) */ {
 public:
  inline GCGuildChangeMemberGeneralPacket() : GCGuildChangeMemberGeneralPacket(nullptr) {}
  ~GCGuildChangeMemberGeneralPacket() override;
  explicit PROTOBUF_CONSTEXPR GCGuildChangeMemberGeneralPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCGuildChangeMemberGeneralPacket(const GCGuildChangeMemberGeneralPacket& from);
  GCGuildChangeMemberGeneralPacket(GCGuildChangeMemberGeneralPacket&& from) noexcept
    : GCGuildChangeMemberGeneralPacket() {
    *this = ::std::move(from);
  }

  inline GCGuildChangeMemberGeneralPacket& operator=(const GCGuildChangeMemberGeneralPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCGuildChangeMemberGeneralPacket& operator=(GCGuildChangeMemberGeneralPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCGuildChangeMemberGeneralPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCGuildChangeMemberGeneralPacket* internal_default_instance() {
    return reinterpret_cast<const GCGuildChangeMemberGeneralPacket*>(
               &_GCGuildChangeMemberGeneralPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    190;

  friend void swap(GCGuildChangeMemberGeneralPacket& a, GCGuildChangeMemberGeneralPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCGuildChangeMemberGeneralPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCGuildChangeMemberGeneralPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCGuildChangeMemberGeneralPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCGuildChangeMemberGeneralPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCGuildChangeMemberGeneralPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCGuildChangeMemberGeneralPacket& from) {
    GCGuildChangeMemberGeneralPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCGuildChangeMemberGeneralPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCGuildChangeMemberGeneralPacket";
  }
  protected:
  explicit GCGuildChangeMemberGeneralPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPidFieldNumber = 1,
    kFlagFieldNumber = 2,
  };
  // uint32 pid = 1;
  void clear_pid();
  uint32_t pid() const;
  void set_pid(uint32_t value);
  private:
  uint32_t _internal_pid() const;
  void _internal_set_pid(uint32_t value);
  public:

  // bool flag = 2;
  void clear_flag();
  bool flag() const;
  void set_flag(bool value);
  private:
  bool _internal_flag() const;
  void _internal_set_flag(bool value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCGuildChangeMemberGeneralPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t pid_;
    bool flag_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCGuildInvitePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCGuildInvitePacket) */ {
 public:
  inline GCGuildInvitePacket() : GCGuildInvitePacket(nullptr) {}
  ~GCGuildInvitePacket() override;
  explicit PROTOBUF_CONSTEXPR GCGuildInvitePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCGuildInvitePacket(const GCGuildInvitePacket& from);
  GCGuildInvitePacket(GCGuildInvitePacket&& from) noexcept
    : GCGuildInvitePacket() {
    *this = ::std::move(from);
  }

  inline GCGuildInvitePacket& operator=(const GCGuildInvitePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCGuildInvitePacket& operator=(GCGuildInvitePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCGuildInvitePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCGuildInvitePacket* internal_default_instance() {
    return reinterpret_cast<const GCGuildInvitePacket*>(
               &_GCGuildInvitePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    191;

  friend void swap(GCGuildInvitePacket& a, GCGuildInvitePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCGuildInvitePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCGuildInvitePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCGuildInvitePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCGuildInvitePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCGuildInvitePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCGuildInvitePacket& from) {
    GCGuildInvitePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCGuildInvitePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCGuildInvitePacket";
  }
  protected:
  explicit GCGuildInvitePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGuildNameFieldNumber = 2,
    kGuildIdFieldNumber = 1,
  };
  // bytes guild_name = 2;
  void clear_guild_name();
  const std::string& guild_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_guild_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_guild_name();
  PROTOBUF_NODISCARD std::string* release_guild_name();
  void set_allocated_guild_name(std::string* guild_name);
  private:
  const std::string& _internal_guild_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_guild_name(const std::string& value);
  std::string* _internal_mutable_guild_name();
  public:

  // uint32 guild_id = 1;
  void clear_guild_id();
  uint32_t guild_id() const;
  void set_guild_id(uint32_t value);
  private:
  uint32_t _internal_guild_id() const;
  void _internal_set_guild_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCGuildInvitePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr guild_name_;
    uint32_t guild_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCGuildMemberLastPlayedPacket_MemberInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCGuildMemberLastPlayedPacket.MemberInfo) */ {
 public:
  inline GCGuildMemberLastPlayedPacket_MemberInfo() : GCGuildMemberLastPlayedPacket_MemberInfo(nullptr) {}
  ~GCGuildMemberLastPlayedPacket_MemberInfo() override;
  explicit PROTOBUF_CONSTEXPR GCGuildMemberLastPlayedPacket_MemberInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCGuildMemberLastPlayedPacket_MemberInfo(const GCGuildMemberLastPlayedPacket_MemberInfo& from);
  GCGuildMemberLastPlayedPacket_MemberInfo(GCGuildMemberLastPlayedPacket_MemberInfo&& from) noexcept
    : GCGuildMemberLastPlayedPacket_MemberInfo() {
    *this = ::std::move(from);
  }

  inline GCGuildMemberLastPlayedPacket_MemberInfo& operator=(const GCGuildMemberLastPlayedPacket_MemberInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCGuildMemberLastPlayedPacket_MemberInfo& operator=(GCGuildMemberLastPlayedPacket_MemberInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCGuildMemberLastPlayedPacket_MemberInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCGuildMemberLastPlayedPacket_MemberInfo* internal_default_instance() {
    return reinterpret_cast<const GCGuildMemberLastPlayedPacket_MemberInfo*>(
               &_GCGuildMemberLastPlayedPacket_MemberInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    192;

  friend void swap(GCGuildMemberLastPlayedPacket_MemberInfo& a, GCGuildMemberLastPlayedPacket_MemberInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(GCGuildMemberLastPlayedPacket_MemberInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCGuildMemberLastPlayedPacket_MemberInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCGuildMemberLastPlayedPacket_MemberInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCGuildMemberLastPlayedPacket_MemberInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCGuildMemberLastPlayedPacket_MemberInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCGuildMemberLastPlayedPacket_MemberInfo& from) {
    GCGuildMemberLastPlayedPacket_MemberInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCGuildMemberLastPlayedPacket_MemberInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCGuildMemberLastPlayedPacket.MemberInfo";
  }
  protected:
  explicit GCGuildMemberLastPlayedPacket_MemberInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPidFieldNumber = 1,
    kTimestampFieldNumber = 2,
  };
  // uint32 pid = 1;
  void clear_pid();
  uint32_t pid() const;
  void set_pid(uint32_t value);
  private:
  uint32_t _internal_pid() const;
  void _internal_set_pid(uint32_t value);
  public:

  // uint32 timestamp = 2;
  void clear_timestamp();
  uint32_t timestamp() const;
  void set_timestamp(uint32_t value);
  private:
  uint32_t _internal_timestamp() const;
  void _internal_set_timestamp(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCGuildMemberLastPlayedPacket.MemberInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t pid_;
    uint32_t timestamp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCGuildMemberLastPlayedPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCGuildMemberLastPlayedPacket) */ {
 public:
  inline GCGuildMemberLastPlayedPacket() : GCGuildMemberLastPlayedPacket(nullptr) {}
  ~GCGuildMemberLastPlayedPacket() override;
  explicit PROTOBUF_CONSTEXPR GCGuildMemberLastPlayedPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCGuildMemberLastPlayedPacket(const GCGuildMemberLastPlayedPacket& from);
  GCGuildMemberLastPlayedPacket(GCGuildMemberLastPlayedPacket&& from) noexcept
    : GCGuildMemberLastPlayedPacket() {
    *this = ::std::move(from);
  }

  inline GCGuildMemberLastPlayedPacket& operator=(const GCGuildMemberLastPlayedPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCGuildMemberLastPlayedPacket& operator=(GCGuildMemberLastPlayedPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCGuildMemberLastPlayedPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCGuildMemberLastPlayedPacket* internal_default_instance() {
    return reinterpret_cast<const GCGuildMemberLastPlayedPacket*>(
               &_GCGuildMemberLastPlayedPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    193;

  friend void swap(GCGuildMemberLastPlayedPacket& a, GCGuildMemberLastPlayedPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCGuildMemberLastPlayedPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCGuildMemberLastPlayedPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCGuildMemberLastPlayedPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCGuildMemberLastPlayedPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCGuildMemberLastPlayedPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCGuildMemberLastPlayedPacket& from) {
    GCGuildMemberLastPlayedPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCGuildMemberLastPlayedPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCGuildMemberLastPlayedPacket";
  }
  protected:
  explicit GCGuildMemberLastPlayedPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GCGuildMemberLastPlayedPacket_MemberInfo MemberInfo;

  // accessors -------------------------------------------------------

  enum : int {
    kMembersFieldNumber = 1,
  };
  // repeated .network.GCGuildMemberLastPlayedPacket.MemberInfo members = 1;
  int members_size() const;
  private:
  int _internal_members_size() const;
  public:
  void clear_members();
  ::network::GCGuildMemberLastPlayedPacket_MemberInfo* mutable_members(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::GCGuildMemberLastPlayedPacket_MemberInfo >*
      mutable_members();
  private:
  const ::network::GCGuildMemberLastPlayedPacket_MemberInfo& _internal_members(int index) const;
  ::network::GCGuildMemberLastPlayedPacket_MemberInfo* _internal_add_members();
  public:
  const ::network::GCGuildMemberLastPlayedPacket_MemberInfo& members(int index) const;
  ::network::GCGuildMemberLastPlayedPacket_MemberInfo* add_members();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::GCGuildMemberLastPlayedPacket_MemberInfo >&
      members() const;

  // @@protoc_insertion_point(class_scope:network.GCGuildMemberLastPlayedPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::GCGuildMemberLastPlayedPacket_MemberInfo > members_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCGuildBattleStatsPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCGuildBattleStatsPacket) */ {
 public:
  inline GCGuildBattleStatsPacket() : GCGuildBattleStatsPacket(nullptr) {}
  ~GCGuildBattleStatsPacket() override;
  explicit PROTOBUF_CONSTEXPR GCGuildBattleStatsPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCGuildBattleStatsPacket(const GCGuildBattleStatsPacket& from);
  GCGuildBattleStatsPacket(GCGuildBattleStatsPacket&& from) noexcept
    : GCGuildBattleStatsPacket() {
    *this = ::std::move(from);
  }

  inline GCGuildBattleStatsPacket& operator=(const GCGuildBattleStatsPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCGuildBattleStatsPacket& operator=(GCGuildBattleStatsPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCGuildBattleStatsPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCGuildBattleStatsPacket* internal_default_instance() {
    return reinterpret_cast<const GCGuildBattleStatsPacket*>(
               &_GCGuildBattleStatsPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    194;

  friend void swap(GCGuildBattleStatsPacket& a, GCGuildBattleStatsPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCGuildBattleStatsPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCGuildBattleStatsPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCGuildBattleStatsPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCGuildBattleStatsPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCGuildBattleStatsPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCGuildBattleStatsPacket& from) {
    GCGuildBattleStatsPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCGuildBattleStatsPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCGuildBattleStatsPacket";
  }
  protected:
  explicit GCGuildBattleStatsPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWinsFieldNumber = 1,
    kDrawsFieldNumber = 2,
    kLossesFieldNumber = 3,
  };
  // repeated int32 wins = 1;
  int wins_size() const;
  private:
  int _internal_wins_size() const;
  public:
  void clear_wins();
  private:
  int32_t _internal_wins(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_wins() const;
  void _internal_add_wins(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_wins();
  public:
  int32_t wins(int index) const;
  void set_wins(int index, int32_t value);
  void add_wins(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      wins() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_wins();

  // repeated int32 draws = 2;
  int draws_size() const;
  private:
  int _internal_draws_size() const;
  public:
  void clear_draws();
  private:
  int32_t _internal_draws(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_draws() const;
  void _internal_add_draws(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_draws();
  public:
  int32_t draws(int index) const;
  void set_draws(int index, int32_t value);
  void add_draws(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      draws() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_draws();

  // repeated int32 losses = 3;
  int losses_size() const;
  private:
  int _internal_losses_size() const;
  public:
  void clear_losses();
  private:
  int32_t _internal_losses(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_losses() const;
  void _internal_add_losses(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_losses();
  public:
  int32_t losses(int index) const;
  void set_losses(int index, int32_t value);
  void add_losses(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      losses() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_losses();

  // @@protoc_insertion_point(class_scope:network.GCGuildBattleStatsPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > wins_;
    mutable std::atomic<int> _wins_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > draws_;
    mutable std::atomic<int> _draws_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > losses_;
    mutable std::atomic<int> _losses_cached_byte_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCGuildWarPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCGuildWarPacket) */ {
 public:
  inline GCGuildWarPacket() : GCGuildWarPacket(nullptr) {}
  ~GCGuildWarPacket() override;
  explicit PROTOBUF_CONSTEXPR GCGuildWarPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCGuildWarPacket(const GCGuildWarPacket& from);
  GCGuildWarPacket(GCGuildWarPacket&& from) noexcept
    : GCGuildWarPacket() {
    *this = ::std::move(from);
  }

  inline GCGuildWarPacket& operator=(const GCGuildWarPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCGuildWarPacket& operator=(GCGuildWarPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCGuildWarPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCGuildWarPacket* internal_default_instance() {
    return reinterpret_cast<const GCGuildWarPacket*>(
               &_GCGuildWarPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    195;

  friend void swap(GCGuildWarPacket& a, GCGuildWarPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCGuildWarPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCGuildWarPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCGuildWarPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCGuildWarPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCGuildWarPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCGuildWarPacket& from) {
    GCGuildWarPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCGuildWarPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCGuildWarPacket";
  }
  protected:
  explicit GCGuildWarPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGuildSelfFieldNumber = 1,
    kGuildOpponentFieldNumber = 2,
    kTypeFieldNumber = 3,
    kWarStateFieldNumber = 4,
  };
  // uint32 guild_self = 1;
  void clear_guild_self();
  uint32_t guild_self() const;
  void set_guild_self(uint32_t value);
  private:
  uint32_t _internal_guild_self() const;
  void _internal_set_guild_self(uint32_t value);
  public:

  // uint32 guild_opponent = 2;
  void clear_guild_opponent();
  uint32_t guild_opponent() const;
  void set_guild_opponent(uint32_t value);
  private:
  uint32_t _internal_guild_opponent() const;
  void _internal_set_guild_opponent(uint32_t value);
  public:

  // uint32 type = 3;
  void clear_type();
  uint32_t type() const;
  void set_type(uint32_t value);
  private:
  uint32_t _internal_type() const;
  void _internal_set_type(uint32_t value);
  public:

  // uint32 war_state = 4;
  void clear_war_state();
  uint32_t war_state() const;
  void set_war_state(uint32_t value);
  private:
  uint32_t _internal_war_state() const;
  void _internal_set_war_state(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCGuildWarPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t guild_self_;
    uint32_t guild_opponent_;
    uint32_t type_;
    uint32_t war_state_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCGuildNamePacket_NameInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCGuildNamePacket.NameInfo) */ {
 public:
  inline GCGuildNamePacket_NameInfo() : GCGuildNamePacket_NameInfo(nullptr) {}
  ~GCGuildNamePacket_NameInfo() override;
  explicit PROTOBUF_CONSTEXPR GCGuildNamePacket_NameInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCGuildNamePacket_NameInfo(const GCGuildNamePacket_NameInfo& from);
  GCGuildNamePacket_NameInfo(GCGuildNamePacket_NameInfo&& from) noexcept
    : GCGuildNamePacket_NameInfo() {
    *this = ::std::move(from);
  }

  inline GCGuildNamePacket_NameInfo& operator=(const GCGuildNamePacket_NameInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCGuildNamePacket_NameInfo& operator=(GCGuildNamePacket_NameInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCGuildNamePacket_NameInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCGuildNamePacket_NameInfo* internal_default_instance() {
    return reinterpret_cast<const GCGuildNamePacket_NameInfo*>(
               &_GCGuildNamePacket_NameInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    196;

  friend void swap(GCGuildNamePacket_NameInfo& a, GCGuildNamePacket_NameInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(GCGuildNamePacket_NameInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCGuildNamePacket_NameInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCGuildNamePacket_NameInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCGuildNamePacket_NameInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCGuildNamePacket_NameInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCGuildNamePacket_NameInfo& from) {
    GCGuildNamePacket_NameInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCGuildNamePacket_NameInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCGuildNamePacket.NameInfo";
  }
  protected:
  explicit GCGuildNamePacket_NameInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kGuildIdFieldNumber = 1,
  };
  // bytes name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 guild_id = 1;
  void clear_guild_id();
  uint32_t guild_id() const;
  void set_guild_id(uint32_t value);
  private:
  uint32_t _internal_guild_id() const;
  void _internal_set_guild_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCGuildNamePacket.NameInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    uint32_t guild_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCGuildNamePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCGuildNamePacket) */ {
 public:
  inline GCGuildNamePacket() : GCGuildNamePacket(nullptr) {}
  ~GCGuildNamePacket() override;
  explicit PROTOBUF_CONSTEXPR GCGuildNamePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCGuildNamePacket(const GCGuildNamePacket& from);
  GCGuildNamePacket(GCGuildNamePacket&& from) noexcept
    : GCGuildNamePacket() {
    *this = ::std::move(from);
  }

  inline GCGuildNamePacket& operator=(const GCGuildNamePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCGuildNamePacket& operator=(GCGuildNamePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCGuildNamePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCGuildNamePacket* internal_default_instance() {
    return reinterpret_cast<const GCGuildNamePacket*>(
               &_GCGuildNamePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    197;

  friend void swap(GCGuildNamePacket& a, GCGuildNamePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCGuildNamePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCGuildNamePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCGuildNamePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCGuildNamePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCGuildNamePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCGuildNamePacket& from) {
    GCGuildNamePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCGuildNamePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCGuildNamePacket";
  }
  protected:
  explicit GCGuildNamePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GCGuildNamePacket_NameInfo NameInfo;

  // accessors -------------------------------------------------------

  enum : int {
    kNamesFieldNumber = 1,
  };
  // repeated .network.GCGuildNamePacket.NameInfo names = 1;
  int names_size() const;
  private:
  int _internal_names_size() const;
  public:
  void clear_names();
  ::network::GCGuildNamePacket_NameInfo* mutable_names(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::GCGuildNamePacket_NameInfo >*
      mutable_names();
  private:
  const ::network::GCGuildNamePacket_NameInfo& _internal_names(int index) const;
  ::network::GCGuildNamePacket_NameInfo* _internal_add_names();
  public:
  const ::network::GCGuildNamePacket_NameInfo& names(int index) const;
  ::network::GCGuildNamePacket_NameInfo* add_names();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::GCGuildNamePacket_NameInfo >&
      names() const;

  // @@protoc_insertion_point(class_scope:network.GCGuildNamePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::GCGuildNamePacket_NameInfo > names_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCGuildWarListPacket_WarInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCGuildWarListPacket.WarInfo) */ {
 public:
  inline GCGuildWarListPacket_WarInfo() : GCGuildWarListPacket_WarInfo(nullptr) {}
  ~GCGuildWarListPacket_WarInfo() override;
  explicit PROTOBUF_CONSTEXPR GCGuildWarListPacket_WarInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCGuildWarListPacket_WarInfo(const GCGuildWarListPacket_WarInfo& from);
  GCGuildWarListPacket_WarInfo(GCGuildWarListPacket_WarInfo&& from) noexcept
    : GCGuildWarListPacket_WarInfo() {
    *this = ::std::move(from);
  }

  inline GCGuildWarListPacket_WarInfo& operator=(const GCGuildWarListPacket_WarInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCGuildWarListPacket_WarInfo& operator=(GCGuildWarListPacket_WarInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCGuildWarListPacket_WarInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCGuildWarListPacket_WarInfo* internal_default_instance() {
    return reinterpret_cast<const GCGuildWarListPacket_WarInfo*>(
               &_GCGuildWarListPacket_WarInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    198;

  friend void swap(GCGuildWarListPacket_WarInfo& a, GCGuildWarListPacket_WarInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(GCGuildWarListPacket_WarInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCGuildWarListPacket_WarInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCGuildWarListPacket_WarInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCGuildWarListPacket_WarInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCGuildWarListPacket_WarInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCGuildWarListPacket_WarInfo& from) {
    GCGuildWarListPacket_WarInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCGuildWarListPacket_WarInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCGuildWarListPacket.WarInfo";
  }
  protected:
  explicit GCGuildWarListPacket_WarInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSrcGuildIdFieldNumber = 1,
    kDstGuildIdFieldNumber = 2,
  };
  // uint32 src_guild_id = 1;
  void clear_src_guild_id();
  uint32_t src_guild_id() const;
  void set_src_guild_id(uint32_t value);
  private:
  uint32_t _internal_src_guild_id() const;
  void _internal_set_src_guild_id(uint32_t value);
  public:

  // uint32 dst_guild_id = 2;
  void clear_dst_guild_id();
  uint32_t dst_guild_id() const;
  void set_dst_guild_id(uint32_t value);
  private:
  uint32_t _internal_dst_guild_id() const;
  void _internal_set_dst_guild_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCGuildWarListPacket.WarInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t src_guild_id_;
    uint32_t dst_guild_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCGuildWarListPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCGuildWarListPacket) */ {
 public:
  inline GCGuildWarListPacket() : GCGuildWarListPacket(nullptr) {}
  ~GCGuildWarListPacket() override;
  explicit PROTOBUF_CONSTEXPR GCGuildWarListPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCGuildWarListPacket(const GCGuildWarListPacket& from);
  GCGuildWarListPacket(GCGuildWarListPacket&& from) noexcept
    : GCGuildWarListPacket() {
    *this = ::std::move(from);
  }

  inline GCGuildWarListPacket& operator=(const GCGuildWarListPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCGuildWarListPacket& operator=(GCGuildWarListPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCGuildWarListPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCGuildWarListPacket* internal_default_instance() {
    return reinterpret_cast<const GCGuildWarListPacket*>(
               &_GCGuildWarListPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    199;

  friend void swap(GCGuildWarListPacket& a, GCGuildWarListPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCGuildWarListPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCGuildWarListPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCGuildWarListPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCGuildWarListPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCGuildWarListPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCGuildWarListPacket& from) {
    GCGuildWarListPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCGuildWarListPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCGuildWarListPacket";
  }
  protected:
  explicit GCGuildWarListPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GCGuildWarListPacket_WarInfo WarInfo;

  // accessors -------------------------------------------------------

  enum : int {
    kWarsFieldNumber = 1,
  };
  // repeated .network.GCGuildWarListPacket.WarInfo wars = 1;
  int wars_size() const;
  private:
  int _internal_wars_size() const;
  public:
  void clear_wars();
  ::network::GCGuildWarListPacket_WarInfo* mutable_wars(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::GCGuildWarListPacket_WarInfo >*
      mutable_wars();
  private:
  const ::network::GCGuildWarListPacket_WarInfo& _internal_wars(int index) const;
  ::network::GCGuildWarListPacket_WarInfo* _internal_add_wars();
  public:
  const ::network::GCGuildWarListPacket_WarInfo& wars(int index) const;
  ::network::GCGuildWarListPacket_WarInfo* add_wars();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::GCGuildWarListPacket_WarInfo >&
      wars() const;

  // @@protoc_insertion_point(class_scope:network.GCGuildWarListPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::GCGuildWarListPacket_WarInfo > wars_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCGuildWarEndListPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCGuildWarEndListPacket) */ {
 public:
  inline GCGuildWarEndListPacket() : GCGuildWarEndListPacket(nullptr) {}
  ~GCGuildWarEndListPacket() override;
  explicit PROTOBUF_CONSTEXPR GCGuildWarEndListPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCGuildWarEndListPacket(const GCGuildWarEndListPacket& from);
  GCGuildWarEndListPacket(GCGuildWarEndListPacket&& from) noexcept
    : GCGuildWarEndListPacket() {
    *this = ::std::move(from);
  }

  inline GCGuildWarEndListPacket& operator=(const GCGuildWarEndListPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCGuildWarEndListPacket& operator=(GCGuildWarEndListPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCGuildWarEndListPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCGuildWarEndListPacket* internal_default_instance() {
    return reinterpret_cast<const GCGuildWarEndListPacket*>(
               &_GCGuildWarEndListPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    200;

  friend void swap(GCGuildWarEndListPacket& a, GCGuildWarEndListPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCGuildWarEndListPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCGuildWarEndListPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCGuildWarEndListPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCGuildWarEndListPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCGuildWarEndListPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCGuildWarEndListPacket& from) {
    GCGuildWarEndListPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCGuildWarEndListPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCGuildWarEndListPacket";
  }
  protected:
  explicit GCGuildWarEndListPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWarsFieldNumber = 1,
  };
  // repeated .network.GCGuildWarListPacket.WarInfo wars = 1;
  int wars_size() const;
  private:
  int _internal_wars_size() const;
  public:
  void clear_wars();
  ::network::GCGuildWarListPacket_WarInfo* mutable_wars(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::GCGuildWarListPacket_WarInfo >*
      mutable_wars();
  private:
  const ::network::GCGuildWarListPacket_WarInfo& _internal_wars(int index) const;
  ::network::GCGuildWarListPacket_WarInfo* _internal_add_wars();
  public:
  const ::network::GCGuildWarListPacket_WarInfo& wars(int index) const;
  ::network::GCGuildWarListPacket_WarInfo* add_wars();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::GCGuildWarListPacket_WarInfo >&
      wars() const;

  // @@protoc_insertion_point(class_scope:network.GCGuildWarEndListPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::GCGuildWarListPacket_WarInfo > wars_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCGuildWarPointPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCGuildWarPointPacket) */ {
 public:
  inline GCGuildWarPointPacket() : GCGuildWarPointPacket(nullptr) {}
  ~GCGuildWarPointPacket() override;
  explicit PROTOBUF_CONSTEXPR GCGuildWarPointPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCGuildWarPointPacket(const GCGuildWarPointPacket& from);
  GCGuildWarPointPacket(GCGuildWarPointPacket&& from) noexcept
    : GCGuildWarPointPacket() {
    *this = ::std::move(from);
  }

  inline GCGuildWarPointPacket& operator=(const GCGuildWarPointPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCGuildWarPointPacket& operator=(GCGuildWarPointPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCGuildWarPointPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCGuildWarPointPacket* internal_default_instance() {
    return reinterpret_cast<const GCGuildWarPointPacket*>(
               &_GCGuildWarPointPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    201;

  friend void swap(GCGuildWarPointPacket& a, GCGuildWarPointPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCGuildWarPointPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCGuildWarPointPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCGuildWarPointPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCGuildWarPointPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCGuildWarPointPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCGuildWarPointPacket& from) {
    GCGuildWarPointPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCGuildWarPointPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCGuildWarPointPacket";
  }
  protected:
  explicit GCGuildWarPointPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGainGuildIdFieldNumber = 1,
    kOpponentGuildIdFieldNumber = 2,
    kPointFieldNumber = 3,
  };
  // uint32 gain_guild_id = 1;
  void clear_gain_guild_id();
  uint32_t gain_guild_id() const;
  void set_gain_guild_id(uint32_t value);
  private:
  uint32_t _internal_gain_guild_id() const;
  void _internal_set_gain_guild_id(uint32_t value);
  public:

  // uint32 opponent_guild_id = 2;
  void clear_opponent_guild_id();
  uint32_t opponent_guild_id() const;
  void set_opponent_guild_id(uint32_t value);
  private:
  uint32_t _internal_opponent_guild_id() const;
  void _internal_set_opponent_guild_id(uint32_t value);
  public:

  // int32 point = 3;
  void clear_point();
  int32_t point() const;
  void set_point(int32_t value);
  private:
  int32_t _internal_point() const;
  void _internal_set_point(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCGuildWarPointPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t gain_guild_id_;
    uint32_t opponent_guild_id_;
    int32_t point_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCGuildMoneyChangePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCGuildMoneyChangePacket) */ {
 public:
  inline GCGuildMoneyChangePacket() : GCGuildMoneyChangePacket(nullptr) {}
  ~GCGuildMoneyChangePacket() override;
  explicit PROTOBUF_CONSTEXPR GCGuildMoneyChangePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCGuildMoneyChangePacket(const GCGuildMoneyChangePacket& from);
  GCGuildMoneyChangePacket(GCGuildMoneyChangePacket&& from) noexcept
    : GCGuildMoneyChangePacket() {
    *this = ::std::move(from);
  }

  inline GCGuildMoneyChangePacket& operator=(const GCGuildMoneyChangePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCGuildMoneyChangePacket& operator=(GCGuildMoneyChangePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCGuildMoneyChangePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCGuildMoneyChangePacket* internal_default_instance() {
    return reinterpret_cast<const GCGuildMoneyChangePacket*>(
               &_GCGuildMoneyChangePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    202;

  friend void swap(GCGuildMoneyChangePacket& a, GCGuildMoneyChangePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCGuildMoneyChangePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCGuildMoneyChangePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCGuildMoneyChangePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCGuildMoneyChangePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCGuildMoneyChangePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCGuildMoneyChangePacket& from) {
    GCGuildMoneyChangePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCGuildMoneyChangePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCGuildMoneyChangePacket";
  }
  protected:
  explicit GCGuildMoneyChangePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGoldFieldNumber = 1,
  };
  // uint32 gold = 1;
  void clear_gold();
  uint32_t gold() const;
  void set_gold(uint32_t value);
  private:
  uint32_t _internal_gold() const;
  void _internal_set_gold(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCGuildMoneyChangePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t gold_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCGuildSafeboxOpenPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCGuildSafeboxOpenPacket) */ {
 public:
  inline GCGuildSafeboxOpenPacket() : GCGuildSafeboxOpenPacket(nullptr) {}
  ~GCGuildSafeboxOpenPacket() override;
  explicit PROTOBUF_CONSTEXPR GCGuildSafeboxOpenPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCGuildSafeboxOpenPacket(const GCGuildSafeboxOpenPacket& from);
  GCGuildSafeboxOpenPacket(GCGuildSafeboxOpenPacket&& from) noexcept
    : GCGuildSafeboxOpenPacket() {
    *this = ::std::move(from);
  }

  inline GCGuildSafeboxOpenPacket& operator=(const GCGuildSafeboxOpenPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCGuildSafeboxOpenPacket& operator=(GCGuildSafeboxOpenPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCGuildSafeboxOpenPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCGuildSafeboxOpenPacket* internal_default_instance() {
    return reinterpret_cast<const GCGuildSafeboxOpenPacket*>(
               &_GCGuildSafeboxOpenPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    203;

  friend void swap(GCGuildSafeboxOpenPacket& a, GCGuildSafeboxOpenPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCGuildSafeboxOpenPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCGuildSafeboxOpenPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCGuildSafeboxOpenPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCGuildSafeboxOpenPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCGuildSafeboxOpenPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCGuildSafeboxOpenPacket& from) {
    GCGuildSafeboxOpenPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCGuildSafeboxOpenPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCGuildSafeboxOpenPacket";
  }
  protected:
  explicit GCGuildSafeboxOpenPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSizeFieldNumber = 1,
  };
  // uint32 size = 1;
  void clear_size();
  uint32_t size() const;
  void set_size(uint32_t value);
  private:
  uint32_t _internal_size() const;
  void _internal_set_size(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCGuildSafeboxOpenPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCGuildSafeboxGoldPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCGuildSafeboxGoldPacket) */ {
 public:
  inline GCGuildSafeboxGoldPacket() : GCGuildSafeboxGoldPacket(nullptr) {}
  ~GCGuildSafeboxGoldPacket() override;
  explicit PROTOBUF_CONSTEXPR GCGuildSafeboxGoldPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCGuildSafeboxGoldPacket(const GCGuildSafeboxGoldPacket& from);
  GCGuildSafeboxGoldPacket(GCGuildSafeboxGoldPacket&& from) noexcept
    : GCGuildSafeboxGoldPacket() {
    *this = ::std::move(from);
  }

  inline GCGuildSafeboxGoldPacket& operator=(const GCGuildSafeboxGoldPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCGuildSafeboxGoldPacket& operator=(GCGuildSafeboxGoldPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCGuildSafeboxGoldPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCGuildSafeboxGoldPacket* internal_default_instance() {
    return reinterpret_cast<const GCGuildSafeboxGoldPacket*>(
               &_GCGuildSafeboxGoldPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    204;

  friend void swap(GCGuildSafeboxGoldPacket& a, GCGuildSafeboxGoldPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCGuildSafeboxGoldPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCGuildSafeboxGoldPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCGuildSafeboxGoldPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCGuildSafeboxGoldPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCGuildSafeboxGoldPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCGuildSafeboxGoldPacket& from) {
    GCGuildSafeboxGoldPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCGuildSafeboxGoldPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCGuildSafeboxGoldPacket";
  }
  protected:
  explicit GCGuildSafeboxGoldPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGoldFieldNumber = 1,
  };
  // uint64 gold = 1;
  void clear_gold();
  uint64_t gold() const;
  void set_gold(uint64_t value);
  private:
  uint64_t _internal_gold() const;
  void _internal_set_gold(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCGuildSafeboxGoldPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t gold_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCGuildSafeboxLoadLogPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCGuildSafeboxLoadLogPacket) */ {
 public:
  inline GCGuildSafeboxLoadLogPacket() : GCGuildSafeboxLoadLogPacket(nullptr) {}
  ~GCGuildSafeboxLoadLogPacket() override;
  explicit PROTOBUF_CONSTEXPR GCGuildSafeboxLoadLogPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCGuildSafeboxLoadLogPacket(const GCGuildSafeboxLoadLogPacket& from);
  GCGuildSafeboxLoadLogPacket(GCGuildSafeboxLoadLogPacket&& from) noexcept
    : GCGuildSafeboxLoadLogPacket() {
    *this = ::std::move(from);
  }

  inline GCGuildSafeboxLoadLogPacket& operator=(const GCGuildSafeboxLoadLogPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCGuildSafeboxLoadLogPacket& operator=(GCGuildSafeboxLoadLogPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCGuildSafeboxLoadLogPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCGuildSafeboxLoadLogPacket* internal_default_instance() {
    return reinterpret_cast<const GCGuildSafeboxLoadLogPacket*>(
               &_GCGuildSafeboxLoadLogPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    205;

  friend void swap(GCGuildSafeboxLoadLogPacket& a, GCGuildSafeboxLoadLogPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCGuildSafeboxLoadLogPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCGuildSafeboxLoadLogPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCGuildSafeboxLoadLogPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCGuildSafeboxLoadLogPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCGuildSafeboxLoadLogPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCGuildSafeboxLoadLogPacket& from) {
    GCGuildSafeboxLoadLogPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCGuildSafeboxLoadLogPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCGuildSafeboxLoadLogPacket";
  }
  protected:
  explicit GCGuildSafeboxLoadLogPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLogsFieldNumber = 1,
  };
  // repeated .network.TGuildSafeboxLogTable logs = 1;
  int logs_size() const;
  private:
  int _internal_logs_size() const;
  public:
  void clear_logs();
  ::network::TGuildSafeboxLogTable* mutable_logs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TGuildSafeboxLogTable >*
      mutable_logs();
  private:
  const ::network::TGuildSafeboxLogTable& _internal_logs(int index) const;
  ::network::TGuildSafeboxLogTable* _internal_add_logs();
  public:
  const ::network::TGuildSafeboxLogTable& logs(int index) const;
  ::network::TGuildSafeboxLogTable* add_logs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TGuildSafeboxLogTable >&
      logs() const;

  // @@protoc_insertion_point(class_scope:network.GCGuildSafeboxLoadLogPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TGuildSafeboxLogTable > logs_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCGuildSafeboxAppendLogPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCGuildSafeboxAppendLogPacket) */ {
 public:
  inline GCGuildSafeboxAppendLogPacket() : GCGuildSafeboxAppendLogPacket(nullptr) {}
  ~GCGuildSafeboxAppendLogPacket() override;
  explicit PROTOBUF_CONSTEXPR GCGuildSafeboxAppendLogPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCGuildSafeboxAppendLogPacket(const GCGuildSafeboxAppendLogPacket& from);
  GCGuildSafeboxAppendLogPacket(GCGuildSafeboxAppendLogPacket&& from) noexcept
    : GCGuildSafeboxAppendLogPacket() {
    *this = ::std::move(from);
  }

  inline GCGuildSafeboxAppendLogPacket& operator=(const GCGuildSafeboxAppendLogPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCGuildSafeboxAppendLogPacket& operator=(GCGuildSafeboxAppendLogPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCGuildSafeboxAppendLogPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCGuildSafeboxAppendLogPacket* internal_default_instance() {
    return reinterpret_cast<const GCGuildSafeboxAppendLogPacket*>(
               &_GCGuildSafeboxAppendLogPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    206;

  friend void swap(GCGuildSafeboxAppendLogPacket& a, GCGuildSafeboxAppendLogPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCGuildSafeboxAppendLogPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCGuildSafeboxAppendLogPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCGuildSafeboxAppendLogPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCGuildSafeboxAppendLogPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCGuildSafeboxAppendLogPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCGuildSafeboxAppendLogPacket& from) {
    GCGuildSafeboxAppendLogPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCGuildSafeboxAppendLogPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCGuildSafeboxAppendLogPacket";
  }
  protected:
  explicit GCGuildSafeboxAppendLogPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLogFieldNumber = 1,
  };
  // .network.TGuildSafeboxLogTable log = 1;
  bool has_log() const;
  private:
  bool _internal_has_log() const;
  public:
  void clear_log();
  const ::network::TGuildSafeboxLogTable& log() const;
  PROTOBUF_NODISCARD ::network::TGuildSafeboxLogTable* release_log();
  ::network::TGuildSafeboxLogTable* mutable_log();
  void set_allocated_log(::network::TGuildSafeboxLogTable* log);
  private:
  const ::network::TGuildSafeboxLogTable& _internal_log() const;
  ::network::TGuildSafeboxLogTable* _internal_mutable_log();
  public:
  void unsafe_arena_set_allocated_log(
      ::network::TGuildSafeboxLogTable* log);
  ::network::TGuildSafeboxLogTable* unsafe_arena_release_log();

  // @@protoc_insertion_point(class_scope:network.GCGuildSafeboxAppendLogPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::network::TGuildSafeboxLogTable* log_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCGuildLadderListPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCGuildLadderListPacket) */ {
 public:
  inline GCGuildLadderListPacket() : GCGuildLadderListPacket(nullptr) {}
  ~GCGuildLadderListPacket() override;
  explicit PROTOBUF_CONSTEXPR GCGuildLadderListPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCGuildLadderListPacket(const GCGuildLadderListPacket& from);
  GCGuildLadderListPacket(GCGuildLadderListPacket&& from) noexcept
    : GCGuildLadderListPacket() {
    *this = ::std::move(from);
  }

  inline GCGuildLadderListPacket& operator=(const GCGuildLadderListPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCGuildLadderListPacket& operator=(GCGuildLadderListPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCGuildLadderListPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCGuildLadderListPacket* internal_default_instance() {
    return reinterpret_cast<const GCGuildLadderListPacket*>(
               &_GCGuildLadderListPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    207;

  friend void swap(GCGuildLadderListPacket& a, GCGuildLadderListPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCGuildLadderListPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCGuildLadderListPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCGuildLadderListPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCGuildLadderListPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCGuildLadderListPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCGuildLadderListPacket& from) {
    GCGuildLadderListPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCGuildLadderListPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCGuildLadderListPacket";
  }
  protected:
  explicit GCGuildLadderListPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLaddersFieldNumber = 1,
    kPageNumberFieldNumber = 2,
    kTotalPagesFieldNumber = 3,
  };
  // repeated .network.TGuildLadderInfo ladders = 1;
  int ladders_size() const;
  private:
  int _internal_ladders_size() const;
  public:
  void clear_ladders();
  ::network::TGuildLadderInfo* mutable_ladders(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TGuildLadderInfo >*
      mutable_ladders();
  private:
  const ::network::TGuildLadderInfo& _internal_ladders(int index) const;
  ::network::TGuildLadderInfo* _internal_add_ladders();
  public:
  const ::network::TGuildLadderInfo& ladders(int index) const;
  ::network::TGuildLadderInfo* add_ladders();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TGuildLadderInfo >&
      ladders() const;

  // uint32 page_number = 2;
  void clear_page_number();
  uint32_t page_number() const;
  void set_page_number(uint32_t value);
  private:
  uint32_t _internal_page_number() const;
  void _internal_set_page_number(uint32_t value);
  public:

  // uint32 total_pages = 3;
  void clear_total_pages();
  uint32_t total_pages() const;
  void set_total_pages(uint32_t value);
  private:
  uint32_t _internal_total_pages() const;
  void _internal_set_total_pages(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCGuildLadderListPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TGuildLadderInfo > ladders_;
    uint32_t page_number_;
    uint32_t total_pages_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCGuildLadderSearchResultPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCGuildLadderSearchResultPacket) */ {
 public:
  inline GCGuildLadderSearchResultPacket() : GCGuildLadderSearchResultPacket(nullptr) {}
  ~GCGuildLadderSearchResultPacket() override;
  explicit PROTOBUF_CONSTEXPR GCGuildLadderSearchResultPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCGuildLadderSearchResultPacket(const GCGuildLadderSearchResultPacket& from);
  GCGuildLadderSearchResultPacket(GCGuildLadderSearchResultPacket&& from) noexcept
    : GCGuildLadderSearchResultPacket() {
    *this = ::std::move(from);
  }

  inline GCGuildLadderSearchResultPacket& operator=(const GCGuildLadderSearchResultPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCGuildLadderSearchResultPacket& operator=(GCGuildLadderSearchResultPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCGuildLadderSearchResultPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCGuildLadderSearchResultPacket* internal_default_instance() {
    return reinterpret_cast<const GCGuildLadderSearchResultPacket*>(
               &_GCGuildLadderSearchResultPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    208;

  friend void swap(GCGuildLadderSearchResultPacket& a, GCGuildLadderSearchResultPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCGuildLadderSearchResultPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCGuildLadderSearchResultPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCGuildLadderSearchResultPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCGuildLadderSearchResultPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCGuildLadderSearchResultPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCGuildLadderSearchResultPacket& from) {
    GCGuildLadderSearchResultPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCGuildLadderSearchResultPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCGuildLadderSearchResultPacket";
  }
  protected:
  explicit GCGuildLadderSearchResultPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLadderFieldNumber = 1,
    kRankFieldNumber = 2,
  };
  // .network.TGuildLadderInfo ladder = 1;
  bool has_ladder() const;
  private:
  bool _internal_has_ladder() const;
  public:
  void clear_ladder();
  const ::network::TGuildLadderInfo& ladder() const;
  PROTOBUF_NODISCARD ::network::TGuildLadderInfo* release_ladder();
  ::network::TGuildLadderInfo* mutable_ladder();
  void set_allocated_ladder(::network::TGuildLadderInfo* ladder);
  private:
  const ::network::TGuildLadderInfo& _internal_ladder() const;
  ::network::TGuildLadderInfo* _internal_mutable_ladder();
  public:
  void unsafe_arena_set_allocated_ladder(
      ::network::TGuildLadderInfo* ladder);
  ::network::TGuildLadderInfo* unsafe_arena_release_ladder();

  // uint32 rank = 2;
  void clear_rank();
  uint32_t rank() const;
  void set_rank(uint32_t value);
  private:
  uint32_t _internal_rank() const;
  void _internal_set_rank(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCGuildLadderSearchResultPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::network::TGuildLadderInfo* ladder_;
    uint32_t rank_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCGuildRankAndPointPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCGuildRankAndPointPacket) */ {
 public:
  inline GCGuildRankAndPointPacket() : GCGuildRankAndPointPacket(nullptr) {}
  ~GCGuildRankAndPointPacket() override;
  explicit PROTOBUF_CONSTEXPR GCGuildRankAndPointPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCGuildRankAndPointPacket(const GCGuildRankAndPointPacket& from);
  GCGuildRankAndPointPacket(GCGuildRankAndPointPacket&& from) noexcept
    : GCGuildRankAndPointPacket() {
    *this = ::std::move(from);
  }

  inline GCGuildRankAndPointPacket& operator=(const GCGuildRankAndPointPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCGuildRankAndPointPacket& operator=(GCGuildRankAndPointPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCGuildRankAndPointPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCGuildRankAndPointPacket* internal_default_instance() {
    return reinterpret_cast<const GCGuildRankAndPointPacket*>(
               &_GCGuildRankAndPointPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    209;

  friend void swap(GCGuildRankAndPointPacket& a, GCGuildRankAndPointPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCGuildRankAndPointPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCGuildRankAndPointPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCGuildRankAndPointPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCGuildRankAndPointPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCGuildRankAndPointPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCGuildRankAndPointPacket& from) {
    GCGuildRankAndPointPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCGuildRankAndPointPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCGuildRankAndPointPacket";
  }
  protected:
  explicit GCGuildRankAndPointPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointFieldNumber = 1,
    kRankFieldNumber = 2,
  };
  // int32 point = 1;
  void clear_point();
  int32_t point() const;
  void set_point(int32_t value);
  private:
  int32_t _internal_point() const;
  void _internal_set_point(int32_t value);
  public:

  // uint32 rank = 2;
  void clear_rank();
  uint32_t rank() const;
  void set_rank(uint32_t value);
  private:
  uint32_t _internal_rank() const;
  void _internal_set_rank(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCGuildRankAndPointPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t point_;
    uint32_t rank_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCGuildSymbolDataPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCGuildSymbolDataPacket) */ {
 public:
  inline GCGuildSymbolDataPacket() : GCGuildSymbolDataPacket(nullptr) {}
  ~GCGuildSymbolDataPacket() override;
  explicit PROTOBUF_CONSTEXPR GCGuildSymbolDataPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCGuildSymbolDataPacket(const GCGuildSymbolDataPacket& from);
  GCGuildSymbolDataPacket(GCGuildSymbolDataPacket&& from) noexcept
    : GCGuildSymbolDataPacket() {
    *this = ::std::move(from);
  }

  inline GCGuildSymbolDataPacket& operator=(const GCGuildSymbolDataPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCGuildSymbolDataPacket& operator=(GCGuildSymbolDataPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCGuildSymbolDataPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCGuildSymbolDataPacket* internal_default_instance() {
    return reinterpret_cast<const GCGuildSymbolDataPacket*>(
               &_GCGuildSymbolDataPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    210;

  friend void swap(GCGuildSymbolDataPacket& a, GCGuildSymbolDataPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCGuildSymbolDataPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCGuildSymbolDataPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCGuildSymbolDataPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCGuildSymbolDataPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCGuildSymbolDataPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCGuildSymbolDataPacket& from) {
    GCGuildSymbolDataPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCGuildSymbolDataPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCGuildSymbolDataPacket";
  }
  protected:
  explicit GCGuildSymbolDataPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImageFieldNumber = 2,
    kGuildIdFieldNumber = 1,
  };
  // bytes image = 2;
  void clear_image();
  const std::string& image() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_image(ArgT0&& arg0, ArgT... args);
  std::string* mutable_image();
  PROTOBUF_NODISCARD std::string* release_image();
  void set_allocated_image(std::string* image);
  private:
  const std::string& _internal_image() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_image(const std::string& value);
  std::string* _internal_mutable_image();
  public:

  // uint32 guild_id = 1;
  void clear_guild_id();
  uint32_t guild_id() const;
  void set_guild_id(uint32_t value);
  private:
  uint32_t _internal_guild_id() const;
  void _internal_set_guild_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCGuildSymbolDataPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_;
    uint32_t guild_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCMarkIDXListPacket_Element final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCMarkIDXListPacket.Element) */ {
 public:
  inline GCMarkIDXListPacket_Element() : GCMarkIDXListPacket_Element(nullptr) {}
  ~GCMarkIDXListPacket_Element() override;
  explicit PROTOBUF_CONSTEXPR GCMarkIDXListPacket_Element(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCMarkIDXListPacket_Element(const GCMarkIDXListPacket_Element& from);
  GCMarkIDXListPacket_Element(GCMarkIDXListPacket_Element&& from) noexcept
    : GCMarkIDXListPacket_Element() {
    *this = ::std::move(from);
  }

  inline GCMarkIDXListPacket_Element& operator=(const GCMarkIDXListPacket_Element& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCMarkIDXListPacket_Element& operator=(GCMarkIDXListPacket_Element&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCMarkIDXListPacket_Element& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCMarkIDXListPacket_Element* internal_default_instance() {
    return reinterpret_cast<const GCMarkIDXListPacket_Element*>(
               &_GCMarkIDXListPacket_Element_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    211;

  friend void swap(GCMarkIDXListPacket_Element& a, GCMarkIDXListPacket_Element& b) {
    a.Swap(&b);
  }
  inline void Swap(GCMarkIDXListPacket_Element* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCMarkIDXListPacket_Element* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCMarkIDXListPacket_Element* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCMarkIDXListPacket_Element>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCMarkIDXListPacket_Element& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCMarkIDXListPacket_Element& from) {
    GCMarkIDXListPacket_Element::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCMarkIDXListPacket_Element* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCMarkIDXListPacket.Element";
  }
  protected:
  explicit GCMarkIDXListPacket_Element(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGuildIdFieldNumber = 1,
    kMarkIdFieldNumber = 2,
  };
  // uint32 guild_id = 1;
  void clear_guild_id();
  uint32_t guild_id() const;
  void set_guild_id(uint32_t value);
  private:
  uint32_t _internal_guild_id() const;
  void _internal_set_guild_id(uint32_t value);
  public:

  // uint32 mark_id = 2;
  void clear_mark_id();
  uint32_t mark_id() const;
  void set_mark_id(uint32_t value);
  private:
  uint32_t _internal_mark_id() const;
  void _internal_set_mark_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCMarkIDXListPacket.Element)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t guild_id_;
    uint32_t mark_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCMarkIDXListPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCMarkIDXListPacket) */ {
 public:
  inline GCMarkIDXListPacket() : GCMarkIDXListPacket(nullptr) {}
  ~GCMarkIDXListPacket() override;
  explicit PROTOBUF_CONSTEXPR GCMarkIDXListPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCMarkIDXListPacket(const GCMarkIDXListPacket& from);
  GCMarkIDXListPacket(GCMarkIDXListPacket&& from) noexcept
    : GCMarkIDXListPacket() {
    *this = ::std::move(from);
  }

  inline GCMarkIDXListPacket& operator=(const GCMarkIDXListPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCMarkIDXListPacket& operator=(GCMarkIDXListPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCMarkIDXListPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCMarkIDXListPacket* internal_default_instance() {
    return reinterpret_cast<const GCMarkIDXListPacket*>(
               &_GCMarkIDXListPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    212;

  friend void swap(GCMarkIDXListPacket& a, GCMarkIDXListPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCMarkIDXListPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCMarkIDXListPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCMarkIDXListPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCMarkIDXListPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCMarkIDXListPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCMarkIDXListPacket& from) {
    GCMarkIDXListPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCMarkIDXListPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCMarkIDXListPacket";
  }
  protected:
  explicit GCMarkIDXListPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GCMarkIDXListPacket_Element Element;

  // accessors -------------------------------------------------------

  enum : int {
    kElemsFieldNumber = 1,
  };
  // repeated .network.GCMarkIDXListPacket.Element elems = 1;
  int elems_size() const;
  private:
  int _internal_elems_size() const;
  public:
  void clear_elems();
  ::network::GCMarkIDXListPacket_Element* mutable_elems(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::GCMarkIDXListPacket_Element >*
      mutable_elems();
  private:
  const ::network::GCMarkIDXListPacket_Element& _internal_elems(int index) const;
  ::network::GCMarkIDXListPacket_Element* _internal_add_elems();
  public:
  const ::network::GCMarkIDXListPacket_Element& elems(int index) const;
  ::network::GCMarkIDXListPacket_Element* add_elems();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::GCMarkIDXListPacket_Element >&
      elems() const;

  // @@protoc_insertion_point(class_scope:network.GCMarkIDXListPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::GCMarkIDXListPacket_Element > elems_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GCMarkBlockPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GCMarkBlockPacket) */ {
 public:
  inline GCMarkBlockPacket() : GCMarkBlockPacket(nullptr) {}
  ~GCMarkBlockPacket() override;
  explicit PROTOBUF_CONSTEXPR GCMarkBlockPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GCMarkBlockPacket(const GCMarkBlockPacket& from);
  GCMarkBlockPacket(GCMarkBlockPacket&& from) noexcept
    : GCMarkBlockPacket() {
    *this = ::std::move(from);
  }

  inline GCMarkBlockPacket& operator=(const GCMarkBlockPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCMarkBlockPacket& operator=(GCMarkBlockPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GCMarkBlockPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GCMarkBlockPacket* internal_default_instance() {
    return reinterpret_cast<const GCMarkBlockPacket*>(
               &_GCMarkBlockPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    213;

  friend void swap(GCMarkBlockPacket& a, GCMarkBlockPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GCMarkBlockPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCMarkBlockPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GCMarkBlockPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GCMarkBlockPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GCMarkBlockPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GCMarkBlockPacket& from) {
    GCMarkBlockPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCMarkBlockPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GCMarkBlockPacket";
  }
  protected:
  explicit GCMarkBlockPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImageFieldNumber = 3,
    kImageIndexFieldNumber = 1,
    kBlockCountFieldNumber = 2,
  };
  // bytes image = 3;
  void clear_image();
  const std::string& image() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_image(ArgT0&& arg0, ArgT... args);
  std::string* mutable_image();
  PROTOBUF_NODISCARD std::string* release_image();
  void set_allocated_image(std::string* image);
  private:
  const std::string& _internal_image() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_image(const std::string& value);
  std::string* _internal_mutable_image();
  public:

  // uint32 image_index = 1;
  void clear_image_index();
  uint32_t image_index() const;
  void set_image_index(uint32_t value);
  private:
  uint32_t _internal_image_index() const;
  void _internal_set_image_index(uint32_t value);
  public:

  // uint32 block_count = 2;
  void clear_block_count();
  uint32_t block_count() const;
  void set_block_count(uint32_t value);
  private:
  uint32_t _internal_block_count() const;
  void _internal_set_block_count(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GCMarkBlockPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_;
    uint32_t image_index_;
    uint32_t block_count_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gc_5fpackets_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GCSetVerifyKeyPacket

// uint32 verify_key = 1;
inline void GCSetVerifyKeyPacket::clear_verify_key() {
  _impl_.verify_key_ = 0u;
}
inline uint32_t GCSetVerifyKeyPacket::_internal_verify_key() const {
  return _impl_.verify_key_;
}
inline uint32_t GCSetVerifyKeyPacket::verify_key() const {
  // @@protoc_insertion_point(field_get:network.GCSetVerifyKeyPacket.verify_key)
  return _internal_verify_key();
}
inline void GCSetVerifyKeyPacket::_internal_set_verify_key(uint32_t value) {
  
  _impl_.verify_key_ = value;
}
inline void GCSetVerifyKeyPacket::set_verify_key(uint32_t value) {
  _internal_set_verify_key(value);
  // @@protoc_insertion_point(field_set:network.GCSetVerifyKeyPacket.verify_key)
}

// -------------------------------------------------------------------

// GCLoginFailurePacket

// bytes status = 1;
inline void GCLoginFailurePacket::clear_status() {
  _impl_.status_.ClearToEmpty();
}
inline const std::string& GCLoginFailurePacket::status() const {
  // @@protoc_insertion_point(field_get:network.GCLoginFailurePacket.status)
  return _internal_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GCLoginFailurePacket::set_status(ArgT0&& arg0, ArgT... args) {
 
 _impl_.status_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GCLoginFailurePacket.status)
}
inline std::string* GCLoginFailurePacket::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:network.GCLoginFailurePacket.status)
  return _s;
}
inline const std::string& GCLoginFailurePacket::_internal_status() const {
  return _impl_.status_.Get();
}
inline void GCLoginFailurePacket::_internal_set_status(const std::string& value) {
  
  _impl_.status_.Set(value, GetArenaForAllocation());
}
inline std::string* GCLoginFailurePacket::_internal_mutable_status() {
  
  return _impl_.status_.Mutable(GetArenaForAllocation());
}
inline std::string* GCLoginFailurePacket::release_status() {
  // @@protoc_insertion_point(field_release:network.GCLoginFailurePacket.status)
  return _impl_.status_.Release();
}
inline void GCLoginFailurePacket::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  _impl_.status_.SetAllocated(status, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.status_.IsDefault()) {
    _impl_.status_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GCLoginFailurePacket.status)
}

// int32 data = 2;
inline void GCLoginFailurePacket::clear_data() {
  _impl_.data_ = 0;
}
inline int32_t GCLoginFailurePacket::_internal_data() const {
  return _impl_.data_;
}
inline int32_t GCLoginFailurePacket::data() const {
  // @@protoc_insertion_point(field_get:network.GCLoginFailurePacket.data)
  return _internal_data();
}
inline void GCLoginFailurePacket::_internal_set_data(int32_t value) {
  
  _impl_.data_ = value;
}
inline void GCLoginFailurePacket::set_data(int32_t value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:network.GCLoginFailurePacket.data)
}

// -------------------------------------------------------------------

// GCCreateFailurePacket

// uint32 type = 1;
inline void GCCreateFailurePacket::clear_type() {
  _impl_.type_ = 0u;
}
inline uint32_t GCCreateFailurePacket::_internal_type() const {
  return _impl_.type_;
}
inline uint32_t GCCreateFailurePacket::type() const {
  // @@protoc_insertion_point(field_get:network.GCCreateFailurePacket.type)
  return _internal_type();
}
inline void GCCreateFailurePacket::_internal_set_type(uint32_t value) {
  
  _impl_.type_ = value;
}
inline void GCCreateFailurePacket::set_type(uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:network.GCCreateFailurePacket.type)
}

// -------------------------------------------------------------------

// GCDeleteSuccessPacket

// uint32 account_index = 1;
inline void GCDeleteSuccessPacket::clear_account_index() {
  _impl_.account_index_ = 0u;
}
inline uint32_t GCDeleteSuccessPacket::_internal_account_index() const {
  return _impl_.account_index_;
}
inline uint32_t GCDeleteSuccessPacket::account_index() const {
  // @@protoc_insertion_point(field_get:network.GCDeleteSuccessPacket.account_index)
  return _internal_account_index();
}
inline void GCDeleteSuccessPacket::_internal_set_account_index(uint32_t value) {
  
  _impl_.account_index_ = value;
}
inline void GCDeleteSuccessPacket::set_account_index(uint32_t value) {
  _internal_set_account_index(value);
  // @@protoc_insertion_point(field_set:network.GCDeleteSuccessPacket.account_index)
}

// -------------------------------------------------------------------

// GCPlayerCreateSuccessPacket

// uint32 account_index = 1;
inline void GCPlayerCreateSuccessPacket::clear_account_index() {
  _impl_.account_index_ = 0u;
}
inline uint32_t GCPlayerCreateSuccessPacket::_internal_account_index() const {
  return _impl_.account_index_;
}
inline uint32_t GCPlayerCreateSuccessPacket::account_index() const {
  // @@protoc_insertion_point(field_get:network.GCPlayerCreateSuccessPacket.account_index)
  return _internal_account_index();
}
inline void GCPlayerCreateSuccessPacket::_internal_set_account_index(uint32_t value) {
  
  _impl_.account_index_ = value;
}
inline void GCPlayerCreateSuccessPacket::set_account_index(uint32_t value) {
  _internal_set_account_index(value);
  // @@protoc_insertion_point(field_set:network.GCPlayerCreateSuccessPacket.account_index)
}

// .network.TSimplePlayer player = 2;
inline bool GCPlayerCreateSuccessPacket::_internal_has_player() const {
  return this != internal_default_instance() && _impl_.player_ != nullptr;
}
inline bool GCPlayerCreateSuccessPacket::has_player() const {
  return _internal_has_player();
}
inline const ::network::TSimplePlayer& GCPlayerCreateSuccessPacket::_internal_player() const {
  const ::network::TSimplePlayer* p = _impl_.player_;
  return p != nullptr ? *p : reinterpret_cast<const ::network::TSimplePlayer&>(
      ::network::_TSimplePlayer_default_instance_);
}
inline const ::network::TSimplePlayer& GCPlayerCreateSuccessPacket::player() const {
  // @@protoc_insertion_point(field_get:network.GCPlayerCreateSuccessPacket.player)
  return _internal_player();
}
inline void GCPlayerCreateSuccessPacket::unsafe_arena_set_allocated_player(
    ::network::TSimplePlayer* player) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.player_);
  }
  _impl_.player_ = player;
  if (player) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:network.GCPlayerCreateSuccessPacket.player)
}
inline ::network::TSimplePlayer* GCPlayerCreateSuccessPacket::release_player() {
  
  ::network::TSimplePlayer* temp = _impl_.player_;
  _impl_.player_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::network::TSimplePlayer* GCPlayerCreateSuccessPacket::unsafe_arena_release_player() {
  // @@protoc_insertion_point(field_release:network.GCPlayerCreateSuccessPacket.player)
  
  ::network::TSimplePlayer* temp = _impl_.player_;
  _impl_.player_ = nullptr;
  return temp;
}
inline ::network::TSimplePlayer* GCPlayerCreateSuccessPacket::_internal_mutable_player() {
  
  if (_impl_.player_ == nullptr) {
    auto* p = CreateMaybeMessage<::network::TSimplePlayer>(GetArenaForAllocation());
    _impl_.player_ = p;
  }
  return _impl_.player_;
}
inline ::network::TSimplePlayer* GCPlayerCreateSuccessPacket::mutable_player() {
  ::network::TSimplePlayer* _msg = _internal_mutable_player();
  // @@protoc_insertion_point(field_mutable:network.GCPlayerCreateSuccessPacket.player)
  return _msg;
}
inline void GCPlayerCreateSuccessPacket::set_allocated_player(::network::TSimplePlayer* player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.player_);
  }
  if (player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player));
    if (message_arena != submessage_arena) {
      player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.player_ = player;
  // @@protoc_insertion_point(field_set_allocated:network.GCPlayerCreateSuccessPacket.player)
}

// -------------------------------------------------------------------

// GCEmpirePacket

// uint32 empire = 1;
inline void GCEmpirePacket::clear_empire() {
  _impl_.empire_ = 0u;
}
inline uint32_t GCEmpirePacket::_internal_empire() const {
  return _impl_.empire_;
}
inline uint32_t GCEmpirePacket::empire() const {
  // @@protoc_insertion_point(field_get:network.GCEmpirePacket.empire)
  return _internal_empire();
}
inline void GCEmpirePacket::_internal_set_empire(uint32_t value) {
  
  _impl_.empire_ = value;
}
inline void GCEmpirePacket::set_empire(uint32_t value) {
  _internal_set_empire(value);
  // @@protoc_insertion_point(field_set:network.GCEmpirePacket.empire)
}

// -------------------------------------------------------------------

// GCLoginSuccessPacket

// repeated .network.TSimplePlayer players = 1;
inline int GCLoginSuccessPacket::_internal_players_size() const {
  return _impl_.players_.size();
}
inline int GCLoginSuccessPacket::players_size() const {
  return _internal_players_size();
}
inline ::network::TSimplePlayer* GCLoginSuccessPacket::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:network.GCLoginSuccessPacket.players)
  return _impl_.players_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TSimplePlayer >*
GCLoginSuccessPacket::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:network.GCLoginSuccessPacket.players)
  return &_impl_.players_;
}
inline const ::network::TSimplePlayer& GCLoginSuccessPacket::_internal_players(int index) const {
  return _impl_.players_.Get(index);
}
inline const ::network::TSimplePlayer& GCLoginSuccessPacket::players(int index) const {
  // @@protoc_insertion_point(field_get:network.GCLoginSuccessPacket.players)
  return _internal_players(index);
}
inline ::network::TSimplePlayer* GCLoginSuccessPacket::_internal_add_players() {
  return _impl_.players_.Add();
}
inline ::network::TSimplePlayer* GCLoginSuccessPacket::add_players() {
  ::network::TSimplePlayer* _add = _internal_add_players();
  // @@protoc_insertion_point(field_add:network.GCLoginSuccessPacket.players)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TSimplePlayer >&
GCLoginSuccessPacket::players() const {
  // @@protoc_insertion_point(field_list:network.GCLoginSuccessPacket.players)
  return _impl_.players_;
}

// uint32 handle = 2;
inline void GCLoginSuccessPacket::clear_handle() {
  _impl_.handle_ = 0u;
}
inline uint32_t GCLoginSuccessPacket::_internal_handle() const {
  return _impl_.handle_;
}
inline uint32_t GCLoginSuccessPacket::handle() const {
  // @@protoc_insertion_point(field_get:network.GCLoginSuccessPacket.handle)
  return _internal_handle();
}
inline void GCLoginSuccessPacket::_internal_set_handle(uint32_t value) {
  
  _impl_.handle_ = value;
}
inline void GCLoginSuccessPacket::set_handle(uint32_t value) {
  _internal_set_handle(value);
  // @@protoc_insertion_point(field_set:network.GCLoginSuccessPacket.handle)
}

// uint32 random_key = 3;
inline void GCLoginSuccessPacket::clear_random_key() {
  _impl_.random_key_ = 0u;
}
inline uint32_t GCLoginSuccessPacket::_internal_random_key() const {
  return _impl_.random_key_;
}
inline uint32_t GCLoginSuccessPacket::random_key() const {
  // @@protoc_insertion_point(field_get:network.GCLoginSuccessPacket.random_key)
  return _internal_random_key();
}
inline void GCLoginSuccessPacket::_internal_set_random_key(uint32_t value) {
  
  _impl_.random_key_ = value;
}
inline void GCLoginSuccessPacket::set_random_key(uint32_t value) {
  _internal_set_random_key(value);
  // @@protoc_insertion_point(field_set:network.GCLoginSuccessPacket.random_key)
}

// -------------------------------------------------------------------

// GCAuthSuccessPacket

// uint32 login_key = 1;
inline void GCAuthSuccessPacket::clear_login_key() {
  _impl_.login_key_ = 0u;
}
inline uint32_t GCAuthSuccessPacket::_internal_login_key() const {
  return _impl_.login_key_;
}
inline uint32_t GCAuthSuccessPacket::login_key() const {
  // @@protoc_insertion_point(field_get:network.GCAuthSuccessPacket.login_key)
  return _internal_login_key();
}
inline void GCAuthSuccessPacket::_internal_set_login_key(uint32_t value) {
  
  _impl_.login_key_ = value;
}
inline void GCAuthSuccessPacket::set_login_key(uint32_t value) {
  _internal_set_login_key(value);
  // @@protoc_insertion_point(field_set:network.GCAuthSuccessPacket.login_key)
}

// bool result = 2;
inline void GCAuthSuccessPacket::clear_result() {
  _impl_.result_ = false;
}
inline bool GCAuthSuccessPacket::_internal_result() const {
  return _impl_.result_;
}
inline bool GCAuthSuccessPacket::result() const {
  // @@protoc_insertion_point(field_get:network.GCAuthSuccessPacket.result)
  return _internal_result();
}
inline void GCAuthSuccessPacket::_internal_set_result(bool value) {
  
  _impl_.result_ = value;
}
inline void GCAuthSuccessPacket::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:network.GCAuthSuccessPacket.result)
}

// -------------------------------------------------------------------

// GCAuthSuccessOpenIDPacket

// uint32 login_key = 1;
inline void GCAuthSuccessOpenIDPacket::clear_login_key() {
  _impl_.login_key_ = 0u;
}
inline uint32_t GCAuthSuccessOpenIDPacket::_internal_login_key() const {
  return _impl_.login_key_;
}
inline uint32_t GCAuthSuccessOpenIDPacket::login_key() const {
  // @@protoc_insertion_point(field_get:network.GCAuthSuccessOpenIDPacket.login_key)
  return _internal_login_key();
}
inline void GCAuthSuccessOpenIDPacket::_internal_set_login_key(uint32_t value) {
  
  _impl_.login_key_ = value;
}
inline void GCAuthSuccessOpenIDPacket::set_login_key(uint32_t value) {
  _internal_set_login_key(value);
  // @@protoc_insertion_point(field_set:network.GCAuthSuccessOpenIDPacket.login_key)
}

// bool result = 2;
inline void GCAuthSuccessOpenIDPacket::clear_result() {
  _impl_.result_ = false;
}
inline bool GCAuthSuccessOpenIDPacket::_internal_result() const {
  return _impl_.result_;
}
inline bool GCAuthSuccessOpenIDPacket::result() const {
  // @@protoc_insertion_point(field_get:network.GCAuthSuccessOpenIDPacket.result)
  return _internal_result();
}
inline void GCAuthSuccessOpenIDPacket::_internal_set_result(bool value) {
  
  _impl_.result_ = value;
}
inline void GCAuthSuccessOpenIDPacket::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:network.GCAuthSuccessOpenIDPacket.result)
}

// bytes login = 3;
inline void GCAuthSuccessOpenIDPacket::clear_login() {
  _impl_.login_.ClearToEmpty();
}
inline const std::string& GCAuthSuccessOpenIDPacket::login() const {
  // @@protoc_insertion_point(field_get:network.GCAuthSuccessOpenIDPacket.login)
  return _internal_login();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GCAuthSuccessOpenIDPacket::set_login(ArgT0&& arg0, ArgT... args) {
 
 _impl_.login_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GCAuthSuccessOpenIDPacket.login)
}
inline std::string* GCAuthSuccessOpenIDPacket::mutable_login() {
  std::string* _s = _internal_mutable_login();
  // @@protoc_insertion_point(field_mutable:network.GCAuthSuccessOpenIDPacket.login)
  return _s;
}
inline const std::string& GCAuthSuccessOpenIDPacket::_internal_login() const {
  return _impl_.login_.Get();
}
inline void GCAuthSuccessOpenIDPacket::_internal_set_login(const std::string& value) {
  
  _impl_.login_.Set(value, GetArenaForAllocation());
}
inline std::string* GCAuthSuccessOpenIDPacket::_internal_mutable_login() {
  
  return _impl_.login_.Mutable(GetArenaForAllocation());
}
inline std::string* GCAuthSuccessOpenIDPacket::release_login() {
  // @@protoc_insertion_point(field_release:network.GCAuthSuccessOpenIDPacket.login)
  return _impl_.login_.Release();
}
inline void GCAuthSuccessOpenIDPacket::set_allocated_login(std::string* login) {
  if (login != nullptr) {
    
  } else {
    
  }
  _impl_.login_.SetAllocated(login, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.login_.IsDefault()) {
    _impl_.login_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GCAuthSuccessOpenIDPacket.login)
}

// -------------------------------------------------------------------

// GCChangeNamePacket

// uint32 pid = 1;
inline void GCChangeNamePacket::clear_pid() {
  _impl_.pid_ = 0u;
}
inline uint32_t GCChangeNamePacket::_internal_pid() const {
  return _impl_.pid_;
}
inline uint32_t GCChangeNamePacket::pid() const {
  // @@protoc_insertion_point(field_get:network.GCChangeNamePacket.pid)
  return _internal_pid();
}
inline void GCChangeNamePacket::_internal_set_pid(uint32_t value) {
  
  _impl_.pid_ = value;
}
inline void GCChangeNamePacket::set_pid(uint32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:network.GCChangeNamePacket.pid)
}

// bytes name = 2;
inline void GCChangeNamePacket::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GCChangeNamePacket::name() const {
  // @@protoc_insertion_point(field_get:network.GCChangeNamePacket.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GCChangeNamePacket::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GCChangeNamePacket.name)
}
inline std::string* GCChangeNamePacket::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:network.GCChangeNamePacket.name)
  return _s;
}
inline const std::string& GCChangeNamePacket::_internal_name() const {
  return _impl_.name_.Get();
}
inline void GCChangeNamePacket::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* GCChangeNamePacket::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* GCChangeNamePacket::release_name() {
  // @@protoc_insertion_point(field_release:network.GCChangeNamePacket.name)
  return _impl_.name_.Release();
}
inline void GCChangeNamePacket::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GCChangeNamePacket.name)
}

// -------------------------------------------------------------------

// GCHybridCryptSDBPacket

// bytes data_stream = 1;
inline void GCHybridCryptSDBPacket::clear_data_stream() {
  _impl_.data_stream_.ClearToEmpty();
}
inline const std::string& GCHybridCryptSDBPacket::data_stream() const {
  // @@protoc_insertion_point(field_get:network.GCHybridCryptSDBPacket.data_stream)
  return _internal_data_stream();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GCHybridCryptSDBPacket::set_data_stream(ArgT0&& arg0, ArgT... args) {
 
 _impl_.data_stream_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GCHybridCryptSDBPacket.data_stream)
}
inline std::string* GCHybridCryptSDBPacket::mutable_data_stream() {
  std::string* _s = _internal_mutable_data_stream();
  // @@protoc_insertion_point(field_mutable:network.GCHybridCryptSDBPacket.data_stream)
  return _s;
}
inline const std::string& GCHybridCryptSDBPacket::_internal_data_stream() const {
  return _impl_.data_stream_.Get();
}
inline void GCHybridCryptSDBPacket::_internal_set_data_stream(const std::string& value) {
  
  _impl_.data_stream_.Set(value, GetArenaForAllocation());
}
inline std::string* GCHybridCryptSDBPacket::_internal_mutable_data_stream() {
  
  return _impl_.data_stream_.Mutable(GetArenaForAllocation());
}
inline std::string* GCHybridCryptSDBPacket::release_data_stream() {
  // @@protoc_insertion_point(field_release:network.GCHybridCryptSDBPacket.data_stream)
  return _impl_.data_stream_.Release();
}
inline void GCHybridCryptSDBPacket::set_allocated_data_stream(std::string* data_stream) {
  if (data_stream != nullptr) {
    
  } else {
    
  }
  _impl_.data_stream_.SetAllocated(data_stream, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_stream_.IsDefault()) {
    _impl_.data_stream_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GCHybridCryptSDBPacket.data_stream)
}

// -------------------------------------------------------------------

// GCHybridCryptKeysPacket

// bytes data_stream = 1;
inline void GCHybridCryptKeysPacket::clear_data_stream() {
  _impl_.data_stream_.ClearToEmpty();
}
inline const std::string& GCHybridCryptKeysPacket::data_stream() const {
  // @@protoc_insertion_point(field_get:network.GCHybridCryptKeysPacket.data_stream)
  return _internal_data_stream();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GCHybridCryptKeysPacket::set_data_stream(ArgT0&& arg0, ArgT... args) {
 
 _impl_.data_stream_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GCHybridCryptKeysPacket.data_stream)
}
inline std::string* GCHybridCryptKeysPacket::mutable_data_stream() {
  std::string* _s = _internal_mutable_data_stream();
  // @@protoc_insertion_point(field_mutable:network.GCHybridCryptKeysPacket.data_stream)
  return _s;
}
inline const std::string& GCHybridCryptKeysPacket::_internal_data_stream() const {
  return _impl_.data_stream_.Get();
}
inline void GCHybridCryptKeysPacket::_internal_set_data_stream(const std::string& value) {
  
  _impl_.data_stream_.Set(value, GetArenaForAllocation());
}
inline std::string* GCHybridCryptKeysPacket::_internal_mutable_data_stream() {
  
  return _impl_.data_stream_.Mutable(GetArenaForAllocation());
}
inline std::string* GCHybridCryptKeysPacket::release_data_stream() {
  // @@protoc_insertion_point(field_release:network.GCHybridCryptKeysPacket.data_stream)
  return _impl_.data_stream_.Release();
}
inline void GCHybridCryptKeysPacket::set_allocated_data_stream(std::string* data_stream) {
  if (data_stream != nullptr) {
    
  } else {
    
  }
  _impl_.data_stream_.SetAllocated(data_stream, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_stream_.IsDefault()) {
    _impl_.data_stream_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GCHybridCryptKeysPacket.data_stream)
}

// -------------------------------------------------------------------

// GCRespondChannelStatusPacket

// repeated .network.TChannelStatus states = 1;
inline int GCRespondChannelStatusPacket::_internal_states_size() const {
  return _impl_.states_.size();
}
inline int GCRespondChannelStatusPacket::states_size() const {
  return _internal_states_size();
}
inline ::network::TChannelStatus* GCRespondChannelStatusPacket::mutable_states(int index) {
  // @@protoc_insertion_point(field_mutable:network.GCRespondChannelStatusPacket.states)
  return _impl_.states_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TChannelStatus >*
GCRespondChannelStatusPacket::mutable_states() {
  // @@protoc_insertion_point(field_mutable_list:network.GCRespondChannelStatusPacket.states)
  return &_impl_.states_;
}
inline const ::network::TChannelStatus& GCRespondChannelStatusPacket::_internal_states(int index) const {
  return _impl_.states_.Get(index);
}
inline const ::network::TChannelStatus& GCRespondChannelStatusPacket::states(int index) const {
  // @@protoc_insertion_point(field_get:network.GCRespondChannelStatusPacket.states)
  return _internal_states(index);
}
inline ::network::TChannelStatus* GCRespondChannelStatusPacket::_internal_add_states() {
  return _impl_.states_.Add();
}
inline ::network::TChannelStatus* GCRespondChannelStatusPacket::add_states() {
  ::network::TChannelStatus* _add = _internal_add_states();
  // @@protoc_insertion_point(field_add:network.GCRespondChannelStatusPacket.states)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TChannelStatus >&
GCRespondChannelStatusPacket::states() const {
  // @@protoc_insertion_point(field_list:network.GCRespondChannelStatusPacket.states)
  return _impl_.states_;
}

// bool success = 2;
inline void GCRespondChannelStatusPacket::clear_success() {
  _impl_.success_ = false;
}
inline bool GCRespondChannelStatusPacket::_internal_success() const {
  return _impl_.success_;
}
inline bool GCRespondChannelStatusPacket::success() const {
  // @@protoc_insertion_point(field_get:network.GCRespondChannelStatusPacket.success)
  return _internal_success();
}
inline void GCRespondChannelStatusPacket::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void GCRespondChannelStatusPacket::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:network.GCRespondChannelStatusPacket.success)
}

// -------------------------------------------------------------------

// GCPhasePacket

// uint32 phase = 1;
inline void GCPhasePacket::clear_phase() {
  _impl_.phase_ = 0u;
}
inline uint32_t GCPhasePacket::_internal_phase() const {
  return _impl_.phase_;
}
inline uint32_t GCPhasePacket::phase() const {
  // @@protoc_insertion_point(field_get:network.GCPhasePacket.phase)
  return _internal_phase();
}
inline void GCPhasePacket::_internal_set_phase(uint32_t value) {
  
  _impl_.phase_ = value;
}
inline void GCPhasePacket::set_phase(uint32_t value) {
  _internal_set_phase(value);
  // @@protoc_insertion_point(field_set:network.GCPhasePacket.phase)
}

// -------------------------------------------------------------------

// GCHandshakePacket

// uint32 handshake = 1;
inline void GCHandshakePacket::clear_handshake() {
  _impl_.handshake_ = 0u;
}
inline uint32_t GCHandshakePacket::_internal_handshake() const {
  return _impl_.handshake_;
}
inline uint32_t GCHandshakePacket::handshake() const {
  // @@protoc_insertion_point(field_get:network.GCHandshakePacket.handshake)
  return _internal_handshake();
}
inline void GCHandshakePacket::_internal_set_handshake(uint32_t value) {
  
  _impl_.handshake_ = value;
}
inline void GCHandshakePacket::set_handshake(uint32_t value) {
  _internal_set_handshake(value);
  // @@protoc_insertion_point(field_set:network.GCHandshakePacket.handshake)
}

// uint32 time = 2;
inline void GCHandshakePacket::clear_time() {
  _impl_.time_ = 0u;
}
inline uint32_t GCHandshakePacket::_internal_time() const {
  return _impl_.time_;
}
inline uint32_t GCHandshakePacket::time() const {
  // @@protoc_insertion_point(field_get:network.GCHandshakePacket.time)
  return _internal_time();
}
inline void GCHandshakePacket::_internal_set_time(uint32_t value) {
  
  _impl_.time_ = value;
}
inline void GCHandshakePacket::set_time(uint32_t value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:network.GCHandshakePacket.time)
}

// int32 delta = 3;
inline void GCHandshakePacket::clear_delta() {
  _impl_.delta_ = 0;
}
inline int32_t GCHandshakePacket::_internal_delta() const {
  return _impl_.delta_;
}
inline int32_t GCHandshakePacket::delta() const {
  // @@protoc_insertion_point(field_get:network.GCHandshakePacket.delta)
  return _internal_delta();
}
inline void GCHandshakePacket::_internal_set_delta(int32_t value) {
  
  _impl_.delta_ = value;
}
inline void GCHandshakePacket::set_delta(int32_t value) {
  _internal_set_delta(value);
  // @@protoc_insertion_point(field_set:network.GCHandshakePacket.delta)
}

// uint32 crypt_key = 4;
inline void GCHandshakePacket::clear_crypt_key() {
  _impl_.crypt_key_ = 0u;
}
inline uint32_t GCHandshakePacket::_internal_crypt_key() const {
  return _impl_.crypt_key_;
}
inline uint32_t GCHandshakePacket::crypt_key() const {
  // @@protoc_insertion_point(field_get:network.GCHandshakePacket.crypt_key)
  return _internal_crypt_key();
}
inline void GCHandshakePacket::_internal_set_crypt_key(uint32_t value) {
  
  _impl_.crypt_key_ = value;
}
inline void GCHandshakePacket::set_crypt_key(uint32_t value) {
  _internal_set_crypt_key(value);
  // @@protoc_insertion_point(field_set:network.GCHandshakePacket.crypt_key)
}

// -------------------------------------------------------------------

// GCKeyAgreementPacket

// bytes data = 1;
inline void GCKeyAgreementPacket::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& GCKeyAgreementPacket::data() const {
  // @@protoc_insertion_point(field_get:network.GCKeyAgreementPacket.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GCKeyAgreementPacket::set_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GCKeyAgreementPacket.data)
}
inline std::string* GCKeyAgreementPacket::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:network.GCKeyAgreementPacket.data)
  return _s;
}
inline const std::string& GCKeyAgreementPacket::_internal_data() const {
  return _impl_.data_.Get();
}
inline void GCKeyAgreementPacket::_internal_set_data(const std::string& value) {
  
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* GCKeyAgreementPacket::_internal_mutable_data() {
  
  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* GCKeyAgreementPacket::release_data() {
  // @@protoc_insertion_point(field_release:network.GCKeyAgreementPacket.data)
  return _impl_.data_.Release();
}
inline void GCKeyAgreementPacket::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GCKeyAgreementPacket.data)
}

// uint32 agreed_length = 2;
inline void GCKeyAgreementPacket::clear_agreed_length() {
  _impl_.agreed_length_ = 0u;
}
inline uint32_t GCKeyAgreementPacket::_internal_agreed_length() const {
  return _impl_.agreed_length_;
}
inline uint32_t GCKeyAgreementPacket::agreed_length() const {
  // @@protoc_insertion_point(field_get:network.GCKeyAgreementPacket.agreed_length)
  return _internal_agreed_length();
}
inline void GCKeyAgreementPacket::_internal_set_agreed_length(uint32_t value) {
  
  _impl_.agreed_length_ = value;
}
inline void GCKeyAgreementPacket::set_agreed_length(uint32_t value) {
  _internal_set_agreed_length(value);
  // @@protoc_insertion_point(field_set:network.GCKeyAgreementPacket.agreed_length)
}

// -------------------------------------------------------------------

// GCXTrapCS1RequestPacket

// bytes data = 1;
inline void GCXTrapCS1RequestPacket::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& GCXTrapCS1RequestPacket::data() const {
  // @@protoc_insertion_point(field_get:network.GCXTrapCS1RequestPacket.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GCXTrapCS1RequestPacket::set_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GCXTrapCS1RequestPacket.data)
}
inline std::string* GCXTrapCS1RequestPacket::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:network.GCXTrapCS1RequestPacket.data)
  return _s;
}
inline const std::string& GCXTrapCS1RequestPacket::_internal_data() const {
  return _impl_.data_.Get();
}
inline void GCXTrapCS1RequestPacket::_internal_set_data(const std::string& value) {
  
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* GCXTrapCS1RequestPacket::_internal_mutable_data() {
  
  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* GCXTrapCS1RequestPacket::release_data() {
  // @@protoc_insertion_point(field_release:network.GCXTrapCS1RequestPacket.data)
  return _impl_.data_.Release();
}
inline void GCXTrapCS1RequestPacket::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GCXTrapCS1RequestPacket.data)
}

// -------------------------------------------------------------------

// GCPanamaPackPacket

// bytes pack_name = 1;
inline void GCPanamaPackPacket::clear_pack_name() {
  _impl_.pack_name_.ClearToEmpty();
}
inline const std::string& GCPanamaPackPacket::pack_name() const {
  // @@protoc_insertion_point(field_get:network.GCPanamaPackPacket.pack_name)
  return _internal_pack_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GCPanamaPackPacket::set_pack_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.pack_name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GCPanamaPackPacket.pack_name)
}
inline std::string* GCPanamaPackPacket::mutable_pack_name() {
  std::string* _s = _internal_mutable_pack_name();
  // @@protoc_insertion_point(field_mutable:network.GCPanamaPackPacket.pack_name)
  return _s;
}
inline const std::string& GCPanamaPackPacket::_internal_pack_name() const {
  return _impl_.pack_name_.Get();
}
inline void GCPanamaPackPacket::_internal_set_pack_name(const std::string& value) {
  
  _impl_.pack_name_.Set(value, GetArenaForAllocation());
}
inline std::string* GCPanamaPackPacket::_internal_mutable_pack_name() {
  
  return _impl_.pack_name_.Mutable(GetArenaForAllocation());
}
inline std::string* GCPanamaPackPacket::release_pack_name() {
  // @@protoc_insertion_point(field_release:network.GCPanamaPackPacket.pack_name)
  return _impl_.pack_name_.Release();
}
inline void GCPanamaPackPacket::set_allocated_pack_name(std::string* pack_name) {
  if (pack_name != nullptr) {
    
  } else {
    
  }
  _impl_.pack_name_.SetAllocated(pack_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pack_name_.IsDefault()) {
    _impl_.pack_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GCPanamaPackPacket.pack_name)
}

// bytes abIV = 2;
inline void GCPanamaPackPacket::clear_abiv() {
  _impl_.abiv_.ClearToEmpty();
}
inline const std::string& GCPanamaPackPacket::abiv() const {
  // @@protoc_insertion_point(field_get:network.GCPanamaPackPacket.abIV)
  return _internal_abiv();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GCPanamaPackPacket::set_abiv(ArgT0&& arg0, ArgT... args) {
 
 _impl_.abiv_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GCPanamaPackPacket.abIV)
}
inline std::string* GCPanamaPackPacket::mutable_abiv() {
  std::string* _s = _internal_mutable_abiv();
  // @@protoc_insertion_point(field_mutable:network.GCPanamaPackPacket.abIV)
  return _s;
}
inline const std::string& GCPanamaPackPacket::_internal_abiv() const {
  return _impl_.abiv_.Get();
}
inline void GCPanamaPackPacket::_internal_set_abiv(const std::string& value) {
  
  _impl_.abiv_.Set(value, GetArenaForAllocation());
}
inline std::string* GCPanamaPackPacket::_internal_mutable_abiv() {
  
  return _impl_.abiv_.Mutable(GetArenaForAllocation());
}
inline std::string* GCPanamaPackPacket::release_abiv() {
  // @@protoc_insertion_point(field_release:network.GCPanamaPackPacket.abIV)
  return _impl_.abiv_.Release();
}
inline void GCPanamaPackPacket::set_allocated_abiv(std::string* abiv) {
  if (abiv != nullptr) {
    
  } else {
    
  }
  _impl_.abiv_.SetAllocated(abiv, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.abiv_.IsDefault()) {
    _impl_.abiv_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GCPanamaPackPacket.abIV)
}

// -------------------------------------------------------------------

// GCLoginVersionAnswerPacket

// bool answer = 1;
inline void GCLoginVersionAnswerPacket::clear_answer() {
  _impl_.answer_ = false;
}
inline bool GCLoginVersionAnswerPacket::_internal_answer() const {
  return _impl_.answer_;
}
inline bool GCLoginVersionAnswerPacket::answer() const {
  // @@protoc_insertion_point(field_get:network.GCLoginVersionAnswerPacket.answer)
  return _internal_answer();
}
inline void GCLoginVersionAnswerPacket::_internal_set_answer(bool value) {
  
  _impl_.answer_ = value;
}
inline void GCLoginVersionAnswerPacket::set_answer(bool value) {
  _internal_set_answer(value);
  // @@protoc_insertion_point(field_set:network.GCLoginVersionAnswerPacket.answer)
}

// -------------------------------------------------------------------

// GCTimePacket

// uint32 time = 1;
inline void GCTimePacket::clear_time() {
  _impl_.time_ = 0u;
}
inline uint32_t GCTimePacket::_internal_time() const {
  return _impl_.time_;
}
inline uint32_t GCTimePacket::time() const {
  // @@protoc_insertion_point(field_get:network.GCTimePacket.time)
  return _internal_time();
}
inline void GCTimePacket::_internal_set_time(uint32_t value) {
  
  _impl_.time_ = value;
}
inline void GCTimePacket::set_time(uint32_t value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:network.GCTimePacket.time)
}

// uint32 random = 2;
inline void GCTimePacket::clear_random() {
  _impl_.random_ = 0u;
}
inline uint32_t GCTimePacket::_internal_random() const {
  return _impl_.random_;
}
inline uint32_t GCTimePacket::random() const {
  // @@protoc_insertion_point(field_get:network.GCTimePacket.random)
  return _internal_random();
}
inline void GCTimePacket::_internal_set_random(uint32_t value) {
  
  _impl_.random_ = value;
}
inline void GCTimePacket::set_random(uint32_t value) {
  _internal_set_random(value);
  // @@protoc_insertion_point(field_set:network.GCTimePacket.random)
}

// bool combatzone = 3;
inline void GCTimePacket::clear_combatzone() {
  _impl_.combatzone_ = false;
}
inline bool GCTimePacket::_internal_combatzone() const {
  return _impl_.combatzone_;
}
inline bool GCTimePacket::combatzone() const {
  // @@protoc_insertion_point(field_get:network.GCTimePacket.combatzone)
  return _internal_combatzone();
}
inline void GCTimePacket::_internal_set_combatzone(bool value) {
  
  _impl_.combatzone_ = value;
}
inline void GCTimePacket::set_combatzone(bool value) {
  _internal_set_combatzone(value);
  // @@protoc_insertion_point(field_set:network.GCTimePacket.combatzone)
}

// uint32 channel = 4;
inline void GCTimePacket::clear_channel() {
  _impl_.channel_ = 0u;
}
inline uint32_t GCTimePacket::_internal_channel() const {
  return _impl_.channel_;
}
inline uint32_t GCTimePacket::channel() const {
  // @@protoc_insertion_point(field_get:network.GCTimePacket.channel)
  return _internal_channel();
}
inline void GCTimePacket::_internal_set_channel(uint32_t value) {
  
  _impl_.channel_ = value;
}
inline void GCTimePacket::set_channel(uint32_t value) {
  _internal_set_channel(value);
  // @@protoc_insertion_point(field_set:network.GCTimePacket.channel)
}

// uint32 test_server = 5;
inline void GCTimePacket::clear_test_server() {
  _impl_.test_server_ = 0u;
}
inline uint32_t GCTimePacket::_internal_test_server() const {
  return _impl_.test_server_;
}
inline uint32_t GCTimePacket::test_server() const {
  // @@protoc_insertion_point(field_get:network.GCTimePacket.test_server)
  return _internal_test_server();
}
inline void GCTimePacket::_internal_set_test_server(uint32_t value) {
  
  _impl_.test_server_ = value;
}
inline void GCTimePacket::set_test_server(uint32_t value) {
  _internal_set_test_server(value);
  // @@protoc_insertion_point(field_set:network.GCTimePacket.test_server)
}

// uint32 map_index = 6;
inline void GCTimePacket::clear_map_index() {
  _impl_.map_index_ = 0u;
}
inline uint32_t GCTimePacket::_internal_map_index() const {
  return _impl_.map_index_;
}
inline uint32_t GCTimePacket::map_index() const {
  // @@protoc_insertion_point(field_get:network.GCTimePacket.map_index)
  return _internal_map_index();
}
inline void GCTimePacket::_internal_set_map_index(uint32_t value) {
  
  _impl_.map_index_ = value;
}
inline void GCTimePacket::set_map_index(uint32_t value) {
  _internal_set_map_index(value);
  // @@protoc_insertion_point(field_set:network.GCTimePacket.map_index)
}

// bool coins = 7;
inline void GCTimePacket::clear_coins() {
  _impl_.coins_ = false;
}
inline bool GCTimePacket::_internal_coins() const {
  return _impl_.coins_;
}
inline bool GCTimePacket::coins() const {
  // @@protoc_insertion_point(field_get:network.GCTimePacket.coins)
  return _internal_coins();
}
inline void GCTimePacket::_internal_set_coins(bool value) {
  
  _impl_.coins_ = value;
}
inline void GCTimePacket::set_coins(bool value) {
  _internal_set_coins(value);
  // @@protoc_insertion_point(field_set:network.GCTimePacket.coins)
}

// -------------------------------------------------------------------

// GCChannelPacket

// uint32 channel = 1;
inline void GCChannelPacket::clear_channel() {
  _impl_.channel_ = 0u;
}
inline uint32_t GCChannelPacket::_internal_channel() const {
  return _impl_.channel_;
}
inline uint32_t GCChannelPacket::channel() const {
  // @@protoc_insertion_point(field_get:network.GCChannelPacket.channel)
  return _internal_channel();
}
inline void GCChannelPacket::_internal_set_channel(uint32_t value) {
  
  _impl_.channel_ = value;
}
inline void GCChannelPacket::set_channel(uint32_t value) {
  _internal_set_channel(value);
  // @@protoc_insertion_point(field_set:network.GCChannelPacket.channel)
}

// -------------------------------------------------------------------

// GCWhisperPacket

// uint32 type = 1;
inline void GCWhisperPacket::clear_type() {
  _impl_.type_ = 0u;
}
inline uint32_t GCWhisperPacket::_internal_type() const {
  return _impl_.type_;
}
inline uint32_t GCWhisperPacket::type() const {
  // @@protoc_insertion_point(field_get:network.GCWhisperPacket.type)
  return _internal_type();
}
inline void GCWhisperPacket::_internal_set_type(uint32_t value) {
  
  _impl_.type_ = value;
}
inline void GCWhisperPacket::set_type(uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:network.GCWhisperPacket.type)
}

// int32 locale = 2;
inline void GCWhisperPacket::clear_locale() {
  _impl_.locale_ = 0;
}
inline int32_t GCWhisperPacket::_internal_locale() const {
  return _impl_.locale_;
}
inline int32_t GCWhisperPacket::locale() const {
  // @@protoc_insertion_point(field_get:network.GCWhisperPacket.locale)
  return _internal_locale();
}
inline void GCWhisperPacket::_internal_set_locale(int32_t value) {
  
  _impl_.locale_ = value;
}
inline void GCWhisperPacket::set_locale(int32_t value) {
  _internal_set_locale(value);
  // @@protoc_insertion_point(field_set:network.GCWhisperPacket.locale)
}

// bytes name_from = 3;
inline void GCWhisperPacket::clear_name_from() {
  _impl_.name_from_.ClearToEmpty();
}
inline const std::string& GCWhisperPacket::name_from() const {
  // @@protoc_insertion_point(field_get:network.GCWhisperPacket.name_from)
  return _internal_name_from();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GCWhisperPacket::set_name_from(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_from_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GCWhisperPacket.name_from)
}
inline std::string* GCWhisperPacket::mutable_name_from() {
  std::string* _s = _internal_mutable_name_from();
  // @@protoc_insertion_point(field_mutable:network.GCWhisperPacket.name_from)
  return _s;
}
inline const std::string& GCWhisperPacket::_internal_name_from() const {
  return _impl_.name_from_.Get();
}
inline void GCWhisperPacket::_internal_set_name_from(const std::string& value) {
  
  _impl_.name_from_.Set(value, GetArenaForAllocation());
}
inline std::string* GCWhisperPacket::_internal_mutable_name_from() {
  
  return _impl_.name_from_.Mutable(GetArenaForAllocation());
}
inline std::string* GCWhisperPacket::release_name_from() {
  // @@protoc_insertion_point(field_release:network.GCWhisperPacket.name_from)
  return _impl_.name_from_.Release();
}
inline void GCWhisperPacket::set_allocated_name_from(std::string* name_from) {
  if (name_from != nullptr) {
    
  } else {
    
  }
  _impl_.name_from_.SetAllocated(name_from, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_from_.IsDefault()) {
    _impl_.name_from_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GCWhisperPacket.name_from)
}

// bytes message = 4;
inline void GCWhisperPacket::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& GCWhisperPacket::message() const {
  // @@protoc_insertion_point(field_get:network.GCWhisperPacket.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GCWhisperPacket::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GCWhisperPacket.message)
}
inline std::string* GCWhisperPacket::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:network.GCWhisperPacket.message)
  return _s;
}
inline const std::string& GCWhisperPacket::_internal_message() const {
  return _impl_.message_.Get();
}
inline void GCWhisperPacket::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* GCWhisperPacket::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* GCWhisperPacket::release_message() {
  // @@protoc_insertion_point(field_release:network.GCWhisperPacket.message)
  return _impl_.message_.Release();
}
inline void GCWhisperPacket::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GCWhisperPacket.message)
}

// -------------------------------------------------------------------

// GCChatPacket

// uint32 type = 1;
inline void GCChatPacket::clear_type() {
  _impl_.type_ = 0u;
}
inline uint32_t GCChatPacket::_internal_type() const {
  return _impl_.type_;
}
inline uint32_t GCChatPacket::type() const {
  // @@protoc_insertion_point(field_get:network.GCChatPacket.type)
  return _internal_type();
}
inline void GCChatPacket::_internal_set_type(uint32_t value) {
  
  _impl_.type_ = value;
}
inline void GCChatPacket::set_type(uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:network.GCChatPacket.type)
}

// uint32 id = 2;
inline void GCChatPacket::clear_id() {
  _impl_.id_ = 0u;
}
inline uint32_t GCChatPacket::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t GCChatPacket::id() const {
  // @@protoc_insertion_point(field_get:network.GCChatPacket.id)
  return _internal_id();
}
inline void GCChatPacket::_internal_set_id(uint32_t value) {
  
  _impl_.id_ = value;
}
inline void GCChatPacket::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:network.GCChatPacket.id)
}

// bytes message = 3;
inline void GCChatPacket::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& GCChatPacket::message() const {
  // @@protoc_insertion_point(field_get:network.GCChatPacket.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GCChatPacket::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GCChatPacket.message)
}
inline std::string* GCChatPacket::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:network.GCChatPacket.message)
  return _s;
}
inline const std::string& GCChatPacket::_internal_message() const {
  return _impl_.message_.Get();
}
inline void GCChatPacket::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* GCChatPacket::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* GCChatPacket::release_message() {
  // @@protoc_insertion_point(field_release:network.GCChatPacket.message)
  return _impl_.message_.Release();
}
inline void GCChatPacket::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GCChatPacket.message)
}

// uint32 empire = 4;
inline void GCChatPacket::clear_empire() {
  _impl_.empire_ = 0u;
}
inline uint32_t GCChatPacket::_internal_empire() const {
  return _impl_.empire_;
}
inline uint32_t GCChatPacket::empire() const {
  // @@protoc_insertion_point(field_get:network.GCChatPacket.empire)
  return _internal_empire();
}
inline void GCChatPacket::_internal_set_empire(uint32_t value) {
  
  _impl_.empire_ = value;
}
inline void GCChatPacket::set_empire(uint32_t value) {
  _internal_set_empire(value);
  // @@protoc_insertion_point(field_set:network.GCChatPacket.empire)
}

// -------------------------------------------------------------------

// GCMovePacket

// uint32 func = 1;
inline void GCMovePacket::clear_func() {
  _impl_.func_ = 0u;
}
inline uint32_t GCMovePacket::_internal_func() const {
  return _impl_.func_;
}
inline uint32_t GCMovePacket::func() const {
  // @@protoc_insertion_point(field_get:network.GCMovePacket.func)
  return _internal_func();
}
inline void GCMovePacket::_internal_set_func(uint32_t value) {
  
  _impl_.func_ = value;
}
inline void GCMovePacket::set_func(uint32_t value) {
  _internal_set_func(value);
  // @@protoc_insertion_point(field_set:network.GCMovePacket.func)
}

// uint32 arg = 2;
inline void GCMovePacket::clear_arg() {
  _impl_.arg_ = 0u;
}
inline uint32_t GCMovePacket::_internal_arg() const {
  return _impl_.arg_;
}
inline uint32_t GCMovePacket::arg() const {
  // @@protoc_insertion_point(field_get:network.GCMovePacket.arg)
  return _internal_arg();
}
inline void GCMovePacket::_internal_set_arg(uint32_t value) {
  
  _impl_.arg_ = value;
}
inline void GCMovePacket::set_arg(uint32_t value) {
  _internal_set_arg(value);
  // @@protoc_insertion_point(field_set:network.GCMovePacket.arg)
}

// uint32 rot = 3;
inline void GCMovePacket::clear_rot() {
  _impl_.rot_ = 0u;
}
inline uint32_t GCMovePacket::_internal_rot() const {
  return _impl_.rot_;
}
inline uint32_t GCMovePacket::rot() const {
  // @@protoc_insertion_point(field_get:network.GCMovePacket.rot)
  return _internal_rot();
}
inline void GCMovePacket::_internal_set_rot(uint32_t value) {
  
  _impl_.rot_ = value;
}
inline void GCMovePacket::set_rot(uint32_t value) {
  _internal_set_rot(value);
  // @@protoc_insertion_point(field_set:network.GCMovePacket.rot)
}

// uint32 vid = 4;
inline void GCMovePacket::clear_vid() {
  _impl_.vid_ = 0u;
}
inline uint32_t GCMovePacket::_internal_vid() const {
  return _impl_.vid_;
}
inline uint32_t GCMovePacket::vid() const {
  // @@protoc_insertion_point(field_get:network.GCMovePacket.vid)
  return _internal_vid();
}
inline void GCMovePacket::_internal_set_vid(uint32_t value) {
  
  _impl_.vid_ = value;
}
inline void GCMovePacket::set_vid(uint32_t value) {
  _internal_set_vid(value);
  // @@protoc_insertion_point(field_set:network.GCMovePacket.vid)
}

// int32 x = 5;
inline void GCMovePacket::clear_x() {
  _impl_.x_ = 0;
}
inline int32_t GCMovePacket::_internal_x() const {
  return _impl_.x_;
}
inline int32_t GCMovePacket::x() const {
  // @@protoc_insertion_point(field_get:network.GCMovePacket.x)
  return _internal_x();
}
inline void GCMovePacket::_internal_set_x(int32_t value) {
  
  _impl_.x_ = value;
}
inline void GCMovePacket::set_x(int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:network.GCMovePacket.x)
}

// int32 y = 6;
inline void GCMovePacket::clear_y() {
  _impl_.y_ = 0;
}
inline int32_t GCMovePacket::_internal_y() const {
  return _impl_.y_;
}
inline int32_t GCMovePacket::y() const {
  // @@protoc_insertion_point(field_get:network.GCMovePacket.y)
  return _internal_y();
}
inline void GCMovePacket::_internal_set_y(int32_t value) {
  
  _impl_.y_ = value;
}
inline void GCMovePacket::set_y(int32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:network.GCMovePacket.y)
}

// uint32 time = 7;
inline void GCMovePacket::clear_time() {
  _impl_.time_ = 0u;
}
inline uint32_t GCMovePacket::_internal_time() const {
  return _impl_.time_;
}
inline uint32_t GCMovePacket::time() const {
  // @@protoc_insertion_point(field_get:network.GCMovePacket.time)
  return _internal_time();
}
inline void GCMovePacket::_internal_set_time(uint32_t value) {
  
  _impl_.time_ = value;
}
inline void GCMovePacket::set_time(uint32_t value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:network.GCMovePacket.time)
}

// uint32 duration = 8;
inline void GCMovePacket::clear_duration() {
  _impl_.duration_ = 0u;
}
inline uint32_t GCMovePacket::_internal_duration() const {
  return _impl_.duration_;
}
inline uint32_t GCMovePacket::duration() const {
  // @@protoc_insertion_point(field_get:network.GCMovePacket.duration)
  return _internal_duration();
}
inline void GCMovePacket::_internal_set_duration(uint32_t value) {
  
  _impl_.duration_ = value;
}
inline void GCMovePacket::set_duration(uint32_t value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:network.GCMovePacket.duration)
}

// -------------------------------------------------------------------

// GCSyncPositionPacket

// repeated .network.SyncPositionElement elements = 1;
inline int GCSyncPositionPacket::_internal_elements_size() const {
  return _impl_.elements_.size();
}
inline int GCSyncPositionPacket::elements_size() const {
  return _internal_elements_size();
}
inline ::network::SyncPositionElement* GCSyncPositionPacket::mutable_elements(int index) {
  // @@protoc_insertion_point(field_mutable:network.GCSyncPositionPacket.elements)
  return _impl_.elements_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::SyncPositionElement >*
GCSyncPositionPacket::mutable_elements() {
  // @@protoc_insertion_point(field_mutable_list:network.GCSyncPositionPacket.elements)
  return &_impl_.elements_;
}
inline const ::network::SyncPositionElement& GCSyncPositionPacket::_internal_elements(int index) const {
  return _impl_.elements_.Get(index);
}
inline const ::network::SyncPositionElement& GCSyncPositionPacket::elements(int index) const {
  // @@protoc_insertion_point(field_get:network.GCSyncPositionPacket.elements)
  return _internal_elements(index);
}
inline ::network::SyncPositionElement* GCSyncPositionPacket::_internal_add_elements() {
  return _impl_.elements_.Add();
}
inline ::network::SyncPositionElement* GCSyncPositionPacket::add_elements() {
  ::network::SyncPositionElement* _add = _internal_add_elements();
  // @@protoc_insertion_point(field_add:network.GCSyncPositionPacket.elements)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::SyncPositionElement >&
GCSyncPositionPacket::elements() const {
  // @@protoc_insertion_point(field_list:network.GCSyncPositionPacket.elements)
  return _impl_.elements_;
}

// -------------------------------------------------------------------

// GCFlyTargetingPacket

// uint32 shooter_vid = 1;
inline void GCFlyTargetingPacket::clear_shooter_vid() {
  _impl_.shooter_vid_ = 0u;
}
inline uint32_t GCFlyTargetingPacket::_internal_shooter_vid() const {
  return _impl_.shooter_vid_;
}
inline uint32_t GCFlyTargetingPacket::shooter_vid() const {
  // @@protoc_insertion_point(field_get:network.GCFlyTargetingPacket.shooter_vid)
  return _internal_shooter_vid();
}
inline void GCFlyTargetingPacket::_internal_set_shooter_vid(uint32_t value) {
  
  _impl_.shooter_vid_ = value;
}
inline void GCFlyTargetingPacket::set_shooter_vid(uint32_t value) {
  _internal_set_shooter_vid(value);
  // @@protoc_insertion_point(field_set:network.GCFlyTargetingPacket.shooter_vid)
}

// uint32 target_vid = 2;
inline void GCFlyTargetingPacket::clear_target_vid() {
  _impl_.target_vid_ = 0u;
}
inline uint32_t GCFlyTargetingPacket::_internal_target_vid() const {
  return _impl_.target_vid_;
}
inline uint32_t GCFlyTargetingPacket::target_vid() const {
  // @@protoc_insertion_point(field_get:network.GCFlyTargetingPacket.target_vid)
  return _internal_target_vid();
}
inline void GCFlyTargetingPacket::_internal_set_target_vid(uint32_t value) {
  
  _impl_.target_vid_ = value;
}
inline void GCFlyTargetingPacket::set_target_vid(uint32_t value) {
  _internal_set_target_vid(value);
  // @@protoc_insertion_point(field_set:network.GCFlyTargetingPacket.target_vid)
}

// int32 x = 3;
inline void GCFlyTargetingPacket::clear_x() {
  _impl_.x_ = 0;
}
inline int32_t GCFlyTargetingPacket::_internal_x() const {
  return _impl_.x_;
}
inline int32_t GCFlyTargetingPacket::x() const {
  // @@protoc_insertion_point(field_get:network.GCFlyTargetingPacket.x)
  return _internal_x();
}
inline void GCFlyTargetingPacket::_internal_set_x(int32_t value) {
  
  _impl_.x_ = value;
}
inline void GCFlyTargetingPacket::set_x(int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:network.GCFlyTargetingPacket.x)
}

// int32 y = 4;
inline void GCFlyTargetingPacket::clear_y() {
  _impl_.y_ = 0;
}
inline int32_t GCFlyTargetingPacket::_internal_y() const {
  return _impl_.y_;
}
inline int32_t GCFlyTargetingPacket::y() const {
  // @@protoc_insertion_point(field_get:network.GCFlyTargetingPacket.y)
  return _internal_y();
}
inline void GCFlyTargetingPacket::_internal_set_y(int32_t value) {
  
  _impl_.y_ = value;
}
inline void GCFlyTargetingPacket::set_y(int32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:network.GCFlyTargetingPacket.y)
}

// -------------------------------------------------------------------

// GCAddFlyTargetingPacket

// uint32 shooter_vid = 1;
inline void GCAddFlyTargetingPacket::clear_shooter_vid() {
  _impl_.shooter_vid_ = 0u;
}
inline uint32_t GCAddFlyTargetingPacket::_internal_shooter_vid() const {
  return _impl_.shooter_vid_;
}
inline uint32_t GCAddFlyTargetingPacket::shooter_vid() const {
  // @@protoc_insertion_point(field_get:network.GCAddFlyTargetingPacket.shooter_vid)
  return _internal_shooter_vid();
}
inline void GCAddFlyTargetingPacket::_internal_set_shooter_vid(uint32_t value) {
  
  _impl_.shooter_vid_ = value;
}
inline void GCAddFlyTargetingPacket::set_shooter_vid(uint32_t value) {
  _internal_set_shooter_vid(value);
  // @@protoc_insertion_point(field_set:network.GCAddFlyTargetingPacket.shooter_vid)
}

// uint32 target_vid = 2;
inline void GCAddFlyTargetingPacket::clear_target_vid() {
  _impl_.target_vid_ = 0u;
}
inline uint32_t GCAddFlyTargetingPacket::_internal_target_vid() const {
  return _impl_.target_vid_;
}
inline uint32_t GCAddFlyTargetingPacket::target_vid() const {
  // @@protoc_insertion_point(field_get:network.GCAddFlyTargetingPacket.target_vid)
  return _internal_target_vid();
}
inline void GCAddFlyTargetingPacket::_internal_set_target_vid(uint32_t value) {
  
  _impl_.target_vid_ = value;
}
inline void GCAddFlyTargetingPacket::set_target_vid(uint32_t value) {
  _internal_set_target_vid(value);
  // @@protoc_insertion_point(field_set:network.GCAddFlyTargetingPacket.target_vid)
}

// int32 x = 3;
inline void GCAddFlyTargetingPacket::clear_x() {
  _impl_.x_ = 0;
}
inline int32_t GCAddFlyTargetingPacket::_internal_x() const {
  return _impl_.x_;
}
inline int32_t GCAddFlyTargetingPacket::x() const {
  // @@protoc_insertion_point(field_get:network.GCAddFlyTargetingPacket.x)
  return _internal_x();
}
inline void GCAddFlyTargetingPacket::_internal_set_x(int32_t value) {
  
  _impl_.x_ = value;
}
inline void GCAddFlyTargetingPacket::set_x(int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:network.GCAddFlyTargetingPacket.x)
}

// int32 y = 4;
inline void GCAddFlyTargetingPacket::clear_y() {
  _impl_.y_ = 0;
}
inline int32_t GCAddFlyTargetingPacket::_internal_y() const {
  return _impl_.y_;
}
inline int32_t GCAddFlyTargetingPacket::y() const {
  // @@protoc_insertion_point(field_get:network.GCAddFlyTargetingPacket.y)
  return _internal_y();
}
inline void GCAddFlyTargetingPacket::_internal_set_y(int32_t value) {
  
  _impl_.y_ = value;
}
inline void GCAddFlyTargetingPacket::set_y(int32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:network.GCAddFlyTargetingPacket.y)
}

// -------------------------------------------------------------------

// GCTargetPacket

// uint32 vid = 1;
inline void GCTargetPacket::clear_vid() {
  _impl_.vid_ = 0u;
}
inline uint32_t GCTargetPacket::_internal_vid() const {
  return _impl_.vid_;
}
inline uint32_t GCTargetPacket::vid() const {
  // @@protoc_insertion_point(field_get:network.GCTargetPacket.vid)
  return _internal_vid();
}
inline void GCTargetPacket::_internal_set_vid(uint32_t value) {
  
  _impl_.vid_ = value;
}
inline void GCTargetPacket::set_vid(uint32_t value) {
  _internal_set_vid(value);
  // @@protoc_insertion_point(field_set:network.GCTargetPacket.vid)
}

// int32 cur_hp = 2;
inline void GCTargetPacket::clear_cur_hp() {
  _impl_.cur_hp_ = 0;
}
inline int32_t GCTargetPacket::_internal_cur_hp() const {
  return _impl_.cur_hp_;
}
inline int32_t GCTargetPacket::cur_hp() const {
  // @@protoc_insertion_point(field_get:network.GCTargetPacket.cur_hp)
  return _internal_cur_hp();
}
inline void GCTargetPacket::_internal_set_cur_hp(int32_t value) {
  
  _impl_.cur_hp_ = value;
}
inline void GCTargetPacket::set_cur_hp(int32_t value) {
  _internal_set_cur_hp(value);
  // @@protoc_insertion_point(field_set:network.GCTargetPacket.cur_hp)
}

// int32 max_hp = 3;
inline void GCTargetPacket::clear_max_hp() {
  _impl_.max_hp_ = 0;
}
inline int32_t GCTargetPacket::_internal_max_hp() const {
  return _impl_.max_hp_;
}
inline int32_t GCTargetPacket::max_hp() const {
  // @@protoc_insertion_point(field_get:network.GCTargetPacket.max_hp)
  return _internal_max_hp();
}
inline void GCTargetPacket::_internal_set_max_hp(int32_t value) {
  
  _impl_.max_hp_ = value;
}
inline void GCTargetPacket::set_max_hp(int32_t value) {
  _internal_set_max_hp(value);
  // @@protoc_insertion_point(field_set:network.GCTargetPacket.max_hp)
}

// uint32 hppercent = 4;
inline void GCTargetPacket::clear_hppercent() {
  _impl_.hppercent_ = 0u;
}
inline uint32_t GCTargetPacket::_internal_hppercent() const {
  return _impl_.hppercent_;
}
inline uint32_t GCTargetPacket::hppercent() const {
  // @@protoc_insertion_point(field_get:network.GCTargetPacket.hppercent)
  return _internal_hppercent();
}
inline void GCTargetPacket::_internal_set_hppercent(uint32_t value) {
  
  _impl_.hppercent_ = value;
}
inline void GCTargetPacket::set_hppercent(uint32_t value) {
  _internal_set_hppercent(value);
  // @@protoc_insertion_point(field_set:network.GCTargetPacket.hppercent)
}

// uint32 element = 5;
inline void GCTargetPacket::clear_element() {
  _impl_.element_ = 0u;
}
inline uint32_t GCTargetPacket::_internal_element() const {
  return _impl_.element_;
}
inline uint32_t GCTargetPacket::element() const {
  // @@protoc_insertion_point(field_get:network.GCTargetPacket.element)
  return _internal_element();
}
inline void GCTargetPacket::_internal_set_element(uint32_t value) {
  
  _impl_.element_ = value;
}
inline void GCTargetPacket::set_element(uint32_t value) {
  _internal_set_element(value);
  // @@protoc_insertion_point(field_set:network.GCTargetPacket.element)
}

// -------------------------------------------------------------------

// GCTargetMonsterInfoPacket

// uint32 race_num = 1;
inline void GCTargetMonsterInfoPacket::clear_race_num() {
  _impl_.race_num_ = 0u;
}
inline uint32_t GCTargetMonsterInfoPacket::_internal_race_num() const {
  return _impl_.race_num_;
}
inline uint32_t GCTargetMonsterInfoPacket::race_num() const {
  // @@protoc_insertion_point(field_get:network.GCTargetMonsterInfoPacket.race_num)
  return _internal_race_num();
}
inline void GCTargetMonsterInfoPacket::_internal_set_race_num(uint32_t value) {
  
  _impl_.race_num_ = value;
}
inline void GCTargetMonsterInfoPacket::set_race_num(uint32_t value) {
  _internal_set_race_num(value);
  // @@protoc_insertion_point(field_set:network.GCTargetMonsterInfoPacket.race_num)
}

// repeated .network.TTargetMonsterDropInfoTable drops = 2;
inline int GCTargetMonsterInfoPacket::_internal_drops_size() const {
  return _impl_.drops_.size();
}
inline int GCTargetMonsterInfoPacket::drops_size() const {
  return _internal_drops_size();
}
inline ::network::TTargetMonsterDropInfoTable* GCTargetMonsterInfoPacket::mutable_drops(int index) {
  // @@protoc_insertion_point(field_mutable:network.GCTargetMonsterInfoPacket.drops)
  return _impl_.drops_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TTargetMonsterDropInfoTable >*
GCTargetMonsterInfoPacket::mutable_drops() {
  // @@protoc_insertion_point(field_mutable_list:network.GCTargetMonsterInfoPacket.drops)
  return &_impl_.drops_;
}
inline const ::network::TTargetMonsterDropInfoTable& GCTargetMonsterInfoPacket::_internal_drops(int index) const {
  return _impl_.drops_.Get(index);
}
inline const ::network::TTargetMonsterDropInfoTable& GCTargetMonsterInfoPacket::drops(int index) const {
  // @@protoc_insertion_point(field_get:network.GCTargetMonsterInfoPacket.drops)
  return _internal_drops(index);
}
inline ::network::TTargetMonsterDropInfoTable* GCTargetMonsterInfoPacket::_internal_add_drops() {
  return _impl_.drops_.Add();
}
inline ::network::TTargetMonsterDropInfoTable* GCTargetMonsterInfoPacket::add_drops() {
  ::network::TTargetMonsterDropInfoTable* _add = _internal_add_drops();
  // @@protoc_insertion_point(field_add:network.GCTargetMonsterInfoPacket.drops)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TTargetMonsterDropInfoTable >&
GCTargetMonsterInfoPacket::drops() const {
  // @@protoc_insertion_point(field_list:network.GCTargetMonsterInfoPacket.drops)
  return _impl_.drops_;
}

// -------------------------------------------------------------------

// GCPlayerOnlineInformationPacket

// bytes player_name = 1;
inline void GCPlayerOnlineInformationPacket::clear_player_name() {
  _impl_.player_name_.ClearToEmpty();
}
inline const std::string& GCPlayerOnlineInformationPacket::player_name() const {
  // @@protoc_insertion_point(field_get:network.GCPlayerOnlineInformationPacket.player_name)
  return _internal_player_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GCPlayerOnlineInformationPacket::set_player_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.player_name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GCPlayerOnlineInformationPacket.player_name)
}
inline std::string* GCPlayerOnlineInformationPacket::mutable_player_name() {
  std::string* _s = _internal_mutable_player_name();
  // @@protoc_insertion_point(field_mutable:network.GCPlayerOnlineInformationPacket.player_name)
  return _s;
}
inline const std::string& GCPlayerOnlineInformationPacket::_internal_player_name() const {
  return _impl_.player_name_.Get();
}
inline void GCPlayerOnlineInformationPacket::_internal_set_player_name(const std::string& value) {
  
  _impl_.player_name_.Set(value, GetArenaForAllocation());
}
inline std::string* GCPlayerOnlineInformationPacket::_internal_mutable_player_name() {
  
  return _impl_.player_name_.Mutable(GetArenaForAllocation());
}
inline std::string* GCPlayerOnlineInformationPacket::release_player_name() {
  // @@protoc_insertion_point(field_release:network.GCPlayerOnlineInformationPacket.player_name)
  return _impl_.player_name_.Release();
}
inline void GCPlayerOnlineInformationPacket::set_allocated_player_name(std::string* player_name) {
  if (player_name != nullptr) {
    
  } else {
    
  }
  _impl_.player_name_.SetAllocated(player_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.player_name_.IsDefault()) {
    _impl_.player_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GCPlayerOnlineInformationPacket.player_name)
}

// int32 language_id = 2;
inline void GCPlayerOnlineInformationPacket::clear_language_id() {
  _impl_.language_id_ = 0;
}
inline int32_t GCPlayerOnlineInformationPacket::_internal_language_id() const {
  return _impl_.language_id_;
}
inline int32_t GCPlayerOnlineInformationPacket::language_id() const {
  // @@protoc_insertion_point(field_get:network.GCPlayerOnlineInformationPacket.language_id)
  return _internal_language_id();
}
inline void GCPlayerOnlineInformationPacket::_internal_set_language_id(int32_t value) {
  
  _impl_.language_id_ = value;
}
inline void GCPlayerOnlineInformationPacket::set_language_id(int32_t value) {
  _internal_set_language_id(value);
  // @@protoc_insertion_point(field_set:network.GCPlayerOnlineInformationPacket.language_id)
}

// -------------------------------------------------------------------

// GCUpdateCharacterScalePacket

// uint32 vid = 1;
inline void GCUpdateCharacterScalePacket::clear_vid() {
  _impl_.vid_ = 0u;
}
inline uint32_t GCUpdateCharacterScalePacket::_internal_vid() const {
  return _impl_.vid_;
}
inline uint32_t GCUpdateCharacterScalePacket::vid() const {
  // @@protoc_insertion_point(field_get:network.GCUpdateCharacterScalePacket.vid)
  return _internal_vid();
}
inline void GCUpdateCharacterScalePacket::_internal_set_vid(uint32_t value) {
  
  _impl_.vid_ = value;
}
inline void GCUpdateCharacterScalePacket::set_vid(uint32_t value) {
  _internal_set_vid(value);
  // @@protoc_insertion_point(field_set:network.GCUpdateCharacterScalePacket.vid)
}

// float scale = 2;
inline void GCUpdateCharacterScalePacket::clear_scale() {
  _impl_.scale_ = 0;
}
inline float GCUpdateCharacterScalePacket::_internal_scale() const {
  return _impl_.scale_;
}
inline float GCUpdateCharacterScalePacket::scale() const {
  // @@protoc_insertion_point(field_get:network.GCUpdateCharacterScalePacket.scale)
  return _internal_scale();
}
inline void GCUpdateCharacterScalePacket::_internal_set_scale(float value) {
  
  _impl_.scale_ = value;
}
inline void GCUpdateCharacterScalePacket::set_scale(float value) {
  _internal_set_scale(value);
  // @@protoc_insertion_point(field_set:network.GCUpdateCharacterScalePacket.scale)
}

// -------------------------------------------------------------------

// GCMaintenanceInfoPacket

// uint32 remaining_time = 1;
inline void GCMaintenanceInfoPacket::clear_remaining_time() {
  _impl_.remaining_time_ = 0u;
}
inline uint32_t GCMaintenanceInfoPacket::_internal_remaining_time() const {
  return _impl_.remaining_time_;
}
inline uint32_t GCMaintenanceInfoPacket::remaining_time() const {
  // @@protoc_insertion_point(field_get:network.GCMaintenanceInfoPacket.remaining_time)
  return _internal_remaining_time();
}
inline void GCMaintenanceInfoPacket::_internal_set_remaining_time(uint32_t value) {
  
  _impl_.remaining_time_ = value;
}
inline void GCMaintenanceInfoPacket::set_remaining_time(uint32_t value) {
  _internal_set_remaining_time(value);
  // @@protoc_insertion_point(field_set:network.GCMaintenanceInfoPacket.remaining_time)
}

// uint32 duration = 2;
inline void GCMaintenanceInfoPacket::clear_duration() {
  _impl_.duration_ = 0u;
}
inline uint32_t GCMaintenanceInfoPacket::_internal_duration() const {
  return _impl_.duration_;
}
inline uint32_t GCMaintenanceInfoPacket::duration() const {
  // @@protoc_insertion_point(field_get:network.GCMaintenanceInfoPacket.duration)
  return _internal_duration();
}
inline void GCMaintenanceInfoPacket::_internal_set_duration(uint32_t value) {
  
  _impl_.duration_ = value;
}
inline void GCMaintenanceInfoPacket::set_duration(uint32_t value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:network.GCMaintenanceInfoPacket.duration)
}

// bytes cause = 3;
inline void GCMaintenanceInfoPacket::clear_cause() {
  _impl_.cause_.ClearToEmpty();
}
inline const std::string& GCMaintenanceInfoPacket::cause() const {
  // @@protoc_insertion_point(field_get:network.GCMaintenanceInfoPacket.cause)
  return _internal_cause();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GCMaintenanceInfoPacket::set_cause(ArgT0&& arg0, ArgT... args) {
 
 _impl_.cause_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GCMaintenanceInfoPacket.cause)
}
inline std::string* GCMaintenanceInfoPacket::mutable_cause() {
  std::string* _s = _internal_mutable_cause();
  // @@protoc_insertion_point(field_mutable:network.GCMaintenanceInfoPacket.cause)
  return _s;
}
inline const std::string& GCMaintenanceInfoPacket::_internal_cause() const {
  return _impl_.cause_.Get();
}
inline void GCMaintenanceInfoPacket::_internal_set_cause(const std::string& value) {
  
  _impl_.cause_.Set(value, GetArenaForAllocation());
}
inline std::string* GCMaintenanceInfoPacket::_internal_mutable_cause() {
  
  return _impl_.cause_.Mutable(GetArenaForAllocation());
}
inline std::string* GCMaintenanceInfoPacket::release_cause() {
  // @@protoc_insertion_point(field_release:network.GCMaintenanceInfoPacket.cause)
  return _impl_.cause_.Release();
}
inline void GCMaintenanceInfoPacket::set_allocated_cause(std::string* cause) {
  if (cause != nullptr) {
    
  } else {
    
  }
  _impl_.cause_.SetAllocated(cause, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.cause_.IsDefault()) {
    _impl_.cause_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GCMaintenanceInfoPacket.cause)
}

// -------------------------------------------------------------------

// GCObserverAddPacket

// uint32 vid = 1;
inline void GCObserverAddPacket::clear_vid() {
  _impl_.vid_ = 0u;
}
inline uint32_t GCObserverAddPacket::_internal_vid() const {
  return _impl_.vid_;
}
inline uint32_t GCObserverAddPacket::vid() const {
  // @@protoc_insertion_point(field_get:network.GCObserverAddPacket.vid)
  return _internal_vid();
}
inline void GCObserverAddPacket::_internal_set_vid(uint32_t value) {
  
  _impl_.vid_ = value;
}
inline void GCObserverAddPacket::set_vid(uint32_t value) {
  _internal_set_vid(value);
  // @@protoc_insertion_point(field_set:network.GCObserverAddPacket.vid)
}

// int32 x = 2;
inline void GCObserverAddPacket::clear_x() {
  _impl_.x_ = 0;
}
inline int32_t GCObserverAddPacket::_internal_x() const {
  return _impl_.x_;
}
inline int32_t GCObserverAddPacket::x() const {
  // @@protoc_insertion_point(field_get:network.GCObserverAddPacket.x)
  return _internal_x();
}
inline void GCObserverAddPacket::_internal_set_x(int32_t value) {
  
  _impl_.x_ = value;
}
inline void GCObserverAddPacket::set_x(int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:network.GCObserverAddPacket.x)
}

// int32 y = 3;
inline void GCObserverAddPacket::clear_y() {
  _impl_.y_ = 0;
}
inline int32_t GCObserverAddPacket::_internal_y() const {
  return _impl_.y_;
}
inline int32_t GCObserverAddPacket::y() const {
  // @@protoc_insertion_point(field_get:network.GCObserverAddPacket.y)
  return _internal_y();
}
inline void GCObserverAddPacket::_internal_set_y(int32_t value) {
  
  _impl_.y_ = value;
}
inline void GCObserverAddPacket::set_y(int32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:network.GCObserverAddPacket.y)
}

// -------------------------------------------------------------------

// GCObserverRemovePacket

// uint32 vid = 1;
inline void GCObserverRemovePacket::clear_vid() {
  _impl_.vid_ = 0u;
}
inline uint32_t GCObserverRemovePacket::_internal_vid() const {
  return _impl_.vid_;
}
inline uint32_t GCObserverRemovePacket::vid() const {
  // @@protoc_insertion_point(field_get:network.GCObserverRemovePacket.vid)
  return _internal_vid();
}
inline void GCObserverRemovePacket::_internal_set_vid(uint32_t value) {
  
  _impl_.vid_ = value;
}
inline void GCObserverRemovePacket::set_vid(uint32_t value) {
  _internal_set_vid(value);
  // @@protoc_insertion_point(field_set:network.GCObserverRemovePacket.vid)
}

// -------------------------------------------------------------------

// GCObserverMovePacket

// uint32 vid = 1;
inline void GCObserverMovePacket::clear_vid() {
  _impl_.vid_ = 0u;
}
inline uint32_t GCObserverMovePacket::_internal_vid() const {
  return _impl_.vid_;
}
inline uint32_t GCObserverMovePacket::vid() const {
  // @@protoc_insertion_point(field_get:network.GCObserverMovePacket.vid)
  return _internal_vid();
}
inline void GCObserverMovePacket::_internal_set_vid(uint32_t value) {
  
  _impl_.vid_ = value;
}
inline void GCObserverMovePacket::set_vid(uint32_t value) {
  _internal_set_vid(value);
  // @@protoc_insertion_point(field_set:network.GCObserverMovePacket.vid)
}

// int32 x = 2;
inline void GCObserverMovePacket::clear_x() {
  _impl_.x_ = 0;
}
inline int32_t GCObserverMovePacket::_internal_x() const {
  return _impl_.x_;
}
inline int32_t GCObserverMovePacket::x() const {
  // @@protoc_insertion_point(field_get:network.GCObserverMovePacket.x)
  return _internal_x();
}
inline void GCObserverMovePacket::_internal_set_x(int32_t value) {
  
  _impl_.x_ = value;
}
inline void GCObserverMovePacket::set_x(int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:network.GCObserverMovePacket.x)
}

// int32 y = 3;
inline void GCObserverMovePacket::clear_y() {
  _impl_.y_ = 0;
}
inline int32_t GCObserverMovePacket::_internal_y() const {
  return _impl_.y_;
}
inline int32_t GCObserverMovePacket::y() const {
  // @@protoc_insertion_point(field_get:network.GCObserverMovePacket.y)
  return _internal_y();
}
inline void GCObserverMovePacket::_internal_set_y(int32_t value) {
  
  _impl_.y_ = value;
}
inline void GCObserverMovePacket::set_y(int32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:network.GCObserverMovePacket.y)
}

// -------------------------------------------------------------------

// GCSafeboxSizePacket

// uint32 size = 1;
inline void GCSafeboxSizePacket::clear_size() {
  _impl_.size_ = 0u;
}
inline uint32_t GCSafeboxSizePacket::_internal_size() const {
  return _impl_.size_;
}
inline uint32_t GCSafeboxSizePacket::size() const {
  // @@protoc_insertion_point(field_get:network.GCSafeboxSizePacket.size)
  return _internal_size();
}
inline void GCSafeboxSizePacket::_internal_set_size(uint32_t value) {
  
  _impl_.size_ = value;
}
inline void GCSafeboxSizePacket::set_size(uint32_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:network.GCSafeboxSizePacket.size)
}

// -------------------------------------------------------------------

// GCSafeboxMoneyChangePacket

// uint32 money = 1;
inline void GCSafeboxMoneyChangePacket::clear_money() {
  _impl_.money_ = 0u;
}
inline uint32_t GCSafeboxMoneyChangePacket::_internal_money() const {
  return _impl_.money_;
}
inline uint32_t GCSafeboxMoneyChangePacket::money() const {
  // @@protoc_insertion_point(field_get:network.GCSafeboxMoneyChangePacket.money)
  return _internal_money();
}
inline void GCSafeboxMoneyChangePacket::_internal_set_money(uint32_t value) {
  
  _impl_.money_ = value;
}
inline void GCSafeboxMoneyChangePacket::set_money(uint32_t value) {
  _internal_set_money(value);
  // @@protoc_insertion_point(field_set:network.GCSafeboxMoneyChangePacket.money)
}

// -------------------------------------------------------------------

// GCWarpPacket

// int32 x = 1;
inline void GCWarpPacket::clear_x() {
  _impl_.x_ = 0;
}
inline int32_t GCWarpPacket::_internal_x() const {
  return _impl_.x_;
}
inline int32_t GCWarpPacket::x() const {
  // @@protoc_insertion_point(field_get:network.GCWarpPacket.x)
  return _internal_x();
}
inline void GCWarpPacket::_internal_set_x(int32_t value) {
  
  _impl_.x_ = value;
}
inline void GCWarpPacket::set_x(int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:network.GCWarpPacket.x)
}

// int32 y = 2;
inline void GCWarpPacket::clear_y() {
  _impl_.y_ = 0;
}
inline int32_t GCWarpPacket::_internal_y() const {
  return _impl_.y_;
}
inline int32_t GCWarpPacket::y() const {
  // @@protoc_insertion_point(field_get:network.GCWarpPacket.y)
  return _internal_y();
}
inline void GCWarpPacket::_internal_set_y(int32_t value) {
  
  _impl_.y_ = value;
}
inline void GCWarpPacket::set_y(int32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:network.GCWarpPacket.y)
}

// int32 addr = 3;
inline void GCWarpPacket::clear_addr() {
  _impl_.addr_ = 0;
}
inline int32_t GCWarpPacket::_internal_addr() const {
  return _impl_.addr_;
}
inline int32_t GCWarpPacket::addr() const {
  // @@protoc_insertion_point(field_get:network.GCWarpPacket.addr)
  return _internal_addr();
}
inline void GCWarpPacket::_internal_set_addr(int32_t value) {
  
  _impl_.addr_ = value;
}
inline void GCWarpPacket::set_addr(int32_t value) {
  _internal_set_addr(value);
  // @@protoc_insertion_point(field_set:network.GCWarpPacket.addr)
}

// uint32 port = 4;
inline void GCWarpPacket::clear_port() {
  _impl_.port_ = 0u;
}
inline uint32_t GCWarpPacket::_internal_port() const {
  return _impl_.port_;
}
inline uint32_t GCWarpPacket::port() const {
  // @@protoc_insertion_point(field_get:network.GCWarpPacket.port)
  return _internal_port();
}
inline void GCWarpPacket::_internal_set_port(uint32_t value) {
  
  _impl_.port_ = value;
}
inline void GCWarpPacket::set_port(uint32_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:network.GCWarpPacket.port)
}

// -------------------------------------------------------------------

// GCPVPPacket

// uint32 vid_src = 1;
inline void GCPVPPacket::clear_vid_src() {
  _impl_.vid_src_ = 0u;
}
inline uint32_t GCPVPPacket::_internal_vid_src() const {
  return _impl_.vid_src_;
}
inline uint32_t GCPVPPacket::vid_src() const {
  // @@protoc_insertion_point(field_get:network.GCPVPPacket.vid_src)
  return _internal_vid_src();
}
inline void GCPVPPacket::_internal_set_vid_src(uint32_t value) {
  
  _impl_.vid_src_ = value;
}
inline void GCPVPPacket::set_vid_src(uint32_t value) {
  _internal_set_vid_src(value);
  // @@protoc_insertion_point(field_set:network.GCPVPPacket.vid_src)
}

// uint32 vid_dst = 2;
inline void GCPVPPacket::clear_vid_dst() {
  _impl_.vid_dst_ = 0u;
}
inline uint32_t GCPVPPacket::_internal_vid_dst() const {
  return _impl_.vid_dst_;
}
inline uint32_t GCPVPPacket::vid_dst() const {
  // @@protoc_insertion_point(field_get:network.GCPVPPacket.vid_dst)
  return _internal_vid_dst();
}
inline void GCPVPPacket::_internal_set_vid_dst(uint32_t value) {
  
  _impl_.vid_dst_ = value;
}
inline void GCPVPPacket::set_vid_dst(uint32_t value) {
  _internal_set_vid_dst(value);
  // @@protoc_insertion_point(field_set:network.GCPVPPacket.vid_dst)
}

// uint32 mode = 3;
inline void GCPVPPacket::clear_mode() {
  _impl_.mode_ = 0u;
}
inline uint32_t GCPVPPacket::_internal_mode() const {
  return _impl_.mode_;
}
inline uint32_t GCPVPPacket::mode() const {
  // @@protoc_insertion_point(field_get:network.GCPVPPacket.mode)
  return _internal_mode();
}
inline void GCPVPPacket::_internal_set_mode(uint32_t value) {
  
  _impl_.mode_ = value;
}
inline void GCPVPPacket::set_mode(uint32_t value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:network.GCPVPPacket.mode)
}

// -------------------------------------------------------------------

// GCDuelStartPacket

// repeated uint32 vids = 1;
inline int GCDuelStartPacket::_internal_vids_size() const {
  return _impl_.vids_.size();
}
inline int GCDuelStartPacket::vids_size() const {
  return _internal_vids_size();
}
inline void GCDuelStartPacket::clear_vids() {
  _impl_.vids_.Clear();
}
inline uint32_t GCDuelStartPacket::_internal_vids(int index) const {
  return _impl_.vids_.Get(index);
}
inline uint32_t GCDuelStartPacket::vids(int index) const {
  // @@protoc_insertion_point(field_get:network.GCDuelStartPacket.vids)
  return _internal_vids(index);
}
inline void GCDuelStartPacket::set_vids(int index, uint32_t value) {
  _impl_.vids_.Set(index, value);
  // @@protoc_insertion_point(field_set:network.GCDuelStartPacket.vids)
}
inline void GCDuelStartPacket::_internal_add_vids(uint32_t value) {
  _impl_.vids_.Add(value);
}
inline void GCDuelStartPacket::add_vids(uint32_t value) {
  _internal_add_vids(value);
  // @@protoc_insertion_point(field_add:network.GCDuelStartPacket.vids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
GCDuelStartPacket::_internal_vids() const {
  return _impl_.vids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
GCDuelStartPacket::vids() const {
  // @@protoc_insertion_point(field_list:network.GCDuelStartPacket.vids)
  return _internal_vids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
GCDuelStartPacket::_internal_mutable_vids() {
  return &_impl_.vids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
GCDuelStartPacket::mutable_vids() {
  // @@protoc_insertion_point(field_mutable_list:network.GCDuelStartPacket.vids)
  return _internal_mutable_vids();
}

// -------------------------------------------------------------------

// GCOwnershipPacket

// uint32 owner_vid = 1;
inline void GCOwnershipPacket::clear_owner_vid() {
  _impl_.owner_vid_ = 0u;
}
inline uint32_t GCOwnershipPacket::_internal_owner_vid() const {
  return _impl_.owner_vid_;
}
inline uint32_t GCOwnershipPacket::owner_vid() const {
  // @@protoc_insertion_point(field_get:network.GCOwnershipPacket.owner_vid)
  return _internal_owner_vid();
}
inline void GCOwnershipPacket::_internal_set_owner_vid(uint32_t value) {
  
  _impl_.owner_vid_ = value;
}
inline void GCOwnershipPacket::set_owner_vid(uint32_t value) {
  _internal_set_owner_vid(value);
  // @@protoc_insertion_point(field_set:network.GCOwnershipPacket.owner_vid)
}

// uint32 victim_vid = 2;
inline void GCOwnershipPacket::clear_victim_vid() {
  _impl_.victim_vid_ = 0u;
}
inline uint32_t GCOwnershipPacket::_internal_victim_vid() const {
  return _impl_.victim_vid_;
}
inline uint32_t GCOwnershipPacket::victim_vid() const {
  // @@protoc_insertion_point(field_get:network.GCOwnershipPacket.victim_vid)
  return _internal_victim_vid();
}
inline void GCOwnershipPacket::_internal_set_victim_vid(uint32_t value) {
  
  _impl_.victim_vid_ = value;
}
inline void GCOwnershipPacket::set_victim_vid(uint32_t value) {
  _internal_set_victim_vid(value);
  // @@protoc_insertion_point(field_set:network.GCOwnershipPacket.victim_vid)
}

// -------------------------------------------------------------------

// GCPositionPacket

// uint32 vid = 1;
inline void GCPositionPacket::clear_vid() {
  _impl_.vid_ = 0u;
}
inline uint32_t GCPositionPacket::_internal_vid() const {
  return _impl_.vid_;
}
inline uint32_t GCPositionPacket::vid() const {
  // @@protoc_insertion_point(field_get:network.GCPositionPacket.vid)
  return _internal_vid();
}
inline void GCPositionPacket::_internal_set_vid(uint32_t value) {
  
  _impl_.vid_ = value;
}
inline void GCPositionPacket::set_vid(uint32_t value) {
  _internal_set_vid(value);
  // @@protoc_insertion_point(field_set:network.GCPositionPacket.vid)
}

// uint32 position = 2;
inline void GCPositionPacket::clear_position() {
  _impl_.position_ = 0u;
}
inline uint32_t GCPositionPacket::_internal_position() const {
  return _impl_.position_;
}
inline uint32_t GCPositionPacket::position() const {
  // @@protoc_insertion_point(field_get:network.GCPositionPacket.position)
  return _internal_position();
}
inline void GCPositionPacket::_internal_set_position(uint32_t value) {
  
  _impl_.position_ = value;
}
inline void GCPositionPacket::set_position(uint32_t value) {
  _internal_set_position(value);
  // @@protoc_insertion_point(field_set:network.GCPositionPacket.position)
}

// -------------------------------------------------------------------

// GCStunPacket

// uint32 vid = 1;
inline void GCStunPacket::clear_vid() {
  _impl_.vid_ = 0u;
}
inline uint32_t GCStunPacket::_internal_vid() const {
  return _impl_.vid_;
}
inline uint32_t GCStunPacket::vid() const {
  // @@protoc_insertion_point(field_get:network.GCStunPacket.vid)
  return _internal_vid();
}
inline void GCStunPacket::_internal_set_vid(uint32_t value) {
  
  _impl_.vid_ = value;
}
inline void GCStunPacket::set_vid(uint32_t value) {
  _internal_set_vid(value);
  // @@protoc_insertion_point(field_set:network.GCStunPacket.vid)
}

// -------------------------------------------------------------------

// GCDeadPacket

// uint32 vid = 1;
inline void GCDeadPacket::clear_vid() {
  _impl_.vid_ = 0u;
}
inline uint32_t GCDeadPacket::_internal_vid() const {
  return _impl_.vid_;
}
inline uint32_t GCDeadPacket::vid() const {
  // @@protoc_insertion_point(field_get:network.GCDeadPacket.vid)
  return _internal_vid();
}
inline void GCDeadPacket::_internal_set_vid(uint32_t value) {
  
  _impl_.vid_ = value;
}
inline void GCDeadPacket::set_vid(uint32_t value) {
  _internal_set_vid(value);
  // @@protoc_insertion_point(field_set:network.GCDeadPacket.vid)
}

// bool killer_is_pc = 2;
inline void GCDeadPacket::clear_killer_is_pc() {
  _impl_.killer_is_pc_ = false;
}
inline bool GCDeadPacket::_internal_killer_is_pc() const {
  return _impl_.killer_is_pc_;
}
inline bool GCDeadPacket::killer_is_pc() const {
  // @@protoc_insertion_point(field_get:network.GCDeadPacket.killer_is_pc)
  return _internal_killer_is_pc();
}
inline void GCDeadPacket::_internal_set_killer_is_pc(bool value) {
  
  _impl_.killer_is_pc_ = value;
}
inline void GCDeadPacket::set_killer_is_pc(bool value) {
  _internal_set_killer_is_pc(value);
  // @@protoc_insertion_point(field_set:network.GCDeadPacket.killer_is_pc)
}

// -------------------------------------------------------------------

// GCPointsPacket

// repeated int64 points = 1;
inline int GCPointsPacket::_internal_points_size() const {
  return _impl_.points_.size();
}
inline int GCPointsPacket::points_size() const {
  return _internal_points_size();
}
inline void GCPointsPacket::clear_points() {
  _impl_.points_.Clear();
}
inline int64_t GCPointsPacket::_internal_points(int index) const {
  return _impl_.points_.Get(index);
}
inline int64_t GCPointsPacket::points(int index) const {
  // @@protoc_insertion_point(field_get:network.GCPointsPacket.points)
  return _internal_points(index);
}
inline void GCPointsPacket::set_points(int index, int64_t value) {
  _impl_.points_.Set(index, value);
  // @@protoc_insertion_point(field_set:network.GCPointsPacket.points)
}
inline void GCPointsPacket::_internal_add_points(int64_t value) {
  _impl_.points_.Add(value);
}
inline void GCPointsPacket::add_points(int64_t value) {
  _internal_add_points(value);
  // @@protoc_insertion_point(field_add:network.GCPointsPacket.points)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
GCPointsPacket::_internal_points() const {
  return _impl_.points_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
GCPointsPacket::points() const {
  // @@protoc_insertion_point(field_list:network.GCPointsPacket.points)
  return _internal_points();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
GCPointsPacket::_internal_mutable_points() {
  return &_impl_.points_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
GCPointsPacket::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:network.GCPointsPacket.points)
  return _internal_mutable_points();
}

// repeated int64 real_points = 2;
inline int GCPointsPacket::_internal_real_points_size() const {
  return _impl_.real_points_.size();
}
inline int GCPointsPacket::real_points_size() const {
  return _internal_real_points_size();
}
inline void GCPointsPacket::clear_real_points() {
  _impl_.real_points_.Clear();
}
inline int64_t GCPointsPacket::_internal_real_points(int index) const {
  return _impl_.real_points_.Get(index);
}
inline int64_t GCPointsPacket::real_points(int index) const {
  // @@protoc_insertion_point(field_get:network.GCPointsPacket.real_points)
  return _internal_real_points(index);
}
inline void GCPointsPacket::set_real_points(int index, int64_t value) {
  _impl_.real_points_.Set(index, value);
  // @@protoc_insertion_point(field_set:network.GCPointsPacket.real_points)
}
inline void GCPointsPacket::_internal_add_real_points(int64_t value) {
  _impl_.real_points_.Add(value);
}
inline void GCPointsPacket::add_real_points(int64_t value) {
  _internal_add_real_points(value);
  // @@protoc_insertion_point(field_add:network.GCPointsPacket.real_points)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
GCPointsPacket::_internal_real_points() const {
  return _impl_.real_points_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
GCPointsPacket::real_points() const {
  // @@protoc_insertion_point(field_list:network.GCPointsPacket.real_points)
  return _internal_real_points();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
GCPointsPacket::_internal_mutable_real_points() {
  return &_impl_.real_points_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
GCPointsPacket::mutable_real_points() {
  // @@protoc_insertion_point(field_mutable_list:network.GCPointsPacket.real_points)
  return _internal_mutable_real_points();
}

// -------------------------------------------------------------------

// GCPointChangePacket

// uint32 vid = 1;
inline void GCPointChangePacket::clear_vid() {
  _impl_.vid_ = 0u;
}
inline uint32_t GCPointChangePacket::_internal_vid() const {
  return _impl_.vid_;
}
inline uint32_t GCPointChangePacket::vid() const {
  // @@protoc_insertion_point(field_get:network.GCPointChangePacket.vid)
  return _internal_vid();
}
inline void GCPointChangePacket::_internal_set_vid(uint32_t value) {
  
  _impl_.vid_ = value;
}
inline void GCPointChangePacket::set_vid(uint32_t value) {
  _internal_set_vid(value);
  // @@protoc_insertion_point(field_set:network.GCPointChangePacket.vid)
}

// uint32 type = 2;
inline void GCPointChangePacket::clear_type() {
  _impl_.type_ = 0u;
}
inline uint32_t GCPointChangePacket::_internal_type() const {
  return _impl_.type_;
}
inline uint32_t GCPointChangePacket::type() const {
  // @@protoc_insertion_point(field_get:network.GCPointChangePacket.type)
  return _internal_type();
}
inline void GCPointChangePacket::_internal_set_type(uint32_t value) {
  
  _impl_.type_ = value;
}
inline void GCPointChangePacket::set_type(uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:network.GCPointChangePacket.type)
}

// int64 amount = 3;
inline void GCPointChangePacket::clear_amount() {
  _impl_.amount_ = int64_t{0};
}
inline int64_t GCPointChangePacket::_internal_amount() const {
  return _impl_.amount_;
}
inline int64_t GCPointChangePacket::amount() const {
  // @@protoc_insertion_point(field_get:network.GCPointChangePacket.amount)
  return _internal_amount();
}
inline void GCPointChangePacket::_internal_set_amount(int64_t value) {
  
  _impl_.amount_ = value;
}
inline void GCPointChangePacket::set_amount(int64_t value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:network.GCPointChangePacket.amount)
}

// int64 value = 4;
inline void GCPointChangePacket::clear_value() {
  _impl_.value_ = int64_t{0};
}
inline int64_t GCPointChangePacket::_internal_value() const {
  return _impl_.value_;
}
inline int64_t GCPointChangePacket::value() const {
  // @@protoc_insertion_point(field_get:network.GCPointChangePacket.value)
  return _internal_value();
}
inline void GCPointChangePacket::_internal_set_value(int64_t value) {
  
  _impl_.value_ = value;
}
inline void GCPointChangePacket::set_value(int64_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:network.GCPointChangePacket.value)
}

// -------------------------------------------------------------------

// GCRealPointSetPacket

// uint32 type = 1;
inline void GCRealPointSetPacket::clear_type() {
  _impl_.type_ = 0u;
}
inline uint32_t GCRealPointSetPacket::_internal_type() const {
  return _impl_.type_;
}
inline uint32_t GCRealPointSetPacket::type() const {
  // @@protoc_insertion_point(field_get:network.GCRealPointSetPacket.type)
  return _internal_type();
}
inline void GCRealPointSetPacket::_internal_set_type(uint32_t value) {
  
  _impl_.type_ = value;
}
inline void GCRealPointSetPacket::set_type(uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:network.GCRealPointSetPacket.type)
}

// int64 value = 2;
inline void GCRealPointSetPacket::clear_value() {
  _impl_.value_ = int64_t{0};
}
inline int64_t GCRealPointSetPacket::_internal_value() const {
  return _impl_.value_;
}
inline int64_t GCRealPointSetPacket::value() const {
  // @@protoc_insertion_point(field_get:network.GCRealPointSetPacket.value)
  return _internal_value();
}
inline void GCRealPointSetPacket::_internal_set_value(int64_t value) {
  
  _impl_.value_ = value;
}
inline void GCRealPointSetPacket::set_value(int64_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:network.GCRealPointSetPacket.value)
}

// -------------------------------------------------------------------

// GCQuickslotAddPacket

// uint32 pos = 1;
inline void GCQuickslotAddPacket::clear_pos() {
  _impl_.pos_ = 0u;
}
inline uint32_t GCQuickslotAddPacket::_internal_pos() const {
  return _impl_.pos_;
}
inline uint32_t GCQuickslotAddPacket::pos() const {
  // @@protoc_insertion_point(field_get:network.GCQuickslotAddPacket.pos)
  return _internal_pos();
}
inline void GCQuickslotAddPacket::_internal_set_pos(uint32_t value) {
  
  _impl_.pos_ = value;
}
inline void GCQuickslotAddPacket::set_pos(uint32_t value) {
  _internal_set_pos(value);
  // @@protoc_insertion_point(field_set:network.GCQuickslotAddPacket.pos)
}

// .TQuickslot slot = 2;
inline bool GCQuickslotAddPacket::_internal_has_slot() const {
  return this != internal_default_instance() && _impl_.slot_ != nullptr;
}
inline bool GCQuickslotAddPacket::has_slot() const {
  return _internal_has_slot();
}
inline const ::TQuickslot& GCQuickslotAddPacket::_internal_slot() const {
  const ::TQuickslot* p = _impl_.slot_;
  return p != nullptr ? *p : reinterpret_cast<const ::TQuickslot&>(
      ::_TQuickslot_default_instance_);
}
inline const ::TQuickslot& GCQuickslotAddPacket::slot() const {
  // @@protoc_insertion_point(field_get:network.GCQuickslotAddPacket.slot)
  return _internal_slot();
}
inline void GCQuickslotAddPacket::unsafe_arena_set_allocated_slot(
    ::TQuickslot* slot) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.slot_);
  }
  _impl_.slot_ = slot;
  if (slot) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:network.GCQuickslotAddPacket.slot)
}
inline ::TQuickslot* GCQuickslotAddPacket::release_slot() {
  
  ::TQuickslot* temp = _impl_.slot_;
  _impl_.slot_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TQuickslot* GCQuickslotAddPacket::unsafe_arena_release_slot() {
  // @@protoc_insertion_point(field_release:network.GCQuickslotAddPacket.slot)
  
  ::TQuickslot* temp = _impl_.slot_;
  _impl_.slot_ = nullptr;
  return temp;
}
inline ::TQuickslot* GCQuickslotAddPacket::_internal_mutable_slot() {
  
  if (_impl_.slot_ == nullptr) {
    auto* p = CreateMaybeMessage<::TQuickslot>(GetArenaForAllocation());
    _impl_.slot_ = p;
  }
  return _impl_.slot_;
}
inline ::TQuickslot* GCQuickslotAddPacket::mutable_slot() {
  ::TQuickslot* _msg = _internal_mutable_slot();
  // @@protoc_insertion_point(field_mutable:network.GCQuickslotAddPacket.slot)
  return _msg;
}
inline void GCQuickslotAddPacket::set_allocated_slot(::TQuickslot* slot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.slot_);
  }
  if (slot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(slot));
    if (message_arena != submessage_arena) {
      slot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, slot, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.slot_ = slot;
  // @@protoc_insertion_point(field_set_allocated:network.GCQuickslotAddPacket.slot)
}

// -------------------------------------------------------------------

// GCQuickslotDelPacket

// uint32 pos = 1;
inline void GCQuickslotDelPacket::clear_pos() {
  _impl_.pos_ = 0u;
}
inline uint32_t GCQuickslotDelPacket::_internal_pos() const {
  return _impl_.pos_;
}
inline uint32_t GCQuickslotDelPacket::pos() const {
  // @@protoc_insertion_point(field_get:network.GCQuickslotDelPacket.pos)
  return _internal_pos();
}
inline void GCQuickslotDelPacket::_internal_set_pos(uint32_t value) {
  
  _impl_.pos_ = value;
}
inline void GCQuickslotDelPacket::set_pos(uint32_t value) {
  _internal_set_pos(value);
  // @@protoc_insertion_point(field_set:network.GCQuickslotDelPacket.pos)
}

// -------------------------------------------------------------------

// GCQuickslotSwapPacket

// uint32 pos = 1;
inline void GCQuickslotSwapPacket::clear_pos() {
  _impl_.pos_ = 0u;
}
inline uint32_t GCQuickslotSwapPacket::_internal_pos() const {
  return _impl_.pos_;
}
inline uint32_t GCQuickslotSwapPacket::pos() const {
  // @@protoc_insertion_point(field_get:network.GCQuickslotSwapPacket.pos)
  return _internal_pos();
}
inline void GCQuickslotSwapPacket::_internal_set_pos(uint32_t value) {
  
  _impl_.pos_ = value;
}
inline void GCQuickslotSwapPacket::set_pos(uint32_t value) {
  _internal_set_pos(value);
  // @@protoc_insertion_point(field_set:network.GCQuickslotSwapPacket.pos)
}

// uint32 change_pos = 2;
inline void GCQuickslotSwapPacket::clear_change_pos() {
  _impl_.change_pos_ = 0u;
}
inline uint32_t GCQuickslotSwapPacket::_internal_change_pos() const {
  return _impl_.change_pos_;
}
inline uint32_t GCQuickslotSwapPacket::change_pos() const {
  // @@protoc_insertion_point(field_get:network.GCQuickslotSwapPacket.change_pos)
  return _internal_change_pos();
}
inline void GCQuickslotSwapPacket::_internal_set_change_pos(uint32_t value) {
  
  _impl_.change_pos_ = value;
}
inline void GCQuickslotSwapPacket::set_change_pos(uint32_t value) {
  _internal_set_change_pos(value);
  // @@protoc_insertion_point(field_set:network.GCQuickslotSwapPacket.change_pos)
}

// -------------------------------------------------------------------

// GCMotionPacket

// uint32 vid = 1;
inline void GCMotionPacket::clear_vid() {
  _impl_.vid_ = 0u;
}
inline uint32_t GCMotionPacket::_internal_vid() const {
  return _impl_.vid_;
}
inline uint32_t GCMotionPacket::vid() const {
  // @@protoc_insertion_point(field_get:network.GCMotionPacket.vid)
  return _internal_vid();
}
inline void GCMotionPacket::_internal_set_vid(uint32_t value) {
  
  _impl_.vid_ = value;
}
inline void GCMotionPacket::set_vid(uint32_t value) {
  _internal_set_vid(value);
  // @@protoc_insertion_point(field_set:network.GCMotionPacket.vid)
}

// uint32 victim_vid = 2;
inline void GCMotionPacket::clear_victim_vid() {
  _impl_.victim_vid_ = 0u;
}
inline uint32_t GCMotionPacket::_internal_victim_vid() const {
  return _impl_.victim_vid_;
}
inline uint32_t GCMotionPacket::victim_vid() const {
  // @@protoc_insertion_point(field_get:network.GCMotionPacket.victim_vid)
  return _internal_victim_vid();
}
inline void GCMotionPacket::_internal_set_victim_vid(uint32_t value) {
  
  _impl_.victim_vid_ = value;
}
inline void GCMotionPacket::set_victim_vid(uint32_t value) {
  _internal_set_victim_vid(value);
  // @@protoc_insertion_point(field_set:network.GCMotionPacket.victim_vid)
}

// uint32 motion = 3;
inline void GCMotionPacket::clear_motion() {
  _impl_.motion_ = 0u;
}
inline uint32_t GCMotionPacket::_internal_motion() const {
  return _impl_.motion_;
}
inline uint32_t GCMotionPacket::motion() const {
  // @@protoc_insertion_point(field_get:network.GCMotionPacket.motion)
  return _internal_motion();
}
inline void GCMotionPacket::_internal_set_motion(uint32_t value) {
  
  _impl_.motion_ = value;
}
inline void GCMotionPacket::set_motion(uint32_t value) {
  _internal_set_motion(value);
  // @@protoc_insertion_point(field_set:network.GCMotionPacket.motion)
}

// -------------------------------------------------------------------

// GCDamageInfoPacket

// uint32 vid = 1;
inline void GCDamageInfoPacket::clear_vid() {
  _impl_.vid_ = 0u;
}
inline uint32_t GCDamageInfoPacket::_internal_vid() const {
  return _impl_.vid_;
}
inline uint32_t GCDamageInfoPacket::vid() const {
  // @@protoc_insertion_point(field_get:network.GCDamageInfoPacket.vid)
  return _internal_vid();
}
inline void GCDamageInfoPacket::_internal_set_vid(uint32_t value) {
  
  _impl_.vid_ = value;
}
inline void GCDamageInfoPacket::set_vid(uint32_t value) {
  _internal_set_vid(value);
  // @@protoc_insertion_point(field_set:network.GCDamageInfoPacket.vid)
}

// uint32 flag = 2;
inline void GCDamageInfoPacket::clear_flag() {
  _impl_.flag_ = 0u;
}
inline uint32_t GCDamageInfoPacket::_internal_flag() const {
  return _impl_.flag_;
}
inline uint32_t GCDamageInfoPacket::flag() const {
  // @@protoc_insertion_point(field_get:network.GCDamageInfoPacket.flag)
  return _internal_flag();
}
inline void GCDamageInfoPacket::_internal_set_flag(uint32_t value) {
  
  _impl_.flag_ = value;
}
inline void GCDamageInfoPacket::set_flag(uint32_t value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:network.GCDamageInfoPacket.flag)
}

// int32 damage = 3;
inline void GCDamageInfoPacket::clear_damage() {
  _impl_.damage_ = 0;
}
inline int32_t GCDamageInfoPacket::_internal_damage() const {
  return _impl_.damage_;
}
inline int32_t GCDamageInfoPacket::damage() const {
  // @@protoc_insertion_point(field_get:network.GCDamageInfoPacket.damage)
  return _internal_damage();
}
inline void GCDamageInfoPacket::_internal_set_damage(int32_t value) {
  
  _impl_.damage_ = value;
}
inline void GCDamageInfoPacket::set_damage(int32_t value) {
  _internal_set_damage(value);
  // @@protoc_insertion_point(field_set:network.GCDamageInfoPacket.damage)
}

// uint32 target_vid = 4;
inline void GCDamageInfoPacket::clear_target_vid() {
  _impl_.target_vid_ = 0u;
}
inline uint32_t GCDamageInfoPacket::_internal_target_vid() const {
  return _impl_.target_vid_;
}
inline uint32_t GCDamageInfoPacket::target_vid() const {
  // @@protoc_insertion_point(field_get:network.GCDamageInfoPacket.target_vid)
  return _internal_target_vid();
}
inline void GCDamageInfoPacket::_internal_set_target_vid(uint32_t value) {
  
  _impl_.target_vid_ = value;
}
inline void GCDamageInfoPacket::set_target_vid(uint32_t value) {
  _internal_set_target_vid(value);
  // @@protoc_insertion_point(field_set:network.GCDamageInfoPacket.target_vid)
}

// -------------------------------------------------------------------

// GCCreateFlyPacket

// uint32 type = 1;
inline void GCCreateFlyPacket::clear_type() {
  _impl_.type_ = 0u;
}
inline uint32_t GCCreateFlyPacket::_internal_type() const {
  return _impl_.type_;
}
inline uint32_t GCCreateFlyPacket::type() const {
  // @@protoc_insertion_point(field_get:network.GCCreateFlyPacket.type)
  return _internal_type();
}
inline void GCCreateFlyPacket::_internal_set_type(uint32_t value) {
  
  _impl_.type_ = value;
}
inline void GCCreateFlyPacket::set_type(uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:network.GCCreateFlyPacket.type)
}

// uint32 start_vid = 2;
inline void GCCreateFlyPacket::clear_start_vid() {
  _impl_.start_vid_ = 0u;
}
inline uint32_t GCCreateFlyPacket::_internal_start_vid() const {
  return _impl_.start_vid_;
}
inline uint32_t GCCreateFlyPacket::start_vid() const {
  // @@protoc_insertion_point(field_get:network.GCCreateFlyPacket.start_vid)
  return _internal_start_vid();
}
inline void GCCreateFlyPacket::_internal_set_start_vid(uint32_t value) {
  
  _impl_.start_vid_ = value;
}
inline void GCCreateFlyPacket::set_start_vid(uint32_t value) {
  _internal_set_start_vid(value);
  // @@protoc_insertion_point(field_set:network.GCCreateFlyPacket.start_vid)
}

// uint32 end_vid = 3;
inline void GCCreateFlyPacket::clear_end_vid() {
  _impl_.end_vid_ = 0u;
}
inline uint32_t GCCreateFlyPacket::_internal_end_vid() const {
  return _impl_.end_vid_;
}
inline uint32_t GCCreateFlyPacket::end_vid() const {
  // @@protoc_insertion_point(field_get:network.GCCreateFlyPacket.end_vid)
  return _internal_end_vid();
}
inline void GCCreateFlyPacket::_internal_set_end_vid(uint32_t value) {
  
  _impl_.end_vid_ = value;
}
inline void GCCreateFlyPacket::set_end_vid(uint32_t value) {
  _internal_set_end_vid(value);
  // @@protoc_insertion_point(field_set:network.GCCreateFlyPacket.end_vid)
}

// -------------------------------------------------------------------

// GCDungeonDestinationPositionPacket

// uint32 x = 1;
inline void GCDungeonDestinationPositionPacket::clear_x() {
  _impl_.x_ = 0u;
}
inline uint32_t GCDungeonDestinationPositionPacket::_internal_x() const {
  return _impl_.x_;
}
inline uint32_t GCDungeonDestinationPositionPacket::x() const {
  // @@protoc_insertion_point(field_get:network.GCDungeonDestinationPositionPacket.x)
  return _internal_x();
}
inline void GCDungeonDestinationPositionPacket::_internal_set_x(uint32_t value) {
  
  _impl_.x_ = value;
}
inline void GCDungeonDestinationPositionPacket::set_x(uint32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:network.GCDungeonDestinationPositionPacket.x)
}

// uint32 y = 2;
inline void GCDungeonDestinationPositionPacket::clear_y() {
  _impl_.y_ = 0u;
}
inline uint32_t GCDungeonDestinationPositionPacket::_internal_y() const {
  return _impl_.y_;
}
inline uint32_t GCDungeonDestinationPositionPacket::y() const {
  // @@protoc_insertion_point(field_get:network.GCDungeonDestinationPositionPacket.y)
  return _internal_y();
}
inline void GCDungeonDestinationPositionPacket::_internal_set_y(uint32_t value) {
  
  _impl_.y_ = value;
}
inline void GCDungeonDestinationPositionPacket::set_y(uint32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:network.GCDungeonDestinationPositionPacket.y)
}

// -------------------------------------------------------------------

// GCSkillLevelPacket

// repeated .TPlayerSkill levels = 1;
inline int GCSkillLevelPacket::_internal_levels_size() const {
  return _impl_.levels_.size();
}
inline int GCSkillLevelPacket::levels_size() const {
  return _internal_levels_size();
}
inline ::TPlayerSkill* GCSkillLevelPacket::mutable_levels(int index) {
  // @@protoc_insertion_point(field_mutable:network.GCSkillLevelPacket.levels)
  return _impl_.levels_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TPlayerSkill >*
GCSkillLevelPacket::mutable_levels() {
  // @@protoc_insertion_point(field_mutable_list:network.GCSkillLevelPacket.levels)
  return &_impl_.levels_;
}
inline const ::TPlayerSkill& GCSkillLevelPacket::_internal_levels(int index) const {
  return _impl_.levels_.Get(index);
}
inline const ::TPlayerSkill& GCSkillLevelPacket::levels(int index) const {
  // @@protoc_insertion_point(field_get:network.GCSkillLevelPacket.levels)
  return _internal_levels(index);
}
inline ::TPlayerSkill* GCSkillLevelPacket::_internal_add_levels() {
  return _impl_.levels_.Add();
}
inline ::TPlayerSkill* GCSkillLevelPacket::add_levels() {
  ::TPlayerSkill* _add = _internal_add_levels();
  // @@protoc_insertion_point(field_add:network.GCSkillLevelPacket.levels)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TPlayerSkill >&
GCSkillLevelPacket::levels() const {
  // @@protoc_insertion_point(field_list:network.GCSkillLevelPacket.levels)
  return _impl_.levels_;
}

// -------------------------------------------------------------------

// GCMessengerListPacket_Entry

// uint32 connected = 1;
inline void GCMessengerListPacket_Entry::clear_connected() {
  _impl_.connected_ = 0u;
}
inline uint32_t GCMessengerListPacket_Entry::_internal_connected() const {
  return _impl_.connected_;
}
inline uint32_t GCMessengerListPacket_Entry::connected() const {
  // @@protoc_insertion_point(field_get:network.GCMessengerListPacket.Entry.connected)
  return _internal_connected();
}
inline void GCMessengerListPacket_Entry::_internal_set_connected(uint32_t value) {
  
  _impl_.connected_ = value;
}
inline void GCMessengerListPacket_Entry::set_connected(uint32_t value) {
  _internal_set_connected(value);
  // @@protoc_insertion_point(field_set:network.GCMessengerListPacket.Entry.connected)
}

// bytes name = 2;
inline void GCMessengerListPacket_Entry::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GCMessengerListPacket_Entry::name() const {
  // @@protoc_insertion_point(field_get:network.GCMessengerListPacket.Entry.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GCMessengerListPacket_Entry::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GCMessengerListPacket.Entry.name)
}
inline std::string* GCMessengerListPacket_Entry::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:network.GCMessengerListPacket.Entry.name)
  return _s;
}
inline const std::string& GCMessengerListPacket_Entry::_internal_name() const {
  return _impl_.name_.Get();
}
inline void GCMessengerListPacket_Entry::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* GCMessengerListPacket_Entry::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* GCMessengerListPacket_Entry::release_name() {
  // @@protoc_insertion_point(field_release:network.GCMessengerListPacket.Entry.name)
  return _impl_.name_.Release();
}
inline void GCMessengerListPacket_Entry::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GCMessengerListPacket.Entry.name)
}

// -------------------------------------------------------------------

// GCMessengerListPacket

// repeated .network.GCMessengerListPacket.Entry players = 1;
inline int GCMessengerListPacket::_internal_players_size() const {
  return _impl_.players_.size();
}
inline int GCMessengerListPacket::players_size() const {
  return _internal_players_size();
}
inline void GCMessengerListPacket::clear_players() {
  _impl_.players_.Clear();
}
inline ::network::GCMessengerListPacket_Entry* GCMessengerListPacket::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:network.GCMessengerListPacket.players)
  return _impl_.players_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::GCMessengerListPacket_Entry >*
GCMessengerListPacket::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:network.GCMessengerListPacket.players)
  return &_impl_.players_;
}
inline const ::network::GCMessengerListPacket_Entry& GCMessengerListPacket::_internal_players(int index) const {
  return _impl_.players_.Get(index);
}
inline const ::network::GCMessengerListPacket_Entry& GCMessengerListPacket::players(int index) const {
  // @@protoc_insertion_point(field_get:network.GCMessengerListPacket.players)
  return _internal_players(index);
}
inline ::network::GCMessengerListPacket_Entry* GCMessengerListPacket::_internal_add_players() {
  return _impl_.players_.Add();
}
inline ::network::GCMessengerListPacket_Entry* GCMessengerListPacket::add_players() {
  ::network::GCMessengerListPacket_Entry* _add = _internal_add_players();
  // @@protoc_insertion_point(field_add:network.GCMessengerListPacket.players)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::GCMessengerListPacket_Entry >&
GCMessengerListPacket::players() const {
  // @@protoc_insertion_point(field_list:network.GCMessengerListPacket.players)
  return _impl_.players_;
}

// -------------------------------------------------------------------

// GCMessengerBlockListPacket_Entry

// uint32 connected = 1;
inline void GCMessengerBlockListPacket_Entry::clear_connected() {
  _impl_.connected_ = 0u;
}
inline uint32_t GCMessengerBlockListPacket_Entry::_internal_connected() const {
  return _impl_.connected_;
}
inline uint32_t GCMessengerBlockListPacket_Entry::connected() const {
  // @@protoc_insertion_point(field_get:network.GCMessengerBlockListPacket.Entry.connected)
  return _internal_connected();
}
inline void GCMessengerBlockListPacket_Entry::_internal_set_connected(uint32_t value) {
  
  _impl_.connected_ = value;
}
inline void GCMessengerBlockListPacket_Entry::set_connected(uint32_t value) {
  _internal_set_connected(value);
  // @@protoc_insertion_point(field_set:network.GCMessengerBlockListPacket.Entry.connected)
}

// bytes name = 2;
inline void GCMessengerBlockListPacket_Entry::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GCMessengerBlockListPacket_Entry::name() const {
  // @@protoc_insertion_point(field_get:network.GCMessengerBlockListPacket.Entry.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GCMessengerBlockListPacket_Entry::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GCMessengerBlockListPacket.Entry.name)
}
inline std::string* GCMessengerBlockListPacket_Entry::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:network.GCMessengerBlockListPacket.Entry.name)
  return _s;
}
inline const std::string& GCMessengerBlockListPacket_Entry::_internal_name() const {
  return _impl_.name_.Get();
}
inline void GCMessengerBlockListPacket_Entry::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* GCMessengerBlockListPacket_Entry::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* GCMessengerBlockListPacket_Entry::release_name() {
  // @@protoc_insertion_point(field_release:network.GCMessengerBlockListPacket.Entry.name)
  return _impl_.name_.Release();
}
inline void GCMessengerBlockListPacket_Entry::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GCMessengerBlockListPacket.Entry.name)
}

// -------------------------------------------------------------------

// GCMessengerBlockListPacket

// repeated .network.GCMessengerBlockListPacket.Entry players = 1;
inline int GCMessengerBlockListPacket::_internal_players_size() const {
  return _impl_.players_.size();
}
inline int GCMessengerBlockListPacket::players_size() const {
  return _internal_players_size();
}
inline void GCMessengerBlockListPacket::clear_players() {
  _impl_.players_.Clear();
}
inline ::network::GCMessengerBlockListPacket_Entry* GCMessengerBlockListPacket::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:network.GCMessengerBlockListPacket.players)
  return _impl_.players_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::GCMessengerBlockListPacket_Entry >*
GCMessengerBlockListPacket::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:network.GCMessengerBlockListPacket.players)
  return &_impl_.players_;
}
inline const ::network::GCMessengerBlockListPacket_Entry& GCMessengerBlockListPacket::_internal_players(int index) const {
  return _impl_.players_.Get(index);
}
inline const ::network::GCMessengerBlockListPacket_Entry& GCMessengerBlockListPacket::players(int index) const {
  // @@protoc_insertion_point(field_get:network.GCMessengerBlockListPacket.players)
  return _internal_players(index);
}
inline ::network::GCMessengerBlockListPacket_Entry* GCMessengerBlockListPacket::_internal_add_players() {
  return _impl_.players_.Add();
}
inline ::network::GCMessengerBlockListPacket_Entry* GCMessengerBlockListPacket::add_players() {
  ::network::GCMessengerBlockListPacket_Entry* _add = _internal_add_players();
  // @@protoc_insertion_point(field_add:network.GCMessengerBlockListPacket.players)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::GCMessengerBlockListPacket_Entry >&
GCMessengerBlockListPacket::players() const {
  // @@protoc_insertion_point(field_list:network.GCMessengerBlockListPacket.players)
  return _impl_.players_;
}

// -------------------------------------------------------------------

// GCMessengerLoginPacket

// bytes name = 1;
inline void GCMessengerLoginPacket::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GCMessengerLoginPacket::name() const {
  // @@protoc_insertion_point(field_get:network.GCMessengerLoginPacket.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GCMessengerLoginPacket::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GCMessengerLoginPacket.name)
}
inline std::string* GCMessengerLoginPacket::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:network.GCMessengerLoginPacket.name)
  return _s;
}
inline const std::string& GCMessengerLoginPacket::_internal_name() const {
  return _impl_.name_.Get();
}
inline void GCMessengerLoginPacket::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* GCMessengerLoginPacket::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* GCMessengerLoginPacket::release_name() {
  // @@protoc_insertion_point(field_release:network.GCMessengerLoginPacket.name)
  return _impl_.name_.Release();
}
inline void GCMessengerLoginPacket::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GCMessengerLoginPacket.name)
}

// -------------------------------------------------------------------

// GCMessengerLogoutPacket

// bytes name = 1;
inline void GCMessengerLogoutPacket::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GCMessengerLogoutPacket::name() const {
  // @@protoc_insertion_point(field_get:network.GCMessengerLogoutPacket.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GCMessengerLogoutPacket::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GCMessengerLogoutPacket.name)
}
inline std::string* GCMessengerLogoutPacket::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:network.GCMessengerLogoutPacket.name)
  return _s;
}
inline const std::string& GCMessengerLogoutPacket::_internal_name() const {
  return _impl_.name_.Get();
}
inline void GCMessengerLogoutPacket::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* GCMessengerLogoutPacket::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* GCMessengerLogoutPacket::release_name() {
  // @@protoc_insertion_point(field_release:network.GCMessengerLogoutPacket.name)
  return _impl_.name_.Release();
}
inline void GCMessengerLogoutPacket::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GCMessengerLogoutPacket.name)
}

// -------------------------------------------------------------------

// GCMessengerBlockLoginPacket

// bytes name = 1;
inline void GCMessengerBlockLoginPacket::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GCMessengerBlockLoginPacket::name() const {
  // @@protoc_insertion_point(field_get:network.GCMessengerBlockLoginPacket.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GCMessengerBlockLoginPacket::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GCMessengerBlockLoginPacket.name)
}
inline std::string* GCMessengerBlockLoginPacket::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:network.GCMessengerBlockLoginPacket.name)
  return _s;
}
inline const std::string& GCMessengerBlockLoginPacket::_internal_name() const {
  return _impl_.name_.Get();
}
inline void GCMessengerBlockLoginPacket::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* GCMessengerBlockLoginPacket::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* GCMessengerBlockLoginPacket::release_name() {
  // @@protoc_insertion_point(field_release:network.GCMessengerBlockLoginPacket.name)
  return _impl_.name_.Release();
}
inline void GCMessengerBlockLoginPacket::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GCMessengerBlockLoginPacket.name)
}

// -------------------------------------------------------------------

// GCMessengerBlockLogoutPacket

// bytes name = 1;
inline void GCMessengerBlockLogoutPacket::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GCMessengerBlockLogoutPacket::name() const {
  // @@protoc_insertion_point(field_get:network.GCMessengerBlockLogoutPacket.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GCMessengerBlockLogoutPacket::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GCMessengerBlockLogoutPacket.name)
}
inline std::string* GCMessengerBlockLogoutPacket::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:network.GCMessengerBlockLogoutPacket.name)
  return _s;
}
inline const std::string& GCMessengerBlockLogoutPacket::_internal_name() const {
  return _impl_.name_.Get();
}
inline void GCMessengerBlockLogoutPacket::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* GCMessengerBlockLogoutPacket::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* GCMessengerBlockLogoutPacket::release_name() {
  // @@protoc_insertion_point(field_release:network.GCMessengerBlockLogoutPacket.name)
  return _impl_.name_.Release();
}
inline void GCMessengerBlockLogoutPacket::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GCMessengerBlockLogoutPacket.name)
}

// -------------------------------------------------------------------

// GCMessengerMobilePacket

// bytes name = 1;
inline void GCMessengerMobilePacket::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GCMessengerMobilePacket::name() const {
  // @@protoc_insertion_point(field_get:network.GCMessengerMobilePacket.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GCMessengerMobilePacket::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GCMessengerMobilePacket.name)
}
inline std::string* GCMessengerMobilePacket::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:network.GCMessengerMobilePacket.name)
  return _s;
}
inline const std::string& GCMessengerMobilePacket::_internal_name() const {
  return _impl_.name_.Get();
}
inline void GCMessengerMobilePacket::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* GCMessengerMobilePacket::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* GCMessengerMobilePacket::release_name() {
  // @@protoc_insertion_point(field_release:network.GCMessengerMobilePacket.name)
  return _impl_.name_.Release();
}
inline void GCMessengerMobilePacket::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GCMessengerMobilePacket.name)
}

// uint32 state = 2;
inline void GCMessengerMobilePacket::clear_state() {
  _impl_.state_ = 0u;
}
inline uint32_t GCMessengerMobilePacket::_internal_state() const {
  return _impl_.state_;
}
inline uint32_t GCMessengerMobilePacket::state() const {
  // @@protoc_insertion_point(field_get:network.GCMessengerMobilePacket.state)
  return _internal_state();
}
inline void GCMessengerMobilePacket::_internal_set_state(uint32_t value) {
  
  _impl_.state_ = value;
}
inline void GCMessengerMobilePacket::set_state(uint32_t value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:network.GCMessengerMobilePacket.state)
}

// -------------------------------------------------------------------

// GCWalkModePacket

// uint32 vid = 1;
inline void GCWalkModePacket::clear_vid() {
  _impl_.vid_ = 0u;
}
inline uint32_t GCWalkModePacket::_internal_vid() const {
  return _impl_.vid_;
}
inline uint32_t GCWalkModePacket::vid() const {
  // @@protoc_insertion_point(field_get:network.GCWalkModePacket.vid)
  return _internal_vid();
}
inline void GCWalkModePacket::_internal_set_vid(uint32_t value) {
  
  _impl_.vid_ = value;
}
inline void GCWalkModePacket::set_vid(uint32_t value) {
  _internal_set_vid(value);
  // @@protoc_insertion_point(field_set:network.GCWalkModePacket.vid)
}

// uint32 mode = 2;
inline void GCWalkModePacket::clear_mode() {
  _impl_.mode_ = 0u;
}
inline uint32_t GCWalkModePacket::_internal_mode() const {
  return _impl_.mode_;
}
inline uint32_t GCWalkModePacket::mode() const {
  // @@protoc_insertion_point(field_get:network.GCWalkModePacket.mode)
  return _internal_mode();
}
inline void GCWalkModePacket::_internal_set_mode(uint32_t value) {
  
  _impl_.mode_ = value;
}
inline void GCWalkModePacket::set_mode(uint32_t value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:network.GCWalkModePacket.mode)
}

// -------------------------------------------------------------------

// GCChangeSkillGroupPacket

// uint32 skill_group = 1;
inline void GCChangeSkillGroupPacket::clear_skill_group() {
  _impl_.skill_group_ = 0u;
}
inline uint32_t GCChangeSkillGroupPacket::_internal_skill_group() const {
  return _impl_.skill_group_;
}
inline uint32_t GCChangeSkillGroupPacket::skill_group() const {
  // @@protoc_insertion_point(field_get:network.GCChangeSkillGroupPacket.skill_group)
  return _internal_skill_group();
}
inline void GCChangeSkillGroupPacket::_internal_set_skill_group(uint32_t value) {
  
  _impl_.skill_group_ = value;
}
inline void GCChangeSkillGroupPacket::set_skill_group(uint32_t value) {
  _internal_set_skill_group(value);
  // @@protoc_insertion_point(field_set:network.GCChangeSkillGroupPacket.skill_group)
}

// -------------------------------------------------------------------

// GCRefineInformationPacket

// .network.TItemPos pos = 1;
inline bool GCRefineInformationPacket::_internal_has_pos() const {
  return this != internal_default_instance() && _impl_.pos_ != nullptr;
}
inline bool GCRefineInformationPacket::has_pos() const {
  return _internal_has_pos();
}
inline const ::network::TItemPos& GCRefineInformationPacket::_internal_pos() const {
  const ::network::TItemPos* p = _impl_.pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::network::TItemPos&>(
      ::network::_TItemPos_default_instance_);
}
inline const ::network::TItemPos& GCRefineInformationPacket::pos() const {
  // @@protoc_insertion_point(field_get:network.GCRefineInformationPacket.pos)
  return _internal_pos();
}
inline void GCRefineInformationPacket::unsafe_arena_set_allocated_pos(
    ::network::TItemPos* pos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pos_);
  }
  _impl_.pos_ = pos;
  if (pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:network.GCRefineInformationPacket.pos)
}
inline ::network::TItemPos* GCRefineInformationPacket::release_pos() {
  
  ::network::TItemPos* temp = _impl_.pos_;
  _impl_.pos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::network::TItemPos* GCRefineInformationPacket::unsafe_arena_release_pos() {
  // @@protoc_insertion_point(field_release:network.GCRefineInformationPacket.pos)
  
  ::network::TItemPos* temp = _impl_.pos_;
  _impl_.pos_ = nullptr;
  return temp;
}
inline ::network::TItemPos* GCRefineInformationPacket::_internal_mutable_pos() {
  
  if (_impl_.pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::network::TItemPos>(GetArenaForAllocation());
    _impl_.pos_ = p;
  }
  return _impl_.pos_;
}
inline ::network::TItemPos* GCRefineInformationPacket::mutable_pos() {
  ::network::TItemPos* _msg = _internal_mutable_pos();
  // @@protoc_insertion_point(field_mutable:network.GCRefineInformationPacket.pos)
  return _msg;
}
inline void GCRefineInformationPacket::set_allocated_pos(::network::TItemPos* pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pos_);
  }
  if (pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pos));
    if (message_arena != submessage_arena) {
      pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:network.GCRefineInformationPacket.pos)
}

// uint32 type = 2;
inline void GCRefineInformationPacket::clear_type() {
  _impl_.type_ = 0u;
}
inline uint32_t GCRefineInformationPacket::_internal_type() const {
  return _impl_.type_;
}
inline uint32_t GCRefineInformationPacket::type() const {
  // @@protoc_insertion_point(field_get:network.GCRefineInformationPacket.type)
  return _internal_type();
}
inline void GCRefineInformationPacket::_internal_set_type(uint32_t value) {
  
  _impl_.type_ = value;
}
inline void GCRefineInformationPacket::set_type(uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:network.GCRefineInformationPacket.type)
}

// uint32 src_vnum = 3;
inline void GCRefineInformationPacket::clear_src_vnum() {
  _impl_.src_vnum_ = 0u;
}
inline uint32_t GCRefineInformationPacket::_internal_src_vnum() const {
  return _impl_.src_vnum_;
}
inline uint32_t GCRefineInformationPacket::src_vnum() const {
  // @@protoc_insertion_point(field_get:network.GCRefineInformationPacket.src_vnum)
  return _internal_src_vnum();
}
inline void GCRefineInformationPacket::_internal_set_src_vnum(uint32_t value) {
  
  _impl_.src_vnum_ = value;
}
inline void GCRefineInformationPacket::set_src_vnum(uint32_t value) {
  _internal_set_src_vnum(value);
  // @@protoc_insertion_point(field_set:network.GCRefineInformationPacket.src_vnum)
}

// uint32 result_vnum = 4;
inline void GCRefineInformationPacket::clear_result_vnum() {
  _impl_.result_vnum_ = 0u;
}
inline uint32_t GCRefineInformationPacket::_internal_result_vnum() const {
  return _impl_.result_vnum_;
}
inline uint32_t GCRefineInformationPacket::result_vnum() const {
  // @@protoc_insertion_point(field_get:network.GCRefineInformationPacket.result_vnum)
  return _internal_result_vnum();
}
inline void GCRefineInformationPacket::_internal_set_result_vnum(uint32_t value) {
  
  _impl_.result_vnum_ = value;
}
inline void GCRefineInformationPacket::set_result_vnum(uint32_t value) {
  _internal_set_result_vnum(value);
  // @@protoc_insertion_point(field_set:network.GCRefineInformationPacket.result_vnum)
}

// .network.TRefineTable refine_table = 5;
inline bool GCRefineInformationPacket::_internal_has_refine_table() const {
  return this != internal_default_instance() && _impl_.refine_table_ != nullptr;
}
inline bool GCRefineInformationPacket::has_refine_table() const {
  return _internal_has_refine_table();
}
inline const ::network::TRefineTable& GCRefineInformationPacket::_internal_refine_table() const {
  const ::network::TRefineTable* p = _impl_.refine_table_;
  return p != nullptr ? *p : reinterpret_cast<const ::network::TRefineTable&>(
      ::network::_TRefineTable_default_instance_);
}
inline const ::network::TRefineTable& GCRefineInformationPacket::refine_table() const {
  // @@protoc_insertion_point(field_get:network.GCRefineInformationPacket.refine_table)
  return _internal_refine_table();
}
inline void GCRefineInformationPacket::unsafe_arena_set_allocated_refine_table(
    ::network::TRefineTable* refine_table) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.refine_table_);
  }
  _impl_.refine_table_ = refine_table;
  if (refine_table) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:network.GCRefineInformationPacket.refine_table)
}
inline ::network::TRefineTable* GCRefineInformationPacket::release_refine_table() {
  
  ::network::TRefineTable* temp = _impl_.refine_table_;
  _impl_.refine_table_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::network::TRefineTable* GCRefineInformationPacket::unsafe_arena_release_refine_table() {
  // @@protoc_insertion_point(field_release:network.GCRefineInformationPacket.refine_table)
  
  ::network::TRefineTable* temp = _impl_.refine_table_;
  _impl_.refine_table_ = nullptr;
  return temp;
}
inline ::network::TRefineTable* GCRefineInformationPacket::_internal_mutable_refine_table() {
  
  if (_impl_.refine_table_ == nullptr) {
    auto* p = CreateMaybeMessage<::network::TRefineTable>(GetArenaForAllocation());
    _impl_.refine_table_ = p;
  }
  return _impl_.refine_table_;
}
inline ::network::TRefineTable* GCRefineInformationPacket::mutable_refine_table() {
  ::network::TRefineTable* _msg = _internal_mutable_refine_table();
  // @@protoc_insertion_point(field_mutable:network.GCRefineInformationPacket.refine_table)
  return _msg;
}
inline void GCRefineInformationPacket::set_allocated_refine_table(::network::TRefineTable* refine_table) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.refine_table_);
  }
  if (refine_table) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(refine_table));
    if (message_arena != submessage_arena) {
      refine_table = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, refine_table, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.refine_table_ = refine_table;
  // @@protoc_insertion_point(field_set_allocated:network.GCRefineInformationPacket.refine_table)
}

// bool can_fast_refine = 6;
inline void GCRefineInformationPacket::clear_can_fast_refine() {
  _impl_.can_fast_refine_ = false;
}
inline bool GCRefineInformationPacket::_internal_can_fast_refine() const {
  return _impl_.can_fast_refine_;
}
inline bool GCRefineInformationPacket::can_fast_refine() const {
  // @@protoc_insertion_point(field_get:network.GCRefineInformationPacket.can_fast_refine)
  return _internal_can_fast_refine();
}
inline void GCRefineInformationPacket::_internal_set_can_fast_refine(bool value) {
  
  _impl_.can_fast_refine_ = value;
}
inline void GCRefineInformationPacket::set_can_fast_refine(bool value) {
  _internal_set_can_fast_refine(value);
  // @@protoc_insertion_point(field_set:network.GCRefineInformationPacket.can_fast_refine)
}

// uint64 cost = 7;
inline void GCRefineInformationPacket::clear_cost() {
  _impl_.cost_ = uint64_t{0u};
}
inline uint64_t GCRefineInformationPacket::_internal_cost() const {
  return _impl_.cost_;
}
inline uint64_t GCRefineInformationPacket::cost() const {
  // @@protoc_insertion_point(field_get:network.GCRefineInformationPacket.cost)
  return _internal_cost();
}
inline void GCRefineInformationPacket::_internal_set_cost(uint64_t value) {
  
  _impl_.cost_ = value;
}
inline void GCRefineInformationPacket::set_cost(uint64_t value) {
  _internal_set_cost(value);
  // @@protoc_insertion_point(field_set:network.GCRefineInformationPacket.cost)
}

// uint32 prob = 8;
inline void GCRefineInformationPacket::clear_prob() {
  _impl_.prob_ = 0u;
}
inline uint32_t GCRefineInformationPacket::_internal_prob() const {
  return _impl_.prob_;
}
inline uint32_t GCRefineInformationPacket::prob() const {
  // @@protoc_insertion_point(field_get:network.GCRefineInformationPacket.prob)
  return _internal_prob();
}
inline void GCRefineInformationPacket::_internal_set_prob(uint32_t value) {
  
  _impl_.prob_ = value;
}
inline void GCRefineInformationPacket::set_prob(uint32_t value) {
  _internal_set_prob(value);
  // @@protoc_insertion_point(field_set:network.GCRefineInformationPacket.prob)
}

// -------------------------------------------------------------------

// GCSpecialEffectPacket

// uint32 type = 1;
inline void GCSpecialEffectPacket::clear_type() {
  _impl_.type_ = 0u;
}
inline uint32_t GCSpecialEffectPacket::_internal_type() const {
  return _impl_.type_;
}
inline uint32_t GCSpecialEffectPacket::type() const {
  // @@protoc_insertion_point(field_get:network.GCSpecialEffectPacket.type)
  return _internal_type();
}
inline void GCSpecialEffectPacket::_internal_set_type(uint32_t value) {
  
  _impl_.type_ = value;
}
inline void GCSpecialEffectPacket::set_type(uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:network.GCSpecialEffectPacket.type)
}

// uint32 vid = 2;
inline void GCSpecialEffectPacket::clear_vid() {
  _impl_.vid_ = 0u;
}
inline uint32_t GCSpecialEffectPacket::_internal_vid() const {
  return _impl_.vid_;
}
inline uint32_t GCSpecialEffectPacket::vid() const {
  // @@protoc_insertion_point(field_get:network.GCSpecialEffectPacket.vid)
  return _internal_vid();
}
inline void GCSpecialEffectPacket::_internal_set_vid(uint32_t value) {
  
  _impl_.vid_ = value;
}
inline void GCSpecialEffectPacket::set_vid(uint32_t value) {
  _internal_set_vid(value);
  // @@protoc_insertion_point(field_set:network.GCSpecialEffectPacket.vid)
}

// -------------------------------------------------------------------

// GCNPCListPacket_Position

// uint32 type = 1;
inline void GCNPCListPacket_Position::clear_type() {
  _impl_.type_ = 0u;
}
inline uint32_t GCNPCListPacket_Position::_internal_type() const {
  return _impl_.type_;
}
inline uint32_t GCNPCListPacket_Position::type() const {
  // @@protoc_insertion_point(field_get:network.GCNPCListPacket.Position.type)
  return _internal_type();
}
inline void GCNPCListPacket_Position::_internal_set_type(uint32_t value) {
  
  _impl_.type_ = value;
}
inline void GCNPCListPacket_Position::set_type(uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:network.GCNPCListPacket.Position.type)
}

// bytes name = 2;
inline void GCNPCListPacket_Position::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GCNPCListPacket_Position::name() const {
  // @@protoc_insertion_point(field_get:network.GCNPCListPacket.Position.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GCNPCListPacket_Position::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GCNPCListPacket.Position.name)
}
inline std::string* GCNPCListPacket_Position::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:network.GCNPCListPacket.Position.name)
  return _s;
}
inline const std::string& GCNPCListPacket_Position::_internal_name() const {
  return _impl_.name_.Get();
}
inline void GCNPCListPacket_Position::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* GCNPCListPacket_Position::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* GCNPCListPacket_Position::release_name() {
  // @@protoc_insertion_point(field_release:network.GCNPCListPacket.Position.name)
  return _impl_.name_.Release();
}
inline void GCNPCListPacket_Position::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GCNPCListPacket.Position.name)
}

// int32 x = 3;
inline void GCNPCListPacket_Position::clear_x() {
  _impl_.x_ = 0;
}
inline int32_t GCNPCListPacket_Position::_internal_x() const {
  return _impl_.x_;
}
inline int32_t GCNPCListPacket_Position::x() const {
  // @@protoc_insertion_point(field_get:network.GCNPCListPacket.Position.x)
  return _internal_x();
}
inline void GCNPCListPacket_Position::_internal_set_x(int32_t value) {
  
  _impl_.x_ = value;
}
inline void GCNPCListPacket_Position::set_x(int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:network.GCNPCListPacket.Position.x)
}

// int32 y = 4;
inline void GCNPCListPacket_Position::clear_y() {
  _impl_.y_ = 0;
}
inline int32_t GCNPCListPacket_Position::_internal_y() const {
  return _impl_.y_;
}
inline int32_t GCNPCListPacket_Position::y() const {
  // @@protoc_insertion_point(field_get:network.GCNPCListPacket.Position.y)
  return _internal_y();
}
inline void GCNPCListPacket_Position::_internal_set_y(int32_t value) {
  
  _impl_.y_ = value;
}
inline void GCNPCListPacket_Position::set_y(int32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:network.GCNPCListPacket.Position.y)
}

// uint32 race = 5;
inline void GCNPCListPacket_Position::clear_race() {
  _impl_.race_ = 0u;
}
inline uint32_t GCNPCListPacket_Position::_internal_race() const {
  return _impl_.race_;
}
inline uint32_t GCNPCListPacket_Position::race() const {
  // @@protoc_insertion_point(field_get:network.GCNPCListPacket.Position.race)
  return _internal_race();
}
inline void GCNPCListPacket_Position::_internal_set_race(uint32_t value) {
  
  _impl_.race_ = value;
}
inline void GCNPCListPacket_Position::set_race(uint32_t value) {
  _internal_set_race(value);
  // @@protoc_insertion_point(field_set:network.GCNPCListPacket.Position.race)
}

// -------------------------------------------------------------------

// GCNPCListPacket

// repeated .network.GCNPCListPacket.Position positions = 1;
inline int GCNPCListPacket::_internal_positions_size() const {
  return _impl_.positions_.size();
}
inline int GCNPCListPacket::positions_size() const {
  return _internal_positions_size();
}
inline void GCNPCListPacket::clear_positions() {
  _impl_.positions_.Clear();
}
inline ::network::GCNPCListPacket_Position* GCNPCListPacket::mutable_positions(int index) {
  // @@protoc_insertion_point(field_mutable:network.GCNPCListPacket.positions)
  return _impl_.positions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::GCNPCListPacket_Position >*
GCNPCListPacket::mutable_positions() {
  // @@protoc_insertion_point(field_mutable_list:network.GCNPCListPacket.positions)
  return &_impl_.positions_;
}
inline const ::network::GCNPCListPacket_Position& GCNPCListPacket::_internal_positions(int index) const {
  return _impl_.positions_.Get(index);
}
inline const ::network::GCNPCListPacket_Position& GCNPCListPacket::positions(int index) const {
  // @@protoc_insertion_point(field_get:network.GCNPCListPacket.positions)
  return _internal_positions(index);
}
inline ::network::GCNPCListPacket_Position* GCNPCListPacket::_internal_add_positions() {
  return _impl_.positions_.Add();
}
inline ::network::GCNPCListPacket_Position* GCNPCListPacket::add_positions() {
  ::network::GCNPCListPacket_Position* _add = _internal_add_positions();
  // @@protoc_insertion_point(field_add:network.GCNPCListPacket.positions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::GCNPCListPacket_Position >&
GCNPCListPacket::positions() const {
  // @@protoc_insertion_point(field_list:network.GCNPCListPacket.positions)
  return _impl_.positions_;
}

// -------------------------------------------------------------------

// GCViewEquipPacket

// uint32 vid = 1;
inline void GCViewEquipPacket::clear_vid() {
  _impl_.vid_ = 0u;
}
inline uint32_t GCViewEquipPacket::_internal_vid() const {
  return _impl_.vid_;
}
inline uint32_t GCViewEquipPacket::vid() const {
  // @@protoc_insertion_point(field_get:network.GCViewEquipPacket.vid)
  return _internal_vid();
}
inline void GCViewEquipPacket::_internal_set_vid(uint32_t value) {
  
  _impl_.vid_ = value;
}
inline void GCViewEquipPacket::set_vid(uint32_t value) {
  _internal_set_vid(value);
  // @@protoc_insertion_point(field_set:network.GCViewEquipPacket.vid)
}

// repeated .network.TItemData equips = 2;
inline int GCViewEquipPacket::_internal_equips_size() const {
  return _impl_.equips_.size();
}
inline int GCViewEquipPacket::equips_size() const {
  return _internal_equips_size();
}
inline ::network::TItemData* GCViewEquipPacket::mutable_equips(int index) {
  // @@protoc_insertion_point(field_mutable:network.GCViewEquipPacket.equips)
  return _impl_.equips_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemData >*
GCViewEquipPacket::mutable_equips() {
  // @@protoc_insertion_point(field_mutable_list:network.GCViewEquipPacket.equips)
  return &_impl_.equips_;
}
inline const ::network::TItemData& GCViewEquipPacket::_internal_equips(int index) const {
  return _impl_.equips_.Get(index);
}
inline const ::network::TItemData& GCViewEquipPacket::equips(int index) const {
  // @@protoc_insertion_point(field_get:network.GCViewEquipPacket.equips)
  return _internal_equips(index);
}
inline ::network::TItemData* GCViewEquipPacket::_internal_add_equips() {
  return _impl_.equips_.Add();
}
inline ::network::TItemData* GCViewEquipPacket::add_equips() {
  ::network::TItemData* _add = _internal_add_equips();
  // @@protoc_insertion_point(field_add:network.GCViewEquipPacket.equips)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemData >&
GCViewEquipPacket::equips() const {
  // @@protoc_insertion_point(field_list:network.GCViewEquipPacket.equips)
  return _impl_.equips_;
}

// -------------------------------------------------------------------

// GCLandListPacket

// repeated .network.TBuildingLand lands = 1;
inline int GCLandListPacket::_internal_lands_size() const {
  return _impl_.lands_.size();
}
inline int GCLandListPacket::lands_size() const {
  return _internal_lands_size();
}
inline ::network::TBuildingLand* GCLandListPacket::mutable_lands(int index) {
  // @@protoc_insertion_point(field_mutable:network.GCLandListPacket.lands)
  return _impl_.lands_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TBuildingLand >*
GCLandListPacket::mutable_lands() {
  // @@protoc_insertion_point(field_mutable_list:network.GCLandListPacket.lands)
  return &_impl_.lands_;
}
inline const ::network::TBuildingLand& GCLandListPacket::_internal_lands(int index) const {
  return _impl_.lands_.Get(index);
}
inline const ::network::TBuildingLand& GCLandListPacket::lands(int index) const {
  // @@protoc_insertion_point(field_get:network.GCLandListPacket.lands)
  return _internal_lands(index);
}
inline ::network::TBuildingLand* GCLandListPacket::_internal_add_lands() {
  return _impl_.lands_.Add();
}
inline ::network::TBuildingLand* GCLandListPacket::add_lands() {
  ::network::TBuildingLand* _add = _internal_add_lands();
  // @@protoc_insertion_point(field_add:network.GCLandListPacket.lands)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TBuildingLand >&
GCLandListPacket::lands() const {
  // @@protoc_insertion_point(field_list:network.GCLandListPacket.lands)
  return _impl_.lands_;
}

// -------------------------------------------------------------------

// GCTargetCreatePacket

// int32 id = 1;
inline void GCTargetCreatePacket::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t GCTargetCreatePacket::_internal_id() const {
  return _impl_.id_;
}
inline int32_t GCTargetCreatePacket::id() const {
  // @@protoc_insertion_point(field_get:network.GCTargetCreatePacket.id)
  return _internal_id();
}
inline void GCTargetCreatePacket::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void GCTargetCreatePacket::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:network.GCTargetCreatePacket.id)
}

// bytes name = 2;
inline void GCTargetCreatePacket::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GCTargetCreatePacket::name() const {
  // @@protoc_insertion_point(field_get:network.GCTargetCreatePacket.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GCTargetCreatePacket::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GCTargetCreatePacket.name)
}
inline std::string* GCTargetCreatePacket::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:network.GCTargetCreatePacket.name)
  return _s;
}
inline const std::string& GCTargetCreatePacket::_internal_name() const {
  return _impl_.name_.Get();
}
inline void GCTargetCreatePacket::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* GCTargetCreatePacket::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* GCTargetCreatePacket::release_name() {
  // @@protoc_insertion_point(field_release:network.GCTargetCreatePacket.name)
  return _impl_.name_.Release();
}
inline void GCTargetCreatePacket::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GCTargetCreatePacket.name)
}

// uint32 vid = 3;
inline void GCTargetCreatePacket::clear_vid() {
  _impl_.vid_ = 0u;
}
inline uint32_t GCTargetCreatePacket::_internal_vid() const {
  return _impl_.vid_;
}
inline uint32_t GCTargetCreatePacket::vid() const {
  // @@protoc_insertion_point(field_get:network.GCTargetCreatePacket.vid)
  return _internal_vid();
}
inline void GCTargetCreatePacket::_internal_set_vid(uint32_t value) {
  
  _impl_.vid_ = value;
}
inline void GCTargetCreatePacket::set_vid(uint32_t value) {
  _internal_set_vid(value);
  // @@protoc_insertion_point(field_set:network.GCTargetCreatePacket.vid)
}

// uint32 type = 4;
inline void GCTargetCreatePacket::clear_type() {
  _impl_.type_ = 0u;
}
inline uint32_t GCTargetCreatePacket::_internal_type() const {
  return _impl_.type_;
}
inline uint32_t GCTargetCreatePacket::type() const {
  // @@protoc_insertion_point(field_get:network.GCTargetCreatePacket.type)
  return _internal_type();
}
inline void GCTargetCreatePacket::_internal_set_type(uint32_t value) {
  
  _impl_.type_ = value;
}
inline void GCTargetCreatePacket::set_type(uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:network.GCTargetCreatePacket.type)
}

// -------------------------------------------------------------------

// GCTargetUpdatePacket

// int32 id = 1;
inline void GCTargetUpdatePacket::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t GCTargetUpdatePacket::_internal_id() const {
  return _impl_.id_;
}
inline int32_t GCTargetUpdatePacket::id() const {
  // @@protoc_insertion_point(field_get:network.GCTargetUpdatePacket.id)
  return _internal_id();
}
inline void GCTargetUpdatePacket::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void GCTargetUpdatePacket::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:network.GCTargetUpdatePacket.id)
}

// int32 x = 2;
inline void GCTargetUpdatePacket::clear_x() {
  _impl_.x_ = 0;
}
inline int32_t GCTargetUpdatePacket::_internal_x() const {
  return _impl_.x_;
}
inline int32_t GCTargetUpdatePacket::x() const {
  // @@protoc_insertion_point(field_get:network.GCTargetUpdatePacket.x)
  return _internal_x();
}
inline void GCTargetUpdatePacket::_internal_set_x(int32_t value) {
  
  _impl_.x_ = value;
}
inline void GCTargetUpdatePacket::set_x(int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:network.GCTargetUpdatePacket.x)
}

// int32 y = 3;
inline void GCTargetUpdatePacket::clear_y() {
  _impl_.y_ = 0;
}
inline int32_t GCTargetUpdatePacket::_internal_y() const {
  return _impl_.y_;
}
inline int32_t GCTargetUpdatePacket::y() const {
  // @@protoc_insertion_point(field_get:network.GCTargetUpdatePacket.y)
  return _internal_y();
}
inline void GCTargetUpdatePacket::_internal_set_y(int32_t value) {
  
  _impl_.y_ = value;
}
inline void GCTargetUpdatePacket::set_y(int32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:network.GCTargetUpdatePacket.y)
}

// -------------------------------------------------------------------

// GCTargetDeletePacket

// int32 id = 1;
inline void GCTargetDeletePacket::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t GCTargetDeletePacket::_internal_id() const {
  return _impl_.id_;
}
inline int32_t GCTargetDeletePacket::id() const {
  // @@protoc_insertion_point(field_get:network.GCTargetDeletePacket.id)
  return _internal_id();
}
inline void GCTargetDeletePacket::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void GCTargetDeletePacket::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:network.GCTargetDeletePacket.id)
}

// -------------------------------------------------------------------

// GCAffectAddPacket

// .TPacketAffectElement elem = 1;
inline bool GCAffectAddPacket::_internal_has_elem() const {
  return this != internal_default_instance() && _impl_.elem_ != nullptr;
}
inline bool GCAffectAddPacket::has_elem() const {
  return _internal_has_elem();
}
inline const ::TPacketAffectElement& GCAffectAddPacket::_internal_elem() const {
  const ::TPacketAffectElement* p = _impl_.elem_;
  return p != nullptr ? *p : reinterpret_cast<const ::TPacketAffectElement&>(
      ::_TPacketAffectElement_default_instance_);
}
inline const ::TPacketAffectElement& GCAffectAddPacket::elem() const {
  // @@protoc_insertion_point(field_get:network.GCAffectAddPacket.elem)
  return _internal_elem();
}
inline void GCAffectAddPacket::unsafe_arena_set_allocated_elem(
    ::TPacketAffectElement* elem) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.elem_);
  }
  _impl_.elem_ = elem;
  if (elem) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:network.GCAffectAddPacket.elem)
}
inline ::TPacketAffectElement* GCAffectAddPacket::release_elem() {
  
  ::TPacketAffectElement* temp = _impl_.elem_;
  _impl_.elem_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TPacketAffectElement* GCAffectAddPacket::unsafe_arena_release_elem() {
  // @@protoc_insertion_point(field_release:network.GCAffectAddPacket.elem)
  
  ::TPacketAffectElement* temp = _impl_.elem_;
  _impl_.elem_ = nullptr;
  return temp;
}
inline ::TPacketAffectElement* GCAffectAddPacket::_internal_mutable_elem() {
  
  if (_impl_.elem_ == nullptr) {
    auto* p = CreateMaybeMessage<::TPacketAffectElement>(GetArenaForAllocation());
    _impl_.elem_ = p;
  }
  return _impl_.elem_;
}
inline ::TPacketAffectElement* GCAffectAddPacket::mutable_elem() {
  ::TPacketAffectElement* _msg = _internal_mutable_elem();
  // @@protoc_insertion_point(field_mutable:network.GCAffectAddPacket.elem)
  return _msg;
}
inline void GCAffectAddPacket::set_allocated_elem(::TPacketAffectElement* elem) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.elem_);
  }
  if (elem) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(elem));
    if (message_arena != submessage_arena) {
      elem = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, elem, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.elem_ = elem;
  // @@protoc_insertion_point(field_set_allocated:network.GCAffectAddPacket.elem)
}

// -------------------------------------------------------------------

// GCAffectRemovePacket

// uint32 type = 1;
inline void GCAffectRemovePacket::clear_type() {
  _impl_.type_ = 0u;
}
inline uint32_t GCAffectRemovePacket::_internal_type() const {
  return _impl_.type_;
}
inline uint32_t GCAffectRemovePacket::type() const {
  // @@protoc_insertion_point(field_get:network.GCAffectRemovePacket.type)
  return _internal_type();
}
inline void GCAffectRemovePacket::_internal_set_type(uint32_t value) {
  
  _impl_.type_ = value;
}
inline void GCAffectRemovePacket::set_type(uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:network.GCAffectRemovePacket.type)
}

// uint32 apply_on = 2;
inline void GCAffectRemovePacket::clear_apply_on() {
  _impl_.apply_on_ = 0u;
}
inline uint32_t GCAffectRemovePacket::_internal_apply_on() const {
  return _impl_.apply_on_;
}
inline uint32_t GCAffectRemovePacket::apply_on() const {
  // @@protoc_insertion_point(field_get:network.GCAffectRemovePacket.apply_on)
  return _internal_apply_on();
}
inline void GCAffectRemovePacket::_internal_set_apply_on(uint32_t value) {
  
  _impl_.apply_on_ = value;
}
inline void GCAffectRemovePacket::set_apply_on(uint32_t value) {
  _internal_set_apply_on(value);
  // @@protoc_insertion_point(field_set:network.GCAffectRemovePacket.apply_on)
}

// int32 apply_value = 3;
inline void GCAffectRemovePacket::clear_apply_value() {
  _impl_.apply_value_ = 0;
}
inline int32_t GCAffectRemovePacket::_internal_apply_value() const {
  return _impl_.apply_value_;
}
inline int32_t GCAffectRemovePacket::apply_value() const {
  // @@protoc_insertion_point(field_get:network.GCAffectRemovePacket.apply_value)
  return _internal_apply_value();
}
inline void GCAffectRemovePacket::_internal_set_apply_value(int32_t value) {
  
  _impl_.apply_value_ = value;
}
inline void GCAffectRemovePacket::set_apply_value(int32_t value) {
  _internal_set_apply_value(value);
  // @@protoc_insertion_point(field_set:network.GCAffectRemovePacket.apply_value)
}

// uint32 flag = 4;
inline void GCAffectRemovePacket::clear_flag() {
  _impl_.flag_ = 0u;
}
inline uint32_t GCAffectRemovePacket::_internal_flag() const {
  return _impl_.flag_;
}
inline uint32_t GCAffectRemovePacket::flag() const {
  // @@protoc_insertion_point(field_get:network.GCAffectRemovePacket.flag)
  return _internal_flag();
}
inline void GCAffectRemovePacket::_internal_set_flag(uint32_t value) {
  
  _impl_.flag_ = value;
}
inline void GCAffectRemovePacket::set_flag(uint32_t value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:network.GCAffectRemovePacket.flag)
}

// -------------------------------------------------------------------

// GCMallOpenPacket

// uint32 size = 1;
inline void GCMallOpenPacket::clear_size() {
  _impl_.size_ = 0u;
}
inline uint32_t GCMallOpenPacket::_internal_size() const {
  return _impl_.size_;
}
inline uint32_t GCMallOpenPacket::size() const {
  // @@protoc_insertion_point(field_get:network.GCMallOpenPacket.size)
  return _internal_size();
}
inline void GCMallOpenPacket::_internal_set_size(uint32_t value) {
  
  _impl_.size_ = value;
}
inline void GCMallOpenPacket::set_size(uint32_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:network.GCMallOpenPacket.size)
}

// -------------------------------------------------------------------

// GCLoverInfoPacket

// bytes name = 1;
inline void GCLoverInfoPacket::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GCLoverInfoPacket::name() const {
  // @@protoc_insertion_point(field_get:network.GCLoverInfoPacket.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GCLoverInfoPacket::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GCLoverInfoPacket.name)
}
inline std::string* GCLoverInfoPacket::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:network.GCLoverInfoPacket.name)
  return _s;
}
inline const std::string& GCLoverInfoPacket::_internal_name() const {
  return _impl_.name_.Get();
}
inline void GCLoverInfoPacket::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* GCLoverInfoPacket::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* GCLoverInfoPacket::release_name() {
  // @@protoc_insertion_point(field_release:network.GCLoverInfoPacket.name)
  return _impl_.name_.Release();
}
inline void GCLoverInfoPacket::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GCLoverInfoPacket.name)
}

// uint32 love_point = 2;
inline void GCLoverInfoPacket::clear_love_point() {
  _impl_.love_point_ = 0u;
}
inline uint32_t GCLoverInfoPacket::_internal_love_point() const {
  return _impl_.love_point_;
}
inline uint32_t GCLoverInfoPacket::love_point() const {
  // @@protoc_insertion_point(field_get:network.GCLoverInfoPacket.love_point)
  return _internal_love_point();
}
inline void GCLoverInfoPacket::_internal_set_love_point(uint32_t value) {
  
  _impl_.love_point_ = value;
}
inline void GCLoverInfoPacket::set_love_point(uint32_t value) {
  _internal_set_love_point(value);
  // @@protoc_insertion_point(field_set:network.GCLoverInfoPacket.love_point)
}

// -------------------------------------------------------------------

// GCLoverPointUpdatePacket

// uint32 love_point = 1;
inline void GCLoverPointUpdatePacket::clear_love_point() {
  _impl_.love_point_ = 0u;
}
inline uint32_t GCLoverPointUpdatePacket::_internal_love_point() const {
  return _impl_.love_point_;
}
inline uint32_t GCLoverPointUpdatePacket::love_point() const {
  // @@protoc_insertion_point(field_get:network.GCLoverPointUpdatePacket.love_point)
  return _internal_love_point();
}
inline void GCLoverPointUpdatePacket::_internal_set_love_point(uint32_t value) {
  
  _impl_.love_point_ = value;
}
inline void GCLoverPointUpdatePacket::set_love_point(uint32_t value) {
  _internal_set_love_point(value);
  // @@protoc_insertion_point(field_set:network.GCLoverPointUpdatePacket.love_point)
}

// -------------------------------------------------------------------

// GCDigMotionPacket

// uint32 vid = 1;
inline void GCDigMotionPacket::clear_vid() {
  _impl_.vid_ = 0u;
}
inline uint32_t GCDigMotionPacket::_internal_vid() const {
  return _impl_.vid_;
}
inline uint32_t GCDigMotionPacket::vid() const {
  // @@protoc_insertion_point(field_get:network.GCDigMotionPacket.vid)
  return _internal_vid();
}
inline void GCDigMotionPacket::_internal_set_vid(uint32_t value) {
  
  _impl_.vid_ = value;
}
inline void GCDigMotionPacket::set_vid(uint32_t value) {
  _internal_set_vid(value);
  // @@protoc_insertion_point(field_set:network.GCDigMotionPacket.vid)
}

// uint32 target_vid = 2;
inline void GCDigMotionPacket::clear_target_vid() {
  _impl_.target_vid_ = 0u;
}
inline uint32_t GCDigMotionPacket::_internal_target_vid() const {
  return _impl_.target_vid_;
}
inline uint32_t GCDigMotionPacket::target_vid() const {
  // @@protoc_insertion_point(field_get:network.GCDigMotionPacket.target_vid)
  return _internal_target_vid();
}
inline void GCDigMotionPacket::_internal_set_target_vid(uint32_t value) {
  
  _impl_.target_vid_ = value;
}
inline void GCDigMotionPacket::set_target_vid(uint32_t value) {
  _internal_set_target_vid(value);
  // @@protoc_insertion_point(field_set:network.GCDigMotionPacket.target_vid)
}

// uint32 count = 3;
inline void GCDigMotionPacket::clear_count() {
  _impl_.count_ = 0u;
}
inline uint32_t GCDigMotionPacket::_internal_count() const {
  return _impl_.count_;
}
inline uint32_t GCDigMotionPacket::count() const {
  // @@protoc_insertion_point(field_get:network.GCDigMotionPacket.count)
  return _internal_count();
}
inline void GCDigMotionPacket::_internal_set_count(uint32_t value) {
  
  _impl_.count_ = value;
}
inline void GCDigMotionPacket::set_count(uint32_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:network.GCDigMotionPacket.count)
}

// -------------------------------------------------------------------

// GCSpecificEffectPacket

// uint32 vid = 1;
inline void GCSpecificEffectPacket::clear_vid() {
  _impl_.vid_ = 0u;
}
inline uint32_t GCSpecificEffectPacket::_internal_vid() const {
  return _impl_.vid_;
}
inline uint32_t GCSpecificEffectPacket::vid() const {
  // @@protoc_insertion_point(field_get:network.GCSpecificEffectPacket.vid)
  return _internal_vid();
}
inline void GCSpecificEffectPacket::_internal_set_vid(uint32_t value) {
  
  _impl_.vid_ = value;
}
inline void GCSpecificEffectPacket::set_vid(uint32_t value) {
  _internal_set_vid(value);
  // @@protoc_insertion_point(field_set:network.GCSpecificEffectPacket.vid)
}

// bytes effect_file = 2;
inline void GCSpecificEffectPacket::clear_effect_file() {
  _impl_.effect_file_.ClearToEmpty();
}
inline const std::string& GCSpecificEffectPacket::effect_file() const {
  // @@protoc_insertion_point(field_get:network.GCSpecificEffectPacket.effect_file)
  return _internal_effect_file();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GCSpecificEffectPacket::set_effect_file(ArgT0&& arg0, ArgT... args) {
 
 _impl_.effect_file_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GCSpecificEffectPacket.effect_file)
}
inline std::string* GCSpecificEffectPacket::mutable_effect_file() {
  std::string* _s = _internal_mutable_effect_file();
  // @@protoc_insertion_point(field_mutable:network.GCSpecificEffectPacket.effect_file)
  return _s;
}
inline const std::string& GCSpecificEffectPacket::_internal_effect_file() const {
  return _impl_.effect_file_.Get();
}
inline void GCSpecificEffectPacket::_internal_set_effect_file(const std::string& value) {
  
  _impl_.effect_file_.Set(value, GetArenaForAllocation());
}
inline std::string* GCSpecificEffectPacket::_internal_mutable_effect_file() {
  
  return _impl_.effect_file_.Mutable(GetArenaForAllocation());
}
inline std::string* GCSpecificEffectPacket::release_effect_file() {
  // @@protoc_insertion_point(field_release:network.GCSpecificEffectPacket.effect_file)
  return _impl_.effect_file_.Release();
}
inline void GCSpecificEffectPacket::set_allocated_effect_file(std::string* effect_file) {
  if (effect_file != nullptr) {
    
  } else {
    
  }
  _impl_.effect_file_.SetAllocated(effect_file, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.effect_file_.IsDefault()) {
    _impl_.effect_file_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GCSpecificEffectPacket.effect_file)
}

// -------------------------------------------------------------------

// GCDragonSoulRefinePacket

// uint32 sub_type = 1;
inline void GCDragonSoulRefinePacket::clear_sub_type() {
  _impl_.sub_type_ = 0u;
}
inline uint32_t GCDragonSoulRefinePacket::_internal_sub_type() const {
  return _impl_.sub_type_;
}
inline uint32_t GCDragonSoulRefinePacket::sub_type() const {
  // @@protoc_insertion_point(field_get:network.GCDragonSoulRefinePacket.sub_type)
  return _internal_sub_type();
}
inline void GCDragonSoulRefinePacket::_internal_set_sub_type(uint32_t value) {
  
  _impl_.sub_type_ = value;
}
inline void GCDragonSoulRefinePacket::set_sub_type(uint32_t value) {
  _internal_set_sub_type(value);
  // @@protoc_insertion_point(field_set:network.GCDragonSoulRefinePacket.sub_type)
}

// .network.TItemPos cell = 2;
inline bool GCDragonSoulRefinePacket::_internal_has_cell() const {
  return this != internal_default_instance() && _impl_.cell_ != nullptr;
}
inline bool GCDragonSoulRefinePacket::has_cell() const {
  return _internal_has_cell();
}
inline const ::network::TItemPos& GCDragonSoulRefinePacket::_internal_cell() const {
  const ::network::TItemPos* p = _impl_.cell_;
  return p != nullptr ? *p : reinterpret_cast<const ::network::TItemPos&>(
      ::network::_TItemPos_default_instance_);
}
inline const ::network::TItemPos& GCDragonSoulRefinePacket::cell() const {
  // @@protoc_insertion_point(field_get:network.GCDragonSoulRefinePacket.cell)
  return _internal_cell();
}
inline void GCDragonSoulRefinePacket::unsafe_arena_set_allocated_cell(
    ::network::TItemPos* cell) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cell_);
  }
  _impl_.cell_ = cell;
  if (cell) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:network.GCDragonSoulRefinePacket.cell)
}
inline ::network::TItemPos* GCDragonSoulRefinePacket::release_cell() {
  
  ::network::TItemPos* temp = _impl_.cell_;
  _impl_.cell_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::network::TItemPos* GCDragonSoulRefinePacket::unsafe_arena_release_cell() {
  // @@protoc_insertion_point(field_release:network.GCDragonSoulRefinePacket.cell)
  
  ::network::TItemPos* temp = _impl_.cell_;
  _impl_.cell_ = nullptr;
  return temp;
}
inline ::network::TItemPos* GCDragonSoulRefinePacket::_internal_mutable_cell() {
  
  if (_impl_.cell_ == nullptr) {
    auto* p = CreateMaybeMessage<::network::TItemPos>(GetArenaForAllocation());
    _impl_.cell_ = p;
  }
  return _impl_.cell_;
}
inline ::network::TItemPos* GCDragonSoulRefinePacket::mutable_cell() {
  ::network::TItemPos* _msg = _internal_mutable_cell();
  // @@protoc_insertion_point(field_mutable:network.GCDragonSoulRefinePacket.cell)
  return _msg;
}
inline void GCDragonSoulRefinePacket::set_allocated_cell(::network::TItemPos* cell) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cell_);
  }
  if (cell) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cell));
    if (message_arena != submessage_arena) {
      cell = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cell, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.cell_ = cell;
  // @@protoc_insertion_point(field_set_allocated:network.GCDragonSoulRefinePacket.cell)
}

// -------------------------------------------------------------------

// GCTeamlerStatusPacket

// bytes name = 1;
inline void GCTeamlerStatusPacket::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GCTeamlerStatusPacket::name() const {
  // @@protoc_insertion_point(field_get:network.GCTeamlerStatusPacket.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GCTeamlerStatusPacket::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GCTeamlerStatusPacket.name)
}
inline std::string* GCTeamlerStatusPacket::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:network.GCTeamlerStatusPacket.name)
  return _s;
}
inline const std::string& GCTeamlerStatusPacket::_internal_name() const {
  return _impl_.name_.Get();
}
inline void GCTeamlerStatusPacket::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* GCTeamlerStatusPacket::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* GCTeamlerStatusPacket::release_name() {
  // @@protoc_insertion_point(field_release:network.GCTeamlerStatusPacket.name)
  return _impl_.name_.Release();
}
inline void GCTeamlerStatusPacket::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GCTeamlerStatusPacket.name)
}

// bool is_online = 2;
inline void GCTeamlerStatusPacket::clear_is_online() {
  _impl_.is_online_ = false;
}
inline bool GCTeamlerStatusPacket::_internal_is_online() const {
  return _impl_.is_online_;
}
inline bool GCTeamlerStatusPacket::is_online() const {
  // @@protoc_insertion_point(field_get:network.GCTeamlerStatusPacket.is_online)
  return _internal_is_online();
}
inline void GCTeamlerStatusPacket::_internal_set_is_online(bool value) {
  
  _impl_.is_online_ = value;
}
inline void GCTeamlerStatusPacket::set_is_online(bool value) {
  _internal_set_is_online(value);
  // @@protoc_insertion_point(field_set:network.GCTeamlerStatusPacket.is_online)
}

// -------------------------------------------------------------------

// GCTeamlerShowPacket

// bool is_show = 1;
inline void GCTeamlerShowPacket::clear_is_show() {
  _impl_.is_show_ = false;
}
inline bool GCTeamlerShowPacket::_internal_is_show() const {
  return _impl_.is_show_;
}
inline bool GCTeamlerShowPacket::is_show() const {
  // @@protoc_insertion_point(field_get:network.GCTeamlerShowPacket.is_show)
  return _internal_is_show();
}
inline void GCTeamlerShowPacket::_internal_set_is_show(bool value) {
  
  _impl_.is_show_ = value;
}
inline void GCTeamlerShowPacket::set_is_show(bool value) {
  _internal_set_is_show(value);
  // @@protoc_insertion_point(field_set:network.GCTeamlerShowPacket.is_show)
}

// -------------------------------------------------------------------

// GCPartyPositionPacket

// uint32 pid = 1;
inline void GCPartyPositionPacket::clear_pid() {
  _impl_.pid_ = 0u;
}
inline uint32_t GCPartyPositionPacket::_internal_pid() const {
  return _impl_.pid_;
}
inline uint32_t GCPartyPositionPacket::pid() const {
  // @@protoc_insertion_point(field_get:network.GCPartyPositionPacket.pid)
  return _internal_pid();
}
inline void GCPartyPositionPacket::_internal_set_pid(uint32_t value) {
  
  _impl_.pid_ = value;
}
inline void GCPartyPositionPacket::set_pid(uint32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:network.GCPartyPositionPacket.pid)
}

// uint32 x = 2;
inline void GCPartyPositionPacket::clear_x() {
  _impl_.x_ = 0u;
}
inline uint32_t GCPartyPositionPacket::_internal_x() const {
  return _impl_.x_;
}
inline uint32_t GCPartyPositionPacket::x() const {
  // @@protoc_insertion_point(field_get:network.GCPartyPositionPacket.x)
  return _internal_x();
}
inline void GCPartyPositionPacket::_internal_set_x(uint32_t value) {
  
  _impl_.x_ = value;
}
inline void GCPartyPositionPacket::set_x(uint32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:network.GCPartyPositionPacket.x)
}

// uint32 y = 3;
inline void GCPartyPositionPacket::clear_y() {
  _impl_.y_ = 0u;
}
inline uint32_t GCPartyPositionPacket::_internal_y() const {
  return _impl_.y_;
}
inline uint32_t GCPartyPositionPacket::y() const {
  // @@protoc_insertion_point(field_get:network.GCPartyPositionPacket.y)
  return _internal_y();
}
inline void GCPartyPositionPacket::_internal_set_y(uint32_t value) {
  
  _impl_.y_ = value;
}
inline void GCPartyPositionPacket::set_y(uint32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:network.GCPartyPositionPacket.y)
}

// -------------------------------------------------------------------

// GCWikiPacket

// uint64 ret_id = 1;
inline void GCWikiPacket::clear_ret_id() {
  _impl_.ret_id_ = uint64_t{0u};
}
inline uint64_t GCWikiPacket::_internal_ret_id() const {
  return _impl_.ret_id_;
}
inline uint64_t GCWikiPacket::ret_id() const {
  // @@protoc_insertion_point(field_get:network.GCWikiPacket.ret_id)
  return _internal_ret_id();
}
inline void GCWikiPacket::_internal_set_ret_id(uint64_t value) {
  
  _impl_.ret_id_ = value;
}
inline void GCWikiPacket::set_ret_id(uint64_t value) {
  _internal_set_ret_id(value);
  // @@protoc_insertion_point(field_set:network.GCWikiPacket.ret_id)
}

// uint32 vnum = 2;
inline void GCWikiPacket::clear_vnum() {
  _impl_.vnum_ = 0u;
}
inline uint32_t GCWikiPacket::_internal_vnum() const {
  return _impl_.vnum_;
}
inline uint32_t GCWikiPacket::vnum() const {
  // @@protoc_insertion_point(field_get:network.GCWikiPacket.vnum)
  return _internal_vnum();
}
inline void GCWikiPacket::_internal_set_vnum(uint32_t value) {
  
  _impl_.vnum_ = value;
}
inline void GCWikiPacket::set_vnum(uint32_t value) {
  _internal_set_vnum(value);
  // @@protoc_insertion_point(field_set:network.GCWikiPacket.vnum)
}

// .network.TWikiInfoTable wiki_info = 3;
inline bool GCWikiPacket::_internal_has_wiki_info() const {
  return this != internal_default_instance() && _impl_.wiki_info_ != nullptr;
}
inline bool GCWikiPacket::has_wiki_info() const {
  return _internal_has_wiki_info();
}
inline const ::network::TWikiInfoTable& GCWikiPacket::_internal_wiki_info() const {
  const ::network::TWikiInfoTable* p = _impl_.wiki_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::network::TWikiInfoTable&>(
      ::network::_TWikiInfoTable_default_instance_);
}
inline const ::network::TWikiInfoTable& GCWikiPacket::wiki_info() const {
  // @@protoc_insertion_point(field_get:network.GCWikiPacket.wiki_info)
  return _internal_wiki_info();
}
inline void GCWikiPacket::unsafe_arena_set_allocated_wiki_info(
    ::network::TWikiInfoTable* wiki_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.wiki_info_);
  }
  _impl_.wiki_info_ = wiki_info;
  if (wiki_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:network.GCWikiPacket.wiki_info)
}
inline ::network::TWikiInfoTable* GCWikiPacket::release_wiki_info() {
  
  ::network::TWikiInfoTable* temp = _impl_.wiki_info_;
  _impl_.wiki_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::network::TWikiInfoTable* GCWikiPacket::unsafe_arena_release_wiki_info() {
  // @@protoc_insertion_point(field_release:network.GCWikiPacket.wiki_info)
  
  ::network::TWikiInfoTable* temp = _impl_.wiki_info_;
  _impl_.wiki_info_ = nullptr;
  return temp;
}
inline ::network::TWikiInfoTable* GCWikiPacket::_internal_mutable_wiki_info() {
  
  if (_impl_.wiki_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::network::TWikiInfoTable>(GetArenaForAllocation());
    _impl_.wiki_info_ = p;
  }
  return _impl_.wiki_info_;
}
inline ::network::TWikiInfoTable* GCWikiPacket::mutable_wiki_info() {
  ::network::TWikiInfoTable* _msg = _internal_mutable_wiki_info();
  // @@protoc_insertion_point(field_mutable:network.GCWikiPacket.wiki_info)
  return _msg;
}
inline void GCWikiPacket::set_allocated_wiki_info(::network::TWikiInfoTable* wiki_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.wiki_info_);
  }
  if (wiki_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(wiki_info));
    if (message_arena != submessage_arena) {
      wiki_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wiki_info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.wiki_info_ = wiki_info;
  // @@protoc_insertion_point(field_set_allocated:network.GCWikiPacket.wiki_info)
}

// repeated .network.TWikiItemOriginInfo origin_infos = 4;
inline int GCWikiPacket::_internal_origin_infos_size() const {
  return _impl_.origin_infos_.size();
}
inline int GCWikiPacket::origin_infos_size() const {
  return _internal_origin_infos_size();
}
inline ::network::TWikiItemOriginInfo* GCWikiPacket::mutable_origin_infos(int index) {
  // @@protoc_insertion_point(field_mutable:network.GCWikiPacket.origin_infos)
  return _impl_.origin_infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TWikiItemOriginInfo >*
GCWikiPacket::mutable_origin_infos() {
  // @@protoc_insertion_point(field_mutable_list:network.GCWikiPacket.origin_infos)
  return &_impl_.origin_infos_;
}
inline const ::network::TWikiItemOriginInfo& GCWikiPacket::_internal_origin_infos(int index) const {
  return _impl_.origin_infos_.Get(index);
}
inline const ::network::TWikiItemOriginInfo& GCWikiPacket::origin_infos(int index) const {
  // @@protoc_insertion_point(field_get:network.GCWikiPacket.origin_infos)
  return _internal_origin_infos(index);
}
inline ::network::TWikiItemOriginInfo* GCWikiPacket::_internal_add_origin_infos() {
  return _impl_.origin_infos_.Add();
}
inline ::network::TWikiItemOriginInfo* GCWikiPacket::add_origin_infos() {
  ::network::TWikiItemOriginInfo* _add = _internal_add_origin_infos();
  // @@protoc_insertion_point(field_add:network.GCWikiPacket.origin_infos)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TWikiItemOriginInfo >&
GCWikiPacket::origin_infos() const {
  // @@protoc_insertion_point(field_list:network.GCWikiPacket.origin_infos)
  return _impl_.origin_infos_;
}

// -------------------------------------------------------------------

// GCWikiMobPacket

// uint64 ret_id = 1;
inline void GCWikiMobPacket::clear_ret_id() {
  _impl_.ret_id_ = uint64_t{0u};
}
inline uint64_t GCWikiMobPacket::_internal_ret_id() const {
  return _impl_.ret_id_;
}
inline uint64_t GCWikiMobPacket::ret_id() const {
  // @@protoc_insertion_point(field_get:network.GCWikiMobPacket.ret_id)
  return _internal_ret_id();
}
inline void GCWikiMobPacket::_internal_set_ret_id(uint64_t value) {
  
  _impl_.ret_id_ = value;
}
inline void GCWikiMobPacket::set_ret_id(uint64_t value) {
  _internal_set_ret_id(value);
  // @@protoc_insertion_point(field_set:network.GCWikiMobPacket.ret_id)
}

// uint32 vnum = 2;
inline void GCWikiMobPacket::clear_vnum() {
  _impl_.vnum_ = 0u;
}
inline uint32_t GCWikiMobPacket::_internal_vnum() const {
  return _impl_.vnum_;
}
inline uint32_t GCWikiMobPacket::vnum() const {
  // @@protoc_insertion_point(field_get:network.GCWikiMobPacket.vnum)
  return _internal_vnum();
}
inline void GCWikiMobPacket::_internal_set_vnum(uint32_t value) {
  
  _impl_.vnum_ = value;
}
inline void GCWikiMobPacket::set_vnum(uint32_t value) {
  _internal_set_vnum(value);
  // @@protoc_insertion_point(field_set:network.GCWikiMobPacket.vnum)
}

// repeated uint32 mobs = 3;
inline int GCWikiMobPacket::_internal_mobs_size() const {
  return _impl_.mobs_.size();
}
inline int GCWikiMobPacket::mobs_size() const {
  return _internal_mobs_size();
}
inline void GCWikiMobPacket::clear_mobs() {
  _impl_.mobs_.Clear();
}
inline uint32_t GCWikiMobPacket::_internal_mobs(int index) const {
  return _impl_.mobs_.Get(index);
}
inline uint32_t GCWikiMobPacket::mobs(int index) const {
  // @@protoc_insertion_point(field_get:network.GCWikiMobPacket.mobs)
  return _internal_mobs(index);
}
inline void GCWikiMobPacket::set_mobs(int index, uint32_t value) {
  _impl_.mobs_.Set(index, value);
  // @@protoc_insertion_point(field_set:network.GCWikiMobPacket.mobs)
}
inline void GCWikiMobPacket::_internal_add_mobs(uint32_t value) {
  _impl_.mobs_.Add(value);
}
inline void GCWikiMobPacket::add_mobs(uint32_t value) {
  _internal_add_mobs(value);
  // @@protoc_insertion_point(field_add:network.GCWikiMobPacket.mobs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
GCWikiMobPacket::_internal_mobs() const {
  return _impl_.mobs_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
GCWikiMobPacket::mobs() const {
  // @@protoc_insertion_point(field_list:network.GCWikiMobPacket.mobs)
  return _internal_mobs();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
GCWikiMobPacket::_internal_mutable_mobs() {
  return &_impl_.mobs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
GCWikiMobPacket::mutable_mobs() {
  // @@protoc_insertion_point(field_mutable_list:network.GCWikiMobPacket.mobs)
  return _internal_mutable_mobs();
}

// -------------------------------------------------------------------

// GCSendCombatZonePacket

// uint32 sub_header = 1;
inline void GCSendCombatZonePacket::clear_sub_header() {
  _impl_.sub_header_ = 0u;
}
inline uint32_t GCSendCombatZonePacket::_internal_sub_header() const {
  return _impl_.sub_header_;
}
inline uint32_t GCSendCombatZonePacket::sub_header() const {
  // @@protoc_insertion_point(field_get:network.GCSendCombatZonePacket.sub_header)
  return _internal_sub_header();
}
inline void GCSendCombatZonePacket::_internal_set_sub_header(uint32_t value) {
  
  _impl_.sub_header_ = value;
}
inline void GCSendCombatZonePacket::set_sub_header(uint32_t value) {
  _internal_set_sub_header(value);
  // @@protoc_insertion_point(field_set:network.GCSendCombatZonePacket.sub_header)
}

// bool is_running = 2;
inline void GCSendCombatZonePacket::clear_is_running() {
  _impl_.is_running_ = false;
}
inline bool GCSendCombatZonePacket::_internal_is_running() const {
  return _impl_.is_running_;
}
inline bool GCSendCombatZonePacket::is_running() const {
  // @@protoc_insertion_point(field_get:network.GCSendCombatZonePacket.is_running)
  return _internal_is_running();
}
inline void GCSendCombatZonePacket::_internal_set_is_running(bool value) {
  
  _impl_.is_running_ = value;
}
inline void GCSendCombatZonePacket::set_is_running(bool value) {
  _internal_set_is_running(value);
  // @@protoc_insertion_point(field_set:network.GCSendCombatZonePacket.is_running)
}

// repeated uint32 data_infos = 3;
inline int GCSendCombatZonePacket::_internal_data_infos_size() const {
  return _impl_.data_infos_.size();
}
inline int GCSendCombatZonePacket::data_infos_size() const {
  return _internal_data_infos_size();
}
inline void GCSendCombatZonePacket::clear_data_infos() {
  _impl_.data_infos_.Clear();
}
inline uint32_t GCSendCombatZonePacket::_internal_data_infos(int index) const {
  return _impl_.data_infos_.Get(index);
}
inline uint32_t GCSendCombatZonePacket::data_infos(int index) const {
  // @@protoc_insertion_point(field_get:network.GCSendCombatZonePacket.data_infos)
  return _internal_data_infos(index);
}
inline void GCSendCombatZonePacket::set_data_infos(int index, uint32_t value) {
  _impl_.data_infos_.Set(index, value);
  // @@protoc_insertion_point(field_set:network.GCSendCombatZonePacket.data_infos)
}
inline void GCSendCombatZonePacket::_internal_add_data_infos(uint32_t value) {
  _impl_.data_infos_.Add(value);
}
inline void GCSendCombatZonePacket::add_data_infos(uint32_t value) {
  _internal_add_data_infos(value);
  // @@protoc_insertion_point(field_add:network.GCSendCombatZonePacket.data_infos)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
GCSendCombatZonePacket::_internal_data_infos() const {
  return _impl_.data_infos_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
GCSendCombatZonePacket::data_infos() const {
  // @@protoc_insertion_point(field_list:network.GCSendCombatZonePacket.data_infos)
  return _internal_data_infos();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
GCSendCombatZonePacket::_internal_mutable_data_infos() {
  return &_impl_.data_infos_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
GCSendCombatZonePacket::mutable_data_infos() {
  // @@protoc_insertion_point(field_mutable_list:network.GCSendCombatZonePacket.data_infos)
  return _internal_mutable_data_infos();
}

// repeated uint32 data_days = 4;
inline int GCSendCombatZonePacket::_internal_data_days_size() const {
  return _impl_.data_days_.size();
}
inline int GCSendCombatZonePacket::data_days_size() const {
  return _internal_data_days_size();
}
inline void GCSendCombatZonePacket::clear_data_days() {
  _impl_.data_days_.Clear();
}
inline uint32_t GCSendCombatZonePacket::_internal_data_days(int index) const {
  return _impl_.data_days_.Get(index);
}
inline uint32_t GCSendCombatZonePacket::data_days(int index) const {
  // @@protoc_insertion_point(field_get:network.GCSendCombatZonePacket.data_days)
  return _internal_data_days(index);
}
inline void GCSendCombatZonePacket::set_data_days(int index, uint32_t value) {
  _impl_.data_days_.Set(index, value);
  // @@protoc_insertion_point(field_set:network.GCSendCombatZonePacket.data_days)
}
inline void GCSendCombatZonePacket::_internal_add_data_days(uint32_t value) {
  _impl_.data_days_.Add(value);
}
inline void GCSendCombatZonePacket::add_data_days(uint32_t value) {
  _internal_add_data_days(value);
  // @@protoc_insertion_point(field_add:network.GCSendCombatZonePacket.data_days)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
GCSendCombatZonePacket::_internal_data_days() const {
  return _impl_.data_days_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
GCSendCombatZonePacket::data_days() const {
  // @@protoc_insertion_point(field_list:network.GCSendCombatZonePacket.data_days)
  return _internal_data_days();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
GCSendCombatZonePacket::_internal_mutable_data_days() {
  return &_impl_.data_days_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
GCSendCombatZonePacket::mutable_data_days() {
  // @@protoc_insertion_point(field_mutable_list:network.GCSendCombatZonePacket.data_days)
  return _internal_mutable_data_days();
}

// -------------------------------------------------------------------

// GCCombatZoneRankingDataPacket

// repeated .network.TCombatZoneRankingPlayer data = 1;
inline int GCCombatZoneRankingDataPacket::_internal_data_size() const {
  return _impl_.data_.size();
}
inline int GCCombatZoneRankingDataPacket::data_size() const {
  return _internal_data_size();
}
inline ::network::TCombatZoneRankingPlayer* GCCombatZoneRankingDataPacket::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:network.GCCombatZoneRankingDataPacket.data)
  return _impl_.data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TCombatZoneRankingPlayer >*
GCCombatZoneRankingDataPacket::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:network.GCCombatZoneRankingDataPacket.data)
  return &_impl_.data_;
}
inline const ::network::TCombatZoneRankingPlayer& GCCombatZoneRankingDataPacket::_internal_data(int index) const {
  return _impl_.data_.Get(index);
}
inline const ::network::TCombatZoneRankingPlayer& GCCombatZoneRankingDataPacket::data(int index) const {
  // @@protoc_insertion_point(field_get:network.GCCombatZoneRankingDataPacket.data)
  return _internal_data(index);
}
inline ::network::TCombatZoneRankingPlayer* GCCombatZoneRankingDataPacket::_internal_add_data() {
  return _impl_.data_.Add();
}
inline ::network::TCombatZoneRankingPlayer* GCCombatZoneRankingDataPacket::add_data() {
  ::network::TCombatZoneRankingPlayer* _add = _internal_add_data();
  // @@protoc_insertion_point(field_add:network.GCCombatZoneRankingDataPacket.data)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TCombatZoneRankingPlayer >&
GCCombatZoneRankingDataPacket::data() const {
  // @@protoc_insertion_point(field_list:network.GCCombatZoneRankingDataPacket.data)
  return _impl_.data_;
}

// -------------------------------------------------------------------

// GCEventRequestPacket

// uint32 event_index = 1;
inline void GCEventRequestPacket::clear_event_index() {
  _impl_.event_index_ = 0u;
}
inline uint32_t GCEventRequestPacket::_internal_event_index() const {
  return _impl_.event_index_;
}
inline uint32_t GCEventRequestPacket::event_index() const {
  // @@protoc_insertion_point(field_get:network.GCEventRequestPacket.event_index)
  return _internal_event_index();
}
inline void GCEventRequestPacket::_internal_set_event_index(uint32_t value) {
  
  _impl_.event_index_ = value;
}
inline void GCEventRequestPacket::set_event_index(uint32_t value) {
  _internal_set_event_index(value);
  // @@protoc_insertion_point(field_set:network.GCEventRequestPacket.event_index)
}

// bytes name = 2;
inline void GCEventRequestPacket::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GCEventRequestPacket::name() const {
  // @@protoc_insertion_point(field_get:network.GCEventRequestPacket.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GCEventRequestPacket::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GCEventRequestPacket.name)
}
inline std::string* GCEventRequestPacket::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:network.GCEventRequestPacket.name)
  return _s;
}
inline const std::string& GCEventRequestPacket::_internal_name() const {
  return _impl_.name_.Get();
}
inline void GCEventRequestPacket::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* GCEventRequestPacket::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* GCEventRequestPacket::release_name() {
  // @@protoc_insertion_point(field_release:network.GCEventRequestPacket.name)
  return _impl_.name_.Release();
}
inline void GCEventRequestPacket::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GCEventRequestPacket.name)
}

// bytes desc = 3;
inline void GCEventRequestPacket::clear_desc() {
  _impl_.desc_.ClearToEmpty();
}
inline const std::string& GCEventRequestPacket::desc() const {
  // @@protoc_insertion_point(field_get:network.GCEventRequestPacket.desc)
  return _internal_desc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GCEventRequestPacket::set_desc(ArgT0&& arg0, ArgT... args) {
 
 _impl_.desc_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GCEventRequestPacket.desc)
}
inline std::string* GCEventRequestPacket::mutable_desc() {
  std::string* _s = _internal_mutable_desc();
  // @@protoc_insertion_point(field_mutable:network.GCEventRequestPacket.desc)
  return _s;
}
inline const std::string& GCEventRequestPacket::_internal_desc() const {
  return _impl_.desc_.Get();
}
inline void GCEventRequestPacket::_internal_set_desc(const std::string& value) {
  
  _impl_.desc_.Set(value, GetArenaForAllocation());
}
inline std::string* GCEventRequestPacket::_internal_mutable_desc() {
  
  return _impl_.desc_.Mutable(GetArenaForAllocation());
}
inline std::string* GCEventRequestPacket::release_desc() {
  // @@protoc_insertion_point(field_release:network.GCEventRequestPacket.desc)
  return _impl_.desc_.Release();
}
inline void GCEventRequestPacket::set_allocated_desc(std::string* desc) {
  if (desc != nullptr) {
    
  } else {
    
  }
  _impl_.desc_.SetAllocated(desc, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.desc_.IsDefault()) {
    _impl_.desc_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GCEventRequestPacket.desc)
}

// -------------------------------------------------------------------

// GCEventCancelPacket

// uint32 event_index = 1;
inline void GCEventCancelPacket::clear_event_index() {
  _impl_.event_index_ = 0u;
}
inline uint32_t GCEventCancelPacket::_internal_event_index() const {
  return _impl_.event_index_;
}
inline uint32_t GCEventCancelPacket::event_index() const {
  // @@protoc_insertion_point(field_get:network.GCEventCancelPacket.event_index)
  return _internal_event_index();
}
inline void GCEventCancelPacket::_internal_set_event_index(uint32_t value) {
  
  _impl_.event_index_ = value;
}
inline void GCEventCancelPacket::set_event_index(uint32_t value) {
  _internal_set_event_index(value);
  // @@protoc_insertion_point(field_set:network.GCEventCancelPacket.event_index)
}

// -------------------------------------------------------------------

// GCEventEmpireWarLoadPacket

// int32 time_left = 1;
inline void GCEventEmpireWarLoadPacket::clear_time_left() {
  _impl_.time_left_ = 0;
}
inline int32_t GCEventEmpireWarLoadPacket::_internal_time_left() const {
  return _impl_.time_left_;
}
inline int32_t GCEventEmpireWarLoadPacket::time_left() const {
  // @@protoc_insertion_point(field_get:network.GCEventEmpireWarLoadPacket.time_left)
  return _internal_time_left();
}
inline void GCEventEmpireWarLoadPacket::_internal_set_time_left(int32_t value) {
  
  _impl_.time_left_ = value;
}
inline void GCEventEmpireWarLoadPacket::set_time_left(int32_t value) {
  _internal_set_time_left(value);
  // @@protoc_insertion_point(field_set:network.GCEventEmpireWarLoadPacket.time_left)
}

// repeated int32 kills = 2;
inline int GCEventEmpireWarLoadPacket::_internal_kills_size() const {
  return _impl_.kills_.size();
}
inline int GCEventEmpireWarLoadPacket::kills_size() const {
  return _internal_kills_size();
}
inline void GCEventEmpireWarLoadPacket::clear_kills() {
  _impl_.kills_.Clear();
}
inline int32_t GCEventEmpireWarLoadPacket::_internal_kills(int index) const {
  return _impl_.kills_.Get(index);
}
inline int32_t GCEventEmpireWarLoadPacket::kills(int index) const {
  // @@protoc_insertion_point(field_get:network.GCEventEmpireWarLoadPacket.kills)
  return _internal_kills(index);
}
inline void GCEventEmpireWarLoadPacket::set_kills(int index, int32_t value) {
  _impl_.kills_.Set(index, value);
  // @@protoc_insertion_point(field_set:network.GCEventEmpireWarLoadPacket.kills)
}
inline void GCEventEmpireWarLoadPacket::_internal_add_kills(int32_t value) {
  _impl_.kills_.Add(value);
}
inline void GCEventEmpireWarLoadPacket::add_kills(int32_t value) {
  _internal_add_kills(value);
  // @@protoc_insertion_point(field_add:network.GCEventEmpireWarLoadPacket.kills)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
GCEventEmpireWarLoadPacket::_internal_kills() const {
  return _impl_.kills_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
GCEventEmpireWarLoadPacket::kills() const {
  // @@protoc_insertion_point(field_list:network.GCEventEmpireWarLoadPacket.kills)
  return _internal_kills();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
GCEventEmpireWarLoadPacket::_internal_mutable_kills() {
  return &_impl_.kills_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
GCEventEmpireWarLoadPacket::mutable_kills() {
  // @@protoc_insertion_point(field_mutable_list:network.GCEventEmpireWarLoadPacket.kills)
  return _internal_mutable_kills();
}

// repeated int32 deaths = 3;
inline int GCEventEmpireWarLoadPacket::_internal_deaths_size() const {
  return _impl_.deaths_.size();
}
inline int GCEventEmpireWarLoadPacket::deaths_size() const {
  return _internal_deaths_size();
}
inline void GCEventEmpireWarLoadPacket::clear_deaths() {
  _impl_.deaths_.Clear();
}
inline int32_t GCEventEmpireWarLoadPacket::_internal_deaths(int index) const {
  return _impl_.deaths_.Get(index);
}
inline int32_t GCEventEmpireWarLoadPacket::deaths(int index) const {
  // @@protoc_insertion_point(field_get:network.GCEventEmpireWarLoadPacket.deaths)
  return _internal_deaths(index);
}
inline void GCEventEmpireWarLoadPacket::set_deaths(int index, int32_t value) {
  _impl_.deaths_.Set(index, value);
  // @@protoc_insertion_point(field_set:network.GCEventEmpireWarLoadPacket.deaths)
}
inline void GCEventEmpireWarLoadPacket::_internal_add_deaths(int32_t value) {
  _impl_.deaths_.Add(value);
}
inline void GCEventEmpireWarLoadPacket::add_deaths(int32_t value) {
  _internal_add_deaths(value);
  // @@protoc_insertion_point(field_add:network.GCEventEmpireWarLoadPacket.deaths)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
GCEventEmpireWarLoadPacket::_internal_deaths() const {
  return _impl_.deaths_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
GCEventEmpireWarLoadPacket::deaths() const {
  // @@protoc_insertion_point(field_list:network.GCEventEmpireWarLoadPacket.deaths)
  return _internal_deaths();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
GCEventEmpireWarLoadPacket::_internal_mutable_deaths() {
  return &_impl_.deaths_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
GCEventEmpireWarLoadPacket::mutable_deaths() {
  // @@protoc_insertion_point(field_mutable_list:network.GCEventEmpireWarLoadPacket.deaths)
  return _internal_mutable_deaths();
}

// -------------------------------------------------------------------

// GCEventEmpireWarUpdatePacket

// uint32 empire = 1;
inline void GCEventEmpireWarUpdatePacket::clear_empire() {
  _impl_.empire_ = 0u;
}
inline uint32_t GCEventEmpireWarUpdatePacket::_internal_empire() const {
  return _impl_.empire_;
}
inline uint32_t GCEventEmpireWarUpdatePacket::empire() const {
  // @@protoc_insertion_point(field_get:network.GCEventEmpireWarUpdatePacket.empire)
  return _internal_empire();
}
inline void GCEventEmpireWarUpdatePacket::_internal_set_empire(uint32_t value) {
  
  _impl_.empire_ = value;
}
inline void GCEventEmpireWarUpdatePacket::set_empire(uint32_t value) {
  _internal_set_empire(value);
  // @@protoc_insertion_point(field_set:network.GCEventEmpireWarUpdatePacket.empire)
}

// uint32 kills = 2;
inline void GCEventEmpireWarUpdatePacket::clear_kills() {
  _impl_.kills_ = 0u;
}
inline uint32_t GCEventEmpireWarUpdatePacket::_internal_kills() const {
  return _impl_.kills_;
}
inline uint32_t GCEventEmpireWarUpdatePacket::kills() const {
  // @@protoc_insertion_point(field_get:network.GCEventEmpireWarUpdatePacket.kills)
  return _internal_kills();
}
inline void GCEventEmpireWarUpdatePacket::_internal_set_kills(uint32_t value) {
  
  _impl_.kills_ = value;
}
inline void GCEventEmpireWarUpdatePacket::set_kills(uint32_t value) {
  _internal_set_kills(value);
  // @@protoc_insertion_point(field_set:network.GCEventEmpireWarUpdatePacket.kills)
}

// uint32 deaths = 3;
inline void GCEventEmpireWarUpdatePacket::clear_deaths() {
  _impl_.deaths_ = 0u;
}
inline uint32_t GCEventEmpireWarUpdatePacket::_internal_deaths() const {
  return _impl_.deaths_;
}
inline uint32_t GCEventEmpireWarUpdatePacket::deaths() const {
  // @@protoc_insertion_point(field_get:network.GCEventEmpireWarUpdatePacket.deaths)
  return _internal_deaths();
}
inline void GCEventEmpireWarUpdatePacket::_internal_set_deaths(uint32_t value) {
  
  _impl_.deaths_ = value;
}
inline void GCEventEmpireWarUpdatePacket::set_deaths(uint32_t value) {
  _internal_set_deaths(value);
  // @@protoc_insertion_point(field_set:network.GCEventEmpireWarUpdatePacket.deaths)
}

// -------------------------------------------------------------------

// GCAttrtreeLevelPacket

// uint32 id = 1;
inline void GCAttrtreeLevelPacket::clear_id() {
  _impl_.id_ = 0u;
}
inline uint32_t GCAttrtreeLevelPacket::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t GCAttrtreeLevelPacket::id() const {
  // @@protoc_insertion_point(field_get:network.GCAttrtreeLevelPacket.id)
  return _internal_id();
}
inline void GCAttrtreeLevelPacket::_internal_set_id(uint32_t value) {
  
  _impl_.id_ = value;
}
inline void GCAttrtreeLevelPacket::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:network.GCAttrtreeLevelPacket.id)
}

// uint32 level = 2;
inline void GCAttrtreeLevelPacket::clear_level() {
  _impl_.level_ = 0u;
}
inline uint32_t GCAttrtreeLevelPacket::_internal_level() const {
  return _impl_.level_;
}
inline uint32_t GCAttrtreeLevelPacket::level() const {
  // @@protoc_insertion_point(field_get:network.GCAttrtreeLevelPacket.level)
  return _internal_level();
}
inline void GCAttrtreeLevelPacket::_internal_set_level(uint32_t value) {
  
  _impl_.level_ = value;
}
inline void GCAttrtreeLevelPacket::set_level(uint32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:network.GCAttrtreeLevelPacket.level)
}

// -------------------------------------------------------------------

// GCAttrtreeRefinePacket

// uint32 pos = 1;
inline void GCAttrtreeRefinePacket::clear_pos() {
  _impl_.pos_ = 0u;
}
inline uint32_t GCAttrtreeRefinePacket::_internal_pos() const {
  return _impl_.pos_;
}
inline uint32_t GCAttrtreeRefinePacket::pos() const {
  // @@protoc_insertion_point(field_get:network.GCAttrtreeRefinePacket.pos)
  return _internal_pos();
}
inline void GCAttrtreeRefinePacket::_internal_set_pos(uint32_t value) {
  
  _impl_.pos_ = value;
}
inline void GCAttrtreeRefinePacket::set_pos(uint32_t value) {
  _internal_set_pos(value);
  // @@protoc_insertion_point(field_set:network.GCAttrtreeRefinePacket.pos)
}

// .network.TRefineTable refine_table = 2;
inline bool GCAttrtreeRefinePacket::_internal_has_refine_table() const {
  return this != internal_default_instance() && _impl_.refine_table_ != nullptr;
}
inline bool GCAttrtreeRefinePacket::has_refine_table() const {
  return _internal_has_refine_table();
}
inline const ::network::TRefineTable& GCAttrtreeRefinePacket::_internal_refine_table() const {
  const ::network::TRefineTable* p = _impl_.refine_table_;
  return p != nullptr ? *p : reinterpret_cast<const ::network::TRefineTable&>(
      ::network::_TRefineTable_default_instance_);
}
inline const ::network::TRefineTable& GCAttrtreeRefinePacket::refine_table() const {
  // @@protoc_insertion_point(field_get:network.GCAttrtreeRefinePacket.refine_table)
  return _internal_refine_table();
}
inline void GCAttrtreeRefinePacket::unsafe_arena_set_allocated_refine_table(
    ::network::TRefineTable* refine_table) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.refine_table_);
  }
  _impl_.refine_table_ = refine_table;
  if (refine_table) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:network.GCAttrtreeRefinePacket.refine_table)
}
inline ::network::TRefineTable* GCAttrtreeRefinePacket::release_refine_table() {
  
  ::network::TRefineTable* temp = _impl_.refine_table_;
  _impl_.refine_table_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::network::TRefineTable* GCAttrtreeRefinePacket::unsafe_arena_release_refine_table() {
  // @@protoc_insertion_point(field_release:network.GCAttrtreeRefinePacket.refine_table)
  
  ::network::TRefineTable* temp = _impl_.refine_table_;
  _impl_.refine_table_ = nullptr;
  return temp;
}
inline ::network::TRefineTable* GCAttrtreeRefinePacket::_internal_mutable_refine_table() {
  
  if (_impl_.refine_table_ == nullptr) {
    auto* p = CreateMaybeMessage<::network::TRefineTable>(GetArenaForAllocation());
    _impl_.refine_table_ = p;
  }
  return _impl_.refine_table_;
}
inline ::network::TRefineTable* GCAttrtreeRefinePacket::mutable_refine_table() {
  ::network::TRefineTable* _msg = _internal_mutable_refine_table();
  // @@protoc_insertion_point(field_mutable:network.GCAttrtreeRefinePacket.refine_table)
  return _msg;
}
inline void GCAttrtreeRefinePacket::set_allocated_refine_table(::network::TRefineTable* refine_table) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.refine_table_);
  }
  if (refine_table) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(refine_table));
    if (message_arena != submessage_arena) {
      refine_table = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, refine_table, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.refine_table_ = refine_table;
  // @@protoc_insertion_point(field_set_allocated:network.GCAttrtreeRefinePacket.refine_table)
}

// -------------------------------------------------------------------

// GCRunePacket

// uint32 vnum = 1;
inline void GCRunePacket::clear_vnum() {
  _impl_.vnum_ = 0u;
}
inline uint32_t GCRunePacket::_internal_vnum() const {
  return _impl_.vnum_;
}
inline uint32_t GCRunePacket::vnum() const {
  // @@protoc_insertion_point(field_get:network.GCRunePacket.vnum)
  return _internal_vnum();
}
inline void GCRunePacket::_internal_set_vnum(uint32_t value) {
  
  _impl_.vnum_ = value;
}
inline void GCRunePacket::set_vnum(uint32_t value) {
  _internal_set_vnum(value);
  // @@protoc_insertion_point(field_set:network.GCRunePacket.vnum)
}

// -------------------------------------------------------------------

// GCRuneRefinePacket

// uint32 next_point = 1;
inline void GCRuneRefinePacket::clear_next_point() {
  _impl_.next_point_ = 0u;
}
inline uint32_t GCRuneRefinePacket::_internal_next_point() const {
  return _impl_.next_point_;
}
inline uint32_t GCRuneRefinePacket::next_point() const {
  // @@protoc_insertion_point(field_get:network.GCRuneRefinePacket.next_point)
  return _internal_next_point();
}
inline void GCRuneRefinePacket::_internal_set_next_point(uint32_t value) {
  
  _impl_.next_point_ = value;
}
inline void GCRuneRefinePacket::set_next_point(uint32_t value) {
  _internal_set_next_point(value);
  // @@protoc_insertion_point(field_set:network.GCRuneRefinePacket.next_point)
}

// .network.TRefineTable refine_table = 2;
inline bool GCRuneRefinePacket::_internal_has_refine_table() const {
  return this != internal_default_instance() && _impl_.refine_table_ != nullptr;
}
inline bool GCRuneRefinePacket::has_refine_table() const {
  return _internal_has_refine_table();
}
inline const ::network::TRefineTable& GCRuneRefinePacket::_internal_refine_table() const {
  const ::network::TRefineTable* p = _impl_.refine_table_;
  return p != nullptr ? *p : reinterpret_cast<const ::network::TRefineTable&>(
      ::network::_TRefineTable_default_instance_);
}
inline const ::network::TRefineTable& GCRuneRefinePacket::refine_table() const {
  // @@protoc_insertion_point(field_get:network.GCRuneRefinePacket.refine_table)
  return _internal_refine_table();
}
inline void GCRuneRefinePacket::unsafe_arena_set_allocated_refine_table(
    ::network::TRefineTable* refine_table) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.refine_table_);
  }
  _impl_.refine_table_ = refine_table;
  if (refine_table) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:network.GCRuneRefinePacket.refine_table)
}
inline ::network::TRefineTable* GCRuneRefinePacket::release_refine_table() {
  
  ::network::TRefineTable* temp = _impl_.refine_table_;
  _impl_.refine_table_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::network::TRefineTable* GCRuneRefinePacket::unsafe_arena_release_refine_table() {
  // @@protoc_insertion_point(field_release:network.GCRuneRefinePacket.refine_table)
  
  ::network::TRefineTable* temp = _impl_.refine_table_;
  _impl_.refine_table_ = nullptr;
  return temp;
}
inline ::network::TRefineTable* GCRuneRefinePacket::_internal_mutable_refine_table() {
  
  if (_impl_.refine_table_ == nullptr) {
    auto* p = CreateMaybeMessage<::network::TRefineTable>(GetArenaForAllocation());
    _impl_.refine_table_ = p;
  }
  return _impl_.refine_table_;
}
inline ::network::TRefineTable* GCRuneRefinePacket::mutable_refine_table() {
  ::network::TRefineTable* _msg = _internal_mutable_refine_table();
  // @@protoc_insertion_point(field_mutable:network.GCRuneRefinePacket.refine_table)
  return _msg;
}
inline void GCRuneRefinePacket::set_allocated_refine_table(::network::TRefineTable* refine_table) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.refine_table_);
  }
  if (refine_table) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(refine_table));
    if (message_arena != submessage_arena) {
      refine_table = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, refine_table, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.refine_table_ = refine_table;
  // @@protoc_insertion_point(field_set_allocated:network.GCRuneRefinePacket.refine_table)
}

// -------------------------------------------------------------------

// GCRunePagePacket

// .TRunePageData data = 1;
inline bool GCRunePagePacket::_internal_has_data() const {
  return this != internal_default_instance() && _impl_.data_ != nullptr;
}
inline bool GCRunePagePacket::has_data() const {
  return _internal_has_data();
}
inline const ::TRunePageData& GCRunePagePacket::_internal_data() const {
  const ::TRunePageData* p = _impl_.data_;
  return p != nullptr ? *p : reinterpret_cast<const ::TRunePageData&>(
      ::_TRunePageData_default_instance_);
}
inline const ::TRunePageData& GCRunePagePacket::data() const {
  // @@protoc_insertion_point(field_get:network.GCRunePagePacket.data)
  return _internal_data();
}
inline void GCRunePagePacket::unsafe_arena_set_allocated_data(
    ::TRunePageData* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.data_);
  }
  _impl_.data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:network.GCRunePagePacket.data)
}
inline ::TRunePageData* GCRunePagePacket::release_data() {
  
  ::TRunePageData* temp = _impl_.data_;
  _impl_.data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TRunePageData* GCRunePagePacket::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:network.GCRunePagePacket.data)
  
  ::TRunePageData* temp = _impl_.data_;
  _impl_.data_ = nullptr;
  return temp;
}
inline ::TRunePageData* GCRunePagePacket::_internal_mutable_data() {
  
  if (_impl_.data_ == nullptr) {
    auto* p = CreateMaybeMessage<::TRunePageData>(GetArenaForAllocation());
    _impl_.data_ = p;
  }
  return _impl_.data_;
}
inline ::TRunePageData* GCRunePagePacket::mutable_data() {
  ::TRunePageData* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:network.GCRunePagePacket.data)
  return _msg;
}
inline void GCRunePagePacket::set_allocated_data(::TRunePageData* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.data_);
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data));
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.data_ = data;
  // @@protoc_insertion_point(field_set_allocated:network.GCRunePagePacket.data)
}

// -------------------------------------------------------------------

// GCRuneLevelupPacket

// uint32 pos = 1;
inline void GCRuneLevelupPacket::clear_pos() {
  _impl_.pos_ = 0u;
}
inline uint32_t GCRuneLevelupPacket::_internal_pos() const {
  return _impl_.pos_;
}
inline uint32_t GCRuneLevelupPacket::pos() const {
  // @@protoc_insertion_point(field_get:network.GCRuneLevelupPacket.pos)
  return _internal_pos();
}
inline void GCRuneLevelupPacket::_internal_set_pos(uint32_t value) {
  
  _impl_.pos_ = value;
}
inline void GCRuneLevelupPacket::set_pos(uint32_t value) {
  _internal_set_pos(value);
  // @@protoc_insertion_point(field_set:network.GCRuneLevelupPacket.pos)
}

// .network.TRefineTable refine_table = 2;
inline bool GCRuneLevelupPacket::_internal_has_refine_table() const {
  return this != internal_default_instance() && _impl_.refine_table_ != nullptr;
}
inline bool GCRuneLevelupPacket::has_refine_table() const {
  return _internal_has_refine_table();
}
inline const ::network::TRefineTable& GCRuneLevelupPacket::_internal_refine_table() const {
  const ::network::TRefineTable* p = _impl_.refine_table_;
  return p != nullptr ? *p : reinterpret_cast<const ::network::TRefineTable&>(
      ::network::_TRefineTable_default_instance_);
}
inline const ::network::TRefineTable& GCRuneLevelupPacket::refine_table() const {
  // @@protoc_insertion_point(field_get:network.GCRuneLevelupPacket.refine_table)
  return _internal_refine_table();
}
inline void GCRuneLevelupPacket::unsafe_arena_set_allocated_refine_table(
    ::network::TRefineTable* refine_table) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.refine_table_);
  }
  _impl_.refine_table_ = refine_table;
  if (refine_table) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:network.GCRuneLevelupPacket.refine_table)
}
inline ::network::TRefineTable* GCRuneLevelupPacket::release_refine_table() {
  
  ::network::TRefineTable* temp = _impl_.refine_table_;
  _impl_.refine_table_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::network::TRefineTable* GCRuneLevelupPacket::unsafe_arena_release_refine_table() {
  // @@protoc_insertion_point(field_release:network.GCRuneLevelupPacket.refine_table)
  
  ::network::TRefineTable* temp = _impl_.refine_table_;
  _impl_.refine_table_ = nullptr;
  return temp;
}
inline ::network::TRefineTable* GCRuneLevelupPacket::_internal_mutable_refine_table() {
  
  if (_impl_.refine_table_ == nullptr) {
    auto* p = CreateMaybeMessage<::network::TRefineTable>(GetArenaForAllocation());
    _impl_.refine_table_ = p;
  }
  return _impl_.refine_table_;
}
inline ::network::TRefineTable* GCRuneLevelupPacket::mutable_refine_table() {
  ::network::TRefineTable* _msg = _internal_mutable_refine_table();
  // @@protoc_insertion_point(field_mutable:network.GCRuneLevelupPacket.refine_table)
  return _msg;
}
inline void GCRuneLevelupPacket::set_allocated_refine_table(::network::TRefineTable* refine_table) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.refine_table_);
  }
  if (refine_table) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(refine_table));
    if (message_arena != submessage_arena) {
      refine_table = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, refine_table, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.refine_table_ = refine_table;
  // @@protoc_insertion_point(field_set_allocated:network.GCRuneLevelupPacket.refine_table)
}

// -------------------------------------------------------------------

// GCEquipmentPageLoadPacket

// repeated .network.TEquipmentPageInfo pages = 1;
inline int GCEquipmentPageLoadPacket::_internal_pages_size() const {
  return _impl_.pages_.size();
}
inline int GCEquipmentPageLoadPacket::pages_size() const {
  return _internal_pages_size();
}
inline ::network::TEquipmentPageInfo* GCEquipmentPageLoadPacket::mutable_pages(int index) {
  // @@protoc_insertion_point(field_mutable:network.GCEquipmentPageLoadPacket.pages)
  return _impl_.pages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TEquipmentPageInfo >*
GCEquipmentPageLoadPacket::mutable_pages() {
  // @@protoc_insertion_point(field_mutable_list:network.GCEquipmentPageLoadPacket.pages)
  return &_impl_.pages_;
}
inline const ::network::TEquipmentPageInfo& GCEquipmentPageLoadPacket::_internal_pages(int index) const {
  return _impl_.pages_.Get(index);
}
inline const ::network::TEquipmentPageInfo& GCEquipmentPageLoadPacket::pages(int index) const {
  // @@protoc_insertion_point(field_get:network.GCEquipmentPageLoadPacket.pages)
  return _internal_pages(index);
}
inline ::network::TEquipmentPageInfo* GCEquipmentPageLoadPacket::_internal_add_pages() {
  return _impl_.pages_.Add();
}
inline ::network::TEquipmentPageInfo* GCEquipmentPageLoadPacket::add_pages() {
  ::network::TEquipmentPageInfo* _add = _internal_add_pages();
  // @@protoc_insertion_point(field_add:network.GCEquipmentPageLoadPacket.pages)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TEquipmentPageInfo >&
GCEquipmentPageLoadPacket::pages() const {
  // @@protoc_insertion_point(field_list:network.GCEquipmentPageLoadPacket.pages)
  return _impl_.pages_;
}

// uint32 selected_index = 2;
inline void GCEquipmentPageLoadPacket::clear_selected_index() {
  _impl_.selected_index_ = 0u;
}
inline uint32_t GCEquipmentPageLoadPacket::_internal_selected_index() const {
  return _impl_.selected_index_;
}
inline uint32_t GCEquipmentPageLoadPacket::selected_index() const {
  // @@protoc_insertion_point(field_get:network.GCEquipmentPageLoadPacket.selected_index)
  return _internal_selected_index();
}
inline void GCEquipmentPageLoadPacket::_internal_set_selected_index(uint32_t value) {
  
  _impl_.selected_index_ = value;
}
inline void GCEquipmentPageLoadPacket::set_selected_index(uint32_t value) {
  _internal_set_selected_index(value);
  // @@protoc_insertion_point(field_set:network.GCEquipmentPageLoadPacket.selected_index)
}

// -------------------------------------------------------------------

// GCDmgMeterPacket

// int32 dmg = 1;
inline void GCDmgMeterPacket::clear_dmg() {
  _impl_.dmg_ = 0;
}
inline int32_t GCDmgMeterPacket::_internal_dmg() const {
  return _impl_.dmg_;
}
inline int32_t GCDmgMeterPacket::dmg() const {
  // @@protoc_insertion_point(field_get:network.GCDmgMeterPacket.dmg)
  return _internal_dmg();
}
inline void GCDmgMeterPacket::_internal_set_dmg(int32_t value) {
  
  _impl_.dmg_ = value;
}
inline void GCDmgMeterPacket::set_dmg(int32_t value) {
  _internal_set_dmg(value);
  // @@protoc_insertion_point(field_set:network.GCDmgMeterPacket.dmg)
}

// int32 vid = 2;
inline void GCDmgMeterPacket::clear_vid() {
  _impl_.vid_ = 0;
}
inline int32_t GCDmgMeterPacket::_internal_vid() const {
  return _impl_.vid_;
}
inline int32_t GCDmgMeterPacket::vid() const {
  // @@protoc_insertion_point(field_get:network.GCDmgMeterPacket.vid)
  return _internal_vid();
}
inline void GCDmgMeterPacket::_internal_set_vid(int32_t value) {
  
  _impl_.vid_ = value;
}
inline void GCDmgMeterPacket::set_vid(int32_t value) {
  _internal_set_vid(value);
  // @@protoc_insertion_point(field_set:network.GCDmgMeterPacket.vid)
}

// -------------------------------------------------------------------

// GCSkillMotionPacket

// uint32 vid = 1;
inline void GCSkillMotionPacket::clear_vid() {
  _impl_.vid_ = 0u;
}
inline uint32_t GCSkillMotionPacket::_internal_vid() const {
  return _impl_.vid_;
}
inline uint32_t GCSkillMotionPacket::vid() const {
  // @@protoc_insertion_point(field_get:network.GCSkillMotionPacket.vid)
  return _internal_vid();
}
inline void GCSkillMotionPacket::_internal_set_vid(uint32_t value) {
  
  _impl_.vid_ = value;
}
inline void GCSkillMotionPacket::set_vid(uint32_t value) {
  _internal_set_vid(value);
  // @@protoc_insertion_point(field_set:network.GCSkillMotionPacket.vid)
}

// int32 x = 2;
inline void GCSkillMotionPacket::clear_x() {
  _impl_.x_ = 0;
}
inline int32_t GCSkillMotionPacket::_internal_x() const {
  return _impl_.x_;
}
inline int32_t GCSkillMotionPacket::x() const {
  // @@protoc_insertion_point(field_get:network.GCSkillMotionPacket.x)
  return _internal_x();
}
inline void GCSkillMotionPacket::_internal_set_x(int32_t value) {
  
  _impl_.x_ = value;
}
inline void GCSkillMotionPacket::set_x(int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:network.GCSkillMotionPacket.x)
}

// int32 y = 3;
inline void GCSkillMotionPacket::clear_y() {
  _impl_.y_ = 0;
}
inline int32_t GCSkillMotionPacket::_internal_y() const {
  return _impl_.y_;
}
inline int32_t GCSkillMotionPacket::y() const {
  // @@protoc_insertion_point(field_get:network.GCSkillMotionPacket.y)
  return _internal_y();
}
inline void GCSkillMotionPacket::_internal_set_y(int32_t value) {
  
  _impl_.y_ = value;
}
inline void GCSkillMotionPacket::set_y(int32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:network.GCSkillMotionPacket.y)
}

// int32 rotation = 4;
inline void GCSkillMotionPacket::clear_rotation() {
  _impl_.rotation_ = 0;
}
inline int32_t GCSkillMotionPacket::_internal_rotation() const {
  return _impl_.rotation_;
}
inline int32_t GCSkillMotionPacket::rotation() const {
  // @@protoc_insertion_point(field_get:network.GCSkillMotionPacket.rotation)
  return _internal_rotation();
}
inline void GCSkillMotionPacket::_internal_set_rotation(int32_t value) {
  
  _impl_.rotation_ = value;
}
inline void GCSkillMotionPacket::set_rotation(int32_t value) {
  _internal_set_rotation(value);
  // @@protoc_insertion_point(field_set:network.GCSkillMotionPacket.rotation)
}

// uint32 time = 5;
inline void GCSkillMotionPacket::clear_time() {
  _impl_.time_ = 0u;
}
inline uint32_t GCSkillMotionPacket::_internal_time() const {
  return _impl_.time_;
}
inline uint32_t GCSkillMotionPacket::time() const {
  // @@protoc_insertion_point(field_get:network.GCSkillMotionPacket.time)
  return _internal_time();
}
inline void GCSkillMotionPacket::_internal_set_time(uint32_t value) {
  
  _impl_.time_ = value;
}
inline void GCSkillMotionPacket::set_time(uint32_t value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:network.GCSkillMotionPacket.time)
}

// uint32 skill_vnum = 6;
inline void GCSkillMotionPacket::clear_skill_vnum() {
  _impl_.skill_vnum_ = 0u;
}
inline uint32_t GCSkillMotionPacket::_internal_skill_vnum() const {
  return _impl_.skill_vnum_;
}
inline uint32_t GCSkillMotionPacket::skill_vnum() const {
  // @@protoc_insertion_point(field_get:network.GCSkillMotionPacket.skill_vnum)
  return _internal_skill_vnum();
}
inline void GCSkillMotionPacket::_internal_set_skill_vnum(uint32_t value) {
  
  _impl_.skill_vnum_ = value;
}
inline void GCSkillMotionPacket::set_skill_vnum(uint32_t value) {
  _internal_set_skill_vnum(value);
  // @@protoc_insertion_point(field_set:network.GCSkillMotionPacket.skill_vnum)
}

// uint32 skill_level = 7;
inline void GCSkillMotionPacket::clear_skill_level() {
  _impl_.skill_level_ = 0u;
}
inline uint32_t GCSkillMotionPacket::_internal_skill_level() const {
  return _impl_.skill_level_;
}
inline uint32_t GCSkillMotionPacket::skill_level() const {
  // @@protoc_insertion_point(field_get:network.GCSkillMotionPacket.skill_level)
  return _internal_skill_level();
}
inline void GCSkillMotionPacket::_internal_set_skill_level(uint32_t value) {
  
  _impl_.skill_level_ = value;
}
inline void GCSkillMotionPacket::set_skill_level(uint32_t value) {
  _internal_set_skill_level(value);
  // @@protoc_insertion_point(field_set:network.GCSkillMotionPacket.skill_level)
}

// uint32 skill_grade = 8;
inline void GCSkillMotionPacket::clear_skill_grade() {
  _impl_.skill_grade_ = 0u;
}
inline uint32_t GCSkillMotionPacket::_internal_skill_grade() const {
  return _impl_.skill_grade_;
}
inline uint32_t GCSkillMotionPacket::skill_grade() const {
  // @@protoc_insertion_point(field_get:network.GCSkillMotionPacket.skill_grade)
  return _internal_skill_grade();
}
inline void GCSkillMotionPacket::_internal_set_skill_grade(uint32_t value) {
  
  _impl_.skill_grade_ = value;
}
inline void GCSkillMotionPacket::set_skill_grade(uint32_t value) {
  _internal_set_skill_grade(value);
  // @@protoc_insertion_point(field_set:network.GCSkillMotionPacket.skill_grade)
}

// -------------------------------------------------------------------

// GCFakeBuffSkillPacket

// uint32 skill_vnum = 1;
inline void GCFakeBuffSkillPacket::clear_skill_vnum() {
  _impl_.skill_vnum_ = 0u;
}
inline uint32_t GCFakeBuffSkillPacket::_internal_skill_vnum() const {
  return _impl_.skill_vnum_;
}
inline uint32_t GCFakeBuffSkillPacket::skill_vnum() const {
  // @@protoc_insertion_point(field_get:network.GCFakeBuffSkillPacket.skill_vnum)
  return _internal_skill_vnum();
}
inline void GCFakeBuffSkillPacket::_internal_set_skill_vnum(uint32_t value) {
  
  _impl_.skill_vnum_ = value;
}
inline void GCFakeBuffSkillPacket::set_skill_vnum(uint32_t value) {
  _internal_set_skill_vnum(value);
  // @@protoc_insertion_point(field_set:network.GCFakeBuffSkillPacket.skill_vnum)
}

// uint32 level = 2;
inline void GCFakeBuffSkillPacket::clear_level() {
  _impl_.level_ = 0u;
}
inline uint32_t GCFakeBuffSkillPacket::_internal_level() const {
  return _impl_.level_;
}
inline uint32_t GCFakeBuffSkillPacket::level() const {
  // @@protoc_insertion_point(field_get:network.GCFakeBuffSkillPacket.level)
  return _internal_level();
}
inline void GCFakeBuffSkillPacket::_internal_set_level(uint32_t value) {
  
  _impl_.level_ = value;
}
inline void GCFakeBuffSkillPacket::set_level(uint32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:network.GCFakeBuffSkillPacket.level)
}

// -------------------------------------------------------------------

// GCCBTItemSetPacket

// .network.TItemData data = 1;
inline bool GCCBTItemSetPacket::_internal_has_data() const {
  return this != internal_default_instance() && _impl_.data_ != nullptr;
}
inline bool GCCBTItemSetPacket::has_data() const {
  return _internal_has_data();
}
inline const ::network::TItemData& GCCBTItemSetPacket::_internal_data() const {
  const ::network::TItemData* p = _impl_.data_;
  return p != nullptr ? *p : reinterpret_cast<const ::network::TItemData&>(
      ::network::_TItemData_default_instance_);
}
inline const ::network::TItemData& GCCBTItemSetPacket::data() const {
  // @@protoc_insertion_point(field_get:network.GCCBTItemSetPacket.data)
  return _internal_data();
}
inline void GCCBTItemSetPacket::unsafe_arena_set_allocated_data(
    ::network::TItemData* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.data_);
  }
  _impl_.data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:network.GCCBTItemSetPacket.data)
}
inline ::network::TItemData* GCCBTItemSetPacket::release_data() {
  
  ::network::TItemData* temp = _impl_.data_;
  _impl_.data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::network::TItemData* GCCBTItemSetPacket::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:network.GCCBTItemSetPacket.data)
  
  ::network::TItemData* temp = _impl_.data_;
  _impl_.data_ = nullptr;
  return temp;
}
inline ::network::TItemData* GCCBTItemSetPacket::_internal_mutable_data() {
  
  if (_impl_.data_ == nullptr) {
    auto* p = CreateMaybeMessage<::network::TItemData>(GetArenaForAllocation());
    _impl_.data_ = p;
  }
  return _impl_.data_;
}
inline ::network::TItemData* GCCBTItemSetPacket::mutable_data() {
  ::network::TItemData* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:network.GCCBTItemSetPacket.data)
  return _msg;
}
inline void GCCBTItemSetPacket::set_allocated_data(::network::TItemData* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.data_);
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data));
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.data_ = data;
  // @@protoc_insertion_point(field_set_allocated:network.GCCBTItemSetPacket.data)
}

// uint32 cbt_pos = 2;
inline void GCCBTItemSetPacket::clear_cbt_pos() {
  _impl_.cbt_pos_ = 0u;
}
inline uint32_t GCCBTItemSetPacket::_internal_cbt_pos() const {
  return _impl_.cbt_pos_;
}
inline uint32_t GCCBTItemSetPacket::cbt_pos() const {
  // @@protoc_insertion_point(field_get:network.GCCBTItemSetPacket.cbt_pos)
  return _internal_cbt_pos();
}
inline void GCCBTItemSetPacket::_internal_set_cbt_pos(uint32_t value) {
  
  _impl_.cbt_pos_ = value;
}
inline void GCCBTItemSetPacket::set_cbt_pos(uint32_t value) {
  _internal_set_cbt_pos(value);
  // @@protoc_insertion_point(field_set:network.GCCBTItemSetPacket.cbt_pos)
}

// -------------------------------------------------------------------

// GCSoulRefineInfoPacket

// uint32 vnum = 1;
inline void GCSoulRefineInfoPacket::clear_vnum() {
  _impl_.vnum_ = 0u;
}
inline uint32_t GCSoulRefineInfoPacket::_internal_vnum() const {
  return _impl_.vnum_;
}
inline uint32_t GCSoulRefineInfoPacket::vnum() const {
  // @@protoc_insertion_point(field_get:network.GCSoulRefineInfoPacket.vnum)
  return _internal_vnum();
}
inline void GCSoulRefineInfoPacket::_internal_set_vnum(uint32_t value) {
  
  _impl_.vnum_ = value;
}
inline void GCSoulRefineInfoPacket::set_vnum(uint32_t value) {
  _internal_set_vnum(value);
  // @@protoc_insertion_point(field_set:network.GCSoulRefineInfoPacket.vnum)
}

// uint32 apply_type = 2;
inline void GCSoulRefineInfoPacket::clear_apply_type() {
  _impl_.apply_type_ = 0u;
}
inline uint32_t GCSoulRefineInfoPacket::_internal_apply_type() const {
  return _impl_.apply_type_;
}
inline uint32_t GCSoulRefineInfoPacket::apply_type() const {
  // @@protoc_insertion_point(field_get:network.GCSoulRefineInfoPacket.apply_type)
  return _internal_apply_type();
}
inline void GCSoulRefineInfoPacket::_internal_set_apply_type(uint32_t value) {
  
  _impl_.apply_type_ = value;
}
inline void GCSoulRefineInfoPacket::set_apply_type(uint32_t value) {
  _internal_set_apply_type(value);
  // @@protoc_insertion_point(field_set:network.GCSoulRefineInfoPacket.apply_type)
}

// uint32 type = 3;
inline void GCSoulRefineInfoPacket::clear_type() {
  _impl_.type_ = 0u;
}
inline uint32_t GCSoulRefineInfoPacket::_internal_type() const {
  return _impl_.type_;
}
inline uint32_t GCSoulRefineInfoPacket::type() const {
  // @@protoc_insertion_point(field_get:network.GCSoulRefineInfoPacket.type)
  return _internal_type();
}
inline void GCSoulRefineInfoPacket::_internal_set_type(uint32_t value) {
  
  _impl_.type_ = value;
}
inline void GCSoulRefineInfoPacket::set_type(uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:network.GCSoulRefineInfoPacket.type)
}

// repeated int32 apply_values = 4;
inline int GCSoulRefineInfoPacket::_internal_apply_values_size() const {
  return _impl_.apply_values_.size();
}
inline int GCSoulRefineInfoPacket::apply_values_size() const {
  return _internal_apply_values_size();
}
inline void GCSoulRefineInfoPacket::clear_apply_values() {
  _impl_.apply_values_.Clear();
}
inline int32_t GCSoulRefineInfoPacket::_internal_apply_values(int index) const {
  return _impl_.apply_values_.Get(index);
}
inline int32_t GCSoulRefineInfoPacket::apply_values(int index) const {
  // @@protoc_insertion_point(field_get:network.GCSoulRefineInfoPacket.apply_values)
  return _internal_apply_values(index);
}
inline void GCSoulRefineInfoPacket::set_apply_values(int index, int32_t value) {
  _impl_.apply_values_.Set(index, value);
  // @@protoc_insertion_point(field_set:network.GCSoulRefineInfoPacket.apply_values)
}
inline void GCSoulRefineInfoPacket::_internal_add_apply_values(int32_t value) {
  _impl_.apply_values_.Add(value);
}
inline void GCSoulRefineInfoPacket::add_apply_values(int32_t value) {
  _internal_add_apply_values(value);
  // @@protoc_insertion_point(field_add:network.GCSoulRefineInfoPacket.apply_values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
GCSoulRefineInfoPacket::_internal_apply_values() const {
  return _impl_.apply_values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
GCSoulRefineInfoPacket::apply_values() const {
  // @@protoc_insertion_point(field_list:network.GCSoulRefineInfoPacket.apply_values)
  return _internal_apply_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
GCSoulRefineInfoPacket::_internal_mutable_apply_values() {
  return &_impl_.apply_values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
GCSoulRefineInfoPacket::mutable_apply_values() {
  // @@protoc_insertion_point(field_mutable_list:network.GCSoulRefineInfoPacket.apply_values)
  return _internal_mutable_apply_values();
}

// .network.TRefineTable refine = 5;
inline bool GCSoulRefineInfoPacket::_internal_has_refine() const {
  return this != internal_default_instance() && _impl_.refine_ != nullptr;
}
inline bool GCSoulRefineInfoPacket::has_refine() const {
  return _internal_has_refine();
}
inline const ::network::TRefineTable& GCSoulRefineInfoPacket::_internal_refine() const {
  const ::network::TRefineTable* p = _impl_.refine_;
  return p != nullptr ? *p : reinterpret_cast<const ::network::TRefineTable&>(
      ::network::_TRefineTable_default_instance_);
}
inline const ::network::TRefineTable& GCSoulRefineInfoPacket::refine() const {
  // @@protoc_insertion_point(field_get:network.GCSoulRefineInfoPacket.refine)
  return _internal_refine();
}
inline void GCSoulRefineInfoPacket::unsafe_arena_set_allocated_refine(
    ::network::TRefineTable* refine) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.refine_);
  }
  _impl_.refine_ = refine;
  if (refine) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:network.GCSoulRefineInfoPacket.refine)
}
inline ::network::TRefineTable* GCSoulRefineInfoPacket::release_refine() {
  
  ::network::TRefineTable* temp = _impl_.refine_;
  _impl_.refine_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::network::TRefineTable* GCSoulRefineInfoPacket::unsafe_arena_release_refine() {
  // @@protoc_insertion_point(field_release:network.GCSoulRefineInfoPacket.refine)
  
  ::network::TRefineTable* temp = _impl_.refine_;
  _impl_.refine_ = nullptr;
  return temp;
}
inline ::network::TRefineTable* GCSoulRefineInfoPacket::_internal_mutable_refine() {
  
  if (_impl_.refine_ == nullptr) {
    auto* p = CreateMaybeMessage<::network::TRefineTable>(GetArenaForAllocation());
    _impl_.refine_ = p;
  }
  return _impl_.refine_;
}
inline ::network::TRefineTable* GCSoulRefineInfoPacket::mutable_refine() {
  ::network::TRefineTable* _msg = _internal_mutable_refine();
  // @@protoc_insertion_point(field_mutable:network.GCSoulRefineInfoPacket.refine)
  return _msg;
}
inline void GCSoulRefineInfoPacket::set_allocated_refine(::network::TRefineTable* refine) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.refine_);
  }
  if (refine) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(refine));
    if (message_arena != submessage_arena) {
      refine = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, refine, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.refine_ = refine;
  // @@protoc_insertion_point(field_set_allocated:network.GCSoulRefineInfoPacket.refine)
}

// -------------------------------------------------------------------

// GCPVPTeamPacket

// uint32 vid = 1;
inline void GCPVPTeamPacket::clear_vid() {
  _impl_.vid_ = 0u;
}
inline uint32_t GCPVPTeamPacket::_internal_vid() const {
  return _impl_.vid_;
}
inline uint32_t GCPVPTeamPacket::vid() const {
  // @@protoc_insertion_point(field_get:network.GCPVPTeamPacket.vid)
  return _internal_vid();
}
inline void GCPVPTeamPacket::_internal_set_vid(uint32_t value) {
  
  _impl_.vid_ = value;
}
inline void GCPVPTeamPacket::set_vid(uint32_t value) {
  _internal_set_vid(value);
  // @@protoc_insertion_point(field_set:network.GCPVPTeamPacket.vid)
}

// sint32 team = 2;
inline void GCPVPTeamPacket::clear_team() {
  _impl_.team_ = 0;
}
inline int32_t GCPVPTeamPacket::_internal_team() const {
  return _impl_.team_;
}
inline int32_t GCPVPTeamPacket::team() const {
  // @@protoc_insertion_point(field_get:network.GCPVPTeamPacket.team)
  return _internal_team();
}
inline void GCPVPTeamPacket::_internal_set_team(int32_t value) {
  
  _impl_.team_ = value;
}
inline void GCPVPTeamPacket::set_team(int32_t value) {
  _internal_set_team(value);
  // @@protoc_insertion_point(field_set:network.GCPVPTeamPacket.team)
}

// -------------------------------------------------------------------

// GCInventoryMaxNumPacket

// uint32 inv_type = 1;
inline void GCInventoryMaxNumPacket::clear_inv_type() {
  _impl_.inv_type_ = 0u;
}
inline uint32_t GCInventoryMaxNumPacket::_internal_inv_type() const {
  return _impl_.inv_type_;
}
inline uint32_t GCInventoryMaxNumPacket::inv_type() const {
  // @@protoc_insertion_point(field_get:network.GCInventoryMaxNumPacket.inv_type)
  return _internal_inv_type();
}
inline void GCInventoryMaxNumPacket::_internal_set_inv_type(uint32_t value) {
  
  _impl_.inv_type_ = value;
}
inline void GCInventoryMaxNumPacket::set_inv_type(uint32_t value) {
  _internal_set_inv_type(value);
  // @@protoc_insertion_point(field_set:network.GCInventoryMaxNumPacket.inv_type)
}

// uint32 max_num = 2;
inline void GCInventoryMaxNumPacket::clear_max_num() {
  _impl_.max_num_ = 0u;
}
inline uint32_t GCInventoryMaxNumPacket::_internal_max_num() const {
  return _impl_.max_num_;
}
inline uint32_t GCInventoryMaxNumPacket::max_num() const {
  // @@protoc_insertion_point(field_get:network.GCInventoryMaxNumPacket.max_num)
  return _internal_max_num();
}
inline void GCInventoryMaxNumPacket::_internal_set_max_num(uint32_t value) {
  
  _impl_.max_num_ = value;
}
inline void GCInventoryMaxNumPacket::set_max_num(uint32_t value) {
  _internal_set_max_num(value);
  // @@protoc_insertion_point(field_set:network.GCInventoryMaxNumPacket.max_num)
}

// -------------------------------------------------------------------

// GCAttributesToClientPacket_Attribute

// uint32 type = 1;
inline void GCAttributesToClientPacket_Attribute::clear_type() {
  _impl_.type_ = 0u;
}
inline uint32_t GCAttributesToClientPacket_Attribute::_internal_type() const {
  return _impl_.type_;
}
inline uint32_t GCAttributesToClientPacket_Attribute::type() const {
  // @@protoc_insertion_point(field_get:network.GCAttributesToClientPacket.Attribute.type)
  return _internal_type();
}
inline void GCAttributesToClientPacket_Attribute::_internal_set_type(uint32_t value) {
  
  _impl_.type_ = value;
}
inline void GCAttributesToClientPacket_Attribute::set_type(uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:network.GCAttributesToClientPacket.Attribute.type)
}

// int32 value = 2;
inline void GCAttributesToClientPacket_Attribute::clear_value() {
  _impl_.value_ = 0;
}
inline int32_t GCAttributesToClientPacket_Attribute::_internal_value() const {
  return _impl_.value_;
}
inline int32_t GCAttributesToClientPacket_Attribute::value() const {
  // @@protoc_insertion_point(field_get:network.GCAttributesToClientPacket.Attribute.value)
  return _internal_value();
}
inline void GCAttributesToClientPacket_Attribute::_internal_set_value(int32_t value) {
  
  _impl_.value_ = value;
}
inline void GCAttributesToClientPacket_Attribute::set_value(int32_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:network.GCAttributesToClientPacket.Attribute.value)
}

// -------------------------------------------------------------------

// GCAttributesToClientPacket

// uint32 item_type = 1;
inline void GCAttributesToClientPacket::clear_item_type() {
  _impl_.item_type_ = 0u;
}
inline uint32_t GCAttributesToClientPacket::_internal_item_type() const {
  return _impl_.item_type_;
}
inline uint32_t GCAttributesToClientPacket::item_type() const {
  // @@protoc_insertion_point(field_get:network.GCAttributesToClientPacket.item_type)
  return _internal_item_type();
}
inline void GCAttributesToClientPacket::_internal_set_item_type(uint32_t value) {
  
  _impl_.item_type_ = value;
}
inline void GCAttributesToClientPacket::set_item_type(uint32_t value) {
  _internal_set_item_type(value);
  // @@protoc_insertion_point(field_set:network.GCAttributesToClientPacket.item_type)
}

// sint32 item_sub_type = 2;
inline void GCAttributesToClientPacket::clear_item_sub_type() {
  _impl_.item_sub_type_ = 0;
}
inline int32_t GCAttributesToClientPacket::_internal_item_sub_type() const {
  return _impl_.item_sub_type_;
}
inline int32_t GCAttributesToClientPacket::item_sub_type() const {
  // @@protoc_insertion_point(field_get:network.GCAttributesToClientPacket.item_sub_type)
  return _internal_item_sub_type();
}
inline void GCAttributesToClientPacket::_internal_set_item_sub_type(int32_t value) {
  
  _impl_.item_sub_type_ = value;
}
inline void GCAttributesToClientPacket::set_item_sub_type(int32_t value) {
  _internal_set_item_sub_type(value);
  // @@protoc_insertion_point(field_set:network.GCAttributesToClientPacket.item_sub_type)
}

// repeated .network.GCAttributesToClientPacket.Attribute attrs = 3;
inline int GCAttributesToClientPacket::_internal_attrs_size() const {
  return _impl_.attrs_.size();
}
inline int GCAttributesToClientPacket::attrs_size() const {
  return _internal_attrs_size();
}
inline void GCAttributesToClientPacket::clear_attrs() {
  _impl_.attrs_.Clear();
}
inline ::network::GCAttributesToClientPacket_Attribute* GCAttributesToClientPacket::mutable_attrs(int index) {
  // @@protoc_insertion_point(field_mutable:network.GCAttributesToClientPacket.attrs)
  return _impl_.attrs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::GCAttributesToClientPacket_Attribute >*
GCAttributesToClientPacket::mutable_attrs() {
  // @@protoc_insertion_point(field_mutable_list:network.GCAttributesToClientPacket.attrs)
  return &_impl_.attrs_;
}
inline const ::network::GCAttributesToClientPacket_Attribute& GCAttributesToClientPacket::_internal_attrs(int index) const {
  return _impl_.attrs_.Get(index);
}
inline const ::network::GCAttributesToClientPacket_Attribute& GCAttributesToClientPacket::attrs(int index) const {
  // @@protoc_insertion_point(field_get:network.GCAttributesToClientPacket.attrs)
  return _internal_attrs(index);
}
inline ::network::GCAttributesToClientPacket_Attribute* GCAttributesToClientPacket::_internal_add_attrs() {
  return _impl_.attrs_.Add();
}
inline ::network::GCAttributesToClientPacket_Attribute* GCAttributesToClientPacket::add_attrs() {
  ::network::GCAttributesToClientPacket_Attribute* _add = _internal_add_attrs();
  // @@protoc_insertion_point(field_add:network.GCAttributesToClientPacket.attrs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::GCAttributesToClientPacket_Attribute >&
GCAttributesToClientPacket::attrs() const {
  // @@protoc_insertion_point(field_list:network.GCAttributesToClientPacket.attrs)
  return _impl_.attrs_;
}

// -------------------------------------------------------------------

// GCHorseRefineInfoPacket

// uint32 refine_index = 1;
inline void GCHorseRefineInfoPacket::clear_refine_index() {
  _impl_.refine_index_ = 0u;
}
inline uint32_t GCHorseRefineInfoPacket::_internal_refine_index() const {
  return _impl_.refine_index_;
}
inline uint32_t GCHorseRefineInfoPacket::refine_index() const {
  // @@protoc_insertion_point(field_get:network.GCHorseRefineInfoPacket.refine_index)
  return _internal_refine_index();
}
inline void GCHorseRefineInfoPacket::_internal_set_refine_index(uint32_t value) {
  
  _impl_.refine_index_ = value;
}
inline void GCHorseRefineInfoPacket::set_refine_index(uint32_t value) {
  _internal_set_refine_index(value);
  // @@protoc_insertion_point(field_set:network.GCHorseRefineInfoPacket.refine_index)
}

// uint32 current_level = 2;
inline void GCHorseRefineInfoPacket::clear_current_level() {
  _impl_.current_level_ = 0u;
}
inline uint32_t GCHorseRefineInfoPacket::_internal_current_level() const {
  return _impl_.current_level_;
}
inline uint32_t GCHorseRefineInfoPacket::current_level() const {
  // @@protoc_insertion_point(field_get:network.GCHorseRefineInfoPacket.current_level)
  return _internal_current_level();
}
inline void GCHorseRefineInfoPacket::_internal_set_current_level(uint32_t value) {
  
  _impl_.current_level_ = value;
}
inline void GCHorseRefineInfoPacket::set_current_level(uint32_t value) {
  _internal_set_current_level(value);
  // @@protoc_insertion_point(field_set:network.GCHorseRefineInfoPacket.current_level)
}

// .network.TRefineTable refine = 3;
inline bool GCHorseRefineInfoPacket::_internal_has_refine() const {
  return this != internal_default_instance() && _impl_.refine_ != nullptr;
}
inline bool GCHorseRefineInfoPacket::has_refine() const {
  return _internal_has_refine();
}
inline const ::network::TRefineTable& GCHorseRefineInfoPacket::_internal_refine() const {
  const ::network::TRefineTable* p = _impl_.refine_;
  return p != nullptr ? *p : reinterpret_cast<const ::network::TRefineTable&>(
      ::network::_TRefineTable_default_instance_);
}
inline const ::network::TRefineTable& GCHorseRefineInfoPacket::refine() const {
  // @@protoc_insertion_point(field_get:network.GCHorseRefineInfoPacket.refine)
  return _internal_refine();
}
inline void GCHorseRefineInfoPacket::unsafe_arena_set_allocated_refine(
    ::network::TRefineTable* refine) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.refine_);
  }
  _impl_.refine_ = refine;
  if (refine) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:network.GCHorseRefineInfoPacket.refine)
}
inline ::network::TRefineTable* GCHorseRefineInfoPacket::release_refine() {
  
  ::network::TRefineTable* temp = _impl_.refine_;
  _impl_.refine_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::network::TRefineTable* GCHorseRefineInfoPacket::unsafe_arena_release_refine() {
  // @@protoc_insertion_point(field_release:network.GCHorseRefineInfoPacket.refine)
  
  ::network::TRefineTable* temp = _impl_.refine_;
  _impl_.refine_ = nullptr;
  return temp;
}
inline ::network::TRefineTable* GCHorseRefineInfoPacket::_internal_mutable_refine() {
  
  if (_impl_.refine_ == nullptr) {
    auto* p = CreateMaybeMessage<::network::TRefineTable>(GetArenaForAllocation());
    _impl_.refine_ = p;
  }
  return _impl_.refine_;
}
inline ::network::TRefineTable* GCHorseRefineInfoPacket::mutable_refine() {
  ::network::TRefineTable* _msg = _internal_mutable_refine();
  // @@protoc_insertion_point(field_mutable:network.GCHorseRefineInfoPacket.refine)
  return _msg;
}
inline void GCHorseRefineInfoPacket::set_allocated_refine(::network::TRefineTable* refine) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.refine_);
  }
  if (refine) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(refine));
    if (message_arena != submessage_arena) {
      refine = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, refine, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.refine_ = refine;
  // @@protoc_insertion_point(field_set_allocated:network.GCHorseRefineInfoPacket.refine)
}

// -------------------------------------------------------------------

// GCHorseRefineResultPacket

// bool success = 1;
inline void GCHorseRefineResultPacket::clear_success() {
  _impl_.success_ = false;
}
inline bool GCHorseRefineResultPacket::_internal_success() const {
  return _impl_.success_;
}
inline bool GCHorseRefineResultPacket::success() const {
  // @@protoc_insertion_point(field_get:network.GCHorseRefineResultPacket.success)
  return _internal_success();
}
inline void GCHorseRefineResultPacket::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void GCHorseRefineResultPacket::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:network.GCHorseRefineResultPacket.success)
}

// -------------------------------------------------------------------

// GCGayaShopOpenPacket

// repeated .network.TGayaShopData datas = 1;
inline int GCGayaShopOpenPacket::_internal_datas_size() const {
  return _impl_.datas_.size();
}
inline int GCGayaShopOpenPacket::datas_size() const {
  return _internal_datas_size();
}
inline ::network::TGayaShopData* GCGayaShopOpenPacket::mutable_datas(int index) {
  // @@protoc_insertion_point(field_mutable:network.GCGayaShopOpenPacket.datas)
  return _impl_.datas_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TGayaShopData >*
GCGayaShopOpenPacket::mutable_datas() {
  // @@protoc_insertion_point(field_mutable_list:network.GCGayaShopOpenPacket.datas)
  return &_impl_.datas_;
}
inline const ::network::TGayaShopData& GCGayaShopOpenPacket::_internal_datas(int index) const {
  return _impl_.datas_.Get(index);
}
inline const ::network::TGayaShopData& GCGayaShopOpenPacket::datas(int index) const {
  // @@protoc_insertion_point(field_get:network.GCGayaShopOpenPacket.datas)
  return _internal_datas(index);
}
inline ::network::TGayaShopData* GCGayaShopOpenPacket::_internal_add_datas() {
  return _impl_.datas_.Add();
}
inline ::network::TGayaShopData* GCGayaShopOpenPacket::add_datas() {
  ::network::TGayaShopData* _add = _internal_add_datas();
  // @@protoc_insertion_point(field_add:network.GCGayaShopOpenPacket.datas)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TGayaShopData >&
GCGayaShopOpenPacket::datas() const {
  // @@protoc_insertion_point(field_list:network.GCGayaShopOpenPacket.datas)
  return _impl_.datas_;
}

// -------------------------------------------------------------------

// GCBattlepassDataPacket

// uint32 index = 1;
inline void GCBattlepassDataPacket::clear_index() {
  _impl_.index_ = 0u;
}
inline uint32_t GCBattlepassDataPacket::_internal_index() const {
  return _impl_.index_;
}
inline uint32_t GCBattlepassDataPacket::index() const {
  // @@protoc_insertion_point(field_get:network.GCBattlepassDataPacket.index)
  return _internal_index();
}
inline void GCBattlepassDataPacket::_internal_set_index(uint32_t value) {
  
  _impl_.index_ = value;
}
inline void GCBattlepassDataPacket::set_index(uint32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:network.GCBattlepassDataPacket.index)
}

// .network.TBattlepassData data = 2;
inline bool GCBattlepassDataPacket::_internal_has_data() const {
  return this != internal_default_instance() && _impl_.data_ != nullptr;
}
inline bool GCBattlepassDataPacket::has_data() const {
  return _internal_has_data();
}
inline const ::network::TBattlepassData& GCBattlepassDataPacket::_internal_data() const {
  const ::network::TBattlepassData* p = _impl_.data_;
  return p != nullptr ? *p : reinterpret_cast<const ::network::TBattlepassData&>(
      ::network::_TBattlepassData_default_instance_);
}
inline const ::network::TBattlepassData& GCBattlepassDataPacket::data() const {
  // @@protoc_insertion_point(field_get:network.GCBattlepassDataPacket.data)
  return _internal_data();
}
inline void GCBattlepassDataPacket::unsafe_arena_set_allocated_data(
    ::network::TBattlepassData* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.data_);
  }
  _impl_.data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:network.GCBattlepassDataPacket.data)
}
inline ::network::TBattlepassData* GCBattlepassDataPacket::release_data() {
  
  ::network::TBattlepassData* temp = _impl_.data_;
  _impl_.data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::network::TBattlepassData* GCBattlepassDataPacket::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:network.GCBattlepassDataPacket.data)
  
  ::network::TBattlepassData* temp = _impl_.data_;
  _impl_.data_ = nullptr;
  return temp;
}
inline ::network::TBattlepassData* GCBattlepassDataPacket::_internal_mutable_data() {
  
  if (_impl_.data_ == nullptr) {
    auto* p = CreateMaybeMessage<::network::TBattlepassData>(GetArenaForAllocation());
    _impl_.data_ = p;
  }
  return _impl_.data_;
}
inline ::network::TBattlepassData* GCBattlepassDataPacket::mutable_data() {
  ::network::TBattlepassData* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:network.GCBattlepassDataPacket.data)
  return _msg;
}
inline void GCBattlepassDataPacket::set_allocated_data(::network::TBattlepassData* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.data_);
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data));
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.data_ = data;
  // @@protoc_insertion_point(field_set_allocated:network.GCBattlepassDataPacket.data)
}

// -------------------------------------------------------------------

// GCCrystalRefinePacket

// .network.TItemPos crystal_cell = 1;
inline bool GCCrystalRefinePacket::_internal_has_crystal_cell() const {
  return this != internal_default_instance() && _impl_.crystal_cell_ != nullptr;
}
inline bool GCCrystalRefinePacket::has_crystal_cell() const {
  return _internal_has_crystal_cell();
}
inline const ::network::TItemPos& GCCrystalRefinePacket::_internal_crystal_cell() const {
  const ::network::TItemPos* p = _impl_.crystal_cell_;
  return p != nullptr ? *p : reinterpret_cast<const ::network::TItemPos&>(
      ::network::_TItemPos_default_instance_);
}
inline const ::network::TItemPos& GCCrystalRefinePacket::crystal_cell() const {
  // @@protoc_insertion_point(field_get:network.GCCrystalRefinePacket.crystal_cell)
  return _internal_crystal_cell();
}
inline void GCCrystalRefinePacket::unsafe_arena_set_allocated_crystal_cell(
    ::network::TItemPos* crystal_cell) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.crystal_cell_);
  }
  _impl_.crystal_cell_ = crystal_cell;
  if (crystal_cell) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:network.GCCrystalRefinePacket.crystal_cell)
}
inline ::network::TItemPos* GCCrystalRefinePacket::release_crystal_cell() {
  
  ::network::TItemPos* temp = _impl_.crystal_cell_;
  _impl_.crystal_cell_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::network::TItemPos* GCCrystalRefinePacket::unsafe_arena_release_crystal_cell() {
  // @@protoc_insertion_point(field_release:network.GCCrystalRefinePacket.crystal_cell)
  
  ::network::TItemPos* temp = _impl_.crystal_cell_;
  _impl_.crystal_cell_ = nullptr;
  return temp;
}
inline ::network::TItemPos* GCCrystalRefinePacket::_internal_mutable_crystal_cell() {
  
  if (_impl_.crystal_cell_ == nullptr) {
    auto* p = CreateMaybeMessage<::network::TItemPos>(GetArenaForAllocation());
    _impl_.crystal_cell_ = p;
  }
  return _impl_.crystal_cell_;
}
inline ::network::TItemPos* GCCrystalRefinePacket::mutable_crystal_cell() {
  ::network::TItemPos* _msg = _internal_mutable_crystal_cell();
  // @@protoc_insertion_point(field_mutable:network.GCCrystalRefinePacket.crystal_cell)
  return _msg;
}
inline void GCCrystalRefinePacket::set_allocated_crystal_cell(::network::TItemPos* crystal_cell) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.crystal_cell_);
  }
  if (crystal_cell) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(crystal_cell));
    if (message_arena != submessage_arena) {
      crystal_cell = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, crystal_cell, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.crystal_cell_ = crystal_cell;
  // @@protoc_insertion_point(field_set_allocated:network.GCCrystalRefinePacket.crystal_cell)
}

// .network.TItemPos scroll_cell = 2;
inline bool GCCrystalRefinePacket::_internal_has_scroll_cell() const {
  return this != internal_default_instance() && _impl_.scroll_cell_ != nullptr;
}
inline bool GCCrystalRefinePacket::has_scroll_cell() const {
  return _internal_has_scroll_cell();
}
inline const ::network::TItemPos& GCCrystalRefinePacket::_internal_scroll_cell() const {
  const ::network::TItemPos* p = _impl_.scroll_cell_;
  return p != nullptr ? *p : reinterpret_cast<const ::network::TItemPos&>(
      ::network::_TItemPos_default_instance_);
}
inline const ::network::TItemPos& GCCrystalRefinePacket::scroll_cell() const {
  // @@protoc_insertion_point(field_get:network.GCCrystalRefinePacket.scroll_cell)
  return _internal_scroll_cell();
}
inline void GCCrystalRefinePacket::unsafe_arena_set_allocated_scroll_cell(
    ::network::TItemPos* scroll_cell) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.scroll_cell_);
  }
  _impl_.scroll_cell_ = scroll_cell;
  if (scroll_cell) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:network.GCCrystalRefinePacket.scroll_cell)
}
inline ::network::TItemPos* GCCrystalRefinePacket::release_scroll_cell() {
  
  ::network::TItemPos* temp = _impl_.scroll_cell_;
  _impl_.scroll_cell_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::network::TItemPos* GCCrystalRefinePacket::unsafe_arena_release_scroll_cell() {
  // @@protoc_insertion_point(field_release:network.GCCrystalRefinePacket.scroll_cell)
  
  ::network::TItemPos* temp = _impl_.scroll_cell_;
  _impl_.scroll_cell_ = nullptr;
  return temp;
}
inline ::network::TItemPos* GCCrystalRefinePacket::_internal_mutable_scroll_cell() {
  
  if (_impl_.scroll_cell_ == nullptr) {
    auto* p = CreateMaybeMessage<::network::TItemPos>(GetArenaForAllocation());
    _impl_.scroll_cell_ = p;
  }
  return _impl_.scroll_cell_;
}
inline ::network::TItemPos* GCCrystalRefinePacket::mutable_scroll_cell() {
  ::network::TItemPos* _msg = _internal_mutable_scroll_cell();
  // @@protoc_insertion_point(field_mutable:network.GCCrystalRefinePacket.scroll_cell)
  return _msg;
}
inline void GCCrystalRefinePacket::set_allocated_scroll_cell(::network::TItemPos* scroll_cell) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.scroll_cell_);
  }
  if (scroll_cell) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scroll_cell));
    if (message_arena != submessage_arena) {
      scroll_cell = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scroll_cell, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.scroll_cell_ = scroll_cell;
  // @@protoc_insertion_point(field_set_allocated:network.GCCrystalRefinePacket.scroll_cell)
}

// uint32 next_clarity_type = 3;
inline void GCCrystalRefinePacket::clear_next_clarity_type() {
  _impl_.next_clarity_type_ = 0u;
}
inline uint32_t GCCrystalRefinePacket::_internal_next_clarity_type() const {
  return _impl_.next_clarity_type_;
}
inline uint32_t GCCrystalRefinePacket::next_clarity_type() const {
  // @@protoc_insertion_point(field_get:network.GCCrystalRefinePacket.next_clarity_type)
  return _internal_next_clarity_type();
}
inline void GCCrystalRefinePacket::_internal_set_next_clarity_type(uint32_t value) {
  
  _impl_.next_clarity_type_ = value;
}
inline void GCCrystalRefinePacket::set_next_clarity_type(uint32_t value) {
  _internal_set_next_clarity_type(value);
  // @@protoc_insertion_point(field_set:network.GCCrystalRefinePacket.next_clarity_type)
}

// uint32 next_clarity_level = 4;
inline void GCCrystalRefinePacket::clear_next_clarity_level() {
  _impl_.next_clarity_level_ = 0u;
}
inline uint32_t GCCrystalRefinePacket::_internal_next_clarity_level() const {
  return _impl_.next_clarity_level_;
}
inline uint32_t GCCrystalRefinePacket::next_clarity_level() const {
  // @@protoc_insertion_point(field_get:network.GCCrystalRefinePacket.next_clarity_level)
  return _internal_next_clarity_level();
}
inline void GCCrystalRefinePacket::_internal_set_next_clarity_level(uint32_t value) {
  
  _impl_.next_clarity_level_ = value;
}
inline void GCCrystalRefinePacket::set_next_clarity_level(uint32_t value) {
  _internal_set_next_clarity_level(value);
  // @@protoc_insertion_point(field_set:network.GCCrystalRefinePacket.next_clarity_level)
}

// repeated .network.TItemAttribute next_attributes = 5;
inline int GCCrystalRefinePacket::_internal_next_attributes_size() const {
  return _impl_.next_attributes_.size();
}
inline int GCCrystalRefinePacket::next_attributes_size() const {
  return _internal_next_attributes_size();
}
inline ::network::TItemAttribute* GCCrystalRefinePacket::mutable_next_attributes(int index) {
  // @@protoc_insertion_point(field_mutable:network.GCCrystalRefinePacket.next_attributes)
  return _impl_.next_attributes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemAttribute >*
GCCrystalRefinePacket::mutable_next_attributes() {
  // @@protoc_insertion_point(field_mutable_list:network.GCCrystalRefinePacket.next_attributes)
  return &_impl_.next_attributes_;
}
inline const ::network::TItemAttribute& GCCrystalRefinePacket::_internal_next_attributes(int index) const {
  return _impl_.next_attributes_.Get(index);
}
inline const ::network::TItemAttribute& GCCrystalRefinePacket::next_attributes(int index) const {
  // @@protoc_insertion_point(field_get:network.GCCrystalRefinePacket.next_attributes)
  return _internal_next_attributes(index);
}
inline ::network::TItemAttribute* GCCrystalRefinePacket::_internal_add_next_attributes() {
  return _impl_.next_attributes_.Add();
}
inline ::network::TItemAttribute* GCCrystalRefinePacket::add_next_attributes() {
  ::network::TItemAttribute* _add = _internal_add_next_attributes();
  // @@protoc_insertion_point(field_add:network.GCCrystalRefinePacket.next_attributes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemAttribute >&
GCCrystalRefinePacket::next_attributes() const {
  // @@protoc_insertion_point(field_list:network.GCCrystalRefinePacket.next_attributes)
  return _impl_.next_attributes_;
}

// uint32 required_fragments = 6;
inline void GCCrystalRefinePacket::clear_required_fragments() {
  _impl_.required_fragments_ = 0u;
}
inline uint32_t GCCrystalRefinePacket::_internal_required_fragments() const {
  return _impl_.required_fragments_;
}
inline uint32_t GCCrystalRefinePacket::required_fragments() const {
  // @@protoc_insertion_point(field_get:network.GCCrystalRefinePacket.required_fragments)
  return _internal_required_fragments();
}
inline void GCCrystalRefinePacket::_internal_set_required_fragments(uint32_t value) {
  
  _impl_.required_fragments_ = value;
}
inline void GCCrystalRefinePacket::set_required_fragments(uint32_t value) {
  _internal_set_required_fragments(value);
  // @@protoc_insertion_point(field_set:network.GCCrystalRefinePacket.required_fragments)
}

// -------------------------------------------------------------------

// GCCrystalUsingSlotPacket

// .network.TItemPos cell = 1;
inline bool GCCrystalUsingSlotPacket::_internal_has_cell() const {
  return this != internal_default_instance() && _impl_.cell_ != nullptr;
}
inline bool GCCrystalUsingSlotPacket::has_cell() const {
  return _internal_has_cell();
}
inline const ::network::TItemPos& GCCrystalUsingSlotPacket::_internal_cell() const {
  const ::network::TItemPos* p = _impl_.cell_;
  return p != nullptr ? *p : reinterpret_cast<const ::network::TItemPos&>(
      ::network::_TItemPos_default_instance_);
}
inline const ::network::TItemPos& GCCrystalUsingSlotPacket::cell() const {
  // @@protoc_insertion_point(field_get:network.GCCrystalUsingSlotPacket.cell)
  return _internal_cell();
}
inline void GCCrystalUsingSlotPacket::unsafe_arena_set_allocated_cell(
    ::network::TItemPos* cell) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cell_);
  }
  _impl_.cell_ = cell;
  if (cell) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:network.GCCrystalUsingSlotPacket.cell)
}
inline ::network::TItemPos* GCCrystalUsingSlotPacket::release_cell() {
  
  ::network::TItemPos* temp = _impl_.cell_;
  _impl_.cell_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::network::TItemPos* GCCrystalUsingSlotPacket::unsafe_arena_release_cell() {
  // @@protoc_insertion_point(field_release:network.GCCrystalUsingSlotPacket.cell)
  
  ::network::TItemPos* temp = _impl_.cell_;
  _impl_.cell_ = nullptr;
  return temp;
}
inline ::network::TItemPos* GCCrystalUsingSlotPacket::_internal_mutable_cell() {
  
  if (_impl_.cell_ == nullptr) {
    auto* p = CreateMaybeMessage<::network::TItemPos>(GetArenaForAllocation());
    _impl_.cell_ = p;
  }
  return _impl_.cell_;
}
inline ::network::TItemPos* GCCrystalUsingSlotPacket::mutable_cell() {
  ::network::TItemPos* _msg = _internal_mutable_cell();
  // @@protoc_insertion_point(field_mutable:network.GCCrystalUsingSlotPacket.cell)
  return _msg;
}
inline void GCCrystalUsingSlotPacket::set_allocated_cell(::network::TItemPos* cell) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cell_);
  }
  if (cell) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cell));
    if (message_arena != submessage_arena) {
      cell = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cell, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.cell_ = cell;
  // @@protoc_insertion_point(field_set_allocated:network.GCCrystalUsingSlotPacket.cell)
}

// bool active = 2;
inline void GCCrystalUsingSlotPacket::clear_active() {
  _impl_.active_ = false;
}
inline bool GCCrystalUsingSlotPacket::_internal_active() const {
  return _impl_.active_;
}
inline bool GCCrystalUsingSlotPacket::active() const {
  // @@protoc_insertion_point(field_get:network.GCCrystalUsingSlotPacket.active)
  return _internal_active();
}
inline void GCCrystalUsingSlotPacket::_internal_set_active(bool value) {
  
  _impl_.active_ = value;
}
inline void GCCrystalUsingSlotPacket::set_active(bool value) {
  _internal_set_active(value);
  // @@protoc_insertion_point(field_set:network.GCCrystalUsingSlotPacket.active)
}

// -------------------------------------------------------------------

// GCAuctionOwnedGoldPacket

// uint64 gold = 1;
inline void GCAuctionOwnedGoldPacket::clear_gold() {
  _impl_.gold_ = uint64_t{0u};
}
inline uint64_t GCAuctionOwnedGoldPacket::_internal_gold() const {
  return _impl_.gold_;
}
inline uint64_t GCAuctionOwnedGoldPacket::gold() const {
  // @@protoc_insertion_point(field_get:network.GCAuctionOwnedGoldPacket.gold)
  return _internal_gold();
}
inline void GCAuctionOwnedGoldPacket::_internal_set_gold(uint64_t value) {
  
  _impl_.gold_ = value;
}
inline void GCAuctionOwnedGoldPacket::set_gold(uint64_t value) {
  _internal_set_gold(value);
  // @@protoc_insertion_point(field_set:network.GCAuctionOwnedGoldPacket.gold)
}

// -------------------------------------------------------------------

// GCAuctionOwnedItemPacket

// .network.TShopItemTable item = 1;
inline bool GCAuctionOwnedItemPacket::_internal_has_item() const {
  return this != internal_default_instance() && _impl_.item_ != nullptr;
}
inline bool GCAuctionOwnedItemPacket::has_item() const {
  return _internal_has_item();
}
inline const ::network::TShopItemTable& GCAuctionOwnedItemPacket::_internal_item() const {
  const ::network::TShopItemTable* p = _impl_.item_;
  return p != nullptr ? *p : reinterpret_cast<const ::network::TShopItemTable&>(
      ::network::_TShopItemTable_default_instance_);
}
inline const ::network::TShopItemTable& GCAuctionOwnedItemPacket::item() const {
  // @@protoc_insertion_point(field_get:network.GCAuctionOwnedItemPacket.item)
  return _internal_item();
}
inline void GCAuctionOwnedItemPacket::unsafe_arena_set_allocated_item(
    ::network::TShopItemTable* item) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.item_);
  }
  _impl_.item_ = item;
  if (item) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:network.GCAuctionOwnedItemPacket.item)
}
inline ::network::TShopItemTable* GCAuctionOwnedItemPacket::release_item() {
  
  ::network::TShopItemTable* temp = _impl_.item_;
  _impl_.item_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::network::TShopItemTable* GCAuctionOwnedItemPacket::unsafe_arena_release_item() {
  // @@protoc_insertion_point(field_release:network.GCAuctionOwnedItemPacket.item)
  
  ::network::TShopItemTable* temp = _impl_.item_;
  _impl_.item_ = nullptr;
  return temp;
}
inline ::network::TShopItemTable* GCAuctionOwnedItemPacket::_internal_mutable_item() {
  
  if (_impl_.item_ == nullptr) {
    auto* p = CreateMaybeMessage<::network::TShopItemTable>(GetArenaForAllocation());
    _impl_.item_ = p;
  }
  return _impl_.item_;
}
inline ::network::TShopItemTable* GCAuctionOwnedItemPacket::mutable_item() {
  ::network::TShopItemTable* _msg = _internal_mutable_item();
  // @@protoc_insertion_point(field_mutable:network.GCAuctionOwnedItemPacket.item)
  return _msg;
}
inline void GCAuctionOwnedItemPacket::set_allocated_item(::network::TShopItemTable* item) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.item_);
  }
  if (item) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(item));
    if (message_arena != submessage_arena) {
      item = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, item, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.item_ = item;
  // @@protoc_insertion_point(field_set_allocated:network.GCAuctionOwnedItemPacket.item)
}

// -------------------------------------------------------------------

// GCAuctionSearchResultPacket

// sint32 page = 1;
inline void GCAuctionSearchResultPacket::clear_page() {
  _impl_.page_ = 0;
}
inline int32_t GCAuctionSearchResultPacket::_internal_page() const {
  return _impl_.page_;
}
inline int32_t GCAuctionSearchResultPacket::page() const {
  // @@protoc_insertion_point(field_get:network.GCAuctionSearchResultPacket.page)
  return _internal_page();
}
inline void GCAuctionSearchResultPacket::_internal_set_page(int32_t value) {
  
  _impl_.page_ = value;
}
inline void GCAuctionSearchResultPacket::set_page(int32_t value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:network.GCAuctionSearchResultPacket.page)
}

// sint32 max_page = 2;
inline void GCAuctionSearchResultPacket::clear_max_page() {
  _impl_.max_page_ = 0;
}
inline int32_t GCAuctionSearchResultPacket::_internal_max_page() const {
  return _impl_.max_page_;
}
inline int32_t GCAuctionSearchResultPacket::max_page() const {
  // @@protoc_insertion_point(field_get:network.GCAuctionSearchResultPacket.max_page)
  return _internal_max_page();
}
inline void GCAuctionSearchResultPacket::_internal_set_max_page(int32_t value) {
  
  _impl_.max_page_ = value;
}
inline void GCAuctionSearchResultPacket::set_max_page(int32_t value) {
  _internal_set_max_page(value);
  // @@protoc_insertion_point(field_set:network.GCAuctionSearchResultPacket.max_page)
}

// repeated .network.TShopItemTable items = 3;
inline int GCAuctionSearchResultPacket::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int GCAuctionSearchResultPacket::items_size() const {
  return _internal_items_size();
}
inline ::network::TShopItemTable* GCAuctionSearchResultPacket::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:network.GCAuctionSearchResultPacket.items)
  return _impl_.items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TShopItemTable >*
GCAuctionSearchResultPacket::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:network.GCAuctionSearchResultPacket.items)
  return &_impl_.items_;
}
inline const ::network::TShopItemTable& GCAuctionSearchResultPacket::_internal_items(int index) const {
  return _impl_.items_.Get(index);
}
inline const ::network::TShopItemTable& GCAuctionSearchResultPacket::items(int index) const {
  // @@protoc_insertion_point(field_get:network.GCAuctionSearchResultPacket.items)
  return _internal_items(index);
}
inline ::network::TShopItemTable* GCAuctionSearchResultPacket::_internal_add_items() {
  return _impl_.items_.Add();
}
inline ::network::TShopItemTable* GCAuctionSearchResultPacket::add_items() {
  ::network::TShopItemTable* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:network.GCAuctionSearchResultPacket.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TShopItemTable >&
GCAuctionSearchResultPacket::items() const {
  // @@protoc_insertion_point(field_list:network.GCAuctionSearchResultPacket.items)
  return _impl_.items_;
}

// -------------------------------------------------------------------

// GCAuctionMessagePacket

// string message = 1;
inline void GCAuctionMessagePacket::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& GCAuctionMessagePacket::message() const {
  // @@protoc_insertion_point(field_get:network.GCAuctionMessagePacket.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GCAuctionMessagePacket::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GCAuctionMessagePacket.message)
}
inline std::string* GCAuctionMessagePacket::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:network.GCAuctionMessagePacket.message)
  return _s;
}
inline const std::string& GCAuctionMessagePacket::_internal_message() const {
  return _impl_.message_.Get();
}
inline void GCAuctionMessagePacket::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* GCAuctionMessagePacket::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* GCAuctionMessagePacket::release_message() {
  // @@protoc_insertion_point(field_release:network.GCAuctionMessagePacket.message)
  return _impl_.message_.Release();
}
inline void GCAuctionMessagePacket::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GCAuctionMessagePacket.message)
}

// -------------------------------------------------------------------

// GCAuctionShopOwnedPacket

// bool owned = 1;
inline void GCAuctionShopOwnedPacket::clear_owned() {
  _impl_.owned_ = false;
}
inline bool GCAuctionShopOwnedPacket::_internal_owned() const {
  return _impl_.owned_;
}
inline bool GCAuctionShopOwnedPacket::owned() const {
  // @@protoc_insertion_point(field_get:network.GCAuctionShopOwnedPacket.owned)
  return _internal_owned();
}
inline void GCAuctionShopOwnedPacket::_internal_set_owned(bool value) {
  
  _impl_.owned_ = value;
}
inline void GCAuctionShopOwnedPacket::set_owned(bool value) {
  _internal_set_owned(value);
  // @@protoc_insertion_point(field_set:network.GCAuctionShopOwnedPacket.owned)
}

// -------------------------------------------------------------------

// GCAuctionShopPacket

// string name = 1;
inline void GCAuctionShopPacket::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GCAuctionShopPacket::name() const {
  // @@protoc_insertion_point(field_get:network.GCAuctionShopPacket.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GCAuctionShopPacket::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GCAuctionShopPacket.name)
}
inline std::string* GCAuctionShopPacket::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:network.GCAuctionShopPacket.name)
  return _s;
}
inline const std::string& GCAuctionShopPacket::_internal_name() const {
  return _impl_.name_.Get();
}
inline void GCAuctionShopPacket::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* GCAuctionShopPacket::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* GCAuctionShopPacket::release_name() {
  // @@protoc_insertion_point(field_release:network.GCAuctionShopPacket.name)
  return _impl_.name_.Release();
}
inline void GCAuctionShopPacket::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GCAuctionShopPacket.name)
}

// uint32 timeout = 2;
inline void GCAuctionShopPacket::clear_timeout() {
  _impl_.timeout_ = 0u;
}
inline uint32_t GCAuctionShopPacket::_internal_timeout() const {
  return _impl_.timeout_;
}
inline uint32_t GCAuctionShopPacket::timeout() const {
  // @@protoc_insertion_point(field_get:network.GCAuctionShopPacket.timeout)
  return _internal_timeout();
}
inline void GCAuctionShopPacket::_internal_set_timeout(uint32_t value) {
  
  _impl_.timeout_ = value;
}
inline void GCAuctionShopPacket::set_timeout(uint32_t value) {
  _internal_set_timeout(value);
  // @@protoc_insertion_point(field_set:network.GCAuctionShopPacket.timeout)
}

// uint64 gold = 3;
inline void GCAuctionShopPacket::clear_gold() {
  _impl_.gold_ = uint64_t{0u};
}
inline uint64_t GCAuctionShopPacket::_internal_gold() const {
  return _impl_.gold_;
}
inline uint64_t GCAuctionShopPacket::gold() const {
  // @@protoc_insertion_point(field_get:network.GCAuctionShopPacket.gold)
  return _internal_gold();
}
inline void GCAuctionShopPacket::_internal_set_gold(uint64_t value) {
  
  _impl_.gold_ = value;
}
inline void GCAuctionShopPacket::set_gold(uint64_t value) {
  _internal_set_gold(value);
  // @@protoc_insertion_point(field_set:network.GCAuctionShopPacket.gold)
}

// repeated .network.TItemData items = 4;
inline int GCAuctionShopPacket::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int GCAuctionShopPacket::items_size() const {
  return _internal_items_size();
}
inline ::network::TItemData* GCAuctionShopPacket::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:network.GCAuctionShopPacket.items)
  return _impl_.items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemData >*
GCAuctionShopPacket::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:network.GCAuctionShopPacket.items)
  return &_impl_.items_;
}
inline const ::network::TItemData& GCAuctionShopPacket::_internal_items(int index) const {
  return _impl_.items_.Get(index);
}
inline const ::network::TItemData& GCAuctionShopPacket::items(int index) const {
  // @@protoc_insertion_point(field_get:network.GCAuctionShopPacket.items)
  return _internal_items(index);
}
inline ::network::TItemData* GCAuctionShopPacket::_internal_add_items() {
  return _impl_.items_.Add();
}
inline ::network::TItemData* GCAuctionShopPacket::add_items() {
  ::network::TItemData* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:network.GCAuctionShopPacket.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemData >&
GCAuctionShopPacket::items() const {
  // @@protoc_insertion_point(field_list:network.GCAuctionShopPacket.items)
  return _impl_.items_;
}

// -------------------------------------------------------------------

// GCAuctionShopGoldPacket

// uint64 gold = 1;
inline void GCAuctionShopGoldPacket::clear_gold() {
  _impl_.gold_ = uint64_t{0u};
}
inline uint64_t GCAuctionShopGoldPacket::_internal_gold() const {
  return _impl_.gold_;
}
inline uint64_t GCAuctionShopGoldPacket::gold() const {
  // @@protoc_insertion_point(field_get:network.GCAuctionShopGoldPacket.gold)
  return _internal_gold();
}
inline void GCAuctionShopGoldPacket::_internal_set_gold(uint64_t value) {
  
  _impl_.gold_ = value;
}
inline void GCAuctionShopGoldPacket::set_gold(uint64_t value) {
  _internal_set_gold(value);
  // @@protoc_insertion_point(field_set:network.GCAuctionShopGoldPacket.gold)
}

// -------------------------------------------------------------------

// GCAuctionShopTimeoutPacket

// uint32 timeout = 1;
inline void GCAuctionShopTimeoutPacket::clear_timeout() {
  _impl_.timeout_ = 0u;
}
inline uint32_t GCAuctionShopTimeoutPacket::_internal_timeout() const {
  return _impl_.timeout_;
}
inline uint32_t GCAuctionShopTimeoutPacket::timeout() const {
  // @@protoc_insertion_point(field_get:network.GCAuctionShopTimeoutPacket.timeout)
  return _internal_timeout();
}
inline void GCAuctionShopTimeoutPacket::_internal_set_timeout(uint32_t value) {
  
  _impl_.timeout_ = value;
}
inline void GCAuctionShopTimeoutPacket::set_timeout(uint32_t value) {
  _internal_set_timeout(value);
  // @@protoc_insertion_point(field_set:network.GCAuctionShopTimeoutPacket.timeout)
}

// -------------------------------------------------------------------

// GCAuctionShopGuestOpenPacket

// string name = 1;
inline void GCAuctionShopGuestOpenPacket::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GCAuctionShopGuestOpenPacket::name() const {
  // @@protoc_insertion_point(field_get:network.GCAuctionShopGuestOpenPacket.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GCAuctionShopGuestOpenPacket::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GCAuctionShopGuestOpenPacket.name)
}
inline std::string* GCAuctionShopGuestOpenPacket::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:network.GCAuctionShopGuestOpenPacket.name)
  return _s;
}
inline const std::string& GCAuctionShopGuestOpenPacket::_internal_name() const {
  return _impl_.name_.Get();
}
inline void GCAuctionShopGuestOpenPacket::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* GCAuctionShopGuestOpenPacket::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* GCAuctionShopGuestOpenPacket::release_name() {
  // @@protoc_insertion_point(field_release:network.GCAuctionShopGuestOpenPacket.name)
  return _impl_.name_.Release();
}
inline void GCAuctionShopGuestOpenPacket::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GCAuctionShopGuestOpenPacket.name)
}

// repeated .network.TItemData items = 2;
inline int GCAuctionShopGuestOpenPacket::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int GCAuctionShopGuestOpenPacket::items_size() const {
  return _internal_items_size();
}
inline ::network::TItemData* GCAuctionShopGuestOpenPacket::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:network.GCAuctionShopGuestOpenPacket.items)
  return _impl_.items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemData >*
GCAuctionShopGuestOpenPacket::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:network.GCAuctionShopGuestOpenPacket.items)
  return &_impl_.items_;
}
inline const ::network::TItemData& GCAuctionShopGuestOpenPacket::_internal_items(int index) const {
  return _impl_.items_.Get(index);
}
inline const ::network::TItemData& GCAuctionShopGuestOpenPacket::items(int index) const {
  // @@protoc_insertion_point(field_get:network.GCAuctionShopGuestOpenPacket.items)
  return _internal_items(index);
}
inline ::network::TItemData* GCAuctionShopGuestOpenPacket::_internal_add_items() {
  return _impl_.items_.Add();
}
inline ::network::TItemData* GCAuctionShopGuestOpenPacket::add_items() {
  ::network::TItemData* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:network.GCAuctionShopGuestOpenPacket.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemData >&
GCAuctionShopGuestOpenPacket::items() const {
  // @@protoc_insertion_point(field_list:network.GCAuctionShopGuestOpenPacket.items)
  return _impl_.items_;
}

// -------------------------------------------------------------------

// GCAuctionShopGuestUpdatePacket

// .network.TItemData item = 1;
inline bool GCAuctionShopGuestUpdatePacket::_internal_has_item() const {
  return this != internal_default_instance() && _impl_.item_ != nullptr;
}
inline bool GCAuctionShopGuestUpdatePacket::has_item() const {
  return _internal_has_item();
}
inline const ::network::TItemData& GCAuctionShopGuestUpdatePacket::_internal_item() const {
  const ::network::TItemData* p = _impl_.item_;
  return p != nullptr ? *p : reinterpret_cast<const ::network::TItemData&>(
      ::network::_TItemData_default_instance_);
}
inline const ::network::TItemData& GCAuctionShopGuestUpdatePacket::item() const {
  // @@protoc_insertion_point(field_get:network.GCAuctionShopGuestUpdatePacket.item)
  return _internal_item();
}
inline void GCAuctionShopGuestUpdatePacket::unsafe_arena_set_allocated_item(
    ::network::TItemData* item) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.item_);
  }
  _impl_.item_ = item;
  if (item) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:network.GCAuctionShopGuestUpdatePacket.item)
}
inline ::network::TItemData* GCAuctionShopGuestUpdatePacket::release_item() {
  
  ::network::TItemData* temp = _impl_.item_;
  _impl_.item_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::network::TItemData* GCAuctionShopGuestUpdatePacket::unsafe_arena_release_item() {
  // @@protoc_insertion_point(field_release:network.GCAuctionShopGuestUpdatePacket.item)
  
  ::network::TItemData* temp = _impl_.item_;
  _impl_.item_ = nullptr;
  return temp;
}
inline ::network::TItemData* GCAuctionShopGuestUpdatePacket::_internal_mutable_item() {
  
  if (_impl_.item_ == nullptr) {
    auto* p = CreateMaybeMessage<::network::TItemData>(GetArenaForAllocation());
    _impl_.item_ = p;
  }
  return _impl_.item_;
}
inline ::network::TItemData* GCAuctionShopGuestUpdatePacket::mutable_item() {
  ::network::TItemData* _msg = _internal_mutable_item();
  // @@protoc_insertion_point(field_mutable:network.GCAuctionShopGuestUpdatePacket.item)
  return _msg;
}
inline void GCAuctionShopGuestUpdatePacket::set_allocated_item(::network::TItemData* item) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.item_);
  }
  if (item) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(item));
    if (message_arena != submessage_arena) {
      item = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, item, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.item_ = item;
  // @@protoc_insertion_point(field_set_allocated:network.GCAuctionShopGuestUpdatePacket.item)
}

// -------------------------------------------------------------------

// GCAuctionShopHistoryPacket

// repeated .network.TAuctionShopHistoryElement elems = 1;
inline int GCAuctionShopHistoryPacket::_internal_elems_size() const {
  return _impl_.elems_.size();
}
inline int GCAuctionShopHistoryPacket::elems_size() const {
  return _internal_elems_size();
}
inline ::network::TAuctionShopHistoryElement* GCAuctionShopHistoryPacket::mutable_elems(int index) {
  // @@protoc_insertion_point(field_mutable:network.GCAuctionShopHistoryPacket.elems)
  return _impl_.elems_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TAuctionShopHistoryElement >*
GCAuctionShopHistoryPacket::mutable_elems() {
  // @@protoc_insertion_point(field_mutable_list:network.GCAuctionShopHistoryPacket.elems)
  return &_impl_.elems_;
}
inline const ::network::TAuctionShopHistoryElement& GCAuctionShopHistoryPacket::_internal_elems(int index) const {
  return _impl_.elems_.Get(index);
}
inline const ::network::TAuctionShopHistoryElement& GCAuctionShopHistoryPacket::elems(int index) const {
  // @@protoc_insertion_point(field_get:network.GCAuctionShopHistoryPacket.elems)
  return _internal_elems(index);
}
inline ::network::TAuctionShopHistoryElement* GCAuctionShopHistoryPacket::_internal_add_elems() {
  return _impl_.elems_.Add();
}
inline ::network::TAuctionShopHistoryElement* GCAuctionShopHistoryPacket::add_elems() {
  ::network::TAuctionShopHistoryElement* _add = _internal_add_elems();
  // @@protoc_insertion_point(field_add:network.GCAuctionShopHistoryPacket.elems)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TAuctionShopHistoryElement >&
GCAuctionShopHistoryPacket::elems() const {
  // @@protoc_insertion_point(field_list:network.GCAuctionShopHistoryPacket.elems)
  return _impl_.elems_;
}

// -------------------------------------------------------------------

// GCAuctionAveragePricePacket

// uint32 requestor = 1;
inline void GCAuctionAveragePricePacket::clear_requestor() {
  _impl_.requestor_ = 0u;
}
inline uint32_t GCAuctionAveragePricePacket::_internal_requestor() const {
  return _impl_.requestor_;
}
inline uint32_t GCAuctionAveragePricePacket::requestor() const {
  // @@protoc_insertion_point(field_get:network.GCAuctionAveragePricePacket.requestor)
  return _internal_requestor();
}
inline void GCAuctionAveragePricePacket::_internal_set_requestor(uint32_t value) {
  
  _impl_.requestor_ = value;
}
inline void GCAuctionAveragePricePacket::set_requestor(uint32_t value) {
  _internal_set_requestor(value);
  // @@protoc_insertion_point(field_set:network.GCAuctionAveragePricePacket.requestor)
}

// uint64 price = 2;
inline void GCAuctionAveragePricePacket::clear_price() {
  _impl_.price_ = uint64_t{0u};
}
inline uint64_t GCAuctionAveragePricePacket::_internal_price() const {
  return _impl_.price_;
}
inline uint64_t GCAuctionAveragePricePacket::price() const {
  // @@protoc_insertion_point(field_get:network.GCAuctionAveragePricePacket.price)
  return _internal_price();
}
inline void GCAuctionAveragePricePacket::_internal_set_price(uint64_t value) {
  
  _impl_.price_ = value;
}
inline void GCAuctionAveragePricePacket::set_price(uint64_t value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:network.GCAuctionAveragePricePacket.price)
}

// -------------------------------------------------------------------

// GCMainCharacterPacket

// uint32 vid = 1;
inline void GCMainCharacterPacket::clear_vid() {
  _impl_.vid_ = 0u;
}
inline uint32_t GCMainCharacterPacket::_internal_vid() const {
  return _impl_.vid_;
}
inline uint32_t GCMainCharacterPacket::vid() const {
  // @@protoc_insertion_point(field_get:network.GCMainCharacterPacket.vid)
  return _internal_vid();
}
inline void GCMainCharacterPacket::_internal_set_vid(uint32_t value) {
  
  _impl_.vid_ = value;
}
inline void GCMainCharacterPacket::set_vid(uint32_t value) {
  _internal_set_vid(value);
  // @@protoc_insertion_point(field_set:network.GCMainCharacterPacket.vid)
}

// uint32 race_num = 2;
inline void GCMainCharacterPacket::clear_race_num() {
  _impl_.race_num_ = 0u;
}
inline uint32_t GCMainCharacterPacket::_internal_race_num() const {
  return _impl_.race_num_;
}
inline uint32_t GCMainCharacterPacket::race_num() const {
  // @@protoc_insertion_point(field_get:network.GCMainCharacterPacket.race_num)
  return _internal_race_num();
}
inline void GCMainCharacterPacket::_internal_set_race_num(uint32_t value) {
  
  _impl_.race_num_ = value;
}
inline void GCMainCharacterPacket::set_race_num(uint32_t value) {
  _internal_set_race_num(value);
  // @@protoc_insertion_point(field_set:network.GCMainCharacterPacket.race_num)
}

// bytes chr_name = 3;
inline void GCMainCharacterPacket::clear_chr_name() {
  _impl_.chr_name_.ClearToEmpty();
}
inline const std::string& GCMainCharacterPacket::chr_name() const {
  // @@protoc_insertion_point(field_get:network.GCMainCharacterPacket.chr_name)
  return _internal_chr_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GCMainCharacterPacket::set_chr_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.chr_name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GCMainCharacterPacket.chr_name)
}
inline std::string* GCMainCharacterPacket::mutable_chr_name() {
  std::string* _s = _internal_mutable_chr_name();
  // @@protoc_insertion_point(field_mutable:network.GCMainCharacterPacket.chr_name)
  return _s;
}
inline const std::string& GCMainCharacterPacket::_internal_chr_name() const {
  return _impl_.chr_name_.Get();
}
inline void GCMainCharacterPacket::_internal_set_chr_name(const std::string& value) {
  
  _impl_.chr_name_.Set(value, GetArenaForAllocation());
}
inline std::string* GCMainCharacterPacket::_internal_mutable_chr_name() {
  
  return _impl_.chr_name_.Mutable(GetArenaForAllocation());
}
inline std::string* GCMainCharacterPacket::release_chr_name() {
  // @@protoc_insertion_point(field_release:network.GCMainCharacterPacket.chr_name)
  return _impl_.chr_name_.Release();
}
inline void GCMainCharacterPacket::set_allocated_chr_name(std::string* chr_name) {
  if (chr_name != nullptr) {
    
  } else {
    
  }
  _impl_.chr_name_.SetAllocated(chr_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.chr_name_.IsDefault()) {
    _impl_.chr_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GCMainCharacterPacket.chr_name)
}

// bytes bgm_name = 4;
inline void GCMainCharacterPacket::clear_bgm_name() {
  _impl_.bgm_name_.ClearToEmpty();
}
inline const std::string& GCMainCharacterPacket::bgm_name() const {
  // @@protoc_insertion_point(field_get:network.GCMainCharacterPacket.bgm_name)
  return _internal_bgm_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GCMainCharacterPacket::set_bgm_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.bgm_name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GCMainCharacterPacket.bgm_name)
}
inline std::string* GCMainCharacterPacket::mutable_bgm_name() {
  std::string* _s = _internal_mutable_bgm_name();
  // @@protoc_insertion_point(field_mutable:network.GCMainCharacterPacket.bgm_name)
  return _s;
}
inline const std::string& GCMainCharacterPacket::_internal_bgm_name() const {
  return _impl_.bgm_name_.Get();
}
inline void GCMainCharacterPacket::_internal_set_bgm_name(const std::string& value) {
  
  _impl_.bgm_name_.Set(value, GetArenaForAllocation());
}
inline std::string* GCMainCharacterPacket::_internal_mutable_bgm_name() {
  
  return _impl_.bgm_name_.Mutable(GetArenaForAllocation());
}
inline std::string* GCMainCharacterPacket::release_bgm_name() {
  // @@protoc_insertion_point(field_release:network.GCMainCharacterPacket.bgm_name)
  return _impl_.bgm_name_.Release();
}
inline void GCMainCharacterPacket::set_allocated_bgm_name(std::string* bgm_name) {
  if (bgm_name != nullptr) {
    
  } else {
    
  }
  _impl_.bgm_name_.SetAllocated(bgm_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.bgm_name_.IsDefault()) {
    _impl_.bgm_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GCMainCharacterPacket.bgm_name)
}

// float bgm_vol = 5;
inline void GCMainCharacterPacket::clear_bgm_vol() {
  _impl_.bgm_vol_ = 0;
}
inline float GCMainCharacterPacket::_internal_bgm_vol() const {
  return _impl_.bgm_vol_;
}
inline float GCMainCharacterPacket::bgm_vol() const {
  // @@protoc_insertion_point(field_get:network.GCMainCharacterPacket.bgm_vol)
  return _internal_bgm_vol();
}
inline void GCMainCharacterPacket::_internal_set_bgm_vol(float value) {
  
  _impl_.bgm_vol_ = value;
}
inline void GCMainCharacterPacket::set_bgm_vol(float value) {
  _internal_set_bgm_vol(value);
  // @@protoc_insertion_point(field_set:network.GCMainCharacterPacket.bgm_vol)
}

// int32 x = 6;
inline void GCMainCharacterPacket::clear_x() {
  _impl_.x_ = 0;
}
inline int32_t GCMainCharacterPacket::_internal_x() const {
  return _impl_.x_;
}
inline int32_t GCMainCharacterPacket::x() const {
  // @@protoc_insertion_point(field_get:network.GCMainCharacterPacket.x)
  return _internal_x();
}
inline void GCMainCharacterPacket::_internal_set_x(int32_t value) {
  
  _impl_.x_ = value;
}
inline void GCMainCharacterPacket::set_x(int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:network.GCMainCharacterPacket.x)
}

// int32 y = 7;
inline void GCMainCharacterPacket::clear_y() {
  _impl_.y_ = 0;
}
inline int32_t GCMainCharacterPacket::_internal_y() const {
  return _impl_.y_;
}
inline int32_t GCMainCharacterPacket::y() const {
  // @@protoc_insertion_point(field_get:network.GCMainCharacterPacket.y)
  return _internal_y();
}
inline void GCMainCharacterPacket::_internal_set_y(int32_t value) {
  
  _impl_.y_ = value;
}
inline void GCMainCharacterPacket::set_y(int32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:network.GCMainCharacterPacket.y)
}

// int32 z = 8;
inline void GCMainCharacterPacket::clear_z() {
  _impl_.z_ = 0;
}
inline int32_t GCMainCharacterPacket::_internal_z() const {
  return _impl_.z_;
}
inline int32_t GCMainCharacterPacket::z() const {
  // @@protoc_insertion_point(field_get:network.GCMainCharacterPacket.z)
  return _internal_z();
}
inline void GCMainCharacterPacket::_internal_set_z(int32_t value) {
  
  _impl_.z_ = value;
}
inline void GCMainCharacterPacket::set_z(int32_t value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:network.GCMainCharacterPacket.z)
}

// uint32 empire = 9;
inline void GCMainCharacterPacket::clear_empire() {
  _impl_.empire_ = 0u;
}
inline uint32_t GCMainCharacterPacket::_internal_empire() const {
  return _impl_.empire_;
}
inline uint32_t GCMainCharacterPacket::empire() const {
  // @@protoc_insertion_point(field_get:network.GCMainCharacterPacket.empire)
  return _internal_empire();
}
inline void GCMainCharacterPacket::_internal_set_empire(uint32_t value) {
  
  _impl_.empire_ = value;
}
inline void GCMainCharacterPacket::set_empire(uint32_t value) {
  _internal_set_empire(value);
  // @@protoc_insertion_point(field_set:network.GCMainCharacterPacket.empire)
}

// uint32 skill_group = 10;
inline void GCMainCharacterPacket::clear_skill_group() {
  _impl_.skill_group_ = 0u;
}
inline uint32_t GCMainCharacterPacket::_internal_skill_group() const {
  return _impl_.skill_group_;
}
inline uint32_t GCMainCharacterPacket::skill_group() const {
  // @@protoc_insertion_point(field_get:network.GCMainCharacterPacket.skill_group)
  return _internal_skill_group();
}
inline void GCMainCharacterPacket::_internal_set_skill_group(uint32_t value) {
  
  _impl_.skill_group_ = value;
}
inline void GCMainCharacterPacket::set_skill_group(uint32_t value) {
  _internal_set_skill_group(value);
  // @@protoc_insertion_point(field_set:network.GCMainCharacterPacket.skill_group)
}

// -------------------------------------------------------------------

// GCCharacterAddPacket_AffectColor

// uint32 flag = 1;
inline void GCCharacterAddPacket_AffectColor::clear_flag() {
  _impl_.flag_ = 0u;
}
inline uint32_t GCCharacterAddPacket_AffectColor::_internal_flag() const {
  return _impl_.flag_;
}
inline uint32_t GCCharacterAddPacket_AffectColor::flag() const {
  // @@protoc_insertion_point(field_get:network.GCCharacterAddPacket.AffectColor.flag)
  return _internal_flag();
}
inline void GCCharacterAddPacket_AffectColor::_internal_set_flag(uint32_t value) {
  
  _impl_.flag_ = value;
}
inline void GCCharacterAddPacket_AffectColor::set_flag(uint32_t value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:network.GCCharacterAddPacket.AffectColor.flag)
}

// uint32 color = 2;
inline void GCCharacterAddPacket_AffectColor::clear_color() {
  _impl_.color_ = 0u;
}
inline uint32_t GCCharacterAddPacket_AffectColor::_internal_color() const {
  return _impl_.color_;
}
inline uint32_t GCCharacterAddPacket_AffectColor::color() const {
  // @@protoc_insertion_point(field_get:network.GCCharacterAddPacket.AffectColor.color)
  return _internal_color();
}
inline void GCCharacterAddPacket_AffectColor::_internal_set_color(uint32_t value) {
  
  _impl_.color_ = value;
}
inline void GCCharacterAddPacket_AffectColor::set_color(uint32_t value) {
  _internal_set_color(value);
  // @@protoc_insertion_point(field_set:network.GCCharacterAddPacket.AffectColor.color)
}

// -------------------------------------------------------------------

// GCCharacterAddPacket

// uint32 vid = 1;
inline void GCCharacterAddPacket::clear_vid() {
  _impl_.vid_ = 0u;
}
inline uint32_t GCCharacterAddPacket::_internal_vid() const {
  return _impl_.vid_;
}
inline uint32_t GCCharacterAddPacket::vid() const {
  // @@protoc_insertion_point(field_get:network.GCCharacterAddPacket.vid)
  return _internal_vid();
}
inline void GCCharacterAddPacket::_internal_set_vid(uint32_t value) {
  
  _impl_.vid_ = value;
}
inline void GCCharacterAddPacket::set_vid(uint32_t value) {
  _internal_set_vid(value);
  // @@protoc_insertion_point(field_set:network.GCCharacterAddPacket.vid)
}

// uint32 level = 2;
inline void GCCharacterAddPacket::clear_level() {
  _impl_.level_ = 0u;
}
inline uint32_t GCCharacterAddPacket::_internal_level() const {
  return _impl_.level_;
}
inline uint32_t GCCharacterAddPacket::level() const {
  // @@protoc_insertion_point(field_get:network.GCCharacterAddPacket.level)
  return _internal_level();
}
inline void GCCharacterAddPacket::_internal_set_level(uint32_t value) {
  
  _impl_.level_ = value;
}
inline void GCCharacterAddPacket::set_level(uint32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:network.GCCharacterAddPacket.level)
}

// uint32 ai_flag = 3;
inline void GCCharacterAddPacket::clear_ai_flag() {
  _impl_.ai_flag_ = 0u;
}
inline uint32_t GCCharacterAddPacket::_internal_ai_flag() const {
  return _impl_.ai_flag_;
}
inline uint32_t GCCharacterAddPacket::ai_flag() const {
  // @@protoc_insertion_point(field_get:network.GCCharacterAddPacket.ai_flag)
  return _internal_ai_flag();
}
inline void GCCharacterAddPacket::_internal_set_ai_flag(uint32_t value) {
  
  _impl_.ai_flag_ = value;
}
inline void GCCharacterAddPacket::set_ai_flag(uint32_t value) {
  _internal_set_ai_flag(value);
  // @@protoc_insertion_point(field_set:network.GCCharacterAddPacket.ai_flag)
}

// float angle = 4;
inline void GCCharacterAddPacket::clear_angle() {
  _impl_.angle_ = 0;
}
inline float GCCharacterAddPacket::_internal_angle() const {
  return _impl_.angle_;
}
inline float GCCharacterAddPacket::angle() const {
  // @@protoc_insertion_point(field_get:network.GCCharacterAddPacket.angle)
  return _internal_angle();
}
inline void GCCharacterAddPacket::_internal_set_angle(float value) {
  
  _impl_.angle_ = value;
}
inline void GCCharacterAddPacket::set_angle(float value) {
  _internal_set_angle(value);
  // @@protoc_insertion_point(field_set:network.GCCharacterAddPacket.angle)
}

// int32 x = 5;
inline void GCCharacterAddPacket::clear_x() {
  _impl_.x_ = 0;
}
inline int32_t GCCharacterAddPacket::_internal_x() const {
  return _impl_.x_;
}
inline int32_t GCCharacterAddPacket::x() const {
  // @@protoc_insertion_point(field_get:network.GCCharacterAddPacket.x)
  return _internal_x();
}
inline void GCCharacterAddPacket::_internal_set_x(int32_t value) {
  
  _impl_.x_ = value;
}
inline void GCCharacterAddPacket::set_x(int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:network.GCCharacterAddPacket.x)
}

// int32 y = 6;
inline void GCCharacterAddPacket::clear_y() {
  _impl_.y_ = 0;
}
inline int32_t GCCharacterAddPacket::_internal_y() const {
  return _impl_.y_;
}
inline int32_t GCCharacterAddPacket::y() const {
  // @@protoc_insertion_point(field_get:network.GCCharacterAddPacket.y)
  return _internal_y();
}
inline void GCCharacterAddPacket::_internal_set_y(int32_t value) {
  
  _impl_.y_ = value;
}
inline void GCCharacterAddPacket::set_y(int32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:network.GCCharacterAddPacket.y)
}

// int32 z = 7;
inline void GCCharacterAddPacket::clear_z() {
  _impl_.z_ = 0;
}
inline int32_t GCCharacterAddPacket::_internal_z() const {
  return _impl_.z_;
}
inline int32_t GCCharacterAddPacket::z() const {
  // @@protoc_insertion_point(field_get:network.GCCharacterAddPacket.z)
  return _internal_z();
}
inline void GCCharacterAddPacket::_internal_set_z(int32_t value) {
  
  _impl_.z_ = value;
}
inline void GCCharacterAddPacket::set_z(int32_t value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:network.GCCharacterAddPacket.z)
}

// uint32 type = 8;
inline void GCCharacterAddPacket::clear_type() {
  _impl_.type_ = 0u;
}
inline uint32_t GCCharacterAddPacket::_internal_type() const {
  return _impl_.type_;
}
inline uint32_t GCCharacterAddPacket::type() const {
  // @@protoc_insertion_point(field_get:network.GCCharacterAddPacket.type)
  return _internal_type();
}
inline void GCCharacterAddPacket::_internal_set_type(uint32_t value) {
  
  _impl_.type_ = value;
}
inline void GCCharacterAddPacket::set_type(uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:network.GCCharacterAddPacket.type)
}

// uint32 race_num = 9;
inline void GCCharacterAddPacket::clear_race_num() {
  _impl_.race_num_ = 0u;
}
inline uint32_t GCCharacterAddPacket::_internal_race_num() const {
  return _impl_.race_num_;
}
inline uint32_t GCCharacterAddPacket::race_num() const {
  // @@protoc_insertion_point(field_get:network.GCCharacterAddPacket.race_num)
  return _internal_race_num();
}
inline void GCCharacterAddPacket::_internal_set_race_num(uint32_t value) {
  
  _impl_.race_num_ = value;
}
inline void GCCharacterAddPacket::set_race_num(uint32_t value) {
  _internal_set_race_num(value);
  // @@protoc_insertion_point(field_set:network.GCCharacterAddPacket.race_num)
}

// uint32 moving_speed = 10;
inline void GCCharacterAddPacket::clear_moving_speed() {
  _impl_.moving_speed_ = 0u;
}
inline uint32_t GCCharacterAddPacket::_internal_moving_speed() const {
  return _impl_.moving_speed_;
}
inline uint32_t GCCharacterAddPacket::moving_speed() const {
  // @@protoc_insertion_point(field_get:network.GCCharacterAddPacket.moving_speed)
  return _internal_moving_speed();
}
inline void GCCharacterAddPacket::_internal_set_moving_speed(uint32_t value) {
  
  _impl_.moving_speed_ = value;
}
inline void GCCharacterAddPacket::set_moving_speed(uint32_t value) {
  _internal_set_moving_speed(value);
  // @@protoc_insertion_point(field_set:network.GCCharacterAddPacket.moving_speed)
}

// uint32 attack_speed = 11;
inline void GCCharacterAddPacket::clear_attack_speed() {
  _impl_.attack_speed_ = 0u;
}
inline uint32_t GCCharacterAddPacket::_internal_attack_speed() const {
  return _impl_.attack_speed_;
}
inline uint32_t GCCharacterAddPacket::attack_speed() const {
  // @@protoc_insertion_point(field_get:network.GCCharacterAddPacket.attack_speed)
  return _internal_attack_speed();
}
inline void GCCharacterAddPacket::_internal_set_attack_speed(uint32_t value) {
  
  _impl_.attack_speed_ = value;
}
inline void GCCharacterAddPacket::set_attack_speed(uint32_t value) {
  _internal_set_attack_speed(value);
  // @@protoc_insertion_point(field_set:network.GCCharacterAddPacket.attack_speed)
}

// uint32 state_flag = 12;
inline void GCCharacterAddPacket::clear_state_flag() {
  _impl_.state_flag_ = 0u;
}
inline uint32_t GCCharacterAddPacket::_internal_state_flag() const {
  return _impl_.state_flag_;
}
inline uint32_t GCCharacterAddPacket::state_flag() const {
  // @@protoc_insertion_point(field_get:network.GCCharacterAddPacket.state_flag)
  return _internal_state_flag();
}
inline void GCCharacterAddPacket::_internal_set_state_flag(uint32_t value) {
  
  _impl_.state_flag_ = value;
}
inline void GCCharacterAddPacket::set_state_flag(uint32_t value) {
  _internal_set_state_flag(value);
  // @@protoc_insertion_point(field_set:network.GCCharacterAddPacket.state_flag)
}

// repeated uint32 affect_flags = 13;
inline int GCCharacterAddPacket::_internal_affect_flags_size() const {
  return _impl_.affect_flags_.size();
}
inline int GCCharacterAddPacket::affect_flags_size() const {
  return _internal_affect_flags_size();
}
inline void GCCharacterAddPacket::clear_affect_flags() {
  _impl_.affect_flags_.Clear();
}
inline uint32_t GCCharacterAddPacket::_internal_affect_flags(int index) const {
  return _impl_.affect_flags_.Get(index);
}
inline uint32_t GCCharacterAddPacket::affect_flags(int index) const {
  // @@protoc_insertion_point(field_get:network.GCCharacterAddPacket.affect_flags)
  return _internal_affect_flags(index);
}
inline void GCCharacterAddPacket::set_affect_flags(int index, uint32_t value) {
  _impl_.affect_flags_.Set(index, value);
  // @@protoc_insertion_point(field_set:network.GCCharacterAddPacket.affect_flags)
}
inline void GCCharacterAddPacket::_internal_add_affect_flags(uint32_t value) {
  _impl_.affect_flags_.Add(value);
}
inline void GCCharacterAddPacket::add_affect_flags(uint32_t value) {
  _internal_add_affect_flags(value);
  // @@protoc_insertion_point(field_add:network.GCCharacterAddPacket.affect_flags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
GCCharacterAddPacket::_internal_affect_flags() const {
  return _impl_.affect_flags_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
GCCharacterAddPacket::affect_flags() const {
  // @@protoc_insertion_point(field_list:network.GCCharacterAddPacket.affect_flags)
  return _internal_affect_flags();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
GCCharacterAddPacket::_internal_mutable_affect_flags() {
  return &_impl_.affect_flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
GCCharacterAddPacket::mutable_affect_flags() {
  // @@protoc_insertion_point(field_mutable_list:network.GCCharacterAddPacket.affect_flags)
  return _internal_mutable_affect_flags();
}

// repeated .network.GCCharacterAddPacket.AffectColor affect_colors = 14;
inline int GCCharacterAddPacket::_internal_affect_colors_size() const {
  return _impl_.affect_colors_.size();
}
inline int GCCharacterAddPacket::affect_colors_size() const {
  return _internal_affect_colors_size();
}
inline void GCCharacterAddPacket::clear_affect_colors() {
  _impl_.affect_colors_.Clear();
}
inline ::network::GCCharacterAddPacket_AffectColor* GCCharacterAddPacket::mutable_affect_colors(int index) {
  // @@protoc_insertion_point(field_mutable:network.GCCharacterAddPacket.affect_colors)
  return _impl_.affect_colors_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::GCCharacterAddPacket_AffectColor >*
GCCharacterAddPacket::mutable_affect_colors() {
  // @@protoc_insertion_point(field_mutable_list:network.GCCharacterAddPacket.affect_colors)
  return &_impl_.affect_colors_;
}
inline const ::network::GCCharacterAddPacket_AffectColor& GCCharacterAddPacket::_internal_affect_colors(int index) const {
  return _impl_.affect_colors_.Get(index);
}
inline const ::network::GCCharacterAddPacket_AffectColor& GCCharacterAddPacket::affect_colors(int index) const {
  // @@protoc_insertion_point(field_get:network.GCCharacterAddPacket.affect_colors)
  return _internal_affect_colors(index);
}
inline ::network::GCCharacterAddPacket_AffectColor* GCCharacterAddPacket::_internal_add_affect_colors() {
  return _impl_.affect_colors_.Add();
}
inline ::network::GCCharacterAddPacket_AffectColor* GCCharacterAddPacket::add_affect_colors() {
  ::network::GCCharacterAddPacket_AffectColor* _add = _internal_add_affect_colors();
  // @@protoc_insertion_point(field_add:network.GCCharacterAddPacket.affect_colors)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::GCCharacterAddPacket_AffectColor >&
GCCharacterAddPacket::affect_colors() const {
  // @@protoc_insertion_point(field_list:network.GCCharacterAddPacket.affect_colors)
  return _impl_.affect_colors_;
}

// repeated uint32 toggle_shining_flags = 15;
inline int GCCharacterAddPacket::_internal_toggle_shining_flags_size() const {
  return _impl_.toggle_shining_flags_.size();
}
inline int GCCharacterAddPacket::toggle_shining_flags_size() const {
  return _internal_toggle_shining_flags_size();
}
inline void GCCharacterAddPacket::clear_toggle_shining_flags() {
  _impl_.toggle_shining_flags_.Clear();
}
inline uint32_t GCCharacterAddPacket::_internal_toggle_shining_flags(int index) const {
  return _impl_.toggle_shining_flags_.Get(index);
}
inline uint32_t GCCharacterAddPacket::toggle_shining_flags(int index) const {
  // @@protoc_insertion_point(field_get:network.GCCharacterAddPacket.toggle_shining_flags)
  return _internal_toggle_shining_flags(index);
}
inline void GCCharacterAddPacket::set_toggle_shining_flags(int index, uint32_t value) {
  _impl_.toggle_shining_flags_.Set(index, value);
  // @@protoc_insertion_point(field_set:network.GCCharacterAddPacket.toggle_shining_flags)
}
inline void GCCharacterAddPacket::_internal_add_toggle_shining_flags(uint32_t value) {
  _impl_.toggle_shining_flags_.Add(value);
}
inline void GCCharacterAddPacket::add_toggle_shining_flags(uint32_t value) {
  _internal_add_toggle_shining_flags(value);
  // @@protoc_insertion_point(field_add:network.GCCharacterAddPacket.toggle_shining_flags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
GCCharacterAddPacket::_internal_toggle_shining_flags() const {
  return _impl_.toggle_shining_flags_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
GCCharacterAddPacket::toggle_shining_flags() const {
  // @@protoc_insertion_point(field_list:network.GCCharacterAddPacket.toggle_shining_flags)
  return _internal_toggle_shining_flags();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
GCCharacterAddPacket::_internal_mutable_toggle_shining_flags() {
  return &_impl_.toggle_shining_flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
GCCharacterAddPacket::mutable_toggle_shining_flags() {
  // @@protoc_insertion_point(field_mutable_list:network.GCCharacterAddPacket.toggle_shining_flags)
  return _internal_mutable_toggle_shining_flags();
}

// -------------------------------------------------------------------

// GCCharacterAdditionalInfoPacket

// uint32 vid = 1;
inline void GCCharacterAdditionalInfoPacket::clear_vid() {
  _impl_.vid_ = 0u;
}
inline uint32_t GCCharacterAdditionalInfoPacket::_internal_vid() const {
  return _impl_.vid_;
}
inline uint32_t GCCharacterAdditionalInfoPacket::vid() const {
  // @@protoc_insertion_point(field_get:network.GCCharacterAdditionalInfoPacket.vid)
  return _internal_vid();
}
inline void GCCharacterAdditionalInfoPacket::_internal_set_vid(uint32_t value) {
  
  _impl_.vid_ = value;
}
inline void GCCharacterAdditionalInfoPacket::set_vid(uint32_t value) {
  _internal_set_vid(value);
  // @@protoc_insertion_point(field_set:network.GCCharacterAdditionalInfoPacket.vid)
}

// bytes name = 2;
inline void GCCharacterAdditionalInfoPacket::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GCCharacterAdditionalInfoPacket::name() const {
  // @@protoc_insertion_point(field_get:network.GCCharacterAdditionalInfoPacket.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GCCharacterAdditionalInfoPacket::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GCCharacterAdditionalInfoPacket.name)
}
inline std::string* GCCharacterAdditionalInfoPacket::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:network.GCCharacterAdditionalInfoPacket.name)
  return _s;
}
inline const std::string& GCCharacterAdditionalInfoPacket::_internal_name() const {
  return _impl_.name_.Get();
}
inline void GCCharacterAdditionalInfoPacket::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* GCCharacterAdditionalInfoPacket::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* GCCharacterAdditionalInfoPacket::release_name() {
  // @@protoc_insertion_point(field_release:network.GCCharacterAdditionalInfoPacket.name)
  return _impl_.name_.Release();
}
inline void GCCharacterAdditionalInfoPacket::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GCCharacterAdditionalInfoPacket.name)
}

// repeated uint32 parts = 3;
inline int GCCharacterAdditionalInfoPacket::_internal_parts_size() const {
  return _impl_.parts_.size();
}
inline int GCCharacterAdditionalInfoPacket::parts_size() const {
  return _internal_parts_size();
}
inline void GCCharacterAdditionalInfoPacket::clear_parts() {
  _impl_.parts_.Clear();
}
inline uint32_t GCCharacterAdditionalInfoPacket::_internal_parts(int index) const {
  return _impl_.parts_.Get(index);
}
inline uint32_t GCCharacterAdditionalInfoPacket::parts(int index) const {
  // @@protoc_insertion_point(field_get:network.GCCharacterAdditionalInfoPacket.parts)
  return _internal_parts(index);
}
inline void GCCharacterAdditionalInfoPacket::set_parts(int index, uint32_t value) {
  _impl_.parts_.Set(index, value);
  // @@protoc_insertion_point(field_set:network.GCCharacterAdditionalInfoPacket.parts)
}
inline void GCCharacterAdditionalInfoPacket::_internal_add_parts(uint32_t value) {
  _impl_.parts_.Add(value);
}
inline void GCCharacterAdditionalInfoPacket::add_parts(uint32_t value) {
  _internal_add_parts(value);
  // @@protoc_insertion_point(field_add:network.GCCharacterAdditionalInfoPacket.parts)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
GCCharacterAdditionalInfoPacket::_internal_parts() const {
  return _impl_.parts_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
GCCharacterAdditionalInfoPacket::parts() const {
  // @@protoc_insertion_point(field_list:network.GCCharacterAdditionalInfoPacket.parts)
  return _internal_parts();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
GCCharacterAdditionalInfoPacket::_internal_mutable_parts() {
  return &_impl_.parts_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
GCCharacterAdditionalInfoPacket::mutable_parts() {
  // @@protoc_insertion_point(field_mutable_list:network.GCCharacterAdditionalInfoPacket.parts)
  return _internal_mutable_parts();
}

// bool acce_sparkle = 4;
inline void GCCharacterAdditionalInfoPacket::clear_acce_sparkle() {
  _impl_.acce_sparkle_ = false;
}
inline bool GCCharacterAdditionalInfoPacket::_internal_acce_sparkle() const {
  return _impl_.acce_sparkle_;
}
inline bool GCCharacterAdditionalInfoPacket::acce_sparkle() const {
  // @@protoc_insertion_point(field_get:network.GCCharacterAdditionalInfoPacket.acce_sparkle)
  return _internal_acce_sparkle();
}
inline void GCCharacterAdditionalInfoPacket::_internal_set_acce_sparkle(bool value) {
  
  _impl_.acce_sparkle_ = value;
}
inline void GCCharacterAdditionalInfoPacket::set_acce_sparkle(bool value) {
  _internal_set_acce_sparkle(value);
  // @@protoc_insertion_point(field_set:network.GCCharacterAdditionalInfoPacket.acce_sparkle)
}

// uint32 empire = 5;
inline void GCCharacterAdditionalInfoPacket::clear_empire() {
  _impl_.empire_ = 0u;
}
inline uint32_t GCCharacterAdditionalInfoPacket::_internal_empire() const {
  return _impl_.empire_;
}
inline uint32_t GCCharacterAdditionalInfoPacket::empire() const {
  // @@protoc_insertion_point(field_get:network.GCCharacterAdditionalInfoPacket.empire)
  return _internal_empire();
}
inline void GCCharacterAdditionalInfoPacket::_internal_set_empire(uint32_t value) {
  
  _impl_.empire_ = value;
}
inline void GCCharacterAdditionalInfoPacket::set_empire(uint32_t value) {
  _internal_set_empire(value);
  // @@protoc_insertion_point(field_set:network.GCCharacterAdditionalInfoPacket.empire)
}

// uint32 guild_id = 6;
inline void GCCharacterAdditionalInfoPacket::clear_guild_id() {
  _impl_.guild_id_ = 0u;
}
inline uint32_t GCCharacterAdditionalInfoPacket::_internal_guild_id() const {
  return _impl_.guild_id_;
}
inline uint32_t GCCharacterAdditionalInfoPacket::guild_id() const {
  // @@protoc_insertion_point(field_get:network.GCCharacterAdditionalInfoPacket.guild_id)
  return _internal_guild_id();
}
inline void GCCharacterAdditionalInfoPacket::_internal_set_guild_id(uint32_t value) {
  
  _impl_.guild_id_ = value;
}
inline void GCCharacterAdditionalInfoPacket::set_guild_id(uint32_t value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:network.GCCharacterAdditionalInfoPacket.guild_id)
}

// uint32 level = 7;
inline void GCCharacterAdditionalInfoPacket::clear_level() {
  _impl_.level_ = 0u;
}
inline uint32_t GCCharacterAdditionalInfoPacket::_internal_level() const {
  return _impl_.level_;
}
inline uint32_t GCCharacterAdditionalInfoPacket::level() const {
  // @@protoc_insertion_point(field_get:network.GCCharacterAdditionalInfoPacket.level)
  return _internal_level();
}
inline void GCCharacterAdditionalInfoPacket::_internal_set_level(uint32_t value) {
  
  _impl_.level_ = value;
}
inline void GCCharacterAdditionalInfoPacket::set_level(uint32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:network.GCCharacterAdditionalInfoPacket.level)
}

// sint32 alignment = 8;
inline void GCCharacterAdditionalInfoPacket::clear_alignment() {
  _impl_.alignment_ = 0;
}
inline int32_t GCCharacterAdditionalInfoPacket::_internal_alignment() const {
  return _impl_.alignment_;
}
inline int32_t GCCharacterAdditionalInfoPacket::alignment() const {
  // @@protoc_insertion_point(field_get:network.GCCharacterAdditionalInfoPacket.alignment)
  return _internal_alignment();
}
inline void GCCharacterAdditionalInfoPacket::_internal_set_alignment(int32_t value) {
  
  _impl_.alignment_ = value;
}
inline void GCCharacterAdditionalInfoPacket::set_alignment(int32_t value) {
  _internal_set_alignment(value);
  // @@protoc_insertion_point(field_set:network.GCCharacterAdditionalInfoPacket.alignment)
}

// uint32 pk_mode = 9;
inline void GCCharacterAdditionalInfoPacket::clear_pk_mode() {
  _impl_.pk_mode_ = 0u;
}
inline uint32_t GCCharacterAdditionalInfoPacket::_internal_pk_mode() const {
  return _impl_.pk_mode_;
}
inline uint32_t GCCharacterAdditionalInfoPacket::pk_mode() const {
  // @@protoc_insertion_point(field_get:network.GCCharacterAdditionalInfoPacket.pk_mode)
  return _internal_pk_mode();
}
inline void GCCharacterAdditionalInfoPacket::_internal_set_pk_mode(uint32_t value) {
  
  _impl_.pk_mode_ = value;
}
inline void GCCharacterAdditionalInfoPacket::set_pk_mode(uint32_t value) {
  _internal_set_pk_mode(value);
  // @@protoc_insertion_point(field_set:network.GCCharacterAdditionalInfoPacket.pk_mode)
}

// uint32 mount_vnum = 10;
inline void GCCharacterAdditionalInfoPacket::clear_mount_vnum() {
  _impl_.mount_vnum_ = 0u;
}
inline uint32_t GCCharacterAdditionalInfoPacket::_internal_mount_vnum() const {
  return _impl_.mount_vnum_;
}
inline uint32_t GCCharacterAdditionalInfoPacket::mount_vnum() const {
  // @@protoc_insertion_point(field_get:network.GCCharacterAdditionalInfoPacket.mount_vnum)
  return _internal_mount_vnum();
}
inline void GCCharacterAdditionalInfoPacket::_internal_set_mount_vnum(uint32_t value) {
  
  _impl_.mount_vnum_ = value;
}
inline void GCCharacterAdditionalInfoPacket::set_mount_vnum(uint32_t value) {
  _internal_set_mount_vnum(value);
  // @@protoc_insertion_point(field_set:network.GCCharacterAdditionalInfoPacket.mount_vnum)
}

// int32 locale = 11;
inline void GCCharacterAdditionalInfoPacket::clear_locale() {
  _impl_.locale_ = 0;
}
inline int32_t GCCharacterAdditionalInfoPacket::_internal_locale() const {
  return _impl_.locale_;
}
inline int32_t GCCharacterAdditionalInfoPacket::locale() const {
  // @@protoc_insertion_point(field_get:network.GCCharacterAdditionalInfoPacket.locale)
  return _internal_locale();
}
inline void GCCharacterAdditionalInfoPacket::_internal_set_locale(int32_t value) {
  
  _impl_.locale_ = value;
}
inline void GCCharacterAdditionalInfoPacket::set_locale(int32_t value) {
  _internal_set_locale(value);
  // @@protoc_insertion_point(field_set:network.GCCharacterAdditionalInfoPacket.locale)
}

// sint32 pvp_team = 12;
inline void GCCharacterAdditionalInfoPacket::clear_pvp_team() {
  _impl_.pvp_team_ = 0;
}
inline int32_t GCCharacterAdditionalInfoPacket::_internal_pvp_team() const {
  return _impl_.pvp_team_;
}
inline int32_t GCCharacterAdditionalInfoPacket::pvp_team() const {
  // @@protoc_insertion_point(field_get:network.GCCharacterAdditionalInfoPacket.pvp_team)
  return _internal_pvp_team();
}
inline void GCCharacterAdditionalInfoPacket::_internal_set_pvp_team(int32_t value) {
  
  _impl_.pvp_team_ = value;
}
inline void GCCharacterAdditionalInfoPacket::set_pvp_team(int32_t value) {
  _internal_set_pvp_team(value);
  // @@protoc_insertion_point(field_set:network.GCCharacterAdditionalInfoPacket.pvp_team)
}

// uint32 combat_zone_rank = 13;
inline void GCCharacterAdditionalInfoPacket::clear_combat_zone_rank() {
  _impl_.combat_zone_rank_ = 0u;
}
inline uint32_t GCCharacterAdditionalInfoPacket::_internal_combat_zone_rank() const {
  return _impl_.combat_zone_rank_;
}
inline uint32_t GCCharacterAdditionalInfoPacket::combat_zone_rank() const {
  // @@protoc_insertion_point(field_get:network.GCCharacterAdditionalInfoPacket.combat_zone_rank)
  return _internal_combat_zone_rank();
}
inline void GCCharacterAdditionalInfoPacket::_internal_set_combat_zone_rank(uint32_t value) {
  
  _impl_.combat_zone_rank_ = value;
}
inline void GCCharacterAdditionalInfoPacket::set_combat_zone_rank(uint32_t value) {
  _internal_set_combat_zone_rank(value);
  // @@protoc_insertion_point(field_set:network.GCCharacterAdditionalInfoPacket.combat_zone_rank)
}

// repeated uint32 skill_colors = 14;
inline int GCCharacterAdditionalInfoPacket::_internal_skill_colors_size() const {
  return _impl_.skill_colors_.size();
}
inline int GCCharacterAdditionalInfoPacket::skill_colors_size() const {
  return _internal_skill_colors_size();
}
inline void GCCharacterAdditionalInfoPacket::clear_skill_colors() {
  _impl_.skill_colors_.Clear();
}
inline uint32_t GCCharacterAdditionalInfoPacket::_internal_skill_colors(int index) const {
  return _impl_.skill_colors_.Get(index);
}
inline uint32_t GCCharacterAdditionalInfoPacket::skill_colors(int index) const {
  // @@protoc_insertion_point(field_get:network.GCCharacterAdditionalInfoPacket.skill_colors)
  return _internal_skill_colors(index);
}
inline void GCCharacterAdditionalInfoPacket::set_skill_colors(int index, uint32_t value) {
  _impl_.skill_colors_.Set(index, value);
  // @@protoc_insertion_point(field_set:network.GCCharacterAdditionalInfoPacket.skill_colors)
}
inline void GCCharacterAdditionalInfoPacket::_internal_add_skill_colors(uint32_t value) {
  _impl_.skill_colors_.Add(value);
}
inline void GCCharacterAdditionalInfoPacket::add_skill_colors(uint32_t value) {
  _internal_add_skill_colors(value);
  // @@protoc_insertion_point(field_add:network.GCCharacterAdditionalInfoPacket.skill_colors)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
GCCharacterAdditionalInfoPacket::_internal_skill_colors() const {
  return _impl_.skill_colors_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
GCCharacterAdditionalInfoPacket::skill_colors() const {
  // @@protoc_insertion_point(field_list:network.GCCharacterAdditionalInfoPacket.skill_colors)
  return _internal_skill_colors();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
GCCharacterAdditionalInfoPacket::_internal_mutable_skill_colors() {
  return &_impl_.skill_colors_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
GCCharacterAdditionalInfoPacket::mutable_skill_colors() {
  // @@protoc_insertion_point(field_mutable_list:network.GCCharacterAdditionalInfoPacket.skill_colors)
  return _internal_mutable_skill_colors();
}

// float mob_scale = 15;
inline void GCCharacterAdditionalInfoPacket::clear_mob_scale() {
  _impl_.mob_scale_ = 0;
}
inline float GCCharacterAdditionalInfoPacket::_internal_mob_scale() const {
  return _impl_.mob_scale_;
}
inline float GCCharacterAdditionalInfoPacket::mob_scale() const {
  // @@protoc_insertion_point(field_get:network.GCCharacterAdditionalInfoPacket.mob_scale)
  return _internal_mob_scale();
}
inline void GCCharacterAdditionalInfoPacket::_internal_set_mob_scale(float value) {
  
  _impl_.mob_scale_ = value;
}
inline void GCCharacterAdditionalInfoPacket::set_mob_scale(float value) {
  _internal_set_mob_scale(value);
  // @@protoc_insertion_point(field_set:network.GCCharacterAdditionalInfoPacket.mob_scale)
}

// -------------------------------------------------------------------

// GCCharacterUpdatePacket

// uint32 vid = 1;
inline void GCCharacterUpdatePacket::clear_vid() {
  _impl_.vid_ = 0u;
}
inline uint32_t GCCharacterUpdatePacket::_internal_vid() const {
  return _impl_.vid_;
}
inline uint32_t GCCharacterUpdatePacket::vid() const {
  // @@protoc_insertion_point(field_get:network.GCCharacterUpdatePacket.vid)
  return _internal_vid();
}
inline void GCCharacterUpdatePacket::_internal_set_vid(uint32_t value) {
  
  _impl_.vid_ = value;
}
inline void GCCharacterUpdatePacket::set_vid(uint32_t value) {
  _internal_set_vid(value);
  // @@protoc_insertion_point(field_set:network.GCCharacterUpdatePacket.vid)
}

// repeated uint32 parts = 2;
inline int GCCharacterUpdatePacket::_internal_parts_size() const {
  return _impl_.parts_.size();
}
inline int GCCharacterUpdatePacket::parts_size() const {
  return _internal_parts_size();
}
inline void GCCharacterUpdatePacket::clear_parts() {
  _impl_.parts_.Clear();
}
inline uint32_t GCCharacterUpdatePacket::_internal_parts(int index) const {
  return _impl_.parts_.Get(index);
}
inline uint32_t GCCharacterUpdatePacket::parts(int index) const {
  // @@protoc_insertion_point(field_get:network.GCCharacterUpdatePacket.parts)
  return _internal_parts(index);
}
inline void GCCharacterUpdatePacket::set_parts(int index, uint32_t value) {
  _impl_.parts_.Set(index, value);
  // @@protoc_insertion_point(field_set:network.GCCharacterUpdatePacket.parts)
}
inline void GCCharacterUpdatePacket::_internal_add_parts(uint32_t value) {
  _impl_.parts_.Add(value);
}
inline void GCCharacterUpdatePacket::add_parts(uint32_t value) {
  _internal_add_parts(value);
  // @@protoc_insertion_point(field_add:network.GCCharacterUpdatePacket.parts)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
GCCharacterUpdatePacket::_internal_parts() const {
  return _impl_.parts_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
GCCharacterUpdatePacket::parts() const {
  // @@protoc_insertion_point(field_list:network.GCCharacterUpdatePacket.parts)
  return _internal_parts();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
GCCharacterUpdatePacket::_internal_mutable_parts() {
  return &_impl_.parts_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
GCCharacterUpdatePacket::mutable_parts() {
  // @@protoc_insertion_point(field_mutable_list:network.GCCharacterUpdatePacket.parts)
  return _internal_mutable_parts();
}

// bool acce_sparkle = 3;
inline void GCCharacterUpdatePacket::clear_acce_sparkle() {
  _impl_.acce_sparkle_ = false;
}
inline bool GCCharacterUpdatePacket::_internal_acce_sparkle() const {
  return _impl_.acce_sparkle_;
}
inline bool GCCharacterUpdatePacket::acce_sparkle() const {
  // @@protoc_insertion_point(field_get:network.GCCharacterUpdatePacket.acce_sparkle)
  return _internal_acce_sparkle();
}
inline void GCCharacterUpdatePacket::_internal_set_acce_sparkle(bool value) {
  
  _impl_.acce_sparkle_ = value;
}
inline void GCCharacterUpdatePacket::set_acce_sparkle(bool value) {
  _internal_set_acce_sparkle(value);
  // @@protoc_insertion_point(field_set:network.GCCharacterUpdatePacket.acce_sparkle)
}

// uint32 moving_speed = 4;
inline void GCCharacterUpdatePacket::clear_moving_speed() {
  _impl_.moving_speed_ = 0u;
}
inline uint32_t GCCharacterUpdatePacket::_internal_moving_speed() const {
  return _impl_.moving_speed_;
}
inline uint32_t GCCharacterUpdatePacket::moving_speed() const {
  // @@protoc_insertion_point(field_get:network.GCCharacterUpdatePacket.moving_speed)
  return _internal_moving_speed();
}
inline void GCCharacterUpdatePacket::_internal_set_moving_speed(uint32_t value) {
  
  _impl_.moving_speed_ = value;
}
inline void GCCharacterUpdatePacket::set_moving_speed(uint32_t value) {
  _internal_set_moving_speed(value);
  // @@protoc_insertion_point(field_set:network.GCCharacterUpdatePacket.moving_speed)
}

// uint32 attack_speed = 5;
inline void GCCharacterUpdatePacket::clear_attack_speed() {
  _impl_.attack_speed_ = 0u;
}
inline uint32_t GCCharacterUpdatePacket::_internal_attack_speed() const {
  return _impl_.attack_speed_;
}
inline uint32_t GCCharacterUpdatePacket::attack_speed() const {
  // @@protoc_insertion_point(field_get:network.GCCharacterUpdatePacket.attack_speed)
  return _internal_attack_speed();
}
inline void GCCharacterUpdatePacket::_internal_set_attack_speed(uint32_t value) {
  
  _impl_.attack_speed_ = value;
}
inline void GCCharacterUpdatePacket::set_attack_speed(uint32_t value) {
  _internal_set_attack_speed(value);
  // @@protoc_insertion_point(field_set:network.GCCharacterUpdatePacket.attack_speed)
}

// uint32 state_flag = 6;
inline void GCCharacterUpdatePacket::clear_state_flag() {
  _impl_.state_flag_ = 0u;
}
inline uint32_t GCCharacterUpdatePacket::_internal_state_flag() const {
  return _impl_.state_flag_;
}
inline uint32_t GCCharacterUpdatePacket::state_flag() const {
  // @@protoc_insertion_point(field_get:network.GCCharacterUpdatePacket.state_flag)
  return _internal_state_flag();
}
inline void GCCharacterUpdatePacket::_internal_set_state_flag(uint32_t value) {
  
  _impl_.state_flag_ = value;
}
inline void GCCharacterUpdatePacket::set_state_flag(uint32_t value) {
  _internal_set_state_flag(value);
  // @@protoc_insertion_point(field_set:network.GCCharacterUpdatePacket.state_flag)
}

// repeated uint32 affect_flags = 7;
inline int GCCharacterUpdatePacket::_internal_affect_flags_size() const {
  return _impl_.affect_flags_.size();
}
inline int GCCharacterUpdatePacket::affect_flags_size() const {
  return _internal_affect_flags_size();
}
inline void GCCharacterUpdatePacket::clear_affect_flags() {
  _impl_.affect_flags_.Clear();
}
inline uint32_t GCCharacterUpdatePacket::_internal_affect_flags(int index) const {
  return _impl_.affect_flags_.Get(index);
}
inline uint32_t GCCharacterUpdatePacket::affect_flags(int index) const {
  // @@protoc_insertion_point(field_get:network.GCCharacterUpdatePacket.affect_flags)
  return _internal_affect_flags(index);
}
inline void GCCharacterUpdatePacket::set_affect_flags(int index, uint32_t value) {
  _impl_.affect_flags_.Set(index, value);
  // @@protoc_insertion_point(field_set:network.GCCharacterUpdatePacket.affect_flags)
}
inline void GCCharacterUpdatePacket::_internal_add_affect_flags(uint32_t value) {
  _impl_.affect_flags_.Add(value);
}
inline void GCCharacterUpdatePacket::add_affect_flags(uint32_t value) {
  _internal_add_affect_flags(value);
  // @@protoc_insertion_point(field_add:network.GCCharacterUpdatePacket.affect_flags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
GCCharacterUpdatePacket::_internal_affect_flags() const {
  return _impl_.affect_flags_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
GCCharacterUpdatePacket::affect_flags() const {
  // @@protoc_insertion_point(field_list:network.GCCharacterUpdatePacket.affect_flags)
  return _internal_affect_flags();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
GCCharacterUpdatePacket::_internal_mutable_affect_flags() {
  return &_impl_.affect_flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
GCCharacterUpdatePacket::mutable_affect_flags() {
  // @@protoc_insertion_point(field_mutable_list:network.GCCharacterUpdatePacket.affect_flags)
  return _internal_mutable_affect_flags();
}

// repeated .network.GCCharacterAddPacket.AffectColor affect_colors = 8;
inline int GCCharacterUpdatePacket::_internal_affect_colors_size() const {
  return _impl_.affect_colors_.size();
}
inline int GCCharacterUpdatePacket::affect_colors_size() const {
  return _internal_affect_colors_size();
}
inline void GCCharacterUpdatePacket::clear_affect_colors() {
  _impl_.affect_colors_.Clear();
}
inline ::network::GCCharacterAddPacket_AffectColor* GCCharacterUpdatePacket::mutable_affect_colors(int index) {
  // @@protoc_insertion_point(field_mutable:network.GCCharacterUpdatePacket.affect_colors)
  return _impl_.affect_colors_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::GCCharacterAddPacket_AffectColor >*
GCCharacterUpdatePacket::mutable_affect_colors() {
  // @@protoc_insertion_point(field_mutable_list:network.GCCharacterUpdatePacket.affect_colors)
  return &_impl_.affect_colors_;
}
inline const ::network::GCCharacterAddPacket_AffectColor& GCCharacterUpdatePacket::_internal_affect_colors(int index) const {
  return _impl_.affect_colors_.Get(index);
}
inline const ::network::GCCharacterAddPacket_AffectColor& GCCharacterUpdatePacket::affect_colors(int index) const {
  // @@protoc_insertion_point(field_get:network.GCCharacterUpdatePacket.affect_colors)
  return _internal_affect_colors(index);
}
inline ::network::GCCharacterAddPacket_AffectColor* GCCharacterUpdatePacket::_internal_add_affect_colors() {
  return _impl_.affect_colors_.Add();
}
inline ::network::GCCharacterAddPacket_AffectColor* GCCharacterUpdatePacket::add_affect_colors() {
  ::network::GCCharacterAddPacket_AffectColor* _add = _internal_add_affect_colors();
  // @@protoc_insertion_point(field_add:network.GCCharacterUpdatePacket.affect_colors)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::GCCharacterAddPacket_AffectColor >&
GCCharacterUpdatePacket::affect_colors() const {
  // @@protoc_insertion_point(field_list:network.GCCharacterUpdatePacket.affect_colors)
  return _impl_.affect_colors_;
}

// repeated uint32 toggle_shining_flags = 9;
inline int GCCharacterUpdatePacket::_internal_toggle_shining_flags_size() const {
  return _impl_.toggle_shining_flags_.size();
}
inline int GCCharacterUpdatePacket::toggle_shining_flags_size() const {
  return _internal_toggle_shining_flags_size();
}
inline void GCCharacterUpdatePacket::clear_toggle_shining_flags() {
  _impl_.toggle_shining_flags_.Clear();
}
inline uint32_t GCCharacterUpdatePacket::_internal_toggle_shining_flags(int index) const {
  return _impl_.toggle_shining_flags_.Get(index);
}
inline uint32_t GCCharacterUpdatePacket::toggle_shining_flags(int index) const {
  // @@protoc_insertion_point(field_get:network.GCCharacterUpdatePacket.toggle_shining_flags)
  return _internal_toggle_shining_flags(index);
}
inline void GCCharacterUpdatePacket::set_toggle_shining_flags(int index, uint32_t value) {
  _impl_.toggle_shining_flags_.Set(index, value);
  // @@protoc_insertion_point(field_set:network.GCCharacterUpdatePacket.toggle_shining_flags)
}
inline void GCCharacterUpdatePacket::_internal_add_toggle_shining_flags(uint32_t value) {
  _impl_.toggle_shining_flags_.Add(value);
}
inline void GCCharacterUpdatePacket::add_toggle_shining_flags(uint32_t value) {
  _internal_add_toggle_shining_flags(value);
  // @@protoc_insertion_point(field_add:network.GCCharacterUpdatePacket.toggle_shining_flags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
GCCharacterUpdatePacket::_internal_toggle_shining_flags() const {
  return _impl_.toggle_shining_flags_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
GCCharacterUpdatePacket::toggle_shining_flags() const {
  // @@protoc_insertion_point(field_list:network.GCCharacterUpdatePacket.toggle_shining_flags)
  return _internal_toggle_shining_flags();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
GCCharacterUpdatePacket::_internal_mutable_toggle_shining_flags() {
  return &_impl_.toggle_shining_flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
GCCharacterUpdatePacket::mutable_toggle_shining_flags() {
  // @@protoc_insertion_point(field_mutable_list:network.GCCharacterUpdatePacket.toggle_shining_flags)
  return _internal_mutable_toggle_shining_flags();
}

// uint32 guild_id = 10;
inline void GCCharacterUpdatePacket::clear_guild_id() {
  _impl_.guild_id_ = 0u;
}
inline uint32_t GCCharacterUpdatePacket::_internal_guild_id() const {
  return _impl_.guild_id_;
}
inline uint32_t GCCharacterUpdatePacket::guild_id() const {
  // @@protoc_insertion_point(field_get:network.GCCharacterUpdatePacket.guild_id)
  return _internal_guild_id();
}
inline void GCCharacterUpdatePacket::_internal_set_guild_id(uint32_t value) {
  
  _impl_.guild_id_ = value;
}
inline void GCCharacterUpdatePacket::set_guild_id(uint32_t value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:network.GCCharacterUpdatePacket.guild_id)
}

// sint32 alignment = 11;
inline void GCCharacterUpdatePacket::clear_alignment() {
  _impl_.alignment_ = 0;
}
inline int32_t GCCharacterUpdatePacket::_internal_alignment() const {
  return _impl_.alignment_;
}
inline int32_t GCCharacterUpdatePacket::alignment() const {
  // @@protoc_insertion_point(field_get:network.GCCharacterUpdatePacket.alignment)
  return _internal_alignment();
}
inline void GCCharacterUpdatePacket::_internal_set_alignment(int32_t value) {
  
  _impl_.alignment_ = value;
}
inline void GCCharacterUpdatePacket::set_alignment(int32_t value) {
  _internal_set_alignment(value);
  // @@protoc_insertion_point(field_set:network.GCCharacterUpdatePacket.alignment)
}

// uint32 pk_mode = 12;
inline void GCCharacterUpdatePacket::clear_pk_mode() {
  _impl_.pk_mode_ = 0u;
}
inline uint32_t GCCharacterUpdatePacket::_internal_pk_mode() const {
  return _impl_.pk_mode_;
}
inline uint32_t GCCharacterUpdatePacket::pk_mode() const {
  // @@protoc_insertion_point(field_get:network.GCCharacterUpdatePacket.pk_mode)
  return _internal_pk_mode();
}
inline void GCCharacterUpdatePacket::_internal_set_pk_mode(uint32_t value) {
  
  _impl_.pk_mode_ = value;
}
inline void GCCharacterUpdatePacket::set_pk_mode(uint32_t value) {
  _internal_set_pk_mode(value);
  // @@protoc_insertion_point(field_set:network.GCCharacterUpdatePacket.pk_mode)
}

// uint32 mount_vnum = 13;
inline void GCCharacterUpdatePacket::clear_mount_vnum() {
  _impl_.mount_vnum_ = 0u;
}
inline uint32_t GCCharacterUpdatePacket::_internal_mount_vnum() const {
  return _impl_.mount_vnum_;
}
inline uint32_t GCCharacterUpdatePacket::mount_vnum() const {
  // @@protoc_insertion_point(field_get:network.GCCharacterUpdatePacket.mount_vnum)
  return _internal_mount_vnum();
}
inline void GCCharacterUpdatePacket::_internal_set_mount_vnum(uint32_t value) {
  
  _impl_.mount_vnum_ = value;
}
inline void GCCharacterUpdatePacket::set_mount_vnum(uint32_t value) {
  _internal_set_mount_vnum(value);
  // @@protoc_insertion_point(field_set:network.GCCharacterUpdatePacket.mount_vnum)
}

// uint32 combat_zone_points = 14;
inline void GCCharacterUpdatePacket::clear_combat_zone_points() {
  _impl_.combat_zone_points_ = 0u;
}
inline uint32_t GCCharacterUpdatePacket::_internal_combat_zone_points() const {
  return _impl_.combat_zone_points_;
}
inline uint32_t GCCharacterUpdatePacket::combat_zone_points() const {
  // @@protoc_insertion_point(field_get:network.GCCharacterUpdatePacket.combat_zone_points)
  return _internal_combat_zone_points();
}
inline void GCCharacterUpdatePacket::_internal_set_combat_zone_points(uint32_t value) {
  
  _impl_.combat_zone_points_ = value;
}
inline void GCCharacterUpdatePacket::set_combat_zone_points(uint32_t value) {
  _internal_set_combat_zone_points(value);
  // @@protoc_insertion_point(field_set:network.GCCharacterUpdatePacket.combat_zone_points)
}

// repeated uint32 skill_colors = 15;
inline int GCCharacterUpdatePacket::_internal_skill_colors_size() const {
  return _impl_.skill_colors_.size();
}
inline int GCCharacterUpdatePacket::skill_colors_size() const {
  return _internal_skill_colors_size();
}
inline void GCCharacterUpdatePacket::clear_skill_colors() {
  _impl_.skill_colors_.Clear();
}
inline uint32_t GCCharacterUpdatePacket::_internal_skill_colors(int index) const {
  return _impl_.skill_colors_.Get(index);
}
inline uint32_t GCCharacterUpdatePacket::skill_colors(int index) const {
  // @@protoc_insertion_point(field_get:network.GCCharacterUpdatePacket.skill_colors)
  return _internal_skill_colors(index);
}
inline void GCCharacterUpdatePacket::set_skill_colors(int index, uint32_t value) {
  _impl_.skill_colors_.Set(index, value);
  // @@protoc_insertion_point(field_set:network.GCCharacterUpdatePacket.skill_colors)
}
inline void GCCharacterUpdatePacket::_internal_add_skill_colors(uint32_t value) {
  _impl_.skill_colors_.Add(value);
}
inline void GCCharacterUpdatePacket::add_skill_colors(uint32_t value) {
  _internal_add_skill_colors(value);
  // @@protoc_insertion_point(field_add:network.GCCharacterUpdatePacket.skill_colors)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
GCCharacterUpdatePacket::_internal_skill_colors() const {
  return _impl_.skill_colors_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
GCCharacterUpdatePacket::skill_colors() const {
  // @@protoc_insertion_point(field_list:network.GCCharacterUpdatePacket.skill_colors)
  return _internal_skill_colors();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
GCCharacterUpdatePacket::_internal_mutable_skill_colors() {
  return &_impl_.skill_colors_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
GCCharacterUpdatePacket::mutable_skill_colors() {
  // @@protoc_insertion_point(field_mutable_list:network.GCCharacterUpdatePacket.skill_colors)
  return _internal_mutable_skill_colors();
}

// -------------------------------------------------------------------

// GCCharacterShiningPacket

// uint32 vid = 1;
inline void GCCharacterShiningPacket::clear_vid() {
  _impl_.vid_ = 0u;
}
inline uint32_t GCCharacterShiningPacket::_internal_vid() const {
  return _impl_.vid_;
}
inline uint32_t GCCharacterShiningPacket::vid() const {
  // @@protoc_insertion_point(field_get:network.GCCharacterShiningPacket.vid)
  return _internal_vid();
}
inline void GCCharacterShiningPacket::_internal_set_vid(uint32_t value) {
  
  _impl_.vid_ = value;
}
inline void GCCharacterShiningPacket::set_vid(uint32_t value) {
  _internal_set_vid(value);
  // @@protoc_insertion_point(field_set:network.GCCharacterShiningPacket.vid)
}

// repeated uint32 shinings = 2;
inline int GCCharacterShiningPacket::_internal_shinings_size() const {
  return _impl_.shinings_.size();
}
inline int GCCharacterShiningPacket::shinings_size() const {
  return _internal_shinings_size();
}
inline void GCCharacterShiningPacket::clear_shinings() {
  _impl_.shinings_.Clear();
}
inline uint32_t GCCharacterShiningPacket::_internal_shinings(int index) const {
  return _impl_.shinings_.Get(index);
}
inline uint32_t GCCharacterShiningPacket::shinings(int index) const {
  // @@protoc_insertion_point(field_get:network.GCCharacterShiningPacket.shinings)
  return _internal_shinings(index);
}
inline void GCCharacterShiningPacket::set_shinings(int index, uint32_t value) {
  _impl_.shinings_.Set(index, value);
  // @@protoc_insertion_point(field_set:network.GCCharacterShiningPacket.shinings)
}
inline void GCCharacterShiningPacket::_internal_add_shinings(uint32_t value) {
  _impl_.shinings_.Add(value);
}
inline void GCCharacterShiningPacket::add_shinings(uint32_t value) {
  _internal_add_shinings(value);
  // @@protoc_insertion_point(field_add:network.GCCharacterShiningPacket.shinings)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
GCCharacterShiningPacket::_internal_shinings() const {
  return _impl_.shinings_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
GCCharacterShiningPacket::shinings() const {
  // @@protoc_insertion_point(field_list:network.GCCharacterShiningPacket.shinings)
  return _internal_shinings();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
GCCharacterShiningPacket::_internal_mutable_shinings() {
  return &_impl_.shinings_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
GCCharacterShiningPacket::mutable_shinings() {
  // @@protoc_insertion_point(field_mutable_list:network.GCCharacterShiningPacket.shinings)
  return _internal_mutable_shinings();
}

// -------------------------------------------------------------------

// GCCharacterDeletePacket

// uint32 vid = 1;
inline void GCCharacterDeletePacket::clear_vid() {
  _impl_.vid_ = 0u;
}
inline uint32_t GCCharacterDeletePacket::_internal_vid() const {
  return _impl_.vid_;
}
inline uint32_t GCCharacterDeletePacket::vid() const {
  // @@protoc_insertion_point(field_get:network.GCCharacterDeletePacket.vid)
  return _internal_vid();
}
inline void GCCharacterDeletePacket::_internal_set_vid(uint32_t value) {
  
  _impl_.vid_ = value;
}
inline void GCCharacterDeletePacket::set_vid(uint32_t value) {
  _internal_set_vid(value);
  // @@protoc_insertion_point(field_set:network.GCCharacterDeletePacket.vid)
}

// -------------------------------------------------------------------

// GCFishingStartPacket

// uint32 vid = 1;
inline void GCFishingStartPacket::clear_vid() {
  _impl_.vid_ = 0u;
}
inline uint32_t GCFishingStartPacket::_internal_vid() const {
  return _impl_.vid_;
}
inline uint32_t GCFishingStartPacket::vid() const {
  // @@protoc_insertion_point(field_get:network.GCFishingStartPacket.vid)
  return _internal_vid();
}
inline void GCFishingStartPacket::_internal_set_vid(uint32_t value) {
  
  _impl_.vid_ = value;
}
inline void GCFishingStartPacket::set_vid(uint32_t value) {
  _internal_set_vid(value);
  // @@protoc_insertion_point(field_set:network.GCFishingStartPacket.vid)
}

// uint32 dir = 2;
inline void GCFishingStartPacket::clear_dir() {
  _impl_.dir_ = 0u;
}
inline uint32_t GCFishingStartPacket::_internal_dir() const {
  return _impl_.dir_;
}
inline uint32_t GCFishingStartPacket::dir() const {
  // @@protoc_insertion_point(field_get:network.GCFishingStartPacket.dir)
  return _internal_dir();
}
inline void GCFishingStartPacket::_internal_set_dir(uint32_t value) {
  
  _impl_.dir_ = value;
}
inline void GCFishingStartPacket::set_dir(uint32_t value) {
  _internal_set_dir(value);
  // @@protoc_insertion_point(field_set:network.GCFishingStartPacket.dir)
}

// -------------------------------------------------------------------

// GCFishingStopPacket

// uint32 vid = 1;
inline void GCFishingStopPacket::clear_vid() {
  _impl_.vid_ = 0u;
}
inline uint32_t GCFishingStopPacket::_internal_vid() const {
  return _impl_.vid_;
}
inline uint32_t GCFishingStopPacket::vid() const {
  // @@protoc_insertion_point(field_get:network.GCFishingStopPacket.vid)
  return _internal_vid();
}
inline void GCFishingStopPacket::_internal_set_vid(uint32_t value) {
  
  _impl_.vid_ = value;
}
inline void GCFishingStopPacket::set_vid(uint32_t value) {
  _internal_set_vid(value);
  // @@protoc_insertion_point(field_set:network.GCFishingStopPacket.vid)
}

// -------------------------------------------------------------------

// GCFishingReactPacket

// uint32 vid = 1;
inline void GCFishingReactPacket::clear_vid() {
  _impl_.vid_ = 0u;
}
inline uint32_t GCFishingReactPacket::_internal_vid() const {
  return _impl_.vid_;
}
inline uint32_t GCFishingReactPacket::vid() const {
  // @@protoc_insertion_point(field_get:network.GCFishingReactPacket.vid)
  return _internal_vid();
}
inline void GCFishingReactPacket::_internal_set_vid(uint32_t value) {
  
  _impl_.vid_ = value;
}
inline void GCFishingReactPacket::set_vid(uint32_t value) {
  _internal_set_vid(value);
  // @@protoc_insertion_point(field_set:network.GCFishingReactPacket.vid)
}

// -------------------------------------------------------------------

// GCFishingSuccessPacket

// uint32 vid = 1;
inline void GCFishingSuccessPacket::clear_vid() {
  _impl_.vid_ = 0u;
}
inline uint32_t GCFishingSuccessPacket::_internal_vid() const {
  return _impl_.vid_;
}
inline uint32_t GCFishingSuccessPacket::vid() const {
  // @@protoc_insertion_point(field_get:network.GCFishingSuccessPacket.vid)
  return _internal_vid();
}
inline void GCFishingSuccessPacket::_internal_set_vid(uint32_t value) {
  
  _impl_.vid_ = value;
}
inline void GCFishingSuccessPacket::set_vid(uint32_t value) {
  _internal_set_vid(value);
  // @@protoc_insertion_point(field_set:network.GCFishingSuccessPacket.vid)
}

// -------------------------------------------------------------------

// GCFishingFailPacket

// uint32 vid = 1;
inline void GCFishingFailPacket::clear_vid() {
  _impl_.vid_ = 0u;
}
inline uint32_t GCFishingFailPacket::_internal_vid() const {
  return _impl_.vid_;
}
inline uint32_t GCFishingFailPacket::vid() const {
  // @@protoc_insertion_point(field_get:network.GCFishingFailPacket.vid)
  return _internal_vid();
}
inline void GCFishingFailPacket::_internal_set_vid(uint32_t value) {
  
  _impl_.vid_ = value;
}
inline void GCFishingFailPacket::set_vid(uint32_t value) {
  _internal_set_vid(value);
  // @@protoc_insertion_point(field_set:network.GCFishingFailPacket.vid)
}

// -------------------------------------------------------------------

// GCFishingFishInfoPacket

// uint32 info = 1;
inline void GCFishingFishInfoPacket::clear_info() {
  _impl_.info_ = 0u;
}
inline uint32_t GCFishingFishInfoPacket::_internal_info() const {
  return _impl_.info_;
}
inline uint32_t GCFishingFishInfoPacket::info() const {
  // @@protoc_insertion_point(field_get:network.GCFishingFishInfoPacket.info)
  return _internal_info();
}
inline void GCFishingFishInfoPacket::_internal_set_info(uint32_t value) {
  
  _impl_.info_ = value;
}
inline void GCFishingFishInfoPacket::set_info(uint32_t value) {
  _internal_set_info(value);
  // @@protoc_insertion_point(field_set:network.GCFishingFishInfoPacket.info)
}

// -------------------------------------------------------------------

// GCItemSetPacket

// .network.TItemData data = 1;
inline bool GCItemSetPacket::_internal_has_data() const {
  return this != internal_default_instance() && _impl_.data_ != nullptr;
}
inline bool GCItemSetPacket::has_data() const {
  return _internal_has_data();
}
inline const ::network::TItemData& GCItemSetPacket::_internal_data() const {
  const ::network::TItemData* p = _impl_.data_;
  return p != nullptr ? *p : reinterpret_cast<const ::network::TItemData&>(
      ::network::_TItemData_default_instance_);
}
inline const ::network::TItemData& GCItemSetPacket::data() const {
  // @@protoc_insertion_point(field_get:network.GCItemSetPacket.data)
  return _internal_data();
}
inline void GCItemSetPacket::unsafe_arena_set_allocated_data(
    ::network::TItemData* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.data_);
  }
  _impl_.data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:network.GCItemSetPacket.data)
}
inline ::network::TItemData* GCItemSetPacket::release_data() {
  
  ::network::TItemData* temp = _impl_.data_;
  _impl_.data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::network::TItemData* GCItemSetPacket::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:network.GCItemSetPacket.data)
  
  ::network::TItemData* temp = _impl_.data_;
  _impl_.data_ = nullptr;
  return temp;
}
inline ::network::TItemData* GCItemSetPacket::_internal_mutable_data() {
  
  if (_impl_.data_ == nullptr) {
    auto* p = CreateMaybeMessage<::network::TItemData>(GetArenaForAllocation());
    _impl_.data_ = p;
  }
  return _impl_.data_;
}
inline ::network::TItemData* GCItemSetPacket::mutable_data() {
  ::network::TItemData* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:network.GCItemSetPacket.data)
  return _msg;
}
inline void GCItemSetPacket::set_allocated_data(::network::TItemData* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.data_);
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data));
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.data_ = data;
  // @@protoc_insertion_point(field_set_allocated:network.GCItemSetPacket.data)
}

// bool highlight = 2;
inline void GCItemSetPacket::clear_highlight() {
  _impl_.highlight_ = false;
}
inline bool GCItemSetPacket::_internal_highlight() const {
  return _impl_.highlight_;
}
inline bool GCItemSetPacket::highlight() const {
  // @@protoc_insertion_point(field_get:network.GCItemSetPacket.highlight)
  return _internal_highlight();
}
inline void GCItemSetPacket::_internal_set_highlight(bool value) {
  
  _impl_.highlight_ = value;
}
inline void GCItemSetPacket::set_highlight(bool value) {
  _internal_set_highlight(value);
  // @@protoc_insertion_point(field_set:network.GCItemSetPacket.highlight)
}

// -------------------------------------------------------------------

// GCItemUpdatePacket

// .network.TItemData data = 1;
inline bool GCItemUpdatePacket::_internal_has_data() const {
  return this != internal_default_instance() && _impl_.data_ != nullptr;
}
inline bool GCItemUpdatePacket::has_data() const {
  return _internal_has_data();
}
inline const ::network::TItemData& GCItemUpdatePacket::_internal_data() const {
  const ::network::TItemData* p = _impl_.data_;
  return p != nullptr ? *p : reinterpret_cast<const ::network::TItemData&>(
      ::network::_TItemData_default_instance_);
}
inline const ::network::TItemData& GCItemUpdatePacket::data() const {
  // @@protoc_insertion_point(field_get:network.GCItemUpdatePacket.data)
  return _internal_data();
}
inline void GCItemUpdatePacket::unsafe_arena_set_allocated_data(
    ::network::TItemData* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.data_);
  }
  _impl_.data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:network.GCItemUpdatePacket.data)
}
inline ::network::TItemData* GCItemUpdatePacket::release_data() {
  
  ::network::TItemData* temp = _impl_.data_;
  _impl_.data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::network::TItemData* GCItemUpdatePacket::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:network.GCItemUpdatePacket.data)
  
  ::network::TItemData* temp = _impl_.data_;
  _impl_.data_ = nullptr;
  return temp;
}
inline ::network::TItemData* GCItemUpdatePacket::_internal_mutable_data() {
  
  if (_impl_.data_ == nullptr) {
    auto* p = CreateMaybeMessage<::network::TItemData>(GetArenaForAllocation());
    _impl_.data_ = p;
  }
  return _impl_.data_;
}
inline ::network::TItemData* GCItemUpdatePacket::mutable_data() {
  ::network::TItemData* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:network.GCItemUpdatePacket.data)
  return _msg;
}
inline void GCItemUpdatePacket::set_allocated_data(::network::TItemData* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.data_);
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data));
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.data_ = data;
  // @@protoc_insertion_point(field_set_allocated:network.GCItemUpdatePacket.data)
}

// -------------------------------------------------------------------

// GCItemGroundAddPacket

// int32 x = 1;
inline void GCItemGroundAddPacket::clear_x() {
  _impl_.x_ = 0;
}
inline int32_t GCItemGroundAddPacket::_internal_x() const {
  return _impl_.x_;
}
inline int32_t GCItemGroundAddPacket::x() const {
  // @@protoc_insertion_point(field_get:network.GCItemGroundAddPacket.x)
  return _internal_x();
}
inline void GCItemGroundAddPacket::_internal_set_x(int32_t value) {
  
  _impl_.x_ = value;
}
inline void GCItemGroundAddPacket::set_x(int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:network.GCItemGroundAddPacket.x)
}

// int32 y = 2;
inline void GCItemGroundAddPacket::clear_y() {
  _impl_.y_ = 0;
}
inline int32_t GCItemGroundAddPacket::_internal_y() const {
  return _impl_.y_;
}
inline int32_t GCItemGroundAddPacket::y() const {
  // @@protoc_insertion_point(field_get:network.GCItemGroundAddPacket.y)
  return _internal_y();
}
inline void GCItemGroundAddPacket::_internal_set_y(int32_t value) {
  
  _impl_.y_ = value;
}
inline void GCItemGroundAddPacket::set_y(int32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:network.GCItemGroundAddPacket.y)
}

// int32 z = 3;
inline void GCItemGroundAddPacket::clear_z() {
  _impl_.z_ = 0;
}
inline int32_t GCItemGroundAddPacket::_internal_z() const {
  return _impl_.z_;
}
inline int32_t GCItemGroundAddPacket::z() const {
  // @@protoc_insertion_point(field_get:network.GCItemGroundAddPacket.z)
  return _internal_z();
}
inline void GCItemGroundAddPacket::_internal_set_z(int32_t value) {
  
  _impl_.z_ = value;
}
inline void GCItemGroundAddPacket::set_z(int32_t value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:network.GCItemGroundAddPacket.z)
}

// uint32 vid = 4;
inline void GCItemGroundAddPacket::clear_vid() {
  _impl_.vid_ = 0u;
}
inline uint32_t GCItemGroundAddPacket::_internal_vid() const {
  return _impl_.vid_;
}
inline uint32_t GCItemGroundAddPacket::vid() const {
  // @@protoc_insertion_point(field_get:network.GCItemGroundAddPacket.vid)
  return _internal_vid();
}
inline void GCItemGroundAddPacket::_internal_set_vid(uint32_t value) {
  
  _impl_.vid_ = value;
}
inline void GCItemGroundAddPacket::set_vid(uint32_t value) {
  _internal_set_vid(value);
  // @@protoc_insertion_point(field_set:network.GCItemGroundAddPacket.vid)
}

// uint32 vnum = 5;
inline void GCItemGroundAddPacket::clear_vnum() {
  _impl_.vnum_ = 0u;
}
inline uint32_t GCItemGroundAddPacket::_internal_vnum() const {
  return _impl_.vnum_;
}
inline uint32_t GCItemGroundAddPacket::vnum() const {
  // @@protoc_insertion_point(field_get:network.GCItemGroundAddPacket.vnum)
  return _internal_vnum();
}
inline void GCItemGroundAddPacket::_internal_set_vnum(uint32_t value) {
  
  _impl_.vnum_ = value;
}
inline void GCItemGroundAddPacket::set_vnum(uint32_t value) {
  _internal_set_vnum(value);
  // @@protoc_insertion_point(field_set:network.GCItemGroundAddPacket.vnum)
}

// uint32 count = 6;
inline void GCItemGroundAddPacket::clear_count() {
  _impl_.count_ = 0u;
}
inline uint32_t GCItemGroundAddPacket::_internal_count() const {
  return _impl_.count_;
}
inline uint32_t GCItemGroundAddPacket::count() const {
  // @@protoc_insertion_point(field_get:network.GCItemGroundAddPacket.count)
  return _internal_count();
}
inline void GCItemGroundAddPacket::_internal_set_count(uint32_t value) {
  
  _impl_.count_ = value;
}
inline void GCItemGroundAddPacket::set_count(uint32_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:network.GCItemGroundAddPacket.count)
}

// repeated int32 sockets = 7;
inline int GCItemGroundAddPacket::_internal_sockets_size() const {
  return _impl_.sockets_.size();
}
inline int GCItemGroundAddPacket::sockets_size() const {
  return _internal_sockets_size();
}
inline void GCItemGroundAddPacket::clear_sockets() {
  _impl_.sockets_.Clear();
}
inline int32_t GCItemGroundAddPacket::_internal_sockets(int index) const {
  return _impl_.sockets_.Get(index);
}
inline int32_t GCItemGroundAddPacket::sockets(int index) const {
  // @@protoc_insertion_point(field_get:network.GCItemGroundAddPacket.sockets)
  return _internal_sockets(index);
}
inline void GCItemGroundAddPacket::set_sockets(int index, int32_t value) {
  _impl_.sockets_.Set(index, value);
  // @@protoc_insertion_point(field_set:network.GCItemGroundAddPacket.sockets)
}
inline void GCItemGroundAddPacket::_internal_add_sockets(int32_t value) {
  _impl_.sockets_.Add(value);
}
inline void GCItemGroundAddPacket::add_sockets(int32_t value) {
  _internal_add_sockets(value);
  // @@protoc_insertion_point(field_add:network.GCItemGroundAddPacket.sockets)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
GCItemGroundAddPacket::_internal_sockets() const {
  return _impl_.sockets_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
GCItemGroundAddPacket::sockets() const {
  // @@protoc_insertion_point(field_list:network.GCItemGroundAddPacket.sockets)
  return _internal_sockets();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
GCItemGroundAddPacket::_internal_mutable_sockets() {
  return &_impl_.sockets_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
GCItemGroundAddPacket::mutable_sockets() {
  // @@protoc_insertion_point(field_mutable_list:network.GCItemGroundAddPacket.sockets)
  return _internal_mutable_sockets();
}

// repeated .network.TItemAttribute attributes = 8;
inline int GCItemGroundAddPacket::_internal_attributes_size() const {
  return _impl_.attributes_.size();
}
inline int GCItemGroundAddPacket::attributes_size() const {
  return _internal_attributes_size();
}
inline ::network::TItemAttribute* GCItemGroundAddPacket::mutable_attributes(int index) {
  // @@protoc_insertion_point(field_mutable:network.GCItemGroundAddPacket.attributes)
  return _impl_.attributes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemAttribute >*
GCItemGroundAddPacket::mutable_attributes() {
  // @@protoc_insertion_point(field_mutable_list:network.GCItemGroundAddPacket.attributes)
  return &_impl_.attributes_;
}
inline const ::network::TItemAttribute& GCItemGroundAddPacket::_internal_attributes(int index) const {
  return _impl_.attributes_.Get(index);
}
inline const ::network::TItemAttribute& GCItemGroundAddPacket::attributes(int index) const {
  // @@protoc_insertion_point(field_get:network.GCItemGroundAddPacket.attributes)
  return _internal_attributes(index);
}
inline ::network::TItemAttribute* GCItemGroundAddPacket::_internal_add_attributes() {
  return _impl_.attributes_.Add();
}
inline ::network::TItemAttribute* GCItemGroundAddPacket::add_attributes() {
  ::network::TItemAttribute* _add = _internal_add_attributes();
  // @@protoc_insertion_point(field_add:network.GCItemGroundAddPacket.attributes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemAttribute >&
GCItemGroundAddPacket::attributes() const {
  // @@protoc_insertion_point(field_list:network.GCItemGroundAddPacket.attributes)
  return _impl_.attributes_;
}

// -------------------------------------------------------------------

// GCItemGroundDeletePacket

// uint32 vid = 1;
inline void GCItemGroundDeletePacket::clear_vid() {
  _impl_.vid_ = 0u;
}
inline uint32_t GCItemGroundDeletePacket::_internal_vid() const {
  return _impl_.vid_;
}
inline uint32_t GCItemGroundDeletePacket::vid() const {
  // @@protoc_insertion_point(field_get:network.GCItemGroundDeletePacket.vid)
  return _internal_vid();
}
inline void GCItemGroundDeletePacket::_internal_set_vid(uint32_t value) {
  
  _impl_.vid_ = value;
}
inline void GCItemGroundDeletePacket::set_vid(uint32_t value) {
  _internal_set_vid(value);
  // @@protoc_insertion_point(field_set:network.GCItemGroundDeletePacket.vid)
}

// -------------------------------------------------------------------

// GCItemOwnershipPacket

// uint32 vid = 1;
inline void GCItemOwnershipPacket::clear_vid() {
  _impl_.vid_ = 0u;
}
inline uint32_t GCItemOwnershipPacket::_internal_vid() const {
  return _impl_.vid_;
}
inline uint32_t GCItemOwnershipPacket::vid() const {
  // @@protoc_insertion_point(field_get:network.GCItemOwnershipPacket.vid)
  return _internal_vid();
}
inline void GCItemOwnershipPacket::_internal_set_vid(uint32_t value) {
  
  _impl_.vid_ = value;
}
inline void GCItemOwnershipPacket::set_vid(uint32_t value) {
  _internal_set_vid(value);
  // @@protoc_insertion_point(field_set:network.GCItemOwnershipPacket.vid)
}

// bytes name = 2;
inline void GCItemOwnershipPacket::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GCItemOwnershipPacket::name() const {
  // @@protoc_insertion_point(field_get:network.GCItemOwnershipPacket.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GCItemOwnershipPacket::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GCItemOwnershipPacket.name)
}
inline std::string* GCItemOwnershipPacket::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:network.GCItemOwnershipPacket.name)
  return _s;
}
inline const std::string& GCItemOwnershipPacket::_internal_name() const {
  return _impl_.name_.Get();
}
inline void GCItemOwnershipPacket::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* GCItemOwnershipPacket::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* GCItemOwnershipPacket::release_name() {
  // @@protoc_insertion_point(field_release:network.GCItemOwnershipPacket.name)
  return _impl_.name_.Release();
}
inline void GCItemOwnershipPacket::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GCItemOwnershipPacket.name)
}

// -------------------------------------------------------------------

// GCExchangeStartPacket

// uint32 target_vid = 1;
inline void GCExchangeStartPacket::clear_target_vid() {
  _impl_.target_vid_ = 0u;
}
inline uint32_t GCExchangeStartPacket::_internal_target_vid() const {
  return _impl_.target_vid_;
}
inline uint32_t GCExchangeStartPacket::target_vid() const {
  // @@protoc_insertion_point(field_get:network.GCExchangeStartPacket.target_vid)
  return _internal_target_vid();
}
inline void GCExchangeStartPacket::_internal_set_target_vid(uint32_t value) {
  
  _impl_.target_vid_ = value;
}
inline void GCExchangeStartPacket::set_target_vid(uint32_t value) {
  _internal_set_target_vid(value);
  // @@protoc_insertion_point(field_set:network.GCExchangeStartPacket.target_vid)
}

// -------------------------------------------------------------------

// GCExchangeItemAddPacket

// uint32 display_pos = 1;
inline void GCExchangeItemAddPacket::clear_display_pos() {
  _impl_.display_pos_ = 0u;
}
inline uint32_t GCExchangeItemAddPacket::_internal_display_pos() const {
  return _impl_.display_pos_;
}
inline uint32_t GCExchangeItemAddPacket::display_pos() const {
  // @@protoc_insertion_point(field_get:network.GCExchangeItemAddPacket.display_pos)
  return _internal_display_pos();
}
inline void GCExchangeItemAddPacket::_internal_set_display_pos(uint32_t value) {
  
  _impl_.display_pos_ = value;
}
inline void GCExchangeItemAddPacket::set_display_pos(uint32_t value) {
  _internal_set_display_pos(value);
  // @@protoc_insertion_point(field_set:network.GCExchangeItemAddPacket.display_pos)
}

// .network.TItemData data = 2;
inline bool GCExchangeItemAddPacket::_internal_has_data() const {
  return this != internal_default_instance() && _impl_.data_ != nullptr;
}
inline bool GCExchangeItemAddPacket::has_data() const {
  return _internal_has_data();
}
inline const ::network::TItemData& GCExchangeItemAddPacket::_internal_data() const {
  const ::network::TItemData* p = _impl_.data_;
  return p != nullptr ? *p : reinterpret_cast<const ::network::TItemData&>(
      ::network::_TItemData_default_instance_);
}
inline const ::network::TItemData& GCExchangeItemAddPacket::data() const {
  // @@protoc_insertion_point(field_get:network.GCExchangeItemAddPacket.data)
  return _internal_data();
}
inline void GCExchangeItemAddPacket::unsafe_arena_set_allocated_data(
    ::network::TItemData* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.data_);
  }
  _impl_.data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:network.GCExchangeItemAddPacket.data)
}
inline ::network::TItemData* GCExchangeItemAddPacket::release_data() {
  
  ::network::TItemData* temp = _impl_.data_;
  _impl_.data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::network::TItemData* GCExchangeItemAddPacket::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:network.GCExchangeItemAddPacket.data)
  
  ::network::TItemData* temp = _impl_.data_;
  _impl_.data_ = nullptr;
  return temp;
}
inline ::network::TItemData* GCExchangeItemAddPacket::_internal_mutable_data() {
  
  if (_impl_.data_ == nullptr) {
    auto* p = CreateMaybeMessage<::network::TItemData>(GetArenaForAllocation());
    _impl_.data_ = p;
  }
  return _impl_.data_;
}
inline ::network::TItemData* GCExchangeItemAddPacket::mutable_data() {
  ::network::TItemData* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:network.GCExchangeItemAddPacket.data)
  return _msg;
}
inline void GCExchangeItemAddPacket::set_allocated_data(::network::TItemData* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.data_);
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data));
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.data_ = data;
  // @@protoc_insertion_point(field_set_allocated:network.GCExchangeItemAddPacket.data)
}

// bool is_me = 3;
inline void GCExchangeItemAddPacket::clear_is_me() {
  _impl_.is_me_ = false;
}
inline bool GCExchangeItemAddPacket::_internal_is_me() const {
  return _impl_.is_me_;
}
inline bool GCExchangeItemAddPacket::is_me() const {
  // @@protoc_insertion_point(field_get:network.GCExchangeItemAddPacket.is_me)
  return _internal_is_me();
}
inline void GCExchangeItemAddPacket::_internal_set_is_me(bool value) {
  
  _impl_.is_me_ = value;
}
inline void GCExchangeItemAddPacket::set_is_me(bool value) {
  _internal_set_is_me(value);
  // @@protoc_insertion_point(field_set:network.GCExchangeItemAddPacket.is_me)
}

// -------------------------------------------------------------------

// GCExchangeItemDelPacket

// uint32 display_pos = 1;
inline void GCExchangeItemDelPacket::clear_display_pos() {
  _impl_.display_pos_ = 0u;
}
inline uint32_t GCExchangeItemDelPacket::_internal_display_pos() const {
  return _impl_.display_pos_;
}
inline uint32_t GCExchangeItemDelPacket::display_pos() const {
  // @@protoc_insertion_point(field_get:network.GCExchangeItemDelPacket.display_pos)
  return _internal_display_pos();
}
inline void GCExchangeItemDelPacket::_internal_set_display_pos(uint32_t value) {
  
  _impl_.display_pos_ = value;
}
inline void GCExchangeItemDelPacket::set_display_pos(uint32_t value) {
  _internal_set_display_pos(value);
  // @@protoc_insertion_point(field_set:network.GCExchangeItemDelPacket.display_pos)
}

// .network.TItemPos inventory_pos = 2;
inline bool GCExchangeItemDelPacket::_internal_has_inventory_pos() const {
  return this != internal_default_instance() && _impl_.inventory_pos_ != nullptr;
}
inline bool GCExchangeItemDelPacket::has_inventory_pos() const {
  return _internal_has_inventory_pos();
}
inline const ::network::TItemPos& GCExchangeItemDelPacket::_internal_inventory_pos() const {
  const ::network::TItemPos* p = _impl_.inventory_pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::network::TItemPos&>(
      ::network::_TItemPos_default_instance_);
}
inline const ::network::TItemPos& GCExchangeItemDelPacket::inventory_pos() const {
  // @@protoc_insertion_point(field_get:network.GCExchangeItemDelPacket.inventory_pos)
  return _internal_inventory_pos();
}
inline void GCExchangeItemDelPacket::unsafe_arena_set_allocated_inventory_pos(
    ::network::TItemPos* inventory_pos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.inventory_pos_);
  }
  _impl_.inventory_pos_ = inventory_pos;
  if (inventory_pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:network.GCExchangeItemDelPacket.inventory_pos)
}
inline ::network::TItemPos* GCExchangeItemDelPacket::release_inventory_pos() {
  
  ::network::TItemPos* temp = _impl_.inventory_pos_;
  _impl_.inventory_pos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::network::TItemPos* GCExchangeItemDelPacket::unsafe_arena_release_inventory_pos() {
  // @@protoc_insertion_point(field_release:network.GCExchangeItemDelPacket.inventory_pos)
  
  ::network::TItemPos* temp = _impl_.inventory_pos_;
  _impl_.inventory_pos_ = nullptr;
  return temp;
}
inline ::network::TItemPos* GCExchangeItemDelPacket::_internal_mutable_inventory_pos() {
  
  if (_impl_.inventory_pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::network::TItemPos>(GetArenaForAllocation());
    _impl_.inventory_pos_ = p;
  }
  return _impl_.inventory_pos_;
}
inline ::network::TItemPos* GCExchangeItemDelPacket::mutable_inventory_pos() {
  ::network::TItemPos* _msg = _internal_mutable_inventory_pos();
  // @@protoc_insertion_point(field_mutable:network.GCExchangeItemDelPacket.inventory_pos)
  return _msg;
}
inline void GCExchangeItemDelPacket::set_allocated_inventory_pos(::network::TItemPos* inventory_pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.inventory_pos_);
  }
  if (inventory_pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(inventory_pos));
    if (message_arena != submessage_arena) {
      inventory_pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inventory_pos, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.inventory_pos_ = inventory_pos;
  // @@protoc_insertion_point(field_set_allocated:network.GCExchangeItemDelPacket.inventory_pos)
}

// bool is_me = 3;
inline void GCExchangeItemDelPacket::clear_is_me() {
  _impl_.is_me_ = false;
}
inline bool GCExchangeItemDelPacket::_internal_is_me() const {
  return _impl_.is_me_;
}
inline bool GCExchangeItemDelPacket::is_me() const {
  // @@protoc_insertion_point(field_get:network.GCExchangeItemDelPacket.is_me)
  return _internal_is_me();
}
inline void GCExchangeItemDelPacket::_internal_set_is_me(bool value) {
  
  _impl_.is_me_ = value;
}
inline void GCExchangeItemDelPacket::set_is_me(bool value) {
  _internal_set_is_me(value);
  // @@protoc_insertion_point(field_set:network.GCExchangeItemDelPacket.is_me)
}

// -------------------------------------------------------------------

// GCExchangeGoldAddPacket

// int64 gold = 1;
inline void GCExchangeGoldAddPacket::clear_gold() {
  _impl_.gold_ = int64_t{0};
}
inline int64_t GCExchangeGoldAddPacket::_internal_gold() const {
  return _impl_.gold_;
}
inline int64_t GCExchangeGoldAddPacket::gold() const {
  // @@protoc_insertion_point(field_get:network.GCExchangeGoldAddPacket.gold)
  return _internal_gold();
}
inline void GCExchangeGoldAddPacket::_internal_set_gold(int64_t value) {
  
  _impl_.gold_ = value;
}
inline void GCExchangeGoldAddPacket::set_gold(int64_t value) {
  _internal_set_gold(value);
  // @@protoc_insertion_point(field_set:network.GCExchangeGoldAddPacket.gold)
}

// bool is_me = 2;
inline void GCExchangeGoldAddPacket::clear_is_me() {
  _impl_.is_me_ = false;
}
inline bool GCExchangeGoldAddPacket::_internal_is_me() const {
  return _impl_.is_me_;
}
inline bool GCExchangeGoldAddPacket::is_me() const {
  // @@protoc_insertion_point(field_get:network.GCExchangeGoldAddPacket.is_me)
  return _internal_is_me();
}
inline void GCExchangeGoldAddPacket::_internal_set_is_me(bool value) {
  
  _impl_.is_me_ = value;
}
inline void GCExchangeGoldAddPacket::set_is_me(bool value) {
  _internal_set_is_me(value);
  // @@protoc_insertion_point(field_set:network.GCExchangeGoldAddPacket.is_me)
}

// -------------------------------------------------------------------

// GCExchangeAcceptPacket

// bool accept = 1;
inline void GCExchangeAcceptPacket::clear_accept() {
  _impl_.accept_ = false;
}
inline bool GCExchangeAcceptPacket::_internal_accept() const {
  return _impl_.accept_;
}
inline bool GCExchangeAcceptPacket::accept() const {
  // @@protoc_insertion_point(field_get:network.GCExchangeAcceptPacket.accept)
  return _internal_accept();
}
inline void GCExchangeAcceptPacket::_internal_set_accept(bool value) {
  
  _impl_.accept_ = value;
}
inline void GCExchangeAcceptPacket::set_accept(bool value) {
  _internal_set_accept(value);
  // @@protoc_insertion_point(field_set:network.GCExchangeAcceptPacket.accept)
}

// bool is_me = 2;
inline void GCExchangeAcceptPacket::clear_is_me() {
  _impl_.is_me_ = false;
}
inline bool GCExchangeAcceptPacket::_internal_is_me() const {
  return _impl_.is_me_;
}
inline bool GCExchangeAcceptPacket::is_me() const {
  // @@protoc_insertion_point(field_get:network.GCExchangeAcceptPacket.is_me)
  return _internal_is_me();
}
inline void GCExchangeAcceptPacket::_internal_set_is_me(bool value) {
  
  _impl_.is_me_ = value;
}
inline void GCExchangeAcceptPacket::set_is_me(bool value) {
  _internal_set_is_me(value);
  // @@protoc_insertion_point(field_set:network.GCExchangeAcceptPacket.is_me)
}

// -------------------------------------------------------------------

// GCShopStartPacket

// uint32 vid = 1;
inline void GCShopStartPacket::clear_vid() {
  _impl_.vid_ = 0u;
}
inline uint32_t GCShopStartPacket::_internal_vid() const {
  return _impl_.vid_;
}
inline uint32_t GCShopStartPacket::vid() const {
  // @@protoc_insertion_point(field_get:network.GCShopStartPacket.vid)
  return _internal_vid();
}
inline void GCShopStartPacket::_internal_set_vid(uint32_t value) {
  
  _impl_.vid_ = value;
}
inline void GCShopStartPacket::set_vid(uint32_t value) {
  _internal_set_vid(value);
  // @@protoc_insertion_point(field_set:network.GCShopStartPacket.vid)
}

// repeated .network.TShopItemTable items = 2;
inline int GCShopStartPacket::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int GCShopStartPacket::items_size() const {
  return _internal_items_size();
}
inline ::network::TShopItemTable* GCShopStartPacket::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:network.GCShopStartPacket.items)
  return _impl_.items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TShopItemTable >*
GCShopStartPacket::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:network.GCShopStartPacket.items)
  return &_impl_.items_;
}
inline const ::network::TShopItemTable& GCShopStartPacket::_internal_items(int index) const {
  return _impl_.items_.Get(index);
}
inline const ::network::TShopItemTable& GCShopStartPacket::items(int index) const {
  // @@protoc_insertion_point(field_get:network.GCShopStartPacket.items)
  return _internal_items(index);
}
inline ::network::TShopItemTable* GCShopStartPacket::_internal_add_items() {
  return _impl_.items_.Add();
}
inline ::network::TShopItemTable* GCShopStartPacket::add_items() {
  ::network::TShopItemTable* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:network.GCShopStartPacket.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TShopItemTable >&
GCShopStartPacket::items() const {
  // @@protoc_insertion_point(field_list:network.GCShopStartPacket.items)
  return _impl_.items_;
}

// -------------------------------------------------------------------

// GCShopExStartPacket

// uint32 vid = 1;
inline void GCShopExStartPacket::clear_vid() {
  _impl_.vid_ = 0u;
}
inline uint32_t GCShopExStartPacket::_internal_vid() const {
  return _impl_.vid_;
}
inline uint32_t GCShopExStartPacket::vid() const {
  // @@protoc_insertion_point(field_get:network.GCShopExStartPacket.vid)
  return _internal_vid();
}
inline void GCShopExStartPacket::_internal_set_vid(uint32_t value) {
  
  _impl_.vid_ = value;
}
inline void GCShopExStartPacket::set_vid(uint32_t value) {
  _internal_set_vid(value);
  // @@protoc_insertion_point(field_set:network.GCShopExStartPacket.vid)
}

// repeated .network.TShopExTabData tabs = 2;
inline int GCShopExStartPacket::_internal_tabs_size() const {
  return _impl_.tabs_.size();
}
inline int GCShopExStartPacket::tabs_size() const {
  return _internal_tabs_size();
}
inline ::network::TShopExTabData* GCShopExStartPacket::mutable_tabs(int index) {
  // @@protoc_insertion_point(field_mutable:network.GCShopExStartPacket.tabs)
  return _impl_.tabs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TShopExTabData >*
GCShopExStartPacket::mutable_tabs() {
  // @@protoc_insertion_point(field_mutable_list:network.GCShopExStartPacket.tabs)
  return &_impl_.tabs_;
}
inline const ::network::TShopExTabData& GCShopExStartPacket::_internal_tabs(int index) const {
  return _impl_.tabs_.Get(index);
}
inline const ::network::TShopExTabData& GCShopExStartPacket::tabs(int index) const {
  // @@protoc_insertion_point(field_get:network.GCShopExStartPacket.tabs)
  return _internal_tabs(index);
}
inline ::network::TShopExTabData* GCShopExStartPacket::_internal_add_tabs() {
  return _impl_.tabs_.Add();
}
inline ::network::TShopExTabData* GCShopExStartPacket::add_tabs() {
  ::network::TShopExTabData* _add = _internal_add_tabs();
  // @@protoc_insertion_point(field_add:network.GCShopExStartPacket.tabs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TShopExTabData >&
GCShopExStartPacket::tabs() const {
  // @@protoc_insertion_point(field_list:network.GCShopExStartPacket.tabs)
  return _impl_.tabs_;
}

// uint32 points = 3;
inline void GCShopExStartPacket::clear_points() {
  _impl_.points_ = 0u;
}
inline uint32_t GCShopExStartPacket::_internal_points() const {
  return _impl_.points_;
}
inline uint32_t GCShopExStartPacket::points() const {
  // @@protoc_insertion_point(field_get:network.GCShopExStartPacket.points)
  return _internal_points();
}
inline void GCShopExStartPacket::_internal_set_points(uint32_t value) {
  
  _impl_.points_ = value;
}
inline void GCShopExStartPacket::set_points(uint32_t value) {
  _internal_set_points(value);
  // @@protoc_insertion_point(field_set:network.GCShopExStartPacket.points)
}

// int32 cur_limit = 4;
inline void GCShopExStartPacket::clear_cur_limit() {
  _impl_.cur_limit_ = 0;
}
inline int32_t GCShopExStartPacket::_internal_cur_limit() const {
  return _impl_.cur_limit_;
}
inline int32_t GCShopExStartPacket::cur_limit() const {
  // @@protoc_insertion_point(field_get:network.GCShopExStartPacket.cur_limit)
  return _internal_cur_limit();
}
inline void GCShopExStartPacket::_internal_set_cur_limit(int32_t value) {
  
  _impl_.cur_limit_ = value;
}
inline void GCShopExStartPacket::set_cur_limit(int32_t value) {
  _internal_set_cur_limit(value);
  // @@protoc_insertion_point(field_set:network.GCShopExStartPacket.cur_limit)
}

// int32 max_limit = 5;
inline void GCShopExStartPacket::clear_max_limit() {
  _impl_.max_limit_ = 0;
}
inline int32_t GCShopExStartPacket::_internal_max_limit() const {
  return _impl_.max_limit_;
}
inline int32_t GCShopExStartPacket::max_limit() const {
  // @@protoc_insertion_point(field_get:network.GCShopExStartPacket.max_limit)
  return _internal_max_limit();
}
inline void GCShopExStartPacket::_internal_set_max_limit(int32_t value) {
  
  _impl_.max_limit_ = value;
}
inline void GCShopExStartPacket::set_max_limit(int32_t value) {
  _internal_set_max_limit(value);
  // @@protoc_insertion_point(field_set:network.GCShopExStartPacket.max_limit)
}

// -------------------------------------------------------------------

// GCShopUpdateItemPacket

// .network.TShopItemTable item = 1;
inline bool GCShopUpdateItemPacket::_internal_has_item() const {
  return this != internal_default_instance() && _impl_.item_ != nullptr;
}
inline bool GCShopUpdateItemPacket::has_item() const {
  return _internal_has_item();
}
inline const ::network::TShopItemTable& GCShopUpdateItemPacket::_internal_item() const {
  const ::network::TShopItemTable* p = _impl_.item_;
  return p != nullptr ? *p : reinterpret_cast<const ::network::TShopItemTable&>(
      ::network::_TShopItemTable_default_instance_);
}
inline const ::network::TShopItemTable& GCShopUpdateItemPacket::item() const {
  // @@protoc_insertion_point(field_get:network.GCShopUpdateItemPacket.item)
  return _internal_item();
}
inline void GCShopUpdateItemPacket::unsafe_arena_set_allocated_item(
    ::network::TShopItemTable* item) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.item_);
  }
  _impl_.item_ = item;
  if (item) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:network.GCShopUpdateItemPacket.item)
}
inline ::network::TShopItemTable* GCShopUpdateItemPacket::release_item() {
  
  ::network::TShopItemTable* temp = _impl_.item_;
  _impl_.item_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::network::TShopItemTable* GCShopUpdateItemPacket::unsafe_arena_release_item() {
  // @@protoc_insertion_point(field_release:network.GCShopUpdateItemPacket.item)
  
  ::network::TShopItemTable* temp = _impl_.item_;
  _impl_.item_ = nullptr;
  return temp;
}
inline ::network::TShopItemTable* GCShopUpdateItemPacket::_internal_mutable_item() {
  
  if (_impl_.item_ == nullptr) {
    auto* p = CreateMaybeMessage<::network::TShopItemTable>(GetArenaForAllocation());
    _impl_.item_ = p;
  }
  return _impl_.item_;
}
inline ::network::TShopItemTable* GCShopUpdateItemPacket::mutable_item() {
  ::network::TShopItemTable* _msg = _internal_mutable_item();
  // @@protoc_insertion_point(field_mutable:network.GCShopUpdateItemPacket.item)
  return _msg;
}
inline void GCShopUpdateItemPacket::set_allocated_item(::network::TShopItemTable* item) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.item_);
  }
  if (item) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(item));
    if (message_arena != submessage_arena) {
      item = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, item, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.item_ = item;
  // @@protoc_insertion_point(field_set_allocated:network.GCShopUpdateItemPacket.item)
}

// -------------------------------------------------------------------

// GCShopSignPacket

// uint32 vid = 1;
inline void GCShopSignPacket::clear_vid() {
  _impl_.vid_ = 0u;
}
inline uint32_t GCShopSignPacket::_internal_vid() const {
  return _impl_.vid_;
}
inline uint32_t GCShopSignPacket::vid() const {
  // @@protoc_insertion_point(field_get:network.GCShopSignPacket.vid)
  return _internal_vid();
}
inline void GCShopSignPacket::_internal_set_vid(uint32_t value) {
  
  _impl_.vid_ = value;
}
inline void GCShopSignPacket::set_vid(uint32_t value) {
  _internal_set_vid(value);
  // @@protoc_insertion_point(field_set:network.GCShopSignPacket.vid)
}

// bytes sign = 2;
inline void GCShopSignPacket::clear_sign() {
  _impl_.sign_.ClearToEmpty();
}
inline const std::string& GCShopSignPacket::sign() const {
  // @@protoc_insertion_point(field_get:network.GCShopSignPacket.sign)
  return _internal_sign();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GCShopSignPacket::set_sign(ArgT0&& arg0, ArgT... args) {
 
 _impl_.sign_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GCShopSignPacket.sign)
}
inline std::string* GCShopSignPacket::mutable_sign() {
  std::string* _s = _internal_mutable_sign();
  // @@protoc_insertion_point(field_mutable:network.GCShopSignPacket.sign)
  return _s;
}
inline const std::string& GCShopSignPacket::_internal_sign() const {
  return _impl_.sign_.Get();
}
inline void GCShopSignPacket::_internal_set_sign(const std::string& value) {
  
  _impl_.sign_.Set(value, GetArenaForAllocation());
}
inline std::string* GCShopSignPacket::_internal_mutable_sign() {
  
  return _impl_.sign_.Mutable(GetArenaForAllocation());
}
inline std::string* GCShopSignPacket::release_sign() {
  // @@protoc_insertion_point(field_release:network.GCShopSignPacket.sign)
  return _impl_.sign_.Release();
}
inline void GCShopSignPacket::set_allocated_sign(std::string* sign) {
  if (sign != nullptr) {
    
  } else {
    
  }
  _impl_.sign_.SetAllocated(sign, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sign_.IsDefault()) {
    _impl_.sign_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GCShopSignPacket.sign)
}

// float red = 3;
inline void GCShopSignPacket::clear_red() {
  _impl_.red_ = 0;
}
inline float GCShopSignPacket::_internal_red() const {
  return _impl_.red_;
}
inline float GCShopSignPacket::red() const {
  // @@protoc_insertion_point(field_get:network.GCShopSignPacket.red)
  return _internal_red();
}
inline void GCShopSignPacket::_internal_set_red(float value) {
  
  _impl_.red_ = value;
}
inline void GCShopSignPacket::set_red(float value) {
  _internal_set_red(value);
  // @@protoc_insertion_point(field_set:network.GCShopSignPacket.red)
}

// float green = 4;
inline void GCShopSignPacket::clear_green() {
  _impl_.green_ = 0;
}
inline float GCShopSignPacket::_internal_green() const {
  return _impl_.green_;
}
inline float GCShopSignPacket::green() const {
  // @@protoc_insertion_point(field_get:network.GCShopSignPacket.green)
  return _internal_green();
}
inline void GCShopSignPacket::_internal_set_green(float value) {
  
  _impl_.green_ = value;
}
inline void GCShopSignPacket::set_green(float value) {
  _internal_set_green(value);
  // @@protoc_insertion_point(field_set:network.GCShopSignPacket.green)
}

// float blue = 5;
inline void GCShopSignPacket::clear_blue() {
  _impl_.blue_ = 0;
}
inline float GCShopSignPacket::_internal_blue() const {
  return _impl_.blue_;
}
inline float GCShopSignPacket::blue() const {
  // @@protoc_insertion_point(field_get:network.GCShopSignPacket.blue)
  return _internal_blue();
}
inline void GCShopSignPacket::_internal_set_blue(float value) {
  
  _impl_.blue_ = value;
}
inline void GCShopSignPacket::set_blue(float value) {
  _internal_set_blue(value);
  // @@protoc_insertion_point(field_set:network.GCShopSignPacket.blue)
}

// uint32 style = 6;
inline void GCShopSignPacket::clear_style() {
  _impl_.style_ = 0u;
}
inline uint32_t GCShopSignPacket::_internal_style() const {
  return _impl_.style_;
}
inline uint32_t GCShopSignPacket::style() const {
  // @@protoc_insertion_point(field_get:network.GCShopSignPacket.style)
  return _internal_style();
}
inline void GCShopSignPacket::_internal_set_style(uint32_t value) {
  
  _impl_.style_ = value;
}
inline void GCShopSignPacket::set_style(uint32_t value) {
  _internal_set_style(value);
  // @@protoc_insertion_point(field_set:network.GCShopSignPacket.style)
}

// -------------------------------------------------------------------

// GCQuestInfoPacket

// uint32 index = 1;
inline void GCQuestInfoPacket::clear_index() {
  _impl_.index_ = 0u;
}
inline uint32_t GCQuestInfoPacket::_internal_index() const {
  return _impl_.index_;
}
inline uint32_t GCQuestInfoPacket::index() const {
  // @@protoc_insertion_point(field_get:network.GCQuestInfoPacket.index)
  return _internal_index();
}
inline void GCQuestInfoPacket::_internal_set_index(uint32_t value) {
  
  _impl_.index_ = value;
}
inline void GCQuestInfoPacket::set_index(uint32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:network.GCQuestInfoPacket.index)
}

// uint32 flag = 2;
inline void GCQuestInfoPacket::clear_flag() {
  _impl_.flag_ = 0u;
}
inline uint32_t GCQuestInfoPacket::_internal_flag() const {
  return _impl_.flag_;
}
inline uint32_t GCQuestInfoPacket::flag() const {
  // @@protoc_insertion_point(field_get:network.GCQuestInfoPacket.flag)
  return _internal_flag();
}
inline void GCQuestInfoPacket::_internal_set_flag(uint32_t value) {
  
  _impl_.flag_ = value;
}
inline void GCQuestInfoPacket::set_flag(uint32_t value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:network.GCQuestInfoPacket.flag)
}

// bool is_begin = 3;
inline void GCQuestInfoPacket::clear_is_begin() {
  _impl_.is_begin_ = false;
}
inline bool GCQuestInfoPacket::_internal_is_begin() const {
  return _impl_.is_begin_;
}
inline bool GCQuestInfoPacket::is_begin() const {
  // @@protoc_insertion_point(field_get:network.GCQuestInfoPacket.is_begin)
  return _internal_is_begin();
}
inline void GCQuestInfoPacket::_internal_set_is_begin(bool value) {
  
  _impl_.is_begin_ = value;
}
inline void GCQuestInfoPacket::set_is_begin(bool value) {
  _internal_set_is_begin(value);
  // @@protoc_insertion_point(field_set:network.GCQuestInfoPacket.is_begin)
}

// bytes title = 4;
inline void GCQuestInfoPacket::clear_title() {
  _impl_.title_.ClearToEmpty();
}
inline const std::string& GCQuestInfoPacket::title() const {
  // @@protoc_insertion_point(field_get:network.GCQuestInfoPacket.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GCQuestInfoPacket::set_title(ArgT0&& arg0, ArgT... args) {
 
 _impl_.title_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GCQuestInfoPacket.title)
}
inline std::string* GCQuestInfoPacket::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:network.GCQuestInfoPacket.title)
  return _s;
}
inline const std::string& GCQuestInfoPacket::_internal_title() const {
  return _impl_.title_.Get();
}
inline void GCQuestInfoPacket::_internal_set_title(const std::string& value) {
  
  _impl_.title_.Set(value, GetArenaForAllocation());
}
inline std::string* GCQuestInfoPacket::_internal_mutable_title() {
  
  return _impl_.title_.Mutable(GetArenaForAllocation());
}
inline std::string* GCQuestInfoPacket::release_title() {
  // @@protoc_insertion_point(field_release:network.GCQuestInfoPacket.title)
  return _impl_.title_.Release();
}
inline void GCQuestInfoPacket::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  _impl_.title_.SetAllocated(title, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.title_.IsDefault()) {
    _impl_.title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GCQuestInfoPacket.title)
}

// uint32 cat_id = 5;
inline void GCQuestInfoPacket::clear_cat_id() {
  _impl_.cat_id_ = 0u;
}
inline uint32_t GCQuestInfoPacket::_internal_cat_id() const {
  return _impl_.cat_id_;
}
inline uint32_t GCQuestInfoPacket::cat_id() const {
  // @@protoc_insertion_point(field_get:network.GCQuestInfoPacket.cat_id)
  return _internal_cat_id();
}
inline void GCQuestInfoPacket::_internal_set_cat_id(uint32_t value) {
  
  _impl_.cat_id_ = value;
}
inline void GCQuestInfoPacket::set_cat_id(uint32_t value) {
  _internal_set_cat_id(value);
  // @@protoc_insertion_point(field_set:network.GCQuestInfoPacket.cat_id)
}

// bytes clock_name = 6;
inline void GCQuestInfoPacket::clear_clock_name() {
  _impl_.clock_name_.ClearToEmpty();
}
inline const std::string& GCQuestInfoPacket::clock_name() const {
  // @@protoc_insertion_point(field_get:network.GCQuestInfoPacket.clock_name)
  return _internal_clock_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GCQuestInfoPacket::set_clock_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.clock_name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GCQuestInfoPacket.clock_name)
}
inline std::string* GCQuestInfoPacket::mutable_clock_name() {
  std::string* _s = _internal_mutable_clock_name();
  // @@protoc_insertion_point(field_mutable:network.GCQuestInfoPacket.clock_name)
  return _s;
}
inline const std::string& GCQuestInfoPacket::_internal_clock_name() const {
  return _impl_.clock_name_.Get();
}
inline void GCQuestInfoPacket::_internal_set_clock_name(const std::string& value) {
  
  _impl_.clock_name_.Set(value, GetArenaForAllocation());
}
inline std::string* GCQuestInfoPacket::_internal_mutable_clock_name() {
  
  return _impl_.clock_name_.Mutable(GetArenaForAllocation());
}
inline std::string* GCQuestInfoPacket::release_clock_name() {
  // @@protoc_insertion_point(field_release:network.GCQuestInfoPacket.clock_name)
  return _impl_.clock_name_.Release();
}
inline void GCQuestInfoPacket::set_allocated_clock_name(std::string* clock_name) {
  if (clock_name != nullptr) {
    
  } else {
    
  }
  _impl_.clock_name_.SetAllocated(clock_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.clock_name_.IsDefault()) {
    _impl_.clock_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GCQuestInfoPacket.clock_name)
}

// int32 clock_value = 7;
inline void GCQuestInfoPacket::clear_clock_value() {
  _impl_.clock_value_ = 0;
}
inline int32_t GCQuestInfoPacket::_internal_clock_value() const {
  return _impl_.clock_value_;
}
inline int32_t GCQuestInfoPacket::clock_value() const {
  // @@protoc_insertion_point(field_get:network.GCQuestInfoPacket.clock_value)
  return _internal_clock_value();
}
inline void GCQuestInfoPacket::_internal_set_clock_value(int32_t value) {
  
  _impl_.clock_value_ = value;
}
inline void GCQuestInfoPacket::set_clock_value(int32_t value) {
  _internal_set_clock_value(value);
  // @@protoc_insertion_point(field_set:network.GCQuestInfoPacket.clock_value)
}

// bytes counter_name = 8;
inline void GCQuestInfoPacket::clear_counter_name() {
  _impl_.counter_name_.ClearToEmpty();
}
inline const std::string& GCQuestInfoPacket::counter_name() const {
  // @@protoc_insertion_point(field_get:network.GCQuestInfoPacket.counter_name)
  return _internal_counter_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GCQuestInfoPacket::set_counter_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.counter_name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GCQuestInfoPacket.counter_name)
}
inline std::string* GCQuestInfoPacket::mutable_counter_name() {
  std::string* _s = _internal_mutable_counter_name();
  // @@protoc_insertion_point(field_mutable:network.GCQuestInfoPacket.counter_name)
  return _s;
}
inline const std::string& GCQuestInfoPacket::_internal_counter_name() const {
  return _impl_.counter_name_.Get();
}
inline void GCQuestInfoPacket::_internal_set_counter_name(const std::string& value) {
  
  _impl_.counter_name_.Set(value, GetArenaForAllocation());
}
inline std::string* GCQuestInfoPacket::_internal_mutable_counter_name() {
  
  return _impl_.counter_name_.Mutable(GetArenaForAllocation());
}
inline std::string* GCQuestInfoPacket::release_counter_name() {
  // @@protoc_insertion_point(field_release:network.GCQuestInfoPacket.counter_name)
  return _impl_.counter_name_.Release();
}
inline void GCQuestInfoPacket::set_allocated_counter_name(std::string* counter_name) {
  if (counter_name != nullptr) {
    
  } else {
    
  }
  _impl_.counter_name_.SetAllocated(counter_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.counter_name_.IsDefault()) {
    _impl_.counter_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GCQuestInfoPacket.counter_name)
}

// int32 counter_value = 9;
inline void GCQuestInfoPacket::clear_counter_value() {
  _impl_.counter_value_ = 0;
}
inline int32_t GCQuestInfoPacket::_internal_counter_value() const {
  return _impl_.counter_value_;
}
inline int32_t GCQuestInfoPacket::counter_value() const {
  // @@protoc_insertion_point(field_get:network.GCQuestInfoPacket.counter_value)
  return _internal_counter_value();
}
inline void GCQuestInfoPacket::_internal_set_counter_value(int32_t value) {
  
  _impl_.counter_value_ = value;
}
inline void GCQuestInfoPacket::set_counter_value(int32_t value) {
  _internal_set_counter_value(value);
  // @@protoc_insertion_point(field_set:network.GCQuestInfoPacket.counter_value)
}

// bytes icon_file_name = 10;
inline void GCQuestInfoPacket::clear_icon_file_name() {
  _impl_.icon_file_name_.ClearToEmpty();
}
inline const std::string& GCQuestInfoPacket::icon_file_name() const {
  // @@protoc_insertion_point(field_get:network.GCQuestInfoPacket.icon_file_name)
  return _internal_icon_file_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GCQuestInfoPacket::set_icon_file_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.icon_file_name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GCQuestInfoPacket.icon_file_name)
}
inline std::string* GCQuestInfoPacket::mutable_icon_file_name() {
  std::string* _s = _internal_mutable_icon_file_name();
  // @@protoc_insertion_point(field_mutable:network.GCQuestInfoPacket.icon_file_name)
  return _s;
}
inline const std::string& GCQuestInfoPacket::_internal_icon_file_name() const {
  return _impl_.icon_file_name_.Get();
}
inline void GCQuestInfoPacket::_internal_set_icon_file_name(const std::string& value) {
  
  _impl_.icon_file_name_.Set(value, GetArenaForAllocation());
}
inline std::string* GCQuestInfoPacket::_internal_mutable_icon_file_name() {
  
  return _impl_.icon_file_name_.Mutable(GetArenaForAllocation());
}
inline std::string* GCQuestInfoPacket::release_icon_file_name() {
  // @@protoc_insertion_point(field_release:network.GCQuestInfoPacket.icon_file_name)
  return _impl_.icon_file_name_.Release();
}
inline void GCQuestInfoPacket::set_allocated_icon_file_name(std::string* icon_file_name) {
  if (icon_file_name != nullptr) {
    
  } else {
    
  }
  _impl_.icon_file_name_.SetAllocated(icon_file_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.icon_file_name_.IsDefault()) {
    _impl_.icon_file_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GCQuestInfoPacket.icon_file_name)
}

// -------------------------------------------------------------------

// GCScriptPacket

// uint32 skin = 1;
inline void GCScriptPacket::clear_skin() {
  _impl_.skin_ = 0u;
}
inline uint32_t GCScriptPacket::_internal_skin() const {
  return _impl_.skin_;
}
inline uint32_t GCScriptPacket::skin() const {
  // @@protoc_insertion_point(field_get:network.GCScriptPacket.skin)
  return _internal_skin();
}
inline void GCScriptPacket::_internal_set_skin(uint32_t value) {
  
  _impl_.skin_ = value;
}
inline void GCScriptPacket::set_skin(uint32_t value) {
  _internal_set_skin(value);
  // @@protoc_insertion_point(field_set:network.GCScriptPacket.skin)
}

// bytes script = 2;
inline void GCScriptPacket::clear_script() {
  _impl_.script_.ClearToEmpty();
}
inline const std::string& GCScriptPacket::script() const {
  // @@protoc_insertion_point(field_get:network.GCScriptPacket.script)
  return _internal_script();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GCScriptPacket::set_script(ArgT0&& arg0, ArgT... args) {
 
 _impl_.script_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GCScriptPacket.script)
}
inline std::string* GCScriptPacket::mutable_script() {
  std::string* _s = _internal_mutable_script();
  // @@protoc_insertion_point(field_mutable:network.GCScriptPacket.script)
  return _s;
}
inline const std::string& GCScriptPacket::_internal_script() const {
  return _impl_.script_.Get();
}
inline void GCScriptPacket::_internal_set_script(const std::string& value) {
  
  _impl_.script_.Set(value, GetArenaForAllocation());
}
inline std::string* GCScriptPacket::_internal_mutable_script() {
  
  return _impl_.script_.Mutable(GetArenaForAllocation());
}
inline std::string* GCScriptPacket::release_script() {
  // @@protoc_insertion_point(field_release:network.GCScriptPacket.script)
  return _impl_.script_.Release();
}
inline void GCScriptPacket::set_allocated_script(std::string* script) {
  if (script != nullptr) {
    
  } else {
    
  }
  _impl_.script_.SetAllocated(script, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.script_.IsDefault()) {
    _impl_.script_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GCScriptPacket.script)
}

// -------------------------------------------------------------------

// GCQuestConfirmPacket

// bytes message = 1;
inline void GCQuestConfirmPacket::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& GCQuestConfirmPacket::message() const {
  // @@protoc_insertion_point(field_get:network.GCQuestConfirmPacket.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GCQuestConfirmPacket::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GCQuestConfirmPacket.message)
}
inline std::string* GCQuestConfirmPacket::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:network.GCQuestConfirmPacket.message)
  return _s;
}
inline const std::string& GCQuestConfirmPacket::_internal_message() const {
  return _impl_.message_.Get();
}
inline void GCQuestConfirmPacket::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* GCQuestConfirmPacket::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* GCQuestConfirmPacket::release_message() {
  // @@protoc_insertion_point(field_release:network.GCQuestConfirmPacket.message)
  return _impl_.message_.Release();
}
inline void GCQuestConfirmPacket::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GCQuestConfirmPacket.message)
}

// int32 timeout = 2;
inline void GCQuestConfirmPacket::clear_timeout() {
  _impl_.timeout_ = 0;
}
inline int32_t GCQuestConfirmPacket::_internal_timeout() const {
  return _impl_.timeout_;
}
inline int32_t GCQuestConfirmPacket::timeout() const {
  // @@protoc_insertion_point(field_get:network.GCQuestConfirmPacket.timeout)
  return _internal_timeout();
}
inline void GCQuestConfirmPacket::_internal_set_timeout(int32_t value) {
  
  _impl_.timeout_ = value;
}
inline void GCQuestConfirmPacket::set_timeout(int32_t value) {
  _internal_set_timeout(value);
  // @@protoc_insertion_point(field_set:network.GCQuestConfirmPacket.timeout)
}

// uint32 request_pid = 3;
inline void GCQuestConfirmPacket::clear_request_pid() {
  _impl_.request_pid_ = 0u;
}
inline uint32_t GCQuestConfirmPacket::_internal_request_pid() const {
  return _impl_.request_pid_;
}
inline uint32_t GCQuestConfirmPacket::request_pid() const {
  // @@protoc_insertion_point(field_get:network.GCQuestConfirmPacket.request_pid)
  return _internal_request_pid();
}
inline void GCQuestConfirmPacket::_internal_set_request_pid(uint32_t value) {
  
  _impl_.request_pid_ = value;
}
inline void GCQuestConfirmPacket::set_request_pid(uint32_t value) {
  _internal_set_request_pid(value);
  // @@protoc_insertion_point(field_set:network.GCQuestConfirmPacket.request_pid)
}

// -------------------------------------------------------------------

// GCQuestCooldownPacket_Cooldown

// int32 cooldown = 1;
inline void GCQuestCooldownPacket_Cooldown::clear_cooldown() {
  _impl_.cooldown_ = 0;
}
inline int32_t GCQuestCooldownPacket_Cooldown::_internal_cooldown() const {
  return _impl_.cooldown_;
}
inline int32_t GCQuestCooldownPacket_Cooldown::cooldown() const {
  // @@protoc_insertion_point(field_get:network.GCQuestCooldownPacket.Cooldown.cooldown)
  return _internal_cooldown();
}
inline void GCQuestCooldownPacket_Cooldown::_internal_set_cooldown(int32_t value) {
  
  _impl_.cooldown_ = value;
}
inline void GCQuestCooldownPacket_Cooldown::set_cooldown(int32_t value) {
  _internal_set_cooldown(value);
  // @@protoc_insertion_point(field_set:network.GCQuestCooldownPacket.Cooldown.cooldown)
}

// int32 done = 2;
inline void GCQuestCooldownPacket_Cooldown::clear_done() {
  _impl_.done_ = 0;
}
inline int32_t GCQuestCooldownPacket_Cooldown::_internal_done() const {
  return _impl_.done_;
}
inline int32_t GCQuestCooldownPacket_Cooldown::done() const {
  // @@protoc_insertion_point(field_get:network.GCQuestCooldownPacket.Cooldown.done)
  return _internal_done();
}
inline void GCQuestCooldownPacket_Cooldown::_internal_set_done(int32_t value) {
  
  _impl_.done_ = value;
}
inline void GCQuestCooldownPacket_Cooldown::set_done(int32_t value) {
  _internal_set_done(value);
  // @@protoc_insertion_point(field_set:network.GCQuestCooldownPacket.Cooldown.done)
}

// int32 time = 3;
inline void GCQuestCooldownPacket_Cooldown::clear_time() {
  _impl_.time_ = 0;
}
inline int32_t GCQuestCooldownPacket_Cooldown::_internal_time() const {
  return _impl_.time_;
}
inline int32_t GCQuestCooldownPacket_Cooldown::time() const {
  // @@protoc_insertion_point(field_get:network.GCQuestCooldownPacket.Cooldown.time)
  return _internal_time();
}
inline void GCQuestCooldownPacket_Cooldown::_internal_set_time(int32_t value) {
  
  _impl_.time_ = value;
}
inline void GCQuestCooldownPacket_Cooldown::set_time(int32_t value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:network.GCQuestCooldownPacket.Cooldown.time)
}

// int32 damage = 4;
inline void GCQuestCooldownPacket_Cooldown::clear_damage() {
  _impl_.damage_ = 0;
}
inline int32_t GCQuestCooldownPacket_Cooldown::_internal_damage() const {
  return _impl_.damage_;
}
inline int32_t GCQuestCooldownPacket_Cooldown::damage() const {
  // @@protoc_insertion_point(field_get:network.GCQuestCooldownPacket.Cooldown.damage)
  return _internal_damage();
}
inline void GCQuestCooldownPacket_Cooldown::_internal_set_damage(int32_t value) {
  
  _impl_.damage_ = value;
}
inline void GCQuestCooldownPacket_Cooldown::set_damage(int32_t value) {
  _internal_set_damage(value);
  // @@protoc_insertion_point(field_set:network.GCQuestCooldownPacket.Cooldown.damage)
}

// bytes name = 5;
inline void GCQuestCooldownPacket_Cooldown::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GCQuestCooldownPacket_Cooldown::name() const {
  // @@protoc_insertion_point(field_get:network.GCQuestCooldownPacket.Cooldown.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GCQuestCooldownPacket_Cooldown::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GCQuestCooldownPacket.Cooldown.name)
}
inline std::string* GCQuestCooldownPacket_Cooldown::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:network.GCQuestCooldownPacket.Cooldown.name)
  return _s;
}
inline const std::string& GCQuestCooldownPacket_Cooldown::_internal_name() const {
  return _impl_.name_.Get();
}
inline void GCQuestCooldownPacket_Cooldown::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* GCQuestCooldownPacket_Cooldown::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* GCQuestCooldownPacket_Cooldown::release_name() {
  // @@protoc_insertion_point(field_release:network.GCQuestCooldownPacket.Cooldown.name)
  return _impl_.name_.Release();
}
inline void GCQuestCooldownPacket_Cooldown::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GCQuestCooldownPacket.Cooldown.name)
}

// -------------------------------------------------------------------

// GCQuestCooldownPacket

// repeated .network.GCQuestCooldownPacket.Cooldown datas = 1;
inline int GCQuestCooldownPacket::_internal_datas_size() const {
  return _impl_.datas_.size();
}
inline int GCQuestCooldownPacket::datas_size() const {
  return _internal_datas_size();
}
inline void GCQuestCooldownPacket::clear_datas() {
  _impl_.datas_.Clear();
}
inline ::network::GCQuestCooldownPacket_Cooldown* GCQuestCooldownPacket::mutable_datas(int index) {
  // @@protoc_insertion_point(field_mutable:network.GCQuestCooldownPacket.datas)
  return _impl_.datas_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::GCQuestCooldownPacket_Cooldown >*
GCQuestCooldownPacket::mutable_datas() {
  // @@protoc_insertion_point(field_mutable_list:network.GCQuestCooldownPacket.datas)
  return &_impl_.datas_;
}
inline const ::network::GCQuestCooldownPacket_Cooldown& GCQuestCooldownPacket::_internal_datas(int index) const {
  return _impl_.datas_.Get(index);
}
inline const ::network::GCQuestCooldownPacket_Cooldown& GCQuestCooldownPacket::datas(int index) const {
  // @@protoc_insertion_point(field_get:network.GCQuestCooldownPacket.datas)
  return _internal_datas(index);
}
inline ::network::GCQuestCooldownPacket_Cooldown* GCQuestCooldownPacket::_internal_add_datas() {
  return _impl_.datas_.Add();
}
inline ::network::GCQuestCooldownPacket_Cooldown* GCQuestCooldownPacket::add_datas() {
  ::network::GCQuestCooldownPacket_Cooldown* _add = _internal_add_datas();
  // @@protoc_insertion_point(field_add:network.GCQuestCooldownPacket.datas)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::GCQuestCooldownPacket_Cooldown >&
GCQuestCooldownPacket::datas() const {
  // @@protoc_insertion_point(field_list:network.GCQuestCooldownPacket.datas)
  return _impl_.datas_;
}

// -------------------------------------------------------------------

// GCPetSummonPacket

// uint32 vid = 1;
inline void GCPetSummonPacket::clear_vid() {
  _impl_.vid_ = 0u;
}
inline uint32_t GCPetSummonPacket::_internal_vid() const {
  return _impl_.vid_;
}
inline uint32_t GCPetSummonPacket::vid() const {
  // @@protoc_insertion_point(field_get:network.GCPetSummonPacket.vid)
  return _internal_vid();
}
inline void GCPetSummonPacket::_internal_set_vid(uint32_t value) {
  
  _impl_.vid_ = value;
}
inline void GCPetSummonPacket::set_vid(uint32_t value) {
  _internal_set_vid(value);
  // @@protoc_insertion_point(field_set:network.GCPetSummonPacket.vid)
}

// uint32 item_vnum = 2;
inline void GCPetSummonPacket::clear_item_vnum() {
  _impl_.item_vnum_ = 0u;
}
inline uint32_t GCPetSummonPacket::_internal_item_vnum() const {
  return _impl_.item_vnum_;
}
inline uint32_t GCPetSummonPacket::item_vnum() const {
  // @@protoc_insertion_point(field_get:network.GCPetSummonPacket.item_vnum)
  return _internal_item_vnum();
}
inline void GCPetSummonPacket::_internal_set_item_vnum(uint32_t value) {
  
  _impl_.item_vnum_ = value;
}
inline void GCPetSummonPacket::set_item_vnum(uint32_t value) {
  _internal_set_item_vnum(value);
  // @@protoc_insertion_point(field_set:network.GCPetSummonPacket.item_vnum)
}

// .network.TPetAdvancedTable pet = 3;
inline bool GCPetSummonPacket::_internal_has_pet() const {
  return this != internal_default_instance() && _impl_.pet_ != nullptr;
}
inline bool GCPetSummonPacket::has_pet() const {
  return _internal_has_pet();
}
inline const ::network::TPetAdvancedTable& GCPetSummonPacket::_internal_pet() const {
  const ::network::TPetAdvancedTable* p = _impl_.pet_;
  return p != nullptr ? *p : reinterpret_cast<const ::network::TPetAdvancedTable&>(
      ::network::_TPetAdvancedTable_default_instance_);
}
inline const ::network::TPetAdvancedTable& GCPetSummonPacket::pet() const {
  // @@protoc_insertion_point(field_get:network.GCPetSummonPacket.pet)
  return _internal_pet();
}
inline void GCPetSummonPacket::unsafe_arena_set_allocated_pet(
    ::network::TPetAdvancedTable* pet) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pet_);
  }
  _impl_.pet_ = pet;
  if (pet) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:network.GCPetSummonPacket.pet)
}
inline ::network::TPetAdvancedTable* GCPetSummonPacket::release_pet() {
  
  ::network::TPetAdvancedTable* temp = _impl_.pet_;
  _impl_.pet_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::network::TPetAdvancedTable* GCPetSummonPacket::unsafe_arena_release_pet() {
  // @@protoc_insertion_point(field_release:network.GCPetSummonPacket.pet)
  
  ::network::TPetAdvancedTable* temp = _impl_.pet_;
  _impl_.pet_ = nullptr;
  return temp;
}
inline ::network::TPetAdvancedTable* GCPetSummonPacket::_internal_mutable_pet() {
  
  if (_impl_.pet_ == nullptr) {
    auto* p = CreateMaybeMessage<::network::TPetAdvancedTable>(GetArenaForAllocation());
    _impl_.pet_ = p;
  }
  return _impl_.pet_;
}
inline ::network::TPetAdvancedTable* GCPetSummonPacket::mutable_pet() {
  ::network::TPetAdvancedTable* _msg = _internal_mutable_pet();
  // @@protoc_insertion_point(field_mutable:network.GCPetSummonPacket.pet)
  return _msg;
}
inline void GCPetSummonPacket::set_allocated_pet(::network::TPetAdvancedTable* pet) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pet_);
  }
  if (pet) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pet));
    if (message_arena != submessage_arena) {
      pet = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pet, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pet_ = pet;
  // @@protoc_insertion_point(field_set_allocated:network.GCPetSummonPacket.pet)
}

// int64 next_exp = 4;
inline void GCPetSummonPacket::clear_next_exp() {
  _impl_.next_exp_ = int64_t{0};
}
inline int64_t GCPetSummonPacket::_internal_next_exp() const {
  return _impl_.next_exp_;
}
inline int64_t GCPetSummonPacket::next_exp() const {
  // @@protoc_insertion_point(field_get:network.GCPetSummonPacket.next_exp)
  return _internal_next_exp();
}
inline void GCPetSummonPacket::_internal_set_next_exp(int64_t value) {
  
  _impl_.next_exp_ = value;
}
inline void GCPetSummonPacket::set_next_exp(int64_t value) {
  _internal_set_next_exp(value);
  // @@protoc_insertion_point(field_set:network.GCPetSummonPacket.next_exp)
}

// -------------------------------------------------------------------

// GCPetUpdateExpPacket

// int64 exp = 1;
inline void GCPetUpdateExpPacket::clear_exp() {
  _impl_.exp_ = int64_t{0};
}
inline int64_t GCPetUpdateExpPacket::_internal_exp() const {
  return _impl_.exp_;
}
inline int64_t GCPetUpdateExpPacket::exp() const {
  // @@protoc_insertion_point(field_get:network.GCPetUpdateExpPacket.exp)
  return _internal_exp();
}
inline void GCPetUpdateExpPacket::_internal_set_exp(int64_t value) {
  
  _impl_.exp_ = value;
}
inline void GCPetUpdateExpPacket::set_exp(int64_t value) {
  _internal_set_exp(value);
  // @@protoc_insertion_point(field_set:network.GCPetUpdateExpPacket.exp)
}

// -------------------------------------------------------------------

// GCPetUpdateLevelPacket

// uint32 level = 1;
inline void GCPetUpdateLevelPacket::clear_level() {
  _impl_.level_ = 0u;
}
inline uint32_t GCPetUpdateLevelPacket::_internal_level() const {
  return _impl_.level_;
}
inline uint32_t GCPetUpdateLevelPacket::level() const {
  // @@protoc_insertion_point(field_get:network.GCPetUpdateLevelPacket.level)
  return _internal_level();
}
inline void GCPetUpdateLevelPacket::_internal_set_level(uint32_t value) {
  
  _impl_.level_ = value;
}
inline void GCPetUpdateLevelPacket::set_level(uint32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:network.GCPetUpdateLevelPacket.level)
}

// int64 next_exp = 2;
inline void GCPetUpdateLevelPacket::clear_next_exp() {
  _impl_.next_exp_ = int64_t{0};
}
inline int64_t GCPetUpdateLevelPacket::_internal_next_exp() const {
  return _impl_.next_exp_;
}
inline int64_t GCPetUpdateLevelPacket::next_exp() const {
  // @@protoc_insertion_point(field_get:network.GCPetUpdateLevelPacket.next_exp)
  return _internal_next_exp();
}
inline void GCPetUpdateLevelPacket::_internal_set_next_exp(int64_t value) {
  
  _impl_.next_exp_ = value;
}
inline void GCPetUpdateLevelPacket::set_next_exp(int64_t value) {
  _internal_set_next_exp(value);
  // @@protoc_insertion_point(field_set:network.GCPetUpdateLevelPacket.next_exp)
}

// -------------------------------------------------------------------

// GCPetUpdateSkillPacket

// uint32 index = 1;
inline void GCPetUpdateSkillPacket::clear_index() {
  _impl_.index_ = 0u;
}
inline uint32_t GCPetUpdateSkillPacket::_internal_index() const {
  return _impl_.index_;
}
inline uint32_t GCPetUpdateSkillPacket::index() const {
  // @@protoc_insertion_point(field_get:network.GCPetUpdateSkillPacket.index)
  return _internal_index();
}
inline void GCPetUpdateSkillPacket::_internal_set_index(uint32_t value) {
  
  _impl_.index_ = value;
}
inline void GCPetUpdateSkillPacket::set_index(uint32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:network.GCPetUpdateSkillPacket.index)
}

// .network.TPetAdvancedSkillData skill = 2;
inline bool GCPetUpdateSkillPacket::_internal_has_skill() const {
  return this != internal_default_instance() && _impl_.skill_ != nullptr;
}
inline bool GCPetUpdateSkillPacket::has_skill() const {
  return _internal_has_skill();
}
inline const ::network::TPetAdvancedSkillData& GCPetUpdateSkillPacket::_internal_skill() const {
  const ::network::TPetAdvancedSkillData* p = _impl_.skill_;
  return p != nullptr ? *p : reinterpret_cast<const ::network::TPetAdvancedSkillData&>(
      ::network::_TPetAdvancedSkillData_default_instance_);
}
inline const ::network::TPetAdvancedSkillData& GCPetUpdateSkillPacket::skill() const {
  // @@protoc_insertion_point(field_get:network.GCPetUpdateSkillPacket.skill)
  return _internal_skill();
}
inline void GCPetUpdateSkillPacket::unsafe_arena_set_allocated_skill(
    ::network::TPetAdvancedSkillData* skill) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.skill_);
  }
  _impl_.skill_ = skill;
  if (skill) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:network.GCPetUpdateSkillPacket.skill)
}
inline ::network::TPetAdvancedSkillData* GCPetUpdateSkillPacket::release_skill() {
  
  ::network::TPetAdvancedSkillData* temp = _impl_.skill_;
  _impl_.skill_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::network::TPetAdvancedSkillData* GCPetUpdateSkillPacket::unsafe_arena_release_skill() {
  // @@protoc_insertion_point(field_release:network.GCPetUpdateSkillPacket.skill)
  
  ::network::TPetAdvancedSkillData* temp = _impl_.skill_;
  _impl_.skill_ = nullptr;
  return temp;
}
inline ::network::TPetAdvancedSkillData* GCPetUpdateSkillPacket::_internal_mutable_skill() {
  
  if (_impl_.skill_ == nullptr) {
    auto* p = CreateMaybeMessage<::network::TPetAdvancedSkillData>(GetArenaForAllocation());
    _impl_.skill_ = p;
  }
  return _impl_.skill_;
}
inline ::network::TPetAdvancedSkillData* GCPetUpdateSkillPacket::mutable_skill() {
  ::network::TPetAdvancedSkillData* _msg = _internal_mutable_skill();
  // @@protoc_insertion_point(field_mutable:network.GCPetUpdateSkillPacket.skill)
  return _msg;
}
inline void GCPetUpdateSkillPacket::set_allocated_skill(::network::TPetAdvancedSkillData* skill) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.skill_);
  }
  if (skill) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(skill));
    if (message_arena != submessage_arena) {
      skill = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, skill, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.skill_ = skill;
  // @@protoc_insertion_point(field_set_allocated:network.GCPetUpdateSkillPacket.skill)
}

// -------------------------------------------------------------------

// GCPetUpdateAttrPacket

// uint32 index = 1;
inline void GCPetUpdateAttrPacket::clear_index() {
  _impl_.index_ = 0u;
}
inline uint32_t GCPetUpdateAttrPacket::_internal_index() const {
  return _impl_.index_;
}
inline uint32_t GCPetUpdateAttrPacket::index() const {
  // @@protoc_insertion_point(field_get:network.GCPetUpdateAttrPacket.index)
  return _internal_index();
}
inline void GCPetUpdateAttrPacket::_internal_set_index(uint32_t value) {
  
  _impl_.index_ = value;
}
inline void GCPetUpdateAttrPacket::set_index(uint32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:network.GCPetUpdateAttrPacket.index)
}

// uint32 type = 2;
inline void GCPetUpdateAttrPacket::clear_type() {
  _impl_.type_ = 0u;
}
inline uint32_t GCPetUpdateAttrPacket::_internal_type() const {
  return _impl_.type_;
}
inline uint32_t GCPetUpdateAttrPacket::type() const {
  // @@protoc_insertion_point(field_get:network.GCPetUpdateAttrPacket.type)
  return _internal_type();
}
inline void GCPetUpdateAttrPacket::_internal_set_type(uint32_t value) {
  
  _impl_.type_ = value;
}
inline void GCPetUpdateAttrPacket::set_type(uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:network.GCPetUpdateAttrPacket.type)
}

// uint32 level = 3;
inline void GCPetUpdateAttrPacket::clear_level() {
  _impl_.level_ = 0u;
}
inline uint32_t GCPetUpdateAttrPacket::_internal_level() const {
  return _impl_.level_;
}
inline uint32_t GCPetUpdateAttrPacket::level() const {
  // @@protoc_insertion_point(field_get:network.GCPetUpdateAttrPacket.level)
  return _internal_level();
}
inline void GCPetUpdateAttrPacket::_internal_set_level(uint32_t value) {
  
  _impl_.level_ = value;
}
inline void GCPetUpdateAttrPacket::set_level(uint32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:network.GCPetUpdateAttrPacket.level)
}

// int32 value = 4;
inline void GCPetUpdateAttrPacket::clear_value() {
  _impl_.value_ = 0;
}
inline int32_t GCPetUpdateAttrPacket::_internal_value() const {
  return _impl_.value_;
}
inline int32_t GCPetUpdateAttrPacket::value() const {
  // @@protoc_insertion_point(field_get:network.GCPetUpdateAttrPacket.value)
  return _internal_value();
}
inline void GCPetUpdateAttrPacket::_internal_set_value(int32_t value) {
  
  _impl_.value_ = value;
}
inline void GCPetUpdateAttrPacket::set_value(int32_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:network.GCPetUpdateAttrPacket.value)
}

// bool can_upgrade = 5;
inline void GCPetUpdateAttrPacket::clear_can_upgrade() {
  _impl_.can_upgrade_ = false;
}
inline bool GCPetUpdateAttrPacket::_internal_can_upgrade() const {
  return _impl_.can_upgrade_;
}
inline bool GCPetUpdateAttrPacket::can_upgrade() const {
  // @@protoc_insertion_point(field_get:network.GCPetUpdateAttrPacket.can_upgrade)
  return _internal_can_upgrade();
}
inline void GCPetUpdateAttrPacket::_internal_set_can_upgrade(bool value) {
  
  _impl_.can_upgrade_ = value;
}
inline void GCPetUpdateAttrPacket::set_can_upgrade(bool value) {
  _internal_set_can_upgrade(value);
  // @@protoc_insertion_point(field_set:network.GCPetUpdateAttrPacket.can_upgrade)
}

// -------------------------------------------------------------------

// GCPetUpdateSkillpowerPacket

// uint32 power = 1;
inline void GCPetUpdateSkillpowerPacket::clear_power() {
  _impl_.power_ = 0u;
}
inline uint32_t GCPetUpdateSkillpowerPacket::_internal_power() const {
  return _impl_.power_;
}
inline uint32_t GCPetUpdateSkillpowerPacket::power() const {
  // @@protoc_insertion_point(field_get:network.GCPetUpdateSkillpowerPacket.power)
  return _internal_power();
}
inline void GCPetUpdateSkillpowerPacket::_internal_set_power(uint32_t value) {
  
  _impl_.power_ = value;
}
inline void GCPetUpdateSkillpowerPacket::set_power(uint32_t value) {
  _internal_set_power(value);
  // @@protoc_insertion_point(field_set:network.GCPetUpdateSkillpowerPacket.power)
}

// -------------------------------------------------------------------

// GCPetEvolutionInfoPacket

// int64 cost = 1;
inline void GCPetEvolutionInfoPacket::clear_cost() {
  _impl_.cost_ = int64_t{0};
}
inline int64_t GCPetEvolutionInfoPacket::_internal_cost() const {
  return _impl_.cost_;
}
inline int64_t GCPetEvolutionInfoPacket::cost() const {
  // @@protoc_insertion_point(field_get:network.GCPetEvolutionInfoPacket.cost)
  return _internal_cost();
}
inline void GCPetEvolutionInfoPacket::_internal_set_cost(int64_t value) {
  
  _impl_.cost_ = value;
}
inline void GCPetEvolutionInfoPacket::set_cost(int64_t value) {
  _internal_set_cost(value);
  // @@protoc_insertion_point(field_set:network.GCPetEvolutionInfoPacket.cost)
}

// uint32 prob = 2;
inline void GCPetEvolutionInfoPacket::clear_prob() {
  _impl_.prob_ = 0u;
}
inline uint32_t GCPetEvolutionInfoPacket::_internal_prob() const {
  return _impl_.prob_;
}
inline uint32_t GCPetEvolutionInfoPacket::prob() const {
  // @@protoc_insertion_point(field_get:network.GCPetEvolutionInfoPacket.prob)
  return _internal_prob();
}
inline void GCPetEvolutionInfoPacket::_internal_set_prob(uint32_t value) {
  
  _impl_.prob_ = value;
}
inline void GCPetEvolutionInfoPacket::set_prob(uint32_t value) {
  _internal_set_prob(value);
  // @@protoc_insertion_point(field_set:network.GCPetEvolutionInfoPacket.prob)
}

// repeated .network.TRefineMaterial materials = 3;
inline int GCPetEvolutionInfoPacket::_internal_materials_size() const {
  return _impl_.materials_.size();
}
inline int GCPetEvolutionInfoPacket::materials_size() const {
  return _internal_materials_size();
}
inline ::network::TRefineMaterial* GCPetEvolutionInfoPacket::mutable_materials(int index) {
  // @@protoc_insertion_point(field_mutable:network.GCPetEvolutionInfoPacket.materials)
  return _impl_.materials_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TRefineMaterial >*
GCPetEvolutionInfoPacket::mutable_materials() {
  // @@protoc_insertion_point(field_mutable_list:network.GCPetEvolutionInfoPacket.materials)
  return &_impl_.materials_;
}
inline const ::network::TRefineMaterial& GCPetEvolutionInfoPacket::_internal_materials(int index) const {
  return _impl_.materials_.Get(index);
}
inline const ::network::TRefineMaterial& GCPetEvolutionInfoPacket::materials(int index) const {
  // @@protoc_insertion_point(field_get:network.GCPetEvolutionInfoPacket.materials)
  return _internal_materials(index);
}
inline ::network::TRefineMaterial* GCPetEvolutionInfoPacket::_internal_add_materials() {
  return _impl_.materials_.Add();
}
inline ::network::TRefineMaterial* GCPetEvolutionInfoPacket::add_materials() {
  ::network::TRefineMaterial* _add = _internal_add_materials();
  // @@protoc_insertion_point(field_add:network.GCPetEvolutionInfoPacket.materials)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TRefineMaterial >&
GCPetEvolutionInfoPacket::materials() const {
  // @@protoc_insertion_point(field_list:network.GCPetEvolutionInfoPacket.materials)
  return _impl_.materials_;
}

// -------------------------------------------------------------------

// GCPetEvolveResultPacket

// bool result = 1;
inline void GCPetEvolveResultPacket::clear_result() {
  _impl_.result_ = false;
}
inline bool GCPetEvolveResultPacket::_internal_result() const {
  return _impl_.result_;
}
inline bool GCPetEvolveResultPacket::result() const {
  // @@protoc_insertion_point(field_get:network.GCPetEvolveResultPacket.result)
  return _internal_result();
}
inline void GCPetEvolveResultPacket::_internal_set_result(bool value) {
  
  _impl_.result_ = value;
}
inline void GCPetEvolveResultPacket::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:network.GCPetEvolveResultPacket.result)
}

// -------------------------------------------------------------------

// GCPetAttrRefineInfoPacket

// uint32 index = 1;
inline void GCPetAttrRefineInfoPacket::clear_index() {
  _impl_.index_ = 0u;
}
inline uint32_t GCPetAttrRefineInfoPacket::_internal_index() const {
  return _impl_.index_;
}
inline uint32_t GCPetAttrRefineInfoPacket::index() const {
  // @@protoc_insertion_point(field_get:network.GCPetAttrRefineInfoPacket.index)
  return _internal_index();
}
inline void GCPetAttrRefineInfoPacket::_internal_set_index(uint32_t value) {
  
  _impl_.index_ = value;
}
inline void GCPetAttrRefineInfoPacket::set_index(uint32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:network.GCPetAttrRefineInfoPacket.index)
}

// int64 cost = 2;
inline void GCPetAttrRefineInfoPacket::clear_cost() {
  _impl_.cost_ = int64_t{0};
}
inline int64_t GCPetAttrRefineInfoPacket::_internal_cost() const {
  return _impl_.cost_;
}
inline int64_t GCPetAttrRefineInfoPacket::cost() const {
  // @@protoc_insertion_point(field_get:network.GCPetAttrRefineInfoPacket.cost)
  return _internal_cost();
}
inline void GCPetAttrRefineInfoPacket::_internal_set_cost(int64_t value) {
  
  _impl_.cost_ = value;
}
inline void GCPetAttrRefineInfoPacket::set_cost(int64_t value) {
  _internal_set_cost(value);
  // @@protoc_insertion_point(field_set:network.GCPetAttrRefineInfoPacket.cost)
}

// repeated .network.TRefineMaterial materials = 3;
inline int GCPetAttrRefineInfoPacket::_internal_materials_size() const {
  return _impl_.materials_.size();
}
inline int GCPetAttrRefineInfoPacket::materials_size() const {
  return _internal_materials_size();
}
inline ::network::TRefineMaterial* GCPetAttrRefineInfoPacket::mutable_materials(int index) {
  // @@protoc_insertion_point(field_mutable:network.GCPetAttrRefineInfoPacket.materials)
  return _impl_.materials_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TRefineMaterial >*
GCPetAttrRefineInfoPacket::mutable_materials() {
  // @@protoc_insertion_point(field_mutable_list:network.GCPetAttrRefineInfoPacket.materials)
  return &_impl_.materials_;
}
inline const ::network::TRefineMaterial& GCPetAttrRefineInfoPacket::_internal_materials(int index) const {
  return _impl_.materials_.Get(index);
}
inline const ::network::TRefineMaterial& GCPetAttrRefineInfoPacket::materials(int index) const {
  // @@protoc_insertion_point(field_get:network.GCPetAttrRefineInfoPacket.materials)
  return _internal_materials(index);
}
inline ::network::TRefineMaterial* GCPetAttrRefineInfoPacket::_internal_add_materials() {
  return _impl_.materials_.Add();
}
inline ::network::TRefineMaterial* GCPetAttrRefineInfoPacket::add_materials() {
  ::network::TRefineMaterial* _add = _internal_add_materials();
  // @@protoc_insertion_point(field_add:network.GCPetAttrRefineInfoPacket.materials)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TRefineMaterial >&
GCPetAttrRefineInfoPacket::materials() const {
  // @@protoc_insertion_point(field_list:network.GCPetAttrRefineInfoPacket.materials)
  return _impl_.materials_;
}

// -------------------------------------------------------------------

// GCPartyInvitePacket

// uint32 leader_vid = 1;
inline void GCPartyInvitePacket::clear_leader_vid() {
  _impl_.leader_vid_ = 0u;
}
inline uint32_t GCPartyInvitePacket::_internal_leader_vid() const {
  return _impl_.leader_vid_;
}
inline uint32_t GCPartyInvitePacket::leader_vid() const {
  // @@protoc_insertion_point(field_get:network.GCPartyInvitePacket.leader_vid)
  return _internal_leader_vid();
}
inline void GCPartyInvitePacket::_internal_set_leader_vid(uint32_t value) {
  
  _impl_.leader_vid_ = value;
}
inline void GCPartyInvitePacket::set_leader_vid(uint32_t value) {
  _internal_set_leader_vid(value);
  // @@protoc_insertion_point(field_set:network.GCPartyInvitePacket.leader_vid)
}

// -------------------------------------------------------------------

// GCPartyAddPacket

// uint32 pid = 1;
inline void GCPartyAddPacket::clear_pid() {
  _impl_.pid_ = 0u;
}
inline uint32_t GCPartyAddPacket::_internal_pid() const {
  return _impl_.pid_;
}
inline uint32_t GCPartyAddPacket::pid() const {
  // @@protoc_insertion_point(field_get:network.GCPartyAddPacket.pid)
  return _internal_pid();
}
inline void GCPartyAddPacket::_internal_set_pid(uint32_t value) {
  
  _impl_.pid_ = value;
}
inline void GCPartyAddPacket::set_pid(uint32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:network.GCPartyAddPacket.pid)
}

// bytes name = 2;
inline void GCPartyAddPacket::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GCPartyAddPacket::name() const {
  // @@protoc_insertion_point(field_get:network.GCPartyAddPacket.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GCPartyAddPacket::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GCPartyAddPacket.name)
}
inline std::string* GCPartyAddPacket::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:network.GCPartyAddPacket.name)
  return _s;
}
inline const std::string& GCPartyAddPacket::_internal_name() const {
  return _impl_.name_.Get();
}
inline void GCPartyAddPacket::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* GCPartyAddPacket::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* GCPartyAddPacket::release_name() {
  // @@protoc_insertion_point(field_release:network.GCPartyAddPacket.name)
  return _impl_.name_.Release();
}
inline void GCPartyAddPacket::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GCPartyAddPacket.name)
}

// -------------------------------------------------------------------

// GCPartyUpdatePacket

// uint32 pid = 1;
inline void GCPartyUpdatePacket::clear_pid() {
  _impl_.pid_ = 0u;
}
inline uint32_t GCPartyUpdatePacket::_internal_pid() const {
  return _impl_.pid_;
}
inline uint32_t GCPartyUpdatePacket::pid() const {
  // @@protoc_insertion_point(field_get:network.GCPartyUpdatePacket.pid)
  return _internal_pid();
}
inline void GCPartyUpdatePacket::_internal_set_pid(uint32_t value) {
  
  _impl_.pid_ = value;
}
inline void GCPartyUpdatePacket::set_pid(uint32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:network.GCPartyUpdatePacket.pid)
}

// uint32 role = 2;
inline void GCPartyUpdatePacket::clear_role() {
  _impl_.role_ = 0u;
}
inline uint32_t GCPartyUpdatePacket::_internal_role() const {
  return _impl_.role_;
}
inline uint32_t GCPartyUpdatePacket::role() const {
  // @@protoc_insertion_point(field_get:network.GCPartyUpdatePacket.role)
  return _internal_role();
}
inline void GCPartyUpdatePacket::_internal_set_role(uint32_t value) {
  
  _impl_.role_ = value;
}
inline void GCPartyUpdatePacket::set_role(uint32_t value) {
  _internal_set_role(value);
  // @@protoc_insertion_point(field_set:network.GCPartyUpdatePacket.role)
}

// uint32 percent_hp = 3;
inline void GCPartyUpdatePacket::clear_percent_hp() {
  _impl_.percent_hp_ = 0u;
}
inline uint32_t GCPartyUpdatePacket::_internal_percent_hp() const {
  return _impl_.percent_hp_;
}
inline uint32_t GCPartyUpdatePacket::percent_hp() const {
  // @@protoc_insertion_point(field_get:network.GCPartyUpdatePacket.percent_hp)
  return _internal_percent_hp();
}
inline void GCPartyUpdatePacket::_internal_set_percent_hp(uint32_t value) {
  
  _impl_.percent_hp_ = value;
}
inline void GCPartyUpdatePacket::set_percent_hp(uint32_t value) {
  _internal_set_percent_hp(value);
  // @@protoc_insertion_point(field_set:network.GCPartyUpdatePacket.percent_hp)
}

// repeated int32 affects = 4;
inline int GCPartyUpdatePacket::_internal_affects_size() const {
  return _impl_.affects_.size();
}
inline int GCPartyUpdatePacket::affects_size() const {
  return _internal_affects_size();
}
inline void GCPartyUpdatePacket::clear_affects() {
  _impl_.affects_.Clear();
}
inline int32_t GCPartyUpdatePacket::_internal_affects(int index) const {
  return _impl_.affects_.Get(index);
}
inline int32_t GCPartyUpdatePacket::affects(int index) const {
  // @@protoc_insertion_point(field_get:network.GCPartyUpdatePacket.affects)
  return _internal_affects(index);
}
inline void GCPartyUpdatePacket::set_affects(int index, int32_t value) {
  _impl_.affects_.Set(index, value);
  // @@protoc_insertion_point(field_set:network.GCPartyUpdatePacket.affects)
}
inline void GCPartyUpdatePacket::_internal_add_affects(int32_t value) {
  _impl_.affects_.Add(value);
}
inline void GCPartyUpdatePacket::add_affects(int32_t value) {
  _internal_add_affects(value);
  // @@protoc_insertion_point(field_add:network.GCPartyUpdatePacket.affects)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
GCPartyUpdatePacket::_internal_affects() const {
  return _impl_.affects_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
GCPartyUpdatePacket::affects() const {
  // @@protoc_insertion_point(field_list:network.GCPartyUpdatePacket.affects)
  return _internal_affects();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
GCPartyUpdatePacket::_internal_mutable_affects() {
  return &_impl_.affects_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
GCPartyUpdatePacket::mutable_affects() {
  // @@protoc_insertion_point(field_mutable_list:network.GCPartyUpdatePacket.affects)
  return _internal_mutable_affects();
}

// bool leader = 5;
inline void GCPartyUpdatePacket::clear_leader() {
  _impl_.leader_ = false;
}
inline bool GCPartyUpdatePacket::_internal_leader() const {
  return _impl_.leader_;
}
inline bool GCPartyUpdatePacket::leader() const {
  // @@protoc_insertion_point(field_get:network.GCPartyUpdatePacket.leader)
  return _internal_leader();
}
inline void GCPartyUpdatePacket::_internal_set_leader(bool value) {
  
  _impl_.leader_ = value;
}
inline void GCPartyUpdatePacket::set_leader(bool value) {
  _internal_set_leader(value);
  // @@protoc_insertion_point(field_set:network.GCPartyUpdatePacket.leader)
}

// -------------------------------------------------------------------

// GCPartyRemovePacket

// uint32 pid = 1;
inline void GCPartyRemovePacket::clear_pid() {
  _impl_.pid_ = 0u;
}
inline uint32_t GCPartyRemovePacket::_internal_pid() const {
  return _impl_.pid_;
}
inline uint32_t GCPartyRemovePacket::pid() const {
  // @@protoc_insertion_point(field_get:network.GCPartyRemovePacket.pid)
  return _internal_pid();
}
inline void GCPartyRemovePacket::_internal_set_pid(uint32_t value) {
  
  _impl_.pid_ = value;
}
inline void GCPartyRemovePacket::set_pid(uint32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:network.GCPartyRemovePacket.pid)
}

// -------------------------------------------------------------------

// GCPartyLinkPacket

// uint32 pid = 1;
inline void GCPartyLinkPacket::clear_pid() {
  _impl_.pid_ = 0u;
}
inline uint32_t GCPartyLinkPacket::_internal_pid() const {
  return _impl_.pid_;
}
inline uint32_t GCPartyLinkPacket::pid() const {
  // @@protoc_insertion_point(field_get:network.GCPartyLinkPacket.pid)
  return _internal_pid();
}
inline void GCPartyLinkPacket::_internal_set_pid(uint32_t value) {
  
  _impl_.pid_ = value;
}
inline void GCPartyLinkPacket::set_pid(uint32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:network.GCPartyLinkPacket.pid)
}

// uint32 vid = 2;
inline void GCPartyLinkPacket::clear_vid() {
  _impl_.vid_ = 0u;
}
inline uint32_t GCPartyLinkPacket::_internal_vid() const {
  return _impl_.vid_;
}
inline uint32_t GCPartyLinkPacket::vid() const {
  // @@protoc_insertion_point(field_get:network.GCPartyLinkPacket.vid)
  return _internal_vid();
}
inline void GCPartyLinkPacket::_internal_set_vid(uint32_t value) {
  
  _impl_.vid_ = value;
}
inline void GCPartyLinkPacket::set_vid(uint32_t value) {
  _internal_set_vid(value);
  // @@protoc_insertion_point(field_set:network.GCPartyLinkPacket.vid)
}

// -------------------------------------------------------------------

// GCPartyUnlinkPacket

// uint32 pid = 1;
inline void GCPartyUnlinkPacket::clear_pid() {
  _impl_.pid_ = 0u;
}
inline uint32_t GCPartyUnlinkPacket::_internal_pid() const {
  return _impl_.pid_;
}
inline uint32_t GCPartyUnlinkPacket::pid() const {
  // @@protoc_insertion_point(field_get:network.GCPartyUnlinkPacket.pid)
  return _internal_pid();
}
inline void GCPartyUnlinkPacket::_internal_set_pid(uint32_t value) {
  
  _impl_.pid_ = value;
}
inline void GCPartyUnlinkPacket::set_pid(uint32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:network.GCPartyUnlinkPacket.pid)
}

// uint32 vid = 2;
inline void GCPartyUnlinkPacket::clear_vid() {
  _impl_.vid_ = 0u;
}
inline uint32_t GCPartyUnlinkPacket::_internal_vid() const {
  return _impl_.vid_;
}
inline uint32_t GCPartyUnlinkPacket::vid() const {
  // @@protoc_insertion_point(field_get:network.GCPartyUnlinkPacket.vid)
  return _internal_vid();
}
inline void GCPartyUnlinkPacket::_internal_set_vid(uint32_t value) {
  
  _impl_.vid_ = value;
}
inline void GCPartyUnlinkPacket::set_vid(uint32_t value) {
  _internal_set_vid(value);
  // @@protoc_insertion_point(field_set:network.GCPartyUnlinkPacket.vid)
}

// -------------------------------------------------------------------

// GCPartyParameterPacket

// uint32 distribute_mode = 1;
inline void GCPartyParameterPacket::clear_distribute_mode() {
  _impl_.distribute_mode_ = 0u;
}
inline uint32_t GCPartyParameterPacket::_internal_distribute_mode() const {
  return _impl_.distribute_mode_;
}
inline uint32_t GCPartyParameterPacket::distribute_mode() const {
  // @@protoc_insertion_point(field_get:network.GCPartyParameterPacket.distribute_mode)
  return _internal_distribute_mode();
}
inline void GCPartyParameterPacket::_internal_set_distribute_mode(uint32_t value) {
  
  _impl_.distribute_mode_ = value;
}
inline void GCPartyParameterPacket::set_distribute_mode(uint32_t value) {
  _internal_set_distribute_mode(value);
  // @@protoc_insertion_point(field_set:network.GCPartyParameterPacket.distribute_mode)
}

// -------------------------------------------------------------------

// GCGuildLoginPacket

// uint32 pid = 1;
inline void GCGuildLoginPacket::clear_pid() {
  _impl_.pid_ = 0u;
}
inline uint32_t GCGuildLoginPacket::_internal_pid() const {
  return _impl_.pid_;
}
inline uint32_t GCGuildLoginPacket::pid() const {
  // @@protoc_insertion_point(field_get:network.GCGuildLoginPacket.pid)
  return _internal_pid();
}
inline void GCGuildLoginPacket::_internal_set_pid(uint32_t value) {
  
  _impl_.pid_ = value;
}
inline void GCGuildLoginPacket::set_pid(uint32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:network.GCGuildLoginPacket.pid)
}

// -------------------------------------------------------------------

// GCGuildLogoutPacket

// uint32 pid = 1;
inline void GCGuildLogoutPacket::clear_pid() {
  _impl_.pid_ = 0u;
}
inline uint32_t GCGuildLogoutPacket::_internal_pid() const {
  return _impl_.pid_;
}
inline uint32_t GCGuildLogoutPacket::pid() const {
  // @@protoc_insertion_point(field_get:network.GCGuildLogoutPacket.pid)
  return _internal_pid();
}
inline void GCGuildLogoutPacket::_internal_set_pid(uint32_t value) {
  
  _impl_.pid_ = value;
}
inline void GCGuildLogoutPacket::set_pid(uint32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:network.GCGuildLogoutPacket.pid)
}

// -------------------------------------------------------------------

// GCGuildRemovePacket

// uint32 pid = 1;
inline void GCGuildRemovePacket::clear_pid() {
  _impl_.pid_ = 0u;
}
inline uint32_t GCGuildRemovePacket::_internal_pid() const {
  return _impl_.pid_;
}
inline uint32_t GCGuildRemovePacket::pid() const {
  // @@protoc_insertion_point(field_get:network.GCGuildRemovePacket.pid)
  return _internal_pid();
}
inline void GCGuildRemovePacket::_internal_set_pid(uint32_t value) {
  
  _impl_.pid_ = value;
}
inline void GCGuildRemovePacket::set_pid(uint32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:network.GCGuildRemovePacket.pid)
}

// -------------------------------------------------------------------

// GCGuildMemberListPacket

// repeated .network.TGuildMemberInfo members = 1;
inline int GCGuildMemberListPacket::_internal_members_size() const {
  return _impl_.members_.size();
}
inline int GCGuildMemberListPacket::members_size() const {
  return _internal_members_size();
}
inline ::network::TGuildMemberInfo* GCGuildMemberListPacket::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:network.GCGuildMemberListPacket.members)
  return _impl_.members_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TGuildMemberInfo >*
GCGuildMemberListPacket::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:network.GCGuildMemberListPacket.members)
  return &_impl_.members_;
}
inline const ::network::TGuildMemberInfo& GCGuildMemberListPacket::_internal_members(int index) const {
  return _impl_.members_.Get(index);
}
inline const ::network::TGuildMemberInfo& GCGuildMemberListPacket::members(int index) const {
  // @@protoc_insertion_point(field_get:network.GCGuildMemberListPacket.members)
  return _internal_members(index);
}
inline ::network::TGuildMemberInfo* GCGuildMemberListPacket::_internal_add_members() {
  return _impl_.members_.Add();
}
inline ::network::TGuildMemberInfo* GCGuildMemberListPacket::add_members() {
  ::network::TGuildMemberInfo* _add = _internal_add_members();
  // @@protoc_insertion_point(field_add:network.GCGuildMemberListPacket.members)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TGuildMemberInfo >&
GCGuildMemberListPacket::members() const {
  // @@protoc_insertion_point(field_list:network.GCGuildMemberListPacket.members)
  return _impl_.members_;
}

// -------------------------------------------------------------------

// GCGuildGradePacket_GradeData

// uint32 index = 1;
inline void GCGuildGradePacket_GradeData::clear_index() {
  _impl_.index_ = 0u;
}
inline uint32_t GCGuildGradePacket_GradeData::_internal_index() const {
  return _impl_.index_;
}
inline uint32_t GCGuildGradePacket_GradeData::index() const {
  // @@protoc_insertion_point(field_get:network.GCGuildGradePacket.GradeData.index)
  return _internal_index();
}
inline void GCGuildGradePacket_GradeData::_internal_set_index(uint32_t value) {
  
  _impl_.index_ = value;
}
inline void GCGuildGradePacket_GradeData::set_index(uint32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:network.GCGuildGradePacket.GradeData.index)
}

// bytes name = 2;
inline void GCGuildGradePacket_GradeData::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GCGuildGradePacket_GradeData::name() const {
  // @@protoc_insertion_point(field_get:network.GCGuildGradePacket.GradeData.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GCGuildGradePacket_GradeData::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GCGuildGradePacket.GradeData.name)
}
inline std::string* GCGuildGradePacket_GradeData::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:network.GCGuildGradePacket.GradeData.name)
  return _s;
}
inline const std::string& GCGuildGradePacket_GradeData::_internal_name() const {
  return _impl_.name_.Get();
}
inline void GCGuildGradePacket_GradeData::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* GCGuildGradePacket_GradeData::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* GCGuildGradePacket_GradeData::release_name() {
  // @@protoc_insertion_point(field_release:network.GCGuildGradePacket.GradeData.name)
  return _impl_.name_.Release();
}
inline void GCGuildGradePacket_GradeData::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GCGuildGradePacket.GradeData.name)
}

// uint32 auth_flag = 3;
inline void GCGuildGradePacket_GradeData::clear_auth_flag() {
  _impl_.auth_flag_ = 0u;
}
inline uint32_t GCGuildGradePacket_GradeData::_internal_auth_flag() const {
  return _impl_.auth_flag_;
}
inline uint32_t GCGuildGradePacket_GradeData::auth_flag() const {
  // @@protoc_insertion_point(field_get:network.GCGuildGradePacket.GradeData.auth_flag)
  return _internal_auth_flag();
}
inline void GCGuildGradePacket_GradeData::_internal_set_auth_flag(uint32_t value) {
  
  _impl_.auth_flag_ = value;
}
inline void GCGuildGradePacket_GradeData::set_auth_flag(uint32_t value) {
  _internal_set_auth_flag(value);
  // @@protoc_insertion_point(field_set:network.GCGuildGradePacket.GradeData.auth_flag)
}

// -------------------------------------------------------------------

// GCGuildGradePacket

// repeated .network.GCGuildGradePacket.GradeData grades = 1;
inline int GCGuildGradePacket::_internal_grades_size() const {
  return _impl_.grades_.size();
}
inline int GCGuildGradePacket::grades_size() const {
  return _internal_grades_size();
}
inline void GCGuildGradePacket::clear_grades() {
  _impl_.grades_.Clear();
}
inline ::network::GCGuildGradePacket_GradeData* GCGuildGradePacket::mutable_grades(int index) {
  // @@protoc_insertion_point(field_mutable:network.GCGuildGradePacket.grades)
  return _impl_.grades_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::GCGuildGradePacket_GradeData >*
GCGuildGradePacket::mutable_grades() {
  // @@protoc_insertion_point(field_mutable_list:network.GCGuildGradePacket.grades)
  return &_impl_.grades_;
}
inline const ::network::GCGuildGradePacket_GradeData& GCGuildGradePacket::_internal_grades(int index) const {
  return _impl_.grades_.Get(index);
}
inline const ::network::GCGuildGradePacket_GradeData& GCGuildGradePacket::grades(int index) const {
  // @@protoc_insertion_point(field_get:network.GCGuildGradePacket.grades)
  return _internal_grades(index);
}
inline ::network::GCGuildGradePacket_GradeData* GCGuildGradePacket::_internal_add_grades() {
  return _impl_.grades_.Add();
}
inline ::network::GCGuildGradePacket_GradeData* GCGuildGradePacket::add_grades() {
  ::network::GCGuildGradePacket_GradeData* _add = _internal_add_grades();
  // @@protoc_insertion_point(field_add:network.GCGuildGradePacket.grades)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::GCGuildGradePacket_GradeData >&
GCGuildGradePacket::grades() const {
  // @@protoc_insertion_point(field_list:network.GCGuildGradePacket.grades)
  return _impl_.grades_;
}

// -------------------------------------------------------------------

// GCGuildGradeNamePacket

// uint32 index = 1;
inline void GCGuildGradeNamePacket::clear_index() {
  _impl_.index_ = 0u;
}
inline uint32_t GCGuildGradeNamePacket::_internal_index() const {
  return _impl_.index_;
}
inline uint32_t GCGuildGradeNamePacket::index() const {
  // @@protoc_insertion_point(field_get:network.GCGuildGradeNamePacket.index)
  return _internal_index();
}
inline void GCGuildGradeNamePacket::_internal_set_index(uint32_t value) {
  
  _impl_.index_ = value;
}
inline void GCGuildGradeNamePacket::set_index(uint32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:network.GCGuildGradeNamePacket.index)
}

// bytes name = 2;
inline void GCGuildGradeNamePacket::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GCGuildGradeNamePacket::name() const {
  // @@protoc_insertion_point(field_get:network.GCGuildGradeNamePacket.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GCGuildGradeNamePacket::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GCGuildGradeNamePacket.name)
}
inline std::string* GCGuildGradeNamePacket::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:network.GCGuildGradeNamePacket.name)
  return _s;
}
inline const std::string& GCGuildGradeNamePacket::_internal_name() const {
  return _impl_.name_.Get();
}
inline void GCGuildGradeNamePacket::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* GCGuildGradeNamePacket::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* GCGuildGradeNamePacket::release_name() {
  // @@protoc_insertion_point(field_release:network.GCGuildGradeNamePacket.name)
  return _impl_.name_.Release();
}
inline void GCGuildGradeNamePacket::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GCGuildGradeNamePacket.name)
}

// -------------------------------------------------------------------

// GCGuildGradeAuthPacket

// uint32 index = 1;
inline void GCGuildGradeAuthPacket::clear_index() {
  _impl_.index_ = 0u;
}
inline uint32_t GCGuildGradeAuthPacket::_internal_index() const {
  return _impl_.index_;
}
inline uint32_t GCGuildGradeAuthPacket::index() const {
  // @@protoc_insertion_point(field_get:network.GCGuildGradeAuthPacket.index)
  return _internal_index();
}
inline void GCGuildGradeAuthPacket::_internal_set_index(uint32_t value) {
  
  _impl_.index_ = value;
}
inline void GCGuildGradeAuthPacket::set_index(uint32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:network.GCGuildGradeAuthPacket.index)
}

// uint32 auth_flag = 2;
inline void GCGuildGradeAuthPacket::clear_auth_flag() {
  _impl_.auth_flag_ = 0u;
}
inline uint32_t GCGuildGradeAuthPacket::_internal_auth_flag() const {
  return _impl_.auth_flag_;
}
inline uint32_t GCGuildGradeAuthPacket::auth_flag() const {
  // @@protoc_insertion_point(field_get:network.GCGuildGradeAuthPacket.auth_flag)
  return _internal_auth_flag();
}
inline void GCGuildGradeAuthPacket::_internal_set_auth_flag(uint32_t value) {
  
  _impl_.auth_flag_ = value;
}
inline void GCGuildGradeAuthPacket::set_auth_flag(uint32_t value) {
  _internal_set_auth_flag(value);
  // @@protoc_insertion_point(field_set:network.GCGuildGradeAuthPacket.auth_flag)
}

// -------------------------------------------------------------------

// GCGuildInfoPacket

// uint32 member_count = 1;
inline void GCGuildInfoPacket::clear_member_count() {
  _impl_.member_count_ = 0u;
}
inline uint32_t GCGuildInfoPacket::_internal_member_count() const {
  return _impl_.member_count_;
}
inline uint32_t GCGuildInfoPacket::member_count() const {
  // @@protoc_insertion_point(field_get:network.GCGuildInfoPacket.member_count)
  return _internal_member_count();
}
inline void GCGuildInfoPacket::_internal_set_member_count(uint32_t value) {
  
  _impl_.member_count_ = value;
}
inline void GCGuildInfoPacket::set_member_count(uint32_t value) {
  _internal_set_member_count(value);
  // @@protoc_insertion_point(field_set:network.GCGuildInfoPacket.member_count)
}

// uint32 max_member_count = 2;
inline void GCGuildInfoPacket::clear_max_member_count() {
  _impl_.max_member_count_ = 0u;
}
inline uint32_t GCGuildInfoPacket::_internal_max_member_count() const {
  return _impl_.max_member_count_;
}
inline uint32_t GCGuildInfoPacket::max_member_count() const {
  // @@protoc_insertion_point(field_get:network.GCGuildInfoPacket.max_member_count)
  return _internal_max_member_count();
}
inline void GCGuildInfoPacket::_internal_set_max_member_count(uint32_t value) {
  
  _impl_.max_member_count_ = value;
}
inline void GCGuildInfoPacket::set_max_member_count(uint32_t value) {
  _internal_set_max_member_count(value);
  // @@protoc_insertion_point(field_set:network.GCGuildInfoPacket.max_member_count)
}

// uint32 guild_id = 3;
inline void GCGuildInfoPacket::clear_guild_id() {
  _impl_.guild_id_ = 0u;
}
inline uint32_t GCGuildInfoPacket::_internal_guild_id() const {
  return _impl_.guild_id_;
}
inline uint32_t GCGuildInfoPacket::guild_id() const {
  // @@protoc_insertion_point(field_get:network.GCGuildInfoPacket.guild_id)
  return _internal_guild_id();
}
inline void GCGuildInfoPacket::_internal_set_guild_id(uint32_t value) {
  
  _impl_.guild_id_ = value;
}
inline void GCGuildInfoPacket::set_guild_id(uint32_t value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:network.GCGuildInfoPacket.guild_id)
}

// uint32 master_pid = 4;
inline void GCGuildInfoPacket::clear_master_pid() {
  _impl_.master_pid_ = 0u;
}
inline uint32_t GCGuildInfoPacket::_internal_master_pid() const {
  return _impl_.master_pid_;
}
inline uint32_t GCGuildInfoPacket::master_pid() const {
  // @@protoc_insertion_point(field_get:network.GCGuildInfoPacket.master_pid)
  return _internal_master_pid();
}
inline void GCGuildInfoPacket::_internal_set_master_pid(uint32_t value) {
  
  _impl_.master_pid_ = value;
}
inline void GCGuildInfoPacket::set_master_pid(uint32_t value) {
  _internal_set_master_pid(value);
  // @@protoc_insertion_point(field_set:network.GCGuildInfoPacket.master_pid)
}

// uint32 exp = 5;
inline void GCGuildInfoPacket::clear_exp() {
  _impl_.exp_ = 0u;
}
inline uint32_t GCGuildInfoPacket::_internal_exp() const {
  return _impl_.exp_;
}
inline uint32_t GCGuildInfoPacket::exp() const {
  // @@protoc_insertion_point(field_get:network.GCGuildInfoPacket.exp)
  return _internal_exp();
}
inline void GCGuildInfoPacket::_internal_set_exp(uint32_t value) {
  
  _impl_.exp_ = value;
}
inline void GCGuildInfoPacket::set_exp(uint32_t value) {
  _internal_set_exp(value);
  // @@protoc_insertion_point(field_set:network.GCGuildInfoPacket.exp)
}

// uint32 level = 6;
inline void GCGuildInfoPacket::clear_level() {
  _impl_.level_ = 0u;
}
inline uint32_t GCGuildInfoPacket::_internal_level() const {
  return _impl_.level_;
}
inline uint32_t GCGuildInfoPacket::level() const {
  // @@protoc_insertion_point(field_get:network.GCGuildInfoPacket.level)
  return _internal_level();
}
inline void GCGuildInfoPacket::_internal_set_level(uint32_t value) {
  
  _impl_.level_ = value;
}
inline void GCGuildInfoPacket::set_level(uint32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:network.GCGuildInfoPacket.level)
}

// bytes name = 7;
inline void GCGuildInfoPacket::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GCGuildInfoPacket::name() const {
  // @@protoc_insertion_point(field_get:network.GCGuildInfoPacket.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GCGuildInfoPacket::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GCGuildInfoPacket.name)
}
inline std::string* GCGuildInfoPacket::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:network.GCGuildInfoPacket.name)
  return _s;
}
inline const std::string& GCGuildInfoPacket::_internal_name() const {
  return _impl_.name_.Get();
}
inline void GCGuildInfoPacket::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* GCGuildInfoPacket::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* GCGuildInfoPacket::release_name() {
  // @@protoc_insertion_point(field_release:network.GCGuildInfoPacket.name)
  return _impl_.name_.Release();
}
inline void GCGuildInfoPacket::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GCGuildInfoPacket.name)
}

// uint32 gold = 8;
inline void GCGuildInfoPacket::clear_gold() {
  _impl_.gold_ = 0u;
}
inline uint32_t GCGuildInfoPacket::_internal_gold() const {
  return _impl_.gold_;
}
inline uint32_t GCGuildInfoPacket::gold() const {
  // @@protoc_insertion_point(field_get:network.GCGuildInfoPacket.gold)
  return _internal_gold();
}
inline void GCGuildInfoPacket::_internal_set_gold(uint32_t value) {
  
  _impl_.gold_ = value;
}
inline void GCGuildInfoPacket::set_gold(uint32_t value) {
  _internal_set_gold(value);
  // @@protoc_insertion_point(field_set:network.GCGuildInfoPacket.gold)
}

// bool has_land = 9;
inline void GCGuildInfoPacket::clear_has_land() {
  _impl_.has_land_ = false;
}
inline bool GCGuildInfoPacket::_internal_has_land() const {
  return _impl_.has_land_;
}
inline bool GCGuildInfoPacket::has_land() const {
  // @@protoc_insertion_point(field_get:network.GCGuildInfoPacket.has_land)
  return _internal_has_land();
}
inline void GCGuildInfoPacket::_internal_set_has_land(bool value) {
  
  _impl_.has_land_ = value;
}
inline void GCGuildInfoPacket::set_has_land(bool value) {
  _internal_set_has_land(value);
  // @@protoc_insertion_point(field_set:network.GCGuildInfoPacket.has_land)
}

// uint32 guild_point = 10;
inline void GCGuildInfoPacket::clear_guild_point() {
  _impl_.guild_point_ = 0u;
}
inline uint32_t GCGuildInfoPacket::_internal_guild_point() const {
  return _impl_.guild_point_;
}
inline uint32_t GCGuildInfoPacket::guild_point() const {
  // @@protoc_insertion_point(field_get:network.GCGuildInfoPacket.guild_point)
  return _internal_guild_point();
}
inline void GCGuildInfoPacket::_internal_set_guild_point(uint32_t value) {
  
  _impl_.guild_point_ = value;
}
inline void GCGuildInfoPacket::set_guild_point(uint32_t value) {
  _internal_set_guild_point(value);
  // @@protoc_insertion_point(field_set:network.GCGuildInfoPacket.guild_point)
}

// uint32 guild_rank = 11;
inline void GCGuildInfoPacket::clear_guild_rank() {
  _impl_.guild_rank_ = 0u;
}
inline uint32_t GCGuildInfoPacket::_internal_guild_rank() const {
  return _impl_.guild_rank_;
}
inline uint32_t GCGuildInfoPacket::guild_rank() const {
  // @@protoc_insertion_point(field_get:network.GCGuildInfoPacket.guild_rank)
  return _internal_guild_rank();
}
inline void GCGuildInfoPacket::_internal_set_guild_rank(uint32_t value) {
  
  _impl_.guild_rank_ = value;
}
inline void GCGuildInfoPacket::set_guild_rank(uint32_t value) {
  _internal_set_guild_rank(value);
  // @@protoc_insertion_point(field_set:network.GCGuildInfoPacket.guild_rank)
}

// repeated uint32 wins = 12;
inline int GCGuildInfoPacket::_internal_wins_size() const {
  return _impl_.wins_.size();
}
inline int GCGuildInfoPacket::wins_size() const {
  return _internal_wins_size();
}
inline void GCGuildInfoPacket::clear_wins() {
  _impl_.wins_.Clear();
}
inline uint32_t GCGuildInfoPacket::_internal_wins(int index) const {
  return _impl_.wins_.Get(index);
}
inline uint32_t GCGuildInfoPacket::wins(int index) const {
  // @@protoc_insertion_point(field_get:network.GCGuildInfoPacket.wins)
  return _internal_wins(index);
}
inline void GCGuildInfoPacket::set_wins(int index, uint32_t value) {
  _impl_.wins_.Set(index, value);
  // @@protoc_insertion_point(field_set:network.GCGuildInfoPacket.wins)
}
inline void GCGuildInfoPacket::_internal_add_wins(uint32_t value) {
  _impl_.wins_.Add(value);
}
inline void GCGuildInfoPacket::add_wins(uint32_t value) {
  _internal_add_wins(value);
  // @@protoc_insertion_point(field_add:network.GCGuildInfoPacket.wins)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
GCGuildInfoPacket::_internal_wins() const {
  return _impl_.wins_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
GCGuildInfoPacket::wins() const {
  // @@protoc_insertion_point(field_list:network.GCGuildInfoPacket.wins)
  return _internal_wins();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
GCGuildInfoPacket::_internal_mutable_wins() {
  return &_impl_.wins_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
GCGuildInfoPacket::mutable_wins() {
  // @@protoc_insertion_point(field_mutable_list:network.GCGuildInfoPacket.wins)
  return _internal_mutable_wins();
}

// repeated uint32 draws = 13;
inline int GCGuildInfoPacket::_internal_draws_size() const {
  return _impl_.draws_.size();
}
inline int GCGuildInfoPacket::draws_size() const {
  return _internal_draws_size();
}
inline void GCGuildInfoPacket::clear_draws() {
  _impl_.draws_.Clear();
}
inline uint32_t GCGuildInfoPacket::_internal_draws(int index) const {
  return _impl_.draws_.Get(index);
}
inline uint32_t GCGuildInfoPacket::draws(int index) const {
  // @@protoc_insertion_point(field_get:network.GCGuildInfoPacket.draws)
  return _internal_draws(index);
}
inline void GCGuildInfoPacket::set_draws(int index, uint32_t value) {
  _impl_.draws_.Set(index, value);
  // @@protoc_insertion_point(field_set:network.GCGuildInfoPacket.draws)
}
inline void GCGuildInfoPacket::_internal_add_draws(uint32_t value) {
  _impl_.draws_.Add(value);
}
inline void GCGuildInfoPacket::add_draws(uint32_t value) {
  _internal_add_draws(value);
  // @@protoc_insertion_point(field_add:network.GCGuildInfoPacket.draws)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
GCGuildInfoPacket::_internal_draws() const {
  return _impl_.draws_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
GCGuildInfoPacket::draws() const {
  // @@protoc_insertion_point(field_list:network.GCGuildInfoPacket.draws)
  return _internal_draws();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
GCGuildInfoPacket::_internal_mutable_draws() {
  return &_impl_.draws_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
GCGuildInfoPacket::mutable_draws() {
  // @@protoc_insertion_point(field_mutable_list:network.GCGuildInfoPacket.draws)
  return _internal_mutable_draws();
}

// repeated uint32 losses = 14;
inline int GCGuildInfoPacket::_internal_losses_size() const {
  return _impl_.losses_.size();
}
inline int GCGuildInfoPacket::losses_size() const {
  return _internal_losses_size();
}
inline void GCGuildInfoPacket::clear_losses() {
  _impl_.losses_.Clear();
}
inline uint32_t GCGuildInfoPacket::_internal_losses(int index) const {
  return _impl_.losses_.Get(index);
}
inline uint32_t GCGuildInfoPacket::losses(int index) const {
  // @@protoc_insertion_point(field_get:network.GCGuildInfoPacket.losses)
  return _internal_losses(index);
}
inline void GCGuildInfoPacket::set_losses(int index, uint32_t value) {
  _impl_.losses_.Set(index, value);
  // @@protoc_insertion_point(field_set:network.GCGuildInfoPacket.losses)
}
inline void GCGuildInfoPacket::_internal_add_losses(uint32_t value) {
  _impl_.losses_.Add(value);
}
inline void GCGuildInfoPacket::add_losses(uint32_t value) {
  _internal_add_losses(value);
  // @@protoc_insertion_point(field_add:network.GCGuildInfoPacket.losses)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
GCGuildInfoPacket::_internal_losses() const {
  return _impl_.losses_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
GCGuildInfoPacket::losses() const {
  // @@protoc_insertion_point(field_list:network.GCGuildInfoPacket.losses)
  return _internal_losses();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
GCGuildInfoPacket::_internal_mutable_losses() {
  return &_impl_.losses_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
GCGuildInfoPacket::mutable_losses() {
  // @@protoc_insertion_point(field_mutable_list:network.GCGuildInfoPacket.losses)
  return _internal_mutable_losses();
}

// -------------------------------------------------------------------

// GCGuildCommentsPacket_Comment

// uint32 id = 1;
inline void GCGuildCommentsPacket_Comment::clear_id() {
  _impl_.id_ = 0u;
}
inline uint32_t GCGuildCommentsPacket_Comment::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t GCGuildCommentsPacket_Comment::id() const {
  // @@protoc_insertion_point(field_get:network.GCGuildCommentsPacket.Comment.id)
  return _internal_id();
}
inline void GCGuildCommentsPacket_Comment::_internal_set_id(uint32_t value) {
  
  _impl_.id_ = value;
}
inline void GCGuildCommentsPacket_Comment::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:network.GCGuildCommentsPacket.Comment.id)
}

// bytes name = 2;
inline void GCGuildCommentsPacket_Comment::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GCGuildCommentsPacket_Comment::name() const {
  // @@protoc_insertion_point(field_get:network.GCGuildCommentsPacket.Comment.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GCGuildCommentsPacket_Comment::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GCGuildCommentsPacket.Comment.name)
}
inline std::string* GCGuildCommentsPacket_Comment::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:network.GCGuildCommentsPacket.Comment.name)
  return _s;
}
inline const std::string& GCGuildCommentsPacket_Comment::_internal_name() const {
  return _impl_.name_.Get();
}
inline void GCGuildCommentsPacket_Comment::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* GCGuildCommentsPacket_Comment::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* GCGuildCommentsPacket_Comment::release_name() {
  // @@protoc_insertion_point(field_release:network.GCGuildCommentsPacket.Comment.name)
  return _impl_.name_.Release();
}
inline void GCGuildCommentsPacket_Comment::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GCGuildCommentsPacket.Comment.name)
}

// bytes message = 3;
inline void GCGuildCommentsPacket_Comment::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& GCGuildCommentsPacket_Comment::message() const {
  // @@protoc_insertion_point(field_get:network.GCGuildCommentsPacket.Comment.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GCGuildCommentsPacket_Comment::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GCGuildCommentsPacket.Comment.message)
}
inline std::string* GCGuildCommentsPacket_Comment::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:network.GCGuildCommentsPacket.Comment.message)
  return _s;
}
inline const std::string& GCGuildCommentsPacket_Comment::_internal_message() const {
  return _impl_.message_.Get();
}
inline void GCGuildCommentsPacket_Comment::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* GCGuildCommentsPacket_Comment::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* GCGuildCommentsPacket_Comment::release_message() {
  // @@protoc_insertion_point(field_release:network.GCGuildCommentsPacket.Comment.message)
  return _impl_.message_.Release();
}
inline void GCGuildCommentsPacket_Comment::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GCGuildCommentsPacket.Comment.message)
}

// -------------------------------------------------------------------

// GCGuildCommentsPacket

// repeated .network.GCGuildCommentsPacket.Comment comments = 1;
inline int GCGuildCommentsPacket::_internal_comments_size() const {
  return _impl_.comments_.size();
}
inline int GCGuildCommentsPacket::comments_size() const {
  return _internal_comments_size();
}
inline void GCGuildCommentsPacket::clear_comments() {
  _impl_.comments_.Clear();
}
inline ::network::GCGuildCommentsPacket_Comment* GCGuildCommentsPacket::mutable_comments(int index) {
  // @@protoc_insertion_point(field_mutable:network.GCGuildCommentsPacket.comments)
  return _impl_.comments_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::GCGuildCommentsPacket_Comment >*
GCGuildCommentsPacket::mutable_comments() {
  // @@protoc_insertion_point(field_mutable_list:network.GCGuildCommentsPacket.comments)
  return &_impl_.comments_;
}
inline const ::network::GCGuildCommentsPacket_Comment& GCGuildCommentsPacket::_internal_comments(int index) const {
  return _impl_.comments_.Get(index);
}
inline const ::network::GCGuildCommentsPacket_Comment& GCGuildCommentsPacket::comments(int index) const {
  // @@protoc_insertion_point(field_get:network.GCGuildCommentsPacket.comments)
  return _internal_comments(index);
}
inline ::network::GCGuildCommentsPacket_Comment* GCGuildCommentsPacket::_internal_add_comments() {
  return _impl_.comments_.Add();
}
inline ::network::GCGuildCommentsPacket_Comment* GCGuildCommentsPacket::add_comments() {
  ::network::GCGuildCommentsPacket_Comment* _add = _internal_add_comments();
  // @@protoc_insertion_point(field_add:network.GCGuildCommentsPacket.comments)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::GCGuildCommentsPacket_Comment >&
GCGuildCommentsPacket::comments() const {
  // @@protoc_insertion_point(field_list:network.GCGuildCommentsPacket.comments)
  return _impl_.comments_;
}

// -------------------------------------------------------------------

// GCGuildChangeExpPacket

// uint32 level = 1;
inline void GCGuildChangeExpPacket::clear_level() {
  _impl_.level_ = 0u;
}
inline uint32_t GCGuildChangeExpPacket::_internal_level() const {
  return _impl_.level_;
}
inline uint32_t GCGuildChangeExpPacket::level() const {
  // @@protoc_insertion_point(field_get:network.GCGuildChangeExpPacket.level)
  return _internal_level();
}
inline void GCGuildChangeExpPacket::_internal_set_level(uint32_t value) {
  
  _impl_.level_ = value;
}
inline void GCGuildChangeExpPacket::set_level(uint32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:network.GCGuildChangeExpPacket.level)
}

// uint32 exp = 2;
inline void GCGuildChangeExpPacket::clear_exp() {
  _impl_.exp_ = 0u;
}
inline uint32_t GCGuildChangeExpPacket::_internal_exp() const {
  return _impl_.exp_;
}
inline uint32_t GCGuildChangeExpPacket::exp() const {
  // @@protoc_insertion_point(field_get:network.GCGuildChangeExpPacket.exp)
  return _internal_exp();
}
inline void GCGuildChangeExpPacket::_internal_set_exp(uint32_t value) {
  
  _impl_.exp_ = value;
}
inline void GCGuildChangeExpPacket::set_exp(uint32_t value) {
  _internal_set_exp(value);
  // @@protoc_insertion_point(field_set:network.GCGuildChangeExpPacket.exp)
}

// -------------------------------------------------------------------

// GCGuildChangeMemberGradePacket

// uint32 pid = 1;
inline void GCGuildChangeMemberGradePacket::clear_pid() {
  _impl_.pid_ = 0u;
}
inline uint32_t GCGuildChangeMemberGradePacket::_internal_pid() const {
  return _impl_.pid_;
}
inline uint32_t GCGuildChangeMemberGradePacket::pid() const {
  // @@protoc_insertion_point(field_get:network.GCGuildChangeMemberGradePacket.pid)
  return _internal_pid();
}
inline void GCGuildChangeMemberGradePacket::_internal_set_pid(uint32_t value) {
  
  _impl_.pid_ = value;
}
inline void GCGuildChangeMemberGradePacket::set_pid(uint32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:network.GCGuildChangeMemberGradePacket.pid)
}

// uint32 grade = 2;
inline void GCGuildChangeMemberGradePacket::clear_grade() {
  _impl_.grade_ = 0u;
}
inline uint32_t GCGuildChangeMemberGradePacket::_internal_grade() const {
  return _impl_.grade_;
}
inline uint32_t GCGuildChangeMemberGradePacket::grade() const {
  // @@protoc_insertion_point(field_get:network.GCGuildChangeMemberGradePacket.grade)
  return _internal_grade();
}
inline void GCGuildChangeMemberGradePacket::_internal_set_grade(uint32_t value) {
  
  _impl_.grade_ = value;
}
inline void GCGuildChangeMemberGradePacket::set_grade(uint32_t value) {
  _internal_set_grade(value);
  // @@protoc_insertion_point(field_set:network.GCGuildChangeMemberGradePacket.grade)
}

// -------------------------------------------------------------------

// GCGuildSkillInfoPacket

// uint32 skill_point = 1;
inline void GCGuildSkillInfoPacket::clear_skill_point() {
  _impl_.skill_point_ = 0u;
}
inline uint32_t GCGuildSkillInfoPacket::_internal_skill_point() const {
  return _impl_.skill_point_;
}
inline uint32_t GCGuildSkillInfoPacket::skill_point() const {
  // @@protoc_insertion_point(field_get:network.GCGuildSkillInfoPacket.skill_point)
  return _internal_skill_point();
}
inline void GCGuildSkillInfoPacket::_internal_set_skill_point(uint32_t value) {
  
  _impl_.skill_point_ = value;
}
inline void GCGuildSkillInfoPacket::set_skill_point(uint32_t value) {
  _internal_set_skill_point(value);
  // @@protoc_insertion_point(field_set:network.GCGuildSkillInfoPacket.skill_point)
}

// repeated uint32 skill_levels = 2;
inline int GCGuildSkillInfoPacket::_internal_skill_levels_size() const {
  return _impl_.skill_levels_.size();
}
inline int GCGuildSkillInfoPacket::skill_levels_size() const {
  return _internal_skill_levels_size();
}
inline void GCGuildSkillInfoPacket::clear_skill_levels() {
  _impl_.skill_levels_.Clear();
}
inline uint32_t GCGuildSkillInfoPacket::_internal_skill_levels(int index) const {
  return _impl_.skill_levels_.Get(index);
}
inline uint32_t GCGuildSkillInfoPacket::skill_levels(int index) const {
  // @@protoc_insertion_point(field_get:network.GCGuildSkillInfoPacket.skill_levels)
  return _internal_skill_levels(index);
}
inline void GCGuildSkillInfoPacket::set_skill_levels(int index, uint32_t value) {
  _impl_.skill_levels_.Set(index, value);
  // @@protoc_insertion_point(field_set:network.GCGuildSkillInfoPacket.skill_levels)
}
inline void GCGuildSkillInfoPacket::_internal_add_skill_levels(uint32_t value) {
  _impl_.skill_levels_.Add(value);
}
inline void GCGuildSkillInfoPacket::add_skill_levels(uint32_t value) {
  _internal_add_skill_levels(value);
  // @@protoc_insertion_point(field_add:network.GCGuildSkillInfoPacket.skill_levels)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
GCGuildSkillInfoPacket::_internal_skill_levels() const {
  return _impl_.skill_levels_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
GCGuildSkillInfoPacket::skill_levels() const {
  // @@protoc_insertion_point(field_list:network.GCGuildSkillInfoPacket.skill_levels)
  return _internal_skill_levels();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
GCGuildSkillInfoPacket::_internal_mutable_skill_levels() {
  return &_impl_.skill_levels_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
GCGuildSkillInfoPacket::mutable_skill_levels() {
  // @@protoc_insertion_point(field_mutable_list:network.GCGuildSkillInfoPacket.skill_levels)
  return _internal_mutable_skill_levels();
}

// uint32 guild_point = 3;
inline void GCGuildSkillInfoPacket::clear_guild_point() {
  _impl_.guild_point_ = 0u;
}
inline uint32_t GCGuildSkillInfoPacket::_internal_guild_point() const {
  return _impl_.guild_point_;
}
inline uint32_t GCGuildSkillInfoPacket::guild_point() const {
  // @@protoc_insertion_point(field_get:network.GCGuildSkillInfoPacket.guild_point)
  return _internal_guild_point();
}
inline void GCGuildSkillInfoPacket::_internal_set_guild_point(uint32_t value) {
  
  _impl_.guild_point_ = value;
}
inline void GCGuildSkillInfoPacket::set_guild_point(uint32_t value) {
  _internal_set_guild_point(value);
  // @@protoc_insertion_point(field_set:network.GCGuildSkillInfoPacket.guild_point)
}

// uint32 max_guild_point = 4;
inline void GCGuildSkillInfoPacket::clear_max_guild_point() {
  _impl_.max_guild_point_ = 0u;
}
inline uint32_t GCGuildSkillInfoPacket::_internal_max_guild_point() const {
  return _impl_.max_guild_point_;
}
inline uint32_t GCGuildSkillInfoPacket::max_guild_point() const {
  // @@protoc_insertion_point(field_get:network.GCGuildSkillInfoPacket.max_guild_point)
  return _internal_max_guild_point();
}
inline void GCGuildSkillInfoPacket::_internal_set_max_guild_point(uint32_t value) {
  
  _impl_.max_guild_point_ = value;
}
inline void GCGuildSkillInfoPacket::set_max_guild_point(uint32_t value) {
  _internal_set_max_guild_point(value);
  // @@protoc_insertion_point(field_set:network.GCGuildSkillInfoPacket.max_guild_point)
}

// -------------------------------------------------------------------

// GCGuildChangeMemberGeneralPacket

// uint32 pid = 1;
inline void GCGuildChangeMemberGeneralPacket::clear_pid() {
  _impl_.pid_ = 0u;
}
inline uint32_t GCGuildChangeMemberGeneralPacket::_internal_pid() const {
  return _impl_.pid_;
}
inline uint32_t GCGuildChangeMemberGeneralPacket::pid() const {
  // @@protoc_insertion_point(field_get:network.GCGuildChangeMemberGeneralPacket.pid)
  return _internal_pid();
}
inline void GCGuildChangeMemberGeneralPacket::_internal_set_pid(uint32_t value) {
  
  _impl_.pid_ = value;
}
inline void GCGuildChangeMemberGeneralPacket::set_pid(uint32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:network.GCGuildChangeMemberGeneralPacket.pid)
}

// bool flag = 2;
inline void GCGuildChangeMemberGeneralPacket::clear_flag() {
  _impl_.flag_ = false;
}
inline bool GCGuildChangeMemberGeneralPacket::_internal_flag() const {
  return _impl_.flag_;
}
inline bool GCGuildChangeMemberGeneralPacket::flag() const {
  // @@protoc_insertion_point(field_get:network.GCGuildChangeMemberGeneralPacket.flag)
  return _internal_flag();
}
inline void GCGuildChangeMemberGeneralPacket::_internal_set_flag(bool value) {
  
  _impl_.flag_ = value;
}
inline void GCGuildChangeMemberGeneralPacket::set_flag(bool value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:network.GCGuildChangeMemberGeneralPacket.flag)
}

// -------------------------------------------------------------------

// GCGuildInvitePacket

// uint32 guild_id = 1;
inline void GCGuildInvitePacket::clear_guild_id() {
  _impl_.guild_id_ = 0u;
}
inline uint32_t GCGuildInvitePacket::_internal_guild_id() const {
  return _impl_.guild_id_;
}
inline uint32_t GCGuildInvitePacket::guild_id() const {
  // @@protoc_insertion_point(field_get:network.GCGuildInvitePacket.guild_id)
  return _internal_guild_id();
}
inline void GCGuildInvitePacket::_internal_set_guild_id(uint32_t value) {
  
  _impl_.guild_id_ = value;
}
inline void GCGuildInvitePacket::set_guild_id(uint32_t value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:network.GCGuildInvitePacket.guild_id)
}

// bytes guild_name = 2;
inline void GCGuildInvitePacket::clear_guild_name() {
  _impl_.guild_name_.ClearToEmpty();
}
inline const std::string& GCGuildInvitePacket::guild_name() const {
  // @@protoc_insertion_point(field_get:network.GCGuildInvitePacket.guild_name)
  return _internal_guild_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GCGuildInvitePacket::set_guild_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.guild_name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GCGuildInvitePacket.guild_name)
}
inline std::string* GCGuildInvitePacket::mutable_guild_name() {
  std::string* _s = _internal_mutable_guild_name();
  // @@protoc_insertion_point(field_mutable:network.GCGuildInvitePacket.guild_name)
  return _s;
}
inline const std::string& GCGuildInvitePacket::_internal_guild_name() const {
  return _impl_.guild_name_.Get();
}
inline void GCGuildInvitePacket::_internal_set_guild_name(const std::string& value) {
  
  _impl_.guild_name_.Set(value, GetArenaForAllocation());
}
inline std::string* GCGuildInvitePacket::_internal_mutable_guild_name() {
  
  return _impl_.guild_name_.Mutable(GetArenaForAllocation());
}
inline std::string* GCGuildInvitePacket::release_guild_name() {
  // @@protoc_insertion_point(field_release:network.GCGuildInvitePacket.guild_name)
  return _impl_.guild_name_.Release();
}
inline void GCGuildInvitePacket::set_allocated_guild_name(std::string* guild_name) {
  if (guild_name != nullptr) {
    
  } else {
    
  }
  _impl_.guild_name_.SetAllocated(guild_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.guild_name_.IsDefault()) {
    _impl_.guild_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GCGuildInvitePacket.guild_name)
}

// -------------------------------------------------------------------

// GCGuildMemberLastPlayedPacket_MemberInfo

// uint32 pid = 1;
inline void GCGuildMemberLastPlayedPacket_MemberInfo::clear_pid() {
  _impl_.pid_ = 0u;
}
inline uint32_t GCGuildMemberLastPlayedPacket_MemberInfo::_internal_pid() const {
  return _impl_.pid_;
}
inline uint32_t GCGuildMemberLastPlayedPacket_MemberInfo::pid() const {
  // @@protoc_insertion_point(field_get:network.GCGuildMemberLastPlayedPacket.MemberInfo.pid)
  return _internal_pid();
}
inline void GCGuildMemberLastPlayedPacket_MemberInfo::_internal_set_pid(uint32_t value) {
  
  _impl_.pid_ = value;
}
inline void GCGuildMemberLastPlayedPacket_MemberInfo::set_pid(uint32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:network.GCGuildMemberLastPlayedPacket.MemberInfo.pid)
}

// uint32 timestamp = 2;
inline void GCGuildMemberLastPlayedPacket_MemberInfo::clear_timestamp() {
  _impl_.timestamp_ = 0u;
}
inline uint32_t GCGuildMemberLastPlayedPacket_MemberInfo::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline uint32_t GCGuildMemberLastPlayedPacket_MemberInfo::timestamp() const {
  // @@protoc_insertion_point(field_get:network.GCGuildMemberLastPlayedPacket.MemberInfo.timestamp)
  return _internal_timestamp();
}
inline void GCGuildMemberLastPlayedPacket_MemberInfo::_internal_set_timestamp(uint32_t value) {
  
  _impl_.timestamp_ = value;
}
inline void GCGuildMemberLastPlayedPacket_MemberInfo::set_timestamp(uint32_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:network.GCGuildMemberLastPlayedPacket.MemberInfo.timestamp)
}

// -------------------------------------------------------------------

// GCGuildMemberLastPlayedPacket

// repeated .network.GCGuildMemberLastPlayedPacket.MemberInfo members = 1;
inline int GCGuildMemberLastPlayedPacket::_internal_members_size() const {
  return _impl_.members_.size();
}
inline int GCGuildMemberLastPlayedPacket::members_size() const {
  return _internal_members_size();
}
inline void GCGuildMemberLastPlayedPacket::clear_members() {
  _impl_.members_.Clear();
}
inline ::network::GCGuildMemberLastPlayedPacket_MemberInfo* GCGuildMemberLastPlayedPacket::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:network.GCGuildMemberLastPlayedPacket.members)
  return _impl_.members_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::GCGuildMemberLastPlayedPacket_MemberInfo >*
GCGuildMemberLastPlayedPacket::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:network.GCGuildMemberLastPlayedPacket.members)
  return &_impl_.members_;
}
inline const ::network::GCGuildMemberLastPlayedPacket_MemberInfo& GCGuildMemberLastPlayedPacket::_internal_members(int index) const {
  return _impl_.members_.Get(index);
}
inline const ::network::GCGuildMemberLastPlayedPacket_MemberInfo& GCGuildMemberLastPlayedPacket::members(int index) const {
  // @@protoc_insertion_point(field_get:network.GCGuildMemberLastPlayedPacket.members)
  return _internal_members(index);
}
inline ::network::GCGuildMemberLastPlayedPacket_MemberInfo* GCGuildMemberLastPlayedPacket::_internal_add_members() {
  return _impl_.members_.Add();
}
inline ::network::GCGuildMemberLastPlayedPacket_MemberInfo* GCGuildMemberLastPlayedPacket::add_members() {
  ::network::GCGuildMemberLastPlayedPacket_MemberInfo* _add = _internal_add_members();
  // @@protoc_insertion_point(field_add:network.GCGuildMemberLastPlayedPacket.members)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::GCGuildMemberLastPlayedPacket_MemberInfo >&
GCGuildMemberLastPlayedPacket::members() const {
  // @@protoc_insertion_point(field_list:network.GCGuildMemberLastPlayedPacket.members)
  return _impl_.members_;
}

// -------------------------------------------------------------------

// GCGuildBattleStatsPacket

// repeated int32 wins = 1;
inline int GCGuildBattleStatsPacket::_internal_wins_size() const {
  return _impl_.wins_.size();
}
inline int GCGuildBattleStatsPacket::wins_size() const {
  return _internal_wins_size();
}
inline void GCGuildBattleStatsPacket::clear_wins() {
  _impl_.wins_.Clear();
}
inline int32_t GCGuildBattleStatsPacket::_internal_wins(int index) const {
  return _impl_.wins_.Get(index);
}
inline int32_t GCGuildBattleStatsPacket::wins(int index) const {
  // @@protoc_insertion_point(field_get:network.GCGuildBattleStatsPacket.wins)
  return _internal_wins(index);
}
inline void GCGuildBattleStatsPacket::set_wins(int index, int32_t value) {
  _impl_.wins_.Set(index, value);
  // @@protoc_insertion_point(field_set:network.GCGuildBattleStatsPacket.wins)
}
inline void GCGuildBattleStatsPacket::_internal_add_wins(int32_t value) {
  _impl_.wins_.Add(value);
}
inline void GCGuildBattleStatsPacket::add_wins(int32_t value) {
  _internal_add_wins(value);
  // @@protoc_insertion_point(field_add:network.GCGuildBattleStatsPacket.wins)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
GCGuildBattleStatsPacket::_internal_wins() const {
  return _impl_.wins_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
GCGuildBattleStatsPacket::wins() const {
  // @@protoc_insertion_point(field_list:network.GCGuildBattleStatsPacket.wins)
  return _internal_wins();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
GCGuildBattleStatsPacket::_internal_mutable_wins() {
  return &_impl_.wins_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
GCGuildBattleStatsPacket::mutable_wins() {
  // @@protoc_insertion_point(field_mutable_list:network.GCGuildBattleStatsPacket.wins)
  return _internal_mutable_wins();
}

// repeated int32 draws = 2;
inline int GCGuildBattleStatsPacket::_internal_draws_size() const {
  return _impl_.draws_.size();
}
inline int GCGuildBattleStatsPacket::draws_size() const {
  return _internal_draws_size();
}
inline void GCGuildBattleStatsPacket::clear_draws() {
  _impl_.draws_.Clear();
}
inline int32_t GCGuildBattleStatsPacket::_internal_draws(int index) const {
  return _impl_.draws_.Get(index);
}
inline int32_t GCGuildBattleStatsPacket::draws(int index) const {
  // @@protoc_insertion_point(field_get:network.GCGuildBattleStatsPacket.draws)
  return _internal_draws(index);
}
inline void GCGuildBattleStatsPacket::set_draws(int index, int32_t value) {
  _impl_.draws_.Set(index, value);
  // @@protoc_insertion_point(field_set:network.GCGuildBattleStatsPacket.draws)
}
inline void GCGuildBattleStatsPacket::_internal_add_draws(int32_t value) {
  _impl_.draws_.Add(value);
}
inline void GCGuildBattleStatsPacket::add_draws(int32_t value) {
  _internal_add_draws(value);
  // @@protoc_insertion_point(field_add:network.GCGuildBattleStatsPacket.draws)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
GCGuildBattleStatsPacket::_internal_draws() const {
  return _impl_.draws_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
GCGuildBattleStatsPacket::draws() const {
  // @@protoc_insertion_point(field_list:network.GCGuildBattleStatsPacket.draws)
  return _internal_draws();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
GCGuildBattleStatsPacket::_internal_mutable_draws() {
  return &_impl_.draws_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
GCGuildBattleStatsPacket::mutable_draws() {
  // @@protoc_insertion_point(field_mutable_list:network.GCGuildBattleStatsPacket.draws)
  return _internal_mutable_draws();
}

// repeated int32 losses = 3;
inline int GCGuildBattleStatsPacket::_internal_losses_size() const {
  return _impl_.losses_.size();
}
inline int GCGuildBattleStatsPacket::losses_size() const {
  return _internal_losses_size();
}
inline void GCGuildBattleStatsPacket::clear_losses() {
  _impl_.losses_.Clear();
}
inline int32_t GCGuildBattleStatsPacket::_internal_losses(int index) const {
  return _impl_.losses_.Get(index);
}
inline int32_t GCGuildBattleStatsPacket::losses(int index) const {
  // @@protoc_insertion_point(field_get:network.GCGuildBattleStatsPacket.losses)
  return _internal_losses(index);
}
inline void GCGuildBattleStatsPacket::set_losses(int index, int32_t value) {
  _impl_.losses_.Set(index, value);
  // @@protoc_insertion_point(field_set:network.GCGuildBattleStatsPacket.losses)
}
inline void GCGuildBattleStatsPacket::_internal_add_losses(int32_t value) {
  _impl_.losses_.Add(value);
}
inline void GCGuildBattleStatsPacket::add_losses(int32_t value) {
  _internal_add_losses(value);
  // @@protoc_insertion_point(field_add:network.GCGuildBattleStatsPacket.losses)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
GCGuildBattleStatsPacket::_internal_losses() const {
  return _impl_.losses_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
GCGuildBattleStatsPacket::losses() const {
  // @@protoc_insertion_point(field_list:network.GCGuildBattleStatsPacket.losses)
  return _internal_losses();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
GCGuildBattleStatsPacket::_internal_mutable_losses() {
  return &_impl_.losses_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
GCGuildBattleStatsPacket::mutable_losses() {
  // @@protoc_insertion_point(field_mutable_list:network.GCGuildBattleStatsPacket.losses)
  return _internal_mutable_losses();
}

// -------------------------------------------------------------------

// GCGuildWarPacket

// uint32 guild_self = 1;
inline void GCGuildWarPacket::clear_guild_self() {
  _impl_.guild_self_ = 0u;
}
inline uint32_t GCGuildWarPacket::_internal_guild_self() const {
  return _impl_.guild_self_;
}
inline uint32_t GCGuildWarPacket::guild_self() const {
  // @@protoc_insertion_point(field_get:network.GCGuildWarPacket.guild_self)
  return _internal_guild_self();
}
inline void GCGuildWarPacket::_internal_set_guild_self(uint32_t value) {
  
  _impl_.guild_self_ = value;
}
inline void GCGuildWarPacket::set_guild_self(uint32_t value) {
  _internal_set_guild_self(value);
  // @@protoc_insertion_point(field_set:network.GCGuildWarPacket.guild_self)
}

// uint32 guild_opponent = 2;
inline void GCGuildWarPacket::clear_guild_opponent() {
  _impl_.guild_opponent_ = 0u;
}
inline uint32_t GCGuildWarPacket::_internal_guild_opponent() const {
  return _impl_.guild_opponent_;
}
inline uint32_t GCGuildWarPacket::guild_opponent() const {
  // @@protoc_insertion_point(field_get:network.GCGuildWarPacket.guild_opponent)
  return _internal_guild_opponent();
}
inline void GCGuildWarPacket::_internal_set_guild_opponent(uint32_t value) {
  
  _impl_.guild_opponent_ = value;
}
inline void GCGuildWarPacket::set_guild_opponent(uint32_t value) {
  _internal_set_guild_opponent(value);
  // @@protoc_insertion_point(field_set:network.GCGuildWarPacket.guild_opponent)
}

// uint32 type = 3;
inline void GCGuildWarPacket::clear_type() {
  _impl_.type_ = 0u;
}
inline uint32_t GCGuildWarPacket::_internal_type() const {
  return _impl_.type_;
}
inline uint32_t GCGuildWarPacket::type() const {
  // @@protoc_insertion_point(field_get:network.GCGuildWarPacket.type)
  return _internal_type();
}
inline void GCGuildWarPacket::_internal_set_type(uint32_t value) {
  
  _impl_.type_ = value;
}
inline void GCGuildWarPacket::set_type(uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:network.GCGuildWarPacket.type)
}

// uint32 war_state = 4;
inline void GCGuildWarPacket::clear_war_state() {
  _impl_.war_state_ = 0u;
}
inline uint32_t GCGuildWarPacket::_internal_war_state() const {
  return _impl_.war_state_;
}
inline uint32_t GCGuildWarPacket::war_state() const {
  // @@protoc_insertion_point(field_get:network.GCGuildWarPacket.war_state)
  return _internal_war_state();
}
inline void GCGuildWarPacket::_internal_set_war_state(uint32_t value) {
  
  _impl_.war_state_ = value;
}
inline void GCGuildWarPacket::set_war_state(uint32_t value) {
  _internal_set_war_state(value);
  // @@protoc_insertion_point(field_set:network.GCGuildWarPacket.war_state)
}

// -------------------------------------------------------------------

// GCGuildNamePacket_NameInfo

// uint32 guild_id = 1;
inline void GCGuildNamePacket_NameInfo::clear_guild_id() {
  _impl_.guild_id_ = 0u;
}
inline uint32_t GCGuildNamePacket_NameInfo::_internal_guild_id() const {
  return _impl_.guild_id_;
}
inline uint32_t GCGuildNamePacket_NameInfo::guild_id() const {
  // @@protoc_insertion_point(field_get:network.GCGuildNamePacket.NameInfo.guild_id)
  return _internal_guild_id();
}
inline void GCGuildNamePacket_NameInfo::_internal_set_guild_id(uint32_t value) {
  
  _impl_.guild_id_ = value;
}
inline void GCGuildNamePacket_NameInfo::set_guild_id(uint32_t value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:network.GCGuildNamePacket.NameInfo.guild_id)
}

// bytes name = 2;
inline void GCGuildNamePacket_NameInfo::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GCGuildNamePacket_NameInfo::name() const {
  // @@protoc_insertion_point(field_get:network.GCGuildNamePacket.NameInfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GCGuildNamePacket_NameInfo::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GCGuildNamePacket.NameInfo.name)
}
inline std::string* GCGuildNamePacket_NameInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:network.GCGuildNamePacket.NameInfo.name)
  return _s;
}
inline const std::string& GCGuildNamePacket_NameInfo::_internal_name() const {
  return _impl_.name_.Get();
}
inline void GCGuildNamePacket_NameInfo::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* GCGuildNamePacket_NameInfo::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* GCGuildNamePacket_NameInfo::release_name() {
  // @@protoc_insertion_point(field_release:network.GCGuildNamePacket.NameInfo.name)
  return _impl_.name_.Release();
}
inline void GCGuildNamePacket_NameInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GCGuildNamePacket.NameInfo.name)
}

// -------------------------------------------------------------------

// GCGuildNamePacket

// repeated .network.GCGuildNamePacket.NameInfo names = 1;
inline int GCGuildNamePacket::_internal_names_size() const {
  return _impl_.names_.size();
}
inline int GCGuildNamePacket::names_size() const {
  return _internal_names_size();
}
inline void GCGuildNamePacket::clear_names() {
  _impl_.names_.Clear();
}
inline ::network::GCGuildNamePacket_NameInfo* GCGuildNamePacket::mutable_names(int index) {
  // @@protoc_insertion_point(field_mutable:network.GCGuildNamePacket.names)
  return _impl_.names_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::GCGuildNamePacket_NameInfo >*
GCGuildNamePacket::mutable_names() {
  // @@protoc_insertion_point(field_mutable_list:network.GCGuildNamePacket.names)
  return &_impl_.names_;
}
inline const ::network::GCGuildNamePacket_NameInfo& GCGuildNamePacket::_internal_names(int index) const {
  return _impl_.names_.Get(index);
}
inline const ::network::GCGuildNamePacket_NameInfo& GCGuildNamePacket::names(int index) const {
  // @@protoc_insertion_point(field_get:network.GCGuildNamePacket.names)
  return _internal_names(index);
}
inline ::network::GCGuildNamePacket_NameInfo* GCGuildNamePacket::_internal_add_names() {
  return _impl_.names_.Add();
}
inline ::network::GCGuildNamePacket_NameInfo* GCGuildNamePacket::add_names() {
  ::network::GCGuildNamePacket_NameInfo* _add = _internal_add_names();
  // @@protoc_insertion_point(field_add:network.GCGuildNamePacket.names)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::GCGuildNamePacket_NameInfo >&
GCGuildNamePacket::names() const {
  // @@protoc_insertion_point(field_list:network.GCGuildNamePacket.names)
  return _impl_.names_;
}

// -------------------------------------------------------------------

// GCGuildWarListPacket_WarInfo

// uint32 src_guild_id = 1;
inline void GCGuildWarListPacket_WarInfo::clear_src_guild_id() {
  _impl_.src_guild_id_ = 0u;
}
inline uint32_t GCGuildWarListPacket_WarInfo::_internal_src_guild_id() const {
  return _impl_.src_guild_id_;
}
inline uint32_t GCGuildWarListPacket_WarInfo::src_guild_id() const {
  // @@protoc_insertion_point(field_get:network.GCGuildWarListPacket.WarInfo.src_guild_id)
  return _internal_src_guild_id();
}
inline void GCGuildWarListPacket_WarInfo::_internal_set_src_guild_id(uint32_t value) {
  
  _impl_.src_guild_id_ = value;
}
inline void GCGuildWarListPacket_WarInfo::set_src_guild_id(uint32_t value) {
  _internal_set_src_guild_id(value);
  // @@protoc_insertion_point(field_set:network.GCGuildWarListPacket.WarInfo.src_guild_id)
}

// uint32 dst_guild_id = 2;
inline void GCGuildWarListPacket_WarInfo::clear_dst_guild_id() {
  _impl_.dst_guild_id_ = 0u;
}
inline uint32_t GCGuildWarListPacket_WarInfo::_internal_dst_guild_id() const {
  return _impl_.dst_guild_id_;
}
inline uint32_t GCGuildWarListPacket_WarInfo::dst_guild_id() const {
  // @@protoc_insertion_point(field_get:network.GCGuildWarListPacket.WarInfo.dst_guild_id)
  return _internal_dst_guild_id();
}
inline void GCGuildWarListPacket_WarInfo::_internal_set_dst_guild_id(uint32_t value) {
  
  _impl_.dst_guild_id_ = value;
}
inline void GCGuildWarListPacket_WarInfo::set_dst_guild_id(uint32_t value) {
  _internal_set_dst_guild_id(value);
  // @@protoc_insertion_point(field_set:network.GCGuildWarListPacket.WarInfo.dst_guild_id)
}

// -------------------------------------------------------------------

// GCGuildWarListPacket

// repeated .network.GCGuildWarListPacket.WarInfo wars = 1;
inline int GCGuildWarListPacket::_internal_wars_size() const {
  return _impl_.wars_.size();
}
inline int GCGuildWarListPacket::wars_size() const {
  return _internal_wars_size();
}
inline void GCGuildWarListPacket::clear_wars() {
  _impl_.wars_.Clear();
}
inline ::network::GCGuildWarListPacket_WarInfo* GCGuildWarListPacket::mutable_wars(int index) {
  // @@protoc_insertion_point(field_mutable:network.GCGuildWarListPacket.wars)
  return _impl_.wars_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::GCGuildWarListPacket_WarInfo >*
GCGuildWarListPacket::mutable_wars() {
  // @@protoc_insertion_point(field_mutable_list:network.GCGuildWarListPacket.wars)
  return &_impl_.wars_;
}
inline const ::network::GCGuildWarListPacket_WarInfo& GCGuildWarListPacket::_internal_wars(int index) const {
  return _impl_.wars_.Get(index);
}
inline const ::network::GCGuildWarListPacket_WarInfo& GCGuildWarListPacket::wars(int index) const {
  // @@protoc_insertion_point(field_get:network.GCGuildWarListPacket.wars)
  return _internal_wars(index);
}
inline ::network::GCGuildWarListPacket_WarInfo* GCGuildWarListPacket::_internal_add_wars() {
  return _impl_.wars_.Add();
}
inline ::network::GCGuildWarListPacket_WarInfo* GCGuildWarListPacket::add_wars() {
  ::network::GCGuildWarListPacket_WarInfo* _add = _internal_add_wars();
  // @@protoc_insertion_point(field_add:network.GCGuildWarListPacket.wars)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::GCGuildWarListPacket_WarInfo >&
GCGuildWarListPacket::wars() const {
  // @@protoc_insertion_point(field_list:network.GCGuildWarListPacket.wars)
  return _impl_.wars_;
}

// -------------------------------------------------------------------

// GCGuildWarEndListPacket

// repeated .network.GCGuildWarListPacket.WarInfo wars = 1;
inline int GCGuildWarEndListPacket::_internal_wars_size() const {
  return _impl_.wars_.size();
}
inline int GCGuildWarEndListPacket::wars_size() const {
  return _internal_wars_size();
}
inline void GCGuildWarEndListPacket::clear_wars() {
  _impl_.wars_.Clear();
}
inline ::network::GCGuildWarListPacket_WarInfo* GCGuildWarEndListPacket::mutable_wars(int index) {
  // @@protoc_insertion_point(field_mutable:network.GCGuildWarEndListPacket.wars)
  return _impl_.wars_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::GCGuildWarListPacket_WarInfo >*
GCGuildWarEndListPacket::mutable_wars() {
  // @@protoc_insertion_point(field_mutable_list:network.GCGuildWarEndListPacket.wars)
  return &_impl_.wars_;
}
inline const ::network::GCGuildWarListPacket_WarInfo& GCGuildWarEndListPacket::_internal_wars(int index) const {
  return _impl_.wars_.Get(index);
}
inline const ::network::GCGuildWarListPacket_WarInfo& GCGuildWarEndListPacket::wars(int index) const {
  // @@protoc_insertion_point(field_get:network.GCGuildWarEndListPacket.wars)
  return _internal_wars(index);
}
inline ::network::GCGuildWarListPacket_WarInfo* GCGuildWarEndListPacket::_internal_add_wars() {
  return _impl_.wars_.Add();
}
inline ::network::GCGuildWarListPacket_WarInfo* GCGuildWarEndListPacket::add_wars() {
  ::network::GCGuildWarListPacket_WarInfo* _add = _internal_add_wars();
  // @@protoc_insertion_point(field_add:network.GCGuildWarEndListPacket.wars)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::GCGuildWarListPacket_WarInfo >&
GCGuildWarEndListPacket::wars() const {
  // @@protoc_insertion_point(field_list:network.GCGuildWarEndListPacket.wars)
  return _impl_.wars_;
}

// -------------------------------------------------------------------

// GCGuildWarPointPacket

// uint32 gain_guild_id = 1;
inline void GCGuildWarPointPacket::clear_gain_guild_id() {
  _impl_.gain_guild_id_ = 0u;
}
inline uint32_t GCGuildWarPointPacket::_internal_gain_guild_id() const {
  return _impl_.gain_guild_id_;
}
inline uint32_t GCGuildWarPointPacket::gain_guild_id() const {
  // @@protoc_insertion_point(field_get:network.GCGuildWarPointPacket.gain_guild_id)
  return _internal_gain_guild_id();
}
inline void GCGuildWarPointPacket::_internal_set_gain_guild_id(uint32_t value) {
  
  _impl_.gain_guild_id_ = value;
}
inline void GCGuildWarPointPacket::set_gain_guild_id(uint32_t value) {
  _internal_set_gain_guild_id(value);
  // @@protoc_insertion_point(field_set:network.GCGuildWarPointPacket.gain_guild_id)
}

// uint32 opponent_guild_id = 2;
inline void GCGuildWarPointPacket::clear_opponent_guild_id() {
  _impl_.opponent_guild_id_ = 0u;
}
inline uint32_t GCGuildWarPointPacket::_internal_opponent_guild_id() const {
  return _impl_.opponent_guild_id_;
}
inline uint32_t GCGuildWarPointPacket::opponent_guild_id() const {
  // @@protoc_insertion_point(field_get:network.GCGuildWarPointPacket.opponent_guild_id)
  return _internal_opponent_guild_id();
}
inline void GCGuildWarPointPacket::_internal_set_opponent_guild_id(uint32_t value) {
  
  _impl_.opponent_guild_id_ = value;
}
inline void GCGuildWarPointPacket::set_opponent_guild_id(uint32_t value) {
  _internal_set_opponent_guild_id(value);
  // @@protoc_insertion_point(field_set:network.GCGuildWarPointPacket.opponent_guild_id)
}

// int32 point = 3;
inline void GCGuildWarPointPacket::clear_point() {
  _impl_.point_ = 0;
}
inline int32_t GCGuildWarPointPacket::_internal_point() const {
  return _impl_.point_;
}
inline int32_t GCGuildWarPointPacket::point() const {
  // @@protoc_insertion_point(field_get:network.GCGuildWarPointPacket.point)
  return _internal_point();
}
inline void GCGuildWarPointPacket::_internal_set_point(int32_t value) {
  
  _impl_.point_ = value;
}
inline void GCGuildWarPointPacket::set_point(int32_t value) {
  _internal_set_point(value);
  // @@protoc_insertion_point(field_set:network.GCGuildWarPointPacket.point)
}

// -------------------------------------------------------------------

// GCGuildMoneyChangePacket

// uint32 gold = 1;
inline void GCGuildMoneyChangePacket::clear_gold() {
  _impl_.gold_ = 0u;
}
inline uint32_t GCGuildMoneyChangePacket::_internal_gold() const {
  return _impl_.gold_;
}
inline uint32_t GCGuildMoneyChangePacket::gold() const {
  // @@protoc_insertion_point(field_get:network.GCGuildMoneyChangePacket.gold)
  return _internal_gold();
}
inline void GCGuildMoneyChangePacket::_internal_set_gold(uint32_t value) {
  
  _impl_.gold_ = value;
}
inline void GCGuildMoneyChangePacket::set_gold(uint32_t value) {
  _internal_set_gold(value);
  // @@protoc_insertion_point(field_set:network.GCGuildMoneyChangePacket.gold)
}

// -------------------------------------------------------------------

// GCGuildSafeboxOpenPacket

// uint32 size = 1;
inline void GCGuildSafeboxOpenPacket::clear_size() {
  _impl_.size_ = 0u;
}
inline uint32_t GCGuildSafeboxOpenPacket::_internal_size() const {
  return _impl_.size_;
}
inline uint32_t GCGuildSafeboxOpenPacket::size() const {
  // @@protoc_insertion_point(field_get:network.GCGuildSafeboxOpenPacket.size)
  return _internal_size();
}
inline void GCGuildSafeboxOpenPacket::_internal_set_size(uint32_t value) {
  
  _impl_.size_ = value;
}
inline void GCGuildSafeboxOpenPacket::set_size(uint32_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:network.GCGuildSafeboxOpenPacket.size)
}

// -------------------------------------------------------------------

// GCGuildSafeboxGoldPacket

// uint64 gold = 1;
inline void GCGuildSafeboxGoldPacket::clear_gold() {
  _impl_.gold_ = uint64_t{0u};
}
inline uint64_t GCGuildSafeboxGoldPacket::_internal_gold() const {
  return _impl_.gold_;
}
inline uint64_t GCGuildSafeboxGoldPacket::gold() const {
  // @@protoc_insertion_point(field_get:network.GCGuildSafeboxGoldPacket.gold)
  return _internal_gold();
}
inline void GCGuildSafeboxGoldPacket::_internal_set_gold(uint64_t value) {
  
  _impl_.gold_ = value;
}
inline void GCGuildSafeboxGoldPacket::set_gold(uint64_t value) {
  _internal_set_gold(value);
  // @@protoc_insertion_point(field_set:network.GCGuildSafeboxGoldPacket.gold)
}

// -------------------------------------------------------------------

// GCGuildSafeboxLoadLogPacket

// repeated .network.TGuildSafeboxLogTable logs = 1;
inline int GCGuildSafeboxLoadLogPacket::_internal_logs_size() const {
  return _impl_.logs_.size();
}
inline int GCGuildSafeboxLoadLogPacket::logs_size() const {
  return _internal_logs_size();
}
inline ::network::TGuildSafeboxLogTable* GCGuildSafeboxLoadLogPacket::mutable_logs(int index) {
  // @@protoc_insertion_point(field_mutable:network.GCGuildSafeboxLoadLogPacket.logs)
  return _impl_.logs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TGuildSafeboxLogTable >*
GCGuildSafeboxLoadLogPacket::mutable_logs() {
  // @@protoc_insertion_point(field_mutable_list:network.GCGuildSafeboxLoadLogPacket.logs)
  return &_impl_.logs_;
}
inline const ::network::TGuildSafeboxLogTable& GCGuildSafeboxLoadLogPacket::_internal_logs(int index) const {
  return _impl_.logs_.Get(index);
}
inline const ::network::TGuildSafeboxLogTable& GCGuildSafeboxLoadLogPacket::logs(int index) const {
  // @@protoc_insertion_point(field_get:network.GCGuildSafeboxLoadLogPacket.logs)
  return _internal_logs(index);
}
inline ::network::TGuildSafeboxLogTable* GCGuildSafeboxLoadLogPacket::_internal_add_logs() {
  return _impl_.logs_.Add();
}
inline ::network::TGuildSafeboxLogTable* GCGuildSafeboxLoadLogPacket::add_logs() {
  ::network::TGuildSafeboxLogTable* _add = _internal_add_logs();
  // @@protoc_insertion_point(field_add:network.GCGuildSafeboxLoadLogPacket.logs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TGuildSafeboxLogTable >&
GCGuildSafeboxLoadLogPacket::logs() const {
  // @@protoc_insertion_point(field_list:network.GCGuildSafeboxLoadLogPacket.logs)
  return _impl_.logs_;
}

// -------------------------------------------------------------------

// GCGuildSafeboxAppendLogPacket

// .network.TGuildSafeboxLogTable log = 1;
inline bool GCGuildSafeboxAppendLogPacket::_internal_has_log() const {
  return this != internal_default_instance() && _impl_.log_ != nullptr;
}
inline bool GCGuildSafeboxAppendLogPacket::has_log() const {
  return _internal_has_log();
}
inline const ::network::TGuildSafeboxLogTable& GCGuildSafeboxAppendLogPacket::_internal_log() const {
  const ::network::TGuildSafeboxLogTable* p = _impl_.log_;
  return p != nullptr ? *p : reinterpret_cast<const ::network::TGuildSafeboxLogTable&>(
      ::network::_TGuildSafeboxLogTable_default_instance_);
}
inline const ::network::TGuildSafeboxLogTable& GCGuildSafeboxAppendLogPacket::log() const {
  // @@protoc_insertion_point(field_get:network.GCGuildSafeboxAppendLogPacket.log)
  return _internal_log();
}
inline void GCGuildSafeboxAppendLogPacket::unsafe_arena_set_allocated_log(
    ::network::TGuildSafeboxLogTable* log) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.log_);
  }
  _impl_.log_ = log;
  if (log) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:network.GCGuildSafeboxAppendLogPacket.log)
}
inline ::network::TGuildSafeboxLogTable* GCGuildSafeboxAppendLogPacket::release_log() {
  
  ::network::TGuildSafeboxLogTable* temp = _impl_.log_;
  _impl_.log_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::network::TGuildSafeboxLogTable* GCGuildSafeboxAppendLogPacket::unsafe_arena_release_log() {
  // @@protoc_insertion_point(field_release:network.GCGuildSafeboxAppendLogPacket.log)
  
  ::network::TGuildSafeboxLogTable* temp = _impl_.log_;
  _impl_.log_ = nullptr;
  return temp;
}
inline ::network::TGuildSafeboxLogTable* GCGuildSafeboxAppendLogPacket::_internal_mutable_log() {
  
  if (_impl_.log_ == nullptr) {
    auto* p = CreateMaybeMessage<::network::TGuildSafeboxLogTable>(GetArenaForAllocation());
    _impl_.log_ = p;
  }
  return _impl_.log_;
}
inline ::network::TGuildSafeboxLogTable* GCGuildSafeboxAppendLogPacket::mutable_log() {
  ::network::TGuildSafeboxLogTable* _msg = _internal_mutable_log();
  // @@protoc_insertion_point(field_mutable:network.GCGuildSafeboxAppendLogPacket.log)
  return _msg;
}
inline void GCGuildSafeboxAppendLogPacket::set_allocated_log(::network::TGuildSafeboxLogTable* log) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.log_);
  }
  if (log) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(log));
    if (message_arena != submessage_arena) {
      log = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, log, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.log_ = log;
  // @@protoc_insertion_point(field_set_allocated:network.GCGuildSafeboxAppendLogPacket.log)
}

// -------------------------------------------------------------------

// GCGuildLadderListPacket

// repeated .network.TGuildLadderInfo ladders = 1;
inline int GCGuildLadderListPacket::_internal_ladders_size() const {
  return _impl_.ladders_.size();
}
inline int GCGuildLadderListPacket::ladders_size() const {
  return _internal_ladders_size();
}
inline ::network::TGuildLadderInfo* GCGuildLadderListPacket::mutable_ladders(int index) {
  // @@protoc_insertion_point(field_mutable:network.GCGuildLadderListPacket.ladders)
  return _impl_.ladders_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TGuildLadderInfo >*
GCGuildLadderListPacket::mutable_ladders() {
  // @@protoc_insertion_point(field_mutable_list:network.GCGuildLadderListPacket.ladders)
  return &_impl_.ladders_;
}
inline const ::network::TGuildLadderInfo& GCGuildLadderListPacket::_internal_ladders(int index) const {
  return _impl_.ladders_.Get(index);
}
inline const ::network::TGuildLadderInfo& GCGuildLadderListPacket::ladders(int index) const {
  // @@protoc_insertion_point(field_get:network.GCGuildLadderListPacket.ladders)
  return _internal_ladders(index);
}
inline ::network::TGuildLadderInfo* GCGuildLadderListPacket::_internal_add_ladders() {
  return _impl_.ladders_.Add();
}
inline ::network::TGuildLadderInfo* GCGuildLadderListPacket::add_ladders() {
  ::network::TGuildLadderInfo* _add = _internal_add_ladders();
  // @@protoc_insertion_point(field_add:network.GCGuildLadderListPacket.ladders)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TGuildLadderInfo >&
GCGuildLadderListPacket::ladders() const {
  // @@protoc_insertion_point(field_list:network.GCGuildLadderListPacket.ladders)
  return _impl_.ladders_;
}

// uint32 page_number = 2;
inline void GCGuildLadderListPacket::clear_page_number() {
  _impl_.page_number_ = 0u;
}
inline uint32_t GCGuildLadderListPacket::_internal_page_number() const {
  return _impl_.page_number_;
}
inline uint32_t GCGuildLadderListPacket::page_number() const {
  // @@protoc_insertion_point(field_get:network.GCGuildLadderListPacket.page_number)
  return _internal_page_number();
}
inline void GCGuildLadderListPacket::_internal_set_page_number(uint32_t value) {
  
  _impl_.page_number_ = value;
}
inline void GCGuildLadderListPacket::set_page_number(uint32_t value) {
  _internal_set_page_number(value);
  // @@protoc_insertion_point(field_set:network.GCGuildLadderListPacket.page_number)
}

// uint32 total_pages = 3;
inline void GCGuildLadderListPacket::clear_total_pages() {
  _impl_.total_pages_ = 0u;
}
inline uint32_t GCGuildLadderListPacket::_internal_total_pages() const {
  return _impl_.total_pages_;
}
inline uint32_t GCGuildLadderListPacket::total_pages() const {
  // @@protoc_insertion_point(field_get:network.GCGuildLadderListPacket.total_pages)
  return _internal_total_pages();
}
inline void GCGuildLadderListPacket::_internal_set_total_pages(uint32_t value) {
  
  _impl_.total_pages_ = value;
}
inline void GCGuildLadderListPacket::set_total_pages(uint32_t value) {
  _internal_set_total_pages(value);
  // @@protoc_insertion_point(field_set:network.GCGuildLadderListPacket.total_pages)
}

// -------------------------------------------------------------------

// GCGuildLadderSearchResultPacket

// .network.TGuildLadderInfo ladder = 1;
inline bool GCGuildLadderSearchResultPacket::_internal_has_ladder() const {
  return this != internal_default_instance() && _impl_.ladder_ != nullptr;
}
inline bool GCGuildLadderSearchResultPacket::has_ladder() const {
  return _internal_has_ladder();
}
inline const ::network::TGuildLadderInfo& GCGuildLadderSearchResultPacket::_internal_ladder() const {
  const ::network::TGuildLadderInfo* p = _impl_.ladder_;
  return p != nullptr ? *p : reinterpret_cast<const ::network::TGuildLadderInfo&>(
      ::network::_TGuildLadderInfo_default_instance_);
}
inline const ::network::TGuildLadderInfo& GCGuildLadderSearchResultPacket::ladder() const {
  // @@protoc_insertion_point(field_get:network.GCGuildLadderSearchResultPacket.ladder)
  return _internal_ladder();
}
inline void GCGuildLadderSearchResultPacket::unsafe_arena_set_allocated_ladder(
    ::network::TGuildLadderInfo* ladder) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ladder_);
  }
  _impl_.ladder_ = ladder;
  if (ladder) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:network.GCGuildLadderSearchResultPacket.ladder)
}
inline ::network::TGuildLadderInfo* GCGuildLadderSearchResultPacket::release_ladder() {
  
  ::network::TGuildLadderInfo* temp = _impl_.ladder_;
  _impl_.ladder_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::network::TGuildLadderInfo* GCGuildLadderSearchResultPacket::unsafe_arena_release_ladder() {
  // @@protoc_insertion_point(field_release:network.GCGuildLadderSearchResultPacket.ladder)
  
  ::network::TGuildLadderInfo* temp = _impl_.ladder_;
  _impl_.ladder_ = nullptr;
  return temp;
}
inline ::network::TGuildLadderInfo* GCGuildLadderSearchResultPacket::_internal_mutable_ladder() {
  
  if (_impl_.ladder_ == nullptr) {
    auto* p = CreateMaybeMessage<::network::TGuildLadderInfo>(GetArenaForAllocation());
    _impl_.ladder_ = p;
  }
  return _impl_.ladder_;
}
inline ::network::TGuildLadderInfo* GCGuildLadderSearchResultPacket::mutable_ladder() {
  ::network::TGuildLadderInfo* _msg = _internal_mutable_ladder();
  // @@protoc_insertion_point(field_mutable:network.GCGuildLadderSearchResultPacket.ladder)
  return _msg;
}
inline void GCGuildLadderSearchResultPacket::set_allocated_ladder(::network::TGuildLadderInfo* ladder) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ladder_);
  }
  if (ladder) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ladder));
    if (message_arena != submessage_arena) {
      ladder = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ladder, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.ladder_ = ladder;
  // @@protoc_insertion_point(field_set_allocated:network.GCGuildLadderSearchResultPacket.ladder)
}

// uint32 rank = 2;
inline void GCGuildLadderSearchResultPacket::clear_rank() {
  _impl_.rank_ = 0u;
}
inline uint32_t GCGuildLadderSearchResultPacket::_internal_rank() const {
  return _impl_.rank_;
}
inline uint32_t GCGuildLadderSearchResultPacket::rank() const {
  // @@protoc_insertion_point(field_get:network.GCGuildLadderSearchResultPacket.rank)
  return _internal_rank();
}
inline void GCGuildLadderSearchResultPacket::_internal_set_rank(uint32_t value) {
  
  _impl_.rank_ = value;
}
inline void GCGuildLadderSearchResultPacket::set_rank(uint32_t value) {
  _internal_set_rank(value);
  // @@protoc_insertion_point(field_set:network.GCGuildLadderSearchResultPacket.rank)
}

// -------------------------------------------------------------------

// GCGuildRankAndPointPacket

// int32 point = 1;
inline void GCGuildRankAndPointPacket::clear_point() {
  _impl_.point_ = 0;
}
inline int32_t GCGuildRankAndPointPacket::_internal_point() const {
  return _impl_.point_;
}
inline int32_t GCGuildRankAndPointPacket::point() const {
  // @@protoc_insertion_point(field_get:network.GCGuildRankAndPointPacket.point)
  return _internal_point();
}
inline void GCGuildRankAndPointPacket::_internal_set_point(int32_t value) {
  
  _impl_.point_ = value;
}
inline void GCGuildRankAndPointPacket::set_point(int32_t value) {
  _internal_set_point(value);
  // @@protoc_insertion_point(field_set:network.GCGuildRankAndPointPacket.point)
}

// uint32 rank = 2;
inline void GCGuildRankAndPointPacket::clear_rank() {
  _impl_.rank_ = 0u;
}
inline uint32_t GCGuildRankAndPointPacket::_internal_rank() const {
  return _impl_.rank_;
}
inline uint32_t GCGuildRankAndPointPacket::rank() const {
  // @@protoc_insertion_point(field_get:network.GCGuildRankAndPointPacket.rank)
  return _internal_rank();
}
inline void GCGuildRankAndPointPacket::_internal_set_rank(uint32_t value) {
  
  _impl_.rank_ = value;
}
inline void GCGuildRankAndPointPacket::set_rank(uint32_t value) {
  _internal_set_rank(value);
  // @@protoc_insertion_point(field_set:network.GCGuildRankAndPointPacket.rank)
}

// -------------------------------------------------------------------

// GCGuildSymbolDataPacket

// uint32 guild_id = 1;
inline void GCGuildSymbolDataPacket::clear_guild_id() {
  _impl_.guild_id_ = 0u;
}
inline uint32_t GCGuildSymbolDataPacket::_internal_guild_id() const {
  return _impl_.guild_id_;
}
inline uint32_t GCGuildSymbolDataPacket::guild_id() const {
  // @@protoc_insertion_point(field_get:network.GCGuildSymbolDataPacket.guild_id)
  return _internal_guild_id();
}
inline void GCGuildSymbolDataPacket::_internal_set_guild_id(uint32_t value) {
  
  _impl_.guild_id_ = value;
}
inline void GCGuildSymbolDataPacket::set_guild_id(uint32_t value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:network.GCGuildSymbolDataPacket.guild_id)
}

// bytes image = 2;
inline void GCGuildSymbolDataPacket::clear_image() {
  _impl_.image_.ClearToEmpty();
}
inline const std::string& GCGuildSymbolDataPacket::image() const {
  // @@protoc_insertion_point(field_get:network.GCGuildSymbolDataPacket.image)
  return _internal_image();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GCGuildSymbolDataPacket::set_image(ArgT0&& arg0, ArgT... args) {
 
 _impl_.image_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GCGuildSymbolDataPacket.image)
}
inline std::string* GCGuildSymbolDataPacket::mutable_image() {
  std::string* _s = _internal_mutable_image();
  // @@protoc_insertion_point(field_mutable:network.GCGuildSymbolDataPacket.image)
  return _s;
}
inline const std::string& GCGuildSymbolDataPacket::_internal_image() const {
  return _impl_.image_.Get();
}
inline void GCGuildSymbolDataPacket::_internal_set_image(const std::string& value) {
  
  _impl_.image_.Set(value, GetArenaForAllocation());
}
inline std::string* GCGuildSymbolDataPacket::_internal_mutable_image() {
  
  return _impl_.image_.Mutable(GetArenaForAllocation());
}
inline std::string* GCGuildSymbolDataPacket::release_image() {
  // @@protoc_insertion_point(field_release:network.GCGuildSymbolDataPacket.image)
  return _impl_.image_.Release();
}
inline void GCGuildSymbolDataPacket::set_allocated_image(std::string* image) {
  if (image != nullptr) {
    
  } else {
    
  }
  _impl_.image_.SetAllocated(image, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.image_.IsDefault()) {
    _impl_.image_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GCGuildSymbolDataPacket.image)
}

// -------------------------------------------------------------------

// GCMarkIDXListPacket_Element

// uint32 guild_id = 1;
inline void GCMarkIDXListPacket_Element::clear_guild_id() {
  _impl_.guild_id_ = 0u;
}
inline uint32_t GCMarkIDXListPacket_Element::_internal_guild_id() const {
  return _impl_.guild_id_;
}
inline uint32_t GCMarkIDXListPacket_Element::guild_id() const {
  // @@protoc_insertion_point(field_get:network.GCMarkIDXListPacket.Element.guild_id)
  return _internal_guild_id();
}
inline void GCMarkIDXListPacket_Element::_internal_set_guild_id(uint32_t value) {
  
  _impl_.guild_id_ = value;
}
inline void GCMarkIDXListPacket_Element::set_guild_id(uint32_t value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:network.GCMarkIDXListPacket.Element.guild_id)
}

// uint32 mark_id = 2;
inline void GCMarkIDXListPacket_Element::clear_mark_id() {
  _impl_.mark_id_ = 0u;
}
inline uint32_t GCMarkIDXListPacket_Element::_internal_mark_id() const {
  return _impl_.mark_id_;
}
inline uint32_t GCMarkIDXListPacket_Element::mark_id() const {
  // @@protoc_insertion_point(field_get:network.GCMarkIDXListPacket.Element.mark_id)
  return _internal_mark_id();
}
inline void GCMarkIDXListPacket_Element::_internal_set_mark_id(uint32_t value) {
  
  _impl_.mark_id_ = value;
}
inline void GCMarkIDXListPacket_Element::set_mark_id(uint32_t value) {
  _internal_set_mark_id(value);
  // @@protoc_insertion_point(field_set:network.GCMarkIDXListPacket.Element.mark_id)
}

// -------------------------------------------------------------------

// GCMarkIDXListPacket

// repeated .network.GCMarkIDXListPacket.Element elems = 1;
inline int GCMarkIDXListPacket::_internal_elems_size() const {
  return _impl_.elems_.size();
}
inline int GCMarkIDXListPacket::elems_size() const {
  return _internal_elems_size();
}
inline void GCMarkIDXListPacket::clear_elems() {
  _impl_.elems_.Clear();
}
inline ::network::GCMarkIDXListPacket_Element* GCMarkIDXListPacket::mutable_elems(int index) {
  // @@protoc_insertion_point(field_mutable:network.GCMarkIDXListPacket.elems)
  return _impl_.elems_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::GCMarkIDXListPacket_Element >*
GCMarkIDXListPacket::mutable_elems() {
  // @@protoc_insertion_point(field_mutable_list:network.GCMarkIDXListPacket.elems)
  return &_impl_.elems_;
}
inline const ::network::GCMarkIDXListPacket_Element& GCMarkIDXListPacket::_internal_elems(int index) const {
  return _impl_.elems_.Get(index);
}
inline const ::network::GCMarkIDXListPacket_Element& GCMarkIDXListPacket::elems(int index) const {
  // @@protoc_insertion_point(field_get:network.GCMarkIDXListPacket.elems)
  return _internal_elems(index);
}
inline ::network::GCMarkIDXListPacket_Element* GCMarkIDXListPacket::_internal_add_elems() {
  return _impl_.elems_.Add();
}
inline ::network::GCMarkIDXListPacket_Element* GCMarkIDXListPacket::add_elems() {
  ::network::GCMarkIDXListPacket_Element* _add = _internal_add_elems();
  // @@protoc_insertion_point(field_add:network.GCMarkIDXListPacket.elems)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::GCMarkIDXListPacket_Element >&
GCMarkIDXListPacket::elems() const {
  // @@protoc_insertion_point(field_list:network.GCMarkIDXListPacket.elems)
  return _impl_.elems_;
}

// -------------------------------------------------------------------

// GCMarkBlockPacket

// uint32 image_index = 1;
inline void GCMarkBlockPacket::clear_image_index() {
  _impl_.image_index_ = 0u;
}
inline uint32_t GCMarkBlockPacket::_internal_image_index() const {
  return _impl_.image_index_;
}
inline uint32_t GCMarkBlockPacket::image_index() const {
  // @@protoc_insertion_point(field_get:network.GCMarkBlockPacket.image_index)
  return _internal_image_index();
}
inline void GCMarkBlockPacket::_internal_set_image_index(uint32_t value) {
  
  _impl_.image_index_ = value;
}
inline void GCMarkBlockPacket::set_image_index(uint32_t value) {
  _internal_set_image_index(value);
  // @@protoc_insertion_point(field_set:network.GCMarkBlockPacket.image_index)
}

// uint32 block_count = 2;
inline void GCMarkBlockPacket::clear_block_count() {
  _impl_.block_count_ = 0u;
}
inline uint32_t GCMarkBlockPacket::_internal_block_count() const {
  return _impl_.block_count_;
}
inline uint32_t GCMarkBlockPacket::block_count() const {
  // @@protoc_insertion_point(field_get:network.GCMarkBlockPacket.block_count)
  return _internal_block_count();
}
inline void GCMarkBlockPacket::_internal_set_block_count(uint32_t value) {
  
  _impl_.block_count_ = value;
}
inline void GCMarkBlockPacket::set_block_count(uint32_t value) {
  _internal_set_block_count(value);
  // @@protoc_insertion_point(field_set:network.GCMarkBlockPacket.block_count)
}

// bytes image = 3;
inline void GCMarkBlockPacket::clear_image() {
  _impl_.image_.ClearToEmpty();
}
inline const std::string& GCMarkBlockPacket::image() const {
  // @@protoc_insertion_point(field_get:network.GCMarkBlockPacket.image)
  return _internal_image();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GCMarkBlockPacket::set_image(ArgT0&& arg0, ArgT... args) {
 
 _impl_.image_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GCMarkBlockPacket.image)
}
inline std::string* GCMarkBlockPacket::mutable_image() {
  std::string* _s = _internal_mutable_image();
  // @@protoc_insertion_point(field_mutable:network.GCMarkBlockPacket.image)
  return _s;
}
inline const std::string& GCMarkBlockPacket::_internal_image() const {
  return _impl_.image_.Get();
}
inline void GCMarkBlockPacket::_internal_set_image(const std::string& value) {
  
  _impl_.image_.Set(value, GetArenaForAllocation());
}
inline std::string* GCMarkBlockPacket::_internal_mutable_image() {
  
  return _impl_.image_.Mutable(GetArenaForAllocation());
}
inline std::string* GCMarkBlockPacket::release_image() {
  // @@protoc_insertion_point(field_release:network.GCMarkBlockPacket.image)
  return _impl_.image_.Release();
}
inline void GCMarkBlockPacket::set_allocated_image(std::string* image) {
  if (image != nullptr) {
    
  } else {
    
  }
  _impl_.image_.SetAllocated(image, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.image_.IsDefault()) {
    _impl_.image_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GCMarkBlockPacket.image)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace network

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_gc_5fpackets_2eproto
