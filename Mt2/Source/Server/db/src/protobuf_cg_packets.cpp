// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cg_packets.proto

#include "protobuf_cg_packets.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace network {
PROTOBUF_CONSTEXPR CGHandshakePacket::CGHandshakePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.crypt_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.handshake_)*/0u
  , /*decltype(_impl_.time_)*/0u
  , /*decltype(_impl_.delta_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGHandshakePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGHandshakePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGHandshakePacketDefaultTypeInternal() {}
  union {
    CGHandshakePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGHandshakePacketDefaultTypeInternal _CGHandshakePacket_default_instance_;
PROTOBUF_CONSTEXPR CGKeyAgreementPacket::CGKeyAgreementPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.header_)*/0u
  , /*decltype(_impl_.agreed_length_)*/0u
  , /*decltype(_impl_.data_length_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGKeyAgreementPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGKeyAgreementPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGKeyAgreementPacketDefaultTypeInternal() {}
  union {
    CGKeyAgreementPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGKeyAgreementPacketDefaultTypeInternal _CGKeyAgreementPacket_default_instance_;
PROTOBUF_CONSTEXPR CGAuthLoginPacket::CGAuthLoginPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.client_keys_)*/{}
  , /*decltype(_impl_._client_keys_cached_byte_size_)*/{0}
  , /*decltype(_impl_.login_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.passwd_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.hwid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pc_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pc_name_real_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_name_real_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.hash_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.version_)*/0u
  , /*decltype(_impl_.language_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGAuthLoginPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGAuthLoginPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGAuthLoginPacketDefaultTypeInternal() {}
  union {
    CGAuthLoginPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGAuthLoginPacketDefaultTypeInternal _CGAuthLoginPacket_default_instance_;
PROTOBUF_CONSTEXPR CGAuthOpenIDLoginPacket::CGAuthOpenIDLoginPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.client_keys_)*/{}
  , /*decltype(_impl_._client_keys_cached_byte_size_)*/{0}
  , /*decltype(_impl_.auth_key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGAuthOpenIDLoginPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGAuthOpenIDLoginPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGAuthOpenIDLoginPacketDefaultTypeInternal() {}
  union {
    CGAuthOpenIDLoginPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGAuthOpenIDLoginPacketDefaultTypeInternal _CGAuthOpenIDLoginPacket_default_instance_;
PROTOBUF_CONSTEXPR CGAuthPasspodAnswerPacket::CGAuthPasspodAnswerPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.answer_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGAuthPasspodAnswerPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGAuthPasspodAnswerPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGAuthPasspodAnswerPacketDefaultTypeInternal() {}
  union {
    CGAuthPasspodAnswerPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGAuthPasspodAnswerPacketDefaultTypeInternal _CGAuthPasspodAnswerPacket_default_instance_;
PROTOBUF_CONSTEXPR CGLoginByKeyPacket::CGLoginByKeyPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.client_key_)*/{}
  , /*decltype(_impl_._client_key_cached_byte_size_)*/{0}
  , /*decltype(_impl_.login_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.login_key_)*/0u
  , /*decltype(_impl_.locale_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGLoginByKeyPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGLoginByKeyPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGLoginByKeyPacketDefaultTypeInternal() {}
  union {
    CGLoginByKeyPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGLoginByKeyPacketDefaultTypeInternal _CGLoginByKeyPacket_default_instance_;
PROTOBUF_CONSTEXPR CGEmpirePacket::CGEmpirePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.empire_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGEmpirePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGEmpirePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGEmpirePacketDefaultTypeInternal() {}
  union {
    CGEmpirePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGEmpirePacketDefaultTypeInternal _CGEmpirePacket_default_instance_;
PROTOBUF_CONSTEXPR CGPlayerSelectPacket::CGPlayerSelectPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.index_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGPlayerSelectPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGPlayerSelectPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGPlayerSelectPacketDefaultTypeInternal() {}
  union {
    CGPlayerSelectPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGPlayerSelectPacketDefaultTypeInternal _CGPlayerSelectPacket_default_instance_;
PROTOBUF_CONSTEXPR CGPlayerCreatePacket::CGPlayerCreatePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.index_)*/0u
  , /*decltype(_impl_.job_)*/0u
  , /*decltype(_impl_.shape_)*/0u
  , /*decltype(_impl_.con_)*/0u
  , /*decltype(_impl_.int__)*/0u
  , /*decltype(_impl_.str_)*/0u
  , /*decltype(_impl_.dex_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGPlayerCreatePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGPlayerCreatePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGPlayerCreatePacketDefaultTypeInternal() {}
  union {
    CGPlayerCreatePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGPlayerCreatePacketDefaultTypeInternal _CGPlayerCreatePacket_default_instance_;
PROTOBUF_CONSTEXPR CGPlayerChangeNamePacket::CGPlayerChangeNamePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.index_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGPlayerChangeNamePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGPlayerChangeNamePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGPlayerChangeNamePacketDefaultTypeInternal() {}
  union {
    CGPlayerChangeNamePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGPlayerChangeNamePacketDefaultTypeInternal _CGPlayerChangeNamePacket_default_instance_;
PROTOBUF_CONSTEXPR CGPlayerHairSelectPacket::CGPlayerHairSelectPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.index_)*/0u
  , /*decltype(_impl_.hair_vnum_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGPlayerHairSelectPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGPlayerHairSelectPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGPlayerHairSelectPacketDefaultTypeInternal() {}
  union {
    CGPlayerHairSelectPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGPlayerHairSelectPacketDefaultTypeInternal _CGPlayerHairSelectPacket_default_instance_;
PROTOBUF_CONSTEXPR CGPlayerDeletePacket::CGPlayerDeletePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.private_code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.index_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGPlayerDeletePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGPlayerDeletePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGPlayerDeletePacketDefaultTypeInternal() {}
  union {
    CGPlayerDeletePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGPlayerDeletePacketDefaultTypeInternal _CGPlayerDeletePacket_default_instance_;
PROTOBUF_CONSTEXPR CGMarkCRCListPacket::CGMarkCRCListPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.crclist_)*/{}
  , /*decltype(_impl_._crclist_cached_byte_size_)*/{0}
  , /*decltype(_impl_.image_index_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGMarkCRCListPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGMarkCRCListPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGMarkCRCListPacketDefaultTypeInternal() {}
  union {
    CGMarkCRCListPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGMarkCRCListPacketDefaultTypeInternal _CGMarkCRCListPacket_default_instance_;
PROTOBUF_CONSTEXPR CGMarkUploadPacket::CGMarkUploadPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.image_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.guild_id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGMarkUploadPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGMarkUploadPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGMarkUploadPacketDefaultTypeInternal() {}
  union {
    CGMarkUploadPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGMarkUploadPacketDefaultTypeInternal _CGMarkUploadPacket_default_instance_;
PROTOBUF_CONSTEXPR CGGuildSymbolUploadPacket::CGGuildSymbolUploadPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.image_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.guild_id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGGuildSymbolUploadPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGGuildSymbolUploadPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGGuildSymbolUploadPacketDefaultTypeInternal() {}
  union {
    CGGuildSymbolUploadPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGGuildSymbolUploadPacketDefaultTypeInternal _CGGuildSymbolUploadPacket_default_instance_;
PROTOBUF_CONSTEXPR CGGuildSymbolCRCPacket::CGGuildSymbolCRCPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.guild_id_)*/0u
  , /*decltype(_impl_.crc_)*/0u
  , /*decltype(_impl_.symbol_size_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGGuildSymbolCRCPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGGuildSymbolCRCPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGGuildSymbolCRCPacketDefaultTypeInternal() {}
  union {
    CGGuildSymbolCRCPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGGuildSymbolCRCPacketDefaultTypeInternal _CGGuildSymbolCRCPacket_default_instance_;
PROTOBUF_CONSTEXPR CGClientVersionPacket::CGClientVersionPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.filename_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.timestamp_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGClientVersionPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGClientVersionPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGClientVersionPacketDefaultTypeInternal() {}
  union {
    CGClientVersionPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGClientVersionPacketDefaultTypeInternal _CGClientVersionPacket_default_instance_;
PROTOBUF_CONSTEXPR CGLoginVersionCheckPacket::CGLoginVersionCheckPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGLoginVersionCheckPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGLoginVersionCheckPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGLoginVersionCheckPacketDefaultTypeInternal() {}
  union {
    CGLoginVersionCheckPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGLoginVersionCheckPacketDefaultTypeInternal _CGLoginVersionCheckPacket_default_instance_;
PROTOBUF_CONSTEXPR CGXTRAPAckPacket::CGXTRAPAckPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.packet_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGXTRAPAckPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGXTRAPAckPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGXTRAPAckPacketDefaultTypeInternal() {}
  union {
    CGXTRAPAckPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGXTRAPAckPacketDefaultTypeInternal _CGXTRAPAckPacket_default_instance_;
PROTOBUF_CONSTEXPR CGHackPacket::CGHackPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.buf_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGHackPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGHackPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGHackPacketDefaultTypeInternal() {}
  union {
    CGHackPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGHackPacketDefaultTypeInternal _CGHackPacket_default_instance_;
PROTOBUF_CONSTEXPR CGCostumeVisibilityPacket::CGCostumeVisibilityPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_)*/0u
  , /*decltype(_impl_.visible_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGCostumeVisibilityPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGCostumeVisibilityPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGCostumeVisibilityPacketDefaultTypeInternal() {}
  union {
    CGCostumeVisibilityPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGCostumeVisibilityPacketDefaultTypeInternal _CGCostumeVisibilityPacket_default_instance_;
PROTOBUF_CONSTEXPR CGChatPacket::CGChatPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGChatPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGChatPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGChatPacketDefaultTypeInternal() {}
  union {
    CGChatPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGChatPacketDefaultTypeInternal _CGChatPacket_default_instance_;
PROTOBUF_CONSTEXPR CGAttackPacket::CGAttackPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_)*/0u
  , /*decltype(_impl_.vid_)*/0u
  , /*decltype(_impl_.crc_magic_cube_proc_piece_)*/0u
  , /*decltype(_impl_.crc_magic_cube_file_piece_)*/0u
  , /*decltype(_impl_.random_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGAttackPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGAttackPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGAttackPacketDefaultTypeInternal() {}
  union {
    CGAttackPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGAttackPacketDefaultTypeInternal _CGAttackPacket_default_instance_;
PROTOBUF_CONSTEXPR CGShootPacket::CGShootPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGShootPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGShootPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGShootPacketDefaultTypeInternal() {}
  union {
    CGShootPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGShootPacketDefaultTypeInternal _CGShootPacket_default_instance_;
PROTOBUF_CONSTEXPR CGWhisperPacket::CGWhisperPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_to_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.send_offline_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGWhisperPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGWhisperPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGWhisperPacketDefaultTypeInternal() {}
  union {
    CGWhisperPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGWhisperPacketDefaultTypeInternal _CGWhisperPacket_default_instance_;
PROTOBUF_CONSTEXPR CGOnClickPacket::CGOnClickPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.vid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGOnClickPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGOnClickPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGOnClickPacketDefaultTypeInternal() {}
  union {
    CGOnClickPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGOnClickPacketDefaultTypeInternal _CGOnClickPacket_default_instance_;
PROTOBUF_CONSTEXPR CGPositionPacket::CGPositionPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.position_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGPositionPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGPositionPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGPositionPacketDefaultTypeInternal() {}
  union {
    CGPositionPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGPositionPacketDefaultTypeInternal _CGPositionPacket_default_instance_;
PROTOBUF_CONSTEXPR CGNextSkillUsePacket::CGNextSkillUsePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.skill_vnum_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGNextSkillUsePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGNextSkillUsePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGNextSkillUsePacketDefaultTypeInternal() {}
  union {
    CGNextSkillUsePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGNextSkillUsePacketDefaultTypeInternal _CGNextSkillUsePacket_default_instance_;
PROTOBUF_CONSTEXPR CGMovePacket::CGMovePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.func_)*/0u
  , /*decltype(_impl_.arg_)*/0u
  , /*decltype(_impl_.rot_)*/0u
  , /*decltype(_impl_.x_)*/0u
  , /*decltype(_impl_.y_)*/0u
  , /*decltype(_impl_.time_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGMovePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGMovePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGMovePacketDefaultTypeInternal() {}
  union {
    CGMovePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGMovePacketDefaultTypeInternal _CGMovePacket_default_instance_;
PROTOBUF_CONSTEXPR CGSyncPositionPacket::CGSyncPositionPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.elements_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGSyncPositionPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGSyncPositionPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGSyncPositionPacketDefaultTypeInternal() {}
  union {
    CGSyncPositionPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGSyncPositionPacketDefaultTypeInternal _CGSyncPositionPacket_default_instance_;
PROTOBUF_CONSTEXPR CGFlyTargetPacket::CGFlyTargetPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.target_vid_)*/0u
  , /*decltype(_impl_.x_)*/0u
  , /*decltype(_impl_.y_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGFlyTargetPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGFlyTargetPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGFlyTargetPacketDefaultTypeInternal() {}
  union {
    CGFlyTargetPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGFlyTargetPacketDefaultTypeInternal _CGFlyTargetPacket_default_instance_;
PROTOBUF_CONSTEXPR CGAddFlyTargetPacket::CGAddFlyTargetPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.target_vid_)*/0u
  , /*decltype(_impl_.x_)*/0u
  , /*decltype(_impl_.y_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGAddFlyTargetPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGAddFlyTargetPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGAddFlyTargetPacketDefaultTypeInternal() {}
  union {
    CGAddFlyTargetPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGAddFlyTargetPacketDefaultTypeInternal _CGAddFlyTargetPacket_default_instance_;
PROTOBUF_CONSTEXPR CGUseSkillPacket::CGUseSkillPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.vnum_)*/0u
  , /*decltype(_impl_.vid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGUseSkillPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGUseSkillPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGUseSkillPacketDefaultTypeInternal() {}
  union {
    CGUseSkillPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGUseSkillPacketDefaultTypeInternal _CGUseSkillPacket_default_instance_;
PROTOBUF_CONSTEXPR CGTargetPacket::CGTargetPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.vid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGTargetPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGTargetPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGTargetPacketDefaultTypeInternal() {}
  union {
    CGTargetPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGTargetPacketDefaultTypeInternal _CGTargetPacket_default_instance_;
PROTOBUF_CONSTEXPR CGTargetMonsterDropInfoPacket::CGTargetMonsterDropInfoPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.race_num_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGTargetMonsterDropInfoPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGTargetMonsterDropInfoPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGTargetMonsterDropInfoPacketDefaultTypeInternal() {}
  union {
    CGTargetMonsterDropInfoPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGTargetMonsterDropInfoPacketDefaultTypeInternal _CGTargetMonsterDropInfoPacket_default_instance_;
PROTOBUF_CONSTEXPR CGFishingPacket::CGFishingPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.dir_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGFishingPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGFishingPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGFishingPacketDefaultTypeInternal() {}
  union {
    CGFishingPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGFishingPacketDefaultTypeInternal _CGFishingPacket_default_instance_;
PROTOBUF_CONSTEXPR CGGiveItemPacket::CGGiveItemPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.cell_)*/nullptr
  , /*decltype(_impl_.target_vid_)*/0u
  , /*decltype(_impl_.item_count_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGGiveItemPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGGiveItemPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGGiveItemPacketDefaultTypeInternal() {}
  union {
    CGGiveItemPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGGiveItemPacketDefaultTypeInternal _CGGiveItemPacket_default_instance_;
PROTOBUF_CONSTEXPR CGMyShopPacket::CGMyShopPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_.sign_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGMyShopPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGMyShopPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGMyShopPacketDefaultTypeInternal() {}
  union {
    CGMyShopPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGMyShopPacketDefaultTypeInternal _CGMyShopPacket_default_instance_;
PROTOBUF_CONSTEXPR CGRefinePacket::CGRefinePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.cell_)*/nullptr
  , /*decltype(_impl_.type_)*/0u
  , /*decltype(_impl_.fast_refine_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGRefinePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGRefinePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGRefinePacketDefaultTypeInternal() {}
  union {
    CGRefinePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGRefinePacketDefaultTypeInternal _CGRefinePacket_default_instance_;
PROTOBUF_CONSTEXPR CGPlayerLanguageInformationPacket::CGPlayerLanguageInformationPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.player_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGPlayerLanguageInformationPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGPlayerLanguageInformationPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGPlayerLanguageInformationPacketDefaultTypeInternal() {}
  union {
    CGPlayerLanguageInformationPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGPlayerLanguageInformationPacketDefaultTypeInternal _CGPlayerLanguageInformationPacket_default_instance_;
PROTOBUF_CONSTEXPR CGReportPacket::CGReportPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.key_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGReportPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGReportPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGReportPacketDefaultTypeInternal() {}
  union {
    CGReportPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGReportPacketDefaultTypeInternal _CGReportPacket_default_instance_;
PROTOBUF_CONSTEXPR CGDragonSoulRefinePacket::CGDragonSoulRefinePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.item_grid_)*/{}
  , /*decltype(_impl_.sub_type_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGDragonSoulRefinePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGDragonSoulRefinePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGDragonSoulRefinePacketDefaultTypeInternal() {}
  union {
    CGDragonSoulRefinePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGDragonSoulRefinePacketDefaultTypeInternal _CGDragonSoulRefinePacket_default_instance_;
PROTOBUF_CONSTEXPR CGOnQuestTriggerPacket::CGOnQuestTriggerPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.index_)*/0u
  , /*decltype(_impl_.arg_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGOnQuestTriggerPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGOnQuestTriggerPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGOnQuestTriggerPacketDefaultTypeInternal() {}
  union {
    CGOnQuestTriggerPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGOnQuestTriggerPacketDefaultTypeInternal _CGOnQuestTriggerPacket_default_instance_;
PROTOBUF_CONSTEXPR CGItemMultiUsePacket::CGItemMultiUsePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.cell_)*/nullptr
  , /*decltype(_impl_.count_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGItemMultiUsePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGItemMultiUsePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGItemMultiUsePacketDefaultTypeInternal() {}
  union {
    CGItemMultiUsePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGItemMultiUsePacketDefaultTypeInternal _CGItemMultiUsePacket_default_instance_;
PROTOBUF_CONSTEXPR CGBotReportLogPacket::CGBotReportLogPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.detail_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGBotReportLogPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGBotReportLogPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGBotReportLogPacketDefaultTypeInternal() {}
  union {
    CGBotReportLogPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGBotReportLogPacketDefaultTypeInternal _CGBotReportLogPacket_default_instance_;
PROTOBUF_CONSTEXPR CGForcedRewarpPacket::CGForcedRewarpPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.detail_log_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.checkval_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGForcedRewarpPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGForcedRewarpPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGForcedRewarpPacketDefaultTypeInternal() {}
  union {
    CGForcedRewarpPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGForcedRewarpPacketDefaultTypeInternal _CGForcedRewarpPacket_default_instance_;
PROTOBUF_CONSTEXPR CGUseDetachmentSinglePacket::CGUseDetachmentSinglePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.cell_detachment_)*/0u
  , /*decltype(_impl_.cell_item_)*/0u
  , /*decltype(_impl_.slot_index_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGUseDetachmentSinglePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGUseDetachmentSinglePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGUseDetachmentSinglePacketDefaultTypeInternal() {}
  union {
    CGUseDetachmentSinglePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGUseDetachmentSinglePacketDefaultTypeInternal _CGUseDetachmentSinglePacket_default_instance_;
PROTOBUF_CONSTEXPR CGEventRequestAnswerPacket::CGEventRequestAnswerPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.event_index_)*/0u
  , /*decltype(_impl_.accept_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGEventRequestAnswerPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGEventRequestAnswerPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGEventRequestAnswerPacketDefaultTypeInternal() {}
  union {
    CGEventRequestAnswerPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGEventRequestAnswerPacketDefaultTypeInternal _CGEventRequestAnswerPacket_default_instance_;
PROTOBUF_CONSTEXPR CGCostumeBonusTransferPacket::CGCostumeBonusTransferPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.item_cell_)*/nullptr
  , /*decltype(_impl_.sub_header_)*/0u
  , /*decltype(_impl_.pos_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGCostumeBonusTransferPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGCostumeBonusTransferPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGCostumeBonusTransferPacketDefaultTypeInternal() {}
  union {
    CGCostumeBonusTransferPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGCostumeBonusTransferPacketDefaultTypeInternal _CGCostumeBonusTransferPacket_default_instance_;
PROTOBUF_CONSTEXPR CGRunePagePacket::CGRunePagePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGRunePagePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGRunePagePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGRunePagePacketDefaultTypeInternal() {}
  union {
    CGRunePagePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGRunePagePacketDefaultTypeInternal _CGRunePagePacket_default_instance_;
PROTOBUF_CONSTEXPR CGRecvWikiPacket::CGRecvWikiPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.vnum_)*/0u
  , /*decltype(_impl_.is_mob_)*/false
  , /*decltype(_impl_.ret_id_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGRecvWikiPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGRecvWikiPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGRecvWikiPacketDefaultTypeInternal() {}
  union {
    CGRecvWikiPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGRecvWikiPacketDefaultTypeInternal _CGRecvWikiPacket_default_instance_;
PROTOBUF_CONSTEXPR CGSetSkillColorPacket::CGSetSkillColorPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.skill_)*/0u
  , /*decltype(_impl_.col1_)*/0u
  , /*decltype(_impl_.col2_)*/0u
  , /*decltype(_impl_.col3_)*/0u
  , /*decltype(_impl_.col4_)*/0u
  , /*decltype(_impl_.col5_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGSetSkillColorPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGSetSkillColorPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGSetSkillColorPacketDefaultTypeInternal() {}
  union {
    CGSetSkillColorPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGSetSkillColorPacketDefaultTypeInternal _CGSetSkillColorPacket_default_instance_;
PROTOBUF_CONSTEXPR CGEquipmentPageAddPacket::CGEquipmentPageAddPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGEquipmentPageAddPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGEquipmentPageAddPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGEquipmentPageAddPacketDefaultTypeInternal() {}
  union {
    CGEquipmentPageAddPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGEquipmentPageAddPacketDefaultTypeInternal _CGEquipmentPageAddPacket_default_instance_;
PROTOBUF_CONSTEXPR CGEquipmentPageDeletePacket::CGEquipmentPageDeletePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.index_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGEquipmentPageDeletePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGEquipmentPageDeletePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGEquipmentPageDeletePacketDefaultTypeInternal() {}
  union {
    CGEquipmentPageDeletePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGEquipmentPageDeletePacketDefaultTypeInternal _CGEquipmentPageDeletePacket_default_instance_;
PROTOBUF_CONSTEXPR CGEquipmentPageSelectPacket::CGEquipmentPageSelectPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.index_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGEquipmentPageSelectPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGEquipmentPageSelectPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGEquipmentPageSelectPacketDefaultTypeInternal() {}
  union {
    CGEquipmentPageSelectPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGEquipmentPageSelectPacketDefaultTypeInternal _CGEquipmentPageSelectPacket_default_instance_;
PROTOBUF_CONSTEXPR CGCombatZoneRequestActionPacket::CGCombatZoneRequestActionPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.action_)*/0
  , /*decltype(_impl_.value_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGCombatZoneRequestActionPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGCombatZoneRequestActionPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGCombatZoneRequestActionPacketDefaultTypeInternal() {}
  union {
    CGCombatZoneRequestActionPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGCombatZoneRequestActionPacketDefaultTypeInternal _CGCombatZoneRequestActionPacket_default_instance_;
PROTOBUF_CONSTEXPR CGCrystalRefinePacket::CGCrystalRefinePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.crystal_cell_)*/nullptr
  , /*decltype(_impl_.scroll_cell_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGCrystalRefinePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGCrystalRefinePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGCrystalRefinePacketDefaultTypeInternal() {}
  union {
    CGCrystalRefinePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGCrystalRefinePacketDefaultTypeInternal _CGCrystalRefinePacket_default_instance_;
PROTOBUF_CONSTEXPR CGAuctionInsertItemPacket::CGAuctionInsertItemPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.cell_)*/nullptr
  , /*decltype(_impl_.target_cell_)*/nullptr
  , /*decltype(_impl_.price_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGAuctionInsertItemPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGAuctionInsertItemPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGAuctionInsertItemPacketDefaultTypeInternal() {}
  union {
    CGAuctionInsertItemPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGAuctionInsertItemPacketDefaultTypeInternal _CGAuctionInsertItemPacket_default_instance_;
PROTOBUF_CONSTEXPR CGAuctionTakeItemPacket::CGAuctionTakeItemPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.item_id_)*/0u
  , /*decltype(_impl_.inventory_pos_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGAuctionTakeItemPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGAuctionTakeItemPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGAuctionTakeItemPacketDefaultTypeInternal() {}
  union {
    CGAuctionTakeItemPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGAuctionTakeItemPacketDefaultTypeInternal _CGAuctionTakeItemPacket_default_instance_;
PROTOBUF_CONSTEXPR CGAuctionBuyItemPacket::CGAuctionBuyItemPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.price_)*/uint64_t{0u}
  , /*decltype(_impl_.item_id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGAuctionBuyItemPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGAuctionBuyItemPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGAuctionBuyItemPacketDefaultTypeInternal() {}
  union {
    CGAuctionBuyItemPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGAuctionBuyItemPacketDefaultTypeInternal _CGAuctionBuyItemPacket_default_instance_;
PROTOBUF_CONSTEXPR CGAuctionTakeGoldPacket::CGAuctionTakeGoldPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.gold_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGAuctionTakeGoldPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGAuctionTakeGoldPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGAuctionTakeGoldPacketDefaultTypeInternal() {}
  union {
    CGAuctionTakeGoldPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGAuctionTakeGoldPacketDefaultTypeInternal _CGAuctionTakeGoldPacket_default_instance_;
PROTOBUF_CONSTEXPR CGAuctionSearchItemsPacket::CGAuctionSearchItemsPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.options_)*/nullptr
  , /*decltype(_impl_.page_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGAuctionSearchItemsPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGAuctionSearchItemsPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGAuctionSearchItemsPacketDefaultTypeInternal() {}
  union {
    CGAuctionSearchItemsPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGAuctionSearchItemsPacketDefaultTypeInternal _CGAuctionSearchItemsPacket_default_instance_;
PROTOBUF_CONSTEXPR CGAuctionExtendedSearchItemsPacket::CGAuctionExtendedSearchItemsPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.options_)*/nullptr
  , /*decltype(_impl_.page_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGAuctionExtendedSearchItemsPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGAuctionExtendedSearchItemsPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGAuctionExtendedSearchItemsPacketDefaultTypeInternal() {}
  union {
    CGAuctionExtendedSearchItemsPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGAuctionExtendedSearchItemsPacketDefaultTypeInternal _CGAuctionExtendedSearchItemsPacket_default_instance_;
PROTOBUF_CONSTEXPR CGAuctionMarkShopPacket::CGAuctionMarkShopPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.item_id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGAuctionMarkShopPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGAuctionMarkShopPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGAuctionMarkShopPacketDefaultTypeInternal() {}
  union {
    CGAuctionMarkShopPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGAuctionMarkShopPacketDefaultTypeInternal _CGAuctionMarkShopPacket_default_instance_;
PROTOBUF_CONSTEXPR CGAuctionShopOpenPacket::CGAuctionShopOpenPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.style_)*/0u
  , /*decltype(_impl_.model_)*/0u
  , /*decltype(_impl_.color_red_)*/0
  , /*decltype(_impl_.color_green_)*/0
  , /*decltype(_impl_.color_blue_)*/0
  , /*decltype(_impl_.x_)*/0u
  , /*decltype(_impl_.y_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGAuctionShopOpenPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGAuctionShopOpenPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGAuctionShopOpenPacketDefaultTypeInternal() {}
  union {
    CGAuctionShopOpenPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGAuctionShopOpenPacketDefaultTypeInternal _CGAuctionShopOpenPacket_default_instance_;
PROTOBUF_CONSTEXPR CGAuctionShopClosePacket::CGAuctionShopClosePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.has_items_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGAuctionShopClosePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGAuctionShopClosePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGAuctionShopClosePacketDefaultTypeInternal() {}
  union {
    CGAuctionShopClosePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGAuctionShopClosePacketDefaultTypeInternal _CGAuctionShopClosePacket_default_instance_;
PROTOBUF_CONSTEXPR CGAuctionShopTakeGoldPacket::CGAuctionShopTakeGoldPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.gold_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGAuctionShopTakeGoldPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGAuctionShopTakeGoldPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGAuctionShopTakeGoldPacketDefaultTypeInternal() {}
  union {
    CGAuctionShopTakeGoldPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGAuctionShopTakeGoldPacketDefaultTypeInternal _CGAuctionShopTakeGoldPacket_default_instance_;
PROTOBUF_CONSTEXPR CGAuctionRequestAveragePricePacket::CGAuctionRequestAveragePricePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.requestor_)*/0u
  , /*decltype(_impl_.vnum_)*/0u
  , /*decltype(_impl_.count_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGAuctionRequestAveragePricePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGAuctionRequestAveragePricePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGAuctionRequestAveragePricePacketDefaultTypeInternal() {}
  union {
    CGAuctionRequestAveragePricePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGAuctionRequestAveragePricePacketDefaultTypeInternal _CGAuctionRequestAveragePricePacket_default_instance_;
PROTOBUF_CONSTEXPR CGScriptAnswerPacket::CGScriptAnswerPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.answer_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGScriptAnswerPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGScriptAnswerPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGScriptAnswerPacketDefaultTypeInternal() {}
  union {
    CGScriptAnswerPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGScriptAnswerPacketDefaultTypeInternal _CGScriptAnswerPacket_default_instance_;
PROTOBUF_CONSTEXPR CGScriptButtonPacket::CGScriptButtonPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.index_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGScriptButtonPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGScriptButtonPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGScriptButtonPacketDefaultTypeInternal() {}
  union {
    CGScriptButtonPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGScriptButtonPacketDefaultTypeInternal _CGScriptButtonPacket_default_instance_;
PROTOBUF_CONSTEXPR CGScriptSelectItemPacket::CGScriptSelectItemPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.selection_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGScriptSelectItemPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGScriptSelectItemPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGScriptSelectItemPacketDefaultTypeInternal() {}
  union {
    CGScriptSelectItemPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGScriptSelectItemPacketDefaultTypeInternal _CGScriptSelectItemPacket_default_instance_;
PROTOBUF_CONSTEXPR CGQuestInputStringPacket::CGQuestInputStringPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGQuestInputStringPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGQuestInputStringPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGQuestInputStringPacketDefaultTypeInternal() {}
  union {
    CGQuestInputStringPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGQuestInputStringPacketDefaultTypeInternal _CGQuestInputStringPacket_default_instance_;
PROTOBUF_CONSTEXPR CGQuestConfirmPacket::CGQuestConfirmPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.answer_)*/0u
  , /*decltype(_impl_.request_pid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGQuestConfirmPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGQuestConfirmPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGQuestConfirmPacketDefaultTypeInternal() {}
  union {
    CGQuestConfirmPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGQuestConfirmPacketDefaultTypeInternal _CGQuestConfirmPacket_default_instance_;
PROTOBUF_CONSTEXPR CGItemUsePacket::CGItemUsePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.cell_)*/nullptr
  , /*decltype(_impl_.count_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGItemUsePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGItemUsePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGItemUsePacketDefaultTypeInternal() {}
  union {
    CGItemUsePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGItemUsePacketDefaultTypeInternal _CGItemUsePacket_default_instance_;
PROTOBUF_CONSTEXPR CGItemUseToItemPacket::CGItemUseToItemPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.cell_)*/nullptr
  , /*decltype(_impl_.target_cell_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGItemUseToItemPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGItemUseToItemPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGItemUseToItemPacketDefaultTypeInternal() {}
  union {
    CGItemUseToItemPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGItemUseToItemPacketDefaultTypeInternal _CGItemUseToItemPacket_default_instance_;
PROTOBUF_CONSTEXPR CGItemDropPacket::CGItemDropPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.cell_)*/nullptr
  , /*decltype(_impl_.gold_)*/0u
  , /*decltype(_impl_.count_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGItemDropPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGItemDropPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGItemDropPacketDefaultTypeInternal() {}
  union {
    CGItemDropPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGItemDropPacketDefaultTypeInternal _CGItemDropPacket_default_instance_;
PROTOBUF_CONSTEXPR CGItemDestroyPacket::CGItemDestroyPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.cell_)*/nullptr
  , /*decltype(_impl_.num_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGItemDestroyPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGItemDestroyPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGItemDestroyPacketDefaultTypeInternal() {}
  union {
    CGItemDestroyPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGItemDestroyPacketDefaultTypeInternal _CGItemDestroyPacket_default_instance_;
PROTOBUF_CONSTEXPR CGItemMovePacket::CGItemMovePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.cell_)*/nullptr
  , /*decltype(_impl_.cell_to_)*/nullptr
  , /*decltype(_impl_.count_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGItemMovePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGItemMovePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGItemMovePacketDefaultTypeInternal() {}
  union {
    CGItemMovePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGItemMovePacketDefaultTypeInternal _CGItemMovePacket_default_instance_;
PROTOBUF_CONSTEXPR CGItemPickupPacket::CGItemPickupPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.vid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGItemPickupPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGItemPickupPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGItemPickupPacketDefaultTypeInternal() {}
  union {
    CGItemPickupPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGItemPickupPacketDefaultTypeInternal _CGItemPickupPacket_default_instance_;
PROTOBUF_CONSTEXPR CGSafeboxCheckinPacket::CGSafeboxCheckinPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.inventory_pos_)*/nullptr
  , /*decltype(_impl_.safebox_pos_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGSafeboxCheckinPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGSafeboxCheckinPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGSafeboxCheckinPacketDefaultTypeInternal() {}
  union {
    CGSafeboxCheckinPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGSafeboxCheckinPacketDefaultTypeInternal _CGSafeboxCheckinPacket_default_instance_;
PROTOBUF_CONSTEXPR CGSafeboxCheckoutPacket::CGSafeboxCheckoutPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.inventory_pos_)*/nullptr
  , /*decltype(_impl_.safebox_pos_)*/0u
  , /*decltype(_impl_.is_mall_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGSafeboxCheckoutPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGSafeboxCheckoutPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGSafeboxCheckoutPacketDefaultTypeInternal() {}
  union {
    CGSafeboxCheckoutPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGSafeboxCheckoutPacketDefaultTypeInternal _CGSafeboxCheckoutPacket_default_instance_;
PROTOBUF_CONSTEXPR CGSafeboxItemMovePacket::CGSafeboxItemMovePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.source_pos_)*/0u
  , /*decltype(_impl_.target_pos_)*/0u
  , /*decltype(_impl_.count_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGSafeboxItemMovePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGSafeboxItemMovePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGSafeboxItemMovePacketDefaultTypeInternal() {}
  union {
    CGSafeboxItemMovePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGSafeboxItemMovePacketDefaultTypeInternal _CGSafeboxItemMovePacket_default_instance_;
PROTOBUF_CONSTEXPR CGAcceRefineCheckinPacket::CGAcceRefineCheckinPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.item_cell_)*/nullptr
  , /*decltype(_impl_.acce_pos_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGAcceRefineCheckinPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGAcceRefineCheckinPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGAcceRefineCheckinPacketDefaultTypeInternal() {}
  union {
    CGAcceRefineCheckinPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGAcceRefineCheckinPacketDefaultTypeInternal _CGAcceRefineCheckinPacket_default_instance_;
PROTOBUF_CONSTEXPR CGAcceRefineCheckoutPacket::CGAcceRefineCheckoutPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.acce_pos_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGAcceRefineCheckoutPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGAcceRefineCheckoutPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGAcceRefineCheckoutPacketDefaultTypeInternal() {}
  union {
    CGAcceRefineCheckoutPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGAcceRefineCheckoutPacketDefaultTypeInternal _CGAcceRefineCheckoutPacket_default_instance_;
PROTOBUF_CONSTEXPR CGAcceRefineAcceptPacket::CGAcceRefineAcceptPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.window_type_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGAcceRefineAcceptPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGAcceRefineAcceptPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGAcceRefineAcceptPacketDefaultTypeInternal() {}
  union {
    CGAcceRefineAcceptPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGAcceRefineAcceptPacketDefaultTypeInternal _CGAcceRefineAcceptPacket_default_instance_;
PROTOBUF_CONSTEXPR CGQuickslotAddPacket::CGQuickslotAddPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.slot_)*/nullptr
  , /*decltype(_impl_.pos_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGQuickslotAddPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGQuickslotAddPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGQuickslotAddPacketDefaultTypeInternal() {}
  union {
    CGQuickslotAddPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGQuickslotAddPacketDefaultTypeInternal _CGQuickslotAddPacket_default_instance_;
PROTOBUF_CONSTEXPR CGQuickslotDeletePacket::CGQuickslotDeletePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pos_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGQuickslotDeletePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGQuickslotDeletePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGQuickslotDeletePacketDefaultTypeInternal() {}
  union {
    CGQuickslotDeletePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGQuickslotDeletePacketDefaultTypeInternal _CGQuickslotDeletePacket_default_instance_;
PROTOBUF_CONSTEXPR CGQuickslotSwapPacket::CGQuickslotSwapPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pos_)*/0u
  , /*decltype(_impl_.change_pos_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGQuickslotSwapPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGQuickslotSwapPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGQuickslotSwapPacketDefaultTypeInternal() {}
  union {
    CGQuickslotSwapPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGQuickslotSwapPacketDefaultTypeInternal _CGQuickslotSwapPacket_default_instance_;
PROTOBUF_CONSTEXPR CGShopBuyPacket::CGShopBuyPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pos_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGShopBuyPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGShopBuyPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGShopBuyPacketDefaultTypeInternal() {}
  union {
    CGShopBuyPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGShopBuyPacketDefaultTypeInternal _CGShopBuyPacket_default_instance_;
PROTOBUF_CONSTEXPR CGShopSellPacket::CGShopSellPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.cell_)*/nullptr
  , /*decltype(_impl_.count_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGShopSellPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGShopSellPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGShopSellPacketDefaultTypeInternal() {}
  union {
    CGShopSellPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGShopSellPacketDefaultTypeInternal _CGShopSellPacket_default_instance_;
PROTOBUF_CONSTEXPR CGExchangeStartPacket::CGExchangeStartPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.other_vid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGExchangeStartPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGExchangeStartPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGExchangeStartPacketDefaultTypeInternal() {}
  union {
    CGExchangeStartPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGExchangeStartPacketDefaultTypeInternal _CGExchangeStartPacket_default_instance_;
PROTOBUF_CONSTEXPR CGExchangeItemAddPacket::CGExchangeItemAddPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.cell_)*/nullptr
  , /*decltype(_impl_.display_pos_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGExchangeItemAddPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGExchangeItemAddPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGExchangeItemAddPacketDefaultTypeInternal() {}
  union {
    CGExchangeItemAddPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGExchangeItemAddPacketDefaultTypeInternal _CGExchangeItemAddPacket_default_instance_;
PROTOBUF_CONSTEXPR CGExchangeItemDelPacket::CGExchangeItemDelPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.display_pos_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGExchangeItemDelPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGExchangeItemDelPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGExchangeItemDelPacketDefaultTypeInternal() {}
  union {
    CGExchangeItemDelPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGExchangeItemDelPacketDefaultTypeInternal _CGExchangeItemDelPacket_default_instance_;
PROTOBUF_CONSTEXPR CGExchangeGoldAddPacket::CGExchangeGoldAddPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.gold_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGExchangeGoldAddPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGExchangeGoldAddPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGExchangeGoldAddPacketDefaultTypeInternal() {}
  union {
    CGExchangeGoldAddPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGExchangeGoldAddPacketDefaultTypeInternal _CGExchangeGoldAddPacket_default_instance_;
PROTOBUF_CONSTEXPR CGMessengerAddByVIDPacket::CGMessengerAddByVIDPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.vid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGMessengerAddByVIDPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGMessengerAddByVIDPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGMessengerAddByVIDPacketDefaultTypeInternal() {}
  union {
    CGMessengerAddByVIDPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGMessengerAddByVIDPacketDefaultTypeInternal _CGMessengerAddByVIDPacket_default_instance_;
PROTOBUF_CONSTEXPR CGMessengerAddByNamePacket::CGMessengerAddByNamePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGMessengerAddByNamePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGMessengerAddByNamePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGMessengerAddByNamePacketDefaultTypeInternal() {}
  union {
    CGMessengerAddByNamePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGMessengerAddByNamePacketDefaultTypeInternal _CGMessengerAddByNamePacket_default_instance_;
PROTOBUF_CONSTEXPR CGMessengerRemovePacket::CGMessengerRemovePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGMessengerRemovePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGMessengerRemovePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGMessengerRemovePacketDefaultTypeInternal() {}
  union {
    CGMessengerRemovePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGMessengerRemovePacketDefaultTypeInternal _CGMessengerRemovePacket_default_instance_;
PROTOBUF_CONSTEXPR CGMessengerAddBlockByVIDPacket::CGMessengerAddBlockByVIDPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.vid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGMessengerAddBlockByVIDPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGMessengerAddBlockByVIDPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGMessengerAddBlockByVIDPacketDefaultTypeInternal() {}
  union {
    CGMessengerAddBlockByVIDPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGMessengerAddBlockByVIDPacketDefaultTypeInternal _CGMessengerAddBlockByVIDPacket_default_instance_;
PROTOBUF_CONSTEXPR CGMessengerAddBlockByNamePacket::CGMessengerAddBlockByNamePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGMessengerAddBlockByNamePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGMessengerAddBlockByNamePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGMessengerAddBlockByNamePacketDefaultTypeInternal() {}
  union {
    CGMessengerAddBlockByNamePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGMessengerAddBlockByNamePacketDefaultTypeInternal _CGMessengerAddBlockByNamePacket_default_instance_;
PROTOBUF_CONSTEXPR CGMessengerRemoveBlockPacket::CGMessengerRemoveBlockPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGMessengerRemoveBlockPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGMessengerRemoveBlockPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGMessengerRemoveBlockPacketDefaultTypeInternal() {}
  union {
    CGMessengerRemoveBlockPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGMessengerRemoveBlockPacketDefaultTypeInternal _CGMessengerRemoveBlockPacket_default_instance_;
PROTOBUF_CONSTEXPR CGPartyInvitePacket::CGPartyInvitePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.vid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGPartyInvitePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGPartyInvitePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGPartyInvitePacketDefaultTypeInternal() {}
  union {
    CGPartyInvitePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGPartyInvitePacketDefaultTypeInternal _CGPartyInvitePacket_default_instance_;
PROTOBUF_CONSTEXPR CGPartyInviteAnswerPacket::CGPartyInviteAnswerPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.leader_vid_)*/0u
  , /*decltype(_impl_.accept_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGPartyInviteAnswerPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGPartyInviteAnswerPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGPartyInviteAnswerPacketDefaultTypeInternal() {}
  union {
    CGPartyInviteAnswerPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGPartyInviteAnswerPacketDefaultTypeInternal _CGPartyInviteAnswerPacket_default_instance_;
PROTOBUF_CONSTEXPR CGPartyRemovePacket::CGPartyRemovePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGPartyRemovePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGPartyRemovePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGPartyRemovePacketDefaultTypeInternal() {}
  union {
    CGPartyRemovePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGPartyRemovePacketDefaultTypeInternal _CGPartyRemovePacket_default_instance_;
PROTOBUF_CONSTEXPR CGPartySetStatePacket::CGPartySetStatePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pid_)*/0u
  , /*decltype(_impl_.role_)*/0u
  , /*decltype(_impl_.flag_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGPartySetStatePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGPartySetStatePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGPartySetStatePacketDefaultTypeInternal() {}
  union {
    CGPartySetStatePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGPartySetStatePacketDefaultTypeInternal _CGPartySetStatePacket_default_instance_;
PROTOBUF_CONSTEXPR CGPartyUseSkillPacket::CGPartyUseSkillPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.skill_index_)*/0u
  , /*decltype(_impl_.vid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGPartyUseSkillPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGPartyUseSkillPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGPartyUseSkillPacketDefaultTypeInternal() {}
  union {
    CGPartyUseSkillPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGPartyUseSkillPacketDefaultTypeInternal _CGPartyUseSkillPacket_default_instance_;
PROTOBUF_CONSTEXPR CGPartyParameterPacket::CGPartyParameterPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.distribute_mode_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGPartyParameterPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGPartyParameterPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGPartyParameterPacketDefaultTypeInternal() {}
  union {
    CGPartyParameterPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGPartyParameterPacketDefaultTypeInternal _CGPartyParameterPacket_default_instance_;
PROTOBUF_CONSTEXPR CGGuildDepositMoneyPacket::CGGuildDepositMoneyPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.gold_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGGuildDepositMoneyPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGGuildDepositMoneyPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGGuildDepositMoneyPacketDefaultTypeInternal() {}
  union {
    CGGuildDepositMoneyPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGGuildDepositMoneyPacketDefaultTypeInternal _CGGuildDepositMoneyPacket_default_instance_;
PROTOBUF_CONSTEXPR CGGuildWithdrawMoneyPacket::CGGuildWithdrawMoneyPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.gold_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGGuildWithdrawMoneyPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGGuildWithdrawMoneyPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGGuildWithdrawMoneyPacketDefaultTypeInternal() {}
  union {
    CGGuildWithdrawMoneyPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGGuildWithdrawMoneyPacketDefaultTypeInternal _CGGuildWithdrawMoneyPacket_default_instance_;
PROTOBUF_CONSTEXPR CGGuildAddMemberPacket::CGGuildAddMemberPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.vid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGGuildAddMemberPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGGuildAddMemberPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGGuildAddMemberPacketDefaultTypeInternal() {}
  union {
    CGGuildAddMemberPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGGuildAddMemberPacketDefaultTypeInternal _CGGuildAddMemberPacket_default_instance_;
PROTOBUF_CONSTEXPR CGGuildRemoveMemberPacket::CGGuildRemoveMemberPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGGuildRemoveMemberPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGGuildRemoveMemberPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGGuildRemoveMemberPacketDefaultTypeInternal() {}
  union {
    CGGuildRemoveMemberPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGGuildRemoveMemberPacketDefaultTypeInternal _CGGuildRemoveMemberPacket_default_instance_;
PROTOBUF_CONSTEXPR CGGuildChangeGradeNamePacket::CGGuildChangeGradeNamePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.gradename_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.grade_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGGuildChangeGradeNamePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGGuildChangeGradeNamePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGGuildChangeGradeNamePacketDefaultTypeInternal() {}
  union {
    CGGuildChangeGradeNamePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGGuildChangeGradeNamePacketDefaultTypeInternal _CGGuildChangeGradeNamePacket_default_instance_;
PROTOBUF_CONSTEXPR CGGuildChangeGradeAuthorityPacket::CGGuildChangeGradeAuthorityPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.grade_)*/0u
  , /*decltype(_impl_.authority_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGGuildChangeGradeAuthorityPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGGuildChangeGradeAuthorityPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGGuildChangeGradeAuthorityPacketDefaultTypeInternal() {}
  union {
    CGGuildChangeGradeAuthorityPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGGuildChangeGradeAuthorityPacketDefaultTypeInternal _CGGuildChangeGradeAuthorityPacket_default_instance_;
PROTOBUF_CONSTEXPR CGGuildOfferExpPacket::CGGuildOfferExpPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.exp_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGGuildOfferExpPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGGuildOfferExpPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGGuildOfferExpPacketDefaultTypeInternal() {}
  union {
    CGGuildOfferExpPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGGuildOfferExpPacketDefaultTypeInternal _CGGuildOfferExpPacket_default_instance_;
PROTOBUF_CONSTEXPR CGGuildChargeGSPPacket::CGGuildChargeGSPPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.amount_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGGuildChargeGSPPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGGuildChargeGSPPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGGuildChargeGSPPacketDefaultTypeInternal() {}
  union {
    CGGuildChargeGSPPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGGuildChargeGSPPacketDefaultTypeInternal _CGGuildChargeGSPPacket_default_instance_;
PROTOBUF_CONSTEXPR CGGuildPostCommentPacket::CGGuildPostCommentPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGGuildPostCommentPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGGuildPostCommentPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGGuildPostCommentPacketDefaultTypeInternal() {}
  union {
    CGGuildPostCommentPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGGuildPostCommentPacketDefaultTypeInternal _CGGuildPostCommentPacket_default_instance_;
PROTOBUF_CONSTEXPR CGGuildDeleteCommentPacket::CGGuildDeleteCommentPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.comment_id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGGuildDeleteCommentPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGGuildDeleteCommentPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGGuildDeleteCommentPacketDefaultTypeInternal() {}
  union {
    CGGuildDeleteCommentPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGGuildDeleteCommentPacketDefaultTypeInternal _CGGuildDeleteCommentPacket_default_instance_;
PROTOBUF_CONSTEXPR CGGuildChangeMemberGradePacket::CGGuildChangeMemberGradePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pid_)*/0u
  , /*decltype(_impl_.grade_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGGuildChangeMemberGradePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGGuildChangeMemberGradePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGGuildChangeMemberGradePacketDefaultTypeInternal() {}
  union {
    CGGuildChangeMemberGradePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGGuildChangeMemberGradePacketDefaultTypeInternal _CGGuildChangeMemberGradePacket_default_instance_;
PROTOBUF_CONSTEXPR CGGuildUseSkillPacket::CGGuildUseSkillPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.vnum_)*/0u
  , /*decltype(_impl_.pid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGGuildUseSkillPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGGuildUseSkillPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGGuildUseSkillPacketDefaultTypeInternal() {}
  union {
    CGGuildUseSkillPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGGuildUseSkillPacketDefaultTypeInternal _CGGuildUseSkillPacket_default_instance_;
PROTOBUF_CONSTEXPR CGGuildChangeMemberGeneralPacket::CGGuildChangeMemberGeneralPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pid_)*/0u
  , /*decltype(_impl_.is_general_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGGuildChangeMemberGeneralPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGGuildChangeMemberGeneralPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGGuildChangeMemberGeneralPacketDefaultTypeInternal() {}
  union {
    CGGuildChangeMemberGeneralPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGGuildChangeMemberGeneralPacketDefaultTypeInternal _CGGuildChangeMemberGeneralPacket_default_instance_;
PROTOBUF_CONSTEXPR CGGuildInviteAnswerPacket::CGGuildInviteAnswerPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.guild_id_)*/0u
  , /*decltype(_impl_.accept_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGGuildInviteAnswerPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGGuildInviteAnswerPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGGuildInviteAnswerPacketDefaultTypeInternal() {}
  union {
    CGGuildInviteAnswerPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGGuildInviteAnswerPacketDefaultTypeInternal _CGGuildInviteAnswerPacket_default_instance_;
PROTOBUF_CONSTEXPR CGGuildAnswerMakePacket::CGGuildAnswerMakePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.guild_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGGuildAnswerMakePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGGuildAnswerMakePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGGuildAnswerMakePacketDefaultTypeInternal() {}
  union {
    CGGuildAnswerMakePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGGuildAnswerMakePacketDefaultTypeInternal _CGGuildAnswerMakePacket_default_instance_;
PROTOBUF_CONSTEXPR CGGuildRequestListPacket::CGGuildRequestListPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.page_number_)*/0u
  , /*decltype(_impl_.page_type_)*/0u
  , /*decltype(_impl_.empire_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGGuildRequestListPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGGuildRequestListPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGGuildRequestListPacketDefaultTypeInternal() {}
  union {
    CGGuildRequestListPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGGuildRequestListPacketDefaultTypeInternal _CGGuildRequestListPacket_default_instance_;
PROTOBUF_CONSTEXPR CGGuildSearchPacket::CGGuildSearchPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.search_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.page_type_)*/0u
  , /*decltype(_impl_.empire_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGGuildSearchPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGGuildSearchPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGGuildSearchPacketDefaultTypeInternal() {}
  union {
    CGGuildSearchPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGGuildSearchPacketDefaultTypeInternal _CGGuildSearchPacket_default_instance_;
PROTOBUF_CONSTEXPR CGGuildSafeboxCheckinPacket::CGGuildSafeboxCheckinPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.item_pos_)*/nullptr
  , /*decltype(_impl_.safebox_pos_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGGuildSafeboxCheckinPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGGuildSafeboxCheckinPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGGuildSafeboxCheckinPacketDefaultTypeInternal() {}
  union {
    CGGuildSafeboxCheckinPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGGuildSafeboxCheckinPacketDefaultTypeInternal _CGGuildSafeboxCheckinPacket_default_instance_;
PROTOBUF_CONSTEXPR CGGuildSafeboxCheckoutPacket::CGGuildSafeboxCheckoutPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.item_pos_)*/nullptr
  , /*decltype(_impl_.safebox_pos_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGGuildSafeboxCheckoutPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGGuildSafeboxCheckoutPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGGuildSafeboxCheckoutPacketDefaultTypeInternal() {}
  union {
    CGGuildSafeboxCheckoutPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGGuildSafeboxCheckoutPacketDefaultTypeInternal _CGGuildSafeboxCheckoutPacket_default_instance_;
PROTOBUF_CONSTEXPR CGGuildSafeboxItemMovePacket::CGGuildSafeboxItemMovePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.source_pos_)*/0u
  , /*decltype(_impl_.target_pos_)*/0u
  , /*decltype(_impl_.count_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGGuildSafeboxItemMovePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGGuildSafeboxItemMovePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGGuildSafeboxItemMovePacketDefaultTypeInternal() {}
  union {
    CGGuildSafeboxItemMovePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGGuildSafeboxItemMovePacketDefaultTypeInternal _CGGuildSafeboxItemMovePacket_default_instance_;
PROTOBUF_CONSTEXPR CGGuildSafeboxGiveGoldPacket::CGGuildSafeboxGiveGoldPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.gold_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGGuildSafeboxGiveGoldPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGGuildSafeboxGiveGoldPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGGuildSafeboxGiveGoldPacketDefaultTypeInternal() {}
  union {
    CGGuildSafeboxGiveGoldPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGGuildSafeboxGiveGoldPacketDefaultTypeInternal _CGGuildSafeboxGiveGoldPacket_default_instance_;
PROTOBUF_CONSTEXPR CGGuildSafeboxGetGoldPacket::CGGuildSafeboxGetGoldPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.gold_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGGuildSafeboxGetGoldPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGGuildSafeboxGetGoldPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGGuildSafeboxGetGoldPacketDefaultTypeInternal() {}
  union {
    CGGuildSafeboxGetGoldPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGGuildSafeboxGetGoldPacketDefaultTypeInternal _CGGuildSafeboxGetGoldPacket_default_instance_;
PROTOBUF_CONSTEXPR CGPetUseEggPacket::CGPetUseEggPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pet_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.egg_cell_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGPetUseEggPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGPetUseEggPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGPetUseEggPacketDefaultTypeInternal() {}
  union {
    CGPetUseEggPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGPetUseEggPacketDefaultTypeInternal _CGPetUseEggPacket_default_instance_;
PROTOBUF_CONSTEXPR CGPetResetSkillPacket::CGPetResetSkillPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.reset_cell_)*/nullptr
  , /*decltype(_impl_.skill_index_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGPetResetSkillPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGPetResetSkillPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGPetResetSkillPacketDefaultTypeInternal() {}
  union {
    CGPetResetSkillPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGPetResetSkillPacketDefaultTypeInternal _CGPetResetSkillPacket_default_instance_;
PROTOBUF_CONSTEXPR CGPetAttrRefineInfoPacket::CGPetAttrRefineInfoPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.index_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGPetAttrRefineInfoPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGPetAttrRefineInfoPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGPetAttrRefineInfoPacketDefaultTypeInternal() {}
  union {
    CGPetAttrRefineInfoPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGPetAttrRefineInfoPacketDefaultTypeInternal _CGPetAttrRefineInfoPacket_default_instance_;
PROTOBUF_CONSTEXPR CGPetAttrRefinePacket::CGPetAttrRefinePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.index_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CGPetAttrRefinePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGPetAttrRefinePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGPetAttrRefinePacketDefaultTypeInternal() {}
  union {
    CGPetAttrRefinePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGPetAttrRefinePacketDefaultTypeInternal _CGPetAttrRefinePacket_default_instance_;
}  // namespace network
static ::_pb::Metadata file_level_metadata_cg_5fpackets_2eproto[132];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_cg_5fpackets_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_cg_5fpackets_2eproto = nullptr;

const uint32_t TableStruct_cg_5fpackets_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGHandshakePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGHandshakePacket, _impl_.handshake_),
  PROTOBUF_FIELD_OFFSET(::network::CGHandshakePacket, _impl_.time_),
  PROTOBUF_FIELD_OFFSET(::network::CGHandshakePacket, _impl_.delta_),
  PROTOBUF_FIELD_OFFSET(::network::CGHandshakePacket, _impl_.crypt_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGKeyAgreementPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGKeyAgreementPacket, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::network::CGKeyAgreementPacket, _impl_.agreed_length_),
  PROTOBUF_FIELD_OFFSET(::network::CGKeyAgreementPacket, _impl_.data_length_),
  PROTOBUF_FIELD_OFFSET(::network::CGKeyAgreementPacket, _impl_.data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGAuthLoginPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGAuthLoginPacket, _impl_.login_),
  PROTOBUF_FIELD_OFFSET(::network::CGAuthLoginPacket, _impl_.passwd_),
  PROTOBUF_FIELD_OFFSET(::network::CGAuthLoginPacket, _impl_.hwid_),
  PROTOBUF_FIELD_OFFSET(::network::CGAuthLoginPacket, _impl_.client_keys_),
  PROTOBUF_FIELD_OFFSET(::network::CGAuthLoginPacket, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::network::CGAuthLoginPacket, _impl_.language_),
  PROTOBUF_FIELD_OFFSET(::network::CGAuthLoginPacket, _impl_.pc_name_),
  PROTOBUF_FIELD_OFFSET(::network::CGAuthLoginPacket, _impl_.user_name_),
  PROTOBUF_FIELD_OFFSET(::network::CGAuthLoginPacket, _impl_.pc_name_real_),
  PROTOBUF_FIELD_OFFSET(::network::CGAuthLoginPacket, _impl_.user_name_real_),
  PROTOBUF_FIELD_OFFSET(::network::CGAuthLoginPacket, _impl_.hash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGAuthOpenIDLoginPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGAuthOpenIDLoginPacket, _impl_.auth_key_),
  PROTOBUF_FIELD_OFFSET(::network::CGAuthOpenIDLoginPacket, _impl_.client_keys_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGAuthPasspodAnswerPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGAuthPasspodAnswerPacket, _impl_.answer_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGLoginByKeyPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGLoginByKeyPacket, _impl_.login_),
  PROTOBUF_FIELD_OFFSET(::network::CGLoginByKeyPacket, _impl_.login_key_),
  PROTOBUF_FIELD_OFFSET(::network::CGLoginByKeyPacket, _impl_.client_key_),
  PROTOBUF_FIELD_OFFSET(::network::CGLoginByKeyPacket, _impl_.locale_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGEmpirePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGEmpirePacket, _impl_.empire_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGPlayerSelectPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGPlayerSelectPacket, _impl_.index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGPlayerCreatePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGPlayerCreatePacket, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::network::CGPlayerCreatePacket, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::network::CGPlayerCreatePacket, _impl_.job_),
  PROTOBUF_FIELD_OFFSET(::network::CGPlayerCreatePacket, _impl_.shape_),
  PROTOBUF_FIELD_OFFSET(::network::CGPlayerCreatePacket, _impl_.con_),
  PROTOBUF_FIELD_OFFSET(::network::CGPlayerCreatePacket, _impl_.int__),
  PROTOBUF_FIELD_OFFSET(::network::CGPlayerCreatePacket, _impl_.str_),
  PROTOBUF_FIELD_OFFSET(::network::CGPlayerCreatePacket, _impl_.dex_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGPlayerChangeNamePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGPlayerChangeNamePacket, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::network::CGPlayerChangeNamePacket, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGPlayerHairSelectPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGPlayerHairSelectPacket, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::network::CGPlayerHairSelectPacket, _impl_.hair_vnum_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGPlayerDeletePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGPlayerDeletePacket, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::network::CGPlayerDeletePacket, _impl_.private_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGMarkCRCListPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGMarkCRCListPacket, _impl_.image_index_),
  PROTOBUF_FIELD_OFFSET(::network::CGMarkCRCListPacket, _impl_.crclist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGMarkUploadPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGMarkUploadPacket, _impl_.guild_id_),
  PROTOBUF_FIELD_OFFSET(::network::CGMarkUploadPacket, _impl_.image_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGGuildSymbolUploadPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGGuildSymbolUploadPacket, _impl_.guild_id_),
  PROTOBUF_FIELD_OFFSET(::network::CGGuildSymbolUploadPacket, _impl_.image_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGGuildSymbolCRCPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGGuildSymbolCRCPacket, _impl_.guild_id_),
  PROTOBUF_FIELD_OFFSET(::network::CGGuildSymbolCRCPacket, _impl_.crc_),
  PROTOBUF_FIELD_OFFSET(::network::CGGuildSymbolCRCPacket, _impl_.symbol_size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGClientVersionPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGClientVersionPacket, _impl_.filename_),
  PROTOBUF_FIELD_OFFSET(::network::CGClientVersionPacket, _impl_.timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGLoginVersionCheckPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGLoginVersionCheckPacket, _impl_.version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGXTRAPAckPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGXTRAPAckPacket, _impl_.packet_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGHackPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGHackPacket, _impl_.buf_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGCostumeVisibilityPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGCostumeVisibilityPacket, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::network::CGCostumeVisibilityPacket, _impl_.visible_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGChatPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGChatPacket, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::network::CGChatPacket, _impl_.message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGAttackPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGAttackPacket, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::network::CGAttackPacket, _impl_.vid_),
  PROTOBUF_FIELD_OFFSET(::network::CGAttackPacket, _impl_.crc_magic_cube_proc_piece_),
  PROTOBUF_FIELD_OFFSET(::network::CGAttackPacket, _impl_.crc_magic_cube_file_piece_),
  PROTOBUF_FIELD_OFFSET(::network::CGAttackPacket, _impl_.random_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGShootPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGShootPacket, _impl_.type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGWhisperPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGWhisperPacket, _impl_.name_to_),
  PROTOBUF_FIELD_OFFSET(::network::CGWhisperPacket, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::network::CGWhisperPacket, _impl_.send_offline_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGOnClickPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGOnClickPacket, _impl_.vid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGPositionPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGPositionPacket, _impl_.position_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGNextSkillUsePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGNextSkillUsePacket, _impl_.skill_vnum_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGMovePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGMovePacket, _impl_.func_),
  PROTOBUF_FIELD_OFFSET(::network::CGMovePacket, _impl_.arg_),
  PROTOBUF_FIELD_OFFSET(::network::CGMovePacket, _impl_.rot_),
  PROTOBUF_FIELD_OFFSET(::network::CGMovePacket, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::network::CGMovePacket, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::network::CGMovePacket, _impl_.time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGSyncPositionPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGSyncPositionPacket, _impl_.elements_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGFlyTargetPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGFlyTargetPacket, _impl_.target_vid_),
  PROTOBUF_FIELD_OFFSET(::network::CGFlyTargetPacket, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::network::CGFlyTargetPacket, _impl_.y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGAddFlyTargetPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGAddFlyTargetPacket, _impl_.target_vid_),
  PROTOBUF_FIELD_OFFSET(::network::CGAddFlyTargetPacket, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::network::CGAddFlyTargetPacket, _impl_.y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGUseSkillPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGUseSkillPacket, _impl_.vnum_),
  PROTOBUF_FIELD_OFFSET(::network::CGUseSkillPacket, _impl_.vid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGTargetPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGTargetPacket, _impl_.vid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGTargetMonsterDropInfoPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGTargetMonsterDropInfoPacket, _impl_.race_num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGFishingPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGFishingPacket, _impl_.dir_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGGiveItemPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGGiveItemPacket, _impl_.target_vid_),
  PROTOBUF_FIELD_OFFSET(::network::CGGiveItemPacket, _impl_.cell_),
  PROTOBUF_FIELD_OFFSET(::network::CGGiveItemPacket, _impl_.item_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGMyShopPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGMyShopPacket, _impl_.sign_),
  PROTOBUF_FIELD_OFFSET(::network::CGMyShopPacket, _impl_.items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGRefinePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGRefinePacket, _impl_.cell_),
  PROTOBUF_FIELD_OFFSET(::network::CGRefinePacket, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::network::CGRefinePacket, _impl_.fast_refine_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGPlayerLanguageInformationPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGPlayerLanguageInformationPacket, _impl_.player_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGReportPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGReportPacket, _impl_.key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGDragonSoulRefinePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGDragonSoulRefinePacket, _impl_.sub_type_),
  PROTOBUF_FIELD_OFFSET(::network::CGDragonSoulRefinePacket, _impl_.item_grid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGOnQuestTriggerPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGOnQuestTriggerPacket, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::network::CGOnQuestTriggerPacket, _impl_.arg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGItemMultiUsePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGItemMultiUsePacket, _impl_.cell_),
  PROTOBUF_FIELD_OFFSET(::network::CGItemMultiUsePacket, _impl_.count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGBotReportLogPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGBotReportLogPacket, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::network::CGBotReportLogPacket, _impl_.detail_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGForcedRewarpPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGForcedRewarpPacket, _impl_.detail_log_),
  PROTOBUF_FIELD_OFFSET(::network::CGForcedRewarpPacket, _impl_.checkval_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGUseDetachmentSinglePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGUseDetachmentSinglePacket, _impl_.cell_detachment_),
  PROTOBUF_FIELD_OFFSET(::network::CGUseDetachmentSinglePacket, _impl_.cell_item_),
  PROTOBUF_FIELD_OFFSET(::network::CGUseDetachmentSinglePacket, _impl_.slot_index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGEventRequestAnswerPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGEventRequestAnswerPacket, _impl_.event_index_),
  PROTOBUF_FIELD_OFFSET(::network::CGEventRequestAnswerPacket, _impl_.accept_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGCostumeBonusTransferPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGCostumeBonusTransferPacket, _impl_.sub_header_),
  PROTOBUF_FIELD_OFFSET(::network::CGCostumeBonusTransferPacket, _impl_.pos_),
  PROTOBUF_FIELD_OFFSET(::network::CGCostumeBonusTransferPacket, _impl_.item_cell_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGRunePagePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGRunePagePacket, _impl_.data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGRecvWikiPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGRecvWikiPacket, _impl_.vnum_),
  PROTOBUF_FIELD_OFFSET(::network::CGRecvWikiPacket, _impl_.is_mob_),
  PROTOBUF_FIELD_OFFSET(::network::CGRecvWikiPacket, _impl_.ret_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGSetSkillColorPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGSetSkillColorPacket, _impl_.skill_),
  PROTOBUF_FIELD_OFFSET(::network::CGSetSkillColorPacket, _impl_.col1_),
  PROTOBUF_FIELD_OFFSET(::network::CGSetSkillColorPacket, _impl_.col2_),
  PROTOBUF_FIELD_OFFSET(::network::CGSetSkillColorPacket, _impl_.col3_),
  PROTOBUF_FIELD_OFFSET(::network::CGSetSkillColorPacket, _impl_.col4_),
  PROTOBUF_FIELD_OFFSET(::network::CGSetSkillColorPacket, _impl_.col5_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGEquipmentPageAddPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGEquipmentPageAddPacket, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGEquipmentPageDeletePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGEquipmentPageDeletePacket, _impl_.index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGEquipmentPageSelectPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGEquipmentPageSelectPacket, _impl_.index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGCombatZoneRequestActionPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGCombatZoneRequestActionPacket, _impl_.action_),
  PROTOBUF_FIELD_OFFSET(::network::CGCombatZoneRequestActionPacket, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGCrystalRefinePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGCrystalRefinePacket, _impl_.crystal_cell_),
  PROTOBUF_FIELD_OFFSET(::network::CGCrystalRefinePacket, _impl_.scroll_cell_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGAuctionInsertItemPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGAuctionInsertItemPacket, _impl_.cell_),
  PROTOBUF_FIELD_OFFSET(::network::CGAuctionInsertItemPacket, _impl_.target_cell_),
  PROTOBUF_FIELD_OFFSET(::network::CGAuctionInsertItemPacket, _impl_.price_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGAuctionTakeItemPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGAuctionTakeItemPacket, _impl_.item_id_),
  PROTOBUF_FIELD_OFFSET(::network::CGAuctionTakeItemPacket, _impl_.inventory_pos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGAuctionBuyItemPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGAuctionBuyItemPacket, _impl_.item_id_),
  PROTOBUF_FIELD_OFFSET(::network::CGAuctionBuyItemPacket, _impl_.price_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGAuctionTakeGoldPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGAuctionTakeGoldPacket, _impl_.gold_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGAuctionSearchItemsPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGAuctionSearchItemsPacket, _impl_.page_),
  PROTOBUF_FIELD_OFFSET(::network::CGAuctionSearchItemsPacket, _impl_.options_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGAuctionExtendedSearchItemsPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGAuctionExtendedSearchItemsPacket, _impl_.page_),
  PROTOBUF_FIELD_OFFSET(::network::CGAuctionExtendedSearchItemsPacket, _impl_.options_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGAuctionMarkShopPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGAuctionMarkShopPacket, _impl_.item_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGAuctionShopOpenPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGAuctionShopOpenPacket, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::network::CGAuctionShopOpenPacket, _impl_.style_),
  PROTOBUF_FIELD_OFFSET(::network::CGAuctionShopOpenPacket, _impl_.model_),
  PROTOBUF_FIELD_OFFSET(::network::CGAuctionShopOpenPacket, _impl_.color_red_),
  PROTOBUF_FIELD_OFFSET(::network::CGAuctionShopOpenPacket, _impl_.color_green_),
  PROTOBUF_FIELD_OFFSET(::network::CGAuctionShopOpenPacket, _impl_.color_blue_),
  PROTOBUF_FIELD_OFFSET(::network::CGAuctionShopOpenPacket, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::network::CGAuctionShopOpenPacket, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::network::CGAuctionShopOpenPacket, _impl_.items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGAuctionShopClosePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGAuctionShopClosePacket, _impl_.has_items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGAuctionShopTakeGoldPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGAuctionShopTakeGoldPacket, _impl_.gold_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGAuctionRequestAveragePricePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGAuctionRequestAveragePricePacket, _impl_.requestor_),
  PROTOBUF_FIELD_OFFSET(::network::CGAuctionRequestAveragePricePacket, _impl_.vnum_),
  PROTOBUF_FIELD_OFFSET(::network::CGAuctionRequestAveragePricePacket, _impl_.count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGScriptAnswerPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGScriptAnswerPacket, _impl_.answer_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGScriptButtonPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGScriptButtonPacket, _impl_.index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGScriptSelectItemPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGScriptSelectItemPacket, _impl_.selection_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGQuestInputStringPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGQuestInputStringPacket, _impl_.message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGQuestConfirmPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGQuestConfirmPacket, _impl_.answer_),
  PROTOBUF_FIELD_OFFSET(::network::CGQuestConfirmPacket, _impl_.request_pid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGItemUsePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGItemUsePacket, _impl_.cell_),
  PROTOBUF_FIELD_OFFSET(::network::CGItemUsePacket, _impl_.count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGItemUseToItemPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGItemUseToItemPacket, _impl_.cell_),
  PROTOBUF_FIELD_OFFSET(::network::CGItemUseToItemPacket, _impl_.target_cell_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGItemDropPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGItemDropPacket, _impl_.cell_),
  PROTOBUF_FIELD_OFFSET(::network::CGItemDropPacket, _impl_.gold_),
  PROTOBUF_FIELD_OFFSET(::network::CGItemDropPacket, _impl_.count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGItemDestroyPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGItemDestroyPacket, _impl_.cell_),
  PROTOBUF_FIELD_OFFSET(::network::CGItemDestroyPacket, _impl_.num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGItemMovePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGItemMovePacket, _impl_.cell_),
  PROTOBUF_FIELD_OFFSET(::network::CGItemMovePacket, _impl_.cell_to_),
  PROTOBUF_FIELD_OFFSET(::network::CGItemMovePacket, _impl_.count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGItemPickupPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGItemPickupPacket, _impl_.vid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGSafeboxCheckinPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGSafeboxCheckinPacket, _impl_.safebox_pos_),
  PROTOBUF_FIELD_OFFSET(::network::CGSafeboxCheckinPacket, _impl_.inventory_pos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGSafeboxCheckoutPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGSafeboxCheckoutPacket, _impl_.safebox_pos_),
  PROTOBUF_FIELD_OFFSET(::network::CGSafeboxCheckoutPacket, _impl_.inventory_pos_),
  PROTOBUF_FIELD_OFFSET(::network::CGSafeboxCheckoutPacket, _impl_.is_mall_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGSafeboxItemMovePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGSafeboxItemMovePacket, _impl_.source_pos_),
  PROTOBUF_FIELD_OFFSET(::network::CGSafeboxItemMovePacket, _impl_.target_pos_),
  PROTOBUF_FIELD_OFFSET(::network::CGSafeboxItemMovePacket, _impl_.count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGAcceRefineCheckinPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGAcceRefineCheckinPacket, _impl_.item_cell_),
  PROTOBUF_FIELD_OFFSET(::network::CGAcceRefineCheckinPacket, _impl_.acce_pos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGAcceRefineCheckoutPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGAcceRefineCheckoutPacket, _impl_.acce_pos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGAcceRefineAcceptPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGAcceRefineAcceptPacket, _impl_.window_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGQuickslotAddPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGQuickslotAddPacket, _impl_.pos_),
  PROTOBUF_FIELD_OFFSET(::network::CGQuickslotAddPacket, _impl_.slot_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGQuickslotDeletePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGQuickslotDeletePacket, _impl_.pos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGQuickslotSwapPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGQuickslotSwapPacket, _impl_.pos_),
  PROTOBUF_FIELD_OFFSET(::network::CGQuickslotSwapPacket, _impl_.change_pos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGShopBuyPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGShopBuyPacket, _impl_.pos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGShopSellPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGShopSellPacket, _impl_.cell_),
  PROTOBUF_FIELD_OFFSET(::network::CGShopSellPacket, _impl_.count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGExchangeStartPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGExchangeStartPacket, _impl_.other_vid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGExchangeItemAddPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGExchangeItemAddPacket, _impl_.cell_),
  PROTOBUF_FIELD_OFFSET(::network::CGExchangeItemAddPacket, _impl_.display_pos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGExchangeItemDelPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGExchangeItemDelPacket, _impl_.display_pos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGExchangeGoldAddPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGExchangeGoldAddPacket, _impl_.gold_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGMessengerAddByVIDPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGMessengerAddByVIDPacket, _impl_.vid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGMessengerAddByNamePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGMessengerAddByNamePacket, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGMessengerRemovePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGMessengerRemovePacket, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGMessengerAddBlockByVIDPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGMessengerAddBlockByVIDPacket, _impl_.vid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGMessengerAddBlockByNamePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGMessengerAddBlockByNamePacket, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGMessengerRemoveBlockPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGMessengerRemoveBlockPacket, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGPartyInvitePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGPartyInvitePacket, _impl_.vid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGPartyInviteAnswerPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGPartyInviteAnswerPacket, _impl_.leader_vid_),
  PROTOBUF_FIELD_OFFSET(::network::CGPartyInviteAnswerPacket, _impl_.accept_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGPartyRemovePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGPartyRemovePacket, _impl_.pid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGPartySetStatePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGPartySetStatePacket, _impl_.pid_),
  PROTOBUF_FIELD_OFFSET(::network::CGPartySetStatePacket, _impl_.role_),
  PROTOBUF_FIELD_OFFSET(::network::CGPartySetStatePacket, _impl_.flag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGPartyUseSkillPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGPartyUseSkillPacket, _impl_.skill_index_),
  PROTOBUF_FIELD_OFFSET(::network::CGPartyUseSkillPacket, _impl_.vid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGPartyParameterPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGPartyParameterPacket, _impl_.distribute_mode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGGuildDepositMoneyPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGGuildDepositMoneyPacket, _impl_.gold_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGGuildWithdrawMoneyPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGGuildWithdrawMoneyPacket, _impl_.gold_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGGuildAddMemberPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGGuildAddMemberPacket, _impl_.vid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGGuildRemoveMemberPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGGuildRemoveMemberPacket, _impl_.pid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGGuildChangeGradeNamePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGGuildChangeGradeNamePacket, _impl_.grade_),
  PROTOBUF_FIELD_OFFSET(::network::CGGuildChangeGradeNamePacket, _impl_.gradename_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGGuildChangeGradeAuthorityPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGGuildChangeGradeAuthorityPacket, _impl_.grade_),
  PROTOBUF_FIELD_OFFSET(::network::CGGuildChangeGradeAuthorityPacket, _impl_.authority_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGGuildOfferExpPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGGuildOfferExpPacket, _impl_.exp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGGuildChargeGSPPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGGuildChargeGSPPacket, _impl_.amount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGGuildPostCommentPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGGuildPostCommentPacket, _impl_.message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGGuildDeleteCommentPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGGuildDeleteCommentPacket, _impl_.comment_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGGuildChangeMemberGradePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGGuildChangeMemberGradePacket, _impl_.pid_),
  PROTOBUF_FIELD_OFFSET(::network::CGGuildChangeMemberGradePacket, _impl_.grade_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGGuildUseSkillPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGGuildUseSkillPacket, _impl_.vnum_),
  PROTOBUF_FIELD_OFFSET(::network::CGGuildUseSkillPacket, _impl_.pid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGGuildChangeMemberGeneralPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGGuildChangeMemberGeneralPacket, _impl_.pid_),
  PROTOBUF_FIELD_OFFSET(::network::CGGuildChangeMemberGeneralPacket, _impl_.is_general_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGGuildInviteAnswerPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGGuildInviteAnswerPacket, _impl_.guild_id_),
  PROTOBUF_FIELD_OFFSET(::network::CGGuildInviteAnswerPacket, _impl_.accept_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGGuildAnswerMakePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGGuildAnswerMakePacket, _impl_.guild_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGGuildRequestListPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGGuildRequestListPacket, _impl_.page_number_),
  PROTOBUF_FIELD_OFFSET(::network::CGGuildRequestListPacket, _impl_.page_type_),
  PROTOBUF_FIELD_OFFSET(::network::CGGuildRequestListPacket, _impl_.empire_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGGuildSearchPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGGuildSearchPacket, _impl_.search_name_),
  PROTOBUF_FIELD_OFFSET(::network::CGGuildSearchPacket, _impl_.page_type_),
  PROTOBUF_FIELD_OFFSET(::network::CGGuildSearchPacket, _impl_.empire_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGGuildSafeboxCheckinPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGGuildSafeboxCheckinPacket, _impl_.item_pos_),
  PROTOBUF_FIELD_OFFSET(::network::CGGuildSafeboxCheckinPacket, _impl_.safebox_pos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGGuildSafeboxCheckoutPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGGuildSafeboxCheckoutPacket, _impl_.safebox_pos_),
  PROTOBUF_FIELD_OFFSET(::network::CGGuildSafeboxCheckoutPacket, _impl_.item_pos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGGuildSafeboxItemMovePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGGuildSafeboxItemMovePacket, _impl_.source_pos_),
  PROTOBUF_FIELD_OFFSET(::network::CGGuildSafeboxItemMovePacket, _impl_.target_pos_),
  PROTOBUF_FIELD_OFFSET(::network::CGGuildSafeboxItemMovePacket, _impl_.count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGGuildSafeboxGiveGoldPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGGuildSafeboxGiveGoldPacket, _impl_.gold_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGGuildSafeboxGetGoldPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGGuildSafeboxGetGoldPacket, _impl_.gold_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGPetUseEggPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGPetUseEggPacket, _impl_.egg_cell_),
  PROTOBUF_FIELD_OFFSET(::network::CGPetUseEggPacket, _impl_.pet_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGPetResetSkillPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGPetResetSkillPacket, _impl_.reset_cell_),
  PROTOBUF_FIELD_OFFSET(::network::CGPetResetSkillPacket, _impl_.skill_index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGPetAttrRefineInfoPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGPetAttrRefineInfoPacket, _impl_.index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::CGPetAttrRefinePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::CGPetAttrRefinePacket, _impl_.index_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::network::CGHandshakePacket)},
  { 10, -1, -1, sizeof(::network::CGKeyAgreementPacket)},
  { 20, -1, -1, sizeof(::network::CGAuthLoginPacket)},
  { 37, -1, -1, sizeof(::network::CGAuthOpenIDLoginPacket)},
  { 45, -1, -1, sizeof(::network::CGAuthPasspodAnswerPacket)},
  { 52, -1, -1, sizeof(::network::CGLoginByKeyPacket)},
  { 62, -1, -1, sizeof(::network::CGEmpirePacket)},
  { 69, -1, -1, sizeof(::network::CGPlayerSelectPacket)},
  { 76, -1, -1, sizeof(::network::CGPlayerCreatePacket)},
  { 90, -1, -1, sizeof(::network::CGPlayerChangeNamePacket)},
  { 98, -1, -1, sizeof(::network::CGPlayerHairSelectPacket)},
  { 106, -1, -1, sizeof(::network::CGPlayerDeletePacket)},
  { 114, -1, -1, sizeof(::network::CGMarkCRCListPacket)},
  { 122, -1, -1, sizeof(::network::CGMarkUploadPacket)},
  { 130, -1, -1, sizeof(::network::CGGuildSymbolUploadPacket)},
  { 138, -1, -1, sizeof(::network::CGGuildSymbolCRCPacket)},
  { 147, -1, -1, sizeof(::network::CGClientVersionPacket)},
  { 155, -1, -1, sizeof(::network::CGLoginVersionCheckPacket)},
  { 162, -1, -1, sizeof(::network::CGXTRAPAckPacket)},
  { 169, -1, -1, sizeof(::network::CGHackPacket)},
  { 176, -1, -1, sizeof(::network::CGCostumeVisibilityPacket)},
  { 184, -1, -1, sizeof(::network::CGChatPacket)},
  { 192, -1, -1, sizeof(::network::CGAttackPacket)},
  { 203, -1, -1, sizeof(::network::CGShootPacket)},
  { 210, -1, -1, sizeof(::network::CGWhisperPacket)},
  { 219, -1, -1, sizeof(::network::CGOnClickPacket)},
  { 226, -1, -1, sizeof(::network::CGPositionPacket)},
  { 233, -1, -1, sizeof(::network::CGNextSkillUsePacket)},
  { 240, -1, -1, sizeof(::network::CGMovePacket)},
  { 252, -1, -1, sizeof(::network::CGSyncPositionPacket)},
  { 259, -1, -1, sizeof(::network::CGFlyTargetPacket)},
  { 268, -1, -1, sizeof(::network::CGAddFlyTargetPacket)},
  { 277, -1, -1, sizeof(::network::CGUseSkillPacket)},
  { 285, -1, -1, sizeof(::network::CGTargetPacket)},
  { 292, -1, -1, sizeof(::network::CGTargetMonsterDropInfoPacket)},
  { 299, -1, -1, sizeof(::network::CGFishingPacket)},
  { 306, -1, -1, sizeof(::network::CGGiveItemPacket)},
  { 315, -1, -1, sizeof(::network::CGMyShopPacket)},
  { 323, -1, -1, sizeof(::network::CGRefinePacket)},
  { 332, -1, -1, sizeof(::network::CGPlayerLanguageInformationPacket)},
  { 339, -1, -1, sizeof(::network::CGReportPacket)},
  { 346, -1, -1, sizeof(::network::CGDragonSoulRefinePacket)},
  { 354, -1, -1, sizeof(::network::CGOnQuestTriggerPacket)},
  { 362, -1, -1, sizeof(::network::CGItemMultiUsePacket)},
  { 370, -1, -1, sizeof(::network::CGBotReportLogPacket)},
  { 378, -1, -1, sizeof(::network::CGForcedRewarpPacket)},
  { 386, -1, -1, sizeof(::network::CGUseDetachmentSinglePacket)},
  { 395, -1, -1, sizeof(::network::CGEventRequestAnswerPacket)},
  { 403, -1, -1, sizeof(::network::CGCostumeBonusTransferPacket)},
  { 412, -1, -1, sizeof(::network::CGRunePagePacket)},
  { 419, -1, -1, sizeof(::network::CGRecvWikiPacket)},
  { 428, -1, -1, sizeof(::network::CGSetSkillColorPacket)},
  { 440, -1, -1, sizeof(::network::CGEquipmentPageAddPacket)},
  { 447, -1, -1, sizeof(::network::CGEquipmentPageDeletePacket)},
  { 454, -1, -1, sizeof(::network::CGEquipmentPageSelectPacket)},
  { 461, -1, -1, sizeof(::network::CGCombatZoneRequestActionPacket)},
  { 469, -1, -1, sizeof(::network::CGCrystalRefinePacket)},
  { 477, -1, -1, sizeof(::network::CGAuctionInsertItemPacket)},
  { 486, -1, -1, sizeof(::network::CGAuctionTakeItemPacket)},
  { 494, -1, -1, sizeof(::network::CGAuctionBuyItemPacket)},
  { 502, -1, -1, sizeof(::network::CGAuctionTakeGoldPacket)},
  { 509, -1, -1, sizeof(::network::CGAuctionSearchItemsPacket)},
  { 517, -1, -1, sizeof(::network::CGAuctionExtendedSearchItemsPacket)},
  { 525, -1, -1, sizeof(::network::CGAuctionMarkShopPacket)},
  { 532, -1, -1, sizeof(::network::CGAuctionShopOpenPacket)},
  { 547, -1, -1, sizeof(::network::CGAuctionShopClosePacket)},
  { 554, -1, -1, sizeof(::network::CGAuctionShopTakeGoldPacket)},
  { 561, -1, -1, sizeof(::network::CGAuctionRequestAveragePricePacket)},
  { 570, -1, -1, sizeof(::network::CGScriptAnswerPacket)},
  { 577, -1, -1, sizeof(::network::CGScriptButtonPacket)},
  { 584, -1, -1, sizeof(::network::CGScriptSelectItemPacket)},
  { 591, -1, -1, sizeof(::network::CGQuestInputStringPacket)},
  { 598, -1, -1, sizeof(::network::CGQuestConfirmPacket)},
  { 606, -1, -1, sizeof(::network::CGItemUsePacket)},
  { 614, -1, -1, sizeof(::network::CGItemUseToItemPacket)},
  { 622, -1, -1, sizeof(::network::CGItemDropPacket)},
  { 631, -1, -1, sizeof(::network::CGItemDestroyPacket)},
  { 639, -1, -1, sizeof(::network::CGItemMovePacket)},
  { 648, -1, -1, sizeof(::network::CGItemPickupPacket)},
  { 655, -1, -1, sizeof(::network::CGSafeboxCheckinPacket)},
  { 663, -1, -1, sizeof(::network::CGSafeboxCheckoutPacket)},
  { 672, -1, -1, sizeof(::network::CGSafeboxItemMovePacket)},
  { 681, -1, -1, sizeof(::network::CGAcceRefineCheckinPacket)},
  { 689, -1, -1, sizeof(::network::CGAcceRefineCheckoutPacket)},
  { 696, -1, -1, sizeof(::network::CGAcceRefineAcceptPacket)},
  { 703, -1, -1, sizeof(::network::CGQuickslotAddPacket)},
  { 711, -1, -1, sizeof(::network::CGQuickslotDeletePacket)},
  { 718, -1, -1, sizeof(::network::CGQuickslotSwapPacket)},
  { 726, -1, -1, sizeof(::network::CGShopBuyPacket)},
  { 733, -1, -1, sizeof(::network::CGShopSellPacket)},
  { 741, -1, -1, sizeof(::network::CGExchangeStartPacket)},
  { 748, -1, -1, sizeof(::network::CGExchangeItemAddPacket)},
  { 756, -1, -1, sizeof(::network::CGExchangeItemDelPacket)},
  { 763, -1, -1, sizeof(::network::CGExchangeGoldAddPacket)},
  { 770, -1, -1, sizeof(::network::CGMessengerAddByVIDPacket)},
  { 777, -1, -1, sizeof(::network::CGMessengerAddByNamePacket)},
  { 784, -1, -1, sizeof(::network::CGMessengerRemovePacket)},
  { 791, -1, -1, sizeof(::network::CGMessengerAddBlockByVIDPacket)},
  { 798, -1, -1, sizeof(::network::CGMessengerAddBlockByNamePacket)},
  { 805, -1, -1, sizeof(::network::CGMessengerRemoveBlockPacket)},
  { 812, -1, -1, sizeof(::network::CGPartyInvitePacket)},
  { 819, -1, -1, sizeof(::network::CGPartyInviteAnswerPacket)},
  { 827, -1, -1, sizeof(::network::CGPartyRemovePacket)},
  { 834, -1, -1, sizeof(::network::CGPartySetStatePacket)},
  { 843, -1, -1, sizeof(::network::CGPartyUseSkillPacket)},
  { 851, -1, -1, sizeof(::network::CGPartyParameterPacket)},
  { 858, -1, -1, sizeof(::network::CGGuildDepositMoneyPacket)},
  { 865, -1, -1, sizeof(::network::CGGuildWithdrawMoneyPacket)},
  { 872, -1, -1, sizeof(::network::CGGuildAddMemberPacket)},
  { 879, -1, -1, sizeof(::network::CGGuildRemoveMemberPacket)},
  { 886, -1, -1, sizeof(::network::CGGuildChangeGradeNamePacket)},
  { 894, -1, -1, sizeof(::network::CGGuildChangeGradeAuthorityPacket)},
  { 902, -1, -1, sizeof(::network::CGGuildOfferExpPacket)},
  { 909, -1, -1, sizeof(::network::CGGuildChargeGSPPacket)},
  { 916, -1, -1, sizeof(::network::CGGuildPostCommentPacket)},
  { 923, -1, -1, sizeof(::network::CGGuildDeleteCommentPacket)},
  { 930, -1, -1, sizeof(::network::CGGuildChangeMemberGradePacket)},
  { 938, -1, -1, sizeof(::network::CGGuildUseSkillPacket)},
  { 946, -1, -1, sizeof(::network::CGGuildChangeMemberGeneralPacket)},
  { 954, -1, -1, sizeof(::network::CGGuildInviteAnswerPacket)},
  { 962, -1, -1, sizeof(::network::CGGuildAnswerMakePacket)},
  { 969, -1, -1, sizeof(::network::CGGuildRequestListPacket)},
  { 978, -1, -1, sizeof(::network::CGGuildSearchPacket)},
  { 987, -1, -1, sizeof(::network::CGGuildSafeboxCheckinPacket)},
  { 995, -1, -1, sizeof(::network::CGGuildSafeboxCheckoutPacket)},
  { 1003, -1, -1, sizeof(::network::CGGuildSafeboxItemMovePacket)},
  { 1012, -1, -1, sizeof(::network::CGGuildSafeboxGiveGoldPacket)},
  { 1019, -1, -1, sizeof(::network::CGGuildSafeboxGetGoldPacket)},
  { 1026, -1, -1, sizeof(::network::CGPetUseEggPacket)},
  { 1034, -1, -1, sizeof(::network::CGPetResetSkillPacket)},
  { 1042, -1, -1, sizeof(::network::CGPetAttrRefineInfoPacket)},
  { 1049, -1, -1, sizeof(::network::CGPetAttrRefinePacket)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::network::_CGHandshakePacket_default_instance_._instance,
  &::network::_CGKeyAgreementPacket_default_instance_._instance,
  &::network::_CGAuthLoginPacket_default_instance_._instance,
  &::network::_CGAuthOpenIDLoginPacket_default_instance_._instance,
  &::network::_CGAuthPasspodAnswerPacket_default_instance_._instance,
  &::network::_CGLoginByKeyPacket_default_instance_._instance,
  &::network::_CGEmpirePacket_default_instance_._instance,
  &::network::_CGPlayerSelectPacket_default_instance_._instance,
  &::network::_CGPlayerCreatePacket_default_instance_._instance,
  &::network::_CGPlayerChangeNamePacket_default_instance_._instance,
  &::network::_CGPlayerHairSelectPacket_default_instance_._instance,
  &::network::_CGPlayerDeletePacket_default_instance_._instance,
  &::network::_CGMarkCRCListPacket_default_instance_._instance,
  &::network::_CGMarkUploadPacket_default_instance_._instance,
  &::network::_CGGuildSymbolUploadPacket_default_instance_._instance,
  &::network::_CGGuildSymbolCRCPacket_default_instance_._instance,
  &::network::_CGClientVersionPacket_default_instance_._instance,
  &::network::_CGLoginVersionCheckPacket_default_instance_._instance,
  &::network::_CGXTRAPAckPacket_default_instance_._instance,
  &::network::_CGHackPacket_default_instance_._instance,
  &::network::_CGCostumeVisibilityPacket_default_instance_._instance,
  &::network::_CGChatPacket_default_instance_._instance,
  &::network::_CGAttackPacket_default_instance_._instance,
  &::network::_CGShootPacket_default_instance_._instance,
  &::network::_CGWhisperPacket_default_instance_._instance,
  &::network::_CGOnClickPacket_default_instance_._instance,
  &::network::_CGPositionPacket_default_instance_._instance,
  &::network::_CGNextSkillUsePacket_default_instance_._instance,
  &::network::_CGMovePacket_default_instance_._instance,
  &::network::_CGSyncPositionPacket_default_instance_._instance,
  &::network::_CGFlyTargetPacket_default_instance_._instance,
  &::network::_CGAddFlyTargetPacket_default_instance_._instance,
  &::network::_CGUseSkillPacket_default_instance_._instance,
  &::network::_CGTargetPacket_default_instance_._instance,
  &::network::_CGTargetMonsterDropInfoPacket_default_instance_._instance,
  &::network::_CGFishingPacket_default_instance_._instance,
  &::network::_CGGiveItemPacket_default_instance_._instance,
  &::network::_CGMyShopPacket_default_instance_._instance,
  &::network::_CGRefinePacket_default_instance_._instance,
  &::network::_CGPlayerLanguageInformationPacket_default_instance_._instance,
  &::network::_CGReportPacket_default_instance_._instance,
  &::network::_CGDragonSoulRefinePacket_default_instance_._instance,
  &::network::_CGOnQuestTriggerPacket_default_instance_._instance,
  &::network::_CGItemMultiUsePacket_default_instance_._instance,
  &::network::_CGBotReportLogPacket_default_instance_._instance,
  &::network::_CGForcedRewarpPacket_default_instance_._instance,
  &::network::_CGUseDetachmentSinglePacket_default_instance_._instance,
  &::network::_CGEventRequestAnswerPacket_default_instance_._instance,
  &::network::_CGCostumeBonusTransferPacket_default_instance_._instance,
  &::network::_CGRunePagePacket_default_instance_._instance,
  &::network::_CGRecvWikiPacket_default_instance_._instance,
  &::network::_CGSetSkillColorPacket_default_instance_._instance,
  &::network::_CGEquipmentPageAddPacket_default_instance_._instance,
  &::network::_CGEquipmentPageDeletePacket_default_instance_._instance,
  &::network::_CGEquipmentPageSelectPacket_default_instance_._instance,
  &::network::_CGCombatZoneRequestActionPacket_default_instance_._instance,
  &::network::_CGCrystalRefinePacket_default_instance_._instance,
  &::network::_CGAuctionInsertItemPacket_default_instance_._instance,
  &::network::_CGAuctionTakeItemPacket_default_instance_._instance,
  &::network::_CGAuctionBuyItemPacket_default_instance_._instance,
  &::network::_CGAuctionTakeGoldPacket_default_instance_._instance,
  &::network::_CGAuctionSearchItemsPacket_default_instance_._instance,
  &::network::_CGAuctionExtendedSearchItemsPacket_default_instance_._instance,
  &::network::_CGAuctionMarkShopPacket_default_instance_._instance,
  &::network::_CGAuctionShopOpenPacket_default_instance_._instance,
  &::network::_CGAuctionShopClosePacket_default_instance_._instance,
  &::network::_CGAuctionShopTakeGoldPacket_default_instance_._instance,
  &::network::_CGAuctionRequestAveragePricePacket_default_instance_._instance,
  &::network::_CGScriptAnswerPacket_default_instance_._instance,
  &::network::_CGScriptButtonPacket_default_instance_._instance,
  &::network::_CGScriptSelectItemPacket_default_instance_._instance,
  &::network::_CGQuestInputStringPacket_default_instance_._instance,
  &::network::_CGQuestConfirmPacket_default_instance_._instance,
  &::network::_CGItemUsePacket_default_instance_._instance,
  &::network::_CGItemUseToItemPacket_default_instance_._instance,
  &::network::_CGItemDropPacket_default_instance_._instance,
  &::network::_CGItemDestroyPacket_default_instance_._instance,
  &::network::_CGItemMovePacket_default_instance_._instance,
  &::network::_CGItemPickupPacket_default_instance_._instance,
  &::network::_CGSafeboxCheckinPacket_default_instance_._instance,
  &::network::_CGSafeboxCheckoutPacket_default_instance_._instance,
  &::network::_CGSafeboxItemMovePacket_default_instance_._instance,
  &::network::_CGAcceRefineCheckinPacket_default_instance_._instance,
  &::network::_CGAcceRefineCheckoutPacket_default_instance_._instance,
  &::network::_CGAcceRefineAcceptPacket_default_instance_._instance,
  &::network::_CGQuickslotAddPacket_default_instance_._instance,
  &::network::_CGQuickslotDeletePacket_default_instance_._instance,
  &::network::_CGQuickslotSwapPacket_default_instance_._instance,
  &::network::_CGShopBuyPacket_default_instance_._instance,
  &::network::_CGShopSellPacket_default_instance_._instance,
  &::network::_CGExchangeStartPacket_default_instance_._instance,
  &::network::_CGExchangeItemAddPacket_default_instance_._instance,
  &::network::_CGExchangeItemDelPacket_default_instance_._instance,
  &::network::_CGExchangeGoldAddPacket_default_instance_._instance,
  &::network::_CGMessengerAddByVIDPacket_default_instance_._instance,
  &::network::_CGMessengerAddByNamePacket_default_instance_._instance,
  &::network::_CGMessengerRemovePacket_default_instance_._instance,
  &::network::_CGMessengerAddBlockByVIDPacket_default_instance_._instance,
  &::network::_CGMessengerAddBlockByNamePacket_default_instance_._instance,
  &::network::_CGMessengerRemoveBlockPacket_default_instance_._instance,
  &::network::_CGPartyInvitePacket_default_instance_._instance,
  &::network::_CGPartyInviteAnswerPacket_default_instance_._instance,
  &::network::_CGPartyRemovePacket_default_instance_._instance,
  &::network::_CGPartySetStatePacket_default_instance_._instance,
  &::network::_CGPartyUseSkillPacket_default_instance_._instance,
  &::network::_CGPartyParameterPacket_default_instance_._instance,
  &::network::_CGGuildDepositMoneyPacket_default_instance_._instance,
  &::network::_CGGuildWithdrawMoneyPacket_default_instance_._instance,
  &::network::_CGGuildAddMemberPacket_default_instance_._instance,
  &::network::_CGGuildRemoveMemberPacket_default_instance_._instance,
  &::network::_CGGuildChangeGradeNamePacket_default_instance_._instance,
  &::network::_CGGuildChangeGradeAuthorityPacket_default_instance_._instance,
  &::network::_CGGuildOfferExpPacket_default_instance_._instance,
  &::network::_CGGuildChargeGSPPacket_default_instance_._instance,
  &::network::_CGGuildPostCommentPacket_default_instance_._instance,
  &::network::_CGGuildDeleteCommentPacket_default_instance_._instance,
  &::network::_CGGuildChangeMemberGradePacket_default_instance_._instance,
  &::network::_CGGuildUseSkillPacket_default_instance_._instance,
  &::network::_CGGuildChangeMemberGeneralPacket_default_instance_._instance,
  &::network::_CGGuildInviteAnswerPacket_default_instance_._instance,
  &::network::_CGGuildAnswerMakePacket_default_instance_._instance,
  &::network::_CGGuildRequestListPacket_default_instance_._instance,
  &::network::_CGGuildSearchPacket_default_instance_._instance,
  &::network::_CGGuildSafeboxCheckinPacket_default_instance_._instance,
  &::network::_CGGuildSafeboxCheckoutPacket_default_instance_._instance,
  &::network::_CGGuildSafeboxItemMovePacket_default_instance_._instance,
  &::network::_CGGuildSafeboxGiveGoldPacket_default_instance_._instance,
  &::network::_CGGuildSafeboxGetGoldPacket_default_instance_._instance,
  &::network::_CGPetUseEggPacket_default_instance_._instance,
  &::network::_CGPetResetSkillPacket_default_instance_._instance,
  &::network::_CGPetAttrRefineInfoPacket_default_instance_._instance,
  &::network::_CGPetAttrRefinePacket_default_instance_._instance,
};

const char descriptor_table_protodef_cg_5fpackets_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020cg_packets.proto\022\007network\032\ndata.proto\032"
  "\021data_player.proto\032\017data_item.proto\"W\n\021C"
  "GHandshakePacket\022\021\n\thandshake\030\001 \001(\r\022\014\n\004t"
  "ime\030\002 \001(\r\022\r\n\005delta\030\003 \001(\021\022\022\n\ncrypt_data\030\004"
  " \001(\014\"`\n\024CGKeyAgreementPacket\022\016\n\006header\030\001"
  " \001(\r\022\025\n\ragreed_length\030\002 \001(\r\022\023\n\013data_leng"
  "th\030\003 \001(\r\022\014\n\004data\030\004 \001(\014\"\330\001\n\021CGAuthLoginPa"
  "cket\022\r\n\005login\030\001 \001(\014\022\016\n\006passwd\030\002 \001(\014\022\014\n\004h"
  "wid\030\003 \001(\014\022\023\n\013client_keys\030\004 \003(\r\022\017\n\007versio"
  "n\030\005 \001(\r\022\020\n\010language\030\006 \001(\r\022\017\n\007pc_name\030\007 \001"
  "(\014\022\021\n\tuser_name\030\010 \001(\014\022\024\n\014pc_name_real\030\t "
  "\001(\014\022\026\n\016user_name_real\030\n \001(\014\022\014\n\004hash\030\013 \001("
  "\014\"@\n\027CGAuthOpenIDLoginPacket\022\020\n\010auth_key"
  "\030\001 \001(\014\022\023\n\013client_keys\030\002 \003(\r\"+\n\031CGAuthPas"
  "spodAnswerPacket\022\016\n\006answer\030\001 \001(\014\"Z\n\022CGLo"
  "ginByKeyPacket\022\r\n\005login\030\001 \001(\014\022\021\n\tlogin_k"
  "ey\030\002 \001(\r\022\022\n\nclient_key\030\003 \003(\r\022\016\n\006locale\030\004"
  " \001(\r\" \n\016CGEmpirePacket\022\016\n\006empire\030\001 \001(\r\"%"
  "\n\024CGPlayerSelectPacket\022\r\n\005index\030\001 \001(\r\"\203\001"
  "\n\024CGPlayerCreatePacket\022\r\n\005index\030\001 \001(\r\022\014\n"
  "\004name\030\002 \001(\014\022\013\n\003job\030\003 \001(\r\022\r\n\005shape\030\004 \001(\r\022"
  "\013\n\003con\030\005 \001(\r\022\013\n\003int\030\006 \001(\r\022\013\n\003str\030\007 \001(\r\022\013"
  "\n\003dex\030\010 \001(\r\"7\n\030CGPlayerChangeNamePacket\022"
  "\r\n\005index\030\001 \001(\r\022\014\n\004name\030\002 \001(\014\"<\n\030CGPlayer"
  "HairSelectPacket\022\r\n\005index\030\001 \001(\r\022\021\n\thair_"
  "vnum\030\002 \001(\r\";\n\024CGPlayerDeletePacket\022\r\n\005in"
  "dex\030\001 \001(\r\022\024\n\014private_code\030\002 \001(\014\";\n\023CGMar"
  "kCRCListPacket\022\023\n\013image_index\030\001 \001(\r\022\017\n\007c"
  "rclist\030\002 \003(\r\"5\n\022CGMarkUploadPacket\022\020\n\010gu"
  "ild_id\030\001 \001(\r\022\r\n\005image\030\002 \001(\014\"<\n\031CGGuildSy"
  "mbolUploadPacket\022\020\n\010guild_id\030\001 \001(\r\022\r\n\005im"
  "age\030\002 \001(\014\"L\n\026CGGuildSymbolCRCPacket\022\020\n\010g"
  "uild_id\030\001 \001(\r\022\013\n\003crc\030\002 \001(\r\022\023\n\013symbol_siz"
  "e\030\003 \001(\r\"<\n\025CGClientVersionPacket\022\020\n\010file"
  "name\030\001 \001(\014\022\021\n\ttimestamp\030\002 \001(\014\",\n\031CGLogin"
  "VersionCheckPacket\022\017\n\007version\030\001 \001(\014\"\'\n\020C"
  "GXTRAPAckPacket\022\023\n\013packet_data\030\001 \001(\014\"\033\n\014"
  "CGHackPacket\022\013\n\003buf\030\001 \001(\014\":\n\031CGCostumeVi"
  "sibilityPacket\022\014\n\004type\030\001 \001(\r\022\017\n\007visible\030"
  "\002 \001(\010\"-\n\014CGChatPacket\022\014\n\004type\030\001 \001(\r\022\017\n\007m"
  "essage\030\002 \001(\014\"\201\001\n\016CGAttackPacket\022\014\n\004type\030"
  "\001 \001(\r\022\013\n\003vid\030\002 \001(\r\022!\n\031crc_magic_cube_pro"
  "c_piece\030\003 \001(\r\022!\n\031crc_magic_cube_file_pie"
  "ce\030\004 \001(\r\022\016\n\006random\030\005 \001(\r\"\035\n\rCGShootPacke"
  "t\022\014\n\004type\030\001 \001(\r\"I\n\017CGWhisperPacket\022\017\n\007na"
  "me_to\030\001 \001(\014\022\017\n\007message\030\002 \001(\014\022\024\n\014send_off"
  "line\030\003 \001(\010\"\036\n\017CGOnClickPacket\022\013\n\003vid\030\001 \001"
  "(\r\"$\n\020CGPositionPacket\022\020\n\010position\030\001 \001(\r"
  "\"*\n\024CGNextSkillUsePacket\022\022\n\nskill_vnum\030\001"
  " \001(\r\"Z\n\014CGMovePacket\022\014\n\004func\030\001 \001(\r\022\013\n\003ar"
  "g\030\002 \001(\r\022\013\n\003rot\030\003 \001(\r\022\t\n\001x\030\004 \001(\r\022\t\n\001y\030\005 \001"
  "(\r\022\014\n\004time\030\006 \001(\r\"F\n\024CGSyncPositionPacket"
  "\022.\n\010elements\030\001 \003(\0132\034.network.SyncPositio"
  "nElement\"=\n\021CGFlyTargetPacket\022\022\n\ntarget_"
  "vid\030\001 \001(\r\022\t\n\001x\030\002 \001(\r\022\t\n\001y\030\003 \001(\r\"@\n\024CGAdd"
  "FlyTargetPacket\022\022\n\ntarget_vid\030\001 \001(\r\022\t\n\001x"
  "\030\002 \001(\r\022\t\n\001y\030\003 \001(\r\"-\n\020CGUseSkillPacket\022\014\n"
  "\004vnum\030\001 \001(\r\022\013\n\003vid\030\002 \001(\r\"\035\n\016CGTargetPack"
  "et\022\013\n\003vid\030\001 \001(\r\"1\n\035CGTargetMonsterDropIn"
  "foPacket\022\020\n\010race_num\030\001 \001(\r\"\036\n\017CGFishingP"
  "acket\022\013\n\003dir\030\001 \001(\r\"[\n\020CGGiveItemPacket\022\022"
  "\n\ntarget_vid\030\001 \001(\r\022\037\n\004cell\030\002 \001(\0132\021.netwo"
  "rk.TItemPos\022\022\n\nitem_count\030\003 \001(\r\"F\n\016CGMyS"
  "hopPacket\022\014\n\004sign\030\001 \001(\014\022&\n\005items\030\002 \003(\0132\027"
  ".network.TShopItemTable\"T\n\016CGRefinePacke"
  "t\022\037\n\004cell\030\001 \001(\0132\021.network.TItemPos\022\014\n\004ty"
  "pe\030\002 \001(\r\022\023\n\013fast_refine\030\003 \001(\010\"8\n!CGPlaye"
  "rLanguageInformationPacket\022\023\n\013player_nam"
  "e\030\001 \001(\014\"\035\n\016CGReportPacket\022\013\n\003key\030\001 \001(\r\"R"
  "\n\030CGDragonSoulRefinePacket\022\020\n\010sub_type\030\001"
  " \001(\r\022$\n\titem_grid\030\002 \003(\0132\021.network.TItemP"
  "os\"4\n\026CGOnQuestTriggerPacket\022\r\n\005index\030\001 "
  "\001(\r\022\013\n\003arg\030\002 \001(\005\"F\n\024CGItemMultiUsePacket"
  "\022\037\n\004cell\030\001 \001(\0132\021.network.TItemPos\022\r\n\005cou"
  "nt\030\002 \001(\r\"4\n\024CGBotReportLogPacket\022\014\n\004type"
  "\030\001 \001(\014\022\016\n\006detail\030\002 \001(\014\"<\n\024CGForcedRewarp"
  "Packet\022\022\n\ndetail_log\030\001 \001(\014\022\020\n\010checkval\030\002"
  " \001(\005\"]\n\033CGUseDetachmentSinglePacket\022\027\n\017c"
  "ell_detachment\030\001 \001(\r\022\021\n\tcell_item\030\002 \001(\r\022"
  "\022\n\nslot_index\030\003 \001(\r\"A\n\032CGEventRequestAns"
  "werPacket\022\023\n\013event_index\030\001 \001(\r\022\016\n\006accept"
  "\030\002 \001(\010\"e\n\034CGCostumeBonusTransferPacket\022\022"
  "\n\nsub_header\030\001 \001(\r\022\013\n\003pos\030\002 \001(\r\022$\n\titem_"
  "cell\030\003 \001(\0132\021.network.TItemPos\"0\n\020CGRuneP"
  "agePacket\022\034\n\004data\030\001 \001(\0132\016.TRunePageData\""
  "@\n\020CGRecvWikiPacket\022\014\n\004vnum\030\001 \001(\r\022\016\n\006is_"
  "mob\030\002 \001(\010\022\016\n\006ret_id\030\003 \001(\004\"l\n\025CGSetSkillC"
  "olorPacket\022\r\n\005skill\030\001 \001(\r\022\014\n\004col1\030\002 \001(\r\022"
  "\014\n\004col2\030\003 \001(\r\022\014\n\004col3\030\004 \001(\r\022\014\n\004col4\030\005 \001("
  "\r\022\014\n\004col5\030\006 \001(\r\"(\n\030CGEquipmentPageAddPac"
  "ket\022\014\n\004name\030\001 \001(\014\",\n\033CGEquipmentPageDele"
  "tePacket\022\r\n\005index\030\001 \001(\r\",\n\033CGEquipmentPa"
  "geSelectPacket\022\r\n\005index\030\001 \001(\r\"@\n\037CGComba"
  "tZoneRequestActionPacket\022\016\n\006action\030\001 \001(\005"
  "\022\r\n\005value\030\002 \001(\005\"h\n\025CGCrystalRefinePacket"
  "\022\'\n\014crystal_cell\030\001 \001(\0132\021.network.TItemPo"
  "s\022&\n\013scroll_cell\030\002 \001(\0132\021.network.TItemPo"
  "s\"s\n\031CGAuctionInsertItemPacket\022\037\n\004cell\030\001"
  " \001(\0132\021.network.TItemPos\022&\n\013target_cell\030\002"
  " \001(\0132\021.network.TItemPos\022\r\n\005price\030\003 \001(\004\"A"
  "\n\027CGAuctionTakeItemPacket\022\017\n\007item_id\030\001 \001"
  "(\r\022\025\n\rinventory_pos\030\002 \001(\r\"8\n\026CGAuctionBu"
  "yItemPacket\022\017\n\007item_id\030\001 \001(\r\022\r\n\005price\030\002 "
  "\001(\004\"\'\n\027CGAuctionTakeGoldPacket\022\014\n\004gold\030\001"
  " \001(\004\"X\n\032CGAuctionSearchItemsPacket\022\014\n\004pa"
  "ge\030\001 \001(\r\022,\n\007options\030\002 \001(\0132\033.network.TDat"
  "aAuctionSearch\"h\n\"CGAuctionExtendedSearc"
  "hItemsPacket\022\014\n\004page\030\001 \001(\r\0224\n\007options\030\002 "
  "\001(\0132#.network.TExtendedDataAuctionSearch"
  "\"*\n\027CGAuctionMarkShopPacket\022\017\n\007item_id\030\001"
  " \001(\r\"\277\001\n\027CGAuctionShopOpenPacket\022\014\n\004name"
  "\030\001 \001(\014\022\r\n\005style\030\002 \001(\r\022\r\n\005model\030\003 \001(\r\022\021\n\t"
  "color_red\030\004 \001(\002\022\023\n\013color_green\030\005 \001(\002\022\022\n\n"
  "color_blue\030\006 \001(\002\022\t\n\001x\030\007 \001(\r\022\t\n\001y\030\010 \001(\r\022&"
  "\n\005items\030\t \003(\0132\027.network.TShopItemTable\"-"
  "\n\030CGAuctionShopClosePacket\022\021\n\thas_items\030"
  "\001 \001(\010\"+\n\033CGAuctionShopTakeGoldPacket\022\014\n\004"
  "gold\030\001 \001(\004\"T\n\"CGAuctionRequestAveragePri"
  "cePacket\022\021\n\trequestor\030\001 \001(\r\022\014\n\004vnum\030\002 \001("
  "\r\022\r\n\005count\030\003 \001(\r\"&\n\024CGScriptAnswerPacket"
  "\022\016\n\006answer\030\001 \001(\r\"%\n\024CGScriptButtonPacket"
  "\022\r\n\005index\030\001 \001(\r\"-\n\030CGScriptSelectItemPac"
  "ket\022\021\n\tselection\030\001 \001(\r\"+\n\030CGQuestInputSt"
  "ringPacket\022\017\n\007message\030\001 \001(\014\";\n\024CGQuestCo"
  "nfirmPacket\022\016\n\006answer\030\001 \001(\r\022\023\n\013request_p"
  "id\030\002 \001(\r\"A\n\017CGItemUsePacket\022\037\n\004cell\030\001 \001("
  "\0132\021.network.TItemPos\022\r\n\005count\030\002 \001(\r\"`\n\025C"
  "GItemUseToItemPacket\022\037\n\004cell\030\001 \001(\0132\021.net"
  "work.TItemPos\022&\n\013target_cell\030\002 \001(\0132\021.net"
  "work.TItemPos\"P\n\020CGItemDropPacket\022\037\n\004cel"
  "l\030\001 \001(\0132\021.network.TItemPos\022\014\n\004gold\030\002 \001(\r"
  "\022\r\n\005count\030\003 \001(\r\"C\n\023CGItemDestroyPacket\022\037"
  "\n\004cell\030\001 \001(\0132\021.network.TItemPos\022\013\n\003num\030\002"
  " \001(\r\"f\n\020CGItemMovePacket\022\037\n\004cell\030\001 \001(\0132\021"
  ".network.TItemPos\022\"\n\007cell_to\030\002 \001(\0132\021.net"
  "work.TItemPos\022\r\n\005count\030\003 \001(\r\"!\n\022CGItemPi"
  "ckupPacket\022\013\n\003vid\030\001 \001(\r\"W\n\026CGSafeboxChec"
  "kinPacket\022\023\n\013safebox_pos\030\001 \001(\r\022(\n\rinvent"
  "ory_pos\030\002 \001(\0132\021.network.TItemPos\"i\n\027CGSa"
  "feboxCheckoutPacket\022\023\n\013safebox_pos\030\001 \001(\r"
  "\022(\n\rinventory_pos\030\002 \001(\0132\021.network.TItemP"
  "os\022\017\n\007is_mall\030\003 \001(\010\"P\n\027CGSafeboxItemMove"
  "Packet\022\022\n\nsource_pos\030\001 \001(\r\022\022\n\ntarget_pos"
  "\030\002 \001(\r\022\r\n\005count\030\003 \001(\r\"S\n\031CGAcceRefineChe"
  "ckinPacket\022$\n\titem_cell\030\001 \001(\0132\021.network."
  "TItemPos\022\020\n\010acce_pos\030\002 \001(\r\".\n\032CGAcceRefi"
  "neCheckoutPacket\022\020\n\010acce_pos\030\001 \001(\r\"/\n\030CG"
  "AcceRefineAcceptPacket\022\023\n\013window_type\030\001 "
  "\001(\r\">\n\024CGQuickslotAddPacket\022\013\n\003pos\030\001 \001(\r"
  "\022\031\n\004slot\030\002 \001(\0132\013.TQuickslot\"&\n\027CGQuicksl"
  "otDeletePacket\022\013\n\003pos\030\001 \001(\r\"8\n\025CGQuicksl"
  "otSwapPacket\022\013\n\003pos\030\001 \001(\r\022\022\n\nchange_pos\030"
  "\002 \001(\r\"\036\n\017CGShopBuyPacket\022\013\n\003pos\030\001 \001(\r\"B\n"
  "\020CGShopSellPacket\022\037\n\004cell\030\001 \001(\0132\021.networ"
  "k.TItemPos\022\r\n\005count\030\002 \001(\r\"*\n\025CGExchangeS"
  "tartPacket\022\021\n\tother_vid\030\001 \001(\r\"O\n\027CGExcha"
  "ngeItemAddPacket\022\037\n\004cell\030\001 \001(\0132\021.network"
  ".TItemPos\022\023\n\013display_pos\030\002 \001(\r\".\n\027CGExch"
  "angeItemDelPacket\022\023\n\013display_pos\030\001 \001(\r\"\'"
  "\n\027CGExchangeGoldAddPacket\022\014\n\004gold\030\001 \001(\004\""
  "(\n\031CGMessengerAddByVIDPacket\022\013\n\003vid\030\001 \001("
  "\r\"*\n\032CGMessengerAddByNamePacket\022\014\n\004name\030"
  "\001 \001(\014\"\'\n\027CGMessengerRemovePacket\022\014\n\004name"
  "\030\001 \001(\014\"-\n\036CGMessengerAddBlockByVIDPacket"
  "\022\013\n\003vid\030\001 \001(\r\"/\n\037CGMessengerAddBlockByNa"
  "mePacket\022\014\n\004name\030\001 \001(\014\",\n\034CGMessengerRem"
  "oveBlockPacket\022\014\n\004name\030\001 \001(\014\"\"\n\023CGPartyI"
  "nvitePacket\022\013\n\003vid\030\001 \001(\r\"\?\n\031CGPartyInvit"
  "eAnswerPacket\022\022\n\nleader_vid\030\001 \001(\r\022\016\n\006acc"
  "ept\030\002 \001(\010\"\"\n\023CGPartyRemovePacket\022\013\n\003pid\030"
  "\001 \001(\r\"@\n\025CGPartySetStatePacket\022\013\n\003pid\030\001 "
  "\001(\r\022\014\n\004role\030\002 \001(\r\022\014\n\004flag\030\003 \001(\010\"9\n\025CGPar"
  "tyUseSkillPacket\022\023\n\013skill_index\030\001 \001(\r\022\013\n"
  "\003vid\030\002 \001(\r\"1\n\026CGPartyParameterPacket\022\027\n\017"
  "distribute_mode\030\001 \001(\r\")\n\031CGGuildDepositM"
  "oneyPacket\022\014\n\004gold\030\001 \001(\r\"*\n\032CGGuildWithd"
  "rawMoneyPacket\022\014\n\004gold\030\001 \001(\r\"%\n\026CGGuildA"
  "ddMemberPacket\022\013\n\003vid\030\001 \001(\r\"(\n\031CGGuildRe"
  "moveMemberPacket\022\013\n\003pid\030\001 \001(\r\"@\n\034CGGuild"
  "ChangeGradeNamePacket\022\r\n\005grade\030\001 \001(\r\022\021\n\t"
  "gradename\030\002 \001(\014\"E\n!CGGuildChangeGradeAut"
  "horityPacket\022\r\n\005grade\030\001 \001(\r\022\021\n\tauthority"
  "\030\002 \001(\r\"$\n\025CGGuildOfferExpPacket\022\013\n\003exp\030\001"
  " \001(\r\"(\n\026CGGuildChargeGSPPacket\022\016\n\006amount"
  "\030\001 \001(\r\"+\n\030CGGuildPostCommentPacket\022\017\n\007me"
  "ssage\030\001 \001(\014\"0\n\032CGGuildDeleteCommentPacke"
  "t\022\022\n\ncomment_id\030\001 \001(\r\"<\n\036CGGuildChangeMe"
  "mberGradePacket\022\013\n\003pid\030\001 \001(\r\022\r\n\005grade\030\002 "
  "\001(\r\"2\n\025CGGuildUseSkillPacket\022\014\n\004vnum\030\001 \001"
  "(\r\022\013\n\003pid\030\002 \001(\r\"C\n CGGuildChangeMemberGe"
  "neralPacket\022\013\n\003pid\030\001 \001(\r\022\022\n\nis_general\030\002"
  " \001(\010\"=\n\031CGGuildInviteAnswerPacket\022\020\n\010gui"
  "ld_id\030\001 \001(\r\022\016\n\006accept\030\002 \001(\010\"-\n\027CGGuildAn"
  "swerMakePacket\022\022\n\nguild_name\030\001 \001(\014\"R\n\030CG"
  "GuildRequestListPacket\022\023\n\013page_number\030\001 "
  "\001(\r\022\021\n\tpage_type\030\002 \001(\r\022\016\n\006empire\030\003 \001(\r\"M"
  "\n\023CGGuildSearchPacket\022\023\n\013search_name\030\001 \001"
  "(\014\022\021\n\tpage_type\030\002 \001(\r\022\016\n\006empire\030\003 \001(\r\"W\n"
  "\033CGGuildSafeboxCheckinPacket\022#\n\010item_pos"
  "\030\001 \001(\0132\021.network.TItemPos\022\023\n\013safebox_pos"
  "\030\002 \001(\r\"X\n\034CGGuildSafeboxCheckoutPacket\022\023"
  "\n\013safebox_pos\030\001 \001(\r\022#\n\010item_pos\030\002 \001(\0132\021."
  "network.TItemPos\"U\n\034CGGuildSafeboxItemMo"
  "vePacket\022\022\n\nsource_pos\030\001 \001(\r\022\022\n\ntarget_p"
  "os\030\002 \001(\r\022\r\n\005count\030\003 \001(\r\",\n\034CGGuildSafebo"
  "xGiveGoldPacket\022\014\n\004gold\030\001 \001(\004\"+\n\033CGGuild"
  "SafeboxGetGoldPacket\022\014\n\004gold\030\001 \001(\004\"J\n\021CG"
  "PetUseEggPacket\022#\n\010egg_cell\030\001 \001(\0132\021.netw"
  "ork.TItemPos\022\020\n\010pet_name\030\002 \001(\t\"S\n\025CGPetR"
  "esetSkillPacket\022%\n\nreset_cell\030\001 \001(\0132\021.ne"
  "twork.TItemPos\022\023\n\013skill_index\030\002 \001(\r\"*\n\031C"
  "GPetAttrRefineInfoPacket\022\r\n\005index\030\001 \001(\r\""
  "&\n\025CGPetAttrRefinePacket\022\r\n\005index\030\001 \001(\rb"
  "\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_cg_5fpackets_2eproto_deps[3] = {
  &::descriptor_table_data_2eproto,
  &::descriptor_table_data_5fitem_2eproto,
  &::descriptor_table_data_5fplayer_2eproto,
};
static ::_pbi::once_flag descriptor_table_cg_5fpackets_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_cg_5fpackets_2eproto = {
    false, false, 8527, descriptor_table_protodef_cg_5fpackets_2eproto,
    "cg_packets.proto",
    &descriptor_table_cg_5fpackets_2eproto_once, descriptor_table_cg_5fpackets_2eproto_deps, 3, 132,
    schemas, file_default_instances, TableStruct_cg_5fpackets_2eproto::offsets,
    file_level_metadata_cg_5fpackets_2eproto, file_level_enum_descriptors_cg_5fpackets_2eproto,
    file_level_service_descriptors_cg_5fpackets_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cg_5fpackets_2eproto_getter() {
  return &descriptor_table_cg_5fpackets_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_cg_5fpackets_2eproto(&descriptor_table_cg_5fpackets_2eproto);
namespace network {

// ===================================================================

class CGHandshakePacket::_Internal {
 public:
};

CGHandshakePacket::CGHandshakePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGHandshakePacket)
}
CGHandshakePacket::CGHandshakePacket(const CGHandshakePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGHandshakePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.crypt_data_){}
    , decltype(_impl_.handshake_){}
    , decltype(_impl_.time_){}
    , decltype(_impl_.delta_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.crypt_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.crypt_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_crypt_data().empty()) {
    _this->_impl_.crypt_data_.Set(from._internal_crypt_data(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.handshake_, &from._impl_.handshake_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.delta_) -
    reinterpret_cast<char*>(&_impl_.handshake_)) + sizeof(_impl_.delta_));
  // @@protoc_insertion_point(copy_constructor:network.CGHandshakePacket)
}

inline void CGHandshakePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.crypt_data_){}
    , decltype(_impl_.handshake_){0u}
    , decltype(_impl_.time_){0u}
    , decltype(_impl_.delta_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.crypt_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.crypt_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CGHandshakePacket::~CGHandshakePacket() {
  // @@protoc_insertion_point(destructor:network.CGHandshakePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGHandshakePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.crypt_data_.Destroy();
}

void CGHandshakePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGHandshakePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGHandshakePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.crypt_data_.ClearToEmpty();
  ::memset(&_impl_.handshake_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.delta_) -
      reinterpret_cast<char*>(&_impl_.handshake_)) + sizeof(_impl_.delta_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGHandshakePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 handshake = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.handshake_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 delta = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.delta_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes crypt_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_crypt_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGHandshakePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGHandshakePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 handshake = 1;
  if (this->_internal_handshake() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_handshake(), target);
  }

  // uint32 time = 2;
  if (this->_internal_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_time(), target);
  }

  // sint32 delta = 3;
  if (this->_internal_delta() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(3, this->_internal_delta(), target);
  }

  // bytes crypt_data = 4;
  if (!this->_internal_crypt_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_crypt_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGHandshakePacket)
  return target;
}

size_t CGHandshakePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGHandshakePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes crypt_data = 4;
  if (!this->_internal_crypt_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_crypt_data());
  }

  // uint32 handshake = 1;
  if (this->_internal_handshake() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_handshake());
  }

  // uint32 time = 2;
  if (this->_internal_time() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_time());
  }

  // sint32 delta = 3;
  if (this->_internal_delta() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_delta());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGHandshakePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGHandshakePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGHandshakePacket::GetClassData() const { return &_class_data_; }


void CGHandshakePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGHandshakePacket*>(&to_msg);
  auto& from = static_cast<const CGHandshakePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGHandshakePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_crypt_data().empty()) {
    _this->_internal_set_crypt_data(from._internal_crypt_data());
  }
  if (from._internal_handshake() != 0) {
    _this->_internal_set_handshake(from._internal_handshake());
  }
  if (from._internal_time() != 0) {
    _this->_internal_set_time(from._internal_time());
  }
  if (from._internal_delta() != 0) {
    _this->_internal_set_delta(from._internal_delta());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGHandshakePacket::CopyFrom(const CGHandshakePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGHandshakePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGHandshakePacket::IsInitialized() const {
  return true;
}

void CGHandshakePacket::InternalSwap(CGHandshakePacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.crypt_data_, lhs_arena,
      &other->_impl_.crypt_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGHandshakePacket, _impl_.delta_)
      + sizeof(CGHandshakePacket::_impl_.delta_)
      - PROTOBUF_FIELD_OFFSET(CGHandshakePacket, _impl_.handshake_)>(
          reinterpret_cast<char*>(&_impl_.handshake_),
          reinterpret_cast<char*>(&other->_impl_.handshake_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGHandshakePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[0]);
}

// ===================================================================

class CGKeyAgreementPacket::_Internal {
 public:
};

CGKeyAgreementPacket::CGKeyAgreementPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGKeyAgreementPacket)
}
CGKeyAgreementPacket::CGKeyAgreementPacket(const CGKeyAgreementPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGKeyAgreementPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.header_){}
    , decltype(_impl_.agreed_length_){}
    , decltype(_impl_.data_length_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.header_, &from._impl_.header_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.data_length_) -
    reinterpret_cast<char*>(&_impl_.header_)) + sizeof(_impl_.data_length_));
  // @@protoc_insertion_point(copy_constructor:network.CGKeyAgreementPacket)
}

inline void CGKeyAgreementPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.header_){0u}
    , decltype(_impl_.agreed_length_){0u}
    , decltype(_impl_.data_length_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CGKeyAgreementPacket::~CGKeyAgreementPacket() {
  // @@protoc_insertion_point(destructor:network.CGKeyAgreementPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGKeyAgreementPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.Destroy();
}

void CGKeyAgreementPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGKeyAgreementPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGKeyAgreementPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.ClearToEmpty();
  ::memset(&_impl_.header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.data_length_) -
      reinterpret_cast<char*>(&_impl_.header_)) + sizeof(_impl_.data_length_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGKeyAgreementPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.header_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 agreed_length = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.agreed_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 data_length = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.data_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGKeyAgreementPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGKeyAgreementPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 header = 1;
  if (this->_internal_header() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_header(), target);
  }

  // uint32 agreed_length = 2;
  if (this->_internal_agreed_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_agreed_length(), target);
  }

  // uint32 data_length = 3;
  if (this->_internal_data_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_data_length(), target);
  }

  // bytes data = 4;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGKeyAgreementPacket)
  return target;
}

size_t CGKeyAgreementPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGKeyAgreementPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 4;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // uint32 header = 1;
  if (this->_internal_header() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_header());
  }

  // uint32 agreed_length = 2;
  if (this->_internal_agreed_length() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_agreed_length());
  }

  // uint32 data_length = 3;
  if (this->_internal_data_length() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_data_length());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGKeyAgreementPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGKeyAgreementPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGKeyAgreementPacket::GetClassData() const { return &_class_data_; }


void CGKeyAgreementPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGKeyAgreementPacket*>(&to_msg);
  auto& from = static_cast<const CGKeyAgreementPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGKeyAgreementPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (from._internal_header() != 0) {
    _this->_internal_set_header(from._internal_header());
  }
  if (from._internal_agreed_length() != 0) {
    _this->_internal_set_agreed_length(from._internal_agreed_length());
  }
  if (from._internal_data_length() != 0) {
    _this->_internal_set_data_length(from._internal_data_length());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGKeyAgreementPacket::CopyFrom(const CGKeyAgreementPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGKeyAgreementPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGKeyAgreementPacket::IsInitialized() const {
  return true;
}

void CGKeyAgreementPacket::InternalSwap(CGKeyAgreementPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGKeyAgreementPacket, _impl_.data_length_)
      + sizeof(CGKeyAgreementPacket::_impl_.data_length_)
      - PROTOBUF_FIELD_OFFSET(CGKeyAgreementPacket, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGKeyAgreementPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[1]);
}

// ===================================================================

class CGAuthLoginPacket::_Internal {
 public:
};

CGAuthLoginPacket::CGAuthLoginPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGAuthLoginPacket)
}
CGAuthLoginPacket::CGAuthLoginPacket(const CGAuthLoginPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGAuthLoginPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.client_keys_){from._impl_.client_keys_}
    , /*decltype(_impl_._client_keys_cached_byte_size_)*/{0}
    , decltype(_impl_.login_){}
    , decltype(_impl_.passwd_){}
    , decltype(_impl_.hwid_){}
    , decltype(_impl_.pc_name_){}
    , decltype(_impl_.user_name_){}
    , decltype(_impl_.pc_name_real_){}
    , decltype(_impl_.user_name_real_){}
    , decltype(_impl_.hash_){}
    , decltype(_impl_.version_){}
    , decltype(_impl_.language_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.login_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.login_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_login().empty()) {
    _this->_impl_.login_.Set(from._internal_login(), 
      _this->GetArenaForAllocation());
  }
  _impl_.passwd_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.passwd_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_passwd().empty()) {
    _this->_impl_.passwd_.Set(from._internal_passwd(), 
      _this->GetArenaForAllocation());
  }
  _impl_.hwid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hwid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hwid().empty()) {
    _this->_impl_.hwid_.Set(from._internal_hwid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.pc_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pc_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pc_name().empty()) {
    _this->_impl_.pc_name_.Set(from._internal_pc_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.user_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_name().empty()) {
    _this->_impl_.user_name_.Set(from._internal_user_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.pc_name_real_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pc_name_real_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pc_name_real().empty()) {
    _this->_impl_.pc_name_real_.Set(from._internal_pc_name_real(), 
      _this->GetArenaForAllocation());
  }
  _impl_.user_name_real_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_name_real_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_name_real().empty()) {
    _this->_impl_.user_name_real_.Set(from._internal_user_name_real(), 
      _this->GetArenaForAllocation());
  }
  _impl_.hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hash().empty()) {
    _this->_impl_.hash_.Set(from._internal_hash(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.version_, &from._impl_.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.language_) -
    reinterpret_cast<char*>(&_impl_.version_)) + sizeof(_impl_.language_));
  // @@protoc_insertion_point(copy_constructor:network.CGAuthLoginPacket)
}

inline void CGAuthLoginPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.client_keys_){arena}
    , /*decltype(_impl_._client_keys_cached_byte_size_)*/{0}
    , decltype(_impl_.login_){}
    , decltype(_impl_.passwd_){}
    , decltype(_impl_.hwid_){}
    , decltype(_impl_.pc_name_){}
    , decltype(_impl_.user_name_){}
    , decltype(_impl_.pc_name_real_){}
    , decltype(_impl_.user_name_real_){}
    , decltype(_impl_.hash_){}
    , decltype(_impl_.version_){0u}
    , decltype(_impl_.language_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.login_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.login_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.passwd_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.passwd_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.hwid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hwid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.pc_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pc_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.user_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.pc_name_real_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pc_name_real_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.user_name_real_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_name_real_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CGAuthLoginPacket::~CGAuthLoginPacket() {
  // @@protoc_insertion_point(destructor:network.CGAuthLoginPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGAuthLoginPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.client_keys_.~RepeatedField();
  _impl_.login_.Destroy();
  _impl_.passwd_.Destroy();
  _impl_.hwid_.Destroy();
  _impl_.pc_name_.Destroy();
  _impl_.user_name_.Destroy();
  _impl_.pc_name_real_.Destroy();
  _impl_.user_name_real_.Destroy();
  _impl_.hash_.Destroy();
}

void CGAuthLoginPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGAuthLoginPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGAuthLoginPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.client_keys_.Clear();
  _impl_.login_.ClearToEmpty();
  _impl_.passwd_.ClearToEmpty();
  _impl_.hwid_.ClearToEmpty();
  _impl_.pc_name_.ClearToEmpty();
  _impl_.user_name_.ClearToEmpty();
  _impl_.pc_name_real_.ClearToEmpty();
  _impl_.user_name_real_.ClearToEmpty();
  _impl_.hash_.ClearToEmpty();
  ::memset(&_impl_.version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.language_) -
      reinterpret_cast<char*>(&_impl_.version_)) + sizeof(_impl_.language_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGAuthLoginPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes login = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_login();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes passwd = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_passwd();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes hwid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_hwid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 client_keys = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_client_keys(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_client_keys(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 version = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 language = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.language_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes pc_name = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_pc_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes user_name = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_user_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes pc_name_real = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_pc_name_real();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes user_name_real = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_user_name_real();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes hash = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGAuthLoginPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGAuthLoginPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes login = 1;
  if (!this->_internal_login().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_login(), target);
  }

  // bytes passwd = 2;
  if (!this->_internal_passwd().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_passwd(), target);
  }

  // bytes hwid = 3;
  if (!this->_internal_hwid().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_hwid(), target);
  }

  // repeated uint32 client_keys = 4;
  {
    int byte_size = _impl_._client_keys_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          4, _internal_client_keys(), byte_size, target);
    }
  }

  // uint32 version = 5;
  if (this->_internal_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_version(), target);
  }

  // uint32 language = 6;
  if (this->_internal_language() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_language(), target);
  }

  // bytes pc_name = 7;
  if (!this->_internal_pc_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_pc_name(), target);
  }

  // bytes user_name = 8;
  if (!this->_internal_user_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_user_name(), target);
  }

  // bytes pc_name_real = 9;
  if (!this->_internal_pc_name_real().empty()) {
    target = stream->WriteBytesMaybeAliased(
        9, this->_internal_pc_name_real(), target);
  }

  // bytes user_name_real = 10;
  if (!this->_internal_user_name_real().empty()) {
    target = stream->WriteBytesMaybeAliased(
        10, this->_internal_user_name_real(), target);
  }

  // bytes hash = 11;
  if (!this->_internal_hash().empty()) {
    target = stream->WriteBytesMaybeAliased(
        11, this->_internal_hash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGAuthLoginPacket)
  return target;
}

size_t CGAuthLoginPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGAuthLoginPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 client_keys = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.client_keys_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._client_keys_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // bytes login = 1;
  if (!this->_internal_login().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_login());
  }

  // bytes passwd = 2;
  if (!this->_internal_passwd().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_passwd());
  }

  // bytes hwid = 3;
  if (!this->_internal_hwid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_hwid());
  }

  // bytes pc_name = 7;
  if (!this->_internal_pc_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_pc_name());
  }

  // bytes user_name = 8;
  if (!this->_internal_user_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_user_name());
  }

  // bytes pc_name_real = 9;
  if (!this->_internal_pc_name_real().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_pc_name_real());
  }

  // bytes user_name_real = 10;
  if (!this->_internal_user_name_real().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_user_name_real());
  }

  // bytes hash = 11;
  if (!this->_internal_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_hash());
  }

  // uint32 version = 5;
  if (this->_internal_version() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_version());
  }

  // uint32 language = 6;
  if (this->_internal_language() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_language());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGAuthLoginPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGAuthLoginPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGAuthLoginPacket::GetClassData() const { return &_class_data_; }


void CGAuthLoginPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGAuthLoginPacket*>(&to_msg);
  auto& from = static_cast<const CGAuthLoginPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGAuthLoginPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.client_keys_.MergeFrom(from._impl_.client_keys_);
  if (!from._internal_login().empty()) {
    _this->_internal_set_login(from._internal_login());
  }
  if (!from._internal_passwd().empty()) {
    _this->_internal_set_passwd(from._internal_passwd());
  }
  if (!from._internal_hwid().empty()) {
    _this->_internal_set_hwid(from._internal_hwid());
  }
  if (!from._internal_pc_name().empty()) {
    _this->_internal_set_pc_name(from._internal_pc_name());
  }
  if (!from._internal_user_name().empty()) {
    _this->_internal_set_user_name(from._internal_user_name());
  }
  if (!from._internal_pc_name_real().empty()) {
    _this->_internal_set_pc_name_real(from._internal_pc_name_real());
  }
  if (!from._internal_user_name_real().empty()) {
    _this->_internal_set_user_name_real(from._internal_user_name_real());
  }
  if (!from._internal_hash().empty()) {
    _this->_internal_set_hash(from._internal_hash());
  }
  if (from._internal_version() != 0) {
    _this->_internal_set_version(from._internal_version());
  }
  if (from._internal_language() != 0) {
    _this->_internal_set_language(from._internal_language());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGAuthLoginPacket::CopyFrom(const CGAuthLoginPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGAuthLoginPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGAuthLoginPacket::IsInitialized() const {
  return true;
}

void CGAuthLoginPacket::InternalSwap(CGAuthLoginPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.client_keys_.InternalSwap(&other->_impl_.client_keys_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.login_, lhs_arena,
      &other->_impl_.login_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.passwd_, lhs_arena,
      &other->_impl_.passwd_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.hwid_, lhs_arena,
      &other->_impl_.hwid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pc_name_, lhs_arena,
      &other->_impl_.pc_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_name_, lhs_arena,
      &other->_impl_.user_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pc_name_real_, lhs_arena,
      &other->_impl_.pc_name_real_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_name_real_, lhs_arena,
      &other->_impl_.user_name_real_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.hash_, lhs_arena,
      &other->_impl_.hash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGAuthLoginPacket, _impl_.language_)
      + sizeof(CGAuthLoginPacket::_impl_.language_)
      - PROTOBUF_FIELD_OFFSET(CGAuthLoginPacket, _impl_.version_)>(
          reinterpret_cast<char*>(&_impl_.version_),
          reinterpret_cast<char*>(&other->_impl_.version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGAuthLoginPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[2]);
}

// ===================================================================

class CGAuthOpenIDLoginPacket::_Internal {
 public:
};

CGAuthOpenIDLoginPacket::CGAuthOpenIDLoginPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGAuthOpenIDLoginPacket)
}
CGAuthOpenIDLoginPacket::CGAuthOpenIDLoginPacket(const CGAuthOpenIDLoginPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGAuthOpenIDLoginPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.client_keys_){from._impl_.client_keys_}
    , /*decltype(_impl_._client_keys_cached_byte_size_)*/{0}
    , decltype(_impl_.auth_key_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.auth_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.auth_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_auth_key().empty()) {
    _this->_impl_.auth_key_.Set(from._internal_auth_key(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:network.CGAuthOpenIDLoginPacket)
}

inline void CGAuthOpenIDLoginPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.client_keys_){arena}
    , /*decltype(_impl_._client_keys_cached_byte_size_)*/{0}
    , decltype(_impl_.auth_key_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.auth_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.auth_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CGAuthOpenIDLoginPacket::~CGAuthOpenIDLoginPacket() {
  // @@protoc_insertion_point(destructor:network.CGAuthOpenIDLoginPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGAuthOpenIDLoginPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.client_keys_.~RepeatedField();
  _impl_.auth_key_.Destroy();
}

void CGAuthOpenIDLoginPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGAuthOpenIDLoginPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGAuthOpenIDLoginPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.client_keys_.Clear();
  _impl_.auth_key_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGAuthOpenIDLoginPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes auth_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_auth_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 client_keys = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_client_keys(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_client_keys(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGAuthOpenIDLoginPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGAuthOpenIDLoginPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes auth_key = 1;
  if (!this->_internal_auth_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_auth_key(), target);
  }

  // repeated uint32 client_keys = 2;
  {
    int byte_size = _impl_._client_keys_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          2, _internal_client_keys(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGAuthOpenIDLoginPacket)
  return target;
}

size_t CGAuthOpenIDLoginPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGAuthOpenIDLoginPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 client_keys = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.client_keys_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._client_keys_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // bytes auth_key = 1;
  if (!this->_internal_auth_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_auth_key());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGAuthOpenIDLoginPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGAuthOpenIDLoginPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGAuthOpenIDLoginPacket::GetClassData() const { return &_class_data_; }


void CGAuthOpenIDLoginPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGAuthOpenIDLoginPacket*>(&to_msg);
  auto& from = static_cast<const CGAuthOpenIDLoginPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGAuthOpenIDLoginPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.client_keys_.MergeFrom(from._impl_.client_keys_);
  if (!from._internal_auth_key().empty()) {
    _this->_internal_set_auth_key(from._internal_auth_key());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGAuthOpenIDLoginPacket::CopyFrom(const CGAuthOpenIDLoginPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGAuthOpenIDLoginPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGAuthOpenIDLoginPacket::IsInitialized() const {
  return true;
}

void CGAuthOpenIDLoginPacket::InternalSwap(CGAuthOpenIDLoginPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.client_keys_.InternalSwap(&other->_impl_.client_keys_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.auth_key_, lhs_arena,
      &other->_impl_.auth_key_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CGAuthOpenIDLoginPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[3]);
}

// ===================================================================

class CGAuthPasspodAnswerPacket::_Internal {
 public:
};

CGAuthPasspodAnswerPacket::CGAuthPasspodAnswerPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGAuthPasspodAnswerPacket)
}
CGAuthPasspodAnswerPacket::CGAuthPasspodAnswerPacket(const CGAuthPasspodAnswerPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGAuthPasspodAnswerPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.answer_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.answer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.answer_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_answer().empty()) {
    _this->_impl_.answer_.Set(from._internal_answer(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:network.CGAuthPasspodAnswerPacket)
}

inline void CGAuthPasspodAnswerPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.answer_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.answer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.answer_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CGAuthPasspodAnswerPacket::~CGAuthPasspodAnswerPacket() {
  // @@protoc_insertion_point(destructor:network.CGAuthPasspodAnswerPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGAuthPasspodAnswerPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.answer_.Destroy();
}

void CGAuthPasspodAnswerPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGAuthPasspodAnswerPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGAuthPasspodAnswerPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.answer_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGAuthPasspodAnswerPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes answer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_answer();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGAuthPasspodAnswerPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGAuthPasspodAnswerPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes answer = 1;
  if (!this->_internal_answer().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_answer(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGAuthPasspodAnswerPacket)
  return target;
}

size_t CGAuthPasspodAnswerPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGAuthPasspodAnswerPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes answer = 1;
  if (!this->_internal_answer().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_answer());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGAuthPasspodAnswerPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGAuthPasspodAnswerPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGAuthPasspodAnswerPacket::GetClassData() const { return &_class_data_; }


void CGAuthPasspodAnswerPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGAuthPasspodAnswerPacket*>(&to_msg);
  auto& from = static_cast<const CGAuthPasspodAnswerPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGAuthPasspodAnswerPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_answer().empty()) {
    _this->_internal_set_answer(from._internal_answer());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGAuthPasspodAnswerPacket::CopyFrom(const CGAuthPasspodAnswerPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGAuthPasspodAnswerPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGAuthPasspodAnswerPacket::IsInitialized() const {
  return true;
}

void CGAuthPasspodAnswerPacket::InternalSwap(CGAuthPasspodAnswerPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.answer_, lhs_arena,
      &other->_impl_.answer_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CGAuthPasspodAnswerPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[4]);
}

// ===================================================================

class CGLoginByKeyPacket::_Internal {
 public:
};

CGLoginByKeyPacket::CGLoginByKeyPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGLoginByKeyPacket)
}
CGLoginByKeyPacket::CGLoginByKeyPacket(const CGLoginByKeyPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGLoginByKeyPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.client_key_){from._impl_.client_key_}
    , /*decltype(_impl_._client_key_cached_byte_size_)*/{0}
    , decltype(_impl_.login_){}
    , decltype(_impl_.login_key_){}
    , decltype(_impl_.locale_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.login_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.login_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_login().empty()) {
    _this->_impl_.login_.Set(from._internal_login(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.login_key_, &from._impl_.login_key_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.locale_) -
    reinterpret_cast<char*>(&_impl_.login_key_)) + sizeof(_impl_.locale_));
  // @@protoc_insertion_point(copy_constructor:network.CGLoginByKeyPacket)
}

inline void CGLoginByKeyPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.client_key_){arena}
    , /*decltype(_impl_._client_key_cached_byte_size_)*/{0}
    , decltype(_impl_.login_){}
    , decltype(_impl_.login_key_){0u}
    , decltype(_impl_.locale_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.login_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.login_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CGLoginByKeyPacket::~CGLoginByKeyPacket() {
  // @@protoc_insertion_point(destructor:network.CGLoginByKeyPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGLoginByKeyPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.client_key_.~RepeatedField();
  _impl_.login_.Destroy();
}

void CGLoginByKeyPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGLoginByKeyPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGLoginByKeyPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.client_key_.Clear();
  _impl_.login_.ClearToEmpty();
  ::memset(&_impl_.login_key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.locale_) -
      reinterpret_cast<char*>(&_impl_.login_key_)) + sizeof(_impl_.locale_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGLoginByKeyPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes login = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_login();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 login_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.login_key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 client_key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_client_key(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_client_key(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 locale = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.locale_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGLoginByKeyPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGLoginByKeyPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes login = 1;
  if (!this->_internal_login().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_login(), target);
  }

  // uint32 login_key = 2;
  if (this->_internal_login_key() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_login_key(), target);
  }

  // repeated uint32 client_key = 3;
  {
    int byte_size = _impl_._client_key_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          3, _internal_client_key(), byte_size, target);
    }
  }

  // uint32 locale = 4;
  if (this->_internal_locale() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_locale(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGLoginByKeyPacket)
  return target;
}

size_t CGLoginByKeyPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGLoginByKeyPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 client_key = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.client_key_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._client_key_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // bytes login = 1;
  if (!this->_internal_login().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_login());
  }

  // uint32 login_key = 2;
  if (this->_internal_login_key() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_login_key());
  }

  // uint32 locale = 4;
  if (this->_internal_locale() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_locale());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGLoginByKeyPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGLoginByKeyPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGLoginByKeyPacket::GetClassData() const { return &_class_data_; }


void CGLoginByKeyPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGLoginByKeyPacket*>(&to_msg);
  auto& from = static_cast<const CGLoginByKeyPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGLoginByKeyPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.client_key_.MergeFrom(from._impl_.client_key_);
  if (!from._internal_login().empty()) {
    _this->_internal_set_login(from._internal_login());
  }
  if (from._internal_login_key() != 0) {
    _this->_internal_set_login_key(from._internal_login_key());
  }
  if (from._internal_locale() != 0) {
    _this->_internal_set_locale(from._internal_locale());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGLoginByKeyPacket::CopyFrom(const CGLoginByKeyPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGLoginByKeyPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGLoginByKeyPacket::IsInitialized() const {
  return true;
}

void CGLoginByKeyPacket::InternalSwap(CGLoginByKeyPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.client_key_.InternalSwap(&other->_impl_.client_key_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.login_, lhs_arena,
      &other->_impl_.login_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGLoginByKeyPacket, _impl_.locale_)
      + sizeof(CGLoginByKeyPacket::_impl_.locale_)
      - PROTOBUF_FIELD_OFFSET(CGLoginByKeyPacket, _impl_.login_key_)>(
          reinterpret_cast<char*>(&_impl_.login_key_),
          reinterpret_cast<char*>(&other->_impl_.login_key_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGLoginByKeyPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[5]);
}

// ===================================================================

class CGEmpirePacket::_Internal {
 public:
};

CGEmpirePacket::CGEmpirePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGEmpirePacket)
}
CGEmpirePacket::CGEmpirePacket(const CGEmpirePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGEmpirePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.empire_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.empire_ = from._impl_.empire_;
  // @@protoc_insertion_point(copy_constructor:network.CGEmpirePacket)
}

inline void CGEmpirePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.empire_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CGEmpirePacket::~CGEmpirePacket() {
  // @@protoc_insertion_point(destructor:network.CGEmpirePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGEmpirePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CGEmpirePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGEmpirePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGEmpirePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.empire_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGEmpirePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 empire = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.empire_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGEmpirePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGEmpirePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 empire = 1;
  if (this->_internal_empire() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_empire(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGEmpirePacket)
  return target;
}

size_t CGEmpirePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGEmpirePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 empire = 1;
  if (this->_internal_empire() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_empire());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGEmpirePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGEmpirePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGEmpirePacket::GetClassData() const { return &_class_data_; }


void CGEmpirePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGEmpirePacket*>(&to_msg);
  auto& from = static_cast<const CGEmpirePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGEmpirePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_empire() != 0) {
    _this->_internal_set_empire(from._internal_empire());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGEmpirePacket::CopyFrom(const CGEmpirePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGEmpirePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGEmpirePacket::IsInitialized() const {
  return true;
}

void CGEmpirePacket::InternalSwap(CGEmpirePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.empire_, other->_impl_.empire_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGEmpirePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[6]);
}

// ===================================================================

class CGPlayerSelectPacket::_Internal {
 public:
};

CGPlayerSelectPacket::CGPlayerSelectPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGPlayerSelectPacket)
}
CGPlayerSelectPacket::CGPlayerSelectPacket(const CGPlayerSelectPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGPlayerSelectPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.index_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.index_ = from._impl_.index_;
  // @@protoc_insertion_point(copy_constructor:network.CGPlayerSelectPacket)
}

inline void CGPlayerSelectPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.index_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CGPlayerSelectPacket::~CGPlayerSelectPacket() {
  // @@protoc_insertion_point(destructor:network.CGPlayerSelectPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGPlayerSelectPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CGPlayerSelectPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGPlayerSelectPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGPlayerSelectPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.index_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGPlayerSelectPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGPlayerSelectPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGPlayerSelectPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 index = 1;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGPlayerSelectPacket)
  return target;
}

size_t CGPlayerSelectPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGPlayerSelectPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 index = 1;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGPlayerSelectPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGPlayerSelectPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGPlayerSelectPacket::GetClassData() const { return &_class_data_; }


void CGPlayerSelectPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGPlayerSelectPacket*>(&to_msg);
  auto& from = static_cast<const CGPlayerSelectPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGPlayerSelectPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGPlayerSelectPacket::CopyFrom(const CGPlayerSelectPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGPlayerSelectPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGPlayerSelectPacket::IsInitialized() const {
  return true;
}

void CGPlayerSelectPacket::InternalSwap(CGPlayerSelectPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.index_, other->_impl_.index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGPlayerSelectPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[7]);
}

// ===================================================================

class CGPlayerCreatePacket::_Internal {
 public:
};

CGPlayerCreatePacket::CGPlayerCreatePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGPlayerCreatePacket)
}
CGPlayerCreatePacket::CGPlayerCreatePacket(const CGPlayerCreatePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGPlayerCreatePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.index_){}
    , decltype(_impl_.job_){}
    , decltype(_impl_.shape_){}
    , decltype(_impl_.con_){}
    , decltype(_impl_.int__){}
    , decltype(_impl_.str_){}
    , decltype(_impl_.dex_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.index_, &from._impl_.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.dex_) -
    reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.dex_));
  // @@protoc_insertion_point(copy_constructor:network.CGPlayerCreatePacket)
}

inline void CGPlayerCreatePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.index_){0u}
    , decltype(_impl_.job_){0u}
    , decltype(_impl_.shape_){0u}
    , decltype(_impl_.con_){0u}
    , decltype(_impl_.int__){0u}
    , decltype(_impl_.str_){0u}
    , decltype(_impl_.dex_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CGPlayerCreatePacket::~CGPlayerCreatePacket() {
  // @@protoc_insertion_point(destructor:network.CGPlayerCreatePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGPlayerCreatePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void CGPlayerCreatePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGPlayerCreatePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGPlayerCreatePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  ::memset(&_impl_.index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.dex_) -
      reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.dex_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGPlayerCreatePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 job = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.job_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 shape = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.shape_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 con = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.con_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 int = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.int__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 str = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.str_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 dex = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.dex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGPlayerCreatePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGPlayerCreatePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 index = 1;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_index(), target);
  }

  // bytes name = 2;
  if (!this->_internal_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_name(), target);
  }

  // uint32 job = 3;
  if (this->_internal_job() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_job(), target);
  }

  // uint32 shape = 4;
  if (this->_internal_shape() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_shape(), target);
  }

  // uint32 con = 5;
  if (this->_internal_con() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_con(), target);
  }

  // uint32 int = 6;
  if (this->_internal_int_() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_int_(), target);
  }

  // uint32 str = 7;
  if (this->_internal_str() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_str(), target);
  }

  // uint32 dex = 8;
  if (this->_internal_dex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_dex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGPlayerCreatePacket)
  return target;
}

size_t CGPlayerCreatePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGPlayerCreatePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // uint32 index = 1;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_index());
  }

  // uint32 job = 3;
  if (this->_internal_job() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_job());
  }

  // uint32 shape = 4;
  if (this->_internal_shape() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_shape());
  }

  // uint32 con = 5;
  if (this->_internal_con() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_con());
  }

  // uint32 int = 6;
  if (this->_internal_int_() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_int_());
  }

  // uint32 str = 7;
  if (this->_internal_str() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_str());
  }

  // uint32 dex = 8;
  if (this->_internal_dex() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_dex());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGPlayerCreatePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGPlayerCreatePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGPlayerCreatePacket::GetClassData() const { return &_class_data_; }


void CGPlayerCreatePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGPlayerCreatePacket*>(&to_msg);
  auto& from = static_cast<const CGPlayerCreatePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGPlayerCreatePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  if (from._internal_job() != 0) {
    _this->_internal_set_job(from._internal_job());
  }
  if (from._internal_shape() != 0) {
    _this->_internal_set_shape(from._internal_shape());
  }
  if (from._internal_con() != 0) {
    _this->_internal_set_con(from._internal_con());
  }
  if (from._internal_int_() != 0) {
    _this->_internal_set_int_(from._internal_int_());
  }
  if (from._internal_str() != 0) {
    _this->_internal_set_str(from._internal_str());
  }
  if (from._internal_dex() != 0) {
    _this->_internal_set_dex(from._internal_dex());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGPlayerCreatePacket::CopyFrom(const CGPlayerCreatePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGPlayerCreatePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGPlayerCreatePacket::IsInitialized() const {
  return true;
}

void CGPlayerCreatePacket::InternalSwap(CGPlayerCreatePacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGPlayerCreatePacket, _impl_.dex_)
      + sizeof(CGPlayerCreatePacket::_impl_.dex_)
      - PROTOBUF_FIELD_OFFSET(CGPlayerCreatePacket, _impl_.index_)>(
          reinterpret_cast<char*>(&_impl_.index_),
          reinterpret_cast<char*>(&other->_impl_.index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGPlayerCreatePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[8]);
}

// ===================================================================

class CGPlayerChangeNamePacket::_Internal {
 public:
};

CGPlayerChangeNamePacket::CGPlayerChangeNamePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGPlayerChangeNamePacket)
}
CGPlayerChangeNamePacket::CGPlayerChangeNamePacket(const CGPlayerChangeNamePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGPlayerChangeNamePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.index_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.index_ = from._impl_.index_;
  // @@protoc_insertion_point(copy_constructor:network.CGPlayerChangeNamePacket)
}

inline void CGPlayerChangeNamePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.index_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CGPlayerChangeNamePacket::~CGPlayerChangeNamePacket() {
  // @@protoc_insertion_point(destructor:network.CGPlayerChangeNamePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGPlayerChangeNamePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void CGPlayerChangeNamePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGPlayerChangeNamePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGPlayerChangeNamePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.index_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGPlayerChangeNamePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGPlayerChangeNamePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGPlayerChangeNamePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 index = 1;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_index(), target);
  }

  // bytes name = 2;
  if (!this->_internal_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGPlayerChangeNamePacket)
  return target;
}

size_t CGPlayerChangeNamePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGPlayerChangeNamePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // uint32 index = 1;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGPlayerChangeNamePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGPlayerChangeNamePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGPlayerChangeNamePacket::GetClassData() const { return &_class_data_; }


void CGPlayerChangeNamePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGPlayerChangeNamePacket*>(&to_msg);
  auto& from = static_cast<const CGPlayerChangeNamePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGPlayerChangeNamePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGPlayerChangeNamePacket::CopyFrom(const CGPlayerChangeNamePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGPlayerChangeNamePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGPlayerChangeNamePacket::IsInitialized() const {
  return true;
}

void CGPlayerChangeNamePacket::InternalSwap(CGPlayerChangeNamePacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.index_, other->_impl_.index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGPlayerChangeNamePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[9]);
}

// ===================================================================

class CGPlayerHairSelectPacket::_Internal {
 public:
};

CGPlayerHairSelectPacket::CGPlayerHairSelectPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGPlayerHairSelectPacket)
}
CGPlayerHairSelectPacket::CGPlayerHairSelectPacket(const CGPlayerHairSelectPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGPlayerHairSelectPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.index_){}
    , decltype(_impl_.hair_vnum_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.index_, &from._impl_.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.hair_vnum_) -
    reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.hair_vnum_));
  // @@protoc_insertion_point(copy_constructor:network.CGPlayerHairSelectPacket)
}

inline void CGPlayerHairSelectPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.index_){0u}
    , decltype(_impl_.hair_vnum_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CGPlayerHairSelectPacket::~CGPlayerHairSelectPacket() {
  // @@protoc_insertion_point(destructor:network.CGPlayerHairSelectPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGPlayerHairSelectPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CGPlayerHairSelectPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGPlayerHairSelectPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGPlayerHairSelectPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.hair_vnum_) -
      reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.hair_vnum_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGPlayerHairSelectPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 hair_vnum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.hair_vnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGPlayerHairSelectPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGPlayerHairSelectPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 index = 1;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_index(), target);
  }

  // uint32 hair_vnum = 2;
  if (this->_internal_hair_vnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_hair_vnum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGPlayerHairSelectPacket)
  return target;
}

size_t CGPlayerHairSelectPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGPlayerHairSelectPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 index = 1;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_index());
  }

  // uint32 hair_vnum = 2;
  if (this->_internal_hair_vnum() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_hair_vnum());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGPlayerHairSelectPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGPlayerHairSelectPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGPlayerHairSelectPacket::GetClassData() const { return &_class_data_; }


void CGPlayerHairSelectPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGPlayerHairSelectPacket*>(&to_msg);
  auto& from = static_cast<const CGPlayerHairSelectPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGPlayerHairSelectPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  if (from._internal_hair_vnum() != 0) {
    _this->_internal_set_hair_vnum(from._internal_hair_vnum());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGPlayerHairSelectPacket::CopyFrom(const CGPlayerHairSelectPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGPlayerHairSelectPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGPlayerHairSelectPacket::IsInitialized() const {
  return true;
}

void CGPlayerHairSelectPacket::InternalSwap(CGPlayerHairSelectPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGPlayerHairSelectPacket, _impl_.hair_vnum_)
      + sizeof(CGPlayerHairSelectPacket::_impl_.hair_vnum_)
      - PROTOBUF_FIELD_OFFSET(CGPlayerHairSelectPacket, _impl_.index_)>(
          reinterpret_cast<char*>(&_impl_.index_),
          reinterpret_cast<char*>(&other->_impl_.index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGPlayerHairSelectPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[10]);
}

// ===================================================================

class CGPlayerDeletePacket::_Internal {
 public:
};

CGPlayerDeletePacket::CGPlayerDeletePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGPlayerDeletePacket)
}
CGPlayerDeletePacket::CGPlayerDeletePacket(const CGPlayerDeletePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGPlayerDeletePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.private_code_){}
    , decltype(_impl_.index_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.private_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.private_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_private_code().empty()) {
    _this->_impl_.private_code_.Set(from._internal_private_code(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.index_ = from._impl_.index_;
  // @@protoc_insertion_point(copy_constructor:network.CGPlayerDeletePacket)
}

inline void CGPlayerDeletePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.private_code_){}
    , decltype(_impl_.index_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.private_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.private_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CGPlayerDeletePacket::~CGPlayerDeletePacket() {
  // @@protoc_insertion_point(destructor:network.CGPlayerDeletePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGPlayerDeletePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.private_code_.Destroy();
}

void CGPlayerDeletePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGPlayerDeletePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGPlayerDeletePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.private_code_.ClearToEmpty();
  _impl_.index_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGPlayerDeletePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes private_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_private_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGPlayerDeletePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGPlayerDeletePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 index = 1;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_index(), target);
  }

  // bytes private_code = 2;
  if (!this->_internal_private_code().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_private_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGPlayerDeletePacket)
  return target;
}

size_t CGPlayerDeletePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGPlayerDeletePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes private_code = 2;
  if (!this->_internal_private_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_private_code());
  }

  // uint32 index = 1;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGPlayerDeletePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGPlayerDeletePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGPlayerDeletePacket::GetClassData() const { return &_class_data_; }


void CGPlayerDeletePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGPlayerDeletePacket*>(&to_msg);
  auto& from = static_cast<const CGPlayerDeletePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGPlayerDeletePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_private_code().empty()) {
    _this->_internal_set_private_code(from._internal_private_code());
  }
  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGPlayerDeletePacket::CopyFrom(const CGPlayerDeletePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGPlayerDeletePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGPlayerDeletePacket::IsInitialized() const {
  return true;
}

void CGPlayerDeletePacket::InternalSwap(CGPlayerDeletePacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.private_code_, lhs_arena,
      &other->_impl_.private_code_, rhs_arena
  );
  swap(_impl_.index_, other->_impl_.index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGPlayerDeletePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[11]);
}

// ===================================================================

class CGMarkCRCListPacket::_Internal {
 public:
};

CGMarkCRCListPacket::CGMarkCRCListPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGMarkCRCListPacket)
}
CGMarkCRCListPacket::CGMarkCRCListPacket(const CGMarkCRCListPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGMarkCRCListPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.crclist_){from._impl_.crclist_}
    , /*decltype(_impl_._crclist_cached_byte_size_)*/{0}
    , decltype(_impl_.image_index_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.image_index_ = from._impl_.image_index_;
  // @@protoc_insertion_point(copy_constructor:network.CGMarkCRCListPacket)
}

inline void CGMarkCRCListPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.crclist_){arena}
    , /*decltype(_impl_._crclist_cached_byte_size_)*/{0}
    , decltype(_impl_.image_index_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CGMarkCRCListPacket::~CGMarkCRCListPacket() {
  // @@protoc_insertion_point(destructor:network.CGMarkCRCListPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGMarkCRCListPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.crclist_.~RepeatedField();
}

void CGMarkCRCListPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGMarkCRCListPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGMarkCRCListPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.crclist_.Clear();
  _impl_.image_index_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGMarkCRCListPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 image_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.image_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 crclist = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_crclist(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_crclist(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGMarkCRCListPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGMarkCRCListPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 image_index = 1;
  if (this->_internal_image_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_image_index(), target);
  }

  // repeated uint32 crclist = 2;
  {
    int byte_size = _impl_._crclist_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          2, _internal_crclist(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGMarkCRCListPacket)
  return target;
}

size_t CGMarkCRCListPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGMarkCRCListPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 crclist = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.crclist_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._crclist_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint32 image_index = 1;
  if (this->_internal_image_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_image_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGMarkCRCListPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGMarkCRCListPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGMarkCRCListPacket::GetClassData() const { return &_class_data_; }


void CGMarkCRCListPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGMarkCRCListPacket*>(&to_msg);
  auto& from = static_cast<const CGMarkCRCListPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGMarkCRCListPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.crclist_.MergeFrom(from._impl_.crclist_);
  if (from._internal_image_index() != 0) {
    _this->_internal_set_image_index(from._internal_image_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGMarkCRCListPacket::CopyFrom(const CGMarkCRCListPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGMarkCRCListPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGMarkCRCListPacket::IsInitialized() const {
  return true;
}

void CGMarkCRCListPacket::InternalSwap(CGMarkCRCListPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.crclist_.InternalSwap(&other->_impl_.crclist_);
  swap(_impl_.image_index_, other->_impl_.image_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGMarkCRCListPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[12]);
}

// ===================================================================

class CGMarkUploadPacket::_Internal {
 public:
};

CGMarkUploadPacket::CGMarkUploadPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGMarkUploadPacket)
}
CGMarkUploadPacket::CGMarkUploadPacket(const CGMarkUploadPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGMarkUploadPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.image_){}
    , decltype(_impl_.guild_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.image_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.image_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_image().empty()) {
    _this->_impl_.image_.Set(from._internal_image(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.guild_id_ = from._impl_.guild_id_;
  // @@protoc_insertion_point(copy_constructor:network.CGMarkUploadPacket)
}

inline void CGMarkUploadPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.image_){}
    , decltype(_impl_.guild_id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.image_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.image_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CGMarkUploadPacket::~CGMarkUploadPacket() {
  // @@protoc_insertion_point(destructor:network.CGMarkUploadPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGMarkUploadPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.image_.Destroy();
}

void CGMarkUploadPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGMarkUploadPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGMarkUploadPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.image_.ClearToEmpty();
  _impl_.guild_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGMarkUploadPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 guild_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes image = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_image();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGMarkUploadPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGMarkUploadPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 guild_id = 1;
  if (this->_internal_guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_guild_id(), target);
  }

  // bytes image = 2;
  if (!this->_internal_image().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_image(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGMarkUploadPacket)
  return target;
}

size_t CGMarkUploadPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGMarkUploadPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes image = 2;
  if (!this->_internal_image().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_image());
  }

  // uint32 guild_id = 1;
  if (this->_internal_guild_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_guild_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGMarkUploadPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGMarkUploadPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGMarkUploadPacket::GetClassData() const { return &_class_data_; }


void CGMarkUploadPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGMarkUploadPacket*>(&to_msg);
  auto& from = static_cast<const CGMarkUploadPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGMarkUploadPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_image().empty()) {
    _this->_internal_set_image(from._internal_image());
  }
  if (from._internal_guild_id() != 0) {
    _this->_internal_set_guild_id(from._internal_guild_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGMarkUploadPacket::CopyFrom(const CGMarkUploadPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGMarkUploadPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGMarkUploadPacket::IsInitialized() const {
  return true;
}

void CGMarkUploadPacket::InternalSwap(CGMarkUploadPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.image_, lhs_arena,
      &other->_impl_.image_, rhs_arena
  );
  swap(_impl_.guild_id_, other->_impl_.guild_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGMarkUploadPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[13]);
}

// ===================================================================

class CGGuildSymbolUploadPacket::_Internal {
 public:
};

CGGuildSymbolUploadPacket::CGGuildSymbolUploadPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGGuildSymbolUploadPacket)
}
CGGuildSymbolUploadPacket::CGGuildSymbolUploadPacket(const CGGuildSymbolUploadPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGGuildSymbolUploadPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.image_){}
    , decltype(_impl_.guild_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.image_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.image_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_image().empty()) {
    _this->_impl_.image_.Set(from._internal_image(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.guild_id_ = from._impl_.guild_id_;
  // @@protoc_insertion_point(copy_constructor:network.CGGuildSymbolUploadPacket)
}

inline void CGGuildSymbolUploadPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.image_){}
    , decltype(_impl_.guild_id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.image_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.image_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CGGuildSymbolUploadPacket::~CGGuildSymbolUploadPacket() {
  // @@protoc_insertion_point(destructor:network.CGGuildSymbolUploadPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGGuildSymbolUploadPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.image_.Destroy();
}

void CGGuildSymbolUploadPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGGuildSymbolUploadPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGGuildSymbolUploadPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.image_.ClearToEmpty();
  _impl_.guild_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGGuildSymbolUploadPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 guild_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes image = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_image();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGGuildSymbolUploadPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGGuildSymbolUploadPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 guild_id = 1;
  if (this->_internal_guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_guild_id(), target);
  }

  // bytes image = 2;
  if (!this->_internal_image().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_image(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGGuildSymbolUploadPacket)
  return target;
}

size_t CGGuildSymbolUploadPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGGuildSymbolUploadPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes image = 2;
  if (!this->_internal_image().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_image());
  }

  // uint32 guild_id = 1;
  if (this->_internal_guild_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_guild_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGGuildSymbolUploadPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGGuildSymbolUploadPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGGuildSymbolUploadPacket::GetClassData() const { return &_class_data_; }


void CGGuildSymbolUploadPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGGuildSymbolUploadPacket*>(&to_msg);
  auto& from = static_cast<const CGGuildSymbolUploadPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGGuildSymbolUploadPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_image().empty()) {
    _this->_internal_set_image(from._internal_image());
  }
  if (from._internal_guild_id() != 0) {
    _this->_internal_set_guild_id(from._internal_guild_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGGuildSymbolUploadPacket::CopyFrom(const CGGuildSymbolUploadPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGGuildSymbolUploadPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGGuildSymbolUploadPacket::IsInitialized() const {
  return true;
}

void CGGuildSymbolUploadPacket::InternalSwap(CGGuildSymbolUploadPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.image_, lhs_arena,
      &other->_impl_.image_, rhs_arena
  );
  swap(_impl_.guild_id_, other->_impl_.guild_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGGuildSymbolUploadPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[14]);
}

// ===================================================================

class CGGuildSymbolCRCPacket::_Internal {
 public:
};

CGGuildSymbolCRCPacket::CGGuildSymbolCRCPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGGuildSymbolCRCPacket)
}
CGGuildSymbolCRCPacket::CGGuildSymbolCRCPacket(const CGGuildSymbolCRCPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGGuildSymbolCRCPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.guild_id_){}
    , decltype(_impl_.crc_){}
    , decltype(_impl_.symbol_size_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.guild_id_, &from._impl_.guild_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.symbol_size_) -
    reinterpret_cast<char*>(&_impl_.guild_id_)) + sizeof(_impl_.symbol_size_));
  // @@protoc_insertion_point(copy_constructor:network.CGGuildSymbolCRCPacket)
}

inline void CGGuildSymbolCRCPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.guild_id_){0u}
    , decltype(_impl_.crc_){0u}
    , decltype(_impl_.symbol_size_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CGGuildSymbolCRCPacket::~CGGuildSymbolCRCPacket() {
  // @@protoc_insertion_point(destructor:network.CGGuildSymbolCRCPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGGuildSymbolCRCPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CGGuildSymbolCRCPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGGuildSymbolCRCPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGGuildSymbolCRCPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.guild_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.symbol_size_) -
      reinterpret_cast<char*>(&_impl_.guild_id_)) + sizeof(_impl_.symbol_size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGGuildSymbolCRCPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 guild_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 crc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.crc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 symbol_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.symbol_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGGuildSymbolCRCPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGGuildSymbolCRCPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 guild_id = 1;
  if (this->_internal_guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_guild_id(), target);
  }

  // uint32 crc = 2;
  if (this->_internal_crc() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_crc(), target);
  }

  // uint32 symbol_size = 3;
  if (this->_internal_symbol_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_symbol_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGGuildSymbolCRCPacket)
  return target;
}

size_t CGGuildSymbolCRCPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGGuildSymbolCRCPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 guild_id = 1;
  if (this->_internal_guild_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_guild_id());
  }

  // uint32 crc = 2;
  if (this->_internal_crc() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_crc());
  }

  // uint32 symbol_size = 3;
  if (this->_internal_symbol_size() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_symbol_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGGuildSymbolCRCPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGGuildSymbolCRCPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGGuildSymbolCRCPacket::GetClassData() const { return &_class_data_; }


void CGGuildSymbolCRCPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGGuildSymbolCRCPacket*>(&to_msg);
  auto& from = static_cast<const CGGuildSymbolCRCPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGGuildSymbolCRCPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_guild_id() != 0) {
    _this->_internal_set_guild_id(from._internal_guild_id());
  }
  if (from._internal_crc() != 0) {
    _this->_internal_set_crc(from._internal_crc());
  }
  if (from._internal_symbol_size() != 0) {
    _this->_internal_set_symbol_size(from._internal_symbol_size());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGGuildSymbolCRCPacket::CopyFrom(const CGGuildSymbolCRCPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGGuildSymbolCRCPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGGuildSymbolCRCPacket::IsInitialized() const {
  return true;
}

void CGGuildSymbolCRCPacket::InternalSwap(CGGuildSymbolCRCPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGGuildSymbolCRCPacket, _impl_.symbol_size_)
      + sizeof(CGGuildSymbolCRCPacket::_impl_.symbol_size_)
      - PROTOBUF_FIELD_OFFSET(CGGuildSymbolCRCPacket, _impl_.guild_id_)>(
          reinterpret_cast<char*>(&_impl_.guild_id_),
          reinterpret_cast<char*>(&other->_impl_.guild_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGGuildSymbolCRCPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[15]);
}

// ===================================================================

class CGClientVersionPacket::_Internal {
 public:
};

CGClientVersionPacket::CGClientVersionPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGClientVersionPacket)
}
CGClientVersionPacket::CGClientVersionPacket(const CGClientVersionPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGClientVersionPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.filename_){}
    , decltype(_impl_.timestamp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.filename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_filename().empty()) {
    _this->_impl_.filename_.Set(from._internal_filename(), 
      _this->GetArenaForAllocation());
  }
  _impl_.timestamp_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.timestamp_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_timestamp().empty()) {
    _this->_impl_.timestamp_.Set(from._internal_timestamp(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:network.CGClientVersionPacket)
}

inline void CGClientVersionPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.filename_){}
    , decltype(_impl_.timestamp_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.filename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.timestamp_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.timestamp_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CGClientVersionPacket::~CGClientVersionPacket() {
  // @@protoc_insertion_point(destructor:network.CGClientVersionPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGClientVersionPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.filename_.Destroy();
  _impl_.timestamp_.Destroy();
}

void CGClientVersionPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGClientVersionPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGClientVersionPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.filename_.ClearToEmpty();
  _impl_.timestamp_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGClientVersionPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes filename = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_filename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_timestamp();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGClientVersionPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGClientVersionPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes filename = 1;
  if (!this->_internal_filename().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_filename(), target);
  }

  // bytes timestamp = 2;
  if (!this->_internal_timestamp().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGClientVersionPacket)
  return target;
}

size_t CGClientVersionPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGClientVersionPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes filename = 1;
  if (!this->_internal_filename().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_filename());
  }

  // bytes timestamp = 2;
  if (!this->_internal_timestamp().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGClientVersionPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGClientVersionPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGClientVersionPacket::GetClassData() const { return &_class_data_; }


void CGClientVersionPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGClientVersionPacket*>(&to_msg);
  auto& from = static_cast<const CGClientVersionPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGClientVersionPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_filename().empty()) {
    _this->_internal_set_filename(from._internal_filename());
  }
  if (!from._internal_timestamp().empty()) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGClientVersionPacket::CopyFrom(const CGClientVersionPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGClientVersionPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGClientVersionPacket::IsInitialized() const {
  return true;
}

void CGClientVersionPacket::InternalSwap(CGClientVersionPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.filename_, lhs_arena,
      &other->_impl_.filename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.timestamp_, lhs_arena,
      &other->_impl_.timestamp_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CGClientVersionPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[16]);
}

// ===================================================================

class CGLoginVersionCheckPacket::_Internal {
 public:
};

CGLoginVersionCheckPacket::CGLoginVersionCheckPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGLoginVersionCheckPacket)
}
CGLoginVersionCheckPacket::CGLoginVersionCheckPacket(const CGLoginVersionCheckPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGLoginVersionCheckPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.version_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    _this->_impl_.version_.Set(from._internal_version(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:network.CGLoginVersionCheckPacket)
}

inline void CGLoginVersionCheckPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.version_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CGLoginVersionCheckPacket::~CGLoginVersionCheckPacket() {
  // @@protoc_insertion_point(destructor:network.CGLoginVersionCheckPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGLoginVersionCheckPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.version_.Destroy();
}

void CGLoginVersionCheckPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGLoginVersionCheckPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGLoginVersionCheckPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.version_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGLoginVersionCheckPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGLoginVersionCheckPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGLoginVersionCheckPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes version = 1;
  if (!this->_internal_version().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGLoginVersionCheckPacket)
  return target;
}

size_t CGLoginVersionCheckPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGLoginVersionCheckPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes version = 1;
  if (!this->_internal_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGLoginVersionCheckPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGLoginVersionCheckPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGLoginVersionCheckPacket::GetClassData() const { return &_class_data_; }


void CGLoginVersionCheckPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGLoginVersionCheckPacket*>(&to_msg);
  auto& from = static_cast<const CGLoginVersionCheckPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGLoginVersionCheckPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_version().empty()) {
    _this->_internal_set_version(from._internal_version());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGLoginVersionCheckPacket::CopyFrom(const CGLoginVersionCheckPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGLoginVersionCheckPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGLoginVersionCheckPacket::IsInitialized() const {
  return true;
}

void CGLoginVersionCheckPacket::InternalSwap(CGLoginVersionCheckPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_, lhs_arena,
      &other->_impl_.version_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CGLoginVersionCheckPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[17]);
}

// ===================================================================

class CGXTRAPAckPacket::_Internal {
 public:
};

CGXTRAPAckPacket::CGXTRAPAckPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGXTRAPAckPacket)
}
CGXTRAPAckPacket::CGXTRAPAckPacket(const CGXTRAPAckPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGXTRAPAckPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.packet_data_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.packet_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.packet_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_packet_data().empty()) {
    _this->_impl_.packet_data_.Set(from._internal_packet_data(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:network.CGXTRAPAckPacket)
}

inline void CGXTRAPAckPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.packet_data_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.packet_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.packet_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CGXTRAPAckPacket::~CGXTRAPAckPacket() {
  // @@protoc_insertion_point(destructor:network.CGXTRAPAckPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGXTRAPAckPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.packet_data_.Destroy();
}

void CGXTRAPAckPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGXTRAPAckPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGXTRAPAckPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.packet_data_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGXTRAPAckPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes packet_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_packet_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGXTRAPAckPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGXTRAPAckPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes packet_data = 1;
  if (!this->_internal_packet_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_packet_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGXTRAPAckPacket)
  return target;
}

size_t CGXTRAPAckPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGXTRAPAckPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes packet_data = 1;
  if (!this->_internal_packet_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_packet_data());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGXTRAPAckPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGXTRAPAckPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGXTRAPAckPacket::GetClassData() const { return &_class_data_; }


void CGXTRAPAckPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGXTRAPAckPacket*>(&to_msg);
  auto& from = static_cast<const CGXTRAPAckPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGXTRAPAckPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_packet_data().empty()) {
    _this->_internal_set_packet_data(from._internal_packet_data());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGXTRAPAckPacket::CopyFrom(const CGXTRAPAckPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGXTRAPAckPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGXTRAPAckPacket::IsInitialized() const {
  return true;
}

void CGXTRAPAckPacket::InternalSwap(CGXTRAPAckPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.packet_data_, lhs_arena,
      &other->_impl_.packet_data_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CGXTRAPAckPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[18]);
}

// ===================================================================

class CGHackPacket::_Internal {
 public:
};

CGHackPacket::CGHackPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGHackPacket)
}
CGHackPacket::CGHackPacket(const CGHackPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGHackPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.buf_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.buf_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.buf_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_buf().empty()) {
    _this->_impl_.buf_.Set(from._internal_buf(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:network.CGHackPacket)
}

inline void CGHackPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.buf_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.buf_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.buf_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CGHackPacket::~CGHackPacket() {
  // @@protoc_insertion_point(destructor:network.CGHackPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGHackPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.buf_.Destroy();
}

void CGHackPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGHackPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGHackPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.buf_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGHackPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes buf = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_buf();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGHackPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGHackPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes buf = 1;
  if (!this->_internal_buf().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_buf(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGHackPacket)
  return target;
}

size_t CGHackPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGHackPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes buf = 1;
  if (!this->_internal_buf().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_buf());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGHackPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGHackPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGHackPacket::GetClassData() const { return &_class_data_; }


void CGHackPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGHackPacket*>(&to_msg);
  auto& from = static_cast<const CGHackPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGHackPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_buf().empty()) {
    _this->_internal_set_buf(from._internal_buf());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGHackPacket::CopyFrom(const CGHackPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGHackPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGHackPacket::IsInitialized() const {
  return true;
}

void CGHackPacket::InternalSwap(CGHackPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.buf_, lhs_arena,
      &other->_impl_.buf_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CGHackPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[19]);
}

// ===================================================================

class CGCostumeVisibilityPacket::_Internal {
 public:
};

CGCostumeVisibilityPacket::CGCostumeVisibilityPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGCostumeVisibilityPacket)
}
CGCostumeVisibilityPacket::CGCostumeVisibilityPacket(const CGCostumeVisibilityPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGCostumeVisibilityPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , decltype(_impl_.visible_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.visible_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.visible_));
  // @@protoc_insertion_point(copy_constructor:network.CGCostumeVisibilityPacket)
}

inline void CGCostumeVisibilityPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){0u}
    , decltype(_impl_.visible_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CGCostumeVisibilityPacket::~CGCostumeVisibilityPacket() {
  // @@protoc_insertion_point(destructor:network.CGCostumeVisibilityPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGCostumeVisibilityPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CGCostumeVisibilityPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGCostumeVisibilityPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGCostumeVisibilityPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.visible_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.visible_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGCostumeVisibilityPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool visible = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.visible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGCostumeVisibilityPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGCostumeVisibilityPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // bool visible = 2;
  if (this->_internal_visible() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_visible(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGCostumeVisibilityPacket)
  return target;
}

size_t CGCostumeVisibilityPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGCostumeVisibilityPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
  }

  // bool visible = 2;
  if (this->_internal_visible() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGCostumeVisibilityPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGCostumeVisibilityPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGCostumeVisibilityPacket::GetClassData() const { return &_class_data_; }


void CGCostumeVisibilityPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGCostumeVisibilityPacket*>(&to_msg);
  auto& from = static_cast<const CGCostumeVisibilityPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGCostumeVisibilityPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_visible() != 0) {
    _this->_internal_set_visible(from._internal_visible());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGCostumeVisibilityPacket::CopyFrom(const CGCostumeVisibilityPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGCostumeVisibilityPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCostumeVisibilityPacket::IsInitialized() const {
  return true;
}

void CGCostumeVisibilityPacket::InternalSwap(CGCostumeVisibilityPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGCostumeVisibilityPacket, _impl_.visible_)
      + sizeof(CGCostumeVisibilityPacket::_impl_.visible_)
      - PROTOBUF_FIELD_OFFSET(CGCostumeVisibilityPacket, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGCostumeVisibilityPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[20]);
}

// ===================================================================

class CGChatPacket::_Internal {
 public:
};

CGChatPacket::CGChatPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGChatPacket)
}
CGChatPacket::CGChatPacket(const CGChatPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGChatPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:network.CGChatPacket)
}

inline void CGChatPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.type_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CGChatPacket::~CGChatPacket() {
  // @@protoc_insertion_point(destructor:network.CGChatPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGChatPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
}

void CGChatPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGChatPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGChatPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  _impl_.type_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGChatPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGChatPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGChatPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // bytes message = 2;
  if (!this->_internal_message().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGChatPacket)
  return target;
}

size_t CGChatPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGChatPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_message());
  }

  // uint32 type = 1;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGChatPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGChatPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGChatPacket::GetClassData() const { return &_class_data_; }


void CGChatPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGChatPacket*>(&to_msg);
  auto& from = static_cast<const CGChatPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGChatPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGChatPacket::CopyFrom(const CGChatPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGChatPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGChatPacket::IsInitialized() const {
  return true;
}

void CGChatPacket::InternalSwap(CGChatPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  swap(_impl_.type_, other->_impl_.type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGChatPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[21]);
}

// ===================================================================

class CGAttackPacket::_Internal {
 public:
};

CGAttackPacket::CGAttackPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGAttackPacket)
}
CGAttackPacket::CGAttackPacket(const CGAttackPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGAttackPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , decltype(_impl_.vid_){}
    , decltype(_impl_.crc_magic_cube_proc_piece_){}
    , decltype(_impl_.crc_magic_cube_file_piece_){}
    , decltype(_impl_.random_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.random_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.random_));
  // @@protoc_insertion_point(copy_constructor:network.CGAttackPacket)
}

inline void CGAttackPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){0u}
    , decltype(_impl_.vid_){0u}
    , decltype(_impl_.crc_magic_cube_proc_piece_){0u}
    , decltype(_impl_.crc_magic_cube_file_piece_){0u}
    , decltype(_impl_.random_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CGAttackPacket::~CGAttackPacket() {
  // @@protoc_insertion_point(destructor:network.CGAttackPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGAttackPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CGAttackPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGAttackPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGAttackPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.random_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.random_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGAttackPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 vid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.vid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 crc_magic_cube_proc_piece = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.crc_magic_cube_proc_piece_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 crc_magic_cube_file_piece = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.crc_magic_cube_file_piece_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 random = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.random_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGAttackPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGAttackPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // uint32 vid = 2;
  if (this->_internal_vid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_vid(), target);
  }

  // uint32 crc_magic_cube_proc_piece = 3;
  if (this->_internal_crc_magic_cube_proc_piece() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_crc_magic_cube_proc_piece(), target);
  }

  // uint32 crc_magic_cube_file_piece = 4;
  if (this->_internal_crc_magic_cube_file_piece() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_crc_magic_cube_file_piece(), target);
  }

  // uint32 random = 5;
  if (this->_internal_random() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_random(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGAttackPacket)
  return target;
}

size_t CGAttackPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGAttackPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
  }

  // uint32 vid = 2;
  if (this->_internal_vid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_vid());
  }

  // uint32 crc_magic_cube_proc_piece = 3;
  if (this->_internal_crc_magic_cube_proc_piece() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_crc_magic_cube_proc_piece());
  }

  // uint32 crc_magic_cube_file_piece = 4;
  if (this->_internal_crc_magic_cube_file_piece() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_crc_magic_cube_file_piece());
  }

  // uint32 random = 5;
  if (this->_internal_random() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_random());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGAttackPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGAttackPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGAttackPacket::GetClassData() const { return &_class_data_; }


void CGAttackPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGAttackPacket*>(&to_msg);
  auto& from = static_cast<const CGAttackPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGAttackPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_vid() != 0) {
    _this->_internal_set_vid(from._internal_vid());
  }
  if (from._internal_crc_magic_cube_proc_piece() != 0) {
    _this->_internal_set_crc_magic_cube_proc_piece(from._internal_crc_magic_cube_proc_piece());
  }
  if (from._internal_crc_magic_cube_file_piece() != 0) {
    _this->_internal_set_crc_magic_cube_file_piece(from._internal_crc_magic_cube_file_piece());
  }
  if (from._internal_random() != 0) {
    _this->_internal_set_random(from._internal_random());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGAttackPacket::CopyFrom(const CGAttackPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGAttackPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGAttackPacket::IsInitialized() const {
  return true;
}

void CGAttackPacket::InternalSwap(CGAttackPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGAttackPacket, _impl_.random_)
      + sizeof(CGAttackPacket::_impl_.random_)
      - PROTOBUF_FIELD_OFFSET(CGAttackPacket, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGAttackPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[22]);
}

// ===================================================================

class CGShootPacket::_Internal {
 public:
};

CGShootPacket::CGShootPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGShootPacket)
}
CGShootPacket::CGShootPacket(const CGShootPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGShootPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:network.CGShootPacket)
}

inline void CGShootPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CGShootPacket::~CGShootPacket() {
  // @@protoc_insertion_point(destructor:network.CGShootPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGShootPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CGShootPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGShootPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGShootPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.type_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGShootPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGShootPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGShootPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGShootPacket)
  return target;
}

size_t CGShootPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGShootPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGShootPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGShootPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGShootPacket::GetClassData() const { return &_class_data_; }


void CGShootPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGShootPacket*>(&to_msg);
  auto& from = static_cast<const CGShootPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGShootPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGShootPacket::CopyFrom(const CGShootPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGShootPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGShootPacket::IsInitialized() const {
  return true;
}

void CGShootPacket::InternalSwap(CGShootPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.type_, other->_impl_.type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGShootPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[23]);
}

// ===================================================================

class CGWhisperPacket::_Internal {
 public:
};

CGWhisperPacket::CGWhisperPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGWhisperPacket)
}
CGWhisperPacket::CGWhisperPacket(const CGWhisperPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGWhisperPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_to_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.send_offline_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_to_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_to_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name_to().empty()) {
    _this->_impl_.name_to_.Set(from._internal_name_to(), 
      _this->GetArenaForAllocation());
  }
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.send_offline_ = from._impl_.send_offline_;
  // @@protoc_insertion_point(copy_constructor:network.CGWhisperPacket)
}

inline void CGWhisperPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_to_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.send_offline_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_to_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_to_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CGWhisperPacket::~CGWhisperPacket() {
  // @@protoc_insertion_point(destructor:network.CGWhisperPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGWhisperPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_to_.Destroy();
  _impl_.message_.Destroy();
}

void CGWhisperPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGWhisperPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGWhisperPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_to_.ClearToEmpty();
  _impl_.message_.ClearToEmpty();
  _impl_.send_offline_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGWhisperPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes name_to = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name_to();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool send_offline = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.send_offline_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGWhisperPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGWhisperPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes name_to = 1;
  if (!this->_internal_name_to().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_name_to(), target);
  }

  // bytes message = 2;
  if (!this->_internal_message().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_message(), target);
  }

  // bool send_offline = 3;
  if (this->_internal_send_offline() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_send_offline(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGWhisperPacket)
  return target;
}

size_t CGWhisperPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGWhisperPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name_to = 1;
  if (!this->_internal_name_to().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name_to());
  }

  // bytes message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_message());
  }

  // bool send_offline = 3;
  if (this->_internal_send_offline() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGWhisperPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGWhisperPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGWhisperPacket::GetClassData() const { return &_class_data_; }


void CGWhisperPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGWhisperPacket*>(&to_msg);
  auto& from = static_cast<const CGWhisperPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGWhisperPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name_to().empty()) {
    _this->_internal_set_name_to(from._internal_name_to());
  }
  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_send_offline() != 0) {
    _this->_internal_set_send_offline(from._internal_send_offline());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGWhisperPacket::CopyFrom(const CGWhisperPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGWhisperPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGWhisperPacket::IsInitialized() const {
  return true;
}

void CGWhisperPacket::InternalSwap(CGWhisperPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_to_, lhs_arena,
      &other->_impl_.name_to_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  swap(_impl_.send_offline_, other->_impl_.send_offline_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGWhisperPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[24]);
}

// ===================================================================

class CGOnClickPacket::_Internal {
 public:
};

CGOnClickPacket::CGOnClickPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGOnClickPacket)
}
CGOnClickPacket::CGOnClickPacket(const CGOnClickPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGOnClickPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.vid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.vid_ = from._impl_.vid_;
  // @@protoc_insertion_point(copy_constructor:network.CGOnClickPacket)
}

inline void CGOnClickPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.vid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CGOnClickPacket::~CGOnClickPacket() {
  // @@protoc_insertion_point(destructor:network.CGOnClickPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGOnClickPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CGOnClickPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGOnClickPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGOnClickPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.vid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGOnClickPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 vid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.vid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGOnClickPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGOnClickPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 vid = 1;
  if (this->_internal_vid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_vid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGOnClickPacket)
  return target;
}

size_t CGOnClickPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGOnClickPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 vid = 1;
  if (this->_internal_vid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_vid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGOnClickPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGOnClickPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGOnClickPacket::GetClassData() const { return &_class_data_; }


void CGOnClickPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGOnClickPacket*>(&to_msg);
  auto& from = static_cast<const CGOnClickPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGOnClickPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_vid() != 0) {
    _this->_internal_set_vid(from._internal_vid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGOnClickPacket::CopyFrom(const CGOnClickPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGOnClickPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGOnClickPacket::IsInitialized() const {
  return true;
}

void CGOnClickPacket::InternalSwap(CGOnClickPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.vid_, other->_impl_.vid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGOnClickPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[25]);
}

// ===================================================================

class CGPositionPacket::_Internal {
 public:
};

CGPositionPacket::CGPositionPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGPositionPacket)
}
CGPositionPacket::CGPositionPacket(const CGPositionPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGPositionPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.position_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.position_ = from._impl_.position_;
  // @@protoc_insertion_point(copy_constructor:network.CGPositionPacket)
}

inline void CGPositionPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.position_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CGPositionPacket::~CGPositionPacket() {
  // @@protoc_insertion_point(destructor:network.CGPositionPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGPositionPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CGPositionPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGPositionPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGPositionPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.position_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGPositionPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGPositionPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGPositionPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 position = 1;
  if (this->_internal_position() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_position(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGPositionPacket)
  return target;
}

size_t CGPositionPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGPositionPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 position = 1;
  if (this->_internal_position() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_position());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGPositionPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGPositionPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGPositionPacket::GetClassData() const { return &_class_data_; }


void CGPositionPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGPositionPacket*>(&to_msg);
  auto& from = static_cast<const CGPositionPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGPositionPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_position() != 0) {
    _this->_internal_set_position(from._internal_position());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGPositionPacket::CopyFrom(const CGPositionPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGPositionPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGPositionPacket::IsInitialized() const {
  return true;
}

void CGPositionPacket::InternalSwap(CGPositionPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.position_, other->_impl_.position_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGPositionPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[26]);
}

// ===================================================================

class CGNextSkillUsePacket::_Internal {
 public:
};

CGNextSkillUsePacket::CGNextSkillUsePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGNextSkillUsePacket)
}
CGNextSkillUsePacket::CGNextSkillUsePacket(const CGNextSkillUsePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGNextSkillUsePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.skill_vnum_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.skill_vnum_ = from._impl_.skill_vnum_;
  // @@protoc_insertion_point(copy_constructor:network.CGNextSkillUsePacket)
}

inline void CGNextSkillUsePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.skill_vnum_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CGNextSkillUsePacket::~CGNextSkillUsePacket() {
  // @@protoc_insertion_point(destructor:network.CGNextSkillUsePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGNextSkillUsePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CGNextSkillUsePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGNextSkillUsePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGNextSkillUsePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.skill_vnum_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGNextSkillUsePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 skill_vnum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.skill_vnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGNextSkillUsePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGNextSkillUsePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 skill_vnum = 1;
  if (this->_internal_skill_vnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_skill_vnum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGNextSkillUsePacket)
  return target;
}

size_t CGNextSkillUsePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGNextSkillUsePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 skill_vnum = 1;
  if (this->_internal_skill_vnum() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_skill_vnum());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGNextSkillUsePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGNextSkillUsePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGNextSkillUsePacket::GetClassData() const { return &_class_data_; }


void CGNextSkillUsePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGNextSkillUsePacket*>(&to_msg);
  auto& from = static_cast<const CGNextSkillUsePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGNextSkillUsePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_skill_vnum() != 0) {
    _this->_internal_set_skill_vnum(from._internal_skill_vnum());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGNextSkillUsePacket::CopyFrom(const CGNextSkillUsePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGNextSkillUsePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGNextSkillUsePacket::IsInitialized() const {
  return true;
}

void CGNextSkillUsePacket::InternalSwap(CGNextSkillUsePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.skill_vnum_, other->_impl_.skill_vnum_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGNextSkillUsePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[27]);
}

// ===================================================================

class CGMovePacket::_Internal {
 public:
};

CGMovePacket::CGMovePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGMovePacket)
}
CGMovePacket::CGMovePacket(const CGMovePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGMovePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.func_){}
    , decltype(_impl_.arg_){}
    , decltype(_impl_.rot_){}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.time_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.func_, &from._impl_.func_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.time_) -
    reinterpret_cast<char*>(&_impl_.func_)) + sizeof(_impl_.time_));
  // @@protoc_insertion_point(copy_constructor:network.CGMovePacket)
}

inline void CGMovePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.func_){0u}
    , decltype(_impl_.arg_){0u}
    , decltype(_impl_.rot_){0u}
    , decltype(_impl_.x_){0u}
    , decltype(_impl_.y_){0u}
    , decltype(_impl_.time_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CGMovePacket::~CGMovePacket() {
  // @@protoc_insertion_point(destructor:network.CGMovePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGMovePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CGMovePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGMovePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGMovePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.func_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.time_) -
      reinterpret_cast<char*>(&_impl_.func_)) + sizeof(_impl_.time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGMovePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 func = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.func_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 arg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.arg_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 rot = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.rot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 x = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 y = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGMovePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGMovePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 func = 1;
  if (this->_internal_func() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_func(), target);
  }

  // uint32 arg = 2;
  if (this->_internal_arg() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_arg(), target);
  }

  // uint32 rot = 3;
  if (this->_internal_rot() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_rot(), target);
  }

  // uint32 x = 4;
  if (this->_internal_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_x(), target);
  }

  // uint32 y = 5;
  if (this->_internal_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_y(), target);
  }

  // uint32 time = 6;
  if (this->_internal_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGMovePacket)
  return target;
}

size_t CGMovePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGMovePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 func = 1;
  if (this->_internal_func() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_func());
  }

  // uint32 arg = 2;
  if (this->_internal_arg() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_arg());
  }

  // uint32 rot = 3;
  if (this->_internal_rot() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rot());
  }

  // uint32 x = 4;
  if (this->_internal_x() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_x());
  }

  // uint32 y = 5;
  if (this->_internal_y() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_y());
  }

  // uint32 time = 6;
  if (this->_internal_time() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_time());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGMovePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGMovePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGMovePacket::GetClassData() const { return &_class_data_; }


void CGMovePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGMovePacket*>(&to_msg);
  auto& from = static_cast<const CGMovePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGMovePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_func() != 0) {
    _this->_internal_set_func(from._internal_func());
  }
  if (from._internal_arg() != 0) {
    _this->_internal_set_arg(from._internal_arg());
  }
  if (from._internal_rot() != 0) {
    _this->_internal_set_rot(from._internal_rot());
  }
  if (from._internal_x() != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  if (from._internal_y() != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  if (from._internal_time() != 0) {
    _this->_internal_set_time(from._internal_time());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGMovePacket::CopyFrom(const CGMovePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGMovePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGMovePacket::IsInitialized() const {
  return true;
}

void CGMovePacket::InternalSwap(CGMovePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGMovePacket, _impl_.time_)
      + sizeof(CGMovePacket::_impl_.time_)
      - PROTOBUF_FIELD_OFFSET(CGMovePacket, _impl_.func_)>(
          reinterpret_cast<char*>(&_impl_.func_),
          reinterpret_cast<char*>(&other->_impl_.func_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGMovePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[28]);
}

// ===================================================================

class CGSyncPositionPacket::_Internal {
 public:
};

void CGSyncPositionPacket::clear_elements() {
  _impl_.elements_.Clear();
}
CGSyncPositionPacket::CGSyncPositionPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGSyncPositionPacket)
}
CGSyncPositionPacket::CGSyncPositionPacket(const CGSyncPositionPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGSyncPositionPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.elements_){from._impl_.elements_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:network.CGSyncPositionPacket)
}

inline void CGSyncPositionPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.elements_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CGSyncPositionPacket::~CGSyncPositionPacket() {
  // @@protoc_insertion_point(destructor:network.CGSyncPositionPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGSyncPositionPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.elements_.~RepeatedPtrField();
}

void CGSyncPositionPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGSyncPositionPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGSyncPositionPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.elements_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGSyncPositionPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .network.SyncPositionElement elements = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_elements(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGSyncPositionPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGSyncPositionPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .network.SyncPositionElement elements = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_elements_size()); i < n; i++) {
    const auto& repfield = this->_internal_elements(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGSyncPositionPacket)
  return target;
}

size_t CGSyncPositionPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGSyncPositionPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .network.SyncPositionElement elements = 1;
  total_size += 1UL * this->_internal_elements_size();
  for (const auto& msg : this->_impl_.elements_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGSyncPositionPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGSyncPositionPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGSyncPositionPacket::GetClassData() const { return &_class_data_; }


void CGSyncPositionPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGSyncPositionPacket*>(&to_msg);
  auto& from = static_cast<const CGSyncPositionPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGSyncPositionPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.elements_.MergeFrom(from._impl_.elements_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGSyncPositionPacket::CopyFrom(const CGSyncPositionPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGSyncPositionPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGSyncPositionPacket::IsInitialized() const {
  return true;
}

void CGSyncPositionPacket::InternalSwap(CGSyncPositionPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.elements_.InternalSwap(&other->_impl_.elements_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGSyncPositionPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[29]);
}

// ===================================================================

class CGFlyTargetPacket::_Internal {
 public:
};

CGFlyTargetPacket::CGFlyTargetPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGFlyTargetPacket)
}
CGFlyTargetPacket::CGFlyTargetPacket(const CGFlyTargetPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGFlyTargetPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.target_vid_){}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.target_vid_, &from._impl_.target_vid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.y_) -
    reinterpret_cast<char*>(&_impl_.target_vid_)) + sizeof(_impl_.y_));
  // @@protoc_insertion_point(copy_constructor:network.CGFlyTargetPacket)
}

inline void CGFlyTargetPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.target_vid_){0u}
    , decltype(_impl_.x_){0u}
    , decltype(_impl_.y_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CGFlyTargetPacket::~CGFlyTargetPacket() {
  // @@protoc_insertion_point(destructor:network.CGFlyTargetPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGFlyTargetPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CGFlyTargetPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGFlyTargetPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGFlyTargetPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.target_vid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.y_) -
      reinterpret_cast<char*>(&_impl_.target_vid_)) + sizeof(_impl_.y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGFlyTargetPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 target_vid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.target_vid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGFlyTargetPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGFlyTargetPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 target_vid = 1;
  if (this->_internal_target_vid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_target_vid(), target);
  }

  // uint32 x = 2;
  if (this->_internal_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_x(), target);
  }

  // uint32 y = 3;
  if (this->_internal_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGFlyTargetPacket)
  return target;
}

size_t CGFlyTargetPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGFlyTargetPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 target_vid = 1;
  if (this->_internal_target_vid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_target_vid());
  }

  // uint32 x = 2;
  if (this->_internal_x() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_x());
  }

  // uint32 y = 3;
  if (this->_internal_y() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_y());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGFlyTargetPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGFlyTargetPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGFlyTargetPacket::GetClassData() const { return &_class_data_; }


void CGFlyTargetPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGFlyTargetPacket*>(&to_msg);
  auto& from = static_cast<const CGFlyTargetPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGFlyTargetPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_target_vid() != 0) {
    _this->_internal_set_target_vid(from._internal_target_vid());
  }
  if (from._internal_x() != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  if (from._internal_y() != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGFlyTargetPacket::CopyFrom(const CGFlyTargetPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGFlyTargetPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGFlyTargetPacket::IsInitialized() const {
  return true;
}

void CGFlyTargetPacket::InternalSwap(CGFlyTargetPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGFlyTargetPacket, _impl_.y_)
      + sizeof(CGFlyTargetPacket::_impl_.y_)
      - PROTOBUF_FIELD_OFFSET(CGFlyTargetPacket, _impl_.target_vid_)>(
          reinterpret_cast<char*>(&_impl_.target_vid_),
          reinterpret_cast<char*>(&other->_impl_.target_vid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGFlyTargetPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[30]);
}

// ===================================================================

class CGAddFlyTargetPacket::_Internal {
 public:
};

CGAddFlyTargetPacket::CGAddFlyTargetPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGAddFlyTargetPacket)
}
CGAddFlyTargetPacket::CGAddFlyTargetPacket(const CGAddFlyTargetPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGAddFlyTargetPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.target_vid_){}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.target_vid_, &from._impl_.target_vid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.y_) -
    reinterpret_cast<char*>(&_impl_.target_vid_)) + sizeof(_impl_.y_));
  // @@protoc_insertion_point(copy_constructor:network.CGAddFlyTargetPacket)
}

inline void CGAddFlyTargetPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.target_vid_){0u}
    , decltype(_impl_.x_){0u}
    , decltype(_impl_.y_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CGAddFlyTargetPacket::~CGAddFlyTargetPacket() {
  // @@protoc_insertion_point(destructor:network.CGAddFlyTargetPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGAddFlyTargetPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CGAddFlyTargetPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGAddFlyTargetPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGAddFlyTargetPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.target_vid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.y_) -
      reinterpret_cast<char*>(&_impl_.target_vid_)) + sizeof(_impl_.y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGAddFlyTargetPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 target_vid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.target_vid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGAddFlyTargetPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGAddFlyTargetPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 target_vid = 1;
  if (this->_internal_target_vid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_target_vid(), target);
  }

  // uint32 x = 2;
  if (this->_internal_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_x(), target);
  }

  // uint32 y = 3;
  if (this->_internal_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGAddFlyTargetPacket)
  return target;
}

size_t CGAddFlyTargetPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGAddFlyTargetPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 target_vid = 1;
  if (this->_internal_target_vid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_target_vid());
  }

  // uint32 x = 2;
  if (this->_internal_x() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_x());
  }

  // uint32 y = 3;
  if (this->_internal_y() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_y());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGAddFlyTargetPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGAddFlyTargetPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGAddFlyTargetPacket::GetClassData() const { return &_class_data_; }


void CGAddFlyTargetPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGAddFlyTargetPacket*>(&to_msg);
  auto& from = static_cast<const CGAddFlyTargetPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGAddFlyTargetPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_target_vid() != 0) {
    _this->_internal_set_target_vid(from._internal_target_vid());
  }
  if (from._internal_x() != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  if (from._internal_y() != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGAddFlyTargetPacket::CopyFrom(const CGAddFlyTargetPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGAddFlyTargetPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGAddFlyTargetPacket::IsInitialized() const {
  return true;
}

void CGAddFlyTargetPacket::InternalSwap(CGAddFlyTargetPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGAddFlyTargetPacket, _impl_.y_)
      + sizeof(CGAddFlyTargetPacket::_impl_.y_)
      - PROTOBUF_FIELD_OFFSET(CGAddFlyTargetPacket, _impl_.target_vid_)>(
          reinterpret_cast<char*>(&_impl_.target_vid_),
          reinterpret_cast<char*>(&other->_impl_.target_vid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGAddFlyTargetPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[31]);
}

// ===================================================================

class CGUseSkillPacket::_Internal {
 public:
};

CGUseSkillPacket::CGUseSkillPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGUseSkillPacket)
}
CGUseSkillPacket::CGUseSkillPacket(const CGUseSkillPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGUseSkillPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.vnum_){}
    , decltype(_impl_.vid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.vnum_, &from._impl_.vnum_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.vid_) -
    reinterpret_cast<char*>(&_impl_.vnum_)) + sizeof(_impl_.vid_));
  // @@protoc_insertion_point(copy_constructor:network.CGUseSkillPacket)
}

inline void CGUseSkillPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.vnum_){0u}
    , decltype(_impl_.vid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CGUseSkillPacket::~CGUseSkillPacket() {
  // @@protoc_insertion_point(destructor:network.CGUseSkillPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGUseSkillPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CGUseSkillPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGUseSkillPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGUseSkillPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.vnum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.vid_) -
      reinterpret_cast<char*>(&_impl_.vnum_)) + sizeof(_impl_.vid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGUseSkillPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 vnum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.vnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 vid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.vid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGUseSkillPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGUseSkillPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 vnum = 1;
  if (this->_internal_vnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_vnum(), target);
  }

  // uint32 vid = 2;
  if (this->_internal_vid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_vid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGUseSkillPacket)
  return target;
}

size_t CGUseSkillPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGUseSkillPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 vnum = 1;
  if (this->_internal_vnum() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_vnum());
  }

  // uint32 vid = 2;
  if (this->_internal_vid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_vid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGUseSkillPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGUseSkillPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGUseSkillPacket::GetClassData() const { return &_class_data_; }


void CGUseSkillPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGUseSkillPacket*>(&to_msg);
  auto& from = static_cast<const CGUseSkillPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGUseSkillPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_vnum() != 0) {
    _this->_internal_set_vnum(from._internal_vnum());
  }
  if (from._internal_vid() != 0) {
    _this->_internal_set_vid(from._internal_vid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGUseSkillPacket::CopyFrom(const CGUseSkillPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGUseSkillPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGUseSkillPacket::IsInitialized() const {
  return true;
}

void CGUseSkillPacket::InternalSwap(CGUseSkillPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGUseSkillPacket, _impl_.vid_)
      + sizeof(CGUseSkillPacket::_impl_.vid_)
      - PROTOBUF_FIELD_OFFSET(CGUseSkillPacket, _impl_.vnum_)>(
          reinterpret_cast<char*>(&_impl_.vnum_),
          reinterpret_cast<char*>(&other->_impl_.vnum_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGUseSkillPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[32]);
}

// ===================================================================

class CGTargetPacket::_Internal {
 public:
};

CGTargetPacket::CGTargetPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGTargetPacket)
}
CGTargetPacket::CGTargetPacket(const CGTargetPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGTargetPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.vid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.vid_ = from._impl_.vid_;
  // @@protoc_insertion_point(copy_constructor:network.CGTargetPacket)
}

inline void CGTargetPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.vid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CGTargetPacket::~CGTargetPacket() {
  // @@protoc_insertion_point(destructor:network.CGTargetPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGTargetPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CGTargetPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGTargetPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGTargetPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.vid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGTargetPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 vid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.vid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGTargetPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGTargetPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 vid = 1;
  if (this->_internal_vid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_vid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGTargetPacket)
  return target;
}

size_t CGTargetPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGTargetPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 vid = 1;
  if (this->_internal_vid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_vid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGTargetPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGTargetPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGTargetPacket::GetClassData() const { return &_class_data_; }


void CGTargetPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGTargetPacket*>(&to_msg);
  auto& from = static_cast<const CGTargetPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGTargetPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_vid() != 0) {
    _this->_internal_set_vid(from._internal_vid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGTargetPacket::CopyFrom(const CGTargetPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGTargetPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGTargetPacket::IsInitialized() const {
  return true;
}

void CGTargetPacket::InternalSwap(CGTargetPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.vid_, other->_impl_.vid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGTargetPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[33]);
}

// ===================================================================

class CGTargetMonsterDropInfoPacket::_Internal {
 public:
};

CGTargetMonsterDropInfoPacket::CGTargetMonsterDropInfoPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGTargetMonsterDropInfoPacket)
}
CGTargetMonsterDropInfoPacket::CGTargetMonsterDropInfoPacket(const CGTargetMonsterDropInfoPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGTargetMonsterDropInfoPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.race_num_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.race_num_ = from._impl_.race_num_;
  // @@protoc_insertion_point(copy_constructor:network.CGTargetMonsterDropInfoPacket)
}

inline void CGTargetMonsterDropInfoPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.race_num_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CGTargetMonsterDropInfoPacket::~CGTargetMonsterDropInfoPacket() {
  // @@protoc_insertion_point(destructor:network.CGTargetMonsterDropInfoPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGTargetMonsterDropInfoPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CGTargetMonsterDropInfoPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGTargetMonsterDropInfoPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGTargetMonsterDropInfoPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.race_num_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGTargetMonsterDropInfoPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 race_num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.race_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGTargetMonsterDropInfoPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGTargetMonsterDropInfoPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 race_num = 1;
  if (this->_internal_race_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_race_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGTargetMonsterDropInfoPacket)
  return target;
}

size_t CGTargetMonsterDropInfoPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGTargetMonsterDropInfoPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 race_num = 1;
  if (this->_internal_race_num() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_race_num());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGTargetMonsterDropInfoPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGTargetMonsterDropInfoPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGTargetMonsterDropInfoPacket::GetClassData() const { return &_class_data_; }


void CGTargetMonsterDropInfoPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGTargetMonsterDropInfoPacket*>(&to_msg);
  auto& from = static_cast<const CGTargetMonsterDropInfoPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGTargetMonsterDropInfoPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_race_num() != 0) {
    _this->_internal_set_race_num(from._internal_race_num());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGTargetMonsterDropInfoPacket::CopyFrom(const CGTargetMonsterDropInfoPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGTargetMonsterDropInfoPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGTargetMonsterDropInfoPacket::IsInitialized() const {
  return true;
}

void CGTargetMonsterDropInfoPacket::InternalSwap(CGTargetMonsterDropInfoPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.race_num_, other->_impl_.race_num_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGTargetMonsterDropInfoPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[34]);
}

// ===================================================================

class CGFishingPacket::_Internal {
 public:
};

CGFishingPacket::CGFishingPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGFishingPacket)
}
CGFishingPacket::CGFishingPacket(const CGFishingPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGFishingPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.dir_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.dir_ = from._impl_.dir_;
  // @@protoc_insertion_point(copy_constructor:network.CGFishingPacket)
}

inline void CGFishingPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.dir_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CGFishingPacket::~CGFishingPacket() {
  // @@protoc_insertion_point(destructor:network.CGFishingPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGFishingPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CGFishingPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGFishingPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGFishingPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.dir_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGFishingPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 dir = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.dir_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGFishingPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGFishingPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dir = 1;
  if (this->_internal_dir() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_dir(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGFishingPacket)
  return target;
}

size_t CGFishingPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGFishingPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 dir = 1;
  if (this->_internal_dir() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_dir());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGFishingPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGFishingPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGFishingPacket::GetClassData() const { return &_class_data_; }


void CGFishingPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGFishingPacket*>(&to_msg);
  auto& from = static_cast<const CGFishingPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGFishingPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_dir() != 0) {
    _this->_internal_set_dir(from._internal_dir());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGFishingPacket::CopyFrom(const CGFishingPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGFishingPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGFishingPacket::IsInitialized() const {
  return true;
}

void CGFishingPacket::InternalSwap(CGFishingPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.dir_, other->_impl_.dir_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGFishingPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[35]);
}

// ===================================================================

class CGGiveItemPacket::_Internal {
 public:
  static const ::network::TItemPos& cell(const CGGiveItemPacket* msg);
};

const ::network::TItemPos&
CGGiveItemPacket::_Internal::cell(const CGGiveItemPacket* msg) {
  return *msg->_impl_.cell_;
}
void CGGiveItemPacket::clear_cell() {
  if (GetArenaForAllocation() == nullptr && _impl_.cell_ != nullptr) {
    delete _impl_.cell_;
  }
  _impl_.cell_ = nullptr;
}
CGGiveItemPacket::CGGiveItemPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGGiveItemPacket)
}
CGGiveItemPacket::CGGiveItemPacket(const CGGiveItemPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGGiveItemPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.cell_){nullptr}
    , decltype(_impl_.target_vid_){}
    , decltype(_impl_.item_count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_cell()) {
    _this->_impl_.cell_ = new ::network::TItemPos(*from._impl_.cell_);
  }
  ::memcpy(&_impl_.target_vid_, &from._impl_.target_vid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.item_count_) -
    reinterpret_cast<char*>(&_impl_.target_vid_)) + sizeof(_impl_.item_count_));
  // @@protoc_insertion_point(copy_constructor:network.CGGiveItemPacket)
}

inline void CGGiveItemPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.cell_){nullptr}
    , decltype(_impl_.target_vid_){0u}
    , decltype(_impl_.item_count_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CGGiveItemPacket::~CGGiveItemPacket() {
  // @@protoc_insertion_point(destructor:network.CGGiveItemPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGGiveItemPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.cell_;
}

void CGGiveItemPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGGiveItemPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGGiveItemPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.cell_ != nullptr) {
    delete _impl_.cell_;
  }
  _impl_.cell_ = nullptr;
  ::memset(&_impl_.target_vid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.item_count_) -
      reinterpret_cast<char*>(&_impl_.target_vid_)) + sizeof(_impl_.item_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGGiveItemPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 target_vid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.target_vid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .network.TItemPos cell = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 item_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.item_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGGiveItemPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGGiveItemPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 target_vid = 1;
  if (this->_internal_target_vid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_target_vid(), target);
  }

  // .network.TItemPos cell = 2;
  if (this->_internal_has_cell()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::cell(this),
        _Internal::cell(this).GetCachedSize(), target, stream);
  }

  // uint32 item_count = 3;
  if (this->_internal_item_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_item_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGGiveItemPacket)
  return target;
}

size_t CGGiveItemPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGGiveItemPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .network.TItemPos cell = 2;
  if (this->_internal_has_cell()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cell_);
  }

  // uint32 target_vid = 1;
  if (this->_internal_target_vid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_target_vid());
  }

  // uint32 item_count = 3;
  if (this->_internal_item_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_item_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGGiveItemPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGGiveItemPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGGiveItemPacket::GetClassData() const { return &_class_data_; }


void CGGiveItemPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGGiveItemPacket*>(&to_msg);
  auto& from = static_cast<const CGGiveItemPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGGiveItemPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_cell()) {
    _this->_internal_mutable_cell()->::network::TItemPos::MergeFrom(
        from._internal_cell());
  }
  if (from._internal_target_vid() != 0) {
    _this->_internal_set_target_vid(from._internal_target_vid());
  }
  if (from._internal_item_count() != 0) {
    _this->_internal_set_item_count(from._internal_item_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGGiveItemPacket::CopyFrom(const CGGiveItemPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGGiveItemPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGGiveItemPacket::IsInitialized() const {
  return true;
}

void CGGiveItemPacket::InternalSwap(CGGiveItemPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGGiveItemPacket, _impl_.item_count_)
      + sizeof(CGGiveItemPacket::_impl_.item_count_)
      - PROTOBUF_FIELD_OFFSET(CGGiveItemPacket, _impl_.cell_)>(
          reinterpret_cast<char*>(&_impl_.cell_),
          reinterpret_cast<char*>(&other->_impl_.cell_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGGiveItemPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[36]);
}

// ===================================================================

class CGMyShopPacket::_Internal {
 public:
};

void CGMyShopPacket::clear_items() {
  _impl_.items_.Clear();
}
CGMyShopPacket::CGMyShopPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGMyShopPacket)
}
CGMyShopPacket::CGMyShopPacket(const CGMyShopPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGMyShopPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , decltype(_impl_.sign_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sign_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sign_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sign().empty()) {
    _this->_impl_.sign_.Set(from._internal_sign(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:network.CGMyShopPacket)
}

inline void CGMyShopPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , decltype(_impl_.sign_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.sign_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sign_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CGMyShopPacket::~CGMyShopPacket() {
  // @@protoc_insertion_point(destructor:network.CGMyShopPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGMyShopPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
  _impl_.sign_.Destroy();
}

void CGMyShopPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGMyShopPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGMyShopPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  _impl_.sign_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGMyShopPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes sign = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sign();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .network.TShopItemTable items = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGMyShopPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGMyShopPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes sign = 1;
  if (!this->_internal_sign().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_sign(), target);
  }

  // repeated .network.TShopItemTable items = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGMyShopPacket)
  return target;
}

size_t CGMyShopPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGMyShopPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .network.TShopItemTable items = 2;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes sign = 1;
  if (!this->_internal_sign().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sign());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGMyShopPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGMyShopPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGMyShopPacket::GetClassData() const { return &_class_data_; }


void CGMyShopPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGMyShopPacket*>(&to_msg);
  auto& from = static_cast<const CGMyShopPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGMyShopPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  if (!from._internal_sign().empty()) {
    _this->_internal_set_sign(from._internal_sign());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGMyShopPacket::CopyFrom(const CGMyShopPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGMyShopPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGMyShopPacket::IsInitialized() const {
  return true;
}

void CGMyShopPacket::InternalSwap(CGMyShopPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sign_, lhs_arena,
      &other->_impl_.sign_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CGMyShopPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[37]);
}

// ===================================================================

class CGRefinePacket::_Internal {
 public:
  static const ::network::TItemPos& cell(const CGRefinePacket* msg);
};

const ::network::TItemPos&
CGRefinePacket::_Internal::cell(const CGRefinePacket* msg) {
  return *msg->_impl_.cell_;
}
void CGRefinePacket::clear_cell() {
  if (GetArenaForAllocation() == nullptr && _impl_.cell_ != nullptr) {
    delete _impl_.cell_;
  }
  _impl_.cell_ = nullptr;
}
CGRefinePacket::CGRefinePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGRefinePacket)
}
CGRefinePacket::CGRefinePacket(const CGRefinePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGRefinePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.cell_){nullptr}
    , decltype(_impl_.type_){}
    , decltype(_impl_.fast_refine_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_cell()) {
    _this->_impl_.cell_ = new ::network::TItemPos(*from._impl_.cell_);
  }
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.fast_refine_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.fast_refine_));
  // @@protoc_insertion_point(copy_constructor:network.CGRefinePacket)
}

inline void CGRefinePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.cell_){nullptr}
    , decltype(_impl_.type_){0u}
    , decltype(_impl_.fast_refine_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CGRefinePacket::~CGRefinePacket() {
  // @@protoc_insertion_point(destructor:network.CGRefinePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGRefinePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.cell_;
}

void CGRefinePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGRefinePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGRefinePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.cell_ != nullptr) {
    delete _impl_.cell_;
  }
  _impl_.cell_ = nullptr;
  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.fast_refine_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.fast_refine_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGRefinePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .network.TItemPos cell = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool fast_refine = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.fast_refine_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGRefinePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGRefinePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .network.TItemPos cell = 1;
  if (this->_internal_has_cell()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::cell(this),
        _Internal::cell(this).GetCachedSize(), target, stream);
  }

  // uint32 type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_type(), target);
  }

  // bool fast_refine = 3;
  if (this->_internal_fast_refine() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_fast_refine(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGRefinePacket)
  return target;
}

size_t CGRefinePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGRefinePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .network.TItemPos cell = 1;
  if (this->_internal_has_cell()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cell_);
  }

  // uint32 type = 2;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
  }

  // bool fast_refine = 3;
  if (this->_internal_fast_refine() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGRefinePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGRefinePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGRefinePacket::GetClassData() const { return &_class_data_; }


void CGRefinePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGRefinePacket*>(&to_msg);
  auto& from = static_cast<const CGRefinePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGRefinePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_cell()) {
    _this->_internal_mutable_cell()->::network::TItemPos::MergeFrom(
        from._internal_cell());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_fast_refine() != 0) {
    _this->_internal_set_fast_refine(from._internal_fast_refine());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGRefinePacket::CopyFrom(const CGRefinePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGRefinePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGRefinePacket::IsInitialized() const {
  return true;
}

void CGRefinePacket::InternalSwap(CGRefinePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGRefinePacket, _impl_.fast_refine_)
      + sizeof(CGRefinePacket::_impl_.fast_refine_)
      - PROTOBUF_FIELD_OFFSET(CGRefinePacket, _impl_.cell_)>(
          reinterpret_cast<char*>(&_impl_.cell_),
          reinterpret_cast<char*>(&other->_impl_.cell_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGRefinePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[38]);
}

// ===================================================================

class CGPlayerLanguageInformationPacket::_Internal {
 public:
};

CGPlayerLanguageInformationPacket::CGPlayerLanguageInformationPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGPlayerLanguageInformationPacket)
}
CGPlayerLanguageInformationPacket::CGPlayerLanguageInformationPacket(const CGPlayerLanguageInformationPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGPlayerLanguageInformationPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.player_name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.player_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.player_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_player_name().empty()) {
    _this->_impl_.player_name_.Set(from._internal_player_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:network.CGPlayerLanguageInformationPacket)
}

inline void CGPlayerLanguageInformationPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.player_name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.player_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.player_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CGPlayerLanguageInformationPacket::~CGPlayerLanguageInformationPacket() {
  // @@protoc_insertion_point(destructor:network.CGPlayerLanguageInformationPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGPlayerLanguageInformationPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.player_name_.Destroy();
}

void CGPlayerLanguageInformationPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGPlayerLanguageInformationPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGPlayerLanguageInformationPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.player_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGPlayerLanguageInformationPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes player_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_player_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGPlayerLanguageInformationPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGPlayerLanguageInformationPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes player_name = 1;
  if (!this->_internal_player_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_player_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGPlayerLanguageInformationPacket)
  return target;
}

size_t CGPlayerLanguageInformationPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGPlayerLanguageInformationPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes player_name = 1;
  if (!this->_internal_player_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_player_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGPlayerLanguageInformationPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGPlayerLanguageInformationPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGPlayerLanguageInformationPacket::GetClassData() const { return &_class_data_; }


void CGPlayerLanguageInformationPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGPlayerLanguageInformationPacket*>(&to_msg);
  auto& from = static_cast<const CGPlayerLanguageInformationPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGPlayerLanguageInformationPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_player_name().empty()) {
    _this->_internal_set_player_name(from._internal_player_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGPlayerLanguageInformationPacket::CopyFrom(const CGPlayerLanguageInformationPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGPlayerLanguageInformationPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGPlayerLanguageInformationPacket::IsInitialized() const {
  return true;
}

void CGPlayerLanguageInformationPacket::InternalSwap(CGPlayerLanguageInformationPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.player_name_, lhs_arena,
      &other->_impl_.player_name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CGPlayerLanguageInformationPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[39]);
}

// ===================================================================

class CGReportPacket::_Internal {
 public:
};

CGReportPacket::CGReportPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGReportPacket)
}
CGReportPacket::CGReportPacket(const CGReportPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGReportPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.key_ = from._impl_.key_;
  // @@protoc_insertion_point(copy_constructor:network.CGReportPacket)
}

inline void CGReportPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CGReportPacket::~CGReportPacket() {
  // @@protoc_insertion_point(destructor:network.CGReportPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGReportPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CGReportPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGReportPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGReportPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.key_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGReportPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGReportPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGReportPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 key = 1;
  if (this->_internal_key() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGReportPacket)
  return target;
}

size_t CGReportPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGReportPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 key = 1;
  if (this->_internal_key() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_key());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGReportPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGReportPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGReportPacket::GetClassData() const { return &_class_data_; }


void CGReportPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGReportPacket*>(&to_msg);
  auto& from = static_cast<const CGReportPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGReportPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_key() != 0) {
    _this->_internal_set_key(from._internal_key());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGReportPacket::CopyFrom(const CGReportPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGReportPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGReportPacket::IsInitialized() const {
  return true;
}

void CGReportPacket::InternalSwap(CGReportPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.key_, other->_impl_.key_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGReportPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[40]);
}

// ===================================================================

class CGDragonSoulRefinePacket::_Internal {
 public:
};

void CGDragonSoulRefinePacket::clear_item_grid() {
  _impl_.item_grid_.Clear();
}
CGDragonSoulRefinePacket::CGDragonSoulRefinePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGDragonSoulRefinePacket)
}
CGDragonSoulRefinePacket::CGDragonSoulRefinePacket(const CGDragonSoulRefinePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGDragonSoulRefinePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.item_grid_){from._impl_.item_grid_}
    , decltype(_impl_.sub_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.sub_type_ = from._impl_.sub_type_;
  // @@protoc_insertion_point(copy_constructor:network.CGDragonSoulRefinePacket)
}

inline void CGDragonSoulRefinePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.item_grid_){arena}
    , decltype(_impl_.sub_type_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CGDragonSoulRefinePacket::~CGDragonSoulRefinePacket() {
  // @@protoc_insertion_point(destructor:network.CGDragonSoulRefinePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGDragonSoulRefinePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.item_grid_.~RepeatedPtrField();
}

void CGDragonSoulRefinePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGDragonSoulRefinePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGDragonSoulRefinePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.item_grid_.Clear();
  _impl_.sub_type_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGDragonSoulRefinePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 sub_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.sub_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .network.TItemPos item_grid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_item_grid(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGDragonSoulRefinePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGDragonSoulRefinePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 sub_type = 1;
  if (this->_internal_sub_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_sub_type(), target);
  }

  // repeated .network.TItemPos item_grid = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_item_grid_size()); i < n; i++) {
    const auto& repfield = this->_internal_item_grid(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGDragonSoulRefinePacket)
  return target;
}

size_t CGDragonSoulRefinePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGDragonSoulRefinePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .network.TItemPos item_grid = 2;
  total_size += 1UL * this->_internal_item_grid_size();
  for (const auto& msg : this->_impl_.item_grid_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 sub_type = 1;
  if (this->_internal_sub_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_sub_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGDragonSoulRefinePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGDragonSoulRefinePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGDragonSoulRefinePacket::GetClassData() const { return &_class_data_; }


void CGDragonSoulRefinePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGDragonSoulRefinePacket*>(&to_msg);
  auto& from = static_cast<const CGDragonSoulRefinePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGDragonSoulRefinePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.item_grid_.MergeFrom(from._impl_.item_grid_);
  if (from._internal_sub_type() != 0) {
    _this->_internal_set_sub_type(from._internal_sub_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGDragonSoulRefinePacket::CopyFrom(const CGDragonSoulRefinePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGDragonSoulRefinePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGDragonSoulRefinePacket::IsInitialized() const {
  return true;
}

void CGDragonSoulRefinePacket::InternalSwap(CGDragonSoulRefinePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.item_grid_.InternalSwap(&other->_impl_.item_grid_);
  swap(_impl_.sub_type_, other->_impl_.sub_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGDragonSoulRefinePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[41]);
}

// ===================================================================

class CGOnQuestTriggerPacket::_Internal {
 public:
};

CGOnQuestTriggerPacket::CGOnQuestTriggerPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGOnQuestTriggerPacket)
}
CGOnQuestTriggerPacket::CGOnQuestTriggerPacket(const CGOnQuestTriggerPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGOnQuestTriggerPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.index_){}
    , decltype(_impl_.arg_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.index_, &from._impl_.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.arg_) -
    reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.arg_));
  // @@protoc_insertion_point(copy_constructor:network.CGOnQuestTriggerPacket)
}

inline void CGOnQuestTriggerPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.index_){0u}
    , decltype(_impl_.arg_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CGOnQuestTriggerPacket::~CGOnQuestTriggerPacket() {
  // @@protoc_insertion_point(destructor:network.CGOnQuestTriggerPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGOnQuestTriggerPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CGOnQuestTriggerPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGOnQuestTriggerPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGOnQuestTriggerPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.arg_) -
      reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.arg_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGOnQuestTriggerPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 arg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.arg_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGOnQuestTriggerPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGOnQuestTriggerPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 index = 1;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_index(), target);
  }

  // int32 arg = 2;
  if (this->_internal_arg() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_arg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGOnQuestTriggerPacket)
  return target;
}

size_t CGOnQuestTriggerPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGOnQuestTriggerPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 index = 1;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_index());
  }

  // int32 arg = 2;
  if (this->_internal_arg() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_arg());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGOnQuestTriggerPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGOnQuestTriggerPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGOnQuestTriggerPacket::GetClassData() const { return &_class_data_; }


void CGOnQuestTriggerPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGOnQuestTriggerPacket*>(&to_msg);
  auto& from = static_cast<const CGOnQuestTriggerPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGOnQuestTriggerPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  if (from._internal_arg() != 0) {
    _this->_internal_set_arg(from._internal_arg());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGOnQuestTriggerPacket::CopyFrom(const CGOnQuestTriggerPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGOnQuestTriggerPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGOnQuestTriggerPacket::IsInitialized() const {
  return true;
}

void CGOnQuestTriggerPacket::InternalSwap(CGOnQuestTriggerPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGOnQuestTriggerPacket, _impl_.arg_)
      + sizeof(CGOnQuestTriggerPacket::_impl_.arg_)
      - PROTOBUF_FIELD_OFFSET(CGOnQuestTriggerPacket, _impl_.index_)>(
          reinterpret_cast<char*>(&_impl_.index_),
          reinterpret_cast<char*>(&other->_impl_.index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGOnQuestTriggerPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[42]);
}

// ===================================================================

class CGItemMultiUsePacket::_Internal {
 public:
  static const ::network::TItemPos& cell(const CGItemMultiUsePacket* msg);
};

const ::network::TItemPos&
CGItemMultiUsePacket::_Internal::cell(const CGItemMultiUsePacket* msg) {
  return *msg->_impl_.cell_;
}
void CGItemMultiUsePacket::clear_cell() {
  if (GetArenaForAllocation() == nullptr && _impl_.cell_ != nullptr) {
    delete _impl_.cell_;
  }
  _impl_.cell_ = nullptr;
}
CGItemMultiUsePacket::CGItemMultiUsePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGItemMultiUsePacket)
}
CGItemMultiUsePacket::CGItemMultiUsePacket(const CGItemMultiUsePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGItemMultiUsePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.cell_){nullptr}
    , decltype(_impl_.count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_cell()) {
    _this->_impl_.cell_ = new ::network::TItemPos(*from._impl_.cell_);
  }
  _this->_impl_.count_ = from._impl_.count_;
  // @@protoc_insertion_point(copy_constructor:network.CGItemMultiUsePacket)
}

inline void CGItemMultiUsePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.cell_){nullptr}
    , decltype(_impl_.count_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CGItemMultiUsePacket::~CGItemMultiUsePacket() {
  // @@protoc_insertion_point(destructor:network.CGItemMultiUsePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGItemMultiUsePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.cell_;
}

void CGItemMultiUsePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGItemMultiUsePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGItemMultiUsePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.cell_ != nullptr) {
    delete _impl_.cell_;
  }
  _impl_.cell_ = nullptr;
  _impl_.count_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGItemMultiUsePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .network.TItemPos cell = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGItemMultiUsePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGItemMultiUsePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .network.TItemPos cell = 1;
  if (this->_internal_has_cell()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::cell(this),
        _Internal::cell(this).GetCachedSize(), target, stream);
  }

  // uint32 count = 2;
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGItemMultiUsePacket)
  return target;
}

size_t CGItemMultiUsePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGItemMultiUsePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .network.TItemPos cell = 1;
  if (this->_internal_has_cell()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cell_);
  }

  // uint32 count = 2;
  if (this->_internal_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGItemMultiUsePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGItemMultiUsePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGItemMultiUsePacket::GetClassData() const { return &_class_data_; }


void CGItemMultiUsePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGItemMultiUsePacket*>(&to_msg);
  auto& from = static_cast<const CGItemMultiUsePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGItemMultiUsePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_cell()) {
    _this->_internal_mutable_cell()->::network::TItemPos::MergeFrom(
        from._internal_cell());
  }
  if (from._internal_count() != 0) {
    _this->_internal_set_count(from._internal_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGItemMultiUsePacket::CopyFrom(const CGItemMultiUsePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGItemMultiUsePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGItemMultiUsePacket::IsInitialized() const {
  return true;
}

void CGItemMultiUsePacket::InternalSwap(CGItemMultiUsePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGItemMultiUsePacket, _impl_.count_)
      + sizeof(CGItemMultiUsePacket::_impl_.count_)
      - PROTOBUF_FIELD_OFFSET(CGItemMultiUsePacket, _impl_.cell_)>(
          reinterpret_cast<char*>(&_impl_.cell_),
          reinterpret_cast<char*>(&other->_impl_.cell_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGItemMultiUsePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[43]);
}

// ===================================================================

class CGBotReportLogPacket::_Internal {
 public:
};

CGBotReportLogPacket::CGBotReportLogPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGBotReportLogPacket)
}
CGBotReportLogPacket::CGBotReportLogPacket(const CGBotReportLogPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGBotReportLogPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , decltype(_impl_.detail_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_type().empty()) {
    _this->_impl_.type_.Set(from._internal_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.detail_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.detail_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_detail().empty()) {
    _this->_impl_.detail_.Set(from._internal_detail(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:network.CGBotReportLogPacket)
}

inline void CGBotReportLogPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , decltype(_impl_.detail_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.detail_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.detail_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CGBotReportLogPacket::~CGBotReportLogPacket() {
  // @@protoc_insertion_point(destructor:network.CGBotReportLogPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGBotReportLogPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.type_.Destroy();
  _impl_.detail_.Destroy();
}

void CGBotReportLogPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGBotReportLogPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGBotReportLogPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.type_.ClearToEmpty();
  _impl_.detail_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGBotReportLogPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes detail = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_detail();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGBotReportLogPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGBotReportLogPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes type = 1;
  if (!this->_internal_type().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_type(), target);
  }

  // bytes detail = 2;
  if (!this->_internal_detail().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_detail(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGBotReportLogPacket)
  return target;
}

size_t CGBotReportLogPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGBotReportLogPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes type = 1;
  if (!this->_internal_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_type());
  }

  // bytes detail = 2;
  if (!this->_internal_detail().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_detail());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGBotReportLogPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGBotReportLogPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGBotReportLogPacket::GetClassData() const { return &_class_data_; }


void CGBotReportLogPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGBotReportLogPacket*>(&to_msg);
  auto& from = static_cast<const CGBotReportLogPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGBotReportLogPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_type().empty()) {
    _this->_internal_set_type(from._internal_type());
  }
  if (!from._internal_detail().empty()) {
    _this->_internal_set_detail(from._internal_detail());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGBotReportLogPacket::CopyFrom(const CGBotReportLogPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGBotReportLogPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGBotReportLogPacket::IsInitialized() const {
  return true;
}

void CGBotReportLogPacket::InternalSwap(CGBotReportLogPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.type_, lhs_arena,
      &other->_impl_.type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.detail_, lhs_arena,
      &other->_impl_.detail_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CGBotReportLogPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[44]);
}

// ===================================================================

class CGForcedRewarpPacket::_Internal {
 public:
};

CGForcedRewarpPacket::CGForcedRewarpPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGForcedRewarpPacket)
}
CGForcedRewarpPacket::CGForcedRewarpPacket(const CGForcedRewarpPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGForcedRewarpPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.detail_log_){}
    , decltype(_impl_.checkval_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.detail_log_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.detail_log_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_detail_log().empty()) {
    _this->_impl_.detail_log_.Set(from._internal_detail_log(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.checkval_ = from._impl_.checkval_;
  // @@protoc_insertion_point(copy_constructor:network.CGForcedRewarpPacket)
}

inline void CGForcedRewarpPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.detail_log_){}
    , decltype(_impl_.checkval_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.detail_log_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.detail_log_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CGForcedRewarpPacket::~CGForcedRewarpPacket() {
  // @@protoc_insertion_point(destructor:network.CGForcedRewarpPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGForcedRewarpPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.detail_log_.Destroy();
}

void CGForcedRewarpPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGForcedRewarpPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGForcedRewarpPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.detail_log_.ClearToEmpty();
  _impl_.checkval_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGForcedRewarpPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes detail_log = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_detail_log();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 checkval = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.checkval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGForcedRewarpPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGForcedRewarpPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes detail_log = 1;
  if (!this->_internal_detail_log().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_detail_log(), target);
  }

  // int32 checkval = 2;
  if (this->_internal_checkval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_checkval(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGForcedRewarpPacket)
  return target;
}

size_t CGForcedRewarpPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGForcedRewarpPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes detail_log = 1;
  if (!this->_internal_detail_log().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_detail_log());
  }

  // int32 checkval = 2;
  if (this->_internal_checkval() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_checkval());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGForcedRewarpPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGForcedRewarpPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGForcedRewarpPacket::GetClassData() const { return &_class_data_; }


void CGForcedRewarpPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGForcedRewarpPacket*>(&to_msg);
  auto& from = static_cast<const CGForcedRewarpPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGForcedRewarpPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_detail_log().empty()) {
    _this->_internal_set_detail_log(from._internal_detail_log());
  }
  if (from._internal_checkval() != 0) {
    _this->_internal_set_checkval(from._internal_checkval());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGForcedRewarpPacket::CopyFrom(const CGForcedRewarpPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGForcedRewarpPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGForcedRewarpPacket::IsInitialized() const {
  return true;
}

void CGForcedRewarpPacket::InternalSwap(CGForcedRewarpPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.detail_log_, lhs_arena,
      &other->_impl_.detail_log_, rhs_arena
  );
  swap(_impl_.checkval_, other->_impl_.checkval_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGForcedRewarpPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[45]);
}

// ===================================================================

class CGUseDetachmentSinglePacket::_Internal {
 public:
};

CGUseDetachmentSinglePacket::CGUseDetachmentSinglePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGUseDetachmentSinglePacket)
}
CGUseDetachmentSinglePacket::CGUseDetachmentSinglePacket(const CGUseDetachmentSinglePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGUseDetachmentSinglePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.cell_detachment_){}
    , decltype(_impl_.cell_item_){}
    , decltype(_impl_.slot_index_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.cell_detachment_, &from._impl_.cell_detachment_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.slot_index_) -
    reinterpret_cast<char*>(&_impl_.cell_detachment_)) + sizeof(_impl_.slot_index_));
  // @@protoc_insertion_point(copy_constructor:network.CGUseDetachmentSinglePacket)
}

inline void CGUseDetachmentSinglePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.cell_detachment_){0u}
    , decltype(_impl_.cell_item_){0u}
    , decltype(_impl_.slot_index_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CGUseDetachmentSinglePacket::~CGUseDetachmentSinglePacket() {
  // @@protoc_insertion_point(destructor:network.CGUseDetachmentSinglePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGUseDetachmentSinglePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CGUseDetachmentSinglePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGUseDetachmentSinglePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGUseDetachmentSinglePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.cell_detachment_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.slot_index_) -
      reinterpret_cast<char*>(&_impl_.cell_detachment_)) + sizeof(_impl_.slot_index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGUseDetachmentSinglePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 cell_detachment = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.cell_detachment_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 cell_item = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.cell_item_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 slot_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.slot_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGUseDetachmentSinglePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGUseDetachmentSinglePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 cell_detachment = 1;
  if (this->_internal_cell_detachment() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_cell_detachment(), target);
  }

  // uint32 cell_item = 2;
  if (this->_internal_cell_item() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_cell_item(), target);
  }

  // uint32 slot_index = 3;
  if (this->_internal_slot_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_slot_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGUseDetachmentSinglePacket)
  return target;
}

size_t CGUseDetachmentSinglePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGUseDetachmentSinglePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 cell_detachment = 1;
  if (this->_internal_cell_detachment() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_cell_detachment());
  }

  // uint32 cell_item = 2;
  if (this->_internal_cell_item() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_cell_item());
  }

  // uint32 slot_index = 3;
  if (this->_internal_slot_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_slot_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGUseDetachmentSinglePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGUseDetachmentSinglePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGUseDetachmentSinglePacket::GetClassData() const { return &_class_data_; }


void CGUseDetachmentSinglePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGUseDetachmentSinglePacket*>(&to_msg);
  auto& from = static_cast<const CGUseDetachmentSinglePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGUseDetachmentSinglePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_cell_detachment() != 0) {
    _this->_internal_set_cell_detachment(from._internal_cell_detachment());
  }
  if (from._internal_cell_item() != 0) {
    _this->_internal_set_cell_item(from._internal_cell_item());
  }
  if (from._internal_slot_index() != 0) {
    _this->_internal_set_slot_index(from._internal_slot_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGUseDetachmentSinglePacket::CopyFrom(const CGUseDetachmentSinglePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGUseDetachmentSinglePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGUseDetachmentSinglePacket::IsInitialized() const {
  return true;
}

void CGUseDetachmentSinglePacket::InternalSwap(CGUseDetachmentSinglePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGUseDetachmentSinglePacket, _impl_.slot_index_)
      + sizeof(CGUseDetachmentSinglePacket::_impl_.slot_index_)
      - PROTOBUF_FIELD_OFFSET(CGUseDetachmentSinglePacket, _impl_.cell_detachment_)>(
          reinterpret_cast<char*>(&_impl_.cell_detachment_),
          reinterpret_cast<char*>(&other->_impl_.cell_detachment_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGUseDetachmentSinglePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[46]);
}

// ===================================================================

class CGEventRequestAnswerPacket::_Internal {
 public:
};

CGEventRequestAnswerPacket::CGEventRequestAnswerPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGEventRequestAnswerPacket)
}
CGEventRequestAnswerPacket::CGEventRequestAnswerPacket(const CGEventRequestAnswerPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGEventRequestAnswerPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.event_index_){}
    , decltype(_impl_.accept_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.event_index_, &from._impl_.event_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.accept_) -
    reinterpret_cast<char*>(&_impl_.event_index_)) + sizeof(_impl_.accept_));
  // @@protoc_insertion_point(copy_constructor:network.CGEventRequestAnswerPacket)
}

inline void CGEventRequestAnswerPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.event_index_){0u}
    , decltype(_impl_.accept_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CGEventRequestAnswerPacket::~CGEventRequestAnswerPacket() {
  // @@protoc_insertion_point(destructor:network.CGEventRequestAnswerPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGEventRequestAnswerPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CGEventRequestAnswerPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGEventRequestAnswerPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGEventRequestAnswerPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.event_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.accept_) -
      reinterpret_cast<char*>(&_impl_.event_index_)) + sizeof(_impl_.accept_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGEventRequestAnswerPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 event_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.event_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool accept = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.accept_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGEventRequestAnswerPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGEventRequestAnswerPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 event_index = 1;
  if (this->_internal_event_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_event_index(), target);
  }

  // bool accept = 2;
  if (this->_internal_accept() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_accept(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGEventRequestAnswerPacket)
  return target;
}

size_t CGEventRequestAnswerPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGEventRequestAnswerPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 event_index = 1;
  if (this->_internal_event_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_event_index());
  }

  // bool accept = 2;
  if (this->_internal_accept() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGEventRequestAnswerPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGEventRequestAnswerPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGEventRequestAnswerPacket::GetClassData() const { return &_class_data_; }


void CGEventRequestAnswerPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGEventRequestAnswerPacket*>(&to_msg);
  auto& from = static_cast<const CGEventRequestAnswerPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGEventRequestAnswerPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_event_index() != 0) {
    _this->_internal_set_event_index(from._internal_event_index());
  }
  if (from._internal_accept() != 0) {
    _this->_internal_set_accept(from._internal_accept());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGEventRequestAnswerPacket::CopyFrom(const CGEventRequestAnswerPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGEventRequestAnswerPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGEventRequestAnswerPacket::IsInitialized() const {
  return true;
}

void CGEventRequestAnswerPacket::InternalSwap(CGEventRequestAnswerPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGEventRequestAnswerPacket, _impl_.accept_)
      + sizeof(CGEventRequestAnswerPacket::_impl_.accept_)
      - PROTOBUF_FIELD_OFFSET(CGEventRequestAnswerPacket, _impl_.event_index_)>(
          reinterpret_cast<char*>(&_impl_.event_index_),
          reinterpret_cast<char*>(&other->_impl_.event_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGEventRequestAnswerPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[47]);
}

// ===================================================================

class CGCostumeBonusTransferPacket::_Internal {
 public:
  static const ::network::TItemPos& item_cell(const CGCostumeBonusTransferPacket* msg);
};

const ::network::TItemPos&
CGCostumeBonusTransferPacket::_Internal::item_cell(const CGCostumeBonusTransferPacket* msg) {
  return *msg->_impl_.item_cell_;
}
void CGCostumeBonusTransferPacket::clear_item_cell() {
  if (GetArenaForAllocation() == nullptr && _impl_.item_cell_ != nullptr) {
    delete _impl_.item_cell_;
  }
  _impl_.item_cell_ = nullptr;
}
CGCostumeBonusTransferPacket::CGCostumeBonusTransferPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGCostumeBonusTransferPacket)
}
CGCostumeBonusTransferPacket::CGCostumeBonusTransferPacket(const CGCostumeBonusTransferPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGCostumeBonusTransferPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.item_cell_){nullptr}
    , decltype(_impl_.sub_header_){}
    , decltype(_impl_.pos_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_item_cell()) {
    _this->_impl_.item_cell_ = new ::network::TItemPos(*from._impl_.item_cell_);
  }
  ::memcpy(&_impl_.sub_header_, &from._impl_.sub_header_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.pos_) -
    reinterpret_cast<char*>(&_impl_.sub_header_)) + sizeof(_impl_.pos_));
  // @@protoc_insertion_point(copy_constructor:network.CGCostumeBonusTransferPacket)
}

inline void CGCostumeBonusTransferPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.item_cell_){nullptr}
    , decltype(_impl_.sub_header_){0u}
    , decltype(_impl_.pos_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CGCostumeBonusTransferPacket::~CGCostumeBonusTransferPacket() {
  // @@protoc_insertion_point(destructor:network.CGCostumeBonusTransferPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGCostumeBonusTransferPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.item_cell_;
}

void CGCostumeBonusTransferPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGCostumeBonusTransferPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGCostumeBonusTransferPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.item_cell_ != nullptr) {
    delete _impl_.item_cell_;
  }
  _impl_.item_cell_ = nullptr;
  ::memset(&_impl_.sub_header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.pos_) -
      reinterpret_cast<char*>(&_impl_.sub_header_)) + sizeof(_impl_.pos_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGCostumeBonusTransferPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 sub_header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.sub_header_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 pos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.pos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .network.TItemPos item_cell = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_item_cell(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGCostumeBonusTransferPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGCostumeBonusTransferPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 sub_header = 1;
  if (this->_internal_sub_header() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_sub_header(), target);
  }

  // uint32 pos = 2;
  if (this->_internal_pos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_pos(), target);
  }

  // .network.TItemPos item_cell = 3;
  if (this->_internal_has_item_cell()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::item_cell(this),
        _Internal::item_cell(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGCostumeBonusTransferPacket)
  return target;
}

size_t CGCostumeBonusTransferPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGCostumeBonusTransferPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .network.TItemPos item_cell = 3;
  if (this->_internal_has_item_cell()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.item_cell_);
  }

  // uint32 sub_header = 1;
  if (this->_internal_sub_header() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_sub_header());
  }

  // uint32 pos = 2;
  if (this->_internal_pos() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pos());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGCostumeBonusTransferPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGCostumeBonusTransferPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGCostumeBonusTransferPacket::GetClassData() const { return &_class_data_; }


void CGCostumeBonusTransferPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGCostumeBonusTransferPacket*>(&to_msg);
  auto& from = static_cast<const CGCostumeBonusTransferPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGCostumeBonusTransferPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_item_cell()) {
    _this->_internal_mutable_item_cell()->::network::TItemPos::MergeFrom(
        from._internal_item_cell());
  }
  if (from._internal_sub_header() != 0) {
    _this->_internal_set_sub_header(from._internal_sub_header());
  }
  if (from._internal_pos() != 0) {
    _this->_internal_set_pos(from._internal_pos());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGCostumeBonusTransferPacket::CopyFrom(const CGCostumeBonusTransferPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGCostumeBonusTransferPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCostumeBonusTransferPacket::IsInitialized() const {
  return true;
}

void CGCostumeBonusTransferPacket::InternalSwap(CGCostumeBonusTransferPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGCostumeBonusTransferPacket, _impl_.pos_)
      + sizeof(CGCostumeBonusTransferPacket::_impl_.pos_)
      - PROTOBUF_FIELD_OFFSET(CGCostumeBonusTransferPacket, _impl_.item_cell_)>(
          reinterpret_cast<char*>(&_impl_.item_cell_),
          reinterpret_cast<char*>(&other->_impl_.item_cell_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGCostumeBonusTransferPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[48]);
}

// ===================================================================

class CGRunePagePacket::_Internal {
 public:
  static const ::TRunePageData& data(const CGRunePagePacket* msg);
};

const ::TRunePageData&
CGRunePagePacket::_Internal::data(const CGRunePagePacket* msg) {
  return *msg->_impl_.data_;
}
void CGRunePagePacket::clear_data() {
  if (GetArenaForAllocation() == nullptr && _impl_.data_ != nullptr) {
    delete _impl_.data_;
  }
  _impl_.data_ = nullptr;
}
CGRunePagePacket::CGRunePagePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGRunePagePacket)
}
CGRunePagePacket::CGRunePagePacket(const CGRunePagePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGRunePagePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data()) {
    _this->_impl_.data_ = new ::TRunePageData(*from._impl_.data_);
  }
  // @@protoc_insertion_point(copy_constructor:network.CGRunePagePacket)
}

inline void CGRunePagePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CGRunePagePacket::~CGRunePagePacket() {
  // @@protoc_insertion_point(destructor:network.CGRunePagePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGRunePagePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.data_;
}

void CGRunePagePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGRunePagePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGRunePagePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.data_ != nullptr) {
    delete _impl_.data_;
  }
  _impl_.data_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGRunePagePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .TRunePageData data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGRunePagePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGRunePagePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .TRunePageData data = 1;
  if (this->_internal_has_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::data(this),
        _Internal::data(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGRunePagePacket)
  return target;
}

size_t CGRunePagePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGRunePagePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .TRunePageData data = 1;
  if (this->_internal_has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.data_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGRunePagePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGRunePagePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGRunePagePacket::GetClassData() const { return &_class_data_; }


void CGRunePagePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGRunePagePacket*>(&to_msg);
  auto& from = static_cast<const CGRunePagePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGRunePagePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_data()) {
    _this->_internal_mutable_data()->::TRunePageData::MergeFrom(
        from._internal_data());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGRunePagePacket::CopyFrom(const CGRunePagePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGRunePagePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGRunePagePacket::IsInitialized() const {
  return true;
}

void CGRunePagePacket::InternalSwap(CGRunePagePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.data_, other->_impl_.data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGRunePagePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[49]);
}

// ===================================================================

class CGRecvWikiPacket::_Internal {
 public:
};

CGRecvWikiPacket::CGRecvWikiPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGRecvWikiPacket)
}
CGRecvWikiPacket::CGRecvWikiPacket(const CGRecvWikiPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGRecvWikiPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.vnum_){}
    , decltype(_impl_.is_mob_){}
    , decltype(_impl_.ret_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.vnum_, &from._impl_.vnum_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ret_id_) -
    reinterpret_cast<char*>(&_impl_.vnum_)) + sizeof(_impl_.ret_id_));
  // @@protoc_insertion_point(copy_constructor:network.CGRecvWikiPacket)
}

inline void CGRecvWikiPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.vnum_){0u}
    , decltype(_impl_.is_mob_){false}
    , decltype(_impl_.ret_id_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CGRecvWikiPacket::~CGRecvWikiPacket() {
  // @@protoc_insertion_point(destructor:network.CGRecvWikiPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGRecvWikiPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CGRecvWikiPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGRecvWikiPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGRecvWikiPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.vnum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.ret_id_) -
      reinterpret_cast<char*>(&_impl_.vnum_)) + sizeof(_impl_.ret_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGRecvWikiPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 vnum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.vnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_mob = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.is_mob_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 ret_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.ret_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGRecvWikiPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGRecvWikiPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 vnum = 1;
  if (this->_internal_vnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_vnum(), target);
  }

  // bool is_mob = 2;
  if (this->_internal_is_mob() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_is_mob(), target);
  }

  // uint64 ret_id = 3;
  if (this->_internal_ret_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_ret_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGRecvWikiPacket)
  return target;
}

size_t CGRecvWikiPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGRecvWikiPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 vnum = 1;
  if (this->_internal_vnum() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_vnum());
  }

  // bool is_mob = 2;
  if (this->_internal_is_mob() != 0) {
    total_size += 1 + 1;
  }

  // uint64 ret_id = 3;
  if (this->_internal_ret_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_ret_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGRecvWikiPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGRecvWikiPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGRecvWikiPacket::GetClassData() const { return &_class_data_; }


void CGRecvWikiPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGRecvWikiPacket*>(&to_msg);
  auto& from = static_cast<const CGRecvWikiPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGRecvWikiPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_vnum() != 0) {
    _this->_internal_set_vnum(from._internal_vnum());
  }
  if (from._internal_is_mob() != 0) {
    _this->_internal_set_is_mob(from._internal_is_mob());
  }
  if (from._internal_ret_id() != 0) {
    _this->_internal_set_ret_id(from._internal_ret_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGRecvWikiPacket::CopyFrom(const CGRecvWikiPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGRecvWikiPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGRecvWikiPacket::IsInitialized() const {
  return true;
}

void CGRecvWikiPacket::InternalSwap(CGRecvWikiPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGRecvWikiPacket, _impl_.ret_id_)
      + sizeof(CGRecvWikiPacket::_impl_.ret_id_)
      - PROTOBUF_FIELD_OFFSET(CGRecvWikiPacket, _impl_.vnum_)>(
          reinterpret_cast<char*>(&_impl_.vnum_),
          reinterpret_cast<char*>(&other->_impl_.vnum_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGRecvWikiPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[50]);
}

// ===================================================================

class CGSetSkillColorPacket::_Internal {
 public:
};

CGSetSkillColorPacket::CGSetSkillColorPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGSetSkillColorPacket)
}
CGSetSkillColorPacket::CGSetSkillColorPacket(const CGSetSkillColorPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGSetSkillColorPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.skill_){}
    , decltype(_impl_.col1_){}
    , decltype(_impl_.col2_){}
    , decltype(_impl_.col3_){}
    , decltype(_impl_.col4_){}
    , decltype(_impl_.col5_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.skill_, &from._impl_.skill_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.col5_) -
    reinterpret_cast<char*>(&_impl_.skill_)) + sizeof(_impl_.col5_));
  // @@protoc_insertion_point(copy_constructor:network.CGSetSkillColorPacket)
}

inline void CGSetSkillColorPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.skill_){0u}
    , decltype(_impl_.col1_){0u}
    , decltype(_impl_.col2_){0u}
    , decltype(_impl_.col3_){0u}
    , decltype(_impl_.col4_){0u}
    , decltype(_impl_.col5_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CGSetSkillColorPacket::~CGSetSkillColorPacket() {
  // @@protoc_insertion_point(destructor:network.CGSetSkillColorPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGSetSkillColorPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CGSetSkillColorPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGSetSkillColorPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGSetSkillColorPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.skill_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.col5_) -
      reinterpret_cast<char*>(&_impl_.skill_)) + sizeof(_impl_.col5_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGSetSkillColorPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 skill = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.skill_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 col1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.col1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 col2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.col2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 col3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.col3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 col4 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.col4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 col5 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.col5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGSetSkillColorPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGSetSkillColorPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 skill = 1;
  if (this->_internal_skill() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_skill(), target);
  }

  // uint32 col1 = 2;
  if (this->_internal_col1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_col1(), target);
  }

  // uint32 col2 = 3;
  if (this->_internal_col2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_col2(), target);
  }

  // uint32 col3 = 4;
  if (this->_internal_col3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_col3(), target);
  }

  // uint32 col4 = 5;
  if (this->_internal_col4() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_col4(), target);
  }

  // uint32 col5 = 6;
  if (this->_internal_col5() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_col5(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGSetSkillColorPacket)
  return target;
}

size_t CGSetSkillColorPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGSetSkillColorPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 skill = 1;
  if (this->_internal_skill() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_skill());
  }

  // uint32 col1 = 2;
  if (this->_internal_col1() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_col1());
  }

  // uint32 col2 = 3;
  if (this->_internal_col2() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_col2());
  }

  // uint32 col3 = 4;
  if (this->_internal_col3() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_col3());
  }

  // uint32 col4 = 5;
  if (this->_internal_col4() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_col4());
  }

  // uint32 col5 = 6;
  if (this->_internal_col5() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_col5());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGSetSkillColorPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGSetSkillColorPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGSetSkillColorPacket::GetClassData() const { return &_class_data_; }


void CGSetSkillColorPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGSetSkillColorPacket*>(&to_msg);
  auto& from = static_cast<const CGSetSkillColorPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGSetSkillColorPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_skill() != 0) {
    _this->_internal_set_skill(from._internal_skill());
  }
  if (from._internal_col1() != 0) {
    _this->_internal_set_col1(from._internal_col1());
  }
  if (from._internal_col2() != 0) {
    _this->_internal_set_col2(from._internal_col2());
  }
  if (from._internal_col3() != 0) {
    _this->_internal_set_col3(from._internal_col3());
  }
  if (from._internal_col4() != 0) {
    _this->_internal_set_col4(from._internal_col4());
  }
  if (from._internal_col5() != 0) {
    _this->_internal_set_col5(from._internal_col5());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGSetSkillColorPacket::CopyFrom(const CGSetSkillColorPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGSetSkillColorPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGSetSkillColorPacket::IsInitialized() const {
  return true;
}

void CGSetSkillColorPacket::InternalSwap(CGSetSkillColorPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGSetSkillColorPacket, _impl_.col5_)
      + sizeof(CGSetSkillColorPacket::_impl_.col5_)
      - PROTOBUF_FIELD_OFFSET(CGSetSkillColorPacket, _impl_.skill_)>(
          reinterpret_cast<char*>(&_impl_.skill_),
          reinterpret_cast<char*>(&other->_impl_.skill_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGSetSkillColorPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[51]);
}

// ===================================================================

class CGEquipmentPageAddPacket::_Internal {
 public:
};

CGEquipmentPageAddPacket::CGEquipmentPageAddPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGEquipmentPageAddPacket)
}
CGEquipmentPageAddPacket::CGEquipmentPageAddPacket(const CGEquipmentPageAddPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGEquipmentPageAddPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:network.CGEquipmentPageAddPacket)
}

inline void CGEquipmentPageAddPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CGEquipmentPageAddPacket::~CGEquipmentPageAddPacket() {
  // @@protoc_insertion_point(destructor:network.CGEquipmentPageAddPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGEquipmentPageAddPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void CGEquipmentPageAddPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGEquipmentPageAddPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGEquipmentPageAddPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGEquipmentPageAddPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGEquipmentPageAddPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGEquipmentPageAddPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes name = 1;
  if (!this->_internal_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGEquipmentPageAddPacket)
  return target;
}

size_t CGEquipmentPageAddPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGEquipmentPageAddPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGEquipmentPageAddPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGEquipmentPageAddPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGEquipmentPageAddPacket::GetClassData() const { return &_class_data_; }


void CGEquipmentPageAddPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGEquipmentPageAddPacket*>(&to_msg);
  auto& from = static_cast<const CGEquipmentPageAddPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGEquipmentPageAddPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGEquipmentPageAddPacket::CopyFrom(const CGEquipmentPageAddPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGEquipmentPageAddPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGEquipmentPageAddPacket::IsInitialized() const {
  return true;
}

void CGEquipmentPageAddPacket::InternalSwap(CGEquipmentPageAddPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CGEquipmentPageAddPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[52]);
}

// ===================================================================

class CGEquipmentPageDeletePacket::_Internal {
 public:
};

CGEquipmentPageDeletePacket::CGEquipmentPageDeletePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGEquipmentPageDeletePacket)
}
CGEquipmentPageDeletePacket::CGEquipmentPageDeletePacket(const CGEquipmentPageDeletePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGEquipmentPageDeletePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.index_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.index_ = from._impl_.index_;
  // @@protoc_insertion_point(copy_constructor:network.CGEquipmentPageDeletePacket)
}

inline void CGEquipmentPageDeletePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.index_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CGEquipmentPageDeletePacket::~CGEquipmentPageDeletePacket() {
  // @@protoc_insertion_point(destructor:network.CGEquipmentPageDeletePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGEquipmentPageDeletePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CGEquipmentPageDeletePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGEquipmentPageDeletePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGEquipmentPageDeletePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.index_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGEquipmentPageDeletePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGEquipmentPageDeletePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGEquipmentPageDeletePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 index = 1;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGEquipmentPageDeletePacket)
  return target;
}

size_t CGEquipmentPageDeletePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGEquipmentPageDeletePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 index = 1;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGEquipmentPageDeletePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGEquipmentPageDeletePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGEquipmentPageDeletePacket::GetClassData() const { return &_class_data_; }


void CGEquipmentPageDeletePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGEquipmentPageDeletePacket*>(&to_msg);
  auto& from = static_cast<const CGEquipmentPageDeletePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGEquipmentPageDeletePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGEquipmentPageDeletePacket::CopyFrom(const CGEquipmentPageDeletePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGEquipmentPageDeletePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGEquipmentPageDeletePacket::IsInitialized() const {
  return true;
}

void CGEquipmentPageDeletePacket::InternalSwap(CGEquipmentPageDeletePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.index_, other->_impl_.index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGEquipmentPageDeletePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[53]);
}

// ===================================================================

class CGEquipmentPageSelectPacket::_Internal {
 public:
};

CGEquipmentPageSelectPacket::CGEquipmentPageSelectPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGEquipmentPageSelectPacket)
}
CGEquipmentPageSelectPacket::CGEquipmentPageSelectPacket(const CGEquipmentPageSelectPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGEquipmentPageSelectPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.index_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.index_ = from._impl_.index_;
  // @@protoc_insertion_point(copy_constructor:network.CGEquipmentPageSelectPacket)
}

inline void CGEquipmentPageSelectPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.index_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CGEquipmentPageSelectPacket::~CGEquipmentPageSelectPacket() {
  // @@protoc_insertion_point(destructor:network.CGEquipmentPageSelectPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGEquipmentPageSelectPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CGEquipmentPageSelectPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGEquipmentPageSelectPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGEquipmentPageSelectPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.index_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGEquipmentPageSelectPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGEquipmentPageSelectPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGEquipmentPageSelectPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 index = 1;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGEquipmentPageSelectPacket)
  return target;
}

size_t CGEquipmentPageSelectPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGEquipmentPageSelectPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 index = 1;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGEquipmentPageSelectPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGEquipmentPageSelectPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGEquipmentPageSelectPacket::GetClassData() const { return &_class_data_; }


void CGEquipmentPageSelectPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGEquipmentPageSelectPacket*>(&to_msg);
  auto& from = static_cast<const CGEquipmentPageSelectPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGEquipmentPageSelectPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGEquipmentPageSelectPacket::CopyFrom(const CGEquipmentPageSelectPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGEquipmentPageSelectPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGEquipmentPageSelectPacket::IsInitialized() const {
  return true;
}

void CGEquipmentPageSelectPacket::InternalSwap(CGEquipmentPageSelectPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.index_, other->_impl_.index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGEquipmentPageSelectPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[54]);
}

// ===================================================================

class CGCombatZoneRequestActionPacket::_Internal {
 public:
};

CGCombatZoneRequestActionPacket::CGCombatZoneRequestActionPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGCombatZoneRequestActionPacket)
}
CGCombatZoneRequestActionPacket::CGCombatZoneRequestActionPacket(const CGCombatZoneRequestActionPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGCombatZoneRequestActionPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.action_){}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.action_, &from._impl_.action_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.value_) -
    reinterpret_cast<char*>(&_impl_.action_)) + sizeof(_impl_.value_));
  // @@protoc_insertion_point(copy_constructor:network.CGCombatZoneRequestActionPacket)
}

inline void CGCombatZoneRequestActionPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.action_){0}
    , decltype(_impl_.value_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CGCombatZoneRequestActionPacket::~CGCombatZoneRequestActionPacket() {
  // @@protoc_insertion_point(destructor:network.CGCombatZoneRequestActionPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGCombatZoneRequestActionPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CGCombatZoneRequestActionPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGCombatZoneRequestActionPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGCombatZoneRequestActionPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.action_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.value_) -
      reinterpret_cast<char*>(&_impl_.action_)) + sizeof(_impl_.value_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGCombatZoneRequestActionPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 action = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.action_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGCombatZoneRequestActionPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGCombatZoneRequestActionPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 action = 1;
  if (this->_internal_action() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_action(), target);
  }

  // int32 value = 2;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGCombatZoneRequestActionPacket)
  return target;
}

size_t CGCombatZoneRequestActionPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGCombatZoneRequestActionPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 action = 1;
  if (this->_internal_action() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_action());
  }

  // int32 value = 2;
  if (this->_internal_value() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGCombatZoneRequestActionPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGCombatZoneRequestActionPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGCombatZoneRequestActionPacket::GetClassData() const { return &_class_data_; }


void CGCombatZoneRequestActionPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGCombatZoneRequestActionPacket*>(&to_msg);
  auto& from = static_cast<const CGCombatZoneRequestActionPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGCombatZoneRequestActionPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_action() != 0) {
    _this->_internal_set_action(from._internal_action());
  }
  if (from._internal_value() != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGCombatZoneRequestActionPacket::CopyFrom(const CGCombatZoneRequestActionPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGCombatZoneRequestActionPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCombatZoneRequestActionPacket::IsInitialized() const {
  return true;
}

void CGCombatZoneRequestActionPacket::InternalSwap(CGCombatZoneRequestActionPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGCombatZoneRequestActionPacket, _impl_.value_)
      + sizeof(CGCombatZoneRequestActionPacket::_impl_.value_)
      - PROTOBUF_FIELD_OFFSET(CGCombatZoneRequestActionPacket, _impl_.action_)>(
          reinterpret_cast<char*>(&_impl_.action_),
          reinterpret_cast<char*>(&other->_impl_.action_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGCombatZoneRequestActionPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[55]);
}

// ===================================================================

class CGCrystalRefinePacket::_Internal {
 public:
  static const ::network::TItemPos& crystal_cell(const CGCrystalRefinePacket* msg);
  static const ::network::TItemPos& scroll_cell(const CGCrystalRefinePacket* msg);
};

const ::network::TItemPos&
CGCrystalRefinePacket::_Internal::crystal_cell(const CGCrystalRefinePacket* msg) {
  return *msg->_impl_.crystal_cell_;
}
const ::network::TItemPos&
CGCrystalRefinePacket::_Internal::scroll_cell(const CGCrystalRefinePacket* msg) {
  return *msg->_impl_.scroll_cell_;
}
void CGCrystalRefinePacket::clear_crystal_cell() {
  if (GetArenaForAllocation() == nullptr && _impl_.crystal_cell_ != nullptr) {
    delete _impl_.crystal_cell_;
  }
  _impl_.crystal_cell_ = nullptr;
}
void CGCrystalRefinePacket::clear_scroll_cell() {
  if (GetArenaForAllocation() == nullptr && _impl_.scroll_cell_ != nullptr) {
    delete _impl_.scroll_cell_;
  }
  _impl_.scroll_cell_ = nullptr;
}
CGCrystalRefinePacket::CGCrystalRefinePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGCrystalRefinePacket)
}
CGCrystalRefinePacket::CGCrystalRefinePacket(const CGCrystalRefinePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGCrystalRefinePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.crystal_cell_){nullptr}
    , decltype(_impl_.scroll_cell_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_crystal_cell()) {
    _this->_impl_.crystal_cell_ = new ::network::TItemPos(*from._impl_.crystal_cell_);
  }
  if (from._internal_has_scroll_cell()) {
    _this->_impl_.scroll_cell_ = new ::network::TItemPos(*from._impl_.scroll_cell_);
  }
  // @@protoc_insertion_point(copy_constructor:network.CGCrystalRefinePacket)
}

inline void CGCrystalRefinePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.crystal_cell_){nullptr}
    , decltype(_impl_.scroll_cell_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CGCrystalRefinePacket::~CGCrystalRefinePacket() {
  // @@protoc_insertion_point(destructor:network.CGCrystalRefinePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGCrystalRefinePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.crystal_cell_;
  if (this != internal_default_instance()) delete _impl_.scroll_cell_;
}

void CGCrystalRefinePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGCrystalRefinePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGCrystalRefinePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.crystal_cell_ != nullptr) {
    delete _impl_.crystal_cell_;
  }
  _impl_.crystal_cell_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.scroll_cell_ != nullptr) {
    delete _impl_.scroll_cell_;
  }
  _impl_.scroll_cell_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGCrystalRefinePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .network.TItemPos crystal_cell = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_crystal_cell(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .network.TItemPos scroll_cell = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_scroll_cell(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGCrystalRefinePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGCrystalRefinePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .network.TItemPos crystal_cell = 1;
  if (this->_internal_has_crystal_cell()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::crystal_cell(this),
        _Internal::crystal_cell(this).GetCachedSize(), target, stream);
  }

  // .network.TItemPos scroll_cell = 2;
  if (this->_internal_has_scroll_cell()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::scroll_cell(this),
        _Internal::scroll_cell(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGCrystalRefinePacket)
  return target;
}

size_t CGCrystalRefinePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGCrystalRefinePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .network.TItemPos crystal_cell = 1;
  if (this->_internal_has_crystal_cell()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.crystal_cell_);
  }

  // .network.TItemPos scroll_cell = 2;
  if (this->_internal_has_scroll_cell()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.scroll_cell_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGCrystalRefinePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGCrystalRefinePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGCrystalRefinePacket::GetClassData() const { return &_class_data_; }


void CGCrystalRefinePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGCrystalRefinePacket*>(&to_msg);
  auto& from = static_cast<const CGCrystalRefinePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGCrystalRefinePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_crystal_cell()) {
    _this->_internal_mutable_crystal_cell()->::network::TItemPos::MergeFrom(
        from._internal_crystal_cell());
  }
  if (from._internal_has_scroll_cell()) {
    _this->_internal_mutable_scroll_cell()->::network::TItemPos::MergeFrom(
        from._internal_scroll_cell());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGCrystalRefinePacket::CopyFrom(const CGCrystalRefinePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGCrystalRefinePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCrystalRefinePacket::IsInitialized() const {
  return true;
}

void CGCrystalRefinePacket::InternalSwap(CGCrystalRefinePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGCrystalRefinePacket, _impl_.scroll_cell_)
      + sizeof(CGCrystalRefinePacket::_impl_.scroll_cell_)
      - PROTOBUF_FIELD_OFFSET(CGCrystalRefinePacket, _impl_.crystal_cell_)>(
          reinterpret_cast<char*>(&_impl_.crystal_cell_),
          reinterpret_cast<char*>(&other->_impl_.crystal_cell_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGCrystalRefinePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[56]);
}

// ===================================================================

class CGAuctionInsertItemPacket::_Internal {
 public:
  static const ::network::TItemPos& cell(const CGAuctionInsertItemPacket* msg);
  static const ::network::TItemPos& target_cell(const CGAuctionInsertItemPacket* msg);
};

const ::network::TItemPos&
CGAuctionInsertItemPacket::_Internal::cell(const CGAuctionInsertItemPacket* msg) {
  return *msg->_impl_.cell_;
}
const ::network::TItemPos&
CGAuctionInsertItemPacket::_Internal::target_cell(const CGAuctionInsertItemPacket* msg) {
  return *msg->_impl_.target_cell_;
}
void CGAuctionInsertItemPacket::clear_cell() {
  if (GetArenaForAllocation() == nullptr && _impl_.cell_ != nullptr) {
    delete _impl_.cell_;
  }
  _impl_.cell_ = nullptr;
}
void CGAuctionInsertItemPacket::clear_target_cell() {
  if (GetArenaForAllocation() == nullptr && _impl_.target_cell_ != nullptr) {
    delete _impl_.target_cell_;
  }
  _impl_.target_cell_ = nullptr;
}
CGAuctionInsertItemPacket::CGAuctionInsertItemPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGAuctionInsertItemPacket)
}
CGAuctionInsertItemPacket::CGAuctionInsertItemPacket(const CGAuctionInsertItemPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGAuctionInsertItemPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.cell_){nullptr}
    , decltype(_impl_.target_cell_){nullptr}
    , decltype(_impl_.price_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_cell()) {
    _this->_impl_.cell_ = new ::network::TItemPos(*from._impl_.cell_);
  }
  if (from._internal_has_target_cell()) {
    _this->_impl_.target_cell_ = new ::network::TItemPos(*from._impl_.target_cell_);
  }
  _this->_impl_.price_ = from._impl_.price_;
  // @@protoc_insertion_point(copy_constructor:network.CGAuctionInsertItemPacket)
}

inline void CGAuctionInsertItemPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.cell_){nullptr}
    , decltype(_impl_.target_cell_){nullptr}
    , decltype(_impl_.price_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CGAuctionInsertItemPacket::~CGAuctionInsertItemPacket() {
  // @@protoc_insertion_point(destructor:network.CGAuctionInsertItemPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGAuctionInsertItemPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.cell_;
  if (this != internal_default_instance()) delete _impl_.target_cell_;
}

void CGAuctionInsertItemPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGAuctionInsertItemPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGAuctionInsertItemPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.cell_ != nullptr) {
    delete _impl_.cell_;
  }
  _impl_.cell_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.target_cell_ != nullptr) {
    delete _impl_.target_cell_;
  }
  _impl_.target_cell_ = nullptr;
  _impl_.price_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGAuctionInsertItemPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .network.TItemPos cell = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .network.TItemPos target_cell = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_target_cell(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 price = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGAuctionInsertItemPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGAuctionInsertItemPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .network.TItemPos cell = 1;
  if (this->_internal_has_cell()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::cell(this),
        _Internal::cell(this).GetCachedSize(), target, stream);
  }

  // .network.TItemPos target_cell = 2;
  if (this->_internal_has_target_cell()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::target_cell(this),
        _Internal::target_cell(this).GetCachedSize(), target, stream);
  }

  // uint64 price = 3;
  if (this->_internal_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_price(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGAuctionInsertItemPacket)
  return target;
}

size_t CGAuctionInsertItemPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGAuctionInsertItemPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .network.TItemPos cell = 1;
  if (this->_internal_has_cell()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cell_);
  }

  // .network.TItemPos target_cell = 2;
  if (this->_internal_has_target_cell()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.target_cell_);
  }

  // uint64 price = 3;
  if (this->_internal_price() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_price());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGAuctionInsertItemPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGAuctionInsertItemPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGAuctionInsertItemPacket::GetClassData() const { return &_class_data_; }


void CGAuctionInsertItemPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGAuctionInsertItemPacket*>(&to_msg);
  auto& from = static_cast<const CGAuctionInsertItemPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGAuctionInsertItemPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_cell()) {
    _this->_internal_mutable_cell()->::network::TItemPos::MergeFrom(
        from._internal_cell());
  }
  if (from._internal_has_target_cell()) {
    _this->_internal_mutable_target_cell()->::network::TItemPos::MergeFrom(
        from._internal_target_cell());
  }
  if (from._internal_price() != 0) {
    _this->_internal_set_price(from._internal_price());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGAuctionInsertItemPacket::CopyFrom(const CGAuctionInsertItemPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGAuctionInsertItemPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGAuctionInsertItemPacket::IsInitialized() const {
  return true;
}

void CGAuctionInsertItemPacket::InternalSwap(CGAuctionInsertItemPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGAuctionInsertItemPacket, _impl_.price_)
      + sizeof(CGAuctionInsertItemPacket::_impl_.price_)
      - PROTOBUF_FIELD_OFFSET(CGAuctionInsertItemPacket, _impl_.cell_)>(
          reinterpret_cast<char*>(&_impl_.cell_),
          reinterpret_cast<char*>(&other->_impl_.cell_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGAuctionInsertItemPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[57]);
}

// ===================================================================

class CGAuctionTakeItemPacket::_Internal {
 public:
};

CGAuctionTakeItemPacket::CGAuctionTakeItemPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGAuctionTakeItemPacket)
}
CGAuctionTakeItemPacket::CGAuctionTakeItemPacket(const CGAuctionTakeItemPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGAuctionTakeItemPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.item_id_){}
    , decltype(_impl_.inventory_pos_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.item_id_, &from._impl_.item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.inventory_pos_) -
    reinterpret_cast<char*>(&_impl_.item_id_)) + sizeof(_impl_.inventory_pos_));
  // @@protoc_insertion_point(copy_constructor:network.CGAuctionTakeItemPacket)
}

inline void CGAuctionTakeItemPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.item_id_){0u}
    , decltype(_impl_.inventory_pos_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CGAuctionTakeItemPacket::~CGAuctionTakeItemPacket() {
  // @@protoc_insertion_point(destructor:network.CGAuctionTakeItemPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGAuctionTakeItemPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CGAuctionTakeItemPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGAuctionTakeItemPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGAuctionTakeItemPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.item_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.inventory_pos_) -
      reinterpret_cast<char*>(&_impl_.item_id_)) + sizeof(_impl_.inventory_pos_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGAuctionTakeItemPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 inventory_pos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.inventory_pos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGAuctionTakeItemPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGAuctionTakeItemPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 item_id = 1;
  if (this->_internal_item_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_item_id(), target);
  }

  // uint32 inventory_pos = 2;
  if (this->_internal_inventory_pos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_inventory_pos(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGAuctionTakeItemPacket)
  return target;
}

size_t CGAuctionTakeItemPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGAuctionTakeItemPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 item_id = 1;
  if (this->_internal_item_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_item_id());
  }

  // uint32 inventory_pos = 2;
  if (this->_internal_inventory_pos() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_inventory_pos());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGAuctionTakeItemPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGAuctionTakeItemPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGAuctionTakeItemPacket::GetClassData() const { return &_class_data_; }


void CGAuctionTakeItemPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGAuctionTakeItemPacket*>(&to_msg);
  auto& from = static_cast<const CGAuctionTakeItemPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGAuctionTakeItemPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_item_id() != 0) {
    _this->_internal_set_item_id(from._internal_item_id());
  }
  if (from._internal_inventory_pos() != 0) {
    _this->_internal_set_inventory_pos(from._internal_inventory_pos());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGAuctionTakeItemPacket::CopyFrom(const CGAuctionTakeItemPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGAuctionTakeItemPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGAuctionTakeItemPacket::IsInitialized() const {
  return true;
}

void CGAuctionTakeItemPacket::InternalSwap(CGAuctionTakeItemPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGAuctionTakeItemPacket, _impl_.inventory_pos_)
      + sizeof(CGAuctionTakeItemPacket::_impl_.inventory_pos_)
      - PROTOBUF_FIELD_OFFSET(CGAuctionTakeItemPacket, _impl_.item_id_)>(
          reinterpret_cast<char*>(&_impl_.item_id_),
          reinterpret_cast<char*>(&other->_impl_.item_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGAuctionTakeItemPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[58]);
}

// ===================================================================

class CGAuctionBuyItemPacket::_Internal {
 public:
};

CGAuctionBuyItemPacket::CGAuctionBuyItemPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGAuctionBuyItemPacket)
}
CGAuctionBuyItemPacket::CGAuctionBuyItemPacket(const CGAuctionBuyItemPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGAuctionBuyItemPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.price_){}
    , decltype(_impl_.item_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.price_, &from._impl_.price_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.item_id_) -
    reinterpret_cast<char*>(&_impl_.price_)) + sizeof(_impl_.item_id_));
  // @@protoc_insertion_point(copy_constructor:network.CGAuctionBuyItemPacket)
}

inline void CGAuctionBuyItemPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.price_){uint64_t{0u}}
    , decltype(_impl_.item_id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CGAuctionBuyItemPacket::~CGAuctionBuyItemPacket() {
  // @@protoc_insertion_point(destructor:network.CGAuctionBuyItemPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGAuctionBuyItemPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CGAuctionBuyItemPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGAuctionBuyItemPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGAuctionBuyItemPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.item_id_) -
      reinterpret_cast<char*>(&_impl_.price_)) + sizeof(_impl_.item_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGAuctionBuyItemPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 price = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGAuctionBuyItemPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGAuctionBuyItemPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 item_id = 1;
  if (this->_internal_item_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_item_id(), target);
  }

  // uint64 price = 2;
  if (this->_internal_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_price(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGAuctionBuyItemPacket)
  return target;
}

size_t CGAuctionBuyItemPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGAuctionBuyItemPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 price = 2;
  if (this->_internal_price() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_price());
  }

  // uint32 item_id = 1;
  if (this->_internal_item_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_item_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGAuctionBuyItemPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGAuctionBuyItemPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGAuctionBuyItemPacket::GetClassData() const { return &_class_data_; }


void CGAuctionBuyItemPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGAuctionBuyItemPacket*>(&to_msg);
  auto& from = static_cast<const CGAuctionBuyItemPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGAuctionBuyItemPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_price() != 0) {
    _this->_internal_set_price(from._internal_price());
  }
  if (from._internal_item_id() != 0) {
    _this->_internal_set_item_id(from._internal_item_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGAuctionBuyItemPacket::CopyFrom(const CGAuctionBuyItemPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGAuctionBuyItemPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGAuctionBuyItemPacket::IsInitialized() const {
  return true;
}

void CGAuctionBuyItemPacket::InternalSwap(CGAuctionBuyItemPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGAuctionBuyItemPacket, _impl_.item_id_)
      + sizeof(CGAuctionBuyItemPacket::_impl_.item_id_)
      - PROTOBUF_FIELD_OFFSET(CGAuctionBuyItemPacket, _impl_.price_)>(
          reinterpret_cast<char*>(&_impl_.price_),
          reinterpret_cast<char*>(&other->_impl_.price_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGAuctionBuyItemPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[59]);
}

// ===================================================================

class CGAuctionTakeGoldPacket::_Internal {
 public:
};

CGAuctionTakeGoldPacket::CGAuctionTakeGoldPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGAuctionTakeGoldPacket)
}
CGAuctionTakeGoldPacket::CGAuctionTakeGoldPacket(const CGAuctionTakeGoldPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGAuctionTakeGoldPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.gold_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.gold_ = from._impl_.gold_;
  // @@protoc_insertion_point(copy_constructor:network.CGAuctionTakeGoldPacket)
}

inline void CGAuctionTakeGoldPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.gold_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CGAuctionTakeGoldPacket::~CGAuctionTakeGoldPacket() {
  // @@protoc_insertion_point(destructor:network.CGAuctionTakeGoldPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGAuctionTakeGoldPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CGAuctionTakeGoldPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGAuctionTakeGoldPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGAuctionTakeGoldPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.gold_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGAuctionTakeGoldPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 gold = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGAuctionTakeGoldPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGAuctionTakeGoldPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 gold = 1;
  if (this->_internal_gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_gold(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGAuctionTakeGoldPacket)
  return target;
}

size_t CGAuctionTakeGoldPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGAuctionTakeGoldPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 gold = 1;
  if (this->_internal_gold() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_gold());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGAuctionTakeGoldPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGAuctionTakeGoldPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGAuctionTakeGoldPacket::GetClassData() const { return &_class_data_; }


void CGAuctionTakeGoldPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGAuctionTakeGoldPacket*>(&to_msg);
  auto& from = static_cast<const CGAuctionTakeGoldPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGAuctionTakeGoldPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_gold() != 0) {
    _this->_internal_set_gold(from._internal_gold());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGAuctionTakeGoldPacket::CopyFrom(const CGAuctionTakeGoldPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGAuctionTakeGoldPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGAuctionTakeGoldPacket::IsInitialized() const {
  return true;
}

void CGAuctionTakeGoldPacket::InternalSwap(CGAuctionTakeGoldPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.gold_, other->_impl_.gold_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGAuctionTakeGoldPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[60]);
}

// ===================================================================

class CGAuctionSearchItemsPacket::_Internal {
 public:
  static const ::network::TDataAuctionSearch& options(const CGAuctionSearchItemsPacket* msg);
};

const ::network::TDataAuctionSearch&
CGAuctionSearchItemsPacket::_Internal::options(const CGAuctionSearchItemsPacket* msg) {
  return *msg->_impl_.options_;
}
void CGAuctionSearchItemsPacket::clear_options() {
  if (GetArenaForAllocation() == nullptr && _impl_.options_ != nullptr) {
    delete _impl_.options_;
  }
  _impl_.options_ = nullptr;
}
CGAuctionSearchItemsPacket::CGAuctionSearchItemsPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGAuctionSearchItemsPacket)
}
CGAuctionSearchItemsPacket::CGAuctionSearchItemsPacket(const CGAuctionSearchItemsPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGAuctionSearchItemsPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.options_){nullptr}
    , decltype(_impl_.page_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_options()) {
    _this->_impl_.options_ = new ::network::TDataAuctionSearch(*from._impl_.options_);
  }
  _this->_impl_.page_ = from._impl_.page_;
  // @@protoc_insertion_point(copy_constructor:network.CGAuctionSearchItemsPacket)
}

inline void CGAuctionSearchItemsPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.options_){nullptr}
    , decltype(_impl_.page_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CGAuctionSearchItemsPacket::~CGAuctionSearchItemsPacket() {
  // @@protoc_insertion_point(destructor:network.CGAuctionSearchItemsPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGAuctionSearchItemsPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.options_;
}

void CGAuctionSearchItemsPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGAuctionSearchItemsPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGAuctionSearchItemsPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.options_ != nullptr) {
    delete _impl_.options_;
  }
  _impl_.options_ = nullptr;
  _impl_.page_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGAuctionSearchItemsPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 page = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .network.TDataAuctionSearch options = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_options(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGAuctionSearchItemsPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGAuctionSearchItemsPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 page = 1;
  if (this->_internal_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_page(), target);
  }

  // .network.TDataAuctionSearch options = 2;
  if (this->_internal_has_options()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::options(this),
        _Internal::options(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGAuctionSearchItemsPacket)
  return target;
}

size_t CGAuctionSearchItemsPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGAuctionSearchItemsPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .network.TDataAuctionSearch options = 2;
  if (this->_internal_has_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.options_);
  }

  // uint32 page = 1;
  if (this->_internal_page() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_page());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGAuctionSearchItemsPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGAuctionSearchItemsPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGAuctionSearchItemsPacket::GetClassData() const { return &_class_data_; }


void CGAuctionSearchItemsPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGAuctionSearchItemsPacket*>(&to_msg);
  auto& from = static_cast<const CGAuctionSearchItemsPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGAuctionSearchItemsPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_options()) {
    _this->_internal_mutable_options()->::network::TDataAuctionSearch::MergeFrom(
        from._internal_options());
  }
  if (from._internal_page() != 0) {
    _this->_internal_set_page(from._internal_page());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGAuctionSearchItemsPacket::CopyFrom(const CGAuctionSearchItemsPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGAuctionSearchItemsPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGAuctionSearchItemsPacket::IsInitialized() const {
  return true;
}

void CGAuctionSearchItemsPacket::InternalSwap(CGAuctionSearchItemsPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGAuctionSearchItemsPacket, _impl_.page_)
      + sizeof(CGAuctionSearchItemsPacket::_impl_.page_)
      - PROTOBUF_FIELD_OFFSET(CGAuctionSearchItemsPacket, _impl_.options_)>(
          reinterpret_cast<char*>(&_impl_.options_),
          reinterpret_cast<char*>(&other->_impl_.options_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGAuctionSearchItemsPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[61]);
}

// ===================================================================

class CGAuctionExtendedSearchItemsPacket::_Internal {
 public:
  static const ::network::TExtendedDataAuctionSearch& options(const CGAuctionExtendedSearchItemsPacket* msg);
};

const ::network::TExtendedDataAuctionSearch&
CGAuctionExtendedSearchItemsPacket::_Internal::options(const CGAuctionExtendedSearchItemsPacket* msg) {
  return *msg->_impl_.options_;
}
void CGAuctionExtendedSearchItemsPacket::clear_options() {
  if (GetArenaForAllocation() == nullptr && _impl_.options_ != nullptr) {
    delete _impl_.options_;
  }
  _impl_.options_ = nullptr;
}
CGAuctionExtendedSearchItemsPacket::CGAuctionExtendedSearchItemsPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGAuctionExtendedSearchItemsPacket)
}
CGAuctionExtendedSearchItemsPacket::CGAuctionExtendedSearchItemsPacket(const CGAuctionExtendedSearchItemsPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGAuctionExtendedSearchItemsPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.options_){nullptr}
    , decltype(_impl_.page_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_options()) {
    _this->_impl_.options_ = new ::network::TExtendedDataAuctionSearch(*from._impl_.options_);
  }
  _this->_impl_.page_ = from._impl_.page_;
  // @@protoc_insertion_point(copy_constructor:network.CGAuctionExtendedSearchItemsPacket)
}

inline void CGAuctionExtendedSearchItemsPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.options_){nullptr}
    , decltype(_impl_.page_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CGAuctionExtendedSearchItemsPacket::~CGAuctionExtendedSearchItemsPacket() {
  // @@protoc_insertion_point(destructor:network.CGAuctionExtendedSearchItemsPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGAuctionExtendedSearchItemsPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.options_;
}

void CGAuctionExtendedSearchItemsPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGAuctionExtendedSearchItemsPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGAuctionExtendedSearchItemsPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.options_ != nullptr) {
    delete _impl_.options_;
  }
  _impl_.options_ = nullptr;
  _impl_.page_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGAuctionExtendedSearchItemsPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 page = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .network.TExtendedDataAuctionSearch options = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_options(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGAuctionExtendedSearchItemsPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGAuctionExtendedSearchItemsPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 page = 1;
  if (this->_internal_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_page(), target);
  }

  // .network.TExtendedDataAuctionSearch options = 2;
  if (this->_internal_has_options()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::options(this),
        _Internal::options(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGAuctionExtendedSearchItemsPacket)
  return target;
}

size_t CGAuctionExtendedSearchItemsPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGAuctionExtendedSearchItemsPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .network.TExtendedDataAuctionSearch options = 2;
  if (this->_internal_has_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.options_);
  }

  // uint32 page = 1;
  if (this->_internal_page() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_page());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGAuctionExtendedSearchItemsPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGAuctionExtendedSearchItemsPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGAuctionExtendedSearchItemsPacket::GetClassData() const { return &_class_data_; }


void CGAuctionExtendedSearchItemsPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGAuctionExtendedSearchItemsPacket*>(&to_msg);
  auto& from = static_cast<const CGAuctionExtendedSearchItemsPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGAuctionExtendedSearchItemsPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_options()) {
    _this->_internal_mutable_options()->::network::TExtendedDataAuctionSearch::MergeFrom(
        from._internal_options());
  }
  if (from._internal_page() != 0) {
    _this->_internal_set_page(from._internal_page());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGAuctionExtendedSearchItemsPacket::CopyFrom(const CGAuctionExtendedSearchItemsPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGAuctionExtendedSearchItemsPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGAuctionExtendedSearchItemsPacket::IsInitialized() const {
  return true;
}

void CGAuctionExtendedSearchItemsPacket::InternalSwap(CGAuctionExtendedSearchItemsPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGAuctionExtendedSearchItemsPacket, _impl_.page_)
      + sizeof(CGAuctionExtendedSearchItemsPacket::_impl_.page_)
      - PROTOBUF_FIELD_OFFSET(CGAuctionExtendedSearchItemsPacket, _impl_.options_)>(
          reinterpret_cast<char*>(&_impl_.options_),
          reinterpret_cast<char*>(&other->_impl_.options_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGAuctionExtendedSearchItemsPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[62]);
}

// ===================================================================

class CGAuctionMarkShopPacket::_Internal {
 public:
};

CGAuctionMarkShopPacket::CGAuctionMarkShopPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGAuctionMarkShopPacket)
}
CGAuctionMarkShopPacket::CGAuctionMarkShopPacket(const CGAuctionMarkShopPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGAuctionMarkShopPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.item_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.item_id_ = from._impl_.item_id_;
  // @@protoc_insertion_point(copy_constructor:network.CGAuctionMarkShopPacket)
}

inline void CGAuctionMarkShopPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.item_id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CGAuctionMarkShopPacket::~CGAuctionMarkShopPacket() {
  // @@protoc_insertion_point(destructor:network.CGAuctionMarkShopPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGAuctionMarkShopPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CGAuctionMarkShopPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGAuctionMarkShopPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGAuctionMarkShopPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.item_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGAuctionMarkShopPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGAuctionMarkShopPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGAuctionMarkShopPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 item_id = 1;
  if (this->_internal_item_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_item_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGAuctionMarkShopPacket)
  return target;
}

size_t CGAuctionMarkShopPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGAuctionMarkShopPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 item_id = 1;
  if (this->_internal_item_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_item_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGAuctionMarkShopPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGAuctionMarkShopPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGAuctionMarkShopPacket::GetClassData() const { return &_class_data_; }


void CGAuctionMarkShopPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGAuctionMarkShopPacket*>(&to_msg);
  auto& from = static_cast<const CGAuctionMarkShopPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGAuctionMarkShopPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_item_id() != 0) {
    _this->_internal_set_item_id(from._internal_item_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGAuctionMarkShopPacket::CopyFrom(const CGAuctionMarkShopPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGAuctionMarkShopPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGAuctionMarkShopPacket::IsInitialized() const {
  return true;
}

void CGAuctionMarkShopPacket::InternalSwap(CGAuctionMarkShopPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.item_id_, other->_impl_.item_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGAuctionMarkShopPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[63]);
}

// ===================================================================

class CGAuctionShopOpenPacket::_Internal {
 public:
};

void CGAuctionShopOpenPacket::clear_items() {
  _impl_.items_.Clear();
}
CGAuctionShopOpenPacket::CGAuctionShopOpenPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGAuctionShopOpenPacket)
}
CGAuctionShopOpenPacket::CGAuctionShopOpenPacket(const CGAuctionShopOpenPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGAuctionShopOpenPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.style_){}
    , decltype(_impl_.model_){}
    , decltype(_impl_.color_red_){}
    , decltype(_impl_.color_green_){}
    , decltype(_impl_.color_blue_){}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.style_, &from._impl_.style_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.y_) -
    reinterpret_cast<char*>(&_impl_.style_)) + sizeof(_impl_.y_));
  // @@protoc_insertion_point(copy_constructor:network.CGAuctionShopOpenPacket)
}

inline void CGAuctionShopOpenPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.style_){0u}
    , decltype(_impl_.model_){0u}
    , decltype(_impl_.color_red_){0}
    , decltype(_impl_.color_green_){0}
    , decltype(_impl_.color_blue_){0}
    , decltype(_impl_.x_){0u}
    , decltype(_impl_.y_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CGAuctionShopOpenPacket::~CGAuctionShopOpenPacket() {
  // @@protoc_insertion_point(destructor:network.CGAuctionShopOpenPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGAuctionShopOpenPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
  _impl_.name_.Destroy();
}

void CGAuctionShopOpenPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGAuctionShopOpenPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGAuctionShopOpenPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  _impl_.name_.ClearToEmpty();
  ::memset(&_impl_.style_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.y_) -
      reinterpret_cast<char*>(&_impl_.style_)) + sizeof(_impl_.y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGAuctionShopOpenPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 style = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.style_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 model = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.model_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float color_red = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.color_red_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float color_green = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.color_green_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float color_blue = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.color_blue_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // uint32 x = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 y = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .network.TShopItemTable items = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGAuctionShopOpenPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGAuctionShopOpenPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes name = 1;
  if (!this->_internal_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_name(), target);
  }

  // uint32 style = 2;
  if (this->_internal_style() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_style(), target);
  }

  // uint32 model = 3;
  if (this->_internal_model() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_model(), target);
  }

  // float color_red = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_color_red = this->_internal_color_red();
  uint32_t raw_color_red;
  memcpy(&raw_color_red, &tmp_color_red, sizeof(tmp_color_red));
  if (raw_color_red != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_color_red(), target);
  }

  // float color_green = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_color_green = this->_internal_color_green();
  uint32_t raw_color_green;
  memcpy(&raw_color_green, &tmp_color_green, sizeof(tmp_color_green));
  if (raw_color_green != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_color_green(), target);
  }

  // float color_blue = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_color_blue = this->_internal_color_blue();
  uint32_t raw_color_blue;
  memcpy(&raw_color_blue, &tmp_color_blue, sizeof(tmp_color_blue));
  if (raw_color_blue != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_color_blue(), target);
  }

  // uint32 x = 7;
  if (this->_internal_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_x(), target);
  }

  // uint32 y = 8;
  if (this->_internal_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_y(), target);
  }

  // repeated .network.TShopItemTable items = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGAuctionShopOpenPacket)
  return target;
}

size_t CGAuctionShopOpenPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGAuctionShopOpenPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .network.TShopItemTable items = 9;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // uint32 style = 2;
  if (this->_internal_style() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_style());
  }

  // uint32 model = 3;
  if (this->_internal_model() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_model());
  }

  // float color_red = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_color_red = this->_internal_color_red();
  uint32_t raw_color_red;
  memcpy(&raw_color_red, &tmp_color_red, sizeof(tmp_color_red));
  if (raw_color_red != 0) {
    total_size += 1 + 4;
  }

  // float color_green = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_color_green = this->_internal_color_green();
  uint32_t raw_color_green;
  memcpy(&raw_color_green, &tmp_color_green, sizeof(tmp_color_green));
  if (raw_color_green != 0) {
    total_size += 1 + 4;
  }

  // float color_blue = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_color_blue = this->_internal_color_blue();
  uint32_t raw_color_blue;
  memcpy(&raw_color_blue, &tmp_color_blue, sizeof(tmp_color_blue));
  if (raw_color_blue != 0) {
    total_size += 1 + 4;
  }

  // uint32 x = 7;
  if (this->_internal_x() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_x());
  }

  // uint32 y = 8;
  if (this->_internal_y() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_y());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGAuctionShopOpenPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGAuctionShopOpenPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGAuctionShopOpenPacket::GetClassData() const { return &_class_data_; }


void CGAuctionShopOpenPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGAuctionShopOpenPacket*>(&to_msg);
  auto& from = static_cast<const CGAuctionShopOpenPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGAuctionShopOpenPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_style() != 0) {
    _this->_internal_set_style(from._internal_style());
  }
  if (from._internal_model() != 0) {
    _this->_internal_set_model(from._internal_model());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_color_red = from._internal_color_red();
  uint32_t raw_color_red;
  memcpy(&raw_color_red, &tmp_color_red, sizeof(tmp_color_red));
  if (raw_color_red != 0) {
    _this->_internal_set_color_red(from._internal_color_red());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_color_green = from._internal_color_green();
  uint32_t raw_color_green;
  memcpy(&raw_color_green, &tmp_color_green, sizeof(tmp_color_green));
  if (raw_color_green != 0) {
    _this->_internal_set_color_green(from._internal_color_green());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_color_blue = from._internal_color_blue();
  uint32_t raw_color_blue;
  memcpy(&raw_color_blue, &tmp_color_blue, sizeof(tmp_color_blue));
  if (raw_color_blue != 0) {
    _this->_internal_set_color_blue(from._internal_color_blue());
  }
  if (from._internal_x() != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  if (from._internal_y() != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGAuctionShopOpenPacket::CopyFrom(const CGAuctionShopOpenPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGAuctionShopOpenPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGAuctionShopOpenPacket::IsInitialized() const {
  return true;
}

void CGAuctionShopOpenPacket::InternalSwap(CGAuctionShopOpenPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGAuctionShopOpenPacket, _impl_.y_)
      + sizeof(CGAuctionShopOpenPacket::_impl_.y_)
      - PROTOBUF_FIELD_OFFSET(CGAuctionShopOpenPacket, _impl_.style_)>(
          reinterpret_cast<char*>(&_impl_.style_),
          reinterpret_cast<char*>(&other->_impl_.style_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGAuctionShopOpenPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[64]);
}

// ===================================================================

class CGAuctionShopClosePacket::_Internal {
 public:
};

CGAuctionShopClosePacket::CGAuctionShopClosePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGAuctionShopClosePacket)
}
CGAuctionShopClosePacket::CGAuctionShopClosePacket(const CGAuctionShopClosePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGAuctionShopClosePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.has_items_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.has_items_ = from._impl_.has_items_;
  // @@protoc_insertion_point(copy_constructor:network.CGAuctionShopClosePacket)
}

inline void CGAuctionShopClosePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.has_items_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CGAuctionShopClosePacket::~CGAuctionShopClosePacket() {
  // @@protoc_insertion_point(destructor:network.CGAuctionShopClosePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGAuctionShopClosePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CGAuctionShopClosePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGAuctionShopClosePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGAuctionShopClosePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.has_items_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGAuctionShopClosePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool has_items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.has_items_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGAuctionShopClosePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGAuctionShopClosePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool has_items = 1;
  if (this->_internal_has_items() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_has_items(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGAuctionShopClosePacket)
  return target;
}

size_t CGAuctionShopClosePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGAuctionShopClosePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool has_items = 1;
  if (this->_internal_has_items() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGAuctionShopClosePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGAuctionShopClosePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGAuctionShopClosePacket::GetClassData() const { return &_class_data_; }


void CGAuctionShopClosePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGAuctionShopClosePacket*>(&to_msg);
  auto& from = static_cast<const CGAuctionShopClosePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGAuctionShopClosePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_items() != 0) {
    _this->_internal_set_has_items(from._internal_has_items());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGAuctionShopClosePacket::CopyFrom(const CGAuctionShopClosePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGAuctionShopClosePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGAuctionShopClosePacket::IsInitialized() const {
  return true;
}

void CGAuctionShopClosePacket::InternalSwap(CGAuctionShopClosePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.has_items_, other->_impl_.has_items_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGAuctionShopClosePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[65]);
}

// ===================================================================

class CGAuctionShopTakeGoldPacket::_Internal {
 public:
};

CGAuctionShopTakeGoldPacket::CGAuctionShopTakeGoldPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGAuctionShopTakeGoldPacket)
}
CGAuctionShopTakeGoldPacket::CGAuctionShopTakeGoldPacket(const CGAuctionShopTakeGoldPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGAuctionShopTakeGoldPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.gold_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.gold_ = from._impl_.gold_;
  // @@protoc_insertion_point(copy_constructor:network.CGAuctionShopTakeGoldPacket)
}

inline void CGAuctionShopTakeGoldPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.gold_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CGAuctionShopTakeGoldPacket::~CGAuctionShopTakeGoldPacket() {
  // @@protoc_insertion_point(destructor:network.CGAuctionShopTakeGoldPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGAuctionShopTakeGoldPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CGAuctionShopTakeGoldPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGAuctionShopTakeGoldPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGAuctionShopTakeGoldPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.gold_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGAuctionShopTakeGoldPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 gold = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGAuctionShopTakeGoldPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGAuctionShopTakeGoldPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 gold = 1;
  if (this->_internal_gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_gold(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGAuctionShopTakeGoldPacket)
  return target;
}

size_t CGAuctionShopTakeGoldPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGAuctionShopTakeGoldPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 gold = 1;
  if (this->_internal_gold() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_gold());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGAuctionShopTakeGoldPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGAuctionShopTakeGoldPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGAuctionShopTakeGoldPacket::GetClassData() const { return &_class_data_; }


void CGAuctionShopTakeGoldPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGAuctionShopTakeGoldPacket*>(&to_msg);
  auto& from = static_cast<const CGAuctionShopTakeGoldPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGAuctionShopTakeGoldPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_gold() != 0) {
    _this->_internal_set_gold(from._internal_gold());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGAuctionShopTakeGoldPacket::CopyFrom(const CGAuctionShopTakeGoldPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGAuctionShopTakeGoldPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGAuctionShopTakeGoldPacket::IsInitialized() const {
  return true;
}

void CGAuctionShopTakeGoldPacket::InternalSwap(CGAuctionShopTakeGoldPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.gold_, other->_impl_.gold_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGAuctionShopTakeGoldPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[66]);
}

// ===================================================================

class CGAuctionRequestAveragePricePacket::_Internal {
 public:
};

CGAuctionRequestAveragePricePacket::CGAuctionRequestAveragePricePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGAuctionRequestAveragePricePacket)
}
CGAuctionRequestAveragePricePacket::CGAuctionRequestAveragePricePacket(const CGAuctionRequestAveragePricePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGAuctionRequestAveragePricePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.requestor_){}
    , decltype(_impl_.vnum_){}
    , decltype(_impl_.count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.requestor_, &from._impl_.requestor_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.count_) -
    reinterpret_cast<char*>(&_impl_.requestor_)) + sizeof(_impl_.count_));
  // @@protoc_insertion_point(copy_constructor:network.CGAuctionRequestAveragePricePacket)
}

inline void CGAuctionRequestAveragePricePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.requestor_){0u}
    , decltype(_impl_.vnum_){0u}
    , decltype(_impl_.count_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CGAuctionRequestAveragePricePacket::~CGAuctionRequestAveragePricePacket() {
  // @@protoc_insertion_point(destructor:network.CGAuctionRequestAveragePricePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGAuctionRequestAveragePricePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CGAuctionRequestAveragePricePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGAuctionRequestAveragePricePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGAuctionRequestAveragePricePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.requestor_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.count_) -
      reinterpret_cast<char*>(&_impl_.requestor_)) + sizeof(_impl_.count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGAuctionRequestAveragePricePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 requestor = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.requestor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 vnum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.vnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGAuctionRequestAveragePricePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGAuctionRequestAveragePricePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 requestor = 1;
  if (this->_internal_requestor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_requestor(), target);
  }

  // uint32 vnum = 2;
  if (this->_internal_vnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_vnum(), target);
  }

  // uint32 count = 3;
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGAuctionRequestAveragePricePacket)
  return target;
}

size_t CGAuctionRequestAveragePricePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGAuctionRequestAveragePricePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 requestor = 1;
  if (this->_internal_requestor() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_requestor());
  }

  // uint32 vnum = 2;
  if (this->_internal_vnum() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_vnum());
  }

  // uint32 count = 3;
  if (this->_internal_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGAuctionRequestAveragePricePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGAuctionRequestAveragePricePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGAuctionRequestAveragePricePacket::GetClassData() const { return &_class_data_; }


void CGAuctionRequestAveragePricePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGAuctionRequestAveragePricePacket*>(&to_msg);
  auto& from = static_cast<const CGAuctionRequestAveragePricePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGAuctionRequestAveragePricePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_requestor() != 0) {
    _this->_internal_set_requestor(from._internal_requestor());
  }
  if (from._internal_vnum() != 0) {
    _this->_internal_set_vnum(from._internal_vnum());
  }
  if (from._internal_count() != 0) {
    _this->_internal_set_count(from._internal_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGAuctionRequestAveragePricePacket::CopyFrom(const CGAuctionRequestAveragePricePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGAuctionRequestAveragePricePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGAuctionRequestAveragePricePacket::IsInitialized() const {
  return true;
}

void CGAuctionRequestAveragePricePacket::InternalSwap(CGAuctionRequestAveragePricePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGAuctionRequestAveragePricePacket, _impl_.count_)
      + sizeof(CGAuctionRequestAveragePricePacket::_impl_.count_)
      - PROTOBUF_FIELD_OFFSET(CGAuctionRequestAveragePricePacket, _impl_.requestor_)>(
          reinterpret_cast<char*>(&_impl_.requestor_),
          reinterpret_cast<char*>(&other->_impl_.requestor_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGAuctionRequestAveragePricePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[67]);
}

// ===================================================================

class CGScriptAnswerPacket::_Internal {
 public:
};

CGScriptAnswerPacket::CGScriptAnswerPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGScriptAnswerPacket)
}
CGScriptAnswerPacket::CGScriptAnswerPacket(const CGScriptAnswerPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGScriptAnswerPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.answer_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.answer_ = from._impl_.answer_;
  // @@protoc_insertion_point(copy_constructor:network.CGScriptAnswerPacket)
}

inline void CGScriptAnswerPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.answer_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CGScriptAnswerPacket::~CGScriptAnswerPacket() {
  // @@protoc_insertion_point(destructor:network.CGScriptAnswerPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGScriptAnswerPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CGScriptAnswerPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGScriptAnswerPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGScriptAnswerPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.answer_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGScriptAnswerPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 answer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.answer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGScriptAnswerPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGScriptAnswerPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 answer = 1;
  if (this->_internal_answer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_answer(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGScriptAnswerPacket)
  return target;
}

size_t CGScriptAnswerPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGScriptAnswerPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 answer = 1;
  if (this->_internal_answer() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_answer());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGScriptAnswerPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGScriptAnswerPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGScriptAnswerPacket::GetClassData() const { return &_class_data_; }


void CGScriptAnswerPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGScriptAnswerPacket*>(&to_msg);
  auto& from = static_cast<const CGScriptAnswerPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGScriptAnswerPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_answer() != 0) {
    _this->_internal_set_answer(from._internal_answer());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGScriptAnswerPacket::CopyFrom(const CGScriptAnswerPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGScriptAnswerPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGScriptAnswerPacket::IsInitialized() const {
  return true;
}

void CGScriptAnswerPacket::InternalSwap(CGScriptAnswerPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.answer_, other->_impl_.answer_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGScriptAnswerPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[68]);
}

// ===================================================================

class CGScriptButtonPacket::_Internal {
 public:
};

CGScriptButtonPacket::CGScriptButtonPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGScriptButtonPacket)
}
CGScriptButtonPacket::CGScriptButtonPacket(const CGScriptButtonPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGScriptButtonPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.index_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.index_ = from._impl_.index_;
  // @@protoc_insertion_point(copy_constructor:network.CGScriptButtonPacket)
}

inline void CGScriptButtonPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.index_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CGScriptButtonPacket::~CGScriptButtonPacket() {
  // @@protoc_insertion_point(destructor:network.CGScriptButtonPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGScriptButtonPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CGScriptButtonPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGScriptButtonPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGScriptButtonPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.index_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGScriptButtonPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGScriptButtonPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGScriptButtonPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 index = 1;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGScriptButtonPacket)
  return target;
}

size_t CGScriptButtonPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGScriptButtonPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 index = 1;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGScriptButtonPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGScriptButtonPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGScriptButtonPacket::GetClassData() const { return &_class_data_; }


void CGScriptButtonPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGScriptButtonPacket*>(&to_msg);
  auto& from = static_cast<const CGScriptButtonPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGScriptButtonPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGScriptButtonPacket::CopyFrom(const CGScriptButtonPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGScriptButtonPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGScriptButtonPacket::IsInitialized() const {
  return true;
}

void CGScriptButtonPacket::InternalSwap(CGScriptButtonPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.index_, other->_impl_.index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGScriptButtonPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[69]);
}

// ===================================================================

class CGScriptSelectItemPacket::_Internal {
 public:
};

CGScriptSelectItemPacket::CGScriptSelectItemPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGScriptSelectItemPacket)
}
CGScriptSelectItemPacket::CGScriptSelectItemPacket(const CGScriptSelectItemPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGScriptSelectItemPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.selection_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.selection_ = from._impl_.selection_;
  // @@protoc_insertion_point(copy_constructor:network.CGScriptSelectItemPacket)
}

inline void CGScriptSelectItemPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.selection_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CGScriptSelectItemPacket::~CGScriptSelectItemPacket() {
  // @@protoc_insertion_point(destructor:network.CGScriptSelectItemPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGScriptSelectItemPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CGScriptSelectItemPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGScriptSelectItemPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGScriptSelectItemPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.selection_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGScriptSelectItemPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 selection = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.selection_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGScriptSelectItemPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGScriptSelectItemPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 selection = 1;
  if (this->_internal_selection() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_selection(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGScriptSelectItemPacket)
  return target;
}

size_t CGScriptSelectItemPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGScriptSelectItemPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 selection = 1;
  if (this->_internal_selection() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_selection());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGScriptSelectItemPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGScriptSelectItemPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGScriptSelectItemPacket::GetClassData() const { return &_class_data_; }


void CGScriptSelectItemPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGScriptSelectItemPacket*>(&to_msg);
  auto& from = static_cast<const CGScriptSelectItemPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGScriptSelectItemPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_selection() != 0) {
    _this->_internal_set_selection(from._internal_selection());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGScriptSelectItemPacket::CopyFrom(const CGScriptSelectItemPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGScriptSelectItemPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGScriptSelectItemPacket::IsInitialized() const {
  return true;
}

void CGScriptSelectItemPacket::InternalSwap(CGScriptSelectItemPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.selection_, other->_impl_.selection_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGScriptSelectItemPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[70]);
}

// ===================================================================

class CGQuestInputStringPacket::_Internal {
 public:
};

CGQuestInputStringPacket::CGQuestInputStringPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGQuestInputStringPacket)
}
CGQuestInputStringPacket::CGQuestInputStringPacket(const CGQuestInputStringPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGQuestInputStringPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:network.CGQuestInputStringPacket)
}

inline void CGQuestInputStringPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CGQuestInputStringPacket::~CGQuestInputStringPacket() {
  // @@protoc_insertion_point(destructor:network.CGQuestInputStringPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGQuestInputStringPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
}

void CGQuestInputStringPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGQuestInputStringPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGQuestInputStringPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGQuestInputStringPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGQuestInputStringPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGQuestInputStringPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes message = 1;
  if (!this->_internal_message().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGQuestInputStringPacket)
  return target;
}

size_t CGQuestInputStringPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGQuestInputStringPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes message = 1;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_message());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGQuestInputStringPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGQuestInputStringPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGQuestInputStringPacket::GetClassData() const { return &_class_data_; }


void CGQuestInputStringPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGQuestInputStringPacket*>(&to_msg);
  auto& from = static_cast<const CGQuestInputStringPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGQuestInputStringPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGQuestInputStringPacket::CopyFrom(const CGQuestInputStringPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGQuestInputStringPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGQuestInputStringPacket::IsInitialized() const {
  return true;
}

void CGQuestInputStringPacket::InternalSwap(CGQuestInputStringPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CGQuestInputStringPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[71]);
}

// ===================================================================

class CGQuestConfirmPacket::_Internal {
 public:
};

CGQuestConfirmPacket::CGQuestConfirmPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGQuestConfirmPacket)
}
CGQuestConfirmPacket::CGQuestConfirmPacket(const CGQuestConfirmPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGQuestConfirmPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.answer_){}
    , decltype(_impl_.request_pid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.answer_, &from._impl_.answer_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.request_pid_) -
    reinterpret_cast<char*>(&_impl_.answer_)) + sizeof(_impl_.request_pid_));
  // @@protoc_insertion_point(copy_constructor:network.CGQuestConfirmPacket)
}

inline void CGQuestConfirmPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.answer_){0u}
    , decltype(_impl_.request_pid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CGQuestConfirmPacket::~CGQuestConfirmPacket() {
  // @@protoc_insertion_point(destructor:network.CGQuestConfirmPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGQuestConfirmPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CGQuestConfirmPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGQuestConfirmPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGQuestConfirmPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.answer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.request_pid_) -
      reinterpret_cast<char*>(&_impl_.answer_)) + sizeof(_impl_.request_pid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGQuestConfirmPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 answer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.answer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 request_pid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.request_pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGQuestConfirmPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGQuestConfirmPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 answer = 1;
  if (this->_internal_answer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_answer(), target);
  }

  // uint32 request_pid = 2;
  if (this->_internal_request_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_request_pid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGQuestConfirmPacket)
  return target;
}

size_t CGQuestConfirmPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGQuestConfirmPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 answer = 1;
  if (this->_internal_answer() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_answer());
  }

  // uint32 request_pid = 2;
  if (this->_internal_request_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_request_pid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGQuestConfirmPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGQuestConfirmPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGQuestConfirmPacket::GetClassData() const { return &_class_data_; }


void CGQuestConfirmPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGQuestConfirmPacket*>(&to_msg);
  auto& from = static_cast<const CGQuestConfirmPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGQuestConfirmPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_answer() != 0) {
    _this->_internal_set_answer(from._internal_answer());
  }
  if (from._internal_request_pid() != 0) {
    _this->_internal_set_request_pid(from._internal_request_pid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGQuestConfirmPacket::CopyFrom(const CGQuestConfirmPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGQuestConfirmPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGQuestConfirmPacket::IsInitialized() const {
  return true;
}

void CGQuestConfirmPacket::InternalSwap(CGQuestConfirmPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGQuestConfirmPacket, _impl_.request_pid_)
      + sizeof(CGQuestConfirmPacket::_impl_.request_pid_)
      - PROTOBUF_FIELD_OFFSET(CGQuestConfirmPacket, _impl_.answer_)>(
          reinterpret_cast<char*>(&_impl_.answer_),
          reinterpret_cast<char*>(&other->_impl_.answer_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGQuestConfirmPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[72]);
}

// ===================================================================

class CGItemUsePacket::_Internal {
 public:
  static const ::network::TItemPos& cell(const CGItemUsePacket* msg);
};

const ::network::TItemPos&
CGItemUsePacket::_Internal::cell(const CGItemUsePacket* msg) {
  return *msg->_impl_.cell_;
}
void CGItemUsePacket::clear_cell() {
  if (GetArenaForAllocation() == nullptr && _impl_.cell_ != nullptr) {
    delete _impl_.cell_;
  }
  _impl_.cell_ = nullptr;
}
CGItemUsePacket::CGItemUsePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGItemUsePacket)
}
CGItemUsePacket::CGItemUsePacket(const CGItemUsePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGItemUsePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.cell_){nullptr}
    , decltype(_impl_.count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_cell()) {
    _this->_impl_.cell_ = new ::network::TItemPos(*from._impl_.cell_);
  }
  _this->_impl_.count_ = from._impl_.count_;
  // @@protoc_insertion_point(copy_constructor:network.CGItemUsePacket)
}

inline void CGItemUsePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.cell_){nullptr}
    , decltype(_impl_.count_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CGItemUsePacket::~CGItemUsePacket() {
  // @@protoc_insertion_point(destructor:network.CGItemUsePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGItemUsePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.cell_;
}

void CGItemUsePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGItemUsePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGItemUsePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.cell_ != nullptr) {
    delete _impl_.cell_;
  }
  _impl_.cell_ = nullptr;
  _impl_.count_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGItemUsePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .network.TItemPos cell = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGItemUsePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGItemUsePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .network.TItemPos cell = 1;
  if (this->_internal_has_cell()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::cell(this),
        _Internal::cell(this).GetCachedSize(), target, stream);
  }

  // uint32 count = 2;
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGItemUsePacket)
  return target;
}

size_t CGItemUsePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGItemUsePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .network.TItemPos cell = 1;
  if (this->_internal_has_cell()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cell_);
  }

  // uint32 count = 2;
  if (this->_internal_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGItemUsePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGItemUsePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGItemUsePacket::GetClassData() const { return &_class_data_; }


void CGItemUsePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGItemUsePacket*>(&to_msg);
  auto& from = static_cast<const CGItemUsePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGItemUsePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_cell()) {
    _this->_internal_mutable_cell()->::network::TItemPos::MergeFrom(
        from._internal_cell());
  }
  if (from._internal_count() != 0) {
    _this->_internal_set_count(from._internal_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGItemUsePacket::CopyFrom(const CGItemUsePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGItemUsePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGItemUsePacket::IsInitialized() const {
  return true;
}

void CGItemUsePacket::InternalSwap(CGItemUsePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGItemUsePacket, _impl_.count_)
      + sizeof(CGItemUsePacket::_impl_.count_)
      - PROTOBUF_FIELD_OFFSET(CGItemUsePacket, _impl_.cell_)>(
          reinterpret_cast<char*>(&_impl_.cell_),
          reinterpret_cast<char*>(&other->_impl_.cell_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGItemUsePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[73]);
}

// ===================================================================

class CGItemUseToItemPacket::_Internal {
 public:
  static const ::network::TItemPos& cell(const CGItemUseToItemPacket* msg);
  static const ::network::TItemPos& target_cell(const CGItemUseToItemPacket* msg);
};

const ::network::TItemPos&
CGItemUseToItemPacket::_Internal::cell(const CGItemUseToItemPacket* msg) {
  return *msg->_impl_.cell_;
}
const ::network::TItemPos&
CGItemUseToItemPacket::_Internal::target_cell(const CGItemUseToItemPacket* msg) {
  return *msg->_impl_.target_cell_;
}
void CGItemUseToItemPacket::clear_cell() {
  if (GetArenaForAllocation() == nullptr && _impl_.cell_ != nullptr) {
    delete _impl_.cell_;
  }
  _impl_.cell_ = nullptr;
}
void CGItemUseToItemPacket::clear_target_cell() {
  if (GetArenaForAllocation() == nullptr && _impl_.target_cell_ != nullptr) {
    delete _impl_.target_cell_;
  }
  _impl_.target_cell_ = nullptr;
}
CGItemUseToItemPacket::CGItemUseToItemPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGItemUseToItemPacket)
}
CGItemUseToItemPacket::CGItemUseToItemPacket(const CGItemUseToItemPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGItemUseToItemPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.cell_){nullptr}
    , decltype(_impl_.target_cell_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_cell()) {
    _this->_impl_.cell_ = new ::network::TItemPos(*from._impl_.cell_);
  }
  if (from._internal_has_target_cell()) {
    _this->_impl_.target_cell_ = new ::network::TItemPos(*from._impl_.target_cell_);
  }
  // @@protoc_insertion_point(copy_constructor:network.CGItemUseToItemPacket)
}

inline void CGItemUseToItemPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.cell_){nullptr}
    , decltype(_impl_.target_cell_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CGItemUseToItemPacket::~CGItemUseToItemPacket() {
  // @@protoc_insertion_point(destructor:network.CGItemUseToItemPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGItemUseToItemPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.cell_;
  if (this != internal_default_instance()) delete _impl_.target_cell_;
}

void CGItemUseToItemPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGItemUseToItemPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGItemUseToItemPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.cell_ != nullptr) {
    delete _impl_.cell_;
  }
  _impl_.cell_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.target_cell_ != nullptr) {
    delete _impl_.target_cell_;
  }
  _impl_.target_cell_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGItemUseToItemPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .network.TItemPos cell = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .network.TItemPos target_cell = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_target_cell(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGItemUseToItemPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGItemUseToItemPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .network.TItemPos cell = 1;
  if (this->_internal_has_cell()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::cell(this),
        _Internal::cell(this).GetCachedSize(), target, stream);
  }

  // .network.TItemPos target_cell = 2;
  if (this->_internal_has_target_cell()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::target_cell(this),
        _Internal::target_cell(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGItemUseToItemPacket)
  return target;
}

size_t CGItemUseToItemPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGItemUseToItemPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .network.TItemPos cell = 1;
  if (this->_internal_has_cell()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cell_);
  }

  // .network.TItemPos target_cell = 2;
  if (this->_internal_has_target_cell()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.target_cell_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGItemUseToItemPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGItemUseToItemPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGItemUseToItemPacket::GetClassData() const { return &_class_data_; }


void CGItemUseToItemPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGItemUseToItemPacket*>(&to_msg);
  auto& from = static_cast<const CGItemUseToItemPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGItemUseToItemPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_cell()) {
    _this->_internal_mutable_cell()->::network::TItemPos::MergeFrom(
        from._internal_cell());
  }
  if (from._internal_has_target_cell()) {
    _this->_internal_mutable_target_cell()->::network::TItemPos::MergeFrom(
        from._internal_target_cell());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGItemUseToItemPacket::CopyFrom(const CGItemUseToItemPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGItemUseToItemPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGItemUseToItemPacket::IsInitialized() const {
  return true;
}

void CGItemUseToItemPacket::InternalSwap(CGItemUseToItemPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGItemUseToItemPacket, _impl_.target_cell_)
      + sizeof(CGItemUseToItemPacket::_impl_.target_cell_)
      - PROTOBUF_FIELD_OFFSET(CGItemUseToItemPacket, _impl_.cell_)>(
          reinterpret_cast<char*>(&_impl_.cell_),
          reinterpret_cast<char*>(&other->_impl_.cell_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGItemUseToItemPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[74]);
}

// ===================================================================

class CGItemDropPacket::_Internal {
 public:
  static const ::network::TItemPos& cell(const CGItemDropPacket* msg);
};

const ::network::TItemPos&
CGItemDropPacket::_Internal::cell(const CGItemDropPacket* msg) {
  return *msg->_impl_.cell_;
}
void CGItemDropPacket::clear_cell() {
  if (GetArenaForAllocation() == nullptr && _impl_.cell_ != nullptr) {
    delete _impl_.cell_;
  }
  _impl_.cell_ = nullptr;
}
CGItemDropPacket::CGItemDropPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGItemDropPacket)
}
CGItemDropPacket::CGItemDropPacket(const CGItemDropPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGItemDropPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.cell_){nullptr}
    , decltype(_impl_.gold_){}
    , decltype(_impl_.count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_cell()) {
    _this->_impl_.cell_ = new ::network::TItemPos(*from._impl_.cell_);
  }
  ::memcpy(&_impl_.gold_, &from._impl_.gold_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.count_) -
    reinterpret_cast<char*>(&_impl_.gold_)) + sizeof(_impl_.count_));
  // @@protoc_insertion_point(copy_constructor:network.CGItemDropPacket)
}

inline void CGItemDropPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.cell_){nullptr}
    , decltype(_impl_.gold_){0u}
    , decltype(_impl_.count_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CGItemDropPacket::~CGItemDropPacket() {
  // @@protoc_insertion_point(destructor:network.CGItemDropPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGItemDropPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.cell_;
}

void CGItemDropPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGItemDropPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGItemDropPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.cell_ != nullptr) {
    delete _impl_.cell_;
  }
  _impl_.cell_ = nullptr;
  ::memset(&_impl_.gold_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.count_) -
      reinterpret_cast<char*>(&_impl_.gold_)) + sizeof(_impl_.count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGItemDropPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .network.TItemPos cell = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 gold = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGItemDropPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGItemDropPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .network.TItemPos cell = 1;
  if (this->_internal_has_cell()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::cell(this),
        _Internal::cell(this).GetCachedSize(), target, stream);
  }

  // uint32 gold = 2;
  if (this->_internal_gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_gold(), target);
  }

  // uint32 count = 3;
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGItemDropPacket)
  return target;
}

size_t CGItemDropPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGItemDropPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .network.TItemPos cell = 1;
  if (this->_internal_has_cell()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cell_);
  }

  // uint32 gold = 2;
  if (this->_internal_gold() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_gold());
  }

  // uint32 count = 3;
  if (this->_internal_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGItemDropPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGItemDropPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGItemDropPacket::GetClassData() const { return &_class_data_; }


void CGItemDropPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGItemDropPacket*>(&to_msg);
  auto& from = static_cast<const CGItemDropPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGItemDropPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_cell()) {
    _this->_internal_mutable_cell()->::network::TItemPos::MergeFrom(
        from._internal_cell());
  }
  if (from._internal_gold() != 0) {
    _this->_internal_set_gold(from._internal_gold());
  }
  if (from._internal_count() != 0) {
    _this->_internal_set_count(from._internal_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGItemDropPacket::CopyFrom(const CGItemDropPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGItemDropPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGItemDropPacket::IsInitialized() const {
  return true;
}

void CGItemDropPacket::InternalSwap(CGItemDropPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGItemDropPacket, _impl_.count_)
      + sizeof(CGItemDropPacket::_impl_.count_)
      - PROTOBUF_FIELD_OFFSET(CGItemDropPacket, _impl_.cell_)>(
          reinterpret_cast<char*>(&_impl_.cell_),
          reinterpret_cast<char*>(&other->_impl_.cell_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGItemDropPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[75]);
}

// ===================================================================

class CGItemDestroyPacket::_Internal {
 public:
  static const ::network::TItemPos& cell(const CGItemDestroyPacket* msg);
};

const ::network::TItemPos&
CGItemDestroyPacket::_Internal::cell(const CGItemDestroyPacket* msg) {
  return *msg->_impl_.cell_;
}
void CGItemDestroyPacket::clear_cell() {
  if (GetArenaForAllocation() == nullptr && _impl_.cell_ != nullptr) {
    delete _impl_.cell_;
  }
  _impl_.cell_ = nullptr;
}
CGItemDestroyPacket::CGItemDestroyPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGItemDestroyPacket)
}
CGItemDestroyPacket::CGItemDestroyPacket(const CGItemDestroyPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGItemDestroyPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.cell_){nullptr}
    , decltype(_impl_.num_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_cell()) {
    _this->_impl_.cell_ = new ::network::TItemPos(*from._impl_.cell_);
  }
  _this->_impl_.num_ = from._impl_.num_;
  // @@protoc_insertion_point(copy_constructor:network.CGItemDestroyPacket)
}

inline void CGItemDestroyPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.cell_){nullptr}
    , decltype(_impl_.num_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CGItemDestroyPacket::~CGItemDestroyPacket() {
  // @@protoc_insertion_point(destructor:network.CGItemDestroyPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGItemDestroyPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.cell_;
}

void CGItemDestroyPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGItemDestroyPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGItemDestroyPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.cell_ != nullptr) {
    delete _impl_.cell_;
  }
  _impl_.cell_ = nullptr;
  _impl_.num_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGItemDestroyPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .network.TItemPos cell = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGItemDestroyPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGItemDestroyPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .network.TItemPos cell = 1;
  if (this->_internal_has_cell()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::cell(this),
        _Internal::cell(this).GetCachedSize(), target, stream);
  }

  // uint32 num = 2;
  if (this->_internal_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGItemDestroyPacket)
  return target;
}

size_t CGItemDestroyPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGItemDestroyPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .network.TItemPos cell = 1;
  if (this->_internal_has_cell()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cell_);
  }

  // uint32 num = 2;
  if (this->_internal_num() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_num());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGItemDestroyPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGItemDestroyPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGItemDestroyPacket::GetClassData() const { return &_class_data_; }


void CGItemDestroyPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGItemDestroyPacket*>(&to_msg);
  auto& from = static_cast<const CGItemDestroyPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGItemDestroyPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_cell()) {
    _this->_internal_mutable_cell()->::network::TItemPos::MergeFrom(
        from._internal_cell());
  }
  if (from._internal_num() != 0) {
    _this->_internal_set_num(from._internal_num());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGItemDestroyPacket::CopyFrom(const CGItemDestroyPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGItemDestroyPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGItemDestroyPacket::IsInitialized() const {
  return true;
}

void CGItemDestroyPacket::InternalSwap(CGItemDestroyPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGItemDestroyPacket, _impl_.num_)
      + sizeof(CGItemDestroyPacket::_impl_.num_)
      - PROTOBUF_FIELD_OFFSET(CGItemDestroyPacket, _impl_.cell_)>(
          reinterpret_cast<char*>(&_impl_.cell_),
          reinterpret_cast<char*>(&other->_impl_.cell_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGItemDestroyPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[76]);
}

// ===================================================================

class CGItemMovePacket::_Internal {
 public:
  static const ::network::TItemPos& cell(const CGItemMovePacket* msg);
  static const ::network::TItemPos& cell_to(const CGItemMovePacket* msg);
};

const ::network::TItemPos&
CGItemMovePacket::_Internal::cell(const CGItemMovePacket* msg) {
  return *msg->_impl_.cell_;
}
const ::network::TItemPos&
CGItemMovePacket::_Internal::cell_to(const CGItemMovePacket* msg) {
  return *msg->_impl_.cell_to_;
}
void CGItemMovePacket::clear_cell() {
  if (GetArenaForAllocation() == nullptr && _impl_.cell_ != nullptr) {
    delete _impl_.cell_;
  }
  _impl_.cell_ = nullptr;
}
void CGItemMovePacket::clear_cell_to() {
  if (GetArenaForAllocation() == nullptr && _impl_.cell_to_ != nullptr) {
    delete _impl_.cell_to_;
  }
  _impl_.cell_to_ = nullptr;
}
CGItemMovePacket::CGItemMovePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGItemMovePacket)
}
CGItemMovePacket::CGItemMovePacket(const CGItemMovePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGItemMovePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.cell_){nullptr}
    , decltype(_impl_.cell_to_){nullptr}
    , decltype(_impl_.count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_cell()) {
    _this->_impl_.cell_ = new ::network::TItemPos(*from._impl_.cell_);
  }
  if (from._internal_has_cell_to()) {
    _this->_impl_.cell_to_ = new ::network::TItemPos(*from._impl_.cell_to_);
  }
  _this->_impl_.count_ = from._impl_.count_;
  // @@protoc_insertion_point(copy_constructor:network.CGItemMovePacket)
}

inline void CGItemMovePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.cell_){nullptr}
    , decltype(_impl_.cell_to_){nullptr}
    , decltype(_impl_.count_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CGItemMovePacket::~CGItemMovePacket() {
  // @@protoc_insertion_point(destructor:network.CGItemMovePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGItemMovePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.cell_;
  if (this != internal_default_instance()) delete _impl_.cell_to_;
}

void CGItemMovePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGItemMovePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGItemMovePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.cell_ != nullptr) {
    delete _impl_.cell_;
  }
  _impl_.cell_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.cell_to_ != nullptr) {
    delete _impl_.cell_to_;
  }
  _impl_.cell_to_ = nullptr;
  _impl_.count_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGItemMovePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .network.TItemPos cell = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .network.TItemPos cell_to = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell_to(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGItemMovePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGItemMovePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .network.TItemPos cell = 1;
  if (this->_internal_has_cell()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::cell(this),
        _Internal::cell(this).GetCachedSize(), target, stream);
  }

  // .network.TItemPos cell_to = 2;
  if (this->_internal_has_cell_to()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::cell_to(this),
        _Internal::cell_to(this).GetCachedSize(), target, stream);
  }

  // uint32 count = 3;
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGItemMovePacket)
  return target;
}

size_t CGItemMovePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGItemMovePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .network.TItemPos cell = 1;
  if (this->_internal_has_cell()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cell_);
  }

  // .network.TItemPos cell_to = 2;
  if (this->_internal_has_cell_to()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cell_to_);
  }

  // uint32 count = 3;
  if (this->_internal_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGItemMovePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGItemMovePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGItemMovePacket::GetClassData() const { return &_class_data_; }


void CGItemMovePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGItemMovePacket*>(&to_msg);
  auto& from = static_cast<const CGItemMovePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGItemMovePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_cell()) {
    _this->_internal_mutable_cell()->::network::TItemPos::MergeFrom(
        from._internal_cell());
  }
  if (from._internal_has_cell_to()) {
    _this->_internal_mutable_cell_to()->::network::TItemPos::MergeFrom(
        from._internal_cell_to());
  }
  if (from._internal_count() != 0) {
    _this->_internal_set_count(from._internal_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGItemMovePacket::CopyFrom(const CGItemMovePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGItemMovePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGItemMovePacket::IsInitialized() const {
  return true;
}

void CGItemMovePacket::InternalSwap(CGItemMovePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGItemMovePacket, _impl_.count_)
      + sizeof(CGItemMovePacket::_impl_.count_)
      - PROTOBUF_FIELD_OFFSET(CGItemMovePacket, _impl_.cell_)>(
          reinterpret_cast<char*>(&_impl_.cell_),
          reinterpret_cast<char*>(&other->_impl_.cell_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGItemMovePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[77]);
}

// ===================================================================

class CGItemPickupPacket::_Internal {
 public:
};

CGItemPickupPacket::CGItemPickupPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGItemPickupPacket)
}
CGItemPickupPacket::CGItemPickupPacket(const CGItemPickupPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGItemPickupPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.vid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.vid_ = from._impl_.vid_;
  // @@protoc_insertion_point(copy_constructor:network.CGItemPickupPacket)
}

inline void CGItemPickupPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.vid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CGItemPickupPacket::~CGItemPickupPacket() {
  // @@protoc_insertion_point(destructor:network.CGItemPickupPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGItemPickupPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CGItemPickupPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGItemPickupPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGItemPickupPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.vid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGItemPickupPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 vid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.vid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGItemPickupPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGItemPickupPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 vid = 1;
  if (this->_internal_vid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_vid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGItemPickupPacket)
  return target;
}

size_t CGItemPickupPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGItemPickupPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 vid = 1;
  if (this->_internal_vid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_vid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGItemPickupPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGItemPickupPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGItemPickupPacket::GetClassData() const { return &_class_data_; }


void CGItemPickupPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGItemPickupPacket*>(&to_msg);
  auto& from = static_cast<const CGItemPickupPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGItemPickupPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_vid() != 0) {
    _this->_internal_set_vid(from._internal_vid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGItemPickupPacket::CopyFrom(const CGItemPickupPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGItemPickupPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGItemPickupPacket::IsInitialized() const {
  return true;
}

void CGItemPickupPacket::InternalSwap(CGItemPickupPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.vid_, other->_impl_.vid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGItemPickupPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[78]);
}

// ===================================================================

class CGSafeboxCheckinPacket::_Internal {
 public:
  static const ::network::TItemPos& inventory_pos(const CGSafeboxCheckinPacket* msg);
};

const ::network::TItemPos&
CGSafeboxCheckinPacket::_Internal::inventory_pos(const CGSafeboxCheckinPacket* msg) {
  return *msg->_impl_.inventory_pos_;
}
void CGSafeboxCheckinPacket::clear_inventory_pos() {
  if (GetArenaForAllocation() == nullptr && _impl_.inventory_pos_ != nullptr) {
    delete _impl_.inventory_pos_;
  }
  _impl_.inventory_pos_ = nullptr;
}
CGSafeboxCheckinPacket::CGSafeboxCheckinPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGSafeboxCheckinPacket)
}
CGSafeboxCheckinPacket::CGSafeboxCheckinPacket(const CGSafeboxCheckinPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGSafeboxCheckinPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.inventory_pos_){nullptr}
    , decltype(_impl_.safebox_pos_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_inventory_pos()) {
    _this->_impl_.inventory_pos_ = new ::network::TItemPos(*from._impl_.inventory_pos_);
  }
  _this->_impl_.safebox_pos_ = from._impl_.safebox_pos_;
  // @@protoc_insertion_point(copy_constructor:network.CGSafeboxCheckinPacket)
}

inline void CGSafeboxCheckinPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.inventory_pos_){nullptr}
    , decltype(_impl_.safebox_pos_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CGSafeboxCheckinPacket::~CGSafeboxCheckinPacket() {
  // @@protoc_insertion_point(destructor:network.CGSafeboxCheckinPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGSafeboxCheckinPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.inventory_pos_;
}

void CGSafeboxCheckinPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGSafeboxCheckinPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGSafeboxCheckinPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.inventory_pos_ != nullptr) {
    delete _impl_.inventory_pos_;
  }
  _impl_.inventory_pos_ = nullptr;
  _impl_.safebox_pos_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGSafeboxCheckinPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 safebox_pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.safebox_pos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .network.TItemPos inventory_pos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_inventory_pos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGSafeboxCheckinPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGSafeboxCheckinPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 safebox_pos = 1;
  if (this->_internal_safebox_pos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_safebox_pos(), target);
  }

  // .network.TItemPos inventory_pos = 2;
  if (this->_internal_has_inventory_pos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::inventory_pos(this),
        _Internal::inventory_pos(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGSafeboxCheckinPacket)
  return target;
}

size_t CGSafeboxCheckinPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGSafeboxCheckinPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .network.TItemPos inventory_pos = 2;
  if (this->_internal_has_inventory_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.inventory_pos_);
  }

  // uint32 safebox_pos = 1;
  if (this->_internal_safebox_pos() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_safebox_pos());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGSafeboxCheckinPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGSafeboxCheckinPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGSafeboxCheckinPacket::GetClassData() const { return &_class_data_; }


void CGSafeboxCheckinPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGSafeboxCheckinPacket*>(&to_msg);
  auto& from = static_cast<const CGSafeboxCheckinPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGSafeboxCheckinPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_inventory_pos()) {
    _this->_internal_mutable_inventory_pos()->::network::TItemPos::MergeFrom(
        from._internal_inventory_pos());
  }
  if (from._internal_safebox_pos() != 0) {
    _this->_internal_set_safebox_pos(from._internal_safebox_pos());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGSafeboxCheckinPacket::CopyFrom(const CGSafeboxCheckinPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGSafeboxCheckinPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGSafeboxCheckinPacket::IsInitialized() const {
  return true;
}

void CGSafeboxCheckinPacket::InternalSwap(CGSafeboxCheckinPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGSafeboxCheckinPacket, _impl_.safebox_pos_)
      + sizeof(CGSafeboxCheckinPacket::_impl_.safebox_pos_)
      - PROTOBUF_FIELD_OFFSET(CGSafeboxCheckinPacket, _impl_.inventory_pos_)>(
          reinterpret_cast<char*>(&_impl_.inventory_pos_),
          reinterpret_cast<char*>(&other->_impl_.inventory_pos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGSafeboxCheckinPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[79]);
}

// ===================================================================

class CGSafeboxCheckoutPacket::_Internal {
 public:
  static const ::network::TItemPos& inventory_pos(const CGSafeboxCheckoutPacket* msg);
};

const ::network::TItemPos&
CGSafeboxCheckoutPacket::_Internal::inventory_pos(const CGSafeboxCheckoutPacket* msg) {
  return *msg->_impl_.inventory_pos_;
}
void CGSafeboxCheckoutPacket::clear_inventory_pos() {
  if (GetArenaForAllocation() == nullptr && _impl_.inventory_pos_ != nullptr) {
    delete _impl_.inventory_pos_;
  }
  _impl_.inventory_pos_ = nullptr;
}
CGSafeboxCheckoutPacket::CGSafeboxCheckoutPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGSafeboxCheckoutPacket)
}
CGSafeboxCheckoutPacket::CGSafeboxCheckoutPacket(const CGSafeboxCheckoutPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGSafeboxCheckoutPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.inventory_pos_){nullptr}
    , decltype(_impl_.safebox_pos_){}
    , decltype(_impl_.is_mall_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_inventory_pos()) {
    _this->_impl_.inventory_pos_ = new ::network::TItemPos(*from._impl_.inventory_pos_);
  }
  ::memcpy(&_impl_.safebox_pos_, &from._impl_.safebox_pos_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_mall_) -
    reinterpret_cast<char*>(&_impl_.safebox_pos_)) + sizeof(_impl_.is_mall_));
  // @@protoc_insertion_point(copy_constructor:network.CGSafeboxCheckoutPacket)
}

inline void CGSafeboxCheckoutPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.inventory_pos_){nullptr}
    , decltype(_impl_.safebox_pos_){0u}
    , decltype(_impl_.is_mall_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CGSafeboxCheckoutPacket::~CGSafeboxCheckoutPacket() {
  // @@protoc_insertion_point(destructor:network.CGSafeboxCheckoutPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGSafeboxCheckoutPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.inventory_pos_;
}

void CGSafeboxCheckoutPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGSafeboxCheckoutPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGSafeboxCheckoutPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.inventory_pos_ != nullptr) {
    delete _impl_.inventory_pos_;
  }
  _impl_.inventory_pos_ = nullptr;
  ::memset(&_impl_.safebox_pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.is_mall_) -
      reinterpret_cast<char*>(&_impl_.safebox_pos_)) + sizeof(_impl_.is_mall_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGSafeboxCheckoutPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 safebox_pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.safebox_pos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .network.TItemPos inventory_pos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_inventory_pos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_mall = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.is_mall_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGSafeboxCheckoutPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGSafeboxCheckoutPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 safebox_pos = 1;
  if (this->_internal_safebox_pos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_safebox_pos(), target);
  }

  // .network.TItemPos inventory_pos = 2;
  if (this->_internal_has_inventory_pos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::inventory_pos(this),
        _Internal::inventory_pos(this).GetCachedSize(), target, stream);
  }

  // bool is_mall = 3;
  if (this->_internal_is_mall() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_is_mall(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGSafeboxCheckoutPacket)
  return target;
}

size_t CGSafeboxCheckoutPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGSafeboxCheckoutPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .network.TItemPos inventory_pos = 2;
  if (this->_internal_has_inventory_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.inventory_pos_);
  }

  // uint32 safebox_pos = 1;
  if (this->_internal_safebox_pos() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_safebox_pos());
  }

  // bool is_mall = 3;
  if (this->_internal_is_mall() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGSafeboxCheckoutPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGSafeboxCheckoutPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGSafeboxCheckoutPacket::GetClassData() const { return &_class_data_; }


void CGSafeboxCheckoutPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGSafeboxCheckoutPacket*>(&to_msg);
  auto& from = static_cast<const CGSafeboxCheckoutPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGSafeboxCheckoutPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_inventory_pos()) {
    _this->_internal_mutable_inventory_pos()->::network::TItemPos::MergeFrom(
        from._internal_inventory_pos());
  }
  if (from._internal_safebox_pos() != 0) {
    _this->_internal_set_safebox_pos(from._internal_safebox_pos());
  }
  if (from._internal_is_mall() != 0) {
    _this->_internal_set_is_mall(from._internal_is_mall());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGSafeboxCheckoutPacket::CopyFrom(const CGSafeboxCheckoutPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGSafeboxCheckoutPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGSafeboxCheckoutPacket::IsInitialized() const {
  return true;
}

void CGSafeboxCheckoutPacket::InternalSwap(CGSafeboxCheckoutPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGSafeboxCheckoutPacket, _impl_.is_mall_)
      + sizeof(CGSafeboxCheckoutPacket::_impl_.is_mall_)
      - PROTOBUF_FIELD_OFFSET(CGSafeboxCheckoutPacket, _impl_.inventory_pos_)>(
          reinterpret_cast<char*>(&_impl_.inventory_pos_),
          reinterpret_cast<char*>(&other->_impl_.inventory_pos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGSafeboxCheckoutPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[80]);
}

// ===================================================================

class CGSafeboxItemMovePacket::_Internal {
 public:
};

CGSafeboxItemMovePacket::CGSafeboxItemMovePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGSafeboxItemMovePacket)
}
CGSafeboxItemMovePacket::CGSafeboxItemMovePacket(const CGSafeboxItemMovePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGSafeboxItemMovePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.source_pos_){}
    , decltype(_impl_.target_pos_){}
    , decltype(_impl_.count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.source_pos_, &from._impl_.source_pos_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.count_) -
    reinterpret_cast<char*>(&_impl_.source_pos_)) + sizeof(_impl_.count_));
  // @@protoc_insertion_point(copy_constructor:network.CGSafeboxItemMovePacket)
}

inline void CGSafeboxItemMovePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.source_pos_){0u}
    , decltype(_impl_.target_pos_){0u}
    , decltype(_impl_.count_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CGSafeboxItemMovePacket::~CGSafeboxItemMovePacket() {
  // @@protoc_insertion_point(destructor:network.CGSafeboxItemMovePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGSafeboxItemMovePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CGSafeboxItemMovePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGSafeboxItemMovePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGSafeboxItemMovePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.source_pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.count_) -
      reinterpret_cast<char*>(&_impl_.source_pos_)) + sizeof(_impl_.count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGSafeboxItemMovePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 source_pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.source_pos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 target_pos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.target_pos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGSafeboxItemMovePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGSafeboxItemMovePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 source_pos = 1;
  if (this->_internal_source_pos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_source_pos(), target);
  }

  // uint32 target_pos = 2;
  if (this->_internal_target_pos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_target_pos(), target);
  }

  // uint32 count = 3;
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGSafeboxItemMovePacket)
  return target;
}

size_t CGSafeboxItemMovePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGSafeboxItemMovePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 source_pos = 1;
  if (this->_internal_source_pos() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_source_pos());
  }

  // uint32 target_pos = 2;
  if (this->_internal_target_pos() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_target_pos());
  }

  // uint32 count = 3;
  if (this->_internal_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGSafeboxItemMovePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGSafeboxItemMovePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGSafeboxItemMovePacket::GetClassData() const { return &_class_data_; }


void CGSafeboxItemMovePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGSafeboxItemMovePacket*>(&to_msg);
  auto& from = static_cast<const CGSafeboxItemMovePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGSafeboxItemMovePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_source_pos() != 0) {
    _this->_internal_set_source_pos(from._internal_source_pos());
  }
  if (from._internal_target_pos() != 0) {
    _this->_internal_set_target_pos(from._internal_target_pos());
  }
  if (from._internal_count() != 0) {
    _this->_internal_set_count(from._internal_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGSafeboxItemMovePacket::CopyFrom(const CGSafeboxItemMovePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGSafeboxItemMovePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGSafeboxItemMovePacket::IsInitialized() const {
  return true;
}

void CGSafeboxItemMovePacket::InternalSwap(CGSafeboxItemMovePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGSafeboxItemMovePacket, _impl_.count_)
      + sizeof(CGSafeboxItemMovePacket::_impl_.count_)
      - PROTOBUF_FIELD_OFFSET(CGSafeboxItemMovePacket, _impl_.source_pos_)>(
          reinterpret_cast<char*>(&_impl_.source_pos_),
          reinterpret_cast<char*>(&other->_impl_.source_pos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGSafeboxItemMovePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[81]);
}

// ===================================================================

class CGAcceRefineCheckinPacket::_Internal {
 public:
  static const ::network::TItemPos& item_cell(const CGAcceRefineCheckinPacket* msg);
};

const ::network::TItemPos&
CGAcceRefineCheckinPacket::_Internal::item_cell(const CGAcceRefineCheckinPacket* msg) {
  return *msg->_impl_.item_cell_;
}
void CGAcceRefineCheckinPacket::clear_item_cell() {
  if (GetArenaForAllocation() == nullptr && _impl_.item_cell_ != nullptr) {
    delete _impl_.item_cell_;
  }
  _impl_.item_cell_ = nullptr;
}
CGAcceRefineCheckinPacket::CGAcceRefineCheckinPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGAcceRefineCheckinPacket)
}
CGAcceRefineCheckinPacket::CGAcceRefineCheckinPacket(const CGAcceRefineCheckinPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGAcceRefineCheckinPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.item_cell_){nullptr}
    , decltype(_impl_.acce_pos_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_item_cell()) {
    _this->_impl_.item_cell_ = new ::network::TItemPos(*from._impl_.item_cell_);
  }
  _this->_impl_.acce_pos_ = from._impl_.acce_pos_;
  // @@protoc_insertion_point(copy_constructor:network.CGAcceRefineCheckinPacket)
}

inline void CGAcceRefineCheckinPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.item_cell_){nullptr}
    , decltype(_impl_.acce_pos_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CGAcceRefineCheckinPacket::~CGAcceRefineCheckinPacket() {
  // @@protoc_insertion_point(destructor:network.CGAcceRefineCheckinPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGAcceRefineCheckinPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.item_cell_;
}

void CGAcceRefineCheckinPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGAcceRefineCheckinPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGAcceRefineCheckinPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.item_cell_ != nullptr) {
    delete _impl_.item_cell_;
  }
  _impl_.item_cell_ = nullptr;
  _impl_.acce_pos_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGAcceRefineCheckinPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .network.TItemPos item_cell = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_item_cell(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 acce_pos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.acce_pos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGAcceRefineCheckinPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGAcceRefineCheckinPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .network.TItemPos item_cell = 1;
  if (this->_internal_has_item_cell()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::item_cell(this),
        _Internal::item_cell(this).GetCachedSize(), target, stream);
  }

  // uint32 acce_pos = 2;
  if (this->_internal_acce_pos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_acce_pos(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGAcceRefineCheckinPacket)
  return target;
}

size_t CGAcceRefineCheckinPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGAcceRefineCheckinPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .network.TItemPos item_cell = 1;
  if (this->_internal_has_item_cell()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.item_cell_);
  }

  // uint32 acce_pos = 2;
  if (this->_internal_acce_pos() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_acce_pos());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGAcceRefineCheckinPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGAcceRefineCheckinPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGAcceRefineCheckinPacket::GetClassData() const { return &_class_data_; }


void CGAcceRefineCheckinPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGAcceRefineCheckinPacket*>(&to_msg);
  auto& from = static_cast<const CGAcceRefineCheckinPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGAcceRefineCheckinPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_item_cell()) {
    _this->_internal_mutable_item_cell()->::network::TItemPos::MergeFrom(
        from._internal_item_cell());
  }
  if (from._internal_acce_pos() != 0) {
    _this->_internal_set_acce_pos(from._internal_acce_pos());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGAcceRefineCheckinPacket::CopyFrom(const CGAcceRefineCheckinPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGAcceRefineCheckinPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGAcceRefineCheckinPacket::IsInitialized() const {
  return true;
}

void CGAcceRefineCheckinPacket::InternalSwap(CGAcceRefineCheckinPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGAcceRefineCheckinPacket, _impl_.acce_pos_)
      + sizeof(CGAcceRefineCheckinPacket::_impl_.acce_pos_)
      - PROTOBUF_FIELD_OFFSET(CGAcceRefineCheckinPacket, _impl_.item_cell_)>(
          reinterpret_cast<char*>(&_impl_.item_cell_),
          reinterpret_cast<char*>(&other->_impl_.item_cell_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGAcceRefineCheckinPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[82]);
}

// ===================================================================

class CGAcceRefineCheckoutPacket::_Internal {
 public:
};

CGAcceRefineCheckoutPacket::CGAcceRefineCheckoutPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGAcceRefineCheckoutPacket)
}
CGAcceRefineCheckoutPacket::CGAcceRefineCheckoutPacket(const CGAcceRefineCheckoutPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGAcceRefineCheckoutPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.acce_pos_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.acce_pos_ = from._impl_.acce_pos_;
  // @@protoc_insertion_point(copy_constructor:network.CGAcceRefineCheckoutPacket)
}

inline void CGAcceRefineCheckoutPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.acce_pos_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CGAcceRefineCheckoutPacket::~CGAcceRefineCheckoutPacket() {
  // @@protoc_insertion_point(destructor:network.CGAcceRefineCheckoutPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGAcceRefineCheckoutPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CGAcceRefineCheckoutPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGAcceRefineCheckoutPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGAcceRefineCheckoutPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.acce_pos_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGAcceRefineCheckoutPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 acce_pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.acce_pos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGAcceRefineCheckoutPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGAcceRefineCheckoutPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 acce_pos = 1;
  if (this->_internal_acce_pos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_acce_pos(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGAcceRefineCheckoutPacket)
  return target;
}

size_t CGAcceRefineCheckoutPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGAcceRefineCheckoutPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 acce_pos = 1;
  if (this->_internal_acce_pos() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_acce_pos());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGAcceRefineCheckoutPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGAcceRefineCheckoutPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGAcceRefineCheckoutPacket::GetClassData() const { return &_class_data_; }


void CGAcceRefineCheckoutPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGAcceRefineCheckoutPacket*>(&to_msg);
  auto& from = static_cast<const CGAcceRefineCheckoutPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGAcceRefineCheckoutPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_acce_pos() != 0) {
    _this->_internal_set_acce_pos(from._internal_acce_pos());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGAcceRefineCheckoutPacket::CopyFrom(const CGAcceRefineCheckoutPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGAcceRefineCheckoutPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGAcceRefineCheckoutPacket::IsInitialized() const {
  return true;
}

void CGAcceRefineCheckoutPacket::InternalSwap(CGAcceRefineCheckoutPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.acce_pos_, other->_impl_.acce_pos_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGAcceRefineCheckoutPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[83]);
}

// ===================================================================

class CGAcceRefineAcceptPacket::_Internal {
 public:
};

CGAcceRefineAcceptPacket::CGAcceRefineAcceptPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGAcceRefineAcceptPacket)
}
CGAcceRefineAcceptPacket::CGAcceRefineAcceptPacket(const CGAcceRefineAcceptPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGAcceRefineAcceptPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.window_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.window_type_ = from._impl_.window_type_;
  // @@protoc_insertion_point(copy_constructor:network.CGAcceRefineAcceptPacket)
}

inline void CGAcceRefineAcceptPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.window_type_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CGAcceRefineAcceptPacket::~CGAcceRefineAcceptPacket() {
  // @@protoc_insertion_point(destructor:network.CGAcceRefineAcceptPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGAcceRefineAcceptPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CGAcceRefineAcceptPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGAcceRefineAcceptPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGAcceRefineAcceptPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.window_type_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGAcceRefineAcceptPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 window_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.window_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGAcceRefineAcceptPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGAcceRefineAcceptPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 window_type = 1;
  if (this->_internal_window_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_window_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGAcceRefineAcceptPacket)
  return target;
}

size_t CGAcceRefineAcceptPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGAcceRefineAcceptPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 window_type = 1;
  if (this->_internal_window_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_window_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGAcceRefineAcceptPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGAcceRefineAcceptPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGAcceRefineAcceptPacket::GetClassData() const { return &_class_data_; }


void CGAcceRefineAcceptPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGAcceRefineAcceptPacket*>(&to_msg);
  auto& from = static_cast<const CGAcceRefineAcceptPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGAcceRefineAcceptPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_window_type() != 0) {
    _this->_internal_set_window_type(from._internal_window_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGAcceRefineAcceptPacket::CopyFrom(const CGAcceRefineAcceptPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGAcceRefineAcceptPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGAcceRefineAcceptPacket::IsInitialized() const {
  return true;
}

void CGAcceRefineAcceptPacket::InternalSwap(CGAcceRefineAcceptPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.window_type_, other->_impl_.window_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGAcceRefineAcceptPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[84]);
}

// ===================================================================

class CGQuickslotAddPacket::_Internal {
 public:
  static const ::TQuickslot& slot(const CGQuickslotAddPacket* msg);
};

const ::TQuickslot&
CGQuickslotAddPacket::_Internal::slot(const CGQuickslotAddPacket* msg) {
  return *msg->_impl_.slot_;
}
void CGQuickslotAddPacket::clear_slot() {
  if (GetArenaForAllocation() == nullptr && _impl_.slot_ != nullptr) {
    delete _impl_.slot_;
  }
  _impl_.slot_ = nullptr;
}
CGQuickslotAddPacket::CGQuickslotAddPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGQuickslotAddPacket)
}
CGQuickslotAddPacket::CGQuickslotAddPacket(const CGQuickslotAddPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGQuickslotAddPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.slot_){nullptr}
    , decltype(_impl_.pos_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_slot()) {
    _this->_impl_.slot_ = new ::TQuickslot(*from._impl_.slot_);
  }
  _this->_impl_.pos_ = from._impl_.pos_;
  // @@protoc_insertion_point(copy_constructor:network.CGQuickslotAddPacket)
}

inline void CGQuickslotAddPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.slot_){nullptr}
    , decltype(_impl_.pos_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CGQuickslotAddPacket::~CGQuickslotAddPacket() {
  // @@protoc_insertion_point(destructor:network.CGQuickslotAddPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGQuickslotAddPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.slot_;
}

void CGQuickslotAddPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGQuickslotAddPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGQuickslotAddPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.slot_ != nullptr) {
    delete _impl_.slot_;
  }
  _impl_.slot_ = nullptr;
  _impl_.pos_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGQuickslotAddPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TQuickslot slot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_slot(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGQuickslotAddPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGQuickslotAddPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pos = 1;
  if (this->_internal_pos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pos(), target);
  }

  // .TQuickslot slot = 2;
  if (this->_internal_has_slot()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::slot(this),
        _Internal::slot(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGQuickslotAddPacket)
  return target;
}

size_t CGQuickslotAddPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGQuickslotAddPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .TQuickslot slot = 2;
  if (this->_internal_has_slot()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.slot_);
  }

  // uint32 pos = 1;
  if (this->_internal_pos() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pos());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGQuickslotAddPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGQuickslotAddPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGQuickslotAddPacket::GetClassData() const { return &_class_data_; }


void CGQuickslotAddPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGQuickslotAddPacket*>(&to_msg);
  auto& from = static_cast<const CGQuickslotAddPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGQuickslotAddPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_slot()) {
    _this->_internal_mutable_slot()->::TQuickslot::MergeFrom(
        from._internal_slot());
  }
  if (from._internal_pos() != 0) {
    _this->_internal_set_pos(from._internal_pos());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGQuickslotAddPacket::CopyFrom(const CGQuickslotAddPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGQuickslotAddPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGQuickslotAddPacket::IsInitialized() const {
  return true;
}

void CGQuickslotAddPacket::InternalSwap(CGQuickslotAddPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGQuickslotAddPacket, _impl_.pos_)
      + sizeof(CGQuickslotAddPacket::_impl_.pos_)
      - PROTOBUF_FIELD_OFFSET(CGQuickslotAddPacket, _impl_.slot_)>(
          reinterpret_cast<char*>(&_impl_.slot_),
          reinterpret_cast<char*>(&other->_impl_.slot_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGQuickslotAddPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[85]);
}

// ===================================================================

class CGQuickslotDeletePacket::_Internal {
 public:
};

CGQuickslotDeletePacket::CGQuickslotDeletePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGQuickslotDeletePacket)
}
CGQuickslotDeletePacket::CGQuickslotDeletePacket(const CGQuickslotDeletePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGQuickslotDeletePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pos_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.pos_ = from._impl_.pos_;
  // @@protoc_insertion_point(copy_constructor:network.CGQuickslotDeletePacket)
}

inline void CGQuickslotDeletePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pos_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CGQuickslotDeletePacket::~CGQuickslotDeletePacket() {
  // @@protoc_insertion_point(destructor:network.CGQuickslotDeletePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGQuickslotDeletePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CGQuickslotDeletePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGQuickslotDeletePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGQuickslotDeletePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pos_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGQuickslotDeletePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGQuickslotDeletePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGQuickslotDeletePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pos = 1;
  if (this->_internal_pos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pos(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGQuickslotDeletePacket)
  return target;
}

size_t CGQuickslotDeletePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGQuickslotDeletePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 pos = 1;
  if (this->_internal_pos() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pos());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGQuickslotDeletePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGQuickslotDeletePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGQuickslotDeletePacket::GetClassData() const { return &_class_data_; }


void CGQuickslotDeletePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGQuickslotDeletePacket*>(&to_msg);
  auto& from = static_cast<const CGQuickslotDeletePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGQuickslotDeletePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_pos() != 0) {
    _this->_internal_set_pos(from._internal_pos());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGQuickslotDeletePacket::CopyFrom(const CGQuickslotDeletePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGQuickslotDeletePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGQuickslotDeletePacket::IsInitialized() const {
  return true;
}

void CGQuickslotDeletePacket::InternalSwap(CGQuickslotDeletePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.pos_, other->_impl_.pos_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGQuickslotDeletePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[86]);
}

// ===================================================================

class CGQuickslotSwapPacket::_Internal {
 public:
};

CGQuickslotSwapPacket::CGQuickslotSwapPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGQuickslotSwapPacket)
}
CGQuickslotSwapPacket::CGQuickslotSwapPacket(const CGQuickslotSwapPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGQuickslotSwapPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pos_){}
    , decltype(_impl_.change_pos_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.pos_, &from._impl_.pos_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.change_pos_) -
    reinterpret_cast<char*>(&_impl_.pos_)) + sizeof(_impl_.change_pos_));
  // @@protoc_insertion_point(copy_constructor:network.CGQuickslotSwapPacket)
}

inline void CGQuickslotSwapPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pos_){0u}
    , decltype(_impl_.change_pos_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CGQuickslotSwapPacket::~CGQuickslotSwapPacket() {
  // @@protoc_insertion_point(destructor:network.CGQuickslotSwapPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGQuickslotSwapPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CGQuickslotSwapPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGQuickslotSwapPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGQuickslotSwapPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.change_pos_) -
      reinterpret_cast<char*>(&_impl_.pos_)) + sizeof(_impl_.change_pos_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGQuickslotSwapPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 change_pos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.change_pos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGQuickslotSwapPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGQuickslotSwapPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pos = 1;
  if (this->_internal_pos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pos(), target);
  }

  // uint32 change_pos = 2;
  if (this->_internal_change_pos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_change_pos(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGQuickslotSwapPacket)
  return target;
}

size_t CGQuickslotSwapPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGQuickslotSwapPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 pos = 1;
  if (this->_internal_pos() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pos());
  }

  // uint32 change_pos = 2;
  if (this->_internal_change_pos() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_change_pos());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGQuickslotSwapPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGQuickslotSwapPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGQuickslotSwapPacket::GetClassData() const { return &_class_data_; }


void CGQuickslotSwapPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGQuickslotSwapPacket*>(&to_msg);
  auto& from = static_cast<const CGQuickslotSwapPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGQuickslotSwapPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_pos() != 0) {
    _this->_internal_set_pos(from._internal_pos());
  }
  if (from._internal_change_pos() != 0) {
    _this->_internal_set_change_pos(from._internal_change_pos());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGQuickslotSwapPacket::CopyFrom(const CGQuickslotSwapPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGQuickslotSwapPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGQuickslotSwapPacket::IsInitialized() const {
  return true;
}

void CGQuickslotSwapPacket::InternalSwap(CGQuickslotSwapPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGQuickslotSwapPacket, _impl_.change_pos_)
      + sizeof(CGQuickslotSwapPacket::_impl_.change_pos_)
      - PROTOBUF_FIELD_OFFSET(CGQuickslotSwapPacket, _impl_.pos_)>(
          reinterpret_cast<char*>(&_impl_.pos_),
          reinterpret_cast<char*>(&other->_impl_.pos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGQuickslotSwapPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[87]);
}

// ===================================================================

class CGShopBuyPacket::_Internal {
 public:
};

CGShopBuyPacket::CGShopBuyPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGShopBuyPacket)
}
CGShopBuyPacket::CGShopBuyPacket(const CGShopBuyPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGShopBuyPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pos_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.pos_ = from._impl_.pos_;
  // @@protoc_insertion_point(copy_constructor:network.CGShopBuyPacket)
}

inline void CGShopBuyPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pos_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CGShopBuyPacket::~CGShopBuyPacket() {
  // @@protoc_insertion_point(destructor:network.CGShopBuyPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGShopBuyPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CGShopBuyPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGShopBuyPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGShopBuyPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pos_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGShopBuyPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGShopBuyPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGShopBuyPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pos = 1;
  if (this->_internal_pos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pos(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGShopBuyPacket)
  return target;
}

size_t CGShopBuyPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGShopBuyPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 pos = 1;
  if (this->_internal_pos() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pos());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGShopBuyPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGShopBuyPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGShopBuyPacket::GetClassData() const { return &_class_data_; }


void CGShopBuyPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGShopBuyPacket*>(&to_msg);
  auto& from = static_cast<const CGShopBuyPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGShopBuyPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_pos() != 0) {
    _this->_internal_set_pos(from._internal_pos());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGShopBuyPacket::CopyFrom(const CGShopBuyPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGShopBuyPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGShopBuyPacket::IsInitialized() const {
  return true;
}

void CGShopBuyPacket::InternalSwap(CGShopBuyPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.pos_, other->_impl_.pos_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGShopBuyPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[88]);
}

// ===================================================================

class CGShopSellPacket::_Internal {
 public:
  static const ::network::TItemPos& cell(const CGShopSellPacket* msg);
};

const ::network::TItemPos&
CGShopSellPacket::_Internal::cell(const CGShopSellPacket* msg) {
  return *msg->_impl_.cell_;
}
void CGShopSellPacket::clear_cell() {
  if (GetArenaForAllocation() == nullptr && _impl_.cell_ != nullptr) {
    delete _impl_.cell_;
  }
  _impl_.cell_ = nullptr;
}
CGShopSellPacket::CGShopSellPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGShopSellPacket)
}
CGShopSellPacket::CGShopSellPacket(const CGShopSellPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGShopSellPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.cell_){nullptr}
    , decltype(_impl_.count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_cell()) {
    _this->_impl_.cell_ = new ::network::TItemPos(*from._impl_.cell_);
  }
  _this->_impl_.count_ = from._impl_.count_;
  // @@protoc_insertion_point(copy_constructor:network.CGShopSellPacket)
}

inline void CGShopSellPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.cell_){nullptr}
    , decltype(_impl_.count_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CGShopSellPacket::~CGShopSellPacket() {
  // @@protoc_insertion_point(destructor:network.CGShopSellPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGShopSellPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.cell_;
}

void CGShopSellPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGShopSellPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGShopSellPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.cell_ != nullptr) {
    delete _impl_.cell_;
  }
  _impl_.cell_ = nullptr;
  _impl_.count_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGShopSellPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .network.TItemPos cell = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGShopSellPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGShopSellPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .network.TItemPos cell = 1;
  if (this->_internal_has_cell()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::cell(this),
        _Internal::cell(this).GetCachedSize(), target, stream);
  }

  // uint32 count = 2;
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGShopSellPacket)
  return target;
}

size_t CGShopSellPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGShopSellPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .network.TItemPos cell = 1;
  if (this->_internal_has_cell()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cell_);
  }

  // uint32 count = 2;
  if (this->_internal_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGShopSellPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGShopSellPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGShopSellPacket::GetClassData() const { return &_class_data_; }


void CGShopSellPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGShopSellPacket*>(&to_msg);
  auto& from = static_cast<const CGShopSellPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGShopSellPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_cell()) {
    _this->_internal_mutable_cell()->::network::TItemPos::MergeFrom(
        from._internal_cell());
  }
  if (from._internal_count() != 0) {
    _this->_internal_set_count(from._internal_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGShopSellPacket::CopyFrom(const CGShopSellPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGShopSellPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGShopSellPacket::IsInitialized() const {
  return true;
}

void CGShopSellPacket::InternalSwap(CGShopSellPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGShopSellPacket, _impl_.count_)
      + sizeof(CGShopSellPacket::_impl_.count_)
      - PROTOBUF_FIELD_OFFSET(CGShopSellPacket, _impl_.cell_)>(
          reinterpret_cast<char*>(&_impl_.cell_),
          reinterpret_cast<char*>(&other->_impl_.cell_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGShopSellPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[89]);
}

// ===================================================================

class CGExchangeStartPacket::_Internal {
 public:
};

CGExchangeStartPacket::CGExchangeStartPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGExchangeStartPacket)
}
CGExchangeStartPacket::CGExchangeStartPacket(const CGExchangeStartPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGExchangeStartPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.other_vid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.other_vid_ = from._impl_.other_vid_;
  // @@protoc_insertion_point(copy_constructor:network.CGExchangeStartPacket)
}

inline void CGExchangeStartPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.other_vid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CGExchangeStartPacket::~CGExchangeStartPacket() {
  // @@protoc_insertion_point(destructor:network.CGExchangeStartPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGExchangeStartPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CGExchangeStartPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGExchangeStartPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGExchangeStartPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.other_vid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGExchangeStartPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 other_vid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.other_vid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGExchangeStartPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGExchangeStartPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 other_vid = 1;
  if (this->_internal_other_vid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_other_vid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGExchangeStartPacket)
  return target;
}

size_t CGExchangeStartPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGExchangeStartPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 other_vid = 1;
  if (this->_internal_other_vid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_other_vid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGExchangeStartPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGExchangeStartPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGExchangeStartPacket::GetClassData() const { return &_class_data_; }


void CGExchangeStartPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGExchangeStartPacket*>(&to_msg);
  auto& from = static_cast<const CGExchangeStartPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGExchangeStartPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_other_vid() != 0) {
    _this->_internal_set_other_vid(from._internal_other_vid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGExchangeStartPacket::CopyFrom(const CGExchangeStartPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGExchangeStartPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGExchangeStartPacket::IsInitialized() const {
  return true;
}

void CGExchangeStartPacket::InternalSwap(CGExchangeStartPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.other_vid_, other->_impl_.other_vid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGExchangeStartPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[90]);
}

// ===================================================================

class CGExchangeItemAddPacket::_Internal {
 public:
  static const ::network::TItemPos& cell(const CGExchangeItemAddPacket* msg);
};

const ::network::TItemPos&
CGExchangeItemAddPacket::_Internal::cell(const CGExchangeItemAddPacket* msg) {
  return *msg->_impl_.cell_;
}
void CGExchangeItemAddPacket::clear_cell() {
  if (GetArenaForAllocation() == nullptr && _impl_.cell_ != nullptr) {
    delete _impl_.cell_;
  }
  _impl_.cell_ = nullptr;
}
CGExchangeItemAddPacket::CGExchangeItemAddPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGExchangeItemAddPacket)
}
CGExchangeItemAddPacket::CGExchangeItemAddPacket(const CGExchangeItemAddPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGExchangeItemAddPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.cell_){nullptr}
    , decltype(_impl_.display_pos_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_cell()) {
    _this->_impl_.cell_ = new ::network::TItemPos(*from._impl_.cell_);
  }
  _this->_impl_.display_pos_ = from._impl_.display_pos_;
  // @@protoc_insertion_point(copy_constructor:network.CGExchangeItemAddPacket)
}

inline void CGExchangeItemAddPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.cell_){nullptr}
    , decltype(_impl_.display_pos_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CGExchangeItemAddPacket::~CGExchangeItemAddPacket() {
  // @@protoc_insertion_point(destructor:network.CGExchangeItemAddPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGExchangeItemAddPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.cell_;
}

void CGExchangeItemAddPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGExchangeItemAddPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGExchangeItemAddPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.cell_ != nullptr) {
    delete _impl_.cell_;
  }
  _impl_.cell_ = nullptr;
  _impl_.display_pos_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGExchangeItemAddPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .network.TItemPos cell = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 display_pos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.display_pos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGExchangeItemAddPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGExchangeItemAddPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .network.TItemPos cell = 1;
  if (this->_internal_has_cell()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::cell(this),
        _Internal::cell(this).GetCachedSize(), target, stream);
  }

  // uint32 display_pos = 2;
  if (this->_internal_display_pos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_display_pos(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGExchangeItemAddPacket)
  return target;
}

size_t CGExchangeItemAddPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGExchangeItemAddPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .network.TItemPos cell = 1;
  if (this->_internal_has_cell()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cell_);
  }

  // uint32 display_pos = 2;
  if (this->_internal_display_pos() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_display_pos());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGExchangeItemAddPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGExchangeItemAddPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGExchangeItemAddPacket::GetClassData() const { return &_class_data_; }


void CGExchangeItemAddPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGExchangeItemAddPacket*>(&to_msg);
  auto& from = static_cast<const CGExchangeItemAddPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGExchangeItemAddPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_cell()) {
    _this->_internal_mutable_cell()->::network::TItemPos::MergeFrom(
        from._internal_cell());
  }
  if (from._internal_display_pos() != 0) {
    _this->_internal_set_display_pos(from._internal_display_pos());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGExchangeItemAddPacket::CopyFrom(const CGExchangeItemAddPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGExchangeItemAddPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGExchangeItemAddPacket::IsInitialized() const {
  return true;
}

void CGExchangeItemAddPacket::InternalSwap(CGExchangeItemAddPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGExchangeItemAddPacket, _impl_.display_pos_)
      + sizeof(CGExchangeItemAddPacket::_impl_.display_pos_)
      - PROTOBUF_FIELD_OFFSET(CGExchangeItemAddPacket, _impl_.cell_)>(
          reinterpret_cast<char*>(&_impl_.cell_),
          reinterpret_cast<char*>(&other->_impl_.cell_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGExchangeItemAddPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[91]);
}

// ===================================================================

class CGExchangeItemDelPacket::_Internal {
 public:
};

CGExchangeItemDelPacket::CGExchangeItemDelPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGExchangeItemDelPacket)
}
CGExchangeItemDelPacket::CGExchangeItemDelPacket(const CGExchangeItemDelPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGExchangeItemDelPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.display_pos_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.display_pos_ = from._impl_.display_pos_;
  // @@protoc_insertion_point(copy_constructor:network.CGExchangeItemDelPacket)
}

inline void CGExchangeItemDelPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.display_pos_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CGExchangeItemDelPacket::~CGExchangeItemDelPacket() {
  // @@protoc_insertion_point(destructor:network.CGExchangeItemDelPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGExchangeItemDelPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CGExchangeItemDelPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGExchangeItemDelPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGExchangeItemDelPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.display_pos_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGExchangeItemDelPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 display_pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.display_pos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGExchangeItemDelPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGExchangeItemDelPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 display_pos = 1;
  if (this->_internal_display_pos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_display_pos(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGExchangeItemDelPacket)
  return target;
}

size_t CGExchangeItemDelPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGExchangeItemDelPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 display_pos = 1;
  if (this->_internal_display_pos() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_display_pos());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGExchangeItemDelPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGExchangeItemDelPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGExchangeItemDelPacket::GetClassData() const { return &_class_data_; }


void CGExchangeItemDelPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGExchangeItemDelPacket*>(&to_msg);
  auto& from = static_cast<const CGExchangeItemDelPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGExchangeItemDelPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_display_pos() != 0) {
    _this->_internal_set_display_pos(from._internal_display_pos());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGExchangeItemDelPacket::CopyFrom(const CGExchangeItemDelPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGExchangeItemDelPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGExchangeItemDelPacket::IsInitialized() const {
  return true;
}

void CGExchangeItemDelPacket::InternalSwap(CGExchangeItemDelPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.display_pos_, other->_impl_.display_pos_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGExchangeItemDelPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[92]);
}

// ===================================================================

class CGExchangeGoldAddPacket::_Internal {
 public:
};

CGExchangeGoldAddPacket::CGExchangeGoldAddPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGExchangeGoldAddPacket)
}
CGExchangeGoldAddPacket::CGExchangeGoldAddPacket(const CGExchangeGoldAddPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGExchangeGoldAddPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.gold_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.gold_ = from._impl_.gold_;
  // @@protoc_insertion_point(copy_constructor:network.CGExchangeGoldAddPacket)
}

inline void CGExchangeGoldAddPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.gold_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CGExchangeGoldAddPacket::~CGExchangeGoldAddPacket() {
  // @@protoc_insertion_point(destructor:network.CGExchangeGoldAddPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGExchangeGoldAddPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CGExchangeGoldAddPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGExchangeGoldAddPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGExchangeGoldAddPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.gold_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGExchangeGoldAddPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 gold = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGExchangeGoldAddPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGExchangeGoldAddPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 gold = 1;
  if (this->_internal_gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_gold(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGExchangeGoldAddPacket)
  return target;
}

size_t CGExchangeGoldAddPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGExchangeGoldAddPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 gold = 1;
  if (this->_internal_gold() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_gold());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGExchangeGoldAddPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGExchangeGoldAddPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGExchangeGoldAddPacket::GetClassData() const { return &_class_data_; }


void CGExchangeGoldAddPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGExchangeGoldAddPacket*>(&to_msg);
  auto& from = static_cast<const CGExchangeGoldAddPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGExchangeGoldAddPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_gold() != 0) {
    _this->_internal_set_gold(from._internal_gold());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGExchangeGoldAddPacket::CopyFrom(const CGExchangeGoldAddPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGExchangeGoldAddPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGExchangeGoldAddPacket::IsInitialized() const {
  return true;
}

void CGExchangeGoldAddPacket::InternalSwap(CGExchangeGoldAddPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.gold_, other->_impl_.gold_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGExchangeGoldAddPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[93]);
}

// ===================================================================

class CGMessengerAddByVIDPacket::_Internal {
 public:
};

CGMessengerAddByVIDPacket::CGMessengerAddByVIDPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGMessengerAddByVIDPacket)
}
CGMessengerAddByVIDPacket::CGMessengerAddByVIDPacket(const CGMessengerAddByVIDPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGMessengerAddByVIDPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.vid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.vid_ = from._impl_.vid_;
  // @@protoc_insertion_point(copy_constructor:network.CGMessengerAddByVIDPacket)
}

inline void CGMessengerAddByVIDPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.vid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CGMessengerAddByVIDPacket::~CGMessengerAddByVIDPacket() {
  // @@protoc_insertion_point(destructor:network.CGMessengerAddByVIDPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGMessengerAddByVIDPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CGMessengerAddByVIDPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGMessengerAddByVIDPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGMessengerAddByVIDPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.vid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGMessengerAddByVIDPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 vid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.vid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGMessengerAddByVIDPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGMessengerAddByVIDPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 vid = 1;
  if (this->_internal_vid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_vid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGMessengerAddByVIDPacket)
  return target;
}

size_t CGMessengerAddByVIDPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGMessengerAddByVIDPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 vid = 1;
  if (this->_internal_vid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_vid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGMessengerAddByVIDPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGMessengerAddByVIDPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGMessengerAddByVIDPacket::GetClassData() const { return &_class_data_; }


void CGMessengerAddByVIDPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGMessengerAddByVIDPacket*>(&to_msg);
  auto& from = static_cast<const CGMessengerAddByVIDPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGMessengerAddByVIDPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_vid() != 0) {
    _this->_internal_set_vid(from._internal_vid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGMessengerAddByVIDPacket::CopyFrom(const CGMessengerAddByVIDPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGMessengerAddByVIDPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGMessengerAddByVIDPacket::IsInitialized() const {
  return true;
}

void CGMessengerAddByVIDPacket::InternalSwap(CGMessengerAddByVIDPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.vid_, other->_impl_.vid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGMessengerAddByVIDPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[94]);
}

// ===================================================================

class CGMessengerAddByNamePacket::_Internal {
 public:
};

CGMessengerAddByNamePacket::CGMessengerAddByNamePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGMessengerAddByNamePacket)
}
CGMessengerAddByNamePacket::CGMessengerAddByNamePacket(const CGMessengerAddByNamePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGMessengerAddByNamePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:network.CGMessengerAddByNamePacket)
}

inline void CGMessengerAddByNamePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CGMessengerAddByNamePacket::~CGMessengerAddByNamePacket() {
  // @@protoc_insertion_point(destructor:network.CGMessengerAddByNamePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGMessengerAddByNamePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void CGMessengerAddByNamePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGMessengerAddByNamePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGMessengerAddByNamePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGMessengerAddByNamePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGMessengerAddByNamePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGMessengerAddByNamePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes name = 1;
  if (!this->_internal_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGMessengerAddByNamePacket)
  return target;
}

size_t CGMessengerAddByNamePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGMessengerAddByNamePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGMessengerAddByNamePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGMessengerAddByNamePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGMessengerAddByNamePacket::GetClassData() const { return &_class_data_; }


void CGMessengerAddByNamePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGMessengerAddByNamePacket*>(&to_msg);
  auto& from = static_cast<const CGMessengerAddByNamePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGMessengerAddByNamePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGMessengerAddByNamePacket::CopyFrom(const CGMessengerAddByNamePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGMessengerAddByNamePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGMessengerAddByNamePacket::IsInitialized() const {
  return true;
}

void CGMessengerAddByNamePacket::InternalSwap(CGMessengerAddByNamePacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CGMessengerAddByNamePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[95]);
}

// ===================================================================

class CGMessengerRemovePacket::_Internal {
 public:
};

CGMessengerRemovePacket::CGMessengerRemovePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGMessengerRemovePacket)
}
CGMessengerRemovePacket::CGMessengerRemovePacket(const CGMessengerRemovePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGMessengerRemovePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:network.CGMessengerRemovePacket)
}

inline void CGMessengerRemovePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CGMessengerRemovePacket::~CGMessengerRemovePacket() {
  // @@protoc_insertion_point(destructor:network.CGMessengerRemovePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGMessengerRemovePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void CGMessengerRemovePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGMessengerRemovePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGMessengerRemovePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGMessengerRemovePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGMessengerRemovePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGMessengerRemovePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes name = 1;
  if (!this->_internal_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGMessengerRemovePacket)
  return target;
}

size_t CGMessengerRemovePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGMessengerRemovePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGMessengerRemovePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGMessengerRemovePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGMessengerRemovePacket::GetClassData() const { return &_class_data_; }


void CGMessengerRemovePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGMessengerRemovePacket*>(&to_msg);
  auto& from = static_cast<const CGMessengerRemovePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGMessengerRemovePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGMessengerRemovePacket::CopyFrom(const CGMessengerRemovePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGMessengerRemovePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGMessengerRemovePacket::IsInitialized() const {
  return true;
}

void CGMessengerRemovePacket::InternalSwap(CGMessengerRemovePacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CGMessengerRemovePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[96]);
}

// ===================================================================

class CGMessengerAddBlockByVIDPacket::_Internal {
 public:
};

CGMessengerAddBlockByVIDPacket::CGMessengerAddBlockByVIDPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGMessengerAddBlockByVIDPacket)
}
CGMessengerAddBlockByVIDPacket::CGMessengerAddBlockByVIDPacket(const CGMessengerAddBlockByVIDPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGMessengerAddBlockByVIDPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.vid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.vid_ = from._impl_.vid_;
  // @@protoc_insertion_point(copy_constructor:network.CGMessengerAddBlockByVIDPacket)
}

inline void CGMessengerAddBlockByVIDPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.vid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CGMessengerAddBlockByVIDPacket::~CGMessengerAddBlockByVIDPacket() {
  // @@protoc_insertion_point(destructor:network.CGMessengerAddBlockByVIDPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGMessengerAddBlockByVIDPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CGMessengerAddBlockByVIDPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGMessengerAddBlockByVIDPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGMessengerAddBlockByVIDPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.vid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGMessengerAddBlockByVIDPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 vid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.vid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGMessengerAddBlockByVIDPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGMessengerAddBlockByVIDPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 vid = 1;
  if (this->_internal_vid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_vid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGMessengerAddBlockByVIDPacket)
  return target;
}

size_t CGMessengerAddBlockByVIDPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGMessengerAddBlockByVIDPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 vid = 1;
  if (this->_internal_vid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_vid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGMessengerAddBlockByVIDPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGMessengerAddBlockByVIDPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGMessengerAddBlockByVIDPacket::GetClassData() const { return &_class_data_; }


void CGMessengerAddBlockByVIDPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGMessengerAddBlockByVIDPacket*>(&to_msg);
  auto& from = static_cast<const CGMessengerAddBlockByVIDPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGMessengerAddBlockByVIDPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_vid() != 0) {
    _this->_internal_set_vid(from._internal_vid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGMessengerAddBlockByVIDPacket::CopyFrom(const CGMessengerAddBlockByVIDPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGMessengerAddBlockByVIDPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGMessengerAddBlockByVIDPacket::IsInitialized() const {
  return true;
}

void CGMessengerAddBlockByVIDPacket::InternalSwap(CGMessengerAddBlockByVIDPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.vid_, other->_impl_.vid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGMessengerAddBlockByVIDPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[97]);
}

// ===================================================================

class CGMessengerAddBlockByNamePacket::_Internal {
 public:
};

CGMessengerAddBlockByNamePacket::CGMessengerAddBlockByNamePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGMessengerAddBlockByNamePacket)
}
CGMessengerAddBlockByNamePacket::CGMessengerAddBlockByNamePacket(const CGMessengerAddBlockByNamePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGMessengerAddBlockByNamePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:network.CGMessengerAddBlockByNamePacket)
}

inline void CGMessengerAddBlockByNamePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CGMessengerAddBlockByNamePacket::~CGMessengerAddBlockByNamePacket() {
  // @@protoc_insertion_point(destructor:network.CGMessengerAddBlockByNamePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGMessengerAddBlockByNamePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void CGMessengerAddBlockByNamePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGMessengerAddBlockByNamePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGMessengerAddBlockByNamePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGMessengerAddBlockByNamePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGMessengerAddBlockByNamePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGMessengerAddBlockByNamePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes name = 1;
  if (!this->_internal_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGMessengerAddBlockByNamePacket)
  return target;
}

size_t CGMessengerAddBlockByNamePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGMessengerAddBlockByNamePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGMessengerAddBlockByNamePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGMessengerAddBlockByNamePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGMessengerAddBlockByNamePacket::GetClassData() const { return &_class_data_; }


void CGMessengerAddBlockByNamePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGMessengerAddBlockByNamePacket*>(&to_msg);
  auto& from = static_cast<const CGMessengerAddBlockByNamePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGMessengerAddBlockByNamePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGMessengerAddBlockByNamePacket::CopyFrom(const CGMessengerAddBlockByNamePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGMessengerAddBlockByNamePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGMessengerAddBlockByNamePacket::IsInitialized() const {
  return true;
}

void CGMessengerAddBlockByNamePacket::InternalSwap(CGMessengerAddBlockByNamePacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CGMessengerAddBlockByNamePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[98]);
}

// ===================================================================

class CGMessengerRemoveBlockPacket::_Internal {
 public:
};

CGMessengerRemoveBlockPacket::CGMessengerRemoveBlockPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGMessengerRemoveBlockPacket)
}
CGMessengerRemoveBlockPacket::CGMessengerRemoveBlockPacket(const CGMessengerRemoveBlockPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGMessengerRemoveBlockPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:network.CGMessengerRemoveBlockPacket)
}

inline void CGMessengerRemoveBlockPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CGMessengerRemoveBlockPacket::~CGMessengerRemoveBlockPacket() {
  // @@protoc_insertion_point(destructor:network.CGMessengerRemoveBlockPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGMessengerRemoveBlockPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void CGMessengerRemoveBlockPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGMessengerRemoveBlockPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGMessengerRemoveBlockPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGMessengerRemoveBlockPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGMessengerRemoveBlockPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGMessengerRemoveBlockPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes name = 1;
  if (!this->_internal_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGMessengerRemoveBlockPacket)
  return target;
}

size_t CGMessengerRemoveBlockPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGMessengerRemoveBlockPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGMessengerRemoveBlockPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGMessengerRemoveBlockPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGMessengerRemoveBlockPacket::GetClassData() const { return &_class_data_; }


void CGMessengerRemoveBlockPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGMessengerRemoveBlockPacket*>(&to_msg);
  auto& from = static_cast<const CGMessengerRemoveBlockPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGMessengerRemoveBlockPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGMessengerRemoveBlockPacket::CopyFrom(const CGMessengerRemoveBlockPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGMessengerRemoveBlockPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGMessengerRemoveBlockPacket::IsInitialized() const {
  return true;
}

void CGMessengerRemoveBlockPacket::InternalSwap(CGMessengerRemoveBlockPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CGMessengerRemoveBlockPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[99]);
}

// ===================================================================

class CGPartyInvitePacket::_Internal {
 public:
};

CGPartyInvitePacket::CGPartyInvitePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGPartyInvitePacket)
}
CGPartyInvitePacket::CGPartyInvitePacket(const CGPartyInvitePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGPartyInvitePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.vid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.vid_ = from._impl_.vid_;
  // @@protoc_insertion_point(copy_constructor:network.CGPartyInvitePacket)
}

inline void CGPartyInvitePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.vid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CGPartyInvitePacket::~CGPartyInvitePacket() {
  // @@protoc_insertion_point(destructor:network.CGPartyInvitePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGPartyInvitePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CGPartyInvitePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGPartyInvitePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGPartyInvitePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.vid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGPartyInvitePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 vid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.vid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGPartyInvitePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGPartyInvitePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 vid = 1;
  if (this->_internal_vid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_vid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGPartyInvitePacket)
  return target;
}

size_t CGPartyInvitePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGPartyInvitePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 vid = 1;
  if (this->_internal_vid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_vid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGPartyInvitePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGPartyInvitePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGPartyInvitePacket::GetClassData() const { return &_class_data_; }


void CGPartyInvitePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGPartyInvitePacket*>(&to_msg);
  auto& from = static_cast<const CGPartyInvitePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGPartyInvitePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_vid() != 0) {
    _this->_internal_set_vid(from._internal_vid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGPartyInvitePacket::CopyFrom(const CGPartyInvitePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGPartyInvitePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGPartyInvitePacket::IsInitialized() const {
  return true;
}

void CGPartyInvitePacket::InternalSwap(CGPartyInvitePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.vid_, other->_impl_.vid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGPartyInvitePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[100]);
}

// ===================================================================

class CGPartyInviteAnswerPacket::_Internal {
 public:
};

CGPartyInviteAnswerPacket::CGPartyInviteAnswerPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGPartyInviteAnswerPacket)
}
CGPartyInviteAnswerPacket::CGPartyInviteAnswerPacket(const CGPartyInviteAnswerPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGPartyInviteAnswerPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.leader_vid_){}
    , decltype(_impl_.accept_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.leader_vid_, &from._impl_.leader_vid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.accept_) -
    reinterpret_cast<char*>(&_impl_.leader_vid_)) + sizeof(_impl_.accept_));
  // @@protoc_insertion_point(copy_constructor:network.CGPartyInviteAnswerPacket)
}

inline void CGPartyInviteAnswerPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.leader_vid_){0u}
    , decltype(_impl_.accept_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CGPartyInviteAnswerPacket::~CGPartyInviteAnswerPacket() {
  // @@protoc_insertion_point(destructor:network.CGPartyInviteAnswerPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGPartyInviteAnswerPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CGPartyInviteAnswerPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGPartyInviteAnswerPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGPartyInviteAnswerPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.leader_vid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.accept_) -
      reinterpret_cast<char*>(&_impl_.leader_vid_)) + sizeof(_impl_.accept_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGPartyInviteAnswerPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 leader_vid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.leader_vid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool accept = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.accept_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGPartyInviteAnswerPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGPartyInviteAnswerPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 leader_vid = 1;
  if (this->_internal_leader_vid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_leader_vid(), target);
  }

  // bool accept = 2;
  if (this->_internal_accept() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_accept(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGPartyInviteAnswerPacket)
  return target;
}

size_t CGPartyInviteAnswerPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGPartyInviteAnswerPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 leader_vid = 1;
  if (this->_internal_leader_vid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_leader_vid());
  }

  // bool accept = 2;
  if (this->_internal_accept() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGPartyInviteAnswerPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGPartyInviteAnswerPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGPartyInviteAnswerPacket::GetClassData() const { return &_class_data_; }


void CGPartyInviteAnswerPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGPartyInviteAnswerPacket*>(&to_msg);
  auto& from = static_cast<const CGPartyInviteAnswerPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGPartyInviteAnswerPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_leader_vid() != 0) {
    _this->_internal_set_leader_vid(from._internal_leader_vid());
  }
  if (from._internal_accept() != 0) {
    _this->_internal_set_accept(from._internal_accept());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGPartyInviteAnswerPacket::CopyFrom(const CGPartyInviteAnswerPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGPartyInviteAnswerPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGPartyInviteAnswerPacket::IsInitialized() const {
  return true;
}

void CGPartyInviteAnswerPacket::InternalSwap(CGPartyInviteAnswerPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGPartyInviteAnswerPacket, _impl_.accept_)
      + sizeof(CGPartyInviteAnswerPacket::_impl_.accept_)
      - PROTOBUF_FIELD_OFFSET(CGPartyInviteAnswerPacket, _impl_.leader_vid_)>(
          reinterpret_cast<char*>(&_impl_.leader_vid_),
          reinterpret_cast<char*>(&other->_impl_.leader_vid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGPartyInviteAnswerPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[101]);
}

// ===================================================================

class CGPartyRemovePacket::_Internal {
 public:
};

CGPartyRemovePacket::CGPartyRemovePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGPartyRemovePacket)
}
CGPartyRemovePacket::CGPartyRemovePacket(const CGPartyRemovePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGPartyRemovePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.pid_ = from._impl_.pid_;
  // @@protoc_insertion_point(copy_constructor:network.CGPartyRemovePacket)
}

inline void CGPartyRemovePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CGPartyRemovePacket::~CGPartyRemovePacket() {
  // @@protoc_insertion_point(destructor:network.CGPartyRemovePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGPartyRemovePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CGPartyRemovePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGPartyRemovePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGPartyRemovePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGPartyRemovePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGPartyRemovePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGPartyRemovePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGPartyRemovePacket)
  return target;
}

size_t CGPartyRemovePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGPartyRemovePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGPartyRemovePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGPartyRemovePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGPartyRemovePacket::GetClassData() const { return &_class_data_; }


void CGPartyRemovePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGPartyRemovePacket*>(&to_msg);
  auto& from = static_cast<const CGPartyRemovePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGPartyRemovePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_pid() != 0) {
    _this->_internal_set_pid(from._internal_pid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGPartyRemovePacket::CopyFrom(const CGPartyRemovePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGPartyRemovePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGPartyRemovePacket::IsInitialized() const {
  return true;
}

void CGPartyRemovePacket::InternalSwap(CGPartyRemovePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.pid_, other->_impl_.pid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGPartyRemovePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[102]);
}

// ===================================================================

class CGPartySetStatePacket::_Internal {
 public:
};

CGPartySetStatePacket::CGPartySetStatePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGPartySetStatePacket)
}
CGPartySetStatePacket::CGPartySetStatePacket(const CGPartySetStatePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGPartySetStatePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pid_){}
    , decltype(_impl_.role_){}
    , decltype(_impl_.flag_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.pid_, &from._impl_.pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.flag_) -
    reinterpret_cast<char*>(&_impl_.pid_)) + sizeof(_impl_.flag_));
  // @@protoc_insertion_point(copy_constructor:network.CGPartySetStatePacket)
}

inline void CGPartySetStatePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pid_){0u}
    , decltype(_impl_.role_){0u}
    , decltype(_impl_.flag_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CGPartySetStatePacket::~CGPartySetStatePacket() {
  // @@protoc_insertion_point(destructor:network.CGPartySetStatePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGPartySetStatePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CGPartySetStatePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGPartySetStatePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGPartySetStatePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.pid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.flag_) -
      reinterpret_cast<char*>(&_impl_.pid_)) + sizeof(_impl_.flag_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGPartySetStatePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 role = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.role_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool flag = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGPartySetStatePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGPartySetStatePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pid(), target);
  }

  // uint32 role = 2;
  if (this->_internal_role() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_role(), target);
  }

  // bool flag = 3;
  if (this->_internal_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_flag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGPartySetStatePacket)
  return target;
}

size_t CGPartySetStatePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGPartySetStatePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid());
  }

  // uint32 role = 2;
  if (this->_internal_role() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_role());
  }

  // bool flag = 3;
  if (this->_internal_flag() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGPartySetStatePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGPartySetStatePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGPartySetStatePacket::GetClassData() const { return &_class_data_; }


void CGPartySetStatePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGPartySetStatePacket*>(&to_msg);
  auto& from = static_cast<const CGPartySetStatePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGPartySetStatePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_pid() != 0) {
    _this->_internal_set_pid(from._internal_pid());
  }
  if (from._internal_role() != 0) {
    _this->_internal_set_role(from._internal_role());
  }
  if (from._internal_flag() != 0) {
    _this->_internal_set_flag(from._internal_flag());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGPartySetStatePacket::CopyFrom(const CGPartySetStatePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGPartySetStatePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGPartySetStatePacket::IsInitialized() const {
  return true;
}

void CGPartySetStatePacket::InternalSwap(CGPartySetStatePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGPartySetStatePacket, _impl_.flag_)
      + sizeof(CGPartySetStatePacket::_impl_.flag_)
      - PROTOBUF_FIELD_OFFSET(CGPartySetStatePacket, _impl_.pid_)>(
          reinterpret_cast<char*>(&_impl_.pid_),
          reinterpret_cast<char*>(&other->_impl_.pid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGPartySetStatePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[103]);
}

// ===================================================================

class CGPartyUseSkillPacket::_Internal {
 public:
};

CGPartyUseSkillPacket::CGPartyUseSkillPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGPartyUseSkillPacket)
}
CGPartyUseSkillPacket::CGPartyUseSkillPacket(const CGPartyUseSkillPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGPartyUseSkillPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.skill_index_){}
    , decltype(_impl_.vid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.skill_index_, &from._impl_.skill_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.vid_) -
    reinterpret_cast<char*>(&_impl_.skill_index_)) + sizeof(_impl_.vid_));
  // @@protoc_insertion_point(copy_constructor:network.CGPartyUseSkillPacket)
}

inline void CGPartyUseSkillPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.skill_index_){0u}
    , decltype(_impl_.vid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CGPartyUseSkillPacket::~CGPartyUseSkillPacket() {
  // @@protoc_insertion_point(destructor:network.CGPartyUseSkillPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGPartyUseSkillPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CGPartyUseSkillPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGPartyUseSkillPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGPartyUseSkillPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.skill_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.vid_) -
      reinterpret_cast<char*>(&_impl_.skill_index_)) + sizeof(_impl_.vid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGPartyUseSkillPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 skill_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.skill_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 vid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.vid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGPartyUseSkillPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGPartyUseSkillPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 skill_index = 1;
  if (this->_internal_skill_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_skill_index(), target);
  }

  // uint32 vid = 2;
  if (this->_internal_vid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_vid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGPartyUseSkillPacket)
  return target;
}

size_t CGPartyUseSkillPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGPartyUseSkillPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 skill_index = 1;
  if (this->_internal_skill_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_skill_index());
  }

  // uint32 vid = 2;
  if (this->_internal_vid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_vid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGPartyUseSkillPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGPartyUseSkillPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGPartyUseSkillPacket::GetClassData() const { return &_class_data_; }


void CGPartyUseSkillPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGPartyUseSkillPacket*>(&to_msg);
  auto& from = static_cast<const CGPartyUseSkillPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGPartyUseSkillPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_skill_index() != 0) {
    _this->_internal_set_skill_index(from._internal_skill_index());
  }
  if (from._internal_vid() != 0) {
    _this->_internal_set_vid(from._internal_vid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGPartyUseSkillPacket::CopyFrom(const CGPartyUseSkillPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGPartyUseSkillPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGPartyUseSkillPacket::IsInitialized() const {
  return true;
}

void CGPartyUseSkillPacket::InternalSwap(CGPartyUseSkillPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGPartyUseSkillPacket, _impl_.vid_)
      + sizeof(CGPartyUseSkillPacket::_impl_.vid_)
      - PROTOBUF_FIELD_OFFSET(CGPartyUseSkillPacket, _impl_.skill_index_)>(
          reinterpret_cast<char*>(&_impl_.skill_index_),
          reinterpret_cast<char*>(&other->_impl_.skill_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGPartyUseSkillPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[104]);
}

// ===================================================================

class CGPartyParameterPacket::_Internal {
 public:
};

CGPartyParameterPacket::CGPartyParameterPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGPartyParameterPacket)
}
CGPartyParameterPacket::CGPartyParameterPacket(const CGPartyParameterPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGPartyParameterPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.distribute_mode_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.distribute_mode_ = from._impl_.distribute_mode_;
  // @@protoc_insertion_point(copy_constructor:network.CGPartyParameterPacket)
}

inline void CGPartyParameterPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.distribute_mode_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CGPartyParameterPacket::~CGPartyParameterPacket() {
  // @@protoc_insertion_point(destructor:network.CGPartyParameterPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGPartyParameterPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CGPartyParameterPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGPartyParameterPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGPartyParameterPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.distribute_mode_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGPartyParameterPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 distribute_mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.distribute_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGPartyParameterPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGPartyParameterPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 distribute_mode = 1;
  if (this->_internal_distribute_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_distribute_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGPartyParameterPacket)
  return target;
}

size_t CGPartyParameterPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGPartyParameterPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 distribute_mode = 1;
  if (this->_internal_distribute_mode() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_distribute_mode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGPartyParameterPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGPartyParameterPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGPartyParameterPacket::GetClassData() const { return &_class_data_; }


void CGPartyParameterPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGPartyParameterPacket*>(&to_msg);
  auto& from = static_cast<const CGPartyParameterPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGPartyParameterPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_distribute_mode() != 0) {
    _this->_internal_set_distribute_mode(from._internal_distribute_mode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGPartyParameterPacket::CopyFrom(const CGPartyParameterPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGPartyParameterPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGPartyParameterPacket::IsInitialized() const {
  return true;
}

void CGPartyParameterPacket::InternalSwap(CGPartyParameterPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.distribute_mode_, other->_impl_.distribute_mode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGPartyParameterPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[105]);
}

// ===================================================================

class CGGuildDepositMoneyPacket::_Internal {
 public:
};

CGGuildDepositMoneyPacket::CGGuildDepositMoneyPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGGuildDepositMoneyPacket)
}
CGGuildDepositMoneyPacket::CGGuildDepositMoneyPacket(const CGGuildDepositMoneyPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGGuildDepositMoneyPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.gold_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.gold_ = from._impl_.gold_;
  // @@protoc_insertion_point(copy_constructor:network.CGGuildDepositMoneyPacket)
}

inline void CGGuildDepositMoneyPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.gold_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CGGuildDepositMoneyPacket::~CGGuildDepositMoneyPacket() {
  // @@protoc_insertion_point(destructor:network.CGGuildDepositMoneyPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGGuildDepositMoneyPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CGGuildDepositMoneyPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGGuildDepositMoneyPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGGuildDepositMoneyPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.gold_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGGuildDepositMoneyPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 gold = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGGuildDepositMoneyPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGGuildDepositMoneyPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 gold = 1;
  if (this->_internal_gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_gold(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGGuildDepositMoneyPacket)
  return target;
}

size_t CGGuildDepositMoneyPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGGuildDepositMoneyPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 gold = 1;
  if (this->_internal_gold() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_gold());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGGuildDepositMoneyPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGGuildDepositMoneyPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGGuildDepositMoneyPacket::GetClassData() const { return &_class_data_; }


void CGGuildDepositMoneyPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGGuildDepositMoneyPacket*>(&to_msg);
  auto& from = static_cast<const CGGuildDepositMoneyPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGGuildDepositMoneyPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_gold() != 0) {
    _this->_internal_set_gold(from._internal_gold());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGGuildDepositMoneyPacket::CopyFrom(const CGGuildDepositMoneyPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGGuildDepositMoneyPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGGuildDepositMoneyPacket::IsInitialized() const {
  return true;
}

void CGGuildDepositMoneyPacket::InternalSwap(CGGuildDepositMoneyPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.gold_, other->_impl_.gold_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGGuildDepositMoneyPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[106]);
}

// ===================================================================

class CGGuildWithdrawMoneyPacket::_Internal {
 public:
};

CGGuildWithdrawMoneyPacket::CGGuildWithdrawMoneyPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGGuildWithdrawMoneyPacket)
}
CGGuildWithdrawMoneyPacket::CGGuildWithdrawMoneyPacket(const CGGuildWithdrawMoneyPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGGuildWithdrawMoneyPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.gold_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.gold_ = from._impl_.gold_;
  // @@protoc_insertion_point(copy_constructor:network.CGGuildWithdrawMoneyPacket)
}

inline void CGGuildWithdrawMoneyPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.gold_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CGGuildWithdrawMoneyPacket::~CGGuildWithdrawMoneyPacket() {
  // @@protoc_insertion_point(destructor:network.CGGuildWithdrawMoneyPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGGuildWithdrawMoneyPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CGGuildWithdrawMoneyPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGGuildWithdrawMoneyPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGGuildWithdrawMoneyPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.gold_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGGuildWithdrawMoneyPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 gold = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGGuildWithdrawMoneyPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGGuildWithdrawMoneyPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 gold = 1;
  if (this->_internal_gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_gold(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGGuildWithdrawMoneyPacket)
  return target;
}

size_t CGGuildWithdrawMoneyPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGGuildWithdrawMoneyPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 gold = 1;
  if (this->_internal_gold() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_gold());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGGuildWithdrawMoneyPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGGuildWithdrawMoneyPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGGuildWithdrawMoneyPacket::GetClassData() const { return &_class_data_; }


void CGGuildWithdrawMoneyPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGGuildWithdrawMoneyPacket*>(&to_msg);
  auto& from = static_cast<const CGGuildWithdrawMoneyPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGGuildWithdrawMoneyPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_gold() != 0) {
    _this->_internal_set_gold(from._internal_gold());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGGuildWithdrawMoneyPacket::CopyFrom(const CGGuildWithdrawMoneyPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGGuildWithdrawMoneyPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGGuildWithdrawMoneyPacket::IsInitialized() const {
  return true;
}

void CGGuildWithdrawMoneyPacket::InternalSwap(CGGuildWithdrawMoneyPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.gold_, other->_impl_.gold_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGGuildWithdrawMoneyPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[107]);
}

// ===================================================================

class CGGuildAddMemberPacket::_Internal {
 public:
};

CGGuildAddMemberPacket::CGGuildAddMemberPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGGuildAddMemberPacket)
}
CGGuildAddMemberPacket::CGGuildAddMemberPacket(const CGGuildAddMemberPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGGuildAddMemberPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.vid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.vid_ = from._impl_.vid_;
  // @@protoc_insertion_point(copy_constructor:network.CGGuildAddMemberPacket)
}

inline void CGGuildAddMemberPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.vid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CGGuildAddMemberPacket::~CGGuildAddMemberPacket() {
  // @@protoc_insertion_point(destructor:network.CGGuildAddMemberPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGGuildAddMemberPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CGGuildAddMemberPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGGuildAddMemberPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGGuildAddMemberPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.vid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGGuildAddMemberPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 vid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.vid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGGuildAddMemberPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGGuildAddMemberPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 vid = 1;
  if (this->_internal_vid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_vid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGGuildAddMemberPacket)
  return target;
}

size_t CGGuildAddMemberPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGGuildAddMemberPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 vid = 1;
  if (this->_internal_vid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_vid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGGuildAddMemberPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGGuildAddMemberPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGGuildAddMemberPacket::GetClassData() const { return &_class_data_; }


void CGGuildAddMemberPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGGuildAddMemberPacket*>(&to_msg);
  auto& from = static_cast<const CGGuildAddMemberPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGGuildAddMemberPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_vid() != 0) {
    _this->_internal_set_vid(from._internal_vid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGGuildAddMemberPacket::CopyFrom(const CGGuildAddMemberPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGGuildAddMemberPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGGuildAddMemberPacket::IsInitialized() const {
  return true;
}

void CGGuildAddMemberPacket::InternalSwap(CGGuildAddMemberPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.vid_, other->_impl_.vid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGGuildAddMemberPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[108]);
}

// ===================================================================

class CGGuildRemoveMemberPacket::_Internal {
 public:
};

CGGuildRemoveMemberPacket::CGGuildRemoveMemberPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGGuildRemoveMemberPacket)
}
CGGuildRemoveMemberPacket::CGGuildRemoveMemberPacket(const CGGuildRemoveMemberPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGGuildRemoveMemberPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.pid_ = from._impl_.pid_;
  // @@protoc_insertion_point(copy_constructor:network.CGGuildRemoveMemberPacket)
}

inline void CGGuildRemoveMemberPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CGGuildRemoveMemberPacket::~CGGuildRemoveMemberPacket() {
  // @@protoc_insertion_point(destructor:network.CGGuildRemoveMemberPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGGuildRemoveMemberPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CGGuildRemoveMemberPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGGuildRemoveMemberPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGGuildRemoveMemberPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGGuildRemoveMemberPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGGuildRemoveMemberPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGGuildRemoveMemberPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGGuildRemoveMemberPacket)
  return target;
}

size_t CGGuildRemoveMemberPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGGuildRemoveMemberPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGGuildRemoveMemberPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGGuildRemoveMemberPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGGuildRemoveMemberPacket::GetClassData() const { return &_class_data_; }


void CGGuildRemoveMemberPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGGuildRemoveMemberPacket*>(&to_msg);
  auto& from = static_cast<const CGGuildRemoveMemberPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGGuildRemoveMemberPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_pid() != 0) {
    _this->_internal_set_pid(from._internal_pid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGGuildRemoveMemberPacket::CopyFrom(const CGGuildRemoveMemberPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGGuildRemoveMemberPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGGuildRemoveMemberPacket::IsInitialized() const {
  return true;
}

void CGGuildRemoveMemberPacket::InternalSwap(CGGuildRemoveMemberPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.pid_, other->_impl_.pid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGGuildRemoveMemberPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[109]);
}

// ===================================================================

class CGGuildChangeGradeNamePacket::_Internal {
 public:
};

CGGuildChangeGradeNamePacket::CGGuildChangeGradeNamePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGGuildChangeGradeNamePacket)
}
CGGuildChangeGradeNamePacket::CGGuildChangeGradeNamePacket(const CGGuildChangeGradeNamePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGGuildChangeGradeNamePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.gradename_){}
    , decltype(_impl_.grade_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.gradename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.gradename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_gradename().empty()) {
    _this->_impl_.gradename_.Set(from._internal_gradename(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.grade_ = from._impl_.grade_;
  // @@protoc_insertion_point(copy_constructor:network.CGGuildChangeGradeNamePacket)
}

inline void CGGuildChangeGradeNamePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.gradename_){}
    , decltype(_impl_.grade_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.gradename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.gradename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CGGuildChangeGradeNamePacket::~CGGuildChangeGradeNamePacket() {
  // @@protoc_insertion_point(destructor:network.CGGuildChangeGradeNamePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGGuildChangeGradeNamePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.gradename_.Destroy();
}

void CGGuildChangeGradeNamePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGGuildChangeGradeNamePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGGuildChangeGradeNamePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.gradename_.ClearToEmpty();
  _impl_.grade_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGGuildChangeGradeNamePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 grade = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.grade_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes gradename = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_gradename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGGuildChangeGradeNamePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGGuildChangeGradeNamePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 grade = 1;
  if (this->_internal_grade() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_grade(), target);
  }

  // bytes gradename = 2;
  if (!this->_internal_gradename().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_gradename(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGGuildChangeGradeNamePacket)
  return target;
}

size_t CGGuildChangeGradeNamePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGGuildChangeGradeNamePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes gradename = 2;
  if (!this->_internal_gradename().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_gradename());
  }

  // uint32 grade = 1;
  if (this->_internal_grade() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_grade());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGGuildChangeGradeNamePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGGuildChangeGradeNamePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGGuildChangeGradeNamePacket::GetClassData() const { return &_class_data_; }


void CGGuildChangeGradeNamePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGGuildChangeGradeNamePacket*>(&to_msg);
  auto& from = static_cast<const CGGuildChangeGradeNamePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGGuildChangeGradeNamePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_gradename().empty()) {
    _this->_internal_set_gradename(from._internal_gradename());
  }
  if (from._internal_grade() != 0) {
    _this->_internal_set_grade(from._internal_grade());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGGuildChangeGradeNamePacket::CopyFrom(const CGGuildChangeGradeNamePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGGuildChangeGradeNamePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGGuildChangeGradeNamePacket::IsInitialized() const {
  return true;
}

void CGGuildChangeGradeNamePacket::InternalSwap(CGGuildChangeGradeNamePacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.gradename_, lhs_arena,
      &other->_impl_.gradename_, rhs_arena
  );
  swap(_impl_.grade_, other->_impl_.grade_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGGuildChangeGradeNamePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[110]);
}

// ===================================================================

class CGGuildChangeGradeAuthorityPacket::_Internal {
 public:
};

CGGuildChangeGradeAuthorityPacket::CGGuildChangeGradeAuthorityPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGGuildChangeGradeAuthorityPacket)
}
CGGuildChangeGradeAuthorityPacket::CGGuildChangeGradeAuthorityPacket(const CGGuildChangeGradeAuthorityPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGGuildChangeGradeAuthorityPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.grade_){}
    , decltype(_impl_.authority_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.grade_, &from._impl_.grade_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.authority_) -
    reinterpret_cast<char*>(&_impl_.grade_)) + sizeof(_impl_.authority_));
  // @@protoc_insertion_point(copy_constructor:network.CGGuildChangeGradeAuthorityPacket)
}

inline void CGGuildChangeGradeAuthorityPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.grade_){0u}
    , decltype(_impl_.authority_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CGGuildChangeGradeAuthorityPacket::~CGGuildChangeGradeAuthorityPacket() {
  // @@protoc_insertion_point(destructor:network.CGGuildChangeGradeAuthorityPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGGuildChangeGradeAuthorityPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CGGuildChangeGradeAuthorityPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGGuildChangeGradeAuthorityPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGGuildChangeGradeAuthorityPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.grade_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.authority_) -
      reinterpret_cast<char*>(&_impl_.grade_)) + sizeof(_impl_.authority_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGGuildChangeGradeAuthorityPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 grade = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.grade_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 authority = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.authority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGGuildChangeGradeAuthorityPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGGuildChangeGradeAuthorityPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 grade = 1;
  if (this->_internal_grade() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_grade(), target);
  }

  // uint32 authority = 2;
  if (this->_internal_authority() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_authority(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGGuildChangeGradeAuthorityPacket)
  return target;
}

size_t CGGuildChangeGradeAuthorityPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGGuildChangeGradeAuthorityPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 grade = 1;
  if (this->_internal_grade() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_grade());
  }

  // uint32 authority = 2;
  if (this->_internal_authority() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_authority());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGGuildChangeGradeAuthorityPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGGuildChangeGradeAuthorityPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGGuildChangeGradeAuthorityPacket::GetClassData() const { return &_class_data_; }


void CGGuildChangeGradeAuthorityPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGGuildChangeGradeAuthorityPacket*>(&to_msg);
  auto& from = static_cast<const CGGuildChangeGradeAuthorityPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGGuildChangeGradeAuthorityPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_grade() != 0) {
    _this->_internal_set_grade(from._internal_grade());
  }
  if (from._internal_authority() != 0) {
    _this->_internal_set_authority(from._internal_authority());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGGuildChangeGradeAuthorityPacket::CopyFrom(const CGGuildChangeGradeAuthorityPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGGuildChangeGradeAuthorityPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGGuildChangeGradeAuthorityPacket::IsInitialized() const {
  return true;
}

void CGGuildChangeGradeAuthorityPacket::InternalSwap(CGGuildChangeGradeAuthorityPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGGuildChangeGradeAuthorityPacket, _impl_.authority_)
      + sizeof(CGGuildChangeGradeAuthorityPacket::_impl_.authority_)
      - PROTOBUF_FIELD_OFFSET(CGGuildChangeGradeAuthorityPacket, _impl_.grade_)>(
          reinterpret_cast<char*>(&_impl_.grade_),
          reinterpret_cast<char*>(&other->_impl_.grade_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGGuildChangeGradeAuthorityPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[111]);
}

// ===================================================================

class CGGuildOfferExpPacket::_Internal {
 public:
};

CGGuildOfferExpPacket::CGGuildOfferExpPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGGuildOfferExpPacket)
}
CGGuildOfferExpPacket::CGGuildOfferExpPacket(const CGGuildOfferExpPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGGuildOfferExpPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.exp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.exp_ = from._impl_.exp_;
  // @@protoc_insertion_point(copy_constructor:network.CGGuildOfferExpPacket)
}

inline void CGGuildOfferExpPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.exp_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CGGuildOfferExpPacket::~CGGuildOfferExpPacket() {
  // @@protoc_insertion_point(destructor:network.CGGuildOfferExpPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGGuildOfferExpPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CGGuildOfferExpPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGGuildOfferExpPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGGuildOfferExpPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.exp_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGGuildOfferExpPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 exp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.exp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGGuildOfferExpPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGGuildOfferExpPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 exp = 1;
  if (this->_internal_exp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_exp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGGuildOfferExpPacket)
  return target;
}

size_t CGGuildOfferExpPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGGuildOfferExpPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 exp = 1;
  if (this->_internal_exp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_exp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGGuildOfferExpPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGGuildOfferExpPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGGuildOfferExpPacket::GetClassData() const { return &_class_data_; }


void CGGuildOfferExpPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGGuildOfferExpPacket*>(&to_msg);
  auto& from = static_cast<const CGGuildOfferExpPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGGuildOfferExpPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_exp() != 0) {
    _this->_internal_set_exp(from._internal_exp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGGuildOfferExpPacket::CopyFrom(const CGGuildOfferExpPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGGuildOfferExpPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGGuildOfferExpPacket::IsInitialized() const {
  return true;
}

void CGGuildOfferExpPacket::InternalSwap(CGGuildOfferExpPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.exp_, other->_impl_.exp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGGuildOfferExpPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[112]);
}

// ===================================================================

class CGGuildChargeGSPPacket::_Internal {
 public:
};

CGGuildChargeGSPPacket::CGGuildChargeGSPPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGGuildChargeGSPPacket)
}
CGGuildChargeGSPPacket::CGGuildChargeGSPPacket(const CGGuildChargeGSPPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGGuildChargeGSPPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.amount_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.amount_ = from._impl_.amount_;
  // @@protoc_insertion_point(copy_constructor:network.CGGuildChargeGSPPacket)
}

inline void CGGuildChargeGSPPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.amount_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CGGuildChargeGSPPacket::~CGGuildChargeGSPPacket() {
  // @@protoc_insertion_point(destructor:network.CGGuildChargeGSPPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGGuildChargeGSPPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CGGuildChargeGSPPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGGuildChargeGSPPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGGuildChargeGSPPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.amount_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGGuildChargeGSPPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 amount = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGGuildChargeGSPPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGGuildChargeGSPPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 amount = 1;
  if (this->_internal_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGGuildChargeGSPPacket)
  return target;
}

size_t CGGuildChargeGSPPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGGuildChargeGSPPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 amount = 1;
  if (this->_internal_amount() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_amount());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGGuildChargeGSPPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGGuildChargeGSPPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGGuildChargeGSPPacket::GetClassData() const { return &_class_data_; }


void CGGuildChargeGSPPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGGuildChargeGSPPacket*>(&to_msg);
  auto& from = static_cast<const CGGuildChargeGSPPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGGuildChargeGSPPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_amount() != 0) {
    _this->_internal_set_amount(from._internal_amount());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGGuildChargeGSPPacket::CopyFrom(const CGGuildChargeGSPPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGGuildChargeGSPPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGGuildChargeGSPPacket::IsInitialized() const {
  return true;
}

void CGGuildChargeGSPPacket::InternalSwap(CGGuildChargeGSPPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.amount_, other->_impl_.amount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGGuildChargeGSPPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[113]);
}

// ===================================================================

class CGGuildPostCommentPacket::_Internal {
 public:
};

CGGuildPostCommentPacket::CGGuildPostCommentPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGGuildPostCommentPacket)
}
CGGuildPostCommentPacket::CGGuildPostCommentPacket(const CGGuildPostCommentPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGGuildPostCommentPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:network.CGGuildPostCommentPacket)
}

inline void CGGuildPostCommentPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CGGuildPostCommentPacket::~CGGuildPostCommentPacket() {
  // @@protoc_insertion_point(destructor:network.CGGuildPostCommentPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGGuildPostCommentPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
}

void CGGuildPostCommentPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGGuildPostCommentPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGGuildPostCommentPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGGuildPostCommentPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGGuildPostCommentPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGGuildPostCommentPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes message = 1;
  if (!this->_internal_message().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGGuildPostCommentPacket)
  return target;
}

size_t CGGuildPostCommentPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGGuildPostCommentPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes message = 1;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_message());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGGuildPostCommentPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGGuildPostCommentPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGGuildPostCommentPacket::GetClassData() const { return &_class_data_; }


void CGGuildPostCommentPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGGuildPostCommentPacket*>(&to_msg);
  auto& from = static_cast<const CGGuildPostCommentPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGGuildPostCommentPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGGuildPostCommentPacket::CopyFrom(const CGGuildPostCommentPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGGuildPostCommentPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGGuildPostCommentPacket::IsInitialized() const {
  return true;
}

void CGGuildPostCommentPacket::InternalSwap(CGGuildPostCommentPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CGGuildPostCommentPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[114]);
}

// ===================================================================

class CGGuildDeleteCommentPacket::_Internal {
 public:
};

CGGuildDeleteCommentPacket::CGGuildDeleteCommentPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGGuildDeleteCommentPacket)
}
CGGuildDeleteCommentPacket::CGGuildDeleteCommentPacket(const CGGuildDeleteCommentPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGGuildDeleteCommentPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.comment_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.comment_id_ = from._impl_.comment_id_;
  // @@protoc_insertion_point(copy_constructor:network.CGGuildDeleteCommentPacket)
}

inline void CGGuildDeleteCommentPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.comment_id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CGGuildDeleteCommentPacket::~CGGuildDeleteCommentPacket() {
  // @@protoc_insertion_point(destructor:network.CGGuildDeleteCommentPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGGuildDeleteCommentPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CGGuildDeleteCommentPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGGuildDeleteCommentPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGGuildDeleteCommentPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.comment_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGGuildDeleteCommentPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 comment_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.comment_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGGuildDeleteCommentPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGGuildDeleteCommentPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 comment_id = 1;
  if (this->_internal_comment_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_comment_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGGuildDeleteCommentPacket)
  return target;
}

size_t CGGuildDeleteCommentPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGGuildDeleteCommentPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 comment_id = 1;
  if (this->_internal_comment_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_comment_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGGuildDeleteCommentPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGGuildDeleteCommentPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGGuildDeleteCommentPacket::GetClassData() const { return &_class_data_; }


void CGGuildDeleteCommentPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGGuildDeleteCommentPacket*>(&to_msg);
  auto& from = static_cast<const CGGuildDeleteCommentPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGGuildDeleteCommentPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_comment_id() != 0) {
    _this->_internal_set_comment_id(from._internal_comment_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGGuildDeleteCommentPacket::CopyFrom(const CGGuildDeleteCommentPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGGuildDeleteCommentPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGGuildDeleteCommentPacket::IsInitialized() const {
  return true;
}

void CGGuildDeleteCommentPacket::InternalSwap(CGGuildDeleteCommentPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.comment_id_, other->_impl_.comment_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGGuildDeleteCommentPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[115]);
}

// ===================================================================

class CGGuildChangeMemberGradePacket::_Internal {
 public:
};

CGGuildChangeMemberGradePacket::CGGuildChangeMemberGradePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGGuildChangeMemberGradePacket)
}
CGGuildChangeMemberGradePacket::CGGuildChangeMemberGradePacket(const CGGuildChangeMemberGradePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGGuildChangeMemberGradePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pid_){}
    , decltype(_impl_.grade_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.pid_, &from._impl_.pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.grade_) -
    reinterpret_cast<char*>(&_impl_.pid_)) + sizeof(_impl_.grade_));
  // @@protoc_insertion_point(copy_constructor:network.CGGuildChangeMemberGradePacket)
}

inline void CGGuildChangeMemberGradePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pid_){0u}
    , decltype(_impl_.grade_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CGGuildChangeMemberGradePacket::~CGGuildChangeMemberGradePacket() {
  // @@protoc_insertion_point(destructor:network.CGGuildChangeMemberGradePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGGuildChangeMemberGradePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CGGuildChangeMemberGradePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGGuildChangeMemberGradePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGGuildChangeMemberGradePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.pid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.grade_) -
      reinterpret_cast<char*>(&_impl_.pid_)) + sizeof(_impl_.grade_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGGuildChangeMemberGradePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 grade = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.grade_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGGuildChangeMemberGradePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGGuildChangeMemberGradePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pid(), target);
  }

  // uint32 grade = 2;
  if (this->_internal_grade() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_grade(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGGuildChangeMemberGradePacket)
  return target;
}

size_t CGGuildChangeMemberGradePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGGuildChangeMemberGradePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid());
  }

  // uint32 grade = 2;
  if (this->_internal_grade() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_grade());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGGuildChangeMemberGradePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGGuildChangeMemberGradePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGGuildChangeMemberGradePacket::GetClassData() const { return &_class_data_; }


void CGGuildChangeMemberGradePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGGuildChangeMemberGradePacket*>(&to_msg);
  auto& from = static_cast<const CGGuildChangeMemberGradePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGGuildChangeMemberGradePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_pid() != 0) {
    _this->_internal_set_pid(from._internal_pid());
  }
  if (from._internal_grade() != 0) {
    _this->_internal_set_grade(from._internal_grade());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGGuildChangeMemberGradePacket::CopyFrom(const CGGuildChangeMemberGradePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGGuildChangeMemberGradePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGGuildChangeMemberGradePacket::IsInitialized() const {
  return true;
}

void CGGuildChangeMemberGradePacket::InternalSwap(CGGuildChangeMemberGradePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGGuildChangeMemberGradePacket, _impl_.grade_)
      + sizeof(CGGuildChangeMemberGradePacket::_impl_.grade_)
      - PROTOBUF_FIELD_OFFSET(CGGuildChangeMemberGradePacket, _impl_.pid_)>(
          reinterpret_cast<char*>(&_impl_.pid_),
          reinterpret_cast<char*>(&other->_impl_.pid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGGuildChangeMemberGradePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[116]);
}

// ===================================================================

class CGGuildUseSkillPacket::_Internal {
 public:
};

CGGuildUseSkillPacket::CGGuildUseSkillPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGGuildUseSkillPacket)
}
CGGuildUseSkillPacket::CGGuildUseSkillPacket(const CGGuildUseSkillPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGGuildUseSkillPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.vnum_){}
    , decltype(_impl_.pid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.vnum_, &from._impl_.vnum_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.pid_) -
    reinterpret_cast<char*>(&_impl_.vnum_)) + sizeof(_impl_.pid_));
  // @@protoc_insertion_point(copy_constructor:network.CGGuildUseSkillPacket)
}

inline void CGGuildUseSkillPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.vnum_){0u}
    , decltype(_impl_.pid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CGGuildUseSkillPacket::~CGGuildUseSkillPacket() {
  // @@protoc_insertion_point(destructor:network.CGGuildUseSkillPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGGuildUseSkillPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CGGuildUseSkillPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGGuildUseSkillPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGGuildUseSkillPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.vnum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.pid_) -
      reinterpret_cast<char*>(&_impl_.vnum_)) + sizeof(_impl_.pid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGGuildUseSkillPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 vnum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.vnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 pid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGGuildUseSkillPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGGuildUseSkillPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 vnum = 1;
  if (this->_internal_vnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_vnum(), target);
  }

  // uint32 pid = 2;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_pid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGGuildUseSkillPacket)
  return target;
}

size_t CGGuildUseSkillPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGGuildUseSkillPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 vnum = 1;
  if (this->_internal_vnum() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_vnum());
  }

  // uint32 pid = 2;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGGuildUseSkillPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGGuildUseSkillPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGGuildUseSkillPacket::GetClassData() const { return &_class_data_; }


void CGGuildUseSkillPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGGuildUseSkillPacket*>(&to_msg);
  auto& from = static_cast<const CGGuildUseSkillPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGGuildUseSkillPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_vnum() != 0) {
    _this->_internal_set_vnum(from._internal_vnum());
  }
  if (from._internal_pid() != 0) {
    _this->_internal_set_pid(from._internal_pid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGGuildUseSkillPacket::CopyFrom(const CGGuildUseSkillPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGGuildUseSkillPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGGuildUseSkillPacket::IsInitialized() const {
  return true;
}

void CGGuildUseSkillPacket::InternalSwap(CGGuildUseSkillPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGGuildUseSkillPacket, _impl_.pid_)
      + sizeof(CGGuildUseSkillPacket::_impl_.pid_)
      - PROTOBUF_FIELD_OFFSET(CGGuildUseSkillPacket, _impl_.vnum_)>(
          reinterpret_cast<char*>(&_impl_.vnum_),
          reinterpret_cast<char*>(&other->_impl_.vnum_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGGuildUseSkillPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[117]);
}

// ===================================================================

class CGGuildChangeMemberGeneralPacket::_Internal {
 public:
};

CGGuildChangeMemberGeneralPacket::CGGuildChangeMemberGeneralPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGGuildChangeMemberGeneralPacket)
}
CGGuildChangeMemberGeneralPacket::CGGuildChangeMemberGeneralPacket(const CGGuildChangeMemberGeneralPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGGuildChangeMemberGeneralPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pid_){}
    , decltype(_impl_.is_general_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.pid_, &from._impl_.pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_general_) -
    reinterpret_cast<char*>(&_impl_.pid_)) + sizeof(_impl_.is_general_));
  // @@protoc_insertion_point(copy_constructor:network.CGGuildChangeMemberGeneralPacket)
}

inline void CGGuildChangeMemberGeneralPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pid_){0u}
    , decltype(_impl_.is_general_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CGGuildChangeMemberGeneralPacket::~CGGuildChangeMemberGeneralPacket() {
  // @@protoc_insertion_point(destructor:network.CGGuildChangeMemberGeneralPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGGuildChangeMemberGeneralPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CGGuildChangeMemberGeneralPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGGuildChangeMemberGeneralPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGGuildChangeMemberGeneralPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.pid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.is_general_) -
      reinterpret_cast<char*>(&_impl_.pid_)) + sizeof(_impl_.is_general_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGGuildChangeMemberGeneralPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_general = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.is_general_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGGuildChangeMemberGeneralPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGGuildChangeMemberGeneralPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pid(), target);
  }

  // bool is_general = 2;
  if (this->_internal_is_general() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_is_general(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGGuildChangeMemberGeneralPacket)
  return target;
}

size_t CGGuildChangeMemberGeneralPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGGuildChangeMemberGeneralPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid());
  }

  // bool is_general = 2;
  if (this->_internal_is_general() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGGuildChangeMemberGeneralPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGGuildChangeMemberGeneralPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGGuildChangeMemberGeneralPacket::GetClassData() const { return &_class_data_; }


void CGGuildChangeMemberGeneralPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGGuildChangeMemberGeneralPacket*>(&to_msg);
  auto& from = static_cast<const CGGuildChangeMemberGeneralPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGGuildChangeMemberGeneralPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_pid() != 0) {
    _this->_internal_set_pid(from._internal_pid());
  }
  if (from._internal_is_general() != 0) {
    _this->_internal_set_is_general(from._internal_is_general());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGGuildChangeMemberGeneralPacket::CopyFrom(const CGGuildChangeMemberGeneralPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGGuildChangeMemberGeneralPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGGuildChangeMemberGeneralPacket::IsInitialized() const {
  return true;
}

void CGGuildChangeMemberGeneralPacket::InternalSwap(CGGuildChangeMemberGeneralPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGGuildChangeMemberGeneralPacket, _impl_.is_general_)
      + sizeof(CGGuildChangeMemberGeneralPacket::_impl_.is_general_)
      - PROTOBUF_FIELD_OFFSET(CGGuildChangeMemberGeneralPacket, _impl_.pid_)>(
          reinterpret_cast<char*>(&_impl_.pid_),
          reinterpret_cast<char*>(&other->_impl_.pid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGGuildChangeMemberGeneralPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[118]);
}

// ===================================================================

class CGGuildInviteAnswerPacket::_Internal {
 public:
};

CGGuildInviteAnswerPacket::CGGuildInviteAnswerPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGGuildInviteAnswerPacket)
}
CGGuildInviteAnswerPacket::CGGuildInviteAnswerPacket(const CGGuildInviteAnswerPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGGuildInviteAnswerPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.guild_id_){}
    , decltype(_impl_.accept_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.guild_id_, &from._impl_.guild_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.accept_) -
    reinterpret_cast<char*>(&_impl_.guild_id_)) + sizeof(_impl_.accept_));
  // @@protoc_insertion_point(copy_constructor:network.CGGuildInviteAnswerPacket)
}

inline void CGGuildInviteAnswerPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.guild_id_){0u}
    , decltype(_impl_.accept_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CGGuildInviteAnswerPacket::~CGGuildInviteAnswerPacket() {
  // @@protoc_insertion_point(destructor:network.CGGuildInviteAnswerPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGGuildInviteAnswerPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CGGuildInviteAnswerPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGGuildInviteAnswerPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGGuildInviteAnswerPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.guild_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.accept_) -
      reinterpret_cast<char*>(&_impl_.guild_id_)) + sizeof(_impl_.accept_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGGuildInviteAnswerPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 guild_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool accept = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.accept_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGGuildInviteAnswerPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGGuildInviteAnswerPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 guild_id = 1;
  if (this->_internal_guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_guild_id(), target);
  }

  // bool accept = 2;
  if (this->_internal_accept() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_accept(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGGuildInviteAnswerPacket)
  return target;
}

size_t CGGuildInviteAnswerPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGGuildInviteAnswerPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 guild_id = 1;
  if (this->_internal_guild_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_guild_id());
  }

  // bool accept = 2;
  if (this->_internal_accept() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGGuildInviteAnswerPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGGuildInviteAnswerPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGGuildInviteAnswerPacket::GetClassData() const { return &_class_data_; }


void CGGuildInviteAnswerPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGGuildInviteAnswerPacket*>(&to_msg);
  auto& from = static_cast<const CGGuildInviteAnswerPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGGuildInviteAnswerPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_guild_id() != 0) {
    _this->_internal_set_guild_id(from._internal_guild_id());
  }
  if (from._internal_accept() != 0) {
    _this->_internal_set_accept(from._internal_accept());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGGuildInviteAnswerPacket::CopyFrom(const CGGuildInviteAnswerPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGGuildInviteAnswerPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGGuildInviteAnswerPacket::IsInitialized() const {
  return true;
}

void CGGuildInviteAnswerPacket::InternalSwap(CGGuildInviteAnswerPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGGuildInviteAnswerPacket, _impl_.accept_)
      + sizeof(CGGuildInviteAnswerPacket::_impl_.accept_)
      - PROTOBUF_FIELD_OFFSET(CGGuildInviteAnswerPacket, _impl_.guild_id_)>(
          reinterpret_cast<char*>(&_impl_.guild_id_),
          reinterpret_cast<char*>(&other->_impl_.guild_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGGuildInviteAnswerPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[119]);
}

// ===================================================================

class CGGuildAnswerMakePacket::_Internal {
 public:
};

CGGuildAnswerMakePacket::CGGuildAnswerMakePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGGuildAnswerMakePacket)
}
CGGuildAnswerMakePacket::CGGuildAnswerMakePacket(const CGGuildAnswerMakePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGGuildAnswerMakePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.guild_name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.guild_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.guild_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_guild_name().empty()) {
    _this->_impl_.guild_name_.Set(from._internal_guild_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:network.CGGuildAnswerMakePacket)
}

inline void CGGuildAnswerMakePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.guild_name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.guild_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.guild_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CGGuildAnswerMakePacket::~CGGuildAnswerMakePacket() {
  // @@protoc_insertion_point(destructor:network.CGGuildAnswerMakePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGGuildAnswerMakePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.guild_name_.Destroy();
}

void CGGuildAnswerMakePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGGuildAnswerMakePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGGuildAnswerMakePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.guild_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGGuildAnswerMakePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes guild_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_guild_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGGuildAnswerMakePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGGuildAnswerMakePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes guild_name = 1;
  if (!this->_internal_guild_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_guild_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGGuildAnswerMakePacket)
  return target;
}

size_t CGGuildAnswerMakePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGGuildAnswerMakePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes guild_name = 1;
  if (!this->_internal_guild_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_guild_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGGuildAnswerMakePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGGuildAnswerMakePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGGuildAnswerMakePacket::GetClassData() const { return &_class_data_; }


void CGGuildAnswerMakePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGGuildAnswerMakePacket*>(&to_msg);
  auto& from = static_cast<const CGGuildAnswerMakePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGGuildAnswerMakePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_guild_name().empty()) {
    _this->_internal_set_guild_name(from._internal_guild_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGGuildAnswerMakePacket::CopyFrom(const CGGuildAnswerMakePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGGuildAnswerMakePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGGuildAnswerMakePacket::IsInitialized() const {
  return true;
}

void CGGuildAnswerMakePacket::InternalSwap(CGGuildAnswerMakePacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.guild_name_, lhs_arena,
      &other->_impl_.guild_name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CGGuildAnswerMakePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[120]);
}

// ===================================================================

class CGGuildRequestListPacket::_Internal {
 public:
};

CGGuildRequestListPacket::CGGuildRequestListPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGGuildRequestListPacket)
}
CGGuildRequestListPacket::CGGuildRequestListPacket(const CGGuildRequestListPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGGuildRequestListPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.page_number_){}
    , decltype(_impl_.page_type_){}
    , decltype(_impl_.empire_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.page_number_, &from._impl_.page_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.empire_) -
    reinterpret_cast<char*>(&_impl_.page_number_)) + sizeof(_impl_.empire_));
  // @@protoc_insertion_point(copy_constructor:network.CGGuildRequestListPacket)
}

inline void CGGuildRequestListPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.page_number_){0u}
    , decltype(_impl_.page_type_){0u}
    , decltype(_impl_.empire_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CGGuildRequestListPacket::~CGGuildRequestListPacket() {
  // @@protoc_insertion_point(destructor:network.CGGuildRequestListPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGGuildRequestListPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CGGuildRequestListPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGGuildRequestListPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGGuildRequestListPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.page_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.empire_) -
      reinterpret_cast<char*>(&_impl_.page_number_)) + sizeof(_impl_.empire_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGGuildRequestListPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 page_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.page_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 page_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.page_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 empire = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.empire_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGGuildRequestListPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGGuildRequestListPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 page_number = 1;
  if (this->_internal_page_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_page_number(), target);
  }

  // uint32 page_type = 2;
  if (this->_internal_page_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_page_type(), target);
  }

  // uint32 empire = 3;
  if (this->_internal_empire() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_empire(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGGuildRequestListPacket)
  return target;
}

size_t CGGuildRequestListPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGGuildRequestListPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 page_number = 1;
  if (this->_internal_page_number() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_page_number());
  }

  // uint32 page_type = 2;
  if (this->_internal_page_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_page_type());
  }

  // uint32 empire = 3;
  if (this->_internal_empire() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_empire());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGGuildRequestListPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGGuildRequestListPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGGuildRequestListPacket::GetClassData() const { return &_class_data_; }


void CGGuildRequestListPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGGuildRequestListPacket*>(&to_msg);
  auto& from = static_cast<const CGGuildRequestListPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGGuildRequestListPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_page_number() != 0) {
    _this->_internal_set_page_number(from._internal_page_number());
  }
  if (from._internal_page_type() != 0) {
    _this->_internal_set_page_type(from._internal_page_type());
  }
  if (from._internal_empire() != 0) {
    _this->_internal_set_empire(from._internal_empire());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGGuildRequestListPacket::CopyFrom(const CGGuildRequestListPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGGuildRequestListPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGGuildRequestListPacket::IsInitialized() const {
  return true;
}

void CGGuildRequestListPacket::InternalSwap(CGGuildRequestListPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGGuildRequestListPacket, _impl_.empire_)
      + sizeof(CGGuildRequestListPacket::_impl_.empire_)
      - PROTOBUF_FIELD_OFFSET(CGGuildRequestListPacket, _impl_.page_number_)>(
          reinterpret_cast<char*>(&_impl_.page_number_),
          reinterpret_cast<char*>(&other->_impl_.page_number_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGGuildRequestListPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[121]);
}

// ===================================================================

class CGGuildSearchPacket::_Internal {
 public:
};

CGGuildSearchPacket::CGGuildSearchPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGGuildSearchPacket)
}
CGGuildSearchPacket::CGGuildSearchPacket(const CGGuildSearchPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGGuildSearchPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.search_name_){}
    , decltype(_impl_.page_type_){}
    , decltype(_impl_.empire_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.search_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.search_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_search_name().empty()) {
    _this->_impl_.search_name_.Set(from._internal_search_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.page_type_, &from._impl_.page_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.empire_) -
    reinterpret_cast<char*>(&_impl_.page_type_)) + sizeof(_impl_.empire_));
  // @@protoc_insertion_point(copy_constructor:network.CGGuildSearchPacket)
}

inline void CGGuildSearchPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.search_name_){}
    , decltype(_impl_.page_type_){0u}
    , decltype(_impl_.empire_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.search_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.search_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CGGuildSearchPacket::~CGGuildSearchPacket() {
  // @@protoc_insertion_point(destructor:network.CGGuildSearchPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGGuildSearchPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.search_name_.Destroy();
}

void CGGuildSearchPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGGuildSearchPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGGuildSearchPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.search_name_.ClearToEmpty();
  ::memset(&_impl_.page_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.empire_) -
      reinterpret_cast<char*>(&_impl_.page_type_)) + sizeof(_impl_.empire_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGGuildSearchPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes search_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_search_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 page_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.page_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 empire = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.empire_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGGuildSearchPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGGuildSearchPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes search_name = 1;
  if (!this->_internal_search_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_search_name(), target);
  }

  // uint32 page_type = 2;
  if (this->_internal_page_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_page_type(), target);
  }

  // uint32 empire = 3;
  if (this->_internal_empire() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_empire(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGGuildSearchPacket)
  return target;
}

size_t CGGuildSearchPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGGuildSearchPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes search_name = 1;
  if (!this->_internal_search_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_search_name());
  }

  // uint32 page_type = 2;
  if (this->_internal_page_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_page_type());
  }

  // uint32 empire = 3;
  if (this->_internal_empire() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_empire());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGGuildSearchPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGGuildSearchPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGGuildSearchPacket::GetClassData() const { return &_class_data_; }


void CGGuildSearchPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGGuildSearchPacket*>(&to_msg);
  auto& from = static_cast<const CGGuildSearchPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGGuildSearchPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_search_name().empty()) {
    _this->_internal_set_search_name(from._internal_search_name());
  }
  if (from._internal_page_type() != 0) {
    _this->_internal_set_page_type(from._internal_page_type());
  }
  if (from._internal_empire() != 0) {
    _this->_internal_set_empire(from._internal_empire());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGGuildSearchPacket::CopyFrom(const CGGuildSearchPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGGuildSearchPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGGuildSearchPacket::IsInitialized() const {
  return true;
}

void CGGuildSearchPacket::InternalSwap(CGGuildSearchPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.search_name_, lhs_arena,
      &other->_impl_.search_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGGuildSearchPacket, _impl_.empire_)
      + sizeof(CGGuildSearchPacket::_impl_.empire_)
      - PROTOBUF_FIELD_OFFSET(CGGuildSearchPacket, _impl_.page_type_)>(
          reinterpret_cast<char*>(&_impl_.page_type_),
          reinterpret_cast<char*>(&other->_impl_.page_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGGuildSearchPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[122]);
}

// ===================================================================

class CGGuildSafeboxCheckinPacket::_Internal {
 public:
  static const ::network::TItemPos& item_pos(const CGGuildSafeboxCheckinPacket* msg);
};

const ::network::TItemPos&
CGGuildSafeboxCheckinPacket::_Internal::item_pos(const CGGuildSafeboxCheckinPacket* msg) {
  return *msg->_impl_.item_pos_;
}
void CGGuildSafeboxCheckinPacket::clear_item_pos() {
  if (GetArenaForAllocation() == nullptr && _impl_.item_pos_ != nullptr) {
    delete _impl_.item_pos_;
  }
  _impl_.item_pos_ = nullptr;
}
CGGuildSafeboxCheckinPacket::CGGuildSafeboxCheckinPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGGuildSafeboxCheckinPacket)
}
CGGuildSafeboxCheckinPacket::CGGuildSafeboxCheckinPacket(const CGGuildSafeboxCheckinPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGGuildSafeboxCheckinPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.item_pos_){nullptr}
    , decltype(_impl_.safebox_pos_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_item_pos()) {
    _this->_impl_.item_pos_ = new ::network::TItemPos(*from._impl_.item_pos_);
  }
  _this->_impl_.safebox_pos_ = from._impl_.safebox_pos_;
  // @@protoc_insertion_point(copy_constructor:network.CGGuildSafeboxCheckinPacket)
}

inline void CGGuildSafeboxCheckinPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.item_pos_){nullptr}
    , decltype(_impl_.safebox_pos_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CGGuildSafeboxCheckinPacket::~CGGuildSafeboxCheckinPacket() {
  // @@protoc_insertion_point(destructor:network.CGGuildSafeboxCheckinPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGGuildSafeboxCheckinPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.item_pos_;
}

void CGGuildSafeboxCheckinPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGGuildSafeboxCheckinPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGGuildSafeboxCheckinPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.item_pos_ != nullptr) {
    delete _impl_.item_pos_;
  }
  _impl_.item_pos_ = nullptr;
  _impl_.safebox_pos_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGGuildSafeboxCheckinPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .network.TItemPos item_pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_item_pos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 safebox_pos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.safebox_pos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGGuildSafeboxCheckinPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGGuildSafeboxCheckinPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .network.TItemPos item_pos = 1;
  if (this->_internal_has_item_pos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::item_pos(this),
        _Internal::item_pos(this).GetCachedSize(), target, stream);
  }

  // uint32 safebox_pos = 2;
  if (this->_internal_safebox_pos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_safebox_pos(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGGuildSafeboxCheckinPacket)
  return target;
}

size_t CGGuildSafeboxCheckinPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGGuildSafeboxCheckinPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .network.TItemPos item_pos = 1;
  if (this->_internal_has_item_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.item_pos_);
  }

  // uint32 safebox_pos = 2;
  if (this->_internal_safebox_pos() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_safebox_pos());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGGuildSafeboxCheckinPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGGuildSafeboxCheckinPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGGuildSafeboxCheckinPacket::GetClassData() const { return &_class_data_; }


void CGGuildSafeboxCheckinPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGGuildSafeboxCheckinPacket*>(&to_msg);
  auto& from = static_cast<const CGGuildSafeboxCheckinPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGGuildSafeboxCheckinPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_item_pos()) {
    _this->_internal_mutable_item_pos()->::network::TItemPos::MergeFrom(
        from._internal_item_pos());
  }
  if (from._internal_safebox_pos() != 0) {
    _this->_internal_set_safebox_pos(from._internal_safebox_pos());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGGuildSafeboxCheckinPacket::CopyFrom(const CGGuildSafeboxCheckinPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGGuildSafeboxCheckinPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGGuildSafeboxCheckinPacket::IsInitialized() const {
  return true;
}

void CGGuildSafeboxCheckinPacket::InternalSwap(CGGuildSafeboxCheckinPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGGuildSafeboxCheckinPacket, _impl_.safebox_pos_)
      + sizeof(CGGuildSafeboxCheckinPacket::_impl_.safebox_pos_)
      - PROTOBUF_FIELD_OFFSET(CGGuildSafeboxCheckinPacket, _impl_.item_pos_)>(
          reinterpret_cast<char*>(&_impl_.item_pos_),
          reinterpret_cast<char*>(&other->_impl_.item_pos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGGuildSafeboxCheckinPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[123]);
}

// ===================================================================

class CGGuildSafeboxCheckoutPacket::_Internal {
 public:
  static const ::network::TItemPos& item_pos(const CGGuildSafeboxCheckoutPacket* msg);
};

const ::network::TItemPos&
CGGuildSafeboxCheckoutPacket::_Internal::item_pos(const CGGuildSafeboxCheckoutPacket* msg) {
  return *msg->_impl_.item_pos_;
}
void CGGuildSafeboxCheckoutPacket::clear_item_pos() {
  if (GetArenaForAllocation() == nullptr && _impl_.item_pos_ != nullptr) {
    delete _impl_.item_pos_;
  }
  _impl_.item_pos_ = nullptr;
}
CGGuildSafeboxCheckoutPacket::CGGuildSafeboxCheckoutPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGGuildSafeboxCheckoutPacket)
}
CGGuildSafeboxCheckoutPacket::CGGuildSafeboxCheckoutPacket(const CGGuildSafeboxCheckoutPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGGuildSafeboxCheckoutPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.item_pos_){nullptr}
    , decltype(_impl_.safebox_pos_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_item_pos()) {
    _this->_impl_.item_pos_ = new ::network::TItemPos(*from._impl_.item_pos_);
  }
  _this->_impl_.safebox_pos_ = from._impl_.safebox_pos_;
  // @@protoc_insertion_point(copy_constructor:network.CGGuildSafeboxCheckoutPacket)
}

inline void CGGuildSafeboxCheckoutPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.item_pos_){nullptr}
    , decltype(_impl_.safebox_pos_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CGGuildSafeboxCheckoutPacket::~CGGuildSafeboxCheckoutPacket() {
  // @@protoc_insertion_point(destructor:network.CGGuildSafeboxCheckoutPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGGuildSafeboxCheckoutPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.item_pos_;
}

void CGGuildSafeboxCheckoutPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGGuildSafeboxCheckoutPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGGuildSafeboxCheckoutPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.item_pos_ != nullptr) {
    delete _impl_.item_pos_;
  }
  _impl_.item_pos_ = nullptr;
  _impl_.safebox_pos_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGGuildSafeboxCheckoutPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 safebox_pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.safebox_pos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .network.TItemPos item_pos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_item_pos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGGuildSafeboxCheckoutPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGGuildSafeboxCheckoutPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 safebox_pos = 1;
  if (this->_internal_safebox_pos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_safebox_pos(), target);
  }

  // .network.TItemPos item_pos = 2;
  if (this->_internal_has_item_pos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::item_pos(this),
        _Internal::item_pos(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGGuildSafeboxCheckoutPacket)
  return target;
}

size_t CGGuildSafeboxCheckoutPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGGuildSafeboxCheckoutPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .network.TItemPos item_pos = 2;
  if (this->_internal_has_item_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.item_pos_);
  }

  // uint32 safebox_pos = 1;
  if (this->_internal_safebox_pos() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_safebox_pos());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGGuildSafeboxCheckoutPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGGuildSafeboxCheckoutPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGGuildSafeboxCheckoutPacket::GetClassData() const { return &_class_data_; }


void CGGuildSafeboxCheckoutPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGGuildSafeboxCheckoutPacket*>(&to_msg);
  auto& from = static_cast<const CGGuildSafeboxCheckoutPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGGuildSafeboxCheckoutPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_item_pos()) {
    _this->_internal_mutable_item_pos()->::network::TItemPos::MergeFrom(
        from._internal_item_pos());
  }
  if (from._internal_safebox_pos() != 0) {
    _this->_internal_set_safebox_pos(from._internal_safebox_pos());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGGuildSafeboxCheckoutPacket::CopyFrom(const CGGuildSafeboxCheckoutPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGGuildSafeboxCheckoutPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGGuildSafeboxCheckoutPacket::IsInitialized() const {
  return true;
}

void CGGuildSafeboxCheckoutPacket::InternalSwap(CGGuildSafeboxCheckoutPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGGuildSafeboxCheckoutPacket, _impl_.safebox_pos_)
      + sizeof(CGGuildSafeboxCheckoutPacket::_impl_.safebox_pos_)
      - PROTOBUF_FIELD_OFFSET(CGGuildSafeboxCheckoutPacket, _impl_.item_pos_)>(
          reinterpret_cast<char*>(&_impl_.item_pos_),
          reinterpret_cast<char*>(&other->_impl_.item_pos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGGuildSafeboxCheckoutPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[124]);
}

// ===================================================================

class CGGuildSafeboxItemMovePacket::_Internal {
 public:
};

CGGuildSafeboxItemMovePacket::CGGuildSafeboxItemMovePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGGuildSafeboxItemMovePacket)
}
CGGuildSafeboxItemMovePacket::CGGuildSafeboxItemMovePacket(const CGGuildSafeboxItemMovePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGGuildSafeboxItemMovePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.source_pos_){}
    , decltype(_impl_.target_pos_){}
    , decltype(_impl_.count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.source_pos_, &from._impl_.source_pos_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.count_) -
    reinterpret_cast<char*>(&_impl_.source_pos_)) + sizeof(_impl_.count_));
  // @@protoc_insertion_point(copy_constructor:network.CGGuildSafeboxItemMovePacket)
}

inline void CGGuildSafeboxItemMovePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.source_pos_){0u}
    , decltype(_impl_.target_pos_){0u}
    , decltype(_impl_.count_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CGGuildSafeboxItemMovePacket::~CGGuildSafeboxItemMovePacket() {
  // @@protoc_insertion_point(destructor:network.CGGuildSafeboxItemMovePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGGuildSafeboxItemMovePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CGGuildSafeboxItemMovePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGGuildSafeboxItemMovePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGGuildSafeboxItemMovePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.source_pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.count_) -
      reinterpret_cast<char*>(&_impl_.source_pos_)) + sizeof(_impl_.count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGGuildSafeboxItemMovePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 source_pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.source_pos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 target_pos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.target_pos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGGuildSafeboxItemMovePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGGuildSafeboxItemMovePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 source_pos = 1;
  if (this->_internal_source_pos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_source_pos(), target);
  }

  // uint32 target_pos = 2;
  if (this->_internal_target_pos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_target_pos(), target);
  }

  // uint32 count = 3;
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGGuildSafeboxItemMovePacket)
  return target;
}

size_t CGGuildSafeboxItemMovePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGGuildSafeboxItemMovePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 source_pos = 1;
  if (this->_internal_source_pos() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_source_pos());
  }

  // uint32 target_pos = 2;
  if (this->_internal_target_pos() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_target_pos());
  }

  // uint32 count = 3;
  if (this->_internal_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGGuildSafeboxItemMovePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGGuildSafeboxItemMovePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGGuildSafeboxItemMovePacket::GetClassData() const { return &_class_data_; }


void CGGuildSafeboxItemMovePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGGuildSafeboxItemMovePacket*>(&to_msg);
  auto& from = static_cast<const CGGuildSafeboxItemMovePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGGuildSafeboxItemMovePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_source_pos() != 0) {
    _this->_internal_set_source_pos(from._internal_source_pos());
  }
  if (from._internal_target_pos() != 0) {
    _this->_internal_set_target_pos(from._internal_target_pos());
  }
  if (from._internal_count() != 0) {
    _this->_internal_set_count(from._internal_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGGuildSafeboxItemMovePacket::CopyFrom(const CGGuildSafeboxItemMovePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGGuildSafeboxItemMovePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGGuildSafeboxItemMovePacket::IsInitialized() const {
  return true;
}

void CGGuildSafeboxItemMovePacket::InternalSwap(CGGuildSafeboxItemMovePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGGuildSafeboxItemMovePacket, _impl_.count_)
      + sizeof(CGGuildSafeboxItemMovePacket::_impl_.count_)
      - PROTOBUF_FIELD_OFFSET(CGGuildSafeboxItemMovePacket, _impl_.source_pos_)>(
          reinterpret_cast<char*>(&_impl_.source_pos_),
          reinterpret_cast<char*>(&other->_impl_.source_pos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGGuildSafeboxItemMovePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[125]);
}

// ===================================================================

class CGGuildSafeboxGiveGoldPacket::_Internal {
 public:
};

CGGuildSafeboxGiveGoldPacket::CGGuildSafeboxGiveGoldPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGGuildSafeboxGiveGoldPacket)
}
CGGuildSafeboxGiveGoldPacket::CGGuildSafeboxGiveGoldPacket(const CGGuildSafeboxGiveGoldPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGGuildSafeboxGiveGoldPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.gold_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.gold_ = from._impl_.gold_;
  // @@protoc_insertion_point(copy_constructor:network.CGGuildSafeboxGiveGoldPacket)
}

inline void CGGuildSafeboxGiveGoldPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.gold_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CGGuildSafeboxGiveGoldPacket::~CGGuildSafeboxGiveGoldPacket() {
  // @@protoc_insertion_point(destructor:network.CGGuildSafeboxGiveGoldPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGGuildSafeboxGiveGoldPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CGGuildSafeboxGiveGoldPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGGuildSafeboxGiveGoldPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGGuildSafeboxGiveGoldPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.gold_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGGuildSafeboxGiveGoldPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 gold = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGGuildSafeboxGiveGoldPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGGuildSafeboxGiveGoldPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 gold = 1;
  if (this->_internal_gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_gold(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGGuildSafeboxGiveGoldPacket)
  return target;
}

size_t CGGuildSafeboxGiveGoldPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGGuildSafeboxGiveGoldPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 gold = 1;
  if (this->_internal_gold() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_gold());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGGuildSafeboxGiveGoldPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGGuildSafeboxGiveGoldPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGGuildSafeboxGiveGoldPacket::GetClassData() const { return &_class_data_; }


void CGGuildSafeboxGiveGoldPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGGuildSafeboxGiveGoldPacket*>(&to_msg);
  auto& from = static_cast<const CGGuildSafeboxGiveGoldPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGGuildSafeboxGiveGoldPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_gold() != 0) {
    _this->_internal_set_gold(from._internal_gold());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGGuildSafeboxGiveGoldPacket::CopyFrom(const CGGuildSafeboxGiveGoldPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGGuildSafeboxGiveGoldPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGGuildSafeboxGiveGoldPacket::IsInitialized() const {
  return true;
}

void CGGuildSafeboxGiveGoldPacket::InternalSwap(CGGuildSafeboxGiveGoldPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.gold_, other->_impl_.gold_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGGuildSafeboxGiveGoldPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[126]);
}

// ===================================================================

class CGGuildSafeboxGetGoldPacket::_Internal {
 public:
};

CGGuildSafeboxGetGoldPacket::CGGuildSafeboxGetGoldPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGGuildSafeboxGetGoldPacket)
}
CGGuildSafeboxGetGoldPacket::CGGuildSafeboxGetGoldPacket(const CGGuildSafeboxGetGoldPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGGuildSafeboxGetGoldPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.gold_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.gold_ = from._impl_.gold_;
  // @@protoc_insertion_point(copy_constructor:network.CGGuildSafeboxGetGoldPacket)
}

inline void CGGuildSafeboxGetGoldPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.gold_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CGGuildSafeboxGetGoldPacket::~CGGuildSafeboxGetGoldPacket() {
  // @@protoc_insertion_point(destructor:network.CGGuildSafeboxGetGoldPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGGuildSafeboxGetGoldPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CGGuildSafeboxGetGoldPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGGuildSafeboxGetGoldPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGGuildSafeboxGetGoldPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.gold_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGGuildSafeboxGetGoldPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 gold = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGGuildSafeboxGetGoldPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGGuildSafeboxGetGoldPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 gold = 1;
  if (this->_internal_gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_gold(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGGuildSafeboxGetGoldPacket)
  return target;
}

size_t CGGuildSafeboxGetGoldPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGGuildSafeboxGetGoldPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 gold = 1;
  if (this->_internal_gold() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_gold());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGGuildSafeboxGetGoldPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGGuildSafeboxGetGoldPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGGuildSafeboxGetGoldPacket::GetClassData() const { return &_class_data_; }


void CGGuildSafeboxGetGoldPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGGuildSafeboxGetGoldPacket*>(&to_msg);
  auto& from = static_cast<const CGGuildSafeboxGetGoldPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGGuildSafeboxGetGoldPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_gold() != 0) {
    _this->_internal_set_gold(from._internal_gold());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGGuildSafeboxGetGoldPacket::CopyFrom(const CGGuildSafeboxGetGoldPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGGuildSafeboxGetGoldPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGGuildSafeboxGetGoldPacket::IsInitialized() const {
  return true;
}

void CGGuildSafeboxGetGoldPacket::InternalSwap(CGGuildSafeboxGetGoldPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.gold_, other->_impl_.gold_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGGuildSafeboxGetGoldPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[127]);
}

// ===================================================================

class CGPetUseEggPacket::_Internal {
 public:
  static const ::network::TItemPos& egg_cell(const CGPetUseEggPacket* msg);
};

const ::network::TItemPos&
CGPetUseEggPacket::_Internal::egg_cell(const CGPetUseEggPacket* msg) {
  return *msg->_impl_.egg_cell_;
}
void CGPetUseEggPacket::clear_egg_cell() {
  if (GetArenaForAllocation() == nullptr && _impl_.egg_cell_ != nullptr) {
    delete _impl_.egg_cell_;
  }
  _impl_.egg_cell_ = nullptr;
}
CGPetUseEggPacket::CGPetUseEggPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGPetUseEggPacket)
}
CGPetUseEggPacket::CGPetUseEggPacket(const CGPetUseEggPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGPetUseEggPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pet_name_){}
    , decltype(_impl_.egg_cell_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.pet_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pet_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pet_name().empty()) {
    _this->_impl_.pet_name_.Set(from._internal_pet_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_egg_cell()) {
    _this->_impl_.egg_cell_ = new ::network::TItemPos(*from._impl_.egg_cell_);
  }
  // @@protoc_insertion_point(copy_constructor:network.CGPetUseEggPacket)
}

inline void CGPetUseEggPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pet_name_){}
    , decltype(_impl_.egg_cell_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.pet_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pet_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CGPetUseEggPacket::~CGPetUseEggPacket() {
  // @@protoc_insertion_point(destructor:network.CGPetUseEggPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGPetUseEggPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.pet_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.egg_cell_;
}

void CGPetUseEggPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGPetUseEggPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGPetUseEggPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pet_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.egg_cell_ != nullptr) {
    delete _impl_.egg_cell_;
  }
  _impl_.egg_cell_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGPetUseEggPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .network.TItemPos egg_cell = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_egg_cell(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string pet_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_pet_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "network.CGPetUseEggPacket.pet_name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGPetUseEggPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGPetUseEggPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .network.TItemPos egg_cell = 1;
  if (this->_internal_has_egg_cell()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::egg_cell(this),
        _Internal::egg_cell(this).GetCachedSize(), target, stream);
  }

  // string pet_name = 2;
  if (!this->_internal_pet_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pet_name().data(), static_cast<int>(this->_internal_pet_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "network.CGPetUseEggPacket.pet_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_pet_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGPetUseEggPacket)
  return target;
}

size_t CGPetUseEggPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGPetUseEggPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string pet_name = 2;
  if (!this->_internal_pet_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pet_name());
  }

  // .network.TItemPos egg_cell = 1;
  if (this->_internal_has_egg_cell()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.egg_cell_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGPetUseEggPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGPetUseEggPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGPetUseEggPacket::GetClassData() const { return &_class_data_; }


void CGPetUseEggPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGPetUseEggPacket*>(&to_msg);
  auto& from = static_cast<const CGPetUseEggPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGPetUseEggPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_pet_name().empty()) {
    _this->_internal_set_pet_name(from._internal_pet_name());
  }
  if (from._internal_has_egg_cell()) {
    _this->_internal_mutable_egg_cell()->::network::TItemPos::MergeFrom(
        from._internal_egg_cell());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGPetUseEggPacket::CopyFrom(const CGPetUseEggPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGPetUseEggPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGPetUseEggPacket::IsInitialized() const {
  return true;
}

void CGPetUseEggPacket::InternalSwap(CGPetUseEggPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pet_name_, lhs_arena,
      &other->_impl_.pet_name_, rhs_arena
  );
  swap(_impl_.egg_cell_, other->_impl_.egg_cell_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGPetUseEggPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[128]);
}

// ===================================================================

class CGPetResetSkillPacket::_Internal {
 public:
  static const ::network::TItemPos& reset_cell(const CGPetResetSkillPacket* msg);
};

const ::network::TItemPos&
CGPetResetSkillPacket::_Internal::reset_cell(const CGPetResetSkillPacket* msg) {
  return *msg->_impl_.reset_cell_;
}
void CGPetResetSkillPacket::clear_reset_cell() {
  if (GetArenaForAllocation() == nullptr && _impl_.reset_cell_ != nullptr) {
    delete _impl_.reset_cell_;
  }
  _impl_.reset_cell_ = nullptr;
}
CGPetResetSkillPacket::CGPetResetSkillPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGPetResetSkillPacket)
}
CGPetResetSkillPacket::CGPetResetSkillPacket(const CGPetResetSkillPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGPetResetSkillPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.reset_cell_){nullptr}
    , decltype(_impl_.skill_index_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_reset_cell()) {
    _this->_impl_.reset_cell_ = new ::network::TItemPos(*from._impl_.reset_cell_);
  }
  _this->_impl_.skill_index_ = from._impl_.skill_index_;
  // @@protoc_insertion_point(copy_constructor:network.CGPetResetSkillPacket)
}

inline void CGPetResetSkillPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.reset_cell_){nullptr}
    , decltype(_impl_.skill_index_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CGPetResetSkillPacket::~CGPetResetSkillPacket() {
  // @@protoc_insertion_point(destructor:network.CGPetResetSkillPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGPetResetSkillPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.reset_cell_;
}

void CGPetResetSkillPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGPetResetSkillPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGPetResetSkillPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.reset_cell_ != nullptr) {
    delete _impl_.reset_cell_;
  }
  _impl_.reset_cell_ = nullptr;
  _impl_.skill_index_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGPetResetSkillPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .network.TItemPos reset_cell = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_reset_cell(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 skill_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.skill_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGPetResetSkillPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGPetResetSkillPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .network.TItemPos reset_cell = 1;
  if (this->_internal_has_reset_cell()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::reset_cell(this),
        _Internal::reset_cell(this).GetCachedSize(), target, stream);
  }

  // uint32 skill_index = 2;
  if (this->_internal_skill_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_skill_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGPetResetSkillPacket)
  return target;
}

size_t CGPetResetSkillPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGPetResetSkillPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .network.TItemPos reset_cell = 1;
  if (this->_internal_has_reset_cell()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.reset_cell_);
  }

  // uint32 skill_index = 2;
  if (this->_internal_skill_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_skill_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGPetResetSkillPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGPetResetSkillPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGPetResetSkillPacket::GetClassData() const { return &_class_data_; }


void CGPetResetSkillPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGPetResetSkillPacket*>(&to_msg);
  auto& from = static_cast<const CGPetResetSkillPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGPetResetSkillPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_reset_cell()) {
    _this->_internal_mutable_reset_cell()->::network::TItemPos::MergeFrom(
        from._internal_reset_cell());
  }
  if (from._internal_skill_index() != 0) {
    _this->_internal_set_skill_index(from._internal_skill_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGPetResetSkillPacket::CopyFrom(const CGPetResetSkillPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGPetResetSkillPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGPetResetSkillPacket::IsInitialized() const {
  return true;
}

void CGPetResetSkillPacket::InternalSwap(CGPetResetSkillPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGPetResetSkillPacket, _impl_.skill_index_)
      + sizeof(CGPetResetSkillPacket::_impl_.skill_index_)
      - PROTOBUF_FIELD_OFFSET(CGPetResetSkillPacket, _impl_.reset_cell_)>(
          reinterpret_cast<char*>(&_impl_.reset_cell_),
          reinterpret_cast<char*>(&other->_impl_.reset_cell_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGPetResetSkillPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[129]);
}

// ===================================================================

class CGPetAttrRefineInfoPacket::_Internal {
 public:
};

CGPetAttrRefineInfoPacket::CGPetAttrRefineInfoPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGPetAttrRefineInfoPacket)
}
CGPetAttrRefineInfoPacket::CGPetAttrRefineInfoPacket(const CGPetAttrRefineInfoPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGPetAttrRefineInfoPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.index_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.index_ = from._impl_.index_;
  // @@protoc_insertion_point(copy_constructor:network.CGPetAttrRefineInfoPacket)
}

inline void CGPetAttrRefineInfoPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.index_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CGPetAttrRefineInfoPacket::~CGPetAttrRefineInfoPacket() {
  // @@protoc_insertion_point(destructor:network.CGPetAttrRefineInfoPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGPetAttrRefineInfoPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CGPetAttrRefineInfoPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGPetAttrRefineInfoPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGPetAttrRefineInfoPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.index_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGPetAttrRefineInfoPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGPetAttrRefineInfoPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGPetAttrRefineInfoPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 index = 1;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGPetAttrRefineInfoPacket)
  return target;
}

size_t CGPetAttrRefineInfoPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGPetAttrRefineInfoPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 index = 1;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGPetAttrRefineInfoPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGPetAttrRefineInfoPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGPetAttrRefineInfoPacket::GetClassData() const { return &_class_data_; }


void CGPetAttrRefineInfoPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGPetAttrRefineInfoPacket*>(&to_msg);
  auto& from = static_cast<const CGPetAttrRefineInfoPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGPetAttrRefineInfoPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGPetAttrRefineInfoPacket::CopyFrom(const CGPetAttrRefineInfoPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGPetAttrRefineInfoPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGPetAttrRefineInfoPacket::IsInitialized() const {
  return true;
}

void CGPetAttrRefineInfoPacket::InternalSwap(CGPetAttrRefineInfoPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.index_, other->_impl_.index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGPetAttrRefineInfoPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[130]);
}

// ===================================================================

class CGPetAttrRefinePacket::_Internal {
 public:
};

CGPetAttrRefinePacket::CGPetAttrRefinePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.CGPetAttrRefinePacket)
}
CGPetAttrRefinePacket::CGPetAttrRefinePacket(const CGPetAttrRefinePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CGPetAttrRefinePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.index_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.index_ = from._impl_.index_;
  // @@protoc_insertion_point(copy_constructor:network.CGPetAttrRefinePacket)
}

inline void CGPetAttrRefinePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.index_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CGPetAttrRefinePacket::~CGPetAttrRefinePacket() {
  // @@protoc_insertion_point(destructor:network.CGPetAttrRefinePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CGPetAttrRefinePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CGPetAttrRefinePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CGPetAttrRefinePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.CGPetAttrRefinePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.index_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGPetAttrRefinePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGPetAttrRefinePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.CGPetAttrRefinePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 index = 1;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.CGPetAttrRefinePacket)
  return target;
}

size_t CGPetAttrRefinePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.CGPetAttrRefinePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 index = 1;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGPetAttrRefinePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CGPetAttrRefinePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGPetAttrRefinePacket::GetClassData() const { return &_class_data_; }


void CGPetAttrRefinePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CGPetAttrRefinePacket*>(&to_msg);
  auto& from = static_cast<const CGPetAttrRefinePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.CGPetAttrRefinePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGPetAttrRefinePacket::CopyFrom(const CGPetAttrRefinePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.CGPetAttrRefinePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGPetAttrRefinePacket::IsInitialized() const {
  return true;
}

void CGPetAttrRefinePacket::InternalSwap(CGPetAttrRefinePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.index_, other->_impl_.index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGPetAttrRefinePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cg_5fpackets_2eproto_getter, &descriptor_table_cg_5fpackets_2eproto_once,
      file_level_metadata_cg_5fpackets_2eproto[131]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace network
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::network::CGHandshakePacket*
Arena::CreateMaybeMessage< ::network::CGHandshakePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGHandshakePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGKeyAgreementPacket*
Arena::CreateMaybeMessage< ::network::CGKeyAgreementPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGKeyAgreementPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGAuthLoginPacket*
Arena::CreateMaybeMessage< ::network::CGAuthLoginPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGAuthLoginPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGAuthOpenIDLoginPacket*
Arena::CreateMaybeMessage< ::network::CGAuthOpenIDLoginPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGAuthOpenIDLoginPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGAuthPasspodAnswerPacket*
Arena::CreateMaybeMessage< ::network::CGAuthPasspodAnswerPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGAuthPasspodAnswerPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGLoginByKeyPacket*
Arena::CreateMaybeMessage< ::network::CGLoginByKeyPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGLoginByKeyPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGEmpirePacket*
Arena::CreateMaybeMessage< ::network::CGEmpirePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGEmpirePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGPlayerSelectPacket*
Arena::CreateMaybeMessage< ::network::CGPlayerSelectPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGPlayerSelectPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGPlayerCreatePacket*
Arena::CreateMaybeMessage< ::network::CGPlayerCreatePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGPlayerCreatePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGPlayerChangeNamePacket*
Arena::CreateMaybeMessage< ::network::CGPlayerChangeNamePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGPlayerChangeNamePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGPlayerHairSelectPacket*
Arena::CreateMaybeMessage< ::network::CGPlayerHairSelectPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGPlayerHairSelectPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGPlayerDeletePacket*
Arena::CreateMaybeMessage< ::network::CGPlayerDeletePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGPlayerDeletePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGMarkCRCListPacket*
Arena::CreateMaybeMessage< ::network::CGMarkCRCListPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGMarkCRCListPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGMarkUploadPacket*
Arena::CreateMaybeMessage< ::network::CGMarkUploadPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGMarkUploadPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGGuildSymbolUploadPacket*
Arena::CreateMaybeMessage< ::network::CGGuildSymbolUploadPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGGuildSymbolUploadPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGGuildSymbolCRCPacket*
Arena::CreateMaybeMessage< ::network::CGGuildSymbolCRCPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGGuildSymbolCRCPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGClientVersionPacket*
Arena::CreateMaybeMessage< ::network::CGClientVersionPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGClientVersionPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGLoginVersionCheckPacket*
Arena::CreateMaybeMessage< ::network::CGLoginVersionCheckPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGLoginVersionCheckPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGXTRAPAckPacket*
Arena::CreateMaybeMessage< ::network::CGXTRAPAckPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGXTRAPAckPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGHackPacket*
Arena::CreateMaybeMessage< ::network::CGHackPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGHackPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGCostumeVisibilityPacket*
Arena::CreateMaybeMessage< ::network::CGCostumeVisibilityPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGCostumeVisibilityPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGChatPacket*
Arena::CreateMaybeMessage< ::network::CGChatPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGChatPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGAttackPacket*
Arena::CreateMaybeMessage< ::network::CGAttackPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGAttackPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGShootPacket*
Arena::CreateMaybeMessage< ::network::CGShootPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGShootPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGWhisperPacket*
Arena::CreateMaybeMessage< ::network::CGWhisperPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGWhisperPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGOnClickPacket*
Arena::CreateMaybeMessage< ::network::CGOnClickPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGOnClickPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGPositionPacket*
Arena::CreateMaybeMessage< ::network::CGPositionPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGPositionPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGNextSkillUsePacket*
Arena::CreateMaybeMessage< ::network::CGNextSkillUsePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGNextSkillUsePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGMovePacket*
Arena::CreateMaybeMessage< ::network::CGMovePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGMovePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGSyncPositionPacket*
Arena::CreateMaybeMessage< ::network::CGSyncPositionPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGSyncPositionPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGFlyTargetPacket*
Arena::CreateMaybeMessage< ::network::CGFlyTargetPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGFlyTargetPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGAddFlyTargetPacket*
Arena::CreateMaybeMessage< ::network::CGAddFlyTargetPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGAddFlyTargetPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGUseSkillPacket*
Arena::CreateMaybeMessage< ::network::CGUseSkillPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGUseSkillPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGTargetPacket*
Arena::CreateMaybeMessage< ::network::CGTargetPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGTargetPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGTargetMonsterDropInfoPacket*
Arena::CreateMaybeMessage< ::network::CGTargetMonsterDropInfoPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGTargetMonsterDropInfoPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGFishingPacket*
Arena::CreateMaybeMessage< ::network::CGFishingPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGFishingPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGGiveItemPacket*
Arena::CreateMaybeMessage< ::network::CGGiveItemPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGGiveItemPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGMyShopPacket*
Arena::CreateMaybeMessage< ::network::CGMyShopPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGMyShopPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGRefinePacket*
Arena::CreateMaybeMessage< ::network::CGRefinePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGRefinePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGPlayerLanguageInformationPacket*
Arena::CreateMaybeMessage< ::network::CGPlayerLanguageInformationPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGPlayerLanguageInformationPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGReportPacket*
Arena::CreateMaybeMessage< ::network::CGReportPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGReportPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGDragonSoulRefinePacket*
Arena::CreateMaybeMessage< ::network::CGDragonSoulRefinePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGDragonSoulRefinePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGOnQuestTriggerPacket*
Arena::CreateMaybeMessage< ::network::CGOnQuestTriggerPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGOnQuestTriggerPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGItemMultiUsePacket*
Arena::CreateMaybeMessage< ::network::CGItemMultiUsePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGItemMultiUsePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGBotReportLogPacket*
Arena::CreateMaybeMessage< ::network::CGBotReportLogPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGBotReportLogPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGForcedRewarpPacket*
Arena::CreateMaybeMessage< ::network::CGForcedRewarpPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGForcedRewarpPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGUseDetachmentSinglePacket*
Arena::CreateMaybeMessage< ::network::CGUseDetachmentSinglePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGUseDetachmentSinglePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGEventRequestAnswerPacket*
Arena::CreateMaybeMessage< ::network::CGEventRequestAnswerPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGEventRequestAnswerPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGCostumeBonusTransferPacket*
Arena::CreateMaybeMessage< ::network::CGCostumeBonusTransferPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGCostumeBonusTransferPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGRunePagePacket*
Arena::CreateMaybeMessage< ::network::CGRunePagePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGRunePagePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGRecvWikiPacket*
Arena::CreateMaybeMessage< ::network::CGRecvWikiPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGRecvWikiPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGSetSkillColorPacket*
Arena::CreateMaybeMessage< ::network::CGSetSkillColorPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGSetSkillColorPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGEquipmentPageAddPacket*
Arena::CreateMaybeMessage< ::network::CGEquipmentPageAddPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGEquipmentPageAddPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGEquipmentPageDeletePacket*
Arena::CreateMaybeMessage< ::network::CGEquipmentPageDeletePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGEquipmentPageDeletePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGEquipmentPageSelectPacket*
Arena::CreateMaybeMessage< ::network::CGEquipmentPageSelectPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGEquipmentPageSelectPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGCombatZoneRequestActionPacket*
Arena::CreateMaybeMessage< ::network::CGCombatZoneRequestActionPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGCombatZoneRequestActionPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGCrystalRefinePacket*
Arena::CreateMaybeMessage< ::network::CGCrystalRefinePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGCrystalRefinePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGAuctionInsertItemPacket*
Arena::CreateMaybeMessage< ::network::CGAuctionInsertItemPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGAuctionInsertItemPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGAuctionTakeItemPacket*
Arena::CreateMaybeMessage< ::network::CGAuctionTakeItemPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGAuctionTakeItemPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGAuctionBuyItemPacket*
Arena::CreateMaybeMessage< ::network::CGAuctionBuyItemPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGAuctionBuyItemPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGAuctionTakeGoldPacket*
Arena::CreateMaybeMessage< ::network::CGAuctionTakeGoldPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGAuctionTakeGoldPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGAuctionSearchItemsPacket*
Arena::CreateMaybeMessage< ::network::CGAuctionSearchItemsPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGAuctionSearchItemsPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGAuctionExtendedSearchItemsPacket*
Arena::CreateMaybeMessage< ::network::CGAuctionExtendedSearchItemsPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGAuctionExtendedSearchItemsPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGAuctionMarkShopPacket*
Arena::CreateMaybeMessage< ::network::CGAuctionMarkShopPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGAuctionMarkShopPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGAuctionShopOpenPacket*
Arena::CreateMaybeMessage< ::network::CGAuctionShopOpenPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGAuctionShopOpenPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGAuctionShopClosePacket*
Arena::CreateMaybeMessage< ::network::CGAuctionShopClosePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGAuctionShopClosePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGAuctionShopTakeGoldPacket*
Arena::CreateMaybeMessage< ::network::CGAuctionShopTakeGoldPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGAuctionShopTakeGoldPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGAuctionRequestAveragePricePacket*
Arena::CreateMaybeMessage< ::network::CGAuctionRequestAveragePricePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGAuctionRequestAveragePricePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGScriptAnswerPacket*
Arena::CreateMaybeMessage< ::network::CGScriptAnswerPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGScriptAnswerPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGScriptButtonPacket*
Arena::CreateMaybeMessage< ::network::CGScriptButtonPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGScriptButtonPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGScriptSelectItemPacket*
Arena::CreateMaybeMessage< ::network::CGScriptSelectItemPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGScriptSelectItemPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGQuestInputStringPacket*
Arena::CreateMaybeMessage< ::network::CGQuestInputStringPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGQuestInputStringPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGQuestConfirmPacket*
Arena::CreateMaybeMessage< ::network::CGQuestConfirmPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGQuestConfirmPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGItemUsePacket*
Arena::CreateMaybeMessage< ::network::CGItemUsePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGItemUsePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGItemUseToItemPacket*
Arena::CreateMaybeMessage< ::network::CGItemUseToItemPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGItemUseToItemPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGItemDropPacket*
Arena::CreateMaybeMessage< ::network::CGItemDropPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGItemDropPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGItemDestroyPacket*
Arena::CreateMaybeMessage< ::network::CGItemDestroyPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGItemDestroyPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGItemMovePacket*
Arena::CreateMaybeMessage< ::network::CGItemMovePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGItemMovePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGItemPickupPacket*
Arena::CreateMaybeMessage< ::network::CGItemPickupPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGItemPickupPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGSafeboxCheckinPacket*
Arena::CreateMaybeMessage< ::network::CGSafeboxCheckinPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGSafeboxCheckinPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGSafeboxCheckoutPacket*
Arena::CreateMaybeMessage< ::network::CGSafeboxCheckoutPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGSafeboxCheckoutPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGSafeboxItemMovePacket*
Arena::CreateMaybeMessage< ::network::CGSafeboxItemMovePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGSafeboxItemMovePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGAcceRefineCheckinPacket*
Arena::CreateMaybeMessage< ::network::CGAcceRefineCheckinPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGAcceRefineCheckinPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGAcceRefineCheckoutPacket*
Arena::CreateMaybeMessage< ::network::CGAcceRefineCheckoutPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGAcceRefineCheckoutPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGAcceRefineAcceptPacket*
Arena::CreateMaybeMessage< ::network::CGAcceRefineAcceptPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGAcceRefineAcceptPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGQuickslotAddPacket*
Arena::CreateMaybeMessage< ::network::CGQuickslotAddPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGQuickslotAddPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGQuickslotDeletePacket*
Arena::CreateMaybeMessage< ::network::CGQuickslotDeletePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGQuickslotDeletePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGQuickslotSwapPacket*
Arena::CreateMaybeMessage< ::network::CGQuickslotSwapPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGQuickslotSwapPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGShopBuyPacket*
Arena::CreateMaybeMessage< ::network::CGShopBuyPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGShopBuyPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGShopSellPacket*
Arena::CreateMaybeMessage< ::network::CGShopSellPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGShopSellPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGExchangeStartPacket*
Arena::CreateMaybeMessage< ::network::CGExchangeStartPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGExchangeStartPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGExchangeItemAddPacket*
Arena::CreateMaybeMessage< ::network::CGExchangeItemAddPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGExchangeItemAddPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGExchangeItemDelPacket*
Arena::CreateMaybeMessage< ::network::CGExchangeItemDelPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGExchangeItemDelPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGExchangeGoldAddPacket*
Arena::CreateMaybeMessage< ::network::CGExchangeGoldAddPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGExchangeGoldAddPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGMessengerAddByVIDPacket*
Arena::CreateMaybeMessage< ::network::CGMessengerAddByVIDPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGMessengerAddByVIDPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGMessengerAddByNamePacket*
Arena::CreateMaybeMessage< ::network::CGMessengerAddByNamePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGMessengerAddByNamePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGMessengerRemovePacket*
Arena::CreateMaybeMessage< ::network::CGMessengerRemovePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGMessengerRemovePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGMessengerAddBlockByVIDPacket*
Arena::CreateMaybeMessage< ::network::CGMessengerAddBlockByVIDPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGMessengerAddBlockByVIDPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGMessengerAddBlockByNamePacket*
Arena::CreateMaybeMessage< ::network::CGMessengerAddBlockByNamePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGMessengerAddBlockByNamePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGMessengerRemoveBlockPacket*
Arena::CreateMaybeMessage< ::network::CGMessengerRemoveBlockPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGMessengerRemoveBlockPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGPartyInvitePacket*
Arena::CreateMaybeMessage< ::network::CGPartyInvitePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGPartyInvitePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGPartyInviteAnswerPacket*
Arena::CreateMaybeMessage< ::network::CGPartyInviteAnswerPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGPartyInviteAnswerPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGPartyRemovePacket*
Arena::CreateMaybeMessage< ::network::CGPartyRemovePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGPartyRemovePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGPartySetStatePacket*
Arena::CreateMaybeMessage< ::network::CGPartySetStatePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGPartySetStatePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGPartyUseSkillPacket*
Arena::CreateMaybeMessage< ::network::CGPartyUseSkillPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGPartyUseSkillPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGPartyParameterPacket*
Arena::CreateMaybeMessage< ::network::CGPartyParameterPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGPartyParameterPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGGuildDepositMoneyPacket*
Arena::CreateMaybeMessage< ::network::CGGuildDepositMoneyPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGGuildDepositMoneyPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGGuildWithdrawMoneyPacket*
Arena::CreateMaybeMessage< ::network::CGGuildWithdrawMoneyPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGGuildWithdrawMoneyPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGGuildAddMemberPacket*
Arena::CreateMaybeMessage< ::network::CGGuildAddMemberPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGGuildAddMemberPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGGuildRemoveMemberPacket*
Arena::CreateMaybeMessage< ::network::CGGuildRemoveMemberPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGGuildRemoveMemberPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGGuildChangeGradeNamePacket*
Arena::CreateMaybeMessage< ::network::CGGuildChangeGradeNamePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGGuildChangeGradeNamePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGGuildChangeGradeAuthorityPacket*
Arena::CreateMaybeMessage< ::network::CGGuildChangeGradeAuthorityPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGGuildChangeGradeAuthorityPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGGuildOfferExpPacket*
Arena::CreateMaybeMessage< ::network::CGGuildOfferExpPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGGuildOfferExpPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGGuildChargeGSPPacket*
Arena::CreateMaybeMessage< ::network::CGGuildChargeGSPPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGGuildChargeGSPPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGGuildPostCommentPacket*
Arena::CreateMaybeMessage< ::network::CGGuildPostCommentPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGGuildPostCommentPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGGuildDeleteCommentPacket*
Arena::CreateMaybeMessage< ::network::CGGuildDeleteCommentPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGGuildDeleteCommentPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGGuildChangeMemberGradePacket*
Arena::CreateMaybeMessage< ::network::CGGuildChangeMemberGradePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGGuildChangeMemberGradePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGGuildUseSkillPacket*
Arena::CreateMaybeMessage< ::network::CGGuildUseSkillPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGGuildUseSkillPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGGuildChangeMemberGeneralPacket*
Arena::CreateMaybeMessage< ::network::CGGuildChangeMemberGeneralPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGGuildChangeMemberGeneralPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGGuildInviteAnswerPacket*
Arena::CreateMaybeMessage< ::network::CGGuildInviteAnswerPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGGuildInviteAnswerPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGGuildAnswerMakePacket*
Arena::CreateMaybeMessage< ::network::CGGuildAnswerMakePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGGuildAnswerMakePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGGuildRequestListPacket*
Arena::CreateMaybeMessage< ::network::CGGuildRequestListPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGGuildRequestListPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGGuildSearchPacket*
Arena::CreateMaybeMessage< ::network::CGGuildSearchPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGGuildSearchPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGGuildSafeboxCheckinPacket*
Arena::CreateMaybeMessage< ::network::CGGuildSafeboxCheckinPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGGuildSafeboxCheckinPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGGuildSafeboxCheckoutPacket*
Arena::CreateMaybeMessage< ::network::CGGuildSafeboxCheckoutPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGGuildSafeboxCheckoutPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGGuildSafeboxItemMovePacket*
Arena::CreateMaybeMessage< ::network::CGGuildSafeboxItemMovePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGGuildSafeboxItemMovePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGGuildSafeboxGiveGoldPacket*
Arena::CreateMaybeMessage< ::network::CGGuildSafeboxGiveGoldPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGGuildSafeboxGiveGoldPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGGuildSafeboxGetGoldPacket*
Arena::CreateMaybeMessage< ::network::CGGuildSafeboxGetGoldPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGGuildSafeboxGetGoldPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGPetUseEggPacket*
Arena::CreateMaybeMessage< ::network::CGPetUseEggPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGPetUseEggPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGPetResetSkillPacket*
Arena::CreateMaybeMessage< ::network::CGPetResetSkillPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGPetResetSkillPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGPetAttrRefineInfoPacket*
Arena::CreateMaybeMessage< ::network::CGPetAttrRefineInfoPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGPetAttrRefineInfoPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::CGPetAttrRefinePacket*
Arena::CreateMaybeMessage< ::network::CGPetAttrRefinePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::CGPetAttrRefinePacket >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
