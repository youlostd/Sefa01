// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dg_packets.proto

#include "protobuf_dg_packets.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace network {
PROTOBUF_CONSTEXPR DGBootPacket::DGBootPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.mobs_)*/{}
  , /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_.shops_)*/{}
  , /*decltype(_impl_.skills_)*/{}
  , /*decltype(_impl_.refines_)*/{}
  , /*decltype(_impl_.attrs_)*/{}
  , /*decltype(_impl_.rare_attrs_)*/{}
  , /*decltype(_impl_.costume_attrs_)*/{}
  , /*decltype(_impl_.lands_)*/{}
  , /*decltype(_impl_.object_protos_)*/{}
  , /*decltype(_impl_.objects_)*/{}
  , /*decltype(_impl_.guild_safeboxes_)*/{}
  , /*decltype(_impl_.horse_upgrades_)*/{}
  , /*decltype(_impl_.horse_boni_)*/{}
  , /*decltype(_impl_.gaya_shops_)*/{}
  , /*decltype(_impl_.attrtrees_)*/{}
  , /*decltype(_impl_.runes_)*/{}
  , /*decltype(_impl_.rune_points_)*/{}
  , /*decltype(_impl_.xmas_rewards_)*/{}
  , /*decltype(_impl_.soul_protos_)*/{}
  , /*decltype(_impl_.admins_)*/{}
  , /*decltype(_impl_.admin_configs_)*/{}
  , /*decltype(_impl_._admin_configs_cached_byte_size_)*/{0}
  , /*decltype(_impl_.pet_skills_)*/{}
  , /*decltype(_impl_.pet_evolves_)*/{}
  , /*decltype(_impl_.pet_attrs_)*/{}
  , /*decltype(_impl_.crystal_protos_)*/{}
  , /*decltype(_impl_.item_id_range_)*/nullptr
  , /*decltype(_impl_.item_id_range_spare_)*/nullptr
  , /*decltype(_impl_.current_time_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DGBootPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DGBootPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DGBootPacketDefaultTypeInternal() {}
  union {
    DGBootPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DGBootPacketDefaultTypeInternal _DGBootPacket_default_instance_;
PROTOBUF_CONSTEXPR DGMapLocationsPacket::DGMapLocationsPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.maps_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DGMapLocationsPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DGMapLocationsPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DGMapLocationsPacketDefaultTypeInternal() {}
  union {
    DGMapLocationsPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DGMapLocationsPacketDefaultTypeInternal _DGMapLocationsPacket_default_instance_;
PROTOBUF_CONSTEXPR DGLoginSuccessPacket::DGLoginSuccessPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.account_info_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DGLoginSuccessPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DGLoginSuccessPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DGLoginSuccessPacketDefaultTypeInternal() {}
  union {
    DGLoginSuccessPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DGLoginSuccessPacketDefaultTypeInternal _DGLoginSuccessPacket_default_instance_;
PROTOBUF_CONSTEXPR DGPlayerCreateSuccessPacket::DGPlayerCreateSuccessPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.player_)*/nullptr
  , /*decltype(_impl_.account_index_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DGPlayerCreateSuccessPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DGPlayerCreateSuccessPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DGPlayerCreateSuccessPacketDefaultTypeInternal() {}
  union {
    DGPlayerCreateSuccessPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DGPlayerCreateSuccessPacketDefaultTypeInternal _DGPlayerCreateSuccessPacket_default_instance_;
PROTOBUF_CONSTEXPR DGPlayerDeleteSuccessPacket::DGPlayerDeleteSuccessPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.account_index_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DGPlayerDeleteSuccessPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DGPlayerDeleteSuccessPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DGPlayerDeleteSuccessPacketDefaultTypeInternal() {}
  union {
    DGPlayerDeleteSuccessPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DGPlayerDeleteSuccessPacketDefaultTypeInternal _DGPlayerDeleteSuccessPacket_default_instance_;
PROTOBUF_CONSTEXPR DGPlayerLoadPacket::DGPlayerLoadPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.player_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DGPlayerLoadPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DGPlayerLoadPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DGPlayerLoadPacketDefaultTypeInternal() {}
  union {
    DGPlayerLoadPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DGPlayerLoadPacketDefaultTypeInternal _DGPlayerLoadPacket_default_instance_;
PROTOBUF_CONSTEXPR DGPlayerSkillLoadPacket::DGPlayerSkillLoadPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.skills_)*/{}
  , /*decltype(_impl_.pid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DGPlayerSkillLoadPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DGPlayerSkillLoadPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DGPlayerSkillLoadPacketDefaultTypeInternal() {}
  union {
    DGPlayerSkillLoadPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DGPlayerSkillLoadPacketDefaultTypeInternal _DGPlayerSkillLoadPacket_default_instance_;
PROTOBUF_CONSTEXPR DGItemLoadPacket::DGItemLoadPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_.pid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DGItemLoadPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DGItemLoadPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DGItemLoadPacketDefaultTypeInternal() {}
  union {
    DGItemLoadPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DGItemLoadPacketDefaultTypeInternal _DGItemLoadPacket_default_instance_;
PROTOBUF_CONSTEXPR DGPetLoadPacket::DGPetLoadPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pets_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DGPetLoadPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DGPetLoadPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DGPetLoadPacketDefaultTypeInternal() {}
  union {
    DGPetLoadPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DGPetLoadPacketDefaultTypeInternal _DGPetLoadPacket_default_instance_;
PROTOBUF_CONSTEXPR DGQuestLoadPacket::DGQuestLoadPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.quests_)*/{}
  , /*decltype(_impl_.pid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DGQuestLoadPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DGQuestLoadPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DGQuestLoadPacketDefaultTypeInternal() {}
  union {
    DGQuestLoadPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DGQuestLoadPacketDefaultTypeInternal _DGQuestLoadPacket_default_instance_;
PROTOBUF_CONSTEXPR DGAffectLoadPacket::DGAffectLoadPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.affects_)*/{}
  , /*decltype(_impl_.pid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DGAffectLoadPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DGAffectLoadPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DGAffectLoadPacketDefaultTypeInternal() {}
  union {
    DGAffectLoadPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DGAffectLoadPacketDefaultTypeInternal _DGAffectLoadPacket_default_instance_;
PROTOBUF_CONSTEXPR DGSafeboxLoadPacket::DGSafeboxLoadPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_.account_id_)*/0u
  , /*decltype(_impl_.size_)*/0u
  , /*decltype(_impl_.gold_)*/int64_t{0}
  , /*decltype(_impl_.is_mall_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DGSafeboxLoadPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DGSafeboxLoadPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DGSafeboxLoadPacketDefaultTypeInternal() {}
  union {
    DGSafeboxLoadPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DGSafeboxLoadPacketDefaultTypeInternal _DGSafeboxLoadPacket_default_instance_;
PROTOBUF_CONSTEXPR DGSafeboxChangeSizePacket::DGSafeboxChangeSizePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.size_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DGSafeboxChangeSizePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DGSafeboxChangeSizePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DGSafeboxChangeSizePacketDefaultTypeInternal() {}
  union {
    DGSafeboxChangeSizePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DGSafeboxChangeSizePacketDefaultTypeInternal _DGSafeboxChangeSizePacket_default_instance_;
PROTOBUF_CONSTEXPR DGSafeboxChangePasswordAnswerPacket::DGSafeboxChangePasswordAnswerPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.flag_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DGSafeboxChangePasswordAnswerPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DGSafeboxChangePasswordAnswerPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DGSafeboxChangePasswordAnswerPacketDefaultTypeInternal() {}
  union {
    DGSafeboxChangePasswordAnswerPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DGSafeboxChangePasswordAnswerPacketDefaultTypeInternal _DGSafeboxChangePasswordAnswerPacket_default_instance_;
PROTOBUF_CONSTEXPR DGEmpireSelectPacket::DGEmpireSelectPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.empire_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DGEmpireSelectPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DGEmpireSelectPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DGEmpireSelectPacketDefaultTypeInternal() {}
  union {
    DGEmpireSelectPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DGEmpireSelectPacketDefaultTypeInternal _DGEmpireSelectPacket_default_instance_;
PROTOBUF_CONSTEXPR DGP2PInfoPacket::DGP2PInfoPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.host_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.port_)*/0u
  , /*decltype(_impl_.listen_port_)*/0u
  , /*decltype(_impl_.channel_)*/0u
  , /*decltype(_impl_.processor_core_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DGP2PInfoPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DGP2PInfoPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DGP2PInfoPacketDefaultTypeInternal() {}
  union {
    DGP2PInfoPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DGP2PInfoPacketDefaultTypeInternal _DGP2PInfoPacket_default_instance_;
PROTOBUF_CONSTEXPR DGLoginAlreadyPacket::DGLoginAlreadyPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.login_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DGLoginAlreadyPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DGLoginAlreadyPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DGLoginAlreadyPacketDefaultTypeInternal() {}
  union {
    DGLoginAlreadyPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DGLoginAlreadyPacketDefaultTypeInternal _DGLoginAlreadyPacket_default_instance_;
PROTOBUF_CONSTEXPR DGTimePacket::DGTimePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.time_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DGTimePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DGTimePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DGTimePacketDefaultTypeInternal() {}
  union {
    DGTimePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DGTimePacketDefaultTypeInternal _DGTimePacket_default_instance_;
PROTOBUF_CONSTEXPR DGReloadShopTablePacket::DGReloadShopTablePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.shops_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DGReloadShopTablePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DGReloadShopTablePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DGReloadShopTablePacketDefaultTypeInternal() {}
  union {
    DGReloadShopTablePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DGReloadShopTablePacketDefaultTypeInternal _DGReloadShopTablePacket_default_instance_;
PROTOBUF_CONSTEXPR DGReloadMobProtoPacket::DGReloadMobProtoPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.mobs_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DGReloadMobProtoPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DGReloadMobProtoPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DGReloadMobProtoPacketDefaultTypeInternal() {}
  union {
    DGReloadMobProtoPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DGReloadMobProtoPacketDefaultTypeInternal _DGReloadMobProtoPacket_default_instance_;
PROTOBUF_CONSTEXPR DGReloadProtoPacket::DGReloadProtoPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.skills_)*/{}
  , /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_.mobs_)*/{}
  , /*decltype(_impl_.shops_)*/{}
  , /*decltype(_impl_.soul_protos_)*/{}
  , /*decltype(_impl_.pet_skills_)*/{}
  , /*decltype(_impl_.pet_evolves_)*/{}
  , /*decltype(_impl_.pet_attrs_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DGReloadProtoPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DGReloadProtoPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DGReloadProtoPacketDefaultTypeInternal() {}
  union {
    DGReloadProtoPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DGReloadProtoPacketDefaultTypeInternal _DGReloadProtoPacket_default_instance_;
PROTOBUF_CONSTEXPR DGChangeNamePacket::DGChangeNamePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DGChangeNamePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DGChangeNamePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DGChangeNamePacketDefaultTypeInternal() {}
  union {
    DGChangeNamePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DGChangeNamePacketDefaultTypeInternal _DGChangeNamePacket_default_instance_;
PROTOBUF_CONSTEXPR DGAuthLoginPacket::DGAuthLoginPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.result_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DGAuthLoginPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DGAuthLoginPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DGAuthLoginPacketDefaultTypeInternal() {}
  union {
    DGAuthLoginPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DGAuthLoginPacketDefaultTypeInternal _DGAuthLoginPacket_default_instance_;
PROTOBUF_CONSTEXPR DGChangeEmpirePrivPacket::DGChangeEmpirePrivPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_)*/0u
  , /*decltype(_impl_.value_)*/0
  , /*decltype(_impl_.empire_)*/0u
  , /*decltype(_impl_.log_)*/false
  , /*decltype(_impl_.end_time_sec_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DGChangeEmpirePrivPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DGChangeEmpirePrivPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DGChangeEmpirePrivPacketDefaultTypeInternal() {}
  union {
    DGChangeEmpirePrivPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DGChangeEmpirePrivPacketDefaultTypeInternal _DGChangeEmpirePrivPacket_default_instance_;
PROTOBUF_CONSTEXPR DGChangeGuildPrivPacket::DGChangeGuildPrivPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_)*/0u
  , /*decltype(_impl_.value_)*/0
  , /*decltype(_impl_.guild_id_)*/0u
  , /*decltype(_impl_.log_)*/false
  , /*decltype(_impl_.end_time_sec_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DGChangeGuildPrivPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DGChangeGuildPrivPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DGChangeGuildPrivPacketDefaultTypeInternal() {}
  union {
    DGChangeGuildPrivPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DGChangeGuildPrivPacketDefaultTypeInternal _DGChangeGuildPrivPacket_default_instance_;
PROTOBUF_CONSTEXPR DGChangeCharacterPrivPacket::DGChangeCharacterPrivPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_)*/0u
  , /*decltype(_impl_.value_)*/0
  , /*decltype(_impl_.pid_)*/0u
  , /*decltype(_impl_.log_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DGChangeCharacterPrivPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DGChangeCharacterPrivPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DGChangeCharacterPrivPacketDefaultTypeInternal() {}
  union {
    DGChangeCharacterPrivPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DGChangeCharacterPrivPacketDefaultTypeInternal _DGChangeCharacterPrivPacket_default_instance_;
PROTOBUF_CONSTEXPR DGMoneyLogPacket::DGMoneyLogPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_)*/0u
  , /*decltype(_impl_.vnum_)*/0u
  , /*decltype(_impl_.gold_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DGMoneyLogPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DGMoneyLogPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DGMoneyLogPacketDefaultTypeInternal() {}
  union {
    DGMoneyLogPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DGMoneyLogPacketDefaultTypeInternal _DGMoneyLogPacket_default_instance_;
PROTOBUF_CONSTEXPR DGSetEventFlagPacket::DGSetEventFlagPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.flag_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DGSetEventFlagPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DGSetEventFlagPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DGSetEventFlagPacketDefaultTypeInternal() {}
  union {
    DGSetEventFlagPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DGSetEventFlagPacketDefaultTypeInternal _DGSetEventFlagPacket_default_instance_;
PROTOBUF_CONSTEXPR DGVCardPacket::DGVCardPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sell_character_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sell_account_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.buy_character_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.buy_account_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DGVCardPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DGVCardPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DGVCardPacketDefaultTypeInternal() {}
  union {
    DGVCardPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DGVCardPacketDefaultTypeInternal _DGVCardPacket_default_instance_;
PROTOBUF_CONSTEXPR DGNoticePacket::DGNoticePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.notice_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DGNoticePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DGNoticePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DGNoticePacketDefaultTypeInternal() {}
  union {
    DGNoticePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DGNoticePacketDefaultTypeInternal _DGNoticePacket_default_instance_;
PROTOBUF_CONSTEXPR DGAddBlockCountryIPPacket::DGAddBlockCountryIPPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ip_from_)*/0u
  , /*decltype(_impl_.ip_to_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DGAddBlockCountryIPPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DGAddBlockCountryIPPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DGAddBlockCountryIPPacketDefaultTypeInternal() {}
  union {
    DGAddBlockCountryIPPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DGAddBlockCountryIPPacketDefaultTypeInternal _DGAddBlockCountryIPPacket_default_instance_;
PROTOBUF_CONSTEXPR DGBlockExceptionPacket::DGBlockExceptionPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.login_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.cmd_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DGBlockExceptionPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DGBlockExceptionPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DGBlockExceptionPacketDefaultTypeInternal() {}
  union {
    DGBlockExceptionPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DGBlockExceptionPacketDefaultTypeInternal _DGBlockExceptionPacket_default_instance_;
PROTOBUF_CONSTEXPR DGMyShopPricelistPacket::DGMyShopPricelistPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.price_info_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DGMyShopPricelistPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DGMyShopPricelistPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DGMyShopPricelistPacketDefaultTypeInternal() {}
  union {
    DGMyShopPricelistPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DGMyShopPricelistPacketDefaultTypeInternal _DGMyShopPricelistPacket_default_instance_;
PROTOBUF_CONSTEXPR DGReloadAdminPacket::DGReloadAdminPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.admins_)*/{}
  , /*decltype(_impl_.admin_configs_)*/{}
  , /*decltype(_impl_._admin_configs_cached_byte_size_)*/{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DGReloadAdminPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DGReloadAdminPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DGReloadAdminPacketDefaultTypeInternal() {}
  union {
    DGReloadAdminPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DGReloadAdminPacketDefaultTypeInternal _DGReloadAdminPacket_default_instance_;
PROTOBUF_CONSTEXPR DGDetailLogPacket::DGDetailLogPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DGDetailLogPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DGDetailLogPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DGDetailLogPacketDefaultTypeInternal() {}
  union {
    DGDetailLogPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DGDetailLogPacketDefaultTypeInternal _DGDetailLogPacket_default_instance_;
PROTOBUF_CONSTEXPR DGItemAwardInformerPacket::DGItemAwardInformerPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.login_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.command_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.vnum_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DGItemAwardInformerPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DGItemAwardInformerPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DGItemAwardInformerPacketDefaultTypeInternal() {}
  union {
    DGItemAwardInformerPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DGItemAwardInformerPacketDefaultTypeInternal _DGItemAwardInformerPacket_default_instance_;
PROTOBUF_CONSTEXPR DGRespondChannelStatusPacket::DGRespondChannelStatusPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.states_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DGRespondChannelStatusPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DGRespondChannelStatusPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DGRespondChannelStatusPacketDefaultTypeInternal() {}
  union {
    DGRespondChannelStatusPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DGRespondChannelStatusPacketDefaultTypeInternal _DGRespondChannelStatusPacket_default_instance_;
PROTOBUF_CONSTEXPR DGChannelSwitchPacket::DGChannelSwitchPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ip_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.port_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DGChannelSwitchPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DGChannelSwitchPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DGChannelSwitchPacketDefaultTypeInternal() {}
  union {
    DGChannelSwitchPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DGChannelSwitchPacketDefaultTypeInternal _DGChannelSwitchPacket_default_instance_;
PROTOBUF_CONSTEXPR DGSpareItemIDRangePacket::DGSpareItemIDRangePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DGSpareItemIDRangePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DGSpareItemIDRangePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DGSpareItemIDRangePacketDefaultTypeInternal() {}
  union {
    DGSpareItemIDRangePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DGSpareItemIDRangePacketDefaultTypeInternal _DGSpareItemIDRangePacket_default_instance_;
PROTOBUF_CONSTEXPR DGUpdateHorseNamePacket::DGUpdateHorseNamePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.horse_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.player_id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DGUpdateHorseNamePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DGUpdateHorseNamePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DGUpdateHorseNamePacketDefaultTypeInternal() {}
  union {
    DGUpdateHorseNamePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DGUpdateHorseNamePacketDefaultTypeInternal _DGUpdateHorseNamePacket_default_instance_;
PROTOBUF_CONSTEXPR DGSpawnMobTimedPacket::DGSpawnMobTimedPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.mob_vnum_)*/0u
  , /*decltype(_impl_.map_index_)*/0u
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.channel_)*/0u
  , /*decltype(_impl_.target_time_)*/0
  , /*decltype(_impl_.despawn_time_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DGSpawnMobTimedPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DGSpawnMobTimedPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DGSpawnMobTimedPacketDefaultTypeInternal() {}
  union {
    DGSpawnMobTimedPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DGSpawnMobTimedPacketDefaultTypeInternal _DGSpawnMobTimedPacket_default_instance_;
PROTOBUF_CONSTEXPR DGItemOfflineRestorePacket::DGItemOfflineRestorePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DGItemOfflineRestorePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DGItemOfflineRestorePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DGItemOfflineRestorePacketDefaultTypeInternal() {}
  union {
    DGItemOfflineRestorePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DGItemOfflineRestorePacketDefaultTypeInternal _DGItemOfflineRestorePacket_default_instance_;
PROTOBUF_CONSTEXPR DGOfflineMessagesLoadPacket::DGOfflineMessagesLoadPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.messages_)*/{}
  , /*decltype(_impl_.pid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DGOfflineMessagesLoadPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DGOfflineMessagesLoadPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DGOfflineMessagesLoadPacketDefaultTypeInternal() {}
  union {
    DGOfflineMessagesLoadPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DGOfflineMessagesLoadPacketDefaultTypeInternal _DGOfflineMessagesLoadPacket_default_instance_;
PROTOBUF_CONSTEXPR DGItemRefundLoadPacket_RefundItem::DGItemRefundLoadPacket_RefundItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.item_)*/nullptr
  , /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_.socket_set_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DGItemRefundLoadPacket_RefundItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DGItemRefundLoadPacket_RefundItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DGItemRefundLoadPacket_RefundItemDefaultTypeInternal() {}
  union {
    DGItemRefundLoadPacket_RefundItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DGItemRefundLoadPacket_RefundItemDefaultTypeInternal _DGItemRefundLoadPacket_RefundItem_default_instance_;
PROTOBUF_CONSTEXPR DGItemRefundLoadPacket::DGItemRefundLoadPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_.pid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DGItemRefundLoadPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DGItemRefundLoadPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DGItemRefundLoadPacketDefaultTypeInternal() {}
  union {
    DGItemRefundLoadPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DGItemRefundLoadPacketDefaultTypeInternal _DGItemRefundLoadPacket_default_instance_;
PROTOBUF_CONSTEXPR DGWhisperPlayerExistResultPacket::DGWhisperPlayerExistResultPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.target_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pid_)*/0u
  , /*decltype(_impl_.is_exist_)*/false
  , /*decltype(_impl_.is_blocked_)*/false
  , /*decltype(_impl_.return_money_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DGWhisperPlayerExistResultPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DGWhisperPlayerExistResultPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DGWhisperPlayerExistResultPacketDefaultTypeInternal() {}
  union {
    DGWhisperPlayerExistResultPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DGWhisperPlayerExistResultPacketDefaultTypeInternal _DGWhisperPlayerExistResultPacket_default_instance_;
PROTOBUF_CONSTEXPR DGWhisperPlayerMessageOfflinePacket::DGWhisperPlayerMessageOfflinePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.target_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pid_)*/0u
  , /*decltype(_impl_.target_pid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DGWhisperPlayerMessageOfflinePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DGWhisperPlayerMessageOfflinePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DGWhisperPlayerMessageOfflinePacketDefaultTypeInternal() {}
  union {
    DGWhisperPlayerMessageOfflinePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DGWhisperPlayerMessageOfflinePacketDefaultTypeInternal _DGWhisperPlayerMessageOfflinePacket_default_instance_;
PROTOBUF_CONSTEXPR DGReloadXmasRewardsPacket::DGReloadXmasRewardsPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.rewards_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DGReloadXmasRewardsPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DGReloadXmasRewardsPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DGReloadXmasRewardsPacketDefaultTypeInternal() {}
  union {
    DGReloadXmasRewardsPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DGReloadXmasRewardsPacketDefaultTypeInternal _DGReloadXmasRewardsPacket_default_instance_;
PROTOBUF_CONSTEXPR DGSetAveragePricesPacket_Element::DGSetAveragePricesPacket_Element(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.price_)*/uint64_t{0u}
  , /*decltype(_impl_.vnum_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DGSetAveragePricesPacket_ElementDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DGSetAveragePricesPacket_ElementDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DGSetAveragePricesPacket_ElementDefaultTypeInternal() {}
  union {
    DGSetAveragePricesPacket_Element _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DGSetAveragePricesPacket_ElementDefaultTypeInternal _DGSetAveragePricesPacket_Element_default_instance_;
PROTOBUF_CONSTEXPR DGSetAveragePricesPacket::DGSetAveragePricesPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.prices_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DGSetAveragePricesPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DGSetAveragePricesPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DGSetAveragePricesPacketDefaultTypeInternal() {}
  union {
    DGSetAveragePricesPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DGSetAveragePricesPacketDefaultTypeInternal _DGSetAveragePricesPacket_default_instance_;
PROTOBUF_CONSTEXPR DGSkillColorLoadPacket_SkillColor::DGSkillColorLoadPacket_SkillColor(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.colors_)*/{}
  , /*decltype(_impl_._colors_cached_byte_size_)*/{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DGSkillColorLoadPacket_SkillColorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DGSkillColorLoadPacket_SkillColorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DGSkillColorLoadPacket_SkillColorDefaultTypeInternal() {}
  union {
    DGSkillColorLoadPacket_SkillColor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DGSkillColorLoadPacket_SkillColorDefaultTypeInternal _DGSkillColorLoadPacket_SkillColor_default_instance_;
PROTOBUF_CONSTEXPR DGSkillColorLoadPacket::DGSkillColorLoadPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.colors_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DGSkillColorLoadPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DGSkillColorLoadPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DGSkillColorLoadPacketDefaultTypeInternal() {}
  union {
    DGSkillColorLoadPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DGSkillColorLoadPacketDefaultTypeInternal _DGSkillColorLoadPacket_default_instance_;
PROTOBUF_CONSTEXPR DGEquipmentPageLoadPacket::DGEquipmentPageLoadPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.equipments_)*/{}
  , /*decltype(_impl_.pid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DGEquipmentPageLoadPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DGEquipmentPageLoadPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DGEquipmentPageLoadPacketDefaultTypeInternal() {}
  union {
    DGEquipmentPageLoadPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DGEquipmentPageLoadPacketDefaultTypeInternal _DGEquipmentPageLoadPacket_default_instance_;
PROTOBUF_CONSTEXPR DGGuildDungeonPacket::DGGuildDungeonPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.guild_id_)*/0u
  , /*decltype(_impl_.channel_)*/0u
  , /*decltype(_impl_.map_index_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DGGuildDungeonPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DGGuildDungeonPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DGGuildDungeonPacketDefaultTypeInternal() {}
  union {
    DGGuildDungeonPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DGGuildDungeonPacketDefaultTypeInternal _DGGuildDungeonPacket_default_instance_;
PROTOBUF_CONSTEXPR DGGuildDungeonCDPacket::DGGuildDungeonCDPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.guild_id_)*/0u
  , /*decltype(_impl_.time_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DGGuildDungeonCDPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DGGuildDungeonCDPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DGGuildDungeonCDPacketDefaultTypeInternal() {}
  union {
    DGGuildDungeonCDPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DGGuildDungeonCDPacketDefaultTypeInternal _DGGuildDungeonCDPacket_default_instance_;
PROTOBUF_CONSTEXPR DGMaintenancePacket::DGMaintenancePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.shutdown_timer_)*/0
  , /*decltype(_impl_.maintenance_)*/false
  , /*decltype(_impl_.maintenance_duration_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DGMaintenancePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DGMaintenancePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DGMaintenancePacketDefaultTypeInternal() {}
  union {
    DGMaintenancePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DGMaintenancePacketDefaultTypeInternal _DGMaintenancePacket_default_instance_;
PROTOBUF_CONSTEXPR DGWhitelistIPPacket::DGWhitelistIPPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ip_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DGWhitelistIPPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DGWhitelistIPPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DGWhitelistIPPacketDefaultTypeInternal() {}
  union {
    DGWhitelistIPPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DGWhitelistIPPacketDefaultTypeInternal _DGWhitelistIPPacket_default_instance_;
PROTOBUF_CONSTEXPR DGAuctionDeletePlayer::DGAuctionDeletePlayer(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DGAuctionDeletePlayerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DGAuctionDeletePlayerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DGAuctionDeletePlayerDefaultTypeInternal() {}
  union {
    DGAuctionDeletePlayer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DGAuctionDeletePlayerDefaultTypeInternal _DGAuctionDeletePlayer_default_instance_;
PROTOBUF_CONSTEXPR DGCreateObjectPacket::DGCreateObjectPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.object_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DGCreateObjectPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DGCreateObjectPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DGCreateObjectPacketDefaultTypeInternal() {}
  union {
    DGCreateObjectPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DGCreateObjectPacketDefaultTypeInternal _DGCreateObjectPacket_default_instance_;
PROTOBUF_CONSTEXPR DGDeleteObjectPacket::DGDeleteObjectPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DGDeleteObjectPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DGDeleteObjectPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DGDeleteObjectPacketDefaultTypeInternal() {}
  union {
    DGDeleteObjectPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DGDeleteObjectPacketDefaultTypeInternal _DGDeleteObjectPacket_default_instance_;
PROTOBUF_CONSTEXPR DGUpdateLandPacket::DGUpdateLandPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.land_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DGUpdateLandPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DGUpdateLandPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DGUpdateLandPacketDefaultTypeInternal() {}
  union {
    DGUpdateLandPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DGUpdateLandPacketDefaultTypeInternal _DGUpdateLandPacket_default_instance_;
PROTOBUF_CONSTEXPR DGMarriageAddPacket::DGMarriageAddPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name1_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name2_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pid1_)*/0u
  , /*decltype(_impl_.pid2_)*/0u
  , /*decltype(_impl_.marry_time_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DGMarriageAddPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DGMarriageAddPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DGMarriageAddPacketDefaultTypeInternal() {}
  union {
    DGMarriageAddPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DGMarriageAddPacketDefaultTypeInternal _DGMarriageAddPacket_default_instance_;
PROTOBUF_CONSTEXPR DGMarriageUpdatePacket::DGMarriageUpdatePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pid1_)*/0u
  , /*decltype(_impl_.pid2_)*/0u
  , /*decltype(_impl_.love_point_)*/0
  , /*decltype(_impl_.married_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DGMarriageUpdatePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DGMarriageUpdatePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DGMarriageUpdatePacketDefaultTypeInternal() {}
  union {
    DGMarriageUpdatePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DGMarriageUpdatePacketDefaultTypeInternal _DGMarriageUpdatePacket_default_instance_;
PROTOBUF_CONSTEXPR DGMarriageRemovePacket::DGMarriageRemovePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pid1_)*/0u
  , /*decltype(_impl_.pid2_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DGMarriageRemovePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DGMarriageRemovePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DGMarriageRemovePacketDefaultTypeInternal() {}
  union {
    DGMarriageRemovePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DGMarriageRemovePacketDefaultTypeInternal _DGMarriageRemovePacket_default_instance_;
PROTOBUF_CONSTEXPR DGWeddingRequestPacket::DGWeddingRequestPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pid1_)*/0u
  , /*decltype(_impl_.pid2_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DGWeddingRequestPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DGWeddingRequestPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DGWeddingRequestPacketDefaultTypeInternal() {}
  union {
    DGWeddingRequestPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DGWeddingRequestPacketDefaultTypeInternal _DGWeddingRequestPacket_default_instance_;
PROTOBUF_CONSTEXPR DGWeddingReadyPacket::DGWeddingReadyPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pid1_)*/0u
  , /*decltype(_impl_.pid2_)*/0u
  , /*decltype(_impl_.map_index_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DGWeddingReadyPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DGWeddingReadyPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DGWeddingReadyPacketDefaultTypeInternal() {}
  union {
    DGWeddingReadyPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DGWeddingReadyPacketDefaultTypeInternal _DGWeddingReadyPacket_default_instance_;
PROTOBUF_CONSTEXPR DGWeddingStartPacket::DGWeddingStartPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pid1_)*/0u
  , /*decltype(_impl_.pid2_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DGWeddingStartPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DGWeddingStartPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DGWeddingStartPacketDefaultTypeInternal() {}
  union {
    DGWeddingStartPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DGWeddingStartPacketDefaultTypeInternal _DGWeddingStartPacket_default_instance_;
PROTOBUF_CONSTEXPR DGWeddingEndPacket::DGWeddingEndPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pid1_)*/0u
  , /*decltype(_impl_.pid2_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DGWeddingEndPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DGWeddingEndPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DGWeddingEndPacketDefaultTypeInternal() {}
  union {
    DGWeddingEndPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DGWeddingEndPacketDefaultTypeInternal _DGWeddingEndPacket_default_instance_;
PROTOBUF_CONSTEXPR DGBillingRepairPacket::DGBillingRepairPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.login_keys_)*/{}
  , /*decltype(_impl_._login_keys_cached_byte_size_)*/{0}
  , /*decltype(_impl_.logins_)*/{}
  , /*decltype(_impl_.hosts_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DGBillingRepairPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DGBillingRepairPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DGBillingRepairPacketDefaultTypeInternal() {}
  union {
    DGBillingRepairPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DGBillingRepairPacketDefaultTypeInternal _DGBillingRepairPacket_default_instance_;
PROTOBUF_CONSTEXPR DGBillingExpirePacket::DGBillingExpirePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.login_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.bill_type_)*/0u
  , /*decltype(_impl_.remain_seconds_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DGBillingExpirePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DGBillingExpirePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DGBillingExpirePacketDefaultTypeInternal() {}
  union {
    DGBillingExpirePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DGBillingExpirePacketDefaultTypeInternal _DGBillingExpirePacket_default_instance_;
PROTOBUF_CONSTEXPR DGBillingLoginPacket::DGBillingLoginPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.login_keys_)*/{}
  , /*decltype(_impl_._login_keys_cached_byte_size_)*/{0}
  , /*decltype(_impl_.logins_)*/{}
  , /*decltype(_impl_._logins_cached_byte_size_)*/{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DGBillingLoginPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DGBillingLoginPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DGBillingLoginPacketDefaultTypeInternal() {}
  union {
    DGBillingLoginPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DGBillingLoginPacketDefaultTypeInternal _DGBillingLoginPacket_default_instance_;
PROTOBUF_CONSTEXPR DGBillingCheckPacket::DGBillingCheckPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.keys_)*/{}
  , /*decltype(_impl_._keys_cached_byte_size_)*/{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DGBillingCheckPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DGBillingCheckPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DGBillingCheckPacketDefaultTypeInternal() {}
  union {
    DGBillingCheckPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DGBillingCheckPacketDefaultTypeInternal _DGBillingCheckPacket_default_instance_;
PROTOBUF_CONSTEXPR DGGuildLoadPacket::DGGuildLoadPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.guild_id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DGGuildLoadPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DGGuildLoadPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DGGuildLoadPacketDefaultTypeInternal() {}
  union {
    DGGuildLoadPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DGGuildLoadPacketDefaultTypeInternal _DGGuildLoadPacket_default_instance_;
PROTOBUF_CONSTEXPR DGGuildSkillUpdatePacket::DGGuildSkillUpdatePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.skill_levels_)*/{}
  , /*decltype(_impl_._skill_levels_cached_byte_size_)*/{0}
  , /*decltype(_impl_.guild_id_)*/0u
  , /*decltype(_impl_.amount_)*/0
  , /*decltype(_impl_.skill_point_)*/0u
  , /*decltype(_impl_.save_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DGGuildSkillUpdatePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DGGuildSkillUpdatePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DGGuildSkillUpdatePacketDefaultTypeInternal() {}
  union {
    DGGuildSkillUpdatePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DGGuildSkillUpdatePacketDefaultTypeInternal _DGGuildSkillUpdatePacket_default_instance_;
PROTOBUF_CONSTEXPR DGGuildExpUpdatePacket::DGGuildExpUpdatePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.guild_id_)*/0u
  , /*decltype(_impl_.amount_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DGGuildExpUpdatePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DGGuildExpUpdatePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DGGuildExpUpdatePacketDefaultTypeInternal() {}
  union {
    DGGuildExpUpdatePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DGGuildExpUpdatePacketDefaultTypeInternal _DGGuildExpUpdatePacket_default_instance_;
PROTOBUF_CONSTEXPR DGGuildAddMemberPacket::DGGuildAddMemberPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.guild_id_)*/0u
  , /*decltype(_impl_.pid_)*/0u
  , /*decltype(_impl_.grade_)*/0u
  , /*decltype(_impl_.is_general_)*/false
  , /*decltype(_impl_.job_)*/0u
  , /*decltype(_impl_.level_)*/0u
  , /*decltype(_impl_.offer_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DGGuildAddMemberPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DGGuildAddMemberPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DGGuildAddMemberPacketDefaultTypeInternal() {}
  union {
    DGGuildAddMemberPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DGGuildAddMemberPacketDefaultTypeInternal _DGGuildAddMemberPacket_default_instance_;
PROTOBUF_CONSTEXPR DGGuildRemoveMemberPacket::DGGuildRemoveMemberPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.guild_id_)*/0u
  , /*decltype(_impl_.pid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DGGuildRemoveMemberPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DGGuildRemoveMemberPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DGGuildRemoveMemberPacketDefaultTypeInternal() {}
  union {
    DGGuildRemoveMemberPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DGGuildRemoveMemberPacketDefaultTypeInternal _DGGuildRemoveMemberPacket_default_instance_;
PROTOBUF_CONSTEXPR DGGuildChangeGradePacket::DGGuildChangeGradePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.guild_id_)*/0u
  , /*decltype(_impl_.grade_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DGGuildChangeGradePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DGGuildChangeGradePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DGGuildChangeGradePacketDefaultTypeInternal() {}
  union {
    DGGuildChangeGradePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DGGuildChangeGradePacketDefaultTypeInternal _DGGuildChangeGradePacket_default_instance_;
PROTOBUF_CONSTEXPR DGGuildChangeMemberDataPacket::DGGuildChangeMemberDataPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.guild_id_)*/0u
  , /*decltype(_impl_.pid_)*/0u
  , /*decltype(_impl_.offer_)*/0u
  , /*decltype(_impl_.level_)*/0u
  , /*decltype(_impl_.grade_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DGGuildChangeMemberDataPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DGGuildChangeMemberDataPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DGGuildChangeMemberDataPacketDefaultTypeInternal() {}
  union {
    DGGuildChangeMemberDataPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DGGuildChangeMemberDataPacketDefaultTypeInternal _DGGuildChangeMemberDataPacket_default_instance_;
PROTOBUF_CONSTEXPR DGGuildDisbandPacket::DGGuildDisbandPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.guild_id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DGGuildDisbandPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DGGuildDisbandPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DGGuildDisbandPacketDefaultTypeInternal() {}
  union {
    DGGuildDisbandPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DGGuildDisbandPacketDefaultTypeInternal _DGGuildDisbandPacket_default_instance_;
PROTOBUF_CONSTEXPR DGGuildLadderPacket::DGGuildLadderPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.wins_)*/{}
  , /*decltype(_impl_._wins_cached_byte_size_)*/{0}
  , /*decltype(_impl_.draws_)*/{}
  , /*decltype(_impl_._draws_cached_byte_size_)*/{0}
  , /*decltype(_impl_.losses_)*/{}
  , /*decltype(_impl_._losses_cached_byte_size_)*/{0}
  , /*decltype(_impl_.guild_id_)*/0u
  , /*decltype(_impl_.ladder_point_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DGGuildLadderPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DGGuildLadderPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DGGuildLadderPacketDefaultTypeInternal() {}
  union {
    DGGuildLadderPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DGGuildLadderPacketDefaultTypeInternal _DGGuildLadderPacket_default_instance_;
PROTOBUF_CONSTEXPR DGGuildWarPacket::DGGuildWarPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_)*/0u
  , /*decltype(_impl_.war_)*/0u
  , /*decltype(_impl_.guild_from_)*/0u
  , /*decltype(_impl_.guild_to_)*/0u
  , /*decltype(_impl_.war_price_)*/0
  , /*decltype(_impl_.initial_score_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DGGuildWarPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DGGuildWarPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DGGuildWarPacketDefaultTypeInternal() {}
  union {
    DGGuildWarPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DGGuildWarPacketDefaultTypeInternal _DGGuildWarPacket_default_instance_;
PROTOBUF_CONSTEXPR DGGuildWarScorePacket::DGGuildWarScorePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.guild_gain_point_)*/0u
  , /*decltype(_impl_.guild_opponent_)*/0u
  , /*decltype(_impl_.score_)*/0
  , /*decltype(_impl_.bet_score_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DGGuildWarScorePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DGGuildWarScorePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DGGuildWarScorePacketDefaultTypeInternal() {}
  union {
    DGGuildWarScorePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DGGuildWarScorePacketDefaultTypeInternal _DGGuildWarScorePacket_default_instance_;
PROTOBUF_CONSTEXPR DGGuildSkillUsableChangePacket::DGGuildSkillUsableChangePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.guild_id_)*/0u
  , /*decltype(_impl_.skill_vnum_)*/0u
  , /*decltype(_impl_.usable_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DGGuildSkillUsableChangePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DGGuildSkillUsableChangePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DGGuildSkillUsableChangePacketDefaultTypeInternal() {}
  union {
    DGGuildSkillUsableChangePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DGGuildSkillUsableChangePacketDefaultTypeInternal _DGGuildSkillUsableChangePacket_default_instance_;
PROTOBUF_CONSTEXPR DGGuildMoneyChangePacket::DGGuildMoneyChangePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.guild_id_)*/0u
  , /*decltype(_impl_.total_gold_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DGGuildMoneyChangePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DGGuildMoneyChangePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DGGuildMoneyChangePacketDefaultTypeInternal() {}
  union {
    DGGuildMoneyChangePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DGGuildMoneyChangePacketDefaultTypeInternal _DGGuildMoneyChangePacket_default_instance_;
PROTOBUF_CONSTEXPR DGGuildMoneyWithdrawPacket::DGGuildMoneyWithdrawPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.guild_id_)*/0u
  , /*decltype(_impl_.change_gold_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DGGuildMoneyWithdrawPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DGGuildMoneyWithdrawPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DGGuildMoneyWithdrawPacketDefaultTypeInternal() {}
  union {
    DGGuildMoneyWithdrawPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DGGuildMoneyWithdrawPacketDefaultTypeInternal _DGGuildMoneyWithdrawPacket_default_instance_;
PROTOBUF_CONSTEXPR DGGuildWarReserveAddPacket::DGGuildWarReserveAddPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_.guild_from_)*/0u
  , /*decltype(_impl_.guild_to_)*/0u
  , /*decltype(_impl_.time_)*/0u
  , /*decltype(_impl_.type_)*/0u
  , /*decltype(_impl_.war_price_)*/0
  , /*decltype(_impl_.initial_score_)*/0
  , /*decltype(_impl_.started_)*/false
  , /*decltype(_impl_.bet_from_)*/0u
  , /*decltype(_impl_.bet_to_)*/0u
  , /*decltype(_impl_.power_from_)*/0
  , /*decltype(_impl_.power_to_)*/0
  , /*decltype(_impl_.handicap_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DGGuildWarReserveAddPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DGGuildWarReserveAddPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DGGuildWarReserveAddPacketDefaultTypeInternal() {}
  union {
    DGGuildWarReserveAddPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DGGuildWarReserveAddPacketDefaultTypeInternal _DGGuildWarReserveAddPacket_default_instance_;
PROTOBUF_CONSTEXPR DGGuildWarReserveDeletePacket::DGGuildWarReserveDeletePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DGGuildWarReserveDeletePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DGGuildWarReserveDeletePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DGGuildWarReserveDeletePacketDefaultTypeInternal() {}
  union {
    DGGuildWarReserveDeletePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DGGuildWarReserveDeletePacketDefaultTypeInternal _DGGuildWarReserveDeletePacket_default_instance_;
PROTOBUF_CONSTEXPR DGGuildWarBetPacket::DGGuildWarBetPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.login_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_.gold_)*/0u
  , /*decltype(_impl_.guild_id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DGGuildWarBetPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DGGuildWarBetPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DGGuildWarBetPacketDefaultTypeInternal() {}
  union {
    DGGuildWarBetPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DGGuildWarBetPacketDefaultTypeInternal _DGGuildWarBetPacket_default_instance_;
PROTOBUF_CONSTEXPR DGGuildChangeMasterPacket::DGGuildChangeMasterPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.guild_id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DGGuildChangeMasterPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DGGuildChangeMasterPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DGGuildChangeMasterPacketDefaultTypeInternal() {}
  union {
    DGGuildChangeMasterPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DGGuildChangeMasterPacketDefaultTypeInternal _DGGuildChangeMasterPacket_default_instance_;
PROTOBUF_CONSTEXPR DGGuildSafeboxPacket::DGGuildSafeboxPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_.item_)*/nullptr
  , /*decltype(_impl_.added_log_)*/nullptr
  , /*decltype(_impl_.sub_header_)*/0u
  , /*decltype(_impl_.guild_id_)*/0u
  , /*decltype(_impl_.gold_)*/uint64_t{0u}
  , /*decltype(_impl_.size_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DGGuildSafeboxPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DGGuildSafeboxPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DGGuildSafeboxPacketDefaultTypeInternal() {}
  union {
    DGGuildSafeboxPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DGGuildSafeboxPacketDefaultTypeInternal _DGGuildSafeboxPacket_default_instance_;
PROTOBUF_CONSTEXPR DGPartyCreatePacket::DGPartyCreatePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.leader_pid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DGPartyCreatePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DGPartyCreatePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DGPartyCreatePacketDefaultTypeInternal() {}
  union {
    DGPartyCreatePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DGPartyCreatePacketDefaultTypeInternal _DGPartyCreatePacket_default_instance_;
PROTOBUF_CONSTEXPR DGPartyDeletePacket::DGPartyDeletePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.leader_pid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DGPartyDeletePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DGPartyDeletePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DGPartyDeletePacketDefaultTypeInternal() {}
  union {
    DGPartyDeletePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DGPartyDeletePacketDefaultTypeInternal _DGPartyDeletePacket_default_instance_;
PROTOBUF_CONSTEXPR DGPartyAddPacket::DGPartyAddPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.leader_pid_)*/0u
  , /*decltype(_impl_.pid_)*/0u
  , /*decltype(_impl_.state_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DGPartyAddPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DGPartyAddPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DGPartyAddPacketDefaultTypeInternal() {}
  union {
    DGPartyAddPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DGPartyAddPacketDefaultTypeInternal _DGPartyAddPacket_default_instance_;
PROTOBUF_CONSTEXPR DGPartyRemovePacket::DGPartyRemovePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DGPartyRemovePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DGPartyRemovePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DGPartyRemovePacketDefaultTypeInternal() {}
  union {
    DGPartyRemovePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DGPartyRemovePacketDefaultTypeInternal _DGPartyRemovePacket_default_instance_;
PROTOBUF_CONSTEXPR DGPartyStateChangePacket::DGPartyStateChangePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.leader_pid_)*/0u
  , /*decltype(_impl_.pid_)*/0u
  , /*decltype(_impl_.role_)*/0u
  , /*decltype(_impl_.flag_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DGPartyStateChangePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DGPartyStateChangePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DGPartyStateChangePacketDefaultTypeInternal() {}
  union {
    DGPartyStateChangePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DGPartyStateChangePacketDefaultTypeInternal _DGPartyStateChangePacket_default_instance_;
PROTOBUF_CONSTEXPR DGPartySetMemberLevelPacket::DGPartySetMemberLevelPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.leader_pid_)*/0u
  , /*decltype(_impl_.pid_)*/0u
  , /*decltype(_impl_.level_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DGPartySetMemberLevelPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DGPartySetMemberLevelPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DGPartySetMemberLevelPacketDefaultTypeInternal() {}
  union {
    DGPartySetMemberLevelPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DGPartySetMemberLevelPacketDefaultTypeInternal _DGPartySetMemberLevelPacket_default_instance_;
}  // namespace network
static ::_pb::Metadata file_level_metadata_dg_5fpackets_2eproto[97];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_dg_5fpackets_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_dg_5fpackets_2eproto = nullptr;

const uint32_t TableStruct_dg_5fpackets_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::DGBootPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::DGBootPacket, _impl_.mobs_),
  PROTOBUF_FIELD_OFFSET(::network::DGBootPacket, _impl_.items_),
  PROTOBUF_FIELD_OFFSET(::network::DGBootPacket, _impl_.shops_),
  PROTOBUF_FIELD_OFFSET(::network::DGBootPacket, _impl_.skills_),
  PROTOBUF_FIELD_OFFSET(::network::DGBootPacket, _impl_.refines_),
  PROTOBUF_FIELD_OFFSET(::network::DGBootPacket, _impl_.attrs_),
  PROTOBUF_FIELD_OFFSET(::network::DGBootPacket, _impl_.rare_attrs_),
  PROTOBUF_FIELD_OFFSET(::network::DGBootPacket, _impl_.costume_attrs_),
  PROTOBUF_FIELD_OFFSET(::network::DGBootPacket, _impl_.lands_),
  PROTOBUF_FIELD_OFFSET(::network::DGBootPacket, _impl_.object_protos_),
  PROTOBUF_FIELD_OFFSET(::network::DGBootPacket, _impl_.objects_),
  PROTOBUF_FIELD_OFFSET(::network::DGBootPacket, _impl_.guild_safeboxes_),
  PROTOBUF_FIELD_OFFSET(::network::DGBootPacket, _impl_.horse_upgrades_),
  PROTOBUF_FIELD_OFFSET(::network::DGBootPacket, _impl_.horse_boni_),
  PROTOBUF_FIELD_OFFSET(::network::DGBootPacket, _impl_.gaya_shops_),
  PROTOBUF_FIELD_OFFSET(::network::DGBootPacket, _impl_.attrtrees_),
  PROTOBUF_FIELD_OFFSET(::network::DGBootPacket, _impl_.runes_),
  PROTOBUF_FIELD_OFFSET(::network::DGBootPacket, _impl_.rune_points_),
  PROTOBUF_FIELD_OFFSET(::network::DGBootPacket, _impl_.xmas_rewards_),
  PROTOBUF_FIELD_OFFSET(::network::DGBootPacket, _impl_.soul_protos_),
  PROTOBUF_FIELD_OFFSET(::network::DGBootPacket, _impl_.item_id_range_),
  PROTOBUF_FIELD_OFFSET(::network::DGBootPacket, _impl_.item_id_range_spare_),
  PROTOBUF_FIELD_OFFSET(::network::DGBootPacket, _impl_.admins_),
  PROTOBUF_FIELD_OFFSET(::network::DGBootPacket, _impl_.admin_configs_),
  PROTOBUF_FIELD_OFFSET(::network::DGBootPacket, _impl_.current_time_),
  PROTOBUF_FIELD_OFFSET(::network::DGBootPacket, _impl_.pet_skills_),
  PROTOBUF_FIELD_OFFSET(::network::DGBootPacket, _impl_.pet_evolves_),
  PROTOBUF_FIELD_OFFSET(::network::DGBootPacket, _impl_.pet_attrs_),
  PROTOBUF_FIELD_OFFSET(::network::DGBootPacket, _impl_.crystal_protos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::DGMapLocationsPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::DGMapLocationsPacket, _impl_.maps_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::DGLoginSuccessPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::DGLoginSuccessPacket, _impl_.account_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::DGPlayerCreateSuccessPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::DGPlayerCreateSuccessPacket, _impl_.account_index_),
  PROTOBUF_FIELD_OFFSET(::network::DGPlayerCreateSuccessPacket, _impl_.player_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::DGPlayerDeleteSuccessPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::DGPlayerDeleteSuccessPacket, _impl_.account_index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::DGPlayerLoadPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::DGPlayerLoadPacket, _impl_.player_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::DGPlayerSkillLoadPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::DGPlayerSkillLoadPacket, _impl_.pid_),
  PROTOBUF_FIELD_OFFSET(::network::DGPlayerSkillLoadPacket, _impl_.skills_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::DGItemLoadPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::DGItemLoadPacket, _impl_.pid_),
  PROTOBUF_FIELD_OFFSET(::network::DGItemLoadPacket, _impl_.items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::DGPetLoadPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::DGPetLoadPacket, _impl_.pets_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::DGQuestLoadPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::DGQuestLoadPacket, _impl_.pid_),
  PROTOBUF_FIELD_OFFSET(::network::DGQuestLoadPacket, _impl_.quests_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::DGAffectLoadPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::DGAffectLoadPacket, _impl_.pid_),
  PROTOBUF_FIELD_OFFSET(::network::DGAffectLoadPacket, _impl_.affects_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::DGSafeboxLoadPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::DGSafeboxLoadPacket, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::network::DGSafeboxLoadPacket, _impl_.size_),
  PROTOBUF_FIELD_OFFSET(::network::DGSafeboxLoadPacket, _impl_.gold_),
  PROTOBUF_FIELD_OFFSET(::network::DGSafeboxLoadPacket, _impl_.is_mall_),
  PROTOBUF_FIELD_OFFSET(::network::DGSafeboxLoadPacket, _impl_.items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::DGSafeboxChangeSizePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::DGSafeboxChangeSizePacket, _impl_.size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::DGSafeboxChangePasswordAnswerPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::DGSafeboxChangePasswordAnswerPacket, _impl_.flag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::DGEmpireSelectPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::DGEmpireSelectPacket, _impl_.empire_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::DGP2PInfoPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::DGP2PInfoPacket, _impl_.host_),
  PROTOBUF_FIELD_OFFSET(::network::DGP2PInfoPacket, _impl_.port_),
  PROTOBUF_FIELD_OFFSET(::network::DGP2PInfoPacket, _impl_.listen_port_),
  PROTOBUF_FIELD_OFFSET(::network::DGP2PInfoPacket, _impl_.channel_),
  PROTOBUF_FIELD_OFFSET(::network::DGP2PInfoPacket, _impl_.processor_core_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::DGLoginAlreadyPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::DGLoginAlreadyPacket, _impl_.login_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::DGTimePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::DGTimePacket, _impl_.time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::DGReloadShopTablePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::DGReloadShopTablePacket, _impl_.shops_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::DGReloadMobProtoPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::DGReloadMobProtoPacket, _impl_.mobs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::DGReloadProtoPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::DGReloadProtoPacket, _impl_.skills_),
  PROTOBUF_FIELD_OFFSET(::network::DGReloadProtoPacket, _impl_.items_),
  PROTOBUF_FIELD_OFFSET(::network::DGReloadProtoPacket, _impl_.mobs_),
  PROTOBUF_FIELD_OFFSET(::network::DGReloadProtoPacket, _impl_.shops_),
  PROTOBUF_FIELD_OFFSET(::network::DGReloadProtoPacket, _impl_.soul_protos_),
  PROTOBUF_FIELD_OFFSET(::network::DGReloadProtoPacket, _impl_.pet_skills_),
  PROTOBUF_FIELD_OFFSET(::network::DGReloadProtoPacket, _impl_.pet_evolves_),
  PROTOBUF_FIELD_OFFSET(::network::DGReloadProtoPacket, _impl_.pet_attrs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::DGChangeNamePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::DGChangeNamePacket, _impl_.pid_),
  PROTOBUF_FIELD_OFFSET(::network::DGChangeNamePacket, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::DGAuthLoginPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::DGAuthLoginPacket, _impl_.result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::DGChangeEmpirePrivPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::DGChangeEmpirePrivPacket, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::network::DGChangeEmpirePrivPacket, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::network::DGChangeEmpirePrivPacket, _impl_.empire_),
  PROTOBUF_FIELD_OFFSET(::network::DGChangeEmpirePrivPacket, _impl_.log_),
  PROTOBUF_FIELD_OFFSET(::network::DGChangeEmpirePrivPacket, _impl_.end_time_sec_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::DGChangeGuildPrivPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::DGChangeGuildPrivPacket, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::network::DGChangeGuildPrivPacket, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::network::DGChangeGuildPrivPacket, _impl_.guild_id_),
  PROTOBUF_FIELD_OFFSET(::network::DGChangeGuildPrivPacket, _impl_.log_),
  PROTOBUF_FIELD_OFFSET(::network::DGChangeGuildPrivPacket, _impl_.end_time_sec_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::DGChangeCharacterPrivPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::DGChangeCharacterPrivPacket, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::network::DGChangeCharacterPrivPacket, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::network::DGChangeCharacterPrivPacket, _impl_.pid_),
  PROTOBUF_FIELD_OFFSET(::network::DGChangeCharacterPrivPacket, _impl_.log_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::DGMoneyLogPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::DGMoneyLogPacket, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::network::DGMoneyLogPacket, _impl_.vnum_),
  PROTOBUF_FIELD_OFFSET(::network::DGMoneyLogPacket, _impl_.gold_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::DGSetEventFlagPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::DGSetEventFlagPacket, _impl_.flag_name_),
  PROTOBUF_FIELD_OFFSET(::network::DGSetEventFlagPacket, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::DGVCardPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::DGVCardPacket, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::network::DGVCardPacket, _impl_.sell_character_),
  PROTOBUF_FIELD_OFFSET(::network::DGVCardPacket, _impl_.sell_account_),
  PROTOBUF_FIELD_OFFSET(::network::DGVCardPacket, _impl_.buy_character_),
  PROTOBUF_FIELD_OFFSET(::network::DGVCardPacket, _impl_.buy_account_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::DGNoticePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::DGNoticePacket, _impl_.notice_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::DGAddBlockCountryIPPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::DGAddBlockCountryIPPacket, _impl_.ip_from_),
  PROTOBUF_FIELD_OFFSET(::network::DGAddBlockCountryIPPacket, _impl_.ip_to_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::DGBlockExceptionPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::DGBlockExceptionPacket, _impl_.cmd_),
  PROTOBUF_FIELD_OFFSET(::network::DGBlockExceptionPacket, _impl_.login_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::DGMyShopPricelistPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::DGMyShopPricelistPacket, _impl_.price_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::DGReloadAdminPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::DGReloadAdminPacket, _impl_.admins_),
  PROTOBUF_FIELD_OFFSET(::network::DGReloadAdminPacket, _impl_.admin_configs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::DGDetailLogPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::DGDetailLogPacket, _impl_.pid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::DGItemAwardInformerPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::DGItemAwardInformerPacket, _impl_.login_),
  PROTOBUF_FIELD_OFFSET(::network::DGItemAwardInformerPacket, _impl_.command_),
  PROTOBUF_FIELD_OFFSET(::network::DGItemAwardInformerPacket, _impl_.vnum_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::DGRespondChannelStatusPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::DGRespondChannelStatusPacket, _impl_.states_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::DGChannelSwitchPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::DGChannelSwitchPacket, _impl_.ip_),
  PROTOBUF_FIELD_OFFSET(::network::DGChannelSwitchPacket, _impl_.port_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::DGSpareItemIDRangePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::DGSpareItemIDRangePacket, _impl_.data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::DGUpdateHorseNamePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::DGUpdateHorseNamePacket, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::network::DGUpdateHorseNamePacket, _impl_.horse_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::DGSpawnMobTimedPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::DGSpawnMobTimedPacket, _impl_.mob_vnum_),
  PROTOBUF_FIELD_OFFSET(::network::DGSpawnMobTimedPacket, _impl_.map_index_),
  PROTOBUF_FIELD_OFFSET(::network::DGSpawnMobTimedPacket, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::network::DGSpawnMobTimedPacket, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::network::DGSpawnMobTimedPacket, _impl_.channel_),
  PROTOBUF_FIELD_OFFSET(::network::DGSpawnMobTimedPacket, _impl_.target_time_),
  PROTOBUF_FIELD_OFFSET(::network::DGSpawnMobTimedPacket, _impl_.despawn_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::DGItemOfflineRestorePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::DGItemOfflineRestorePacket, _impl_.items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::DGOfflineMessagesLoadPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::DGOfflineMessagesLoadPacket, _impl_.pid_),
  PROTOBUF_FIELD_OFFSET(::network::DGOfflineMessagesLoadPacket, _impl_.messages_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::DGItemRefundLoadPacket_RefundItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::DGItemRefundLoadPacket_RefundItem, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::network::DGItemRefundLoadPacket_RefundItem, _impl_.socket_set_),
  PROTOBUF_FIELD_OFFSET(::network::DGItemRefundLoadPacket_RefundItem, _impl_.item_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::DGItemRefundLoadPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::DGItemRefundLoadPacket, _impl_.pid_),
  PROTOBUF_FIELD_OFFSET(::network::DGItemRefundLoadPacket, _impl_.items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::DGWhisperPlayerExistResultPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::DGWhisperPlayerExistResultPacket, _impl_.pid_),
  PROTOBUF_FIELD_OFFSET(::network::DGWhisperPlayerExistResultPacket, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::network::DGWhisperPlayerExistResultPacket, _impl_.target_name_),
  PROTOBUF_FIELD_OFFSET(::network::DGWhisperPlayerExistResultPacket, _impl_.is_exist_),
  PROTOBUF_FIELD_OFFSET(::network::DGWhisperPlayerExistResultPacket, _impl_.is_blocked_),
  PROTOBUF_FIELD_OFFSET(::network::DGWhisperPlayerExistResultPacket, _impl_.return_money_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::DGWhisperPlayerMessageOfflinePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::DGWhisperPlayerMessageOfflinePacket, _impl_.pid_),
  PROTOBUF_FIELD_OFFSET(::network::DGWhisperPlayerMessageOfflinePacket, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::network::DGWhisperPlayerMessageOfflinePacket, _impl_.target_pid_),
  PROTOBUF_FIELD_OFFSET(::network::DGWhisperPlayerMessageOfflinePacket, _impl_.target_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::DGReloadXmasRewardsPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::DGReloadXmasRewardsPacket, _impl_.rewards_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::DGSetAveragePricesPacket_Element, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::DGSetAveragePricesPacket_Element, _impl_.vnum_),
  PROTOBUF_FIELD_OFFSET(::network::DGSetAveragePricesPacket_Element, _impl_.price_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::DGSetAveragePricesPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::DGSetAveragePricesPacket, _impl_.prices_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::DGSkillColorLoadPacket_SkillColor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::DGSkillColorLoadPacket_SkillColor, _impl_.colors_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::DGSkillColorLoadPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::DGSkillColorLoadPacket, _impl_.colors_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::DGEquipmentPageLoadPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::DGEquipmentPageLoadPacket, _impl_.pid_),
  PROTOBUF_FIELD_OFFSET(::network::DGEquipmentPageLoadPacket, _impl_.equipments_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::DGGuildDungeonPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::DGGuildDungeonPacket, _impl_.guild_id_),
  PROTOBUF_FIELD_OFFSET(::network::DGGuildDungeonPacket, _impl_.channel_),
  PROTOBUF_FIELD_OFFSET(::network::DGGuildDungeonPacket, _impl_.map_index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::DGGuildDungeonCDPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::DGGuildDungeonCDPacket, _impl_.guild_id_),
  PROTOBUF_FIELD_OFFSET(::network::DGGuildDungeonCDPacket, _impl_.time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::DGMaintenancePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::DGMaintenancePacket, _impl_.shutdown_timer_),
  PROTOBUF_FIELD_OFFSET(::network::DGMaintenancePacket, _impl_.maintenance_),
  PROTOBUF_FIELD_OFFSET(::network::DGMaintenancePacket, _impl_.maintenance_duration_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::DGWhitelistIPPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::DGWhitelistIPPacket, _impl_.ip_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::DGAuctionDeletePlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::DGAuctionDeletePlayer, _impl_.pid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::DGCreateObjectPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::DGCreateObjectPacket, _impl_.object_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::DGDeleteObjectPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::DGDeleteObjectPacket, _impl_.id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::DGUpdateLandPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::DGUpdateLandPacket, _impl_.land_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::DGMarriageAddPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::DGMarriageAddPacket, _impl_.pid1_),
  PROTOBUF_FIELD_OFFSET(::network::DGMarriageAddPacket, _impl_.pid2_),
  PROTOBUF_FIELD_OFFSET(::network::DGMarriageAddPacket, _impl_.marry_time_),
  PROTOBUF_FIELD_OFFSET(::network::DGMarriageAddPacket, _impl_.name1_),
  PROTOBUF_FIELD_OFFSET(::network::DGMarriageAddPacket, _impl_.name2_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::DGMarriageUpdatePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::DGMarriageUpdatePacket, _impl_.pid1_),
  PROTOBUF_FIELD_OFFSET(::network::DGMarriageUpdatePacket, _impl_.pid2_),
  PROTOBUF_FIELD_OFFSET(::network::DGMarriageUpdatePacket, _impl_.love_point_),
  PROTOBUF_FIELD_OFFSET(::network::DGMarriageUpdatePacket, _impl_.married_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::DGMarriageRemovePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::DGMarriageRemovePacket, _impl_.pid1_),
  PROTOBUF_FIELD_OFFSET(::network::DGMarriageRemovePacket, _impl_.pid2_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::DGWeddingRequestPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::DGWeddingRequestPacket, _impl_.pid1_),
  PROTOBUF_FIELD_OFFSET(::network::DGWeddingRequestPacket, _impl_.pid2_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::DGWeddingReadyPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::DGWeddingReadyPacket, _impl_.pid1_),
  PROTOBUF_FIELD_OFFSET(::network::DGWeddingReadyPacket, _impl_.pid2_),
  PROTOBUF_FIELD_OFFSET(::network::DGWeddingReadyPacket, _impl_.map_index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::DGWeddingStartPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::DGWeddingStartPacket, _impl_.pid1_),
  PROTOBUF_FIELD_OFFSET(::network::DGWeddingStartPacket, _impl_.pid2_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::DGWeddingEndPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::DGWeddingEndPacket, _impl_.pid1_),
  PROTOBUF_FIELD_OFFSET(::network::DGWeddingEndPacket, _impl_.pid2_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::DGBillingRepairPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::DGBillingRepairPacket, _impl_.login_keys_),
  PROTOBUF_FIELD_OFFSET(::network::DGBillingRepairPacket, _impl_.logins_),
  PROTOBUF_FIELD_OFFSET(::network::DGBillingRepairPacket, _impl_.hosts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::DGBillingExpirePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::DGBillingExpirePacket, _impl_.login_),
  PROTOBUF_FIELD_OFFSET(::network::DGBillingExpirePacket, _impl_.bill_type_),
  PROTOBUF_FIELD_OFFSET(::network::DGBillingExpirePacket, _impl_.remain_seconds_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::DGBillingLoginPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::DGBillingLoginPacket, _impl_.login_keys_),
  PROTOBUF_FIELD_OFFSET(::network::DGBillingLoginPacket, _impl_.logins_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::DGBillingCheckPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::DGBillingCheckPacket, _impl_.keys_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::DGGuildLoadPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::DGGuildLoadPacket, _impl_.guild_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::DGGuildSkillUpdatePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::DGGuildSkillUpdatePacket, _impl_.guild_id_),
  PROTOBUF_FIELD_OFFSET(::network::DGGuildSkillUpdatePacket, _impl_.amount_),
  PROTOBUF_FIELD_OFFSET(::network::DGGuildSkillUpdatePacket, _impl_.skill_levels_),
  PROTOBUF_FIELD_OFFSET(::network::DGGuildSkillUpdatePacket, _impl_.skill_point_),
  PROTOBUF_FIELD_OFFSET(::network::DGGuildSkillUpdatePacket, _impl_.save_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::DGGuildExpUpdatePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::DGGuildExpUpdatePacket, _impl_.guild_id_),
  PROTOBUF_FIELD_OFFSET(::network::DGGuildExpUpdatePacket, _impl_.amount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::DGGuildAddMemberPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::DGGuildAddMemberPacket, _impl_.guild_id_),
  PROTOBUF_FIELD_OFFSET(::network::DGGuildAddMemberPacket, _impl_.pid_),
  PROTOBUF_FIELD_OFFSET(::network::DGGuildAddMemberPacket, _impl_.grade_),
  PROTOBUF_FIELD_OFFSET(::network::DGGuildAddMemberPacket, _impl_.is_general_),
  PROTOBUF_FIELD_OFFSET(::network::DGGuildAddMemberPacket, _impl_.job_),
  PROTOBUF_FIELD_OFFSET(::network::DGGuildAddMemberPacket, _impl_.level_),
  PROTOBUF_FIELD_OFFSET(::network::DGGuildAddMemberPacket, _impl_.offer_),
  PROTOBUF_FIELD_OFFSET(::network::DGGuildAddMemberPacket, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::DGGuildRemoveMemberPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::DGGuildRemoveMemberPacket, _impl_.guild_id_),
  PROTOBUF_FIELD_OFFSET(::network::DGGuildRemoveMemberPacket, _impl_.pid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::DGGuildChangeGradePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::DGGuildChangeGradePacket, _impl_.guild_id_),
  PROTOBUF_FIELD_OFFSET(::network::DGGuildChangeGradePacket, _impl_.grade_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::DGGuildChangeMemberDataPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::DGGuildChangeMemberDataPacket, _impl_.guild_id_),
  PROTOBUF_FIELD_OFFSET(::network::DGGuildChangeMemberDataPacket, _impl_.pid_),
  PROTOBUF_FIELD_OFFSET(::network::DGGuildChangeMemberDataPacket, _impl_.offer_),
  PROTOBUF_FIELD_OFFSET(::network::DGGuildChangeMemberDataPacket, _impl_.level_),
  PROTOBUF_FIELD_OFFSET(::network::DGGuildChangeMemberDataPacket, _impl_.grade_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::DGGuildDisbandPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::DGGuildDisbandPacket, _impl_.guild_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::DGGuildLadderPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::DGGuildLadderPacket, _impl_.guild_id_),
  PROTOBUF_FIELD_OFFSET(::network::DGGuildLadderPacket, _impl_.ladder_point_),
  PROTOBUF_FIELD_OFFSET(::network::DGGuildLadderPacket, _impl_.wins_),
  PROTOBUF_FIELD_OFFSET(::network::DGGuildLadderPacket, _impl_.draws_),
  PROTOBUF_FIELD_OFFSET(::network::DGGuildLadderPacket, _impl_.losses_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::DGGuildWarPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::DGGuildWarPacket, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::network::DGGuildWarPacket, _impl_.war_),
  PROTOBUF_FIELD_OFFSET(::network::DGGuildWarPacket, _impl_.guild_from_),
  PROTOBUF_FIELD_OFFSET(::network::DGGuildWarPacket, _impl_.guild_to_),
  PROTOBUF_FIELD_OFFSET(::network::DGGuildWarPacket, _impl_.war_price_),
  PROTOBUF_FIELD_OFFSET(::network::DGGuildWarPacket, _impl_.initial_score_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::DGGuildWarScorePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::DGGuildWarScorePacket, _impl_.guild_gain_point_),
  PROTOBUF_FIELD_OFFSET(::network::DGGuildWarScorePacket, _impl_.guild_opponent_),
  PROTOBUF_FIELD_OFFSET(::network::DGGuildWarScorePacket, _impl_.score_),
  PROTOBUF_FIELD_OFFSET(::network::DGGuildWarScorePacket, _impl_.bet_score_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::DGGuildSkillUsableChangePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::DGGuildSkillUsableChangePacket, _impl_.guild_id_),
  PROTOBUF_FIELD_OFFSET(::network::DGGuildSkillUsableChangePacket, _impl_.skill_vnum_),
  PROTOBUF_FIELD_OFFSET(::network::DGGuildSkillUsableChangePacket, _impl_.usable_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::DGGuildMoneyChangePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::DGGuildMoneyChangePacket, _impl_.guild_id_),
  PROTOBUF_FIELD_OFFSET(::network::DGGuildMoneyChangePacket, _impl_.total_gold_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::DGGuildMoneyWithdrawPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::DGGuildMoneyWithdrawPacket, _impl_.guild_id_),
  PROTOBUF_FIELD_OFFSET(::network::DGGuildMoneyWithdrawPacket, _impl_.change_gold_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::DGGuildWarReserveAddPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::DGGuildWarReserveAddPacket, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::network::DGGuildWarReserveAddPacket, _impl_.guild_from_),
  PROTOBUF_FIELD_OFFSET(::network::DGGuildWarReserveAddPacket, _impl_.guild_to_),
  PROTOBUF_FIELD_OFFSET(::network::DGGuildWarReserveAddPacket, _impl_.time_),
  PROTOBUF_FIELD_OFFSET(::network::DGGuildWarReserveAddPacket, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::network::DGGuildWarReserveAddPacket, _impl_.war_price_),
  PROTOBUF_FIELD_OFFSET(::network::DGGuildWarReserveAddPacket, _impl_.initial_score_),
  PROTOBUF_FIELD_OFFSET(::network::DGGuildWarReserveAddPacket, _impl_.started_),
  PROTOBUF_FIELD_OFFSET(::network::DGGuildWarReserveAddPacket, _impl_.bet_from_),
  PROTOBUF_FIELD_OFFSET(::network::DGGuildWarReserveAddPacket, _impl_.bet_to_),
  PROTOBUF_FIELD_OFFSET(::network::DGGuildWarReserveAddPacket, _impl_.power_from_),
  PROTOBUF_FIELD_OFFSET(::network::DGGuildWarReserveAddPacket, _impl_.power_to_),
  PROTOBUF_FIELD_OFFSET(::network::DGGuildWarReserveAddPacket, _impl_.handicap_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::DGGuildWarReserveDeletePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::DGGuildWarReserveDeletePacket, _impl_.id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::DGGuildWarBetPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::DGGuildWarBetPacket, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::network::DGGuildWarBetPacket, _impl_.login_),
  PROTOBUF_FIELD_OFFSET(::network::DGGuildWarBetPacket, _impl_.gold_),
  PROTOBUF_FIELD_OFFSET(::network::DGGuildWarBetPacket, _impl_.guild_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::DGGuildChangeMasterPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::DGGuildChangeMasterPacket, _impl_.guild_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::DGGuildSafeboxPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::DGGuildSafeboxPacket, _impl_.sub_header_),
  PROTOBUF_FIELD_OFFSET(::network::DGGuildSafeboxPacket, _impl_.guild_id_),
  PROTOBUF_FIELD_OFFSET(::network::DGGuildSafeboxPacket, _impl_.item_),
  PROTOBUF_FIELD_OFFSET(::network::DGGuildSafeboxPacket, _impl_.gold_),
  PROTOBUF_FIELD_OFFSET(::network::DGGuildSafeboxPacket, _impl_.size_),
  PROTOBUF_FIELD_OFFSET(::network::DGGuildSafeboxPacket, _impl_.items_),
  PROTOBUF_FIELD_OFFSET(::network::DGGuildSafeboxPacket, _impl_.added_log_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::DGPartyCreatePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::DGPartyCreatePacket, _impl_.leader_pid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::DGPartyDeletePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::DGPartyDeletePacket, _impl_.leader_pid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::DGPartyAddPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::DGPartyAddPacket, _impl_.leader_pid_),
  PROTOBUF_FIELD_OFFSET(::network::DGPartyAddPacket, _impl_.pid_),
  PROTOBUF_FIELD_OFFSET(::network::DGPartyAddPacket, _impl_.state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::DGPartyRemovePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::DGPartyRemovePacket, _impl_.pid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::DGPartyStateChangePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::DGPartyStateChangePacket, _impl_.leader_pid_),
  PROTOBUF_FIELD_OFFSET(::network::DGPartyStateChangePacket, _impl_.pid_),
  PROTOBUF_FIELD_OFFSET(::network::DGPartyStateChangePacket, _impl_.role_),
  PROTOBUF_FIELD_OFFSET(::network::DGPartyStateChangePacket, _impl_.flag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::DGPartySetMemberLevelPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::DGPartySetMemberLevelPacket, _impl_.leader_pid_),
  PROTOBUF_FIELD_OFFSET(::network::DGPartySetMemberLevelPacket, _impl_.pid_),
  PROTOBUF_FIELD_OFFSET(::network::DGPartySetMemberLevelPacket, _impl_.level_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::network::DGBootPacket)},
  { 35, -1, -1, sizeof(::network::DGMapLocationsPacket)},
  { 42, -1, -1, sizeof(::network::DGLoginSuccessPacket)},
  { 49, -1, -1, sizeof(::network::DGPlayerCreateSuccessPacket)},
  { 57, -1, -1, sizeof(::network::DGPlayerDeleteSuccessPacket)},
  { 64, -1, -1, sizeof(::network::DGPlayerLoadPacket)},
  { 71, -1, -1, sizeof(::network::DGPlayerSkillLoadPacket)},
  { 79, -1, -1, sizeof(::network::DGItemLoadPacket)},
  { 87, -1, -1, sizeof(::network::DGPetLoadPacket)},
  { 94, -1, -1, sizeof(::network::DGQuestLoadPacket)},
  { 102, -1, -1, sizeof(::network::DGAffectLoadPacket)},
  { 110, -1, -1, sizeof(::network::DGSafeboxLoadPacket)},
  { 121, -1, -1, sizeof(::network::DGSafeboxChangeSizePacket)},
  { 128, -1, -1, sizeof(::network::DGSafeboxChangePasswordAnswerPacket)},
  { 135, -1, -1, sizeof(::network::DGEmpireSelectPacket)},
  { 142, -1, -1, sizeof(::network::DGP2PInfoPacket)},
  { 153, -1, -1, sizeof(::network::DGLoginAlreadyPacket)},
  { 160, -1, -1, sizeof(::network::DGTimePacket)},
  { 167, -1, -1, sizeof(::network::DGReloadShopTablePacket)},
  { 174, -1, -1, sizeof(::network::DGReloadMobProtoPacket)},
  { 181, -1, -1, sizeof(::network::DGReloadProtoPacket)},
  { 195, -1, -1, sizeof(::network::DGChangeNamePacket)},
  { 203, -1, -1, sizeof(::network::DGAuthLoginPacket)},
  { 210, -1, -1, sizeof(::network::DGChangeEmpirePrivPacket)},
  { 221, -1, -1, sizeof(::network::DGChangeGuildPrivPacket)},
  { 232, -1, -1, sizeof(::network::DGChangeCharacterPrivPacket)},
  { 242, -1, -1, sizeof(::network::DGMoneyLogPacket)},
  { 251, -1, -1, sizeof(::network::DGSetEventFlagPacket)},
  { 259, -1, -1, sizeof(::network::DGVCardPacket)},
  { 270, -1, -1, sizeof(::network::DGNoticePacket)},
  { 277, -1, -1, sizeof(::network::DGAddBlockCountryIPPacket)},
  { 285, -1, -1, sizeof(::network::DGBlockExceptionPacket)},
  { 293, -1, -1, sizeof(::network::DGMyShopPricelistPacket)},
  { 300, -1, -1, sizeof(::network::DGReloadAdminPacket)},
  { 308, -1, -1, sizeof(::network::DGDetailLogPacket)},
  { 315, -1, -1, sizeof(::network::DGItemAwardInformerPacket)},
  { 324, -1, -1, sizeof(::network::DGRespondChannelStatusPacket)},
  { 331, -1, -1, sizeof(::network::DGChannelSwitchPacket)},
  { 339, -1, -1, sizeof(::network::DGSpareItemIDRangePacket)},
  { 346, -1, -1, sizeof(::network::DGUpdateHorseNamePacket)},
  { 354, -1, -1, sizeof(::network::DGSpawnMobTimedPacket)},
  { 367, -1, -1, sizeof(::network::DGItemOfflineRestorePacket)},
  { 374, -1, -1, sizeof(::network::DGOfflineMessagesLoadPacket)},
  { 382, -1, -1, sizeof(::network::DGItemRefundLoadPacket_RefundItem)},
  { 391, -1, -1, sizeof(::network::DGItemRefundLoadPacket)},
  { 399, -1, -1, sizeof(::network::DGWhisperPlayerExistResultPacket)},
  { 411, -1, -1, sizeof(::network::DGWhisperPlayerMessageOfflinePacket)},
  { 421, -1, -1, sizeof(::network::DGReloadXmasRewardsPacket)},
  { 428, -1, -1, sizeof(::network::DGSetAveragePricesPacket_Element)},
  { 436, -1, -1, sizeof(::network::DGSetAveragePricesPacket)},
  { 443, -1, -1, sizeof(::network::DGSkillColorLoadPacket_SkillColor)},
  { 450, -1, -1, sizeof(::network::DGSkillColorLoadPacket)},
  { 457, -1, -1, sizeof(::network::DGEquipmentPageLoadPacket)},
  { 465, -1, -1, sizeof(::network::DGGuildDungeonPacket)},
  { 474, -1, -1, sizeof(::network::DGGuildDungeonCDPacket)},
  { 482, -1, -1, sizeof(::network::DGMaintenancePacket)},
  { 491, -1, -1, sizeof(::network::DGWhitelistIPPacket)},
  { 498, -1, -1, sizeof(::network::DGAuctionDeletePlayer)},
  { 505, -1, -1, sizeof(::network::DGCreateObjectPacket)},
  { 512, -1, -1, sizeof(::network::DGDeleteObjectPacket)},
  { 519, -1, -1, sizeof(::network::DGUpdateLandPacket)},
  { 526, -1, -1, sizeof(::network::DGMarriageAddPacket)},
  { 537, -1, -1, sizeof(::network::DGMarriageUpdatePacket)},
  { 547, -1, -1, sizeof(::network::DGMarriageRemovePacket)},
  { 555, -1, -1, sizeof(::network::DGWeddingRequestPacket)},
  { 563, -1, -1, sizeof(::network::DGWeddingReadyPacket)},
  { 572, -1, -1, sizeof(::network::DGWeddingStartPacket)},
  { 580, -1, -1, sizeof(::network::DGWeddingEndPacket)},
  { 588, -1, -1, sizeof(::network::DGBillingRepairPacket)},
  { 597, -1, -1, sizeof(::network::DGBillingExpirePacket)},
  { 606, -1, -1, sizeof(::network::DGBillingLoginPacket)},
  { 614, -1, -1, sizeof(::network::DGBillingCheckPacket)},
  { 621, -1, -1, sizeof(::network::DGGuildLoadPacket)},
  { 628, -1, -1, sizeof(::network::DGGuildSkillUpdatePacket)},
  { 639, -1, -1, sizeof(::network::DGGuildExpUpdatePacket)},
  { 647, -1, -1, sizeof(::network::DGGuildAddMemberPacket)},
  { 661, -1, -1, sizeof(::network::DGGuildRemoveMemberPacket)},
  { 669, -1, -1, sizeof(::network::DGGuildChangeGradePacket)},
  { 677, -1, -1, sizeof(::network::DGGuildChangeMemberDataPacket)},
  { 688, -1, -1, sizeof(::network::DGGuildDisbandPacket)},
  { 695, -1, -1, sizeof(::network::DGGuildLadderPacket)},
  { 706, -1, -1, sizeof(::network::DGGuildWarPacket)},
  { 718, -1, -1, sizeof(::network::DGGuildWarScorePacket)},
  { 728, -1, -1, sizeof(::network::DGGuildSkillUsableChangePacket)},
  { 737, -1, -1, sizeof(::network::DGGuildMoneyChangePacket)},
  { 745, -1, -1, sizeof(::network::DGGuildMoneyWithdrawPacket)},
  { 753, -1, -1, sizeof(::network::DGGuildWarReserveAddPacket)},
  { 772, -1, -1, sizeof(::network::DGGuildWarReserveDeletePacket)},
  { 779, -1, -1, sizeof(::network::DGGuildWarBetPacket)},
  { 789, -1, -1, sizeof(::network::DGGuildChangeMasterPacket)},
  { 796, -1, -1, sizeof(::network::DGGuildSafeboxPacket)},
  { 809, -1, -1, sizeof(::network::DGPartyCreatePacket)},
  { 816, -1, -1, sizeof(::network::DGPartyDeletePacket)},
  { 823, -1, -1, sizeof(::network::DGPartyAddPacket)},
  { 832, -1, -1, sizeof(::network::DGPartyRemovePacket)},
  { 839, -1, -1, sizeof(::network::DGPartyStateChangePacket)},
  { 849, -1, -1, sizeof(::network::DGPartySetMemberLevelPacket)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::network::_DGBootPacket_default_instance_._instance,
  &::network::_DGMapLocationsPacket_default_instance_._instance,
  &::network::_DGLoginSuccessPacket_default_instance_._instance,
  &::network::_DGPlayerCreateSuccessPacket_default_instance_._instance,
  &::network::_DGPlayerDeleteSuccessPacket_default_instance_._instance,
  &::network::_DGPlayerLoadPacket_default_instance_._instance,
  &::network::_DGPlayerSkillLoadPacket_default_instance_._instance,
  &::network::_DGItemLoadPacket_default_instance_._instance,
  &::network::_DGPetLoadPacket_default_instance_._instance,
  &::network::_DGQuestLoadPacket_default_instance_._instance,
  &::network::_DGAffectLoadPacket_default_instance_._instance,
  &::network::_DGSafeboxLoadPacket_default_instance_._instance,
  &::network::_DGSafeboxChangeSizePacket_default_instance_._instance,
  &::network::_DGSafeboxChangePasswordAnswerPacket_default_instance_._instance,
  &::network::_DGEmpireSelectPacket_default_instance_._instance,
  &::network::_DGP2PInfoPacket_default_instance_._instance,
  &::network::_DGLoginAlreadyPacket_default_instance_._instance,
  &::network::_DGTimePacket_default_instance_._instance,
  &::network::_DGReloadShopTablePacket_default_instance_._instance,
  &::network::_DGReloadMobProtoPacket_default_instance_._instance,
  &::network::_DGReloadProtoPacket_default_instance_._instance,
  &::network::_DGChangeNamePacket_default_instance_._instance,
  &::network::_DGAuthLoginPacket_default_instance_._instance,
  &::network::_DGChangeEmpirePrivPacket_default_instance_._instance,
  &::network::_DGChangeGuildPrivPacket_default_instance_._instance,
  &::network::_DGChangeCharacterPrivPacket_default_instance_._instance,
  &::network::_DGMoneyLogPacket_default_instance_._instance,
  &::network::_DGSetEventFlagPacket_default_instance_._instance,
  &::network::_DGVCardPacket_default_instance_._instance,
  &::network::_DGNoticePacket_default_instance_._instance,
  &::network::_DGAddBlockCountryIPPacket_default_instance_._instance,
  &::network::_DGBlockExceptionPacket_default_instance_._instance,
  &::network::_DGMyShopPricelistPacket_default_instance_._instance,
  &::network::_DGReloadAdminPacket_default_instance_._instance,
  &::network::_DGDetailLogPacket_default_instance_._instance,
  &::network::_DGItemAwardInformerPacket_default_instance_._instance,
  &::network::_DGRespondChannelStatusPacket_default_instance_._instance,
  &::network::_DGChannelSwitchPacket_default_instance_._instance,
  &::network::_DGSpareItemIDRangePacket_default_instance_._instance,
  &::network::_DGUpdateHorseNamePacket_default_instance_._instance,
  &::network::_DGSpawnMobTimedPacket_default_instance_._instance,
  &::network::_DGItemOfflineRestorePacket_default_instance_._instance,
  &::network::_DGOfflineMessagesLoadPacket_default_instance_._instance,
  &::network::_DGItemRefundLoadPacket_RefundItem_default_instance_._instance,
  &::network::_DGItemRefundLoadPacket_default_instance_._instance,
  &::network::_DGWhisperPlayerExistResultPacket_default_instance_._instance,
  &::network::_DGWhisperPlayerMessageOfflinePacket_default_instance_._instance,
  &::network::_DGReloadXmasRewardsPacket_default_instance_._instance,
  &::network::_DGSetAveragePricesPacket_Element_default_instance_._instance,
  &::network::_DGSetAveragePricesPacket_default_instance_._instance,
  &::network::_DGSkillColorLoadPacket_SkillColor_default_instance_._instance,
  &::network::_DGSkillColorLoadPacket_default_instance_._instance,
  &::network::_DGEquipmentPageLoadPacket_default_instance_._instance,
  &::network::_DGGuildDungeonPacket_default_instance_._instance,
  &::network::_DGGuildDungeonCDPacket_default_instance_._instance,
  &::network::_DGMaintenancePacket_default_instance_._instance,
  &::network::_DGWhitelistIPPacket_default_instance_._instance,
  &::network::_DGAuctionDeletePlayer_default_instance_._instance,
  &::network::_DGCreateObjectPacket_default_instance_._instance,
  &::network::_DGDeleteObjectPacket_default_instance_._instance,
  &::network::_DGUpdateLandPacket_default_instance_._instance,
  &::network::_DGMarriageAddPacket_default_instance_._instance,
  &::network::_DGMarriageUpdatePacket_default_instance_._instance,
  &::network::_DGMarriageRemovePacket_default_instance_._instance,
  &::network::_DGWeddingRequestPacket_default_instance_._instance,
  &::network::_DGWeddingReadyPacket_default_instance_._instance,
  &::network::_DGWeddingStartPacket_default_instance_._instance,
  &::network::_DGWeddingEndPacket_default_instance_._instance,
  &::network::_DGBillingRepairPacket_default_instance_._instance,
  &::network::_DGBillingExpirePacket_default_instance_._instance,
  &::network::_DGBillingLoginPacket_default_instance_._instance,
  &::network::_DGBillingCheckPacket_default_instance_._instance,
  &::network::_DGGuildLoadPacket_default_instance_._instance,
  &::network::_DGGuildSkillUpdatePacket_default_instance_._instance,
  &::network::_DGGuildExpUpdatePacket_default_instance_._instance,
  &::network::_DGGuildAddMemberPacket_default_instance_._instance,
  &::network::_DGGuildRemoveMemberPacket_default_instance_._instance,
  &::network::_DGGuildChangeGradePacket_default_instance_._instance,
  &::network::_DGGuildChangeMemberDataPacket_default_instance_._instance,
  &::network::_DGGuildDisbandPacket_default_instance_._instance,
  &::network::_DGGuildLadderPacket_default_instance_._instance,
  &::network::_DGGuildWarPacket_default_instance_._instance,
  &::network::_DGGuildWarScorePacket_default_instance_._instance,
  &::network::_DGGuildSkillUsableChangePacket_default_instance_._instance,
  &::network::_DGGuildMoneyChangePacket_default_instance_._instance,
  &::network::_DGGuildMoneyWithdrawPacket_default_instance_._instance,
  &::network::_DGGuildWarReserveAddPacket_default_instance_._instance,
  &::network::_DGGuildWarReserveDeletePacket_default_instance_._instance,
  &::network::_DGGuildWarBetPacket_default_instance_._instance,
  &::network::_DGGuildChangeMasterPacket_default_instance_._instance,
  &::network::_DGGuildSafeboxPacket_default_instance_._instance,
  &::network::_DGPartyCreatePacket_default_instance_._instance,
  &::network::_DGPartyDeletePacket_default_instance_._instance,
  &::network::_DGPartyAddPacket_default_instance_._instance,
  &::network::_DGPartyRemovePacket_default_instance_._instance,
  &::network::_DGPartyStateChangePacket_default_instance_._instance,
  &::network::_DGPartySetMemberLevelPacket_default_instance_._instance,
};

const char descriptor_table_protodef_dg_5fpackets_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020dg_packets.proto\022\007network\032\ndata.proto\032"
  "\017data_item.proto\032\021data_player.proto\032\016dat"
  "a_pet.proto\"\215\n\n\014DGBootPacket\022 \n\004mobs\030\001 \003"
  "(\0132\022.network.TMobTable\022\"\n\005items\030\002 \003(\0132\023."
  "network.TItemTable\022\"\n\005shops\030\003 \003(\0132\023.netw"
  "ork.TShopTable\022$\n\006skills\030\004 \003(\0132\024.network"
  ".TSkillTable\022&\n\007refines\030\005 \003(\0132\025.network."
  "TRefineTable\022&\n\005attrs\030\006 \003(\0132\027.network.TI"
  "temAttrTable\022+\n\nrare_attrs\030\007 \003(\0132\027.netwo"
  "rk.TItemAttrTable\022.\n\rcostume_attrs\030\010 \003(\013"
  "2\027.network.TItemAttrTable\022%\n\005lands\030\t \003(\013"
  "2\026.network.TBuildingLand\0224\n\robject_proto"
  "s\030\n \003(\0132\035.network.TBuildingObjectProto\022)"
  "\n\007objects\030\013 \003(\0132\030.network.TBuildingObjec"
  "t\0226\n\017guild_safeboxes\030\014 \003(\0132\035.network.TGu"
  "ildSafeboxInitial\0223\n\016horse_upgrades\030\r \003("
  "\0132\033.network.THorseUpgradeProto\022-\n\nhorse_"
  "boni\030\016 \003(\0132\031.network.THorseBonusProto\022*\n"
  "\ngaya_shops\030\020 \003(\0132\026.network.TGayaShopDat"
  "a\022*\n\tattrtrees\030\021 \003(\0132\027.network.TAttrtree"
  "Proto\022\'\n\005runes\030\022 \003(\0132\030.network.TRuneProt"
  "oTable\0222\n\013rune_points\030\023 \003(\0132\035.network.TR"
  "unePointProtoTable\022+\n\014xmas_rewards\030\024 \003(\013"
  "2\025.network.TXmasRewards\022-\n\013soul_protos\030\025"
  " \003(\0132\030.network.TSoulProtoTable\0221\n\ritem_i"
  "d_range\030\026 \001(\0132\032.network.TItemIDRangeTabl"
  "e\0227\n\023item_id_range_spare\030\027 \001(\0132\032.network"
  ".TItemIDRangeTable\022#\n\006admins\030\030 \003(\0132\023.net"
  "work.TAdminInfo\022\025\n\radmin_configs\030\031 \003(\r\022\024"
  "\n\014current_time\030\032 \001(\r\0223\n\npet_skills\030\033 \003(\013"
  "2\037.network.TPetAdvancedSkillProto\0225\n\013pet"
  "_evolves\030\034 \003(\0132 .network.TPetAdvancedEvo"
  "lveProto\0221\n\tpet_attrs\030\035 \003(\0132\036.network.TP"
  "etAdvancedAttrProto\022.\n\016crystal_protos\030\036 "
  "\003(\0132\026.network.TCrystalProto\";\n\024DGMapLoca"
  "tionsPacket\022#\n\004maps\030\001 \003(\0132\025.network.TMap"
  "Location\"D\n\024DGLoginSuccessPacket\022,\n\014acco"
  "unt_info\030\001 \001(\0132\026.network.TAccountTable\"\\"
  "\n\033DGPlayerCreateSuccessPacket\022\025\n\raccount"
  "_index\030\001 \001(\r\022&\n\006player\030\002 \001(\0132\026.network.T"
  "SimplePlayer\"4\n\033DGPlayerDeleteSuccessPac"
  "ket\022\025\n\raccount_index\030\001 \001(\r\"3\n\022DGPlayerLo"
  "adPacket\022\035\n\006player\030\001 \001(\0132\r.TPlayerTable\""
  "E\n\027DGPlayerSkillLoadPacket\022\013\n\003pid\030\001 \001(\r\022"
  "\035\n\006skills\030\002 \003(\0132\r.TPlayerSkill\"B\n\020DGItem"
  "LoadPacket\022\013\n\003pid\030\001 \001(\r\022!\n\005items\030\002 \003(\0132\022"
  ".network.TItemData\";\n\017DGPetLoadPacket\022(\n"
  "\004pets\030\001 \003(\0132\032.network.TPetAdvancedTable\""
  ">\n\021DGQuestLoadPacket\022\013\n\003pid\030\001 \001(\r\022\034\n\006que"
  "sts\030\002 \003(\0132\014.TQuestTable\"I\n\022DGAffectLoadP"
  "acket\022\013\n\003pid\030\001 \001(\r\022&\n\007affects\030\002 \003(\0132\025.TP"
  "acketAffectElement\"y\n\023DGSafeboxLoadPacke"
  "t\022\022\n\naccount_id\030\001 \001(\r\022\014\n\004size\030\002 \001(\r\022\014\n\004g"
  "old\030\003 \001(\003\022\017\n\007is_mall\030\004 \001(\010\022!\n\005items\030\005 \003("
  "\0132\022.network.TItemData\")\n\031DGSafeboxChange"
  "SizePacket\022\014\n\004size\030\001 \001(\r\"3\n#DGSafeboxCha"
  "ngePasswordAnswerPacket\022\014\n\004flag\030\001 \001(\010\"&\n"
  "\024DGEmpireSelectPacket\022\016\n\006empire\030\001 \001(\r\"k\n"
  "\017DGP2PInfoPacket\022\014\n\004host\030\001 \001(\014\022\014\n\004port\030\002"
  " \001(\r\022\023\n\013listen_port\030\003 \001(\r\022\017\n\007channel\030\004 \001"
  "(\r\022\026\n\016processor_core\030\005 \001(\010\"%\n\024DGLoginAlr"
  "eadyPacket\022\r\n\005login\030\001 \001(\014\"\034\n\014DGTimePacke"
  "t\022\014\n\004time\030\001 \001(\r\"=\n\027DGReloadShopTablePack"
  "et\022\"\n\005shops\030\001 \003(\0132\023.network.TShopTable\":"
  "\n\026DGReloadMobProtoPacket\022 \n\004mobs\030\001 \003(\0132\022"
  ".network.TMobTable\"\363\002\n\023DGReloadProtoPack"
  "et\022$\n\006skills\030\001 \003(\0132\024.network.TSkillTable"
  "\022\"\n\005items\030\002 \003(\0132\023.network.TItemTable\022 \n\004"
  "mobs\030\003 \003(\0132\022.network.TMobTable\022\"\n\005shops\030"
  "\004 \003(\0132\023.network.TShopTable\022-\n\013soul_proto"
  "s\030\005 \003(\0132\030.network.TSoulProtoTable\0223\n\npet"
  "_skills\030\006 \003(\0132\037.network.TPetAdvancedSkil"
  "lProto\0225\n\013pet_evolves\030\007 \003(\0132 .network.TP"
  "etAdvancedEvolveProto\0221\n\tpet_attrs\030\010 \003(\013"
  "2\036.network.TPetAdvancedAttrProto\"/\n\022DGCh"
  "angeNamePacket\022\013\n\003pid\030\001 \001(\r\022\014\n\004name\030\002 \001("
  "\014\"#\n\021DGAuthLoginPacket\022\016\n\006result\030\001 \001(\010\"j"
  "\n\030DGChangeEmpirePrivPacket\022\014\n\004type\030\001 \001(\r"
  "\022\r\n\005value\030\002 \001(\005\022\016\n\006empire\030\003 \001(\r\022\013\n\003log\030\004"
  " \001(\010\022\024\n\014end_time_sec\030\005 \001(\r\"k\n\027DGChangeGu"
  "ildPrivPacket\022\014\n\004type\030\001 \001(\r\022\r\n\005value\030\002 \001"
  "(\005\022\020\n\010guild_id\030\003 \001(\r\022\013\n\003log\030\004 \001(\010\022\024\n\014end"
  "_time_sec\030\005 \001(\r\"T\n\033DGChangeCharacterPriv"
  "Packet\022\014\n\004type\030\001 \001(\r\022\r\n\005value\030\002 \001(\005\022\013\n\003p"
  "id\030\003 \001(\r\022\013\n\003log\030\004 \001(\010\"<\n\020DGMoneyLogPacke"
  "t\022\014\n\004type\030\001 \001(\r\022\014\n\004vnum\030\002 \001(\r\022\014\n\004gold\030\003 "
  "\001(\004\"8\n\024DGSetEventFlagPacket\022\021\n\tflag_name"
  "\030\001 \001(\014\022\r\n\005value\030\002 \001(\005\"u\n\rDGVCardPacket\022\n"
  "\n\002id\030\001 \001(\r\022\026\n\016sell_character\030\002 \001(\014\022\024\n\014se"
  "ll_account\030\003 \001(\014\022\025\n\rbuy_character\030\004 \001(\014\022"
  "\023\n\013buy_account\030\005 \001(\014\" \n\016DGNoticePacket\022\016"
  "\n\006notice\030\001 \001(\014\";\n\031DGAddBlockCountryIPPac"
  "ket\022\017\n\007ip_from\030\001 \001(\r\022\r\n\005ip_to\030\002 \001(\r\"4\n\026D"
  "GBlockExceptionPacket\022\013\n\003cmd\030\001 \001(\r\022\r\n\005lo"
  "gin\030\002 \001(\014\"F\n\027DGMyShopPricelistPacket\022+\n\n"
  "price_info\030\001 \003(\0132\027.network.TItemPriceInf"
  "o\"Q\n\023DGReloadAdminPacket\022#\n\006admins\030\001 \003(\013"
  "2\023.network.TAdminInfo\022\025\n\radmin_configs\030\002"
  " \003(\r\" \n\021DGDetailLogPacket\022\013\n\003pid\030\001 \001(\r\"I"
  "\n\031DGItemAwardInformerPacket\022\r\n\005login\030\001 \001"
  "(\014\022\017\n\007command\030\002 \001(\014\022\014\n\004vnum\030\003 \001(\r\"G\n\034DGR"
  "espondChannelStatusPacket\022\'\n\006states\030\001 \003("
  "\0132\027.network.TChannelStatus\"1\n\025DGChannelS"
  "witchPacket\022\n\n\002ip\030\001 \001(\014\022\014\n\004port\030\002 \001(\r\"D\n"
  "\030DGSpareItemIDRangePacket\022(\n\004data\030\001 \001(\0132"
  "\032.network.TItemIDRangeTable\"@\n\027DGUpdateH"
  "orseNamePacket\022\021\n\tplayer_id\030\001 \001(\r\022\022\n\nhor"
  "se_name\030\002 \001(\014\"\216\001\n\025DGSpawnMobTimedPacket\022"
  "\020\n\010mob_vnum\030\001 \001(\r\022\021\n\tmap_index\030\002 \001(\r\022\t\n\001"
  "x\030\003 \001(\005\022\t\n\001y\030\004 \001(\005\022\017\n\007channel\030\005 \001(\r\022\023\n\013t"
  "arget_time\030\006 \001(\005\022\024\n\014despawn_time\030\007 \001(\005\"\?"
  "\n\032DGItemOfflineRestorePacket\022!\n\005items\030\001 "
  "\003(\0132\022.network.TItemData\"V\n\033DGOfflineMess"
  "agesLoadPacket\022\013\n\003pid\030\001 \001(\r\022*\n\010messages\030"
  "\002 \003(\0132\030.network.TOfflineMessage\"\260\001\n\026DGIt"
  "emRefundLoadPacket\022\013\n\003pid\030\001 \001(\r\0229\n\005items"
  "\030\002 \003(\0132*.network.DGItemRefundLoadPacket."
  "RefundItem\032N\n\nRefundItem\022\n\n\002id\030\001 \001(\r\022\022\n\n"
  "socket_set\030\002 \001(\010\022 \n\004item\030\003 \001(\0132\022.network"
  ".TItemData\"\221\001\n DGWhisperPlayerExistResul"
  "tPacket\022\013\n\003pid\030\001 \001(\r\022\017\n\007message\030\002 \001(\014\022\023\n"
  "\013target_name\030\003 \001(\014\022\020\n\010is_exist\030\004 \001(\010\022\022\n\n"
  "is_blocked\030\005 \001(\010\022\024\n\014return_money\030\006 \001(\010\"l"
  "\n#DGWhisperPlayerMessageOfflinePacket\022\013\n"
  "\003pid\030\001 \001(\r\022\017\n\007message\030\002 \001(\014\022\022\n\ntarget_pi"
  "d\030\003 \001(\r\022\023\n\013target_name\030\004 \001(\014\"C\n\031DGReload"
  "XmasRewardsPacket\022&\n\007rewards\030\001 \003(\0132\025.net"
  "work.TXmasRewards\"}\n\030DGSetAveragePricesP"
  "acket\0229\n\006prices\030\001 \003(\0132).network.DGSetAve"
  "ragePricesPacket.Element\032&\n\007Element\022\014\n\004v"
  "num\030\001 \001(\r\022\r\n\005price\030\002 \001(\004\"r\n\026DGSkillColor"
  "LoadPacket\022:\n\006colors\030\001 \003(\0132*.network.DGS"
  "killColorLoadPacket.SkillColor\032\034\n\nSkillC"
  "olor\022\016\n\006colors\030\001 \003(\r\"]\n\031DGEquipmentPageL"
  "oadPacket\022\013\n\003pid\030\001 \001(\r\0223\n\nequipments\030\002 \003"
  "(\0132\037.network.TEquipmentChangerTable\"L\n\024D"
  "GGuildDungeonPacket\022\020\n\010guild_id\030\001 \001(\r\022\017\n"
  "\007channel\030\002 \001(\r\022\021\n\tmap_index\030\003 \001(\r\"8\n\026DGG"
  "uildDungeonCDPacket\022\020\n\010guild_id\030\001 \001(\r\022\014\n"
  "\004time\030\002 \001(\r\"`\n\023DGMaintenancePacket\022\026\n\016sh"
  "utdown_timer\030\001 \001(\005\022\023\n\013maintenance\030\002 \001(\010\022"
  "\034\n\024maintenance_duration\030\003 \001(\005\"!\n\023DGWhite"
  "listIPPacket\022\n\n\002ip\030\001 \001(\t\"$\n\025DGAuctionDel"
  "etePlayer\022\013\n\003pid\030\001 \001(\r\"@\n\024DGCreateObject"
  "Packet\022(\n\006object\030\001 \001(\0132\030.network.TBuildi"
  "ngObject\"\"\n\024DGDeleteObjectPacket\022\n\n\002id\030\001"
  " \001(\r\":\n\022DGUpdateLandPacket\022$\n\004land\030\001 \001(\013"
  "2\026.network.TBuildingLand\"c\n\023DGMarriageAd"
  "dPacket\022\014\n\004pid1\030\001 \001(\r\022\014\n\004pid2\030\002 \001(\r\022\022\n\nm"
  "arry_time\030\003 \001(\r\022\r\n\005name1\030\004 \001(\014\022\r\n\005name2\030"
  "\005 \001(\014\"Y\n\026DGMarriageUpdatePacket\022\014\n\004pid1\030"
  "\001 \001(\r\022\014\n\004pid2\030\002 \001(\r\022\022\n\nlove_point\030\003 \001(\005\022"
  "\017\n\007married\030\004 \001(\010\"4\n\026DGMarriageRemovePack"
  "et\022\014\n\004pid1\030\001 \001(\r\022\014\n\004pid2\030\002 \001(\r\"4\n\026DGWedd"
  "ingRequestPacket\022\014\n\004pid1\030\001 \001(\r\022\014\n\004pid2\030\002"
  " \001(\r\"E\n\024DGWeddingReadyPacket\022\014\n\004pid1\030\001 \001"
  "(\r\022\014\n\004pid2\030\002 \001(\r\022\021\n\tmap_index\030\003 \001(\r\"2\n\024D"
  "GWeddingStartPacket\022\014\n\004pid1\030\001 \001(\r\022\014\n\004pid"
  "2\030\002 \001(\r\"0\n\022DGWeddingEndPacket\022\014\n\004pid1\030\001 "
  "\001(\r\022\014\n\004pid2\030\002 \001(\r\"J\n\025DGBillingRepairPack"
  "et\022\022\n\nlogin_keys\030\001 \003(\r\022\016\n\006logins\030\002 \003(\014\022\r"
  "\n\005hosts\030\003 \003(\014\"Q\n\025DGBillingExpirePacket\022\r"
  "\n\005login\030\001 \001(\014\022\021\n\tbill_type\030\002 \001(\r\022\026\n\016rema"
  "in_seconds\030\003 \001(\r\":\n\024DGBillingLoginPacket"
  "\022\022\n\nlogin_keys\030\001 \003(\r\022\016\n\006logins\030\002 \003(\r\"$\n\024"
  "DGBillingCheckPacket\022\014\n\004keys\030\001 \003(\r\"%\n\021DG"
  "GuildLoadPacket\022\020\n\010guild_id\030\001 \001(\r\"u\n\030DGG"
  "uildSkillUpdatePacket\022\020\n\010guild_id\030\001 \001(\r\022"
  "\016\n\006amount\030\002 \001(\005\022\024\n\014skill_levels\030\003 \003(\r\022\023\n"
  "\013skill_point\030\004 \001(\r\022\014\n\004save\030\005 \001(\r\":\n\026DGGu"
  "ildExpUpdatePacket\022\020\n\010guild_id\030\001 \001(\r\022\016\n\006"
  "amount\030\002 \001(\005\"\223\001\n\026DGGuildAddMemberPacket\022"
  "\020\n\010guild_id\030\001 \001(\r\022\013\n\003pid\030\002 \001(\r\022\r\n\005grade\030"
  "\003 \001(\r\022\022\n\nis_general\030\004 \001(\010\022\013\n\003job\030\005 \001(\r\022\r"
  "\n\005level\030\006 \001(\r\022\r\n\005offer\030\007 \001(\r\022\014\n\004name\030\010 \001"
  "(\014\":\n\031DGGuildRemoveMemberPacket\022\020\n\010guild"
  "_id\030\001 \001(\r\022\013\n\003pid\030\002 \001(\r\";\n\030DGGuildChangeG"
  "radePacket\022\020\n\010guild_id\030\001 \001(\r\022\r\n\005grade\030\002 "
  "\001(\r\"k\n\035DGGuildChangeMemberDataPacket\022\020\n\010"
  "guild_id\030\001 \001(\r\022\013\n\003pid\030\002 \001(\r\022\r\n\005offer\030\003 \001"
  "(\r\022\r\n\005level\030\004 \001(\r\022\r\n\005grade\030\005 \001(\r\"(\n\024DGGu"
  "ildDisbandPacket\022\020\n\010guild_id\030\001 \001(\r\"j\n\023DG"
  "GuildLadderPacket\022\020\n\010guild_id\030\001 \001(\r\022\024\n\014l"
  "adder_point\030\002 \001(\005\022\014\n\004wins\030\003 \003(\005\022\r\n\005draws"
  "\030\004 \003(\005\022\016\n\006losses\030\005 \003(\005\"}\n\020DGGuildWarPack"
  "et\022\014\n\004type\030\001 \001(\r\022\013\n\003war\030\002 \001(\r\022\022\n\nguild_f"
  "rom\030\003 \001(\r\022\020\n\010guild_to\030\004 \001(\r\022\021\n\twar_price"
  "\030\005 \001(\005\022\025\n\rinitial_score\030\006 \001(\005\"k\n\025DGGuild"
  "WarScorePacket\022\030\n\020guild_gain_point\030\001 \001(\r"
  "\022\026\n\016guild_opponent\030\002 \001(\r\022\r\n\005score\030\003 \001(\005\022"
  "\021\n\tbet_score\030\004 \001(\005\"V\n\036DGGuildSkillUsable"
  "ChangePacket\022\020\n\010guild_id\030\001 \001(\r\022\022\n\nskill_"
  "vnum\030\002 \001(\r\022\016\n\006usable\030\003 \001(\010\"@\n\030DGGuildMon"
  "eyChangePacket\022\020\n\010guild_id\030\001 \001(\r\022\022\n\ntota"
  "l_gold\030\002 \001(\005\"C\n\032DGGuildMoneyWithdrawPack"
  "et\022\020\n\010guild_id\030\001 \001(\r\022\023\n\013change_gold\030\002 \001("
  "\005\"\377\001\n\032DGGuildWarReserveAddPacket\022\n\n\002id\030\001"
  " \001(\r\022\022\n\nguild_from\030\002 \001(\r\022\020\n\010guild_to\030\003 \001"
  "(\r\022\014\n\004time\030\004 \001(\r\022\014\n\004type\030\005 \001(\r\022\021\n\twar_pr"
  "ice\030\006 \001(\005\022\025\n\rinitial_score\030\007 \001(\005\022\017\n\007star"
  "ted\030\010 \001(\010\022\020\n\010bet_from\030\t \001(\r\022\016\n\006bet_to\030\n "
  "\001(\r\022\022\n\npower_from\030\013 \001(\005\022\020\n\010power_to\030\014 \001("
  "\005\022\020\n\010handicap\030\r \001(\005\"+\n\035DGGuildWarReserve"
  "DeletePacket\022\n\n\002id\030\001 \001(\r\"P\n\023DGGuildWarBe"
  "tPacket\022\n\n\002id\030\001 \001(\r\022\r\n\005login\030\002 \001(\014\022\014\n\004go"
  "ld\030\003 \001(\r\022\020\n\010guild_id\030\004 \001(\r\"-\n\031DGGuildCha"
  "ngeMasterPacket\022\020\n\010guild_id\030\001 \001(\r\"\320\001\n\024DG"
  "GuildSafeboxPacket\022\022\n\nsub_header\030\001 \001(\r\022\020"
  "\n\010guild_id\030\002 \001(\r\022 \n\004item\030\003 \001(\0132\022.network"
  ".TItemData\022\014\n\004gold\030\004 \001(\004\022\014\n\004size\030\005 \001(\r\022!"
  "\n\005items\030\006 \003(\0132\022.network.TItemData\0221\n\tadd"
  "ed_log\030\007 \001(\0132\036.network.TGuildSafeboxLogT"
  "able\")\n\023DGPartyCreatePacket\022\022\n\nleader_pi"
  "d\030\001 \001(\r\")\n\023DGPartyDeletePacket\022\022\n\nleader"
  "_pid\030\001 \001(\r\"B\n\020DGPartyAddPacket\022\022\n\nleader"
  "_pid\030\001 \001(\r\022\013\n\003pid\030\002 \001(\r\022\r\n\005state\030\003 \001(\r\"\""
  "\n\023DGPartyRemovePacket\022\013\n\003pid\030\001 \001(\r\"W\n\030DG"
  "PartyStateChangePacket\022\022\n\nleader_pid\030\001 \001"
  "(\r\022\013\n\003pid\030\002 \001(\r\022\014\n\004role\030\003 \001(\r\022\014\n\004flag\030\004 "
  "\001(\010\"M\n\033DGPartySetMemberLevelPacket\022\022\n\nle"
  "ader_pid\030\001 \001(\r\022\013\n\003pid\030\002 \001(\r\022\r\n\005level\030\003 \001"
  "(\rb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_dg_5fpackets_2eproto_deps[4] = {
  &::descriptor_table_data_2eproto,
  &::descriptor_table_data_5fitem_2eproto,
  &::descriptor_table_data_5fpet_2eproto,
  &::descriptor_table_data_5fplayer_2eproto,
};
static ::_pbi::once_flag descriptor_table_dg_5fpackets_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_dg_5fpackets_2eproto = {
    false, false, 8850, descriptor_table_protodef_dg_5fpackets_2eproto,
    "dg_packets.proto",
    &descriptor_table_dg_5fpackets_2eproto_once, descriptor_table_dg_5fpackets_2eproto_deps, 4, 97,
    schemas, file_default_instances, TableStruct_dg_5fpackets_2eproto::offsets,
    file_level_metadata_dg_5fpackets_2eproto, file_level_enum_descriptors_dg_5fpackets_2eproto,
    file_level_service_descriptors_dg_5fpackets_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_dg_5fpackets_2eproto_getter() {
  return &descriptor_table_dg_5fpackets_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_dg_5fpackets_2eproto(&descriptor_table_dg_5fpackets_2eproto);
namespace network {

// ===================================================================

class DGBootPacket::_Internal {
 public:
  static const ::network::TItemIDRangeTable& item_id_range(const DGBootPacket* msg);
  static const ::network::TItemIDRangeTable& item_id_range_spare(const DGBootPacket* msg);
};

const ::network::TItemIDRangeTable&
DGBootPacket::_Internal::item_id_range(const DGBootPacket* msg) {
  return *msg->_impl_.item_id_range_;
}
const ::network::TItemIDRangeTable&
DGBootPacket::_Internal::item_id_range_spare(const DGBootPacket* msg) {
  return *msg->_impl_.item_id_range_spare_;
}
void DGBootPacket::clear_mobs() {
  _impl_.mobs_.Clear();
}
void DGBootPacket::clear_items() {
  _impl_.items_.Clear();
}
void DGBootPacket::clear_shops() {
  _impl_.shops_.Clear();
}
void DGBootPacket::clear_skills() {
  _impl_.skills_.Clear();
}
void DGBootPacket::clear_refines() {
  _impl_.refines_.Clear();
}
void DGBootPacket::clear_attrs() {
  _impl_.attrs_.Clear();
}
void DGBootPacket::clear_rare_attrs() {
  _impl_.rare_attrs_.Clear();
}
void DGBootPacket::clear_costume_attrs() {
  _impl_.costume_attrs_.Clear();
}
void DGBootPacket::clear_lands() {
  _impl_.lands_.Clear();
}
void DGBootPacket::clear_object_protos() {
  _impl_.object_protos_.Clear();
}
void DGBootPacket::clear_objects() {
  _impl_.objects_.Clear();
}
void DGBootPacket::clear_guild_safeboxes() {
  _impl_.guild_safeboxes_.Clear();
}
void DGBootPacket::clear_horse_upgrades() {
  _impl_.horse_upgrades_.Clear();
}
void DGBootPacket::clear_horse_boni() {
  _impl_.horse_boni_.Clear();
}
void DGBootPacket::clear_gaya_shops() {
  _impl_.gaya_shops_.Clear();
}
void DGBootPacket::clear_attrtrees() {
  _impl_.attrtrees_.Clear();
}
void DGBootPacket::clear_runes() {
  _impl_.runes_.Clear();
}
void DGBootPacket::clear_rune_points() {
  _impl_.rune_points_.Clear();
}
void DGBootPacket::clear_xmas_rewards() {
  _impl_.xmas_rewards_.Clear();
}
void DGBootPacket::clear_soul_protos() {
  _impl_.soul_protos_.Clear();
}
void DGBootPacket::clear_item_id_range() {
  if (GetArenaForAllocation() == nullptr && _impl_.item_id_range_ != nullptr) {
    delete _impl_.item_id_range_;
  }
  _impl_.item_id_range_ = nullptr;
}
void DGBootPacket::clear_item_id_range_spare() {
  if (GetArenaForAllocation() == nullptr && _impl_.item_id_range_spare_ != nullptr) {
    delete _impl_.item_id_range_spare_;
  }
  _impl_.item_id_range_spare_ = nullptr;
}
void DGBootPacket::clear_admins() {
  _impl_.admins_.Clear();
}
void DGBootPacket::clear_pet_skills() {
  _impl_.pet_skills_.Clear();
}
void DGBootPacket::clear_pet_evolves() {
  _impl_.pet_evolves_.Clear();
}
void DGBootPacket::clear_pet_attrs() {
  _impl_.pet_attrs_.Clear();
}
void DGBootPacket::clear_crystal_protos() {
  _impl_.crystal_protos_.Clear();
}
DGBootPacket::DGBootPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.DGBootPacket)
}
DGBootPacket::DGBootPacket(const DGBootPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DGBootPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.mobs_){from._impl_.mobs_}
    , decltype(_impl_.items_){from._impl_.items_}
    , decltype(_impl_.shops_){from._impl_.shops_}
    , decltype(_impl_.skills_){from._impl_.skills_}
    , decltype(_impl_.refines_){from._impl_.refines_}
    , decltype(_impl_.attrs_){from._impl_.attrs_}
    , decltype(_impl_.rare_attrs_){from._impl_.rare_attrs_}
    , decltype(_impl_.costume_attrs_){from._impl_.costume_attrs_}
    , decltype(_impl_.lands_){from._impl_.lands_}
    , decltype(_impl_.object_protos_){from._impl_.object_protos_}
    , decltype(_impl_.objects_){from._impl_.objects_}
    , decltype(_impl_.guild_safeboxes_){from._impl_.guild_safeboxes_}
    , decltype(_impl_.horse_upgrades_){from._impl_.horse_upgrades_}
    , decltype(_impl_.horse_boni_){from._impl_.horse_boni_}
    , decltype(_impl_.gaya_shops_){from._impl_.gaya_shops_}
    , decltype(_impl_.attrtrees_){from._impl_.attrtrees_}
    , decltype(_impl_.runes_){from._impl_.runes_}
    , decltype(_impl_.rune_points_){from._impl_.rune_points_}
    , decltype(_impl_.xmas_rewards_){from._impl_.xmas_rewards_}
    , decltype(_impl_.soul_protos_){from._impl_.soul_protos_}
    , decltype(_impl_.admins_){from._impl_.admins_}
    , decltype(_impl_.admin_configs_){from._impl_.admin_configs_}
    , /*decltype(_impl_._admin_configs_cached_byte_size_)*/{0}
    , decltype(_impl_.pet_skills_){from._impl_.pet_skills_}
    , decltype(_impl_.pet_evolves_){from._impl_.pet_evolves_}
    , decltype(_impl_.pet_attrs_){from._impl_.pet_attrs_}
    , decltype(_impl_.crystal_protos_){from._impl_.crystal_protos_}
    , decltype(_impl_.item_id_range_){nullptr}
    , decltype(_impl_.item_id_range_spare_){nullptr}
    , decltype(_impl_.current_time_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_item_id_range()) {
    _this->_impl_.item_id_range_ = new ::network::TItemIDRangeTable(*from._impl_.item_id_range_);
  }
  if (from._internal_has_item_id_range_spare()) {
    _this->_impl_.item_id_range_spare_ = new ::network::TItemIDRangeTable(*from._impl_.item_id_range_spare_);
  }
  _this->_impl_.current_time_ = from._impl_.current_time_;
  // @@protoc_insertion_point(copy_constructor:network.DGBootPacket)
}

inline void DGBootPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.mobs_){arena}
    , decltype(_impl_.items_){arena}
    , decltype(_impl_.shops_){arena}
    , decltype(_impl_.skills_){arena}
    , decltype(_impl_.refines_){arena}
    , decltype(_impl_.attrs_){arena}
    , decltype(_impl_.rare_attrs_){arena}
    , decltype(_impl_.costume_attrs_){arena}
    , decltype(_impl_.lands_){arena}
    , decltype(_impl_.object_protos_){arena}
    , decltype(_impl_.objects_){arena}
    , decltype(_impl_.guild_safeboxes_){arena}
    , decltype(_impl_.horse_upgrades_){arena}
    , decltype(_impl_.horse_boni_){arena}
    , decltype(_impl_.gaya_shops_){arena}
    , decltype(_impl_.attrtrees_){arena}
    , decltype(_impl_.runes_){arena}
    , decltype(_impl_.rune_points_){arena}
    , decltype(_impl_.xmas_rewards_){arena}
    , decltype(_impl_.soul_protos_){arena}
    , decltype(_impl_.admins_){arena}
    , decltype(_impl_.admin_configs_){arena}
    , /*decltype(_impl_._admin_configs_cached_byte_size_)*/{0}
    , decltype(_impl_.pet_skills_){arena}
    , decltype(_impl_.pet_evolves_){arena}
    , decltype(_impl_.pet_attrs_){arena}
    , decltype(_impl_.crystal_protos_){arena}
    , decltype(_impl_.item_id_range_){nullptr}
    , decltype(_impl_.item_id_range_spare_){nullptr}
    , decltype(_impl_.current_time_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DGBootPacket::~DGBootPacket() {
  // @@protoc_insertion_point(destructor:network.DGBootPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DGBootPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.mobs_.~RepeatedPtrField();
  _impl_.items_.~RepeatedPtrField();
  _impl_.shops_.~RepeatedPtrField();
  _impl_.skills_.~RepeatedPtrField();
  _impl_.refines_.~RepeatedPtrField();
  _impl_.attrs_.~RepeatedPtrField();
  _impl_.rare_attrs_.~RepeatedPtrField();
  _impl_.costume_attrs_.~RepeatedPtrField();
  _impl_.lands_.~RepeatedPtrField();
  _impl_.object_protos_.~RepeatedPtrField();
  _impl_.objects_.~RepeatedPtrField();
  _impl_.guild_safeboxes_.~RepeatedPtrField();
  _impl_.horse_upgrades_.~RepeatedPtrField();
  _impl_.horse_boni_.~RepeatedPtrField();
  _impl_.gaya_shops_.~RepeatedPtrField();
  _impl_.attrtrees_.~RepeatedPtrField();
  _impl_.runes_.~RepeatedPtrField();
  _impl_.rune_points_.~RepeatedPtrField();
  _impl_.xmas_rewards_.~RepeatedPtrField();
  _impl_.soul_protos_.~RepeatedPtrField();
  _impl_.admins_.~RepeatedPtrField();
  _impl_.admin_configs_.~RepeatedField();
  _impl_.pet_skills_.~RepeatedPtrField();
  _impl_.pet_evolves_.~RepeatedPtrField();
  _impl_.pet_attrs_.~RepeatedPtrField();
  _impl_.crystal_protos_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.item_id_range_;
  if (this != internal_default_instance()) delete _impl_.item_id_range_spare_;
}

void DGBootPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DGBootPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.DGBootPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mobs_.Clear();
  _impl_.items_.Clear();
  _impl_.shops_.Clear();
  _impl_.skills_.Clear();
  _impl_.refines_.Clear();
  _impl_.attrs_.Clear();
  _impl_.rare_attrs_.Clear();
  _impl_.costume_attrs_.Clear();
  _impl_.lands_.Clear();
  _impl_.object_protos_.Clear();
  _impl_.objects_.Clear();
  _impl_.guild_safeboxes_.Clear();
  _impl_.horse_upgrades_.Clear();
  _impl_.horse_boni_.Clear();
  _impl_.gaya_shops_.Clear();
  _impl_.attrtrees_.Clear();
  _impl_.runes_.Clear();
  _impl_.rune_points_.Clear();
  _impl_.xmas_rewards_.Clear();
  _impl_.soul_protos_.Clear();
  _impl_.admins_.Clear();
  _impl_.admin_configs_.Clear();
  _impl_.pet_skills_.Clear();
  _impl_.pet_evolves_.Clear();
  _impl_.pet_attrs_.Clear();
  _impl_.crystal_protos_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.item_id_range_ != nullptr) {
    delete _impl_.item_id_range_;
  }
  _impl_.item_id_range_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.item_id_range_spare_ != nullptr) {
    delete _impl_.item_id_range_spare_;
  }
  _impl_.item_id_range_spare_ = nullptr;
  _impl_.current_time_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DGBootPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .network.TMobTable mobs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mobs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .network.TItemTable items = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .network.TShopTable shops = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_shops(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .network.TSkillTable skills = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_skills(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .network.TRefineTable refines = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_refines(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .network.TItemAttrTable attrs = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attrs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .network.TItemAttrTable rare_attrs = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rare_attrs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .network.TItemAttrTable costume_attrs = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_costume_attrs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .network.TBuildingLand lands = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lands(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .network.TBuildingObjectProto object_protos = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_object_protos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .network.TBuildingObject objects = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_objects(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .network.TGuildSafeboxInitial guild_safeboxes = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_guild_safeboxes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .network.THorseUpgradeProto horse_upgrades = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_horse_upgrades(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .network.THorseBonusProto horse_boni = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_horse_boni(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .network.TGayaShopData gaya_shops = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_gaya_shops(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<130>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .network.TAttrtreeProto attrtrees = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_attrtrees(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .network.TRuneProtoTable runes = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_runes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<146>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .network.TRunePointProtoTable rune_points = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_rune_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<154>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .network.TXmasRewards xmas_rewards = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_xmas_rewards(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .network.TSoulProtoTable soul_protos = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_soul_protos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<170>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .network.TItemIDRangeTable item_id_range = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_item_id_range(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .network.TItemIDRangeTable item_id_range_spare = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_item_id_range_spare(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .network.TAdminInfo admins = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_admins(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<194>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 admin_configs = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_admin_configs(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 200) {
          _internal_add_admin_configs(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 current_time = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _impl_.current_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .network.TPetAdvancedSkillProto pet_skills = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_pet_skills(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<218>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .network.TPetAdvancedEvolveProto pet_evolves = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_pet_evolves(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<226>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .network.TPetAdvancedAttrProto pet_attrs = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_pet_attrs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<234>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .network.TCrystalProto crystal_protos = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_crystal_protos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<242>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DGBootPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.DGBootPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .network.TMobTable mobs = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_mobs_size()); i < n; i++) {
    const auto& repfield = this->_internal_mobs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .network.TItemTable items = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .network.TShopTable shops = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_shops_size()); i < n; i++) {
    const auto& repfield = this->_internal_shops(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .network.TSkillTable skills = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_skills_size()); i < n; i++) {
    const auto& repfield = this->_internal_skills(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .network.TRefineTable refines = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_refines_size()); i < n; i++) {
    const auto& repfield = this->_internal_refines(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .network.TItemAttrTable attrs = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_attrs_size()); i < n; i++) {
    const auto& repfield = this->_internal_attrs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .network.TItemAttrTable rare_attrs = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_rare_attrs_size()); i < n; i++) {
    const auto& repfield = this->_internal_rare_attrs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .network.TItemAttrTable costume_attrs = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_costume_attrs_size()); i < n; i++) {
    const auto& repfield = this->_internal_costume_attrs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .network.TBuildingLand lands = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_lands_size()); i < n; i++) {
    const auto& repfield = this->_internal_lands(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .network.TBuildingObjectProto object_protos = 10;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_object_protos_size()); i < n; i++) {
    const auto& repfield = this->_internal_object_protos(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .network.TBuildingObject objects = 11;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_objects_size()); i < n; i++) {
    const auto& repfield = this->_internal_objects(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(11, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .network.TGuildSafeboxInitial guild_safeboxes = 12;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_guild_safeboxes_size()); i < n; i++) {
    const auto& repfield = this->_internal_guild_safeboxes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(12, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .network.THorseUpgradeProto horse_upgrades = 13;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_horse_upgrades_size()); i < n; i++) {
    const auto& repfield = this->_internal_horse_upgrades(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(13, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .network.THorseBonusProto horse_boni = 14;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_horse_boni_size()); i < n; i++) {
    const auto& repfield = this->_internal_horse_boni(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(14, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .network.TGayaShopData gaya_shops = 16;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_gaya_shops_size()); i < n; i++) {
    const auto& repfield = this->_internal_gaya_shops(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(16, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .network.TAttrtreeProto attrtrees = 17;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_attrtrees_size()); i < n; i++) {
    const auto& repfield = this->_internal_attrtrees(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(17, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .network.TRuneProtoTable runes = 18;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_runes_size()); i < n; i++) {
    const auto& repfield = this->_internal_runes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(18, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .network.TRunePointProtoTable rune_points = 19;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_rune_points_size()); i < n; i++) {
    const auto& repfield = this->_internal_rune_points(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(19, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .network.TXmasRewards xmas_rewards = 20;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_xmas_rewards_size()); i < n; i++) {
    const auto& repfield = this->_internal_xmas_rewards(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(20, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .network.TSoulProtoTable soul_protos = 21;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_soul_protos_size()); i < n; i++) {
    const auto& repfield = this->_internal_soul_protos(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(21, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .network.TItemIDRangeTable item_id_range = 22;
  if (this->_internal_has_item_id_range()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(22, _Internal::item_id_range(this),
        _Internal::item_id_range(this).GetCachedSize(), target, stream);
  }

  // .network.TItemIDRangeTable item_id_range_spare = 23;
  if (this->_internal_has_item_id_range_spare()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(23, _Internal::item_id_range_spare(this),
        _Internal::item_id_range_spare(this).GetCachedSize(), target, stream);
  }

  // repeated .network.TAdminInfo admins = 24;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_admins_size()); i < n; i++) {
    const auto& repfield = this->_internal_admins(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(24, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated uint32 admin_configs = 25;
  {
    int byte_size = _impl_._admin_configs_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          25, _internal_admin_configs(), byte_size, target);
    }
  }

  // uint32 current_time = 26;
  if (this->_internal_current_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(26, this->_internal_current_time(), target);
  }

  // repeated .network.TPetAdvancedSkillProto pet_skills = 27;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_pet_skills_size()); i < n; i++) {
    const auto& repfield = this->_internal_pet_skills(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(27, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .network.TPetAdvancedEvolveProto pet_evolves = 28;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_pet_evolves_size()); i < n; i++) {
    const auto& repfield = this->_internal_pet_evolves(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(28, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .network.TPetAdvancedAttrProto pet_attrs = 29;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_pet_attrs_size()); i < n; i++) {
    const auto& repfield = this->_internal_pet_attrs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(29, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .network.TCrystalProto crystal_protos = 30;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_crystal_protos_size()); i < n; i++) {
    const auto& repfield = this->_internal_crystal_protos(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(30, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.DGBootPacket)
  return target;
}

size_t DGBootPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.DGBootPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .network.TMobTable mobs = 1;
  total_size += 1UL * this->_internal_mobs_size();
  for (const auto& msg : this->_impl_.mobs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .network.TItemTable items = 2;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .network.TShopTable shops = 3;
  total_size += 1UL * this->_internal_shops_size();
  for (const auto& msg : this->_impl_.shops_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .network.TSkillTable skills = 4;
  total_size += 1UL * this->_internal_skills_size();
  for (const auto& msg : this->_impl_.skills_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .network.TRefineTable refines = 5;
  total_size += 1UL * this->_internal_refines_size();
  for (const auto& msg : this->_impl_.refines_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .network.TItemAttrTable attrs = 6;
  total_size += 1UL * this->_internal_attrs_size();
  for (const auto& msg : this->_impl_.attrs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .network.TItemAttrTable rare_attrs = 7;
  total_size += 1UL * this->_internal_rare_attrs_size();
  for (const auto& msg : this->_impl_.rare_attrs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .network.TItemAttrTable costume_attrs = 8;
  total_size += 1UL * this->_internal_costume_attrs_size();
  for (const auto& msg : this->_impl_.costume_attrs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .network.TBuildingLand lands = 9;
  total_size += 1UL * this->_internal_lands_size();
  for (const auto& msg : this->_impl_.lands_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .network.TBuildingObjectProto object_protos = 10;
  total_size += 1UL * this->_internal_object_protos_size();
  for (const auto& msg : this->_impl_.object_protos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .network.TBuildingObject objects = 11;
  total_size += 1UL * this->_internal_objects_size();
  for (const auto& msg : this->_impl_.objects_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .network.TGuildSafeboxInitial guild_safeboxes = 12;
  total_size += 1UL * this->_internal_guild_safeboxes_size();
  for (const auto& msg : this->_impl_.guild_safeboxes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .network.THorseUpgradeProto horse_upgrades = 13;
  total_size += 1UL * this->_internal_horse_upgrades_size();
  for (const auto& msg : this->_impl_.horse_upgrades_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .network.THorseBonusProto horse_boni = 14;
  total_size += 1UL * this->_internal_horse_boni_size();
  for (const auto& msg : this->_impl_.horse_boni_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .network.TGayaShopData gaya_shops = 16;
  total_size += 2UL * this->_internal_gaya_shops_size();
  for (const auto& msg : this->_impl_.gaya_shops_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .network.TAttrtreeProto attrtrees = 17;
  total_size += 2UL * this->_internal_attrtrees_size();
  for (const auto& msg : this->_impl_.attrtrees_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .network.TRuneProtoTable runes = 18;
  total_size += 2UL * this->_internal_runes_size();
  for (const auto& msg : this->_impl_.runes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .network.TRunePointProtoTable rune_points = 19;
  total_size += 2UL * this->_internal_rune_points_size();
  for (const auto& msg : this->_impl_.rune_points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .network.TXmasRewards xmas_rewards = 20;
  total_size += 2UL * this->_internal_xmas_rewards_size();
  for (const auto& msg : this->_impl_.xmas_rewards_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .network.TSoulProtoTable soul_protos = 21;
  total_size += 2UL * this->_internal_soul_protos_size();
  for (const auto& msg : this->_impl_.soul_protos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .network.TAdminInfo admins = 24;
  total_size += 2UL * this->_internal_admins_size();
  for (const auto& msg : this->_impl_.admins_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 admin_configs = 25;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.admin_configs_);
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._admin_configs_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .network.TPetAdvancedSkillProto pet_skills = 27;
  total_size += 2UL * this->_internal_pet_skills_size();
  for (const auto& msg : this->_impl_.pet_skills_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .network.TPetAdvancedEvolveProto pet_evolves = 28;
  total_size += 2UL * this->_internal_pet_evolves_size();
  for (const auto& msg : this->_impl_.pet_evolves_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .network.TPetAdvancedAttrProto pet_attrs = 29;
  total_size += 2UL * this->_internal_pet_attrs_size();
  for (const auto& msg : this->_impl_.pet_attrs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .network.TCrystalProto crystal_protos = 30;
  total_size += 2UL * this->_internal_crystal_protos_size();
  for (const auto& msg : this->_impl_.crystal_protos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .network.TItemIDRangeTable item_id_range = 22;
  if (this->_internal_has_item_id_range()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.item_id_range_);
  }

  // .network.TItemIDRangeTable item_id_range_spare = 23;
  if (this->_internal_has_item_id_range_spare()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.item_id_range_spare_);
  }

  // uint32 current_time = 26;
  if (this->_internal_current_time() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_current_time());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DGBootPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DGBootPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DGBootPacket::GetClassData() const { return &_class_data_; }


void DGBootPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DGBootPacket*>(&to_msg);
  auto& from = static_cast<const DGBootPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.DGBootPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.mobs_.MergeFrom(from._impl_.mobs_);
  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  _this->_impl_.shops_.MergeFrom(from._impl_.shops_);
  _this->_impl_.skills_.MergeFrom(from._impl_.skills_);
  _this->_impl_.refines_.MergeFrom(from._impl_.refines_);
  _this->_impl_.attrs_.MergeFrom(from._impl_.attrs_);
  _this->_impl_.rare_attrs_.MergeFrom(from._impl_.rare_attrs_);
  _this->_impl_.costume_attrs_.MergeFrom(from._impl_.costume_attrs_);
  _this->_impl_.lands_.MergeFrom(from._impl_.lands_);
  _this->_impl_.object_protos_.MergeFrom(from._impl_.object_protos_);
  _this->_impl_.objects_.MergeFrom(from._impl_.objects_);
  _this->_impl_.guild_safeboxes_.MergeFrom(from._impl_.guild_safeboxes_);
  _this->_impl_.horse_upgrades_.MergeFrom(from._impl_.horse_upgrades_);
  _this->_impl_.horse_boni_.MergeFrom(from._impl_.horse_boni_);
  _this->_impl_.gaya_shops_.MergeFrom(from._impl_.gaya_shops_);
  _this->_impl_.attrtrees_.MergeFrom(from._impl_.attrtrees_);
  _this->_impl_.runes_.MergeFrom(from._impl_.runes_);
  _this->_impl_.rune_points_.MergeFrom(from._impl_.rune_points_);
  _this->_impl_.xmas_rewards_.MergeFrom(from._impl_.xmas_rewards_);
  _this->_impl_.soul_protos_.MergeFrom(from._impl_.soul_protos_);
  _this->_impl_.admins_.MergeFrom(from._impl_.admins_);
  _this->_impl_.admin_configs_.MergeFrom(from._impl_.admin_configs_);
  _this->_impl_.pet_skills_.MergeFrom(from._impl_.pet_skills_);
  _this->_impl_.pet_evolves_.MergeFrom(from._impl_.pet_evolves_);
  _this->_impl_.pet_attrs_.MergeFrom(from._impl_.pet_attrs_);
  _this->_impl_.crystal_protos_.MergeFrom(from._impl_.crystal_protos_);
  if (from._internal_has_item_id_range()) {
    _this->_internal_mutable_item_id_range()->::network::TItemIDRangeTable::MergeFrom(
        from._internal_item_id_range());
  }
  if (from._internal_has_item_id_range_spare()) {
    _this->_internal_mutable_item_id_range_spare()->::network::TItemIDRangeTable::MergeFrom(
        from._internal_item_id_range_spare());
  }
  if (from._internal_current_time() != 0) {
    _this->_internal_set_current_time(from._internal_current_time());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DGBootPacket::CopyFrom(const DGBootPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.DGBootPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DGBootPacket::IsInitialized() const {
  return true;
}

void DGBootPacket::InternalSwap(DGBootPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.mobs_.InternalSwap(&other->_impl_.mobs_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
  _impl_.shops_.InternalSwap(&other->_impl_.shops_);
  _impl_.skills_.InternalSwap(&other->_impl_.skills_);
  _impl_.refines_.InternalSwap(&other->_impl_.refines_);
  _impl_.attrs_.InternalSwap(&other->_impl_.attrs_);
  _impl_.rare_attrs_.InternalSwap(&other->_impl_.rare_attrs_);
  _impl_.costume_attrs_.InternalSwap(&other->_impl_.costume_attrs_);
  _impl_.lands_.InternalSwap(&other->_impl_.lands_);
  _impl_.object_protos_.InternalSwap(&other->_impl_.object_protos_);
  _impl_.objects_.InternalSwap(&other->_impl_.objects_);
  _impl_.guild_safeboxes_.InternalSwap(&other->_impl_.guild_safeboxes_);
  _impl_.horse_upgrades_.InternalSwap(&other->_impl_.horse_upgrades_);
  _impl_.horse_boni_.InternalSwap(&other->_impl_.horse_boni_);
  _impl_.gaya_shops_.InternalSwap(&other->_impl_.gaya_shops_);
  _impl_.attrtrees_.InternalSwap(&other->_impl_.attrtrees_);
  _impl_.runes_.InternalSwap(&other->_impl_.runes_);
  _impl_.rune_points_.InternalSwap(&other->_impl_.rune_points_);
  _impl_.xmas_rewards_.InternalSwap(&other->_impl_.xmas_rewards_);
  _impl_.soul_protos_.InternalSwap(&other->_impl_.soul_protos_);
  _impl_.admins_.InternalSwap(&other->_impl_.admins_);
  _impl_.admin_configs_.InternalSwap(&other->_impl_.admin_configs_);
  _impl_.pet_skills_.InternalSwap(&other->_impl_.pet_skills_);
  _impl_.pet_evolves_.InternalSwap(&other->_impl_.pet_evolves_);
  _impl_.pet_attrs_.InternalSwap(&other->_impl_.pet_attrs_);
  _impl_.crystal_protos_.InternalSwap(&other->_impl_.crystal_protos_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DGBootPacket, _impl_.current_time_)
      + sizeof(DGBootPacket::_impl_.current_time_)
      - PROTOBUF_FIELD_OFFSET(DGBootPacket, _impl_.item_id_range_)>(
          reinterpret_cast<char*>(&_impl_.item_id_range_),
          reinterpret_cast<char*>(&other->_impl_.item_id_range_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DGBootPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dg_5fpackets_2eproto_getter, &descriptor_table_dg_5fpackets_2eproto_once,
      file_level_metadata_dg_5fpackets_2eproto[0]);
}

// ===================================================================

class DGMapLocationsPacket::_Internal {
 public:
};

void DGMapLocationsPacket::clear_maps() {
  _impl_.maps_.Clear();
}
DGMapLocationsPacket::DGMapLocationsPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.DGMapLocationsPacket)
}
DGMapLocationsPacket::DGMapLocationsPacket(const DGMapLocationsPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DGMapLocationsPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.maps_){from._impl_.maps_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:network.DGMapLocationsPacket)
}

inline void DGMapLocationsPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.maps_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DGMapLocationsPacket::~DGMapLocationsPacket() {
  // @@protoc_insertion_point(destructor:network.DGMapLocationsPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DGMapLocationsPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.maps_.~RepeatedPtrField();
}

void DGMapLocationsPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DGMapLocationsPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.DGMapLocationsPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.maps_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DGMapLocationsPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .network.TMapLocation maps = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_maps(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DGMapLocationsPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.DGMapLocationsPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .network.TMapLocation maps = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_maps_size()); i < n; i++) {
    const auto& repfield = this->_internal_maps(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.DGMapLocationsPacket)
  return target;
}

size_t DGMapLocationsPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.DGMapLocationsPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .network.TMapLocation maps = 1;
  total_size += 1UL * this->_internal_maps_size();
  for (const auto& msg : this->_impl_.maps_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DGMapLocationsPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DGMapLocationsPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DGMapLocationsPacket::GetClassData() const { return &_class_data_; }


void DGMapLocationsPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DGMapLocationsPacket*>(&to_msg);
  auto& from = static_cast<const DGMapLocationsPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.DGMapLocationsPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.maps_.MergeFrom(from._impl_.maps_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DGMapLocationsPacket::CopyFrom(const DGMapLocationsPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.DGMapLocationsPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DGMapLocationsPacket::IsInitialized() const {
  return true;
}

void DGMapLocationsPacket::InternalSwap(DGMapLocationsPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.maps_.InternalSwap(&other->_impl_.maps_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DGMapLocationsPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dg_5fpackets_2eproto_getter, &descriptor_table_dg_5fpackets_2eproto_once,
      file_level_metadata_dg_5fpackets_2eproto[1]);
}

// ===================================================================

class DGLoginSuccessPacket::_Internal {
 public:
  static const ::network::TAccountTable& account_info(const DGLoginSuccessPacket* msg);
};

const ::network::TAccountTable&
DGLoginSuccessPacket::_Internal::account_info(const DGLoginSuccessPacket* msg) {
  return *msg->_impl_.account_info_;
}
void DGLoginSuccessPacket::clear_account_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.account_info_ != nullptr) {
    delete _impl_.account_info_;
  }
  _impl_.account_info_ = nullptr;
}
DGLoginSuccessPacket::DGLoginSuccessPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.DGLoginSuccessPacket)
}
DGLoginSuccessPacket::DGLoginSuccessPacket(const DGLoginSuccessPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DGLoginSuccessPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.account_info_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_account_info()) {
    _this->_impl_.account_info_ = new ::network::TAccountTable(*from._impl_.account_info_);
  }
  // @@protoc_insertion_point(copy_constructor:network.DGLoginSuccessPacket)
}

inline void DGLoginSuccessPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.account_info_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DGLoginSuccessPacket::~DGLoginSuccessPacket() {
  // @@protoc_insertion_point(destructor:network.DGLoginSuccessPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DGLoginSuccessPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.account_info_;
}

void DGLoginSuccessPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DGLoginSuccessPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.DGLoginSuccessPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.account_info_ != nullptr) {
    delete _impl_.account_info_;
  }
  _impl_.account_info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DGLoginSuccessPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .network.TAccountTable account_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_account_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DGLoginSuccessPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.DGLoginSuccessPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .network.TAccountTable account_info = 1;
  if (this->_internal_has_account_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::account_info(this),
        _Internal::account_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.DGLoginSuccessPacket)
  return target;
}

size_t DGLoginSuccessPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.DGLoginSuccessPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .network.TAccountTable account_info = 1;
  if (this->_internal_has_account_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.account_info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DGLoginSuccessPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DGLoginSuccessPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DGLoginSuccessPacket::GetClassData() const { return &_class_data_; }


void DGLoginSuccessPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DGLoginSuccessPacket*>(&to_msg);
  auto& from = static_cast<const DGLoginSuccessPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.DGLoginSuccessPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_account_info()) {
    _this->_internal_mutable_account_info()->::network::TAccountTable::MergeFrom(
        from._internal_account_info());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DGLoginSuccessPacket::CopyFrom(const DGLoginSuccessPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.DGLoginSuccessPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DGLoginSuccessPacket::IsInitialized() const {
  return true;
}

void DGLoginSuccessPacket::InternalSwap(DGLoginSuccessPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.account_info_, other->_impl_.account_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DGLoginSuccessPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dg_5fpackets_2eproto_getter, &descriptor_table_dg_5fpackets_2eproto_once,
      file_level_metadata_dg_5fpackets_2eproto[2]);
}

// ===================================================================

class DGPlayerCreateSuccessPacket::_Internal {
 public:
  static const ::network::TSimplePlayer& player(const DGPlayerCreateSuccessPacket* msg);
};

const ::network::TSimplePlayer&
DGPlayerCreateSuccessPacket::_Internal::player(const DGPlayerCreateSuccessPacket* msg) {
  return *msg->_impl_.player_;
}
void DGPlayerCreateSuccessPacket::clear_player() {
  if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
    delete _impl_.player_;
  }
  _impl_.player_ = nullptr;
}
DGPlayerCreateSuccessPacket::DGPlayerCreateSuccessPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.DGPlayerCreateSuccessPacket)
}
DGPlayerCreateSuccessPacket::DGPlayerCreateSuccessPacket(const DGPlayerCreateSuccessPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DGPlayerCreateSuccessPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.player_){nullptr}
    , decltype(_impl_.account_index_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player()) {
    _this->_impl_.player_ = new ::network::TSimplePlayer(*from._impl_.player_);
  }
  _this->_impl_.account_index_ = from._impl_.account_index_;
  // @@protoc_insertion_point(copy_constructor:network.DGPlayerCreateSuccessPacket)
}

inline void DGPlayerCreateSuccessPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.player_){nullptr}
    , decltype(_impl_.account_index_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DGPlayerCreateSuccessPacket::~DGPlayerCreateSuccessPacket() {
  // @@protoc_insertion_point(destructor:network.DGPlayerCreateSuccessPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DGPlayerCreateSuccessPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.player_;
}

void DGPlayerCreateSuccessPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DGPlayerCreateSuccessPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.DGPlayerCreateSuccessPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
    delete _impl_.player_;
  }
  _impl_.player_ = nullptr;
  _impl_.account_index_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DGPlayerCreateSuccessPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 account_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.account_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .network.TSimplePlayer player = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_player(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DGPlayerCreateSuccessPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.DGPlayerCreateSuccessPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 account_index = 1;
  if (this->_internal_account_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_index(), target);
  }

  // .network.TSimplePlayer player = 2;
  if (this->_internal_has_player()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::player(this),
        _Internal::player(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.DGPlayerCreateSuccessPacket)
  return target;
}

size_t DGPlayerCreateSuccessPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.DGPlayerCreateSuccessPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .network.TSimplePlayer player = 2;
  if (this->_internal_has_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.player_);
  }

  // uint32 account_index = 1;
  if (this->_internal_account_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DGPlayerCreateSuccessPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DGPlayerCreateSuccessPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DGPlayerCreateSuccessPacket::GetClassData() const { return &_class_data_; }


void DGPlayerCreateSuccessPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DGPlayerCreateSuccessPacket*>(&to_msg);
  auto& from = static_cast<const DGPlayerCreateSuccessPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.DGPlayerCreateSuccessPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_player()) {
    _this->_internal_mutable_player()->::network::TSimplePlayer::MergeFrom(
        from._internal_player());
  }
  if (from._internal_account_index() != 0) {
    _this->_internal_set_account_index(from._internal_account_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DGPlayerCreateSuccessPacket::CopyFrom(const DGPlayerCreateSuccessPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.DGPlayerCreateSuccessPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DGPlayerCreateSuccessPacket::IsInitialized() const {
  return true;
}

void DGPlayerCreateSuccessPacket::InternalSwap(DGPlayerCreateSuccessPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DGPlayerCreateSuccessPacket, _impl_.account_index_)
      + sizeof(DGPlayerCreateSuccessPacket::_impl_.account_index_)
      - PROTOBUF_FIELD_OFFSET(DGPlayerCreateSuccessPacket, _impl_.player_)>(
          reinterpret_cast<char*>(&_impl_.player_),
          reinterpret_cast<char*>(&other->_impl_.player_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DGPlayerCreateSuccessPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dg_5fpackets_2eproto_getter, &descriptor_table_dg_5fpackets_2eproto_once,
      file_level_metadata_dg_5fpackets_2eproto[3]);
}

// ===================================================================

class DGPlayerDeleteSuccessPacket::_Internal {
 public:
};

DGPlayerDeleteSuccessPacket::DGPlayerDeleteSuccessPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.DGPlayerDeleteSuccessPacket)
}
DGPlayerDeleteSuccessPacket::DGPlayerDeleteSuccessPacket(const DGPlayerDeleteSuccessPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DGPlayerDeleteSuccessPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.account_index_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.account_index_ = from._impl_.account_index_;
  // @@protoc_insertion_point(copy_constructor:network.DGPlayerDeleteSuccessPacket)
}

inline void DGPlayerDeleteSuccessPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.account_index_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DGPlayerDeleteSuccessPacket::~DGPlayerDeleteSuccessPacket() {
  // @@protoc_insertion_point(destructor:network.DGPlayerDeleteSuccessPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DGPlayerDeleteSuccessPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DGPlayerDeleteSuccessPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DGPlayerDeleteSuccessPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.DGPlayerDeleteSuccessPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.account_index_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DGPlayerDeleteSuccessPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 account_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.account_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DGPlayerDeleteSuccessPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.DGPlayerDeleteSuccessPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 account_index = 1;
  if (this->_internal_account_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.DGPlayerDeleteSuccessPacket)
  return target;
}

size_t DGPlayerDeleteSuccessPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.DGPlayerDeleteSuccessPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 account_index = 1;
  if (this->_internal_account_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DGPlayerDeleteSuccessPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DGPlayerDeleteSuccessPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DGPlayerDeleteSuccessPacket::GetClassData() const { return &_class_data_; }


void DGPlayerDeleteSuccessPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DGPlayerDeleteSuccessPacket*>(&to_msg);
  auto& from = static_cast<const DGPlayerDeleteSuccessPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.DGPlayerDeleteSuccessPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_account_index() != 0) {
    _this->_internal_set_account_index(from._internal_account_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DGPlayerDeleteSuccessPacket::CopyFrom(const DGPlayerDeleteSuccessPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.DGPlayerDeleteSuccessPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DGPlayerDeleteSuccessPacket::IsInitialized() const {
  return true;
}

void DGPlayerDeleteSuccessPacket::InternalSwap(DGPlayerDeleteSuccessPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.account_index_, other->_impl_.account_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DGPlayerDeleteSuccessPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dg_5fpackets_2eproto_getter, &descriptor_table_dg_5fpackets_2eproto_once,
      file_level_metadata_dg_5fpackets_2eproto[4]);
}

// ===================================================================

class DGPlayerLoadPacket::_Internal {
 public:
  static const ::TPlayerTable& player(const DGPlayerLoadPacket* msg);
};

const ::TPlayerTable&
DGPlayerLoadPacket::_Internal::player(const DGPlayerLoadPacket* msg) {
  return *msg->_impl_.player_;
}
void DGPlayerLoadPacket::clear_player() {
  if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
    delete _impl_.player_;
  }
  _impl_.player_ = nullptr;
}
DGPlayerLoadPacket::DGPlayerLoadPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.DGPlayerLoadPacket)
}
DGPlayerLoadPacket::DGPlayerLoadPacket(const DGPlayerLoadPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DGPlayerLoadPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.player_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player()) {
    _this->_impl_.player_ = new ::TPlayerTable(*from._impl_.player_);
  }
  // @@protoc_insertion_point(copy_constructor:network.DGPlayerLoadPacket)
}

inline void DGPlayerLoadPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.player_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DGPlayerLoadPacket::~DGPlayerLoadPacket() {
  // @@protoc_insertion_point(destructor:network.DGPlayerLoadPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DGPlayerLoadPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.player_;
}

void DGPlayerLoadPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DGPlayerLoadPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.DGPlayerLoadPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
    delete _impl_.player_;
  }
  _impl_.player_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DGPlayerLoadPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .TPlayerTable player = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DGPlayerLoadPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.DGPlayerLoadPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .TPlayerTable player = 1;
  if (this->_internal_has_player()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::player(this),
        _Internal::player(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.DGPlayerLoadPacket)
  return target;
}

size_t DGPlayerLoadPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.DGPlayerLoadPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .TPlayerTable player = 1;
  if (this->_internal_has_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.player_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DGPlayerLoadPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DGPlayerLoadPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DGPlayerLoadPacket::GetClassData() const { return &_class_data_; }


void DGPlayerLoadPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DGPlayerLoadPacket*>(&to_msg);
  auto& from = static_cast<const DGPlayerLoadPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.DGPlayerLoadPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_player()) {
    _this->_internal_mutable_player()->::TPlayerTable::MergeFrom(
        from._internal_player());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DGPlayerLoadPacket::CopyFrom(const DGPlayerLoadPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.DGPlayerLoadPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DGPlayerLoadPacket::IsInitialized() const {
  return true;
}

void DGPlayerLoadPacket::InternalSwap(DGPlayerLoadPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.player_, other->_impl_.player_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DGPlayerLoadPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dg_5fpackets_2eproto_getter, &descriptor_table_dg_5fpackets_2eproto_once,
      file_level_metadata_dg_5fpackets_2eproto[5]);
}

// ===================================================================

class DGPlayerSkillLoadPacket::_Internal {
 public:
};

void DGPlayerSkillLoadPacket::clear_skills() {
  _impl_.skills_.Clear();
}
DGPlayerSkillLoadPacket::DGPlayerSkillLoadPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.DGPlayerSkillLoadPacket)
}
DGPlayerSkillLoadPacket::DGPlayerSkillLoadPacket(const DGPlayerSkillLoadPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DGPlayerSkillLoadPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.skills_){from._impl_.skills_}
    , decltype(_impl_.pid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.pid_ = from._impl_.pid_;
  // @@protoc_insertion_point(copy_constructor:network.DGPlayerSkillLoadPacket)
}

inline void DGPlayerSkillLoadPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.skills_){arena}
    , decltype(_impl_.pid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DGPlayerSkillLoadPacket::~DGPlayerSkillLoadPacket() {
  // @@protoc_insertion_point(destructor:network.DGPlayerSkillLoadPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DGPlayerSkillLoadPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.skills_.~RepeatedPtrField();
}

void DGPlayerSkillLoadPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DGPlayerSkillLoadPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.DGPlayerSkillLoadPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.skills_.Clear();
  _impl_.pid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DGPlayerSkillLoadPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TPlayerSkill skills = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_skills(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DGPlayerSkillLoadPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.DGPlayerSkillLoadPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pid(), target);
  }

  // repeated .TPlayerSkill skills = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_skills_size()); i < n; i++) {
    const auto& repfield = this->_internal_skills(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.DGPlayerSkillLoadPacket)
  return target;
}

size_t DGPlayerSkillLoadPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.DGPlayerSkillLoadPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TPlayerSkill skills = 2;
  total_size += 1UL * this->_internal_skills_size();
  for (const auto& msg : this->_impl_.skills_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DGPlayerSkillLoadPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DGPlayerSkillLoadPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DGPlayerSkillLoadPacket::GetClassData() const { return &_class_data_; }


void DGPlayerSkillLoadPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DGPlayerSkillLoadPacket*>(&to_msg);
  auto& from = static_cast<const DGPlayerSkillLoadPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.DGPlayerSkillLoadPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.skills_.MergeFrom(from._impl_.skills_);
  if (from._internal_pid() != 0) {
    _this->_internal_set_pid(from._internal_pid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DGPlayerSkillLoadPacket::CopyFrom(const DGPlayerSkillLoadPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.DGPlayerSkillLoadPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DGPlayerSkillLoadPacket::IsInitialized() const {
  return true;
}

void DGPlayerSkillLoadPacket::InternalSwap(DGPlayerSkillLoadPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.skills_.InternalSwap(&other->_impl_.skills_);
  swap(_impl_.pid_, other->_impl_.pid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DGPlayerSkillLoadPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dg_5fpackets_2eproto_getter, &descriptor_table_dg_5fpackets_2eproto_once,
      file_level_metadata_dg_5fpackets_2eproto[6]);
}

// ===================================================================

class DGItemLoadPacket::_Internal {
 public:
};

void DGItemLoadPacket::clear_items() {
  _impl_.items_.Clear();
}
DGItemLoadPacket::DGItemLoadPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.DGItemLoadPacket)
}
DGItemLoadPacket::DGItemLoadPacket(const DGItemLoadPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DGItemLoadPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , decltype(_impl_.pid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.pid_ = from._impl_.pid_;
  // @@protoc_insertion_point(copy_constructor:network.DGItemLoadPacket)
}

inline void DGItemLoadPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , decltype(_impl_.pid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DGItemLoadPacket::~DGItemLoadPacket() {
  // @@protoc_insertion_point(destructor:network.DGItemLoadPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DGItemLoadPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
}

void DGItemLoadPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DGItemLoadPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.DGItemLoadPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  _impl_.pid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DGItemLoadPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .network.TItemData items = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DGItemLoadPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.DGItemLoadPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pid(), target);
  }

  // repeated .network.TItemData items = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.DGItemLoadPacket)
  return target;
}

size_t DGItemLoadPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.DGItemLoadPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .network.TItemData items = 2;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DGItemLoadPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DGItemLoadPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DGItemLoadPacket::GetClassData() const { return &_class_data_; }


void DGItemLoadPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DGItemLoadPacket*>(&to_msg);
  auto& from = static_cast<const DGItemLoadPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.DGItemLoadPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  if (from._internal_pid() != 0) {
    _this->_internal_set_pid(from._internal_pid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DGItemLoadPacket::CopyFrom(const DGItemLoadPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.DGItemLoadPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DGItemLoadPacket::IsInitialized() const {
  return true;
}

void DGItemLoadPacket::InternalSwap(DGItemLoadPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
  swap(_impl_.pid_, other->_impl_.pid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DGItemLoadPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dg_5fpackets_2eproto_getter, &descriptor_table_dg_5fpackets_2eproto_once,
      file_level_metadata_dg_5fpackets_2eproto[7]);
}

// ===================================================================

class DGPetLoadPacket::_Internal {
 public:
};

void DGPetLoadPacket::clear_pets() {
  _impl_.pets_.Clear();
}
DGPetLoadPacket::DGPetLoadPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.DGPetLoadPacket)
}
DGPetLoadPacket::DGPetLoadPacket(const DGPetLoadPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DGPetLoadPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pets_){from._impl_.pets_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:network.DGPetLoadPacket)
}

inline void DGPetLoadPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pets_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DGPetLoadPacket::~DGPetLoadPacket() {
  // @@protoc_insertion_point(destructor:network.DGPetLoadPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DGPetLoadPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.pets_.~RepeatedPtrField();
}

void DGPetLoadPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DGPetLoadPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.DGPetLoadPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pets_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DGPetLoadPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .network.TPetAdvancedTable pets = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DGPetLoadPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.DGPetLoadPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .network.TPetAdvancedTable pets = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_pets_size()); i < n; i++) {
    const auto& repfield = this->_internal_pets(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.DGPetLoadPacket)
  return target;
}

size_t DGPetLoadPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.DGPetLoadPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .network.TPetAdvancedTable pets = 1;
  total_size += 1UL * this->_internal_pets_size();
  for (const auto& msg : this->_impl_.pets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DGPetLoadPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DGPetLoadPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DGPetLoadPacket::GetClassData() const { return &_class_data_; }


void DGPetLoadPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DGPetLoadPacket*>(&to_msg);
  auto& from = static_cast<const DGPetLoadPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.DGPetLoadPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.pets_.MergeFrom(from._impl_.pets_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DGPetLoadPacket::CopyFrom(const DGPetLoadPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.DGPetLoadPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DGPetLoadPacket::IsInitialized() const {
  return true;
}

void DGPetLoadPacket::InternalSwap(DGPetLoadPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.pets_.InternalSwap(&other->_impl_.pets_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DGPetLoadPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dg_5fpackets_2eproto_getter, &descriptor_table_dg_5fpackets_2eproto_once,
      file_level_metadata_dg_5fpackets_2eproto[8]);
}

// ===================================================================

class DGQuestLoadPacket::_Internal {
 public:
};

void DGQuestLoadPacket::clear_quests() {
  _impl_.quests_.Clear();
}
DGQuestLoadPacket::DGQuestLoadPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.DGQuestLoadPacket)
}
DGQuestLoadPacket::DGQuestLoadPacket(const DGQuestLoadPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DGQuestLoadPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.quests_){from._impl_.quests_}
    , decltype(_impl_.pid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.pid_ = from._impl_.pid_;
  // @@protoc_insertion_point(copy_constructor:network.DGQuestLoadPacket)
}

inline void DGQuestLoadPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.quests_){arena}
    , decltype(_impl_.pid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DGQuestLoadPacket::~DGQuestLoadPacket() {
  // @@protoc_insertion_point(destructor:network.DGQuestLoadPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DGQuestLoadPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.quests_.~RepeatedPtrField();
}

void DGQuestLoadPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DGQuestLoadPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.DGQuestLoadPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.quests_.Clear();
  _impl_.pid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DGQuestLoadPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TQuestTable quests = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_quests(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DGQuestLoadPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.DGQuestLoadPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pid(), target);
  }

  // repeated .TQuestTable quests = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_quests_size()); i < n; i++) {
    const auto& repfield = this->_internal_quests(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.DGQuestLoadPacket)
  return target;
}

size_t DGQuestLoadPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.DGQuestLoadPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TQuestTable quests = 2;
  total_size += 1UL * this->_internal_quests_size();
  for (const auto& msg : this->_impl_.quests_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DGQuestLoadPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DGQuestLoadPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DGQuestLoadPacket::GetClassData() const { return &_class_data_; }


void DGQuestLoadPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DGQuestLoadPacket*>(&to_msg);
  auto& from = static_cast<const DGQuestLoadPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.DGQuestLoadPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.quests_.MergeFrom(from._impl_.quests_);
  if (from._internal_pid() != 0) {
    _this->_internal_set_pid(from._internal_pid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DGQuestLoadPacket::CopyFrom(const DGQuestLoadPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.DGQuestLoadPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DGQuestLoadPacket::IsInitialized() const {
  return true;
}

void DGQuestLoadPacket::InternalSwap(DGQuestLoadPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.quests_.InternalSwap(&other->_impl_.quests_);
  swap(_impl_.pid_, other->_impl_.pid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DGQuestLoadPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dg_5fpackets_2eproto_getter, &descriptor_table_dg_5fpackets_2eproto_once,
      file_level_metadata_dg_5fpackets_2eproto[9]);
}

// ===================================================================

class DGAffectLoadPacket::_Internal {
 public:
};

void DGAffectLoadPacket::clear_affects() {
  _impl_.affects_.Clear();
}
DGAffectLoadPacket::DGAffectLoadPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.DGAffectLoadPacket)
}
DGAffectLoadPacket::DGAffectLoadPacket(const DGAffectLoadPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DGAffectLoadPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.affects_){from._impl_.affects_}
    , decltype(_impl_.pid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.pid_ = from._impl_.pid_;
  // @@protoc_insertion_point(copy_constructor:network.DGAffectLoadPacket)
}

inline void DGAffectLoadPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.affects_){arena}
    , decltype(_impl_.pid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DGAffectLoadPacket::~DGAffectLoadPacket() {
  // @@protoc_insertion_point(destructor:network.DGAffectLoadPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DGAffectLoadPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.affects_.~RepeatedPtrField();
}

void DGAffectLoadPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DGAffectLoadPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.DGAffectLoadPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.affects_.Clear();
  _impl_.pid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DGAffectLoadPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TPacketAffectElement affects = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_affects(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DGAffectLoadPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.DGAffectLoadPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pid(), target);
  }

  // repeated .TPacketAffectElement affects = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_affects_size()); i < n; i++) {
    const auto& repfield = this->_internal_affects(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.DGAffectLoadPacket)
  return target;
}

size_t DGAffectLoadPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.DGAffectLoadPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TPacketAffectElement affects = 2;
  total_size += 1UL * this->_internal_affects_size();
  for (const auto& msg : this->_impl_.affects_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DGAffectLoadPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DGAffectLoadPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DGAffectLoadPacket::GetClassData() const { return &_class_data_; }


void DGAffectLoadPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DGAffectLoadPacket*>(&to_msg);
  auto& from = static_cast<const DGAffectLoadPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.DGAffectLoadPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.affects_.MergeFrom(from._impl_.affects_);
  if (from._internal_pid() != 0) {
    _this->_internal_set_pid(from._internal_pid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DGAffectLoadPacket::CopyFrom(const DGAffectLoadPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.DGAffectLoadPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DGAffectLoadPacket::IsInitialized() const {
  return true;
}

void DGAffectLoadPacket::InternalSwap(DGAffectLoadPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.affects_.InternalSwap(&other->_impl_.affects_);
  swap(_impl_.pid_, other->_impl_.pid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DGAffectLoadPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dg_5fpackets_2eproto_getter, &descriptor_table_dg_5fpackets_2eproto_once,
      file_level_metadata_dg_5fpackets_2eproto[10]);
}

// ===================================================================

class DGSafeboxLoadPacket::_Internal {
 public:
};

void DGSafeboxLoadPacket::clear_items() {
  _impl_.items_.Clear();
}
DGSafeboxLoadPacket::DGSafeboxLoadPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.DGSafeboxLoadPacket)
}
DGSafeboxLoadPacket::DGSafeboxLoadPacket(const DGSafeboxLoadPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DGSafeboxLoadPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , decltype(_impl_.account_id_){}
    , decltype(_impl_.size_){}
    , decltype(_impl_.gold_){}
    , decltype(_impl_.is_mall_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.account_id_, &from._impl_.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_mall_) -
    reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.is_mall_));
  // @@protoc_insertion_point(copy_constructor:network.DGSafeboxLoadPacket)
}

inline void DGSafeboxLoadPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , decltype(_impl_.account_id_){0u}
    , decltype(_impl_.size_){0u}
    , decltype(_impl_.gold_){int64_t{0}}
    , decltype(_impl_.is_mall_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DGSafeboxLoadPacket::~DGSafeboxLoadPacket() {
  // @@protoc_insertion_point(destructor:network.DGSafeboxLoadPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DGSafeboxLoadPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
}

void DGSafeboxLoadPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DGSafeboxLoadPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.DGSafeboxLoadPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  ::memset(&_impl_.account_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.is_mall_) -
      reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.is_mall_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DGSafeboxLoadPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 gold = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_mall = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.is_mall_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .network.TItemData items = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DGSafeboxLoadPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.DGSafeboxLoadPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 account_id = 1;
  if (this->_internal_account_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // uint32 size = 2;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_size(), target);
  }

  // int64 gold = 3;
  if (this->_internal_gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_gold(), target);
  }

  // bool is_mall = 4;
  if (this->_internal_is_mall() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_is_mall(), target);
  }

  // repeated .network.TItemData items = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.DGSafeboxLoadPacket)
  return target;
}

size_t DGSafeboxLoadPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.DGSafeboxLoadPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .network.TItemData items = 5;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 account_id = 1;
  if (this->_internal_account_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
  }

  // uint32 size = 2;
  if (this->_internal_size() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_size());
  }

  // int64 gold = 3;
  if (this->_internal_gold() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_gold());
  }

  // bool is_mall = 4;
  if (this->_internal_is_mall() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DGSafeboxLoadPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DGSafeboxLoadPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DGSafeboxLoadPacket::GetClassData() const { return &_class_data_; }


void DGSafeboxLoadPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DGSafeboxLoadPacket*>(&to_msg);
  auto& from = static_cast<const DGSafeboxLoadPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.DGSafeboxLoadPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  if (from._internal_account_id() != 0) {
    _this->_internal_set_account_id(from._internal_account_id());
  }
  if (from._internal_size() != 0) {
    _this->_internal_set_size(from._internal_size());
  }
  if (from._internal_gold() != 0) {
    _this->_internal_set_gold(from._internal_gold());
  }
  if (from._internal_is_mall() != 0) {
    _this->_internal_set_is_mall(from._internal_is_mall());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DGSafeboxLoadPacket::CopyFrom(const DGSafeboxLoadPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.DGSafeboxLoadPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DGSafeboxLoadPacket::IsInitialized() const {
  return true;
}

void DGSafeboxLoadPacket::InternalSwap(DGSafeboxLoadPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DGSafeboxLoadPacket, _impl_.is_mall_)
      + sizeof(DGSafeboxLoadPacket::_impl_.is_mall_)
      - PROTOBUF_FIELD_OFFSET(DGSafeboxLoadPacket, _impl_.account_id_)>(
          reinterpret_cast<char*>(&_impl_.account_id_),
          reinterpret_cast<char*>(&other->_impl_.account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DGSafeboxLoadPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dg_5fpackets_2eproto_getter, &descriptor_table_dg_5fpackets_2eproto_once,
      file_level_metadata_dg_5fpackets_2eproto[11]);
}

// ===================================================================

class DGSafeboxChangeSizePacket::_Internal {
 public:
};

DGSafeboxChangeSizePacket::DGSafeboxChangeSizePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.DGSafeboxChangeSizePacket)
}
DGSafeboxChangeSizePacket::DGSafeboxChangeSizePacket(const DGSafeboxChangeSizePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DGSafeboxChangeSizePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.size_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.size_ = from._impl_.size_;
  // @@protoc_insertion_point(copy_constructor:network.DGSafeboxChangeSizePacket)
}

inline void DGSafeboxChangeSizePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.size_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DGSafeboxChangeSizePacket::~DGSafeboxChangeSizePacket() {
  // @@protoc_insertion_point(destructor:network.DGSafeboxChangeSizePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DGSafeboxChangeSizePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DGSafeboxChangeSizePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DGSafeboxChangeSizePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.DGSafeboxChangeSizePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.size_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DGSafeboxChangeSizePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DGSafeboxChangeSizePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.DGSafeboxChangeSizePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 size = 1;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.DGSafeboxChangeSizePacket)
  return target;
}

size_t DGSafeboxChangeSizePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.DGSafeboxChangeSizePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 size = 1;
  if (this->_internal_size() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DGSafeboxChangeSizePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DGSafeboxChangeSizePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DGSafeboxChangeSizePacket::GetClassData() const { return &_class_data_; }


void DGSafeboxChangeSizePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DGSafeboxChangeSizePacket*>(&to_msg);
  auto& from = static_cast<const DGSafeboxChangeSizePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.DGSafeboxChangeSizePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_size() != 0) {
    _this->_internal_set_size(from._internal_size());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DGSafeboxChangeSizePacket::CopyFrom(const DGSafeboxChangeSizePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.DGSafeboxChangeSizePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DGSafeboxChangeSizePacket::IsInitialized() const {
  return true;
}

void DGSafeboxChangeSizePacket::InternalSwap(DGSafeboxChangeSizePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.size_, other->_impl_.size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DGSafeboxChangeSizePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dg_5fpackets_2eproto_getter, &descriptor_table_dg_5fpackets_2eproto_once,
      file_level_metadata_dg_5fpackets_2eproto[12]);
}

// ===================================================================

class DGSafeboxChangePasswordAnswerPacket::_Internal {
 public:
};

DGSafeboxChangePasswordAnswerPacket::DGSafeboxChangePasswordAnswerPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.DGSafeboxChangePasswordAnswerPacket)
}
DGSafeboxChangePasswordAnswerPacket::DGSafeboxChangePasswordAnswerPacket(const DGSafeboxChangePasswordAnswerPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DGSafeboxChangePasswordAnswerPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.flag_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.flag_ = from._impl_.flag_;
  // @@protoc_insertion_point(copy_constructor:network.DGSafeboxChangePasswordAnswerPacket)
}

inline void DGSafeboxChangePasswordAnswerPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.flag_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DGSafeboxChangePasswordAnswerPacket::~DGSafeboxChangePasswordAnswerPacket() {
  // @@protoc_insertion_point(destructor:network.DGSafeboxChangePasswordAnswerPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DGSafeboxChangePasswordAnswerPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DGSafeboxChangePasswordAnswerPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DGSafeboxChangePasswordAnswerPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.DGSafeboxChangePasswordAnswerPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.flag_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DGSafeboxChangePasswordAnswerPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool flag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DGSafeboxChangePasswordAnswerPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.DGSafeboxChangePasswordAnswerPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool flag = 1;
  if (this->_internal_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_flag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.DGSafeboxChangePasswordAnswerPacket)
  return target;
}

size_t DGSafeboxChangePasswordAnswerPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.DGSafeboxChangePasswordAnswerPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool flag = 1;
  if (this->_internal_flag() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DGSafeboxChangePasswordAnswerPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DGSafeboxChangePasswordAnswerPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DGSafeboxChangePasswordAnswerPacket::GetClassData() const { return &_class_data_; }


void DGSafeboxChangePasswordAnswerPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DGSafeboxChangePasswordAnswerPacket*>(&to_msg);
  auto& from = static_cast<const DGSafeboxChangePasswordAnswerPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.DGSafeboxChangePasswordAnswerPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_flag() != 0) {
    _this->_internal_set_flag(from._internal_flag());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DGSafeboxChangePasswordAnswerPacket::CopyFrom(const DGSafeboxChangePasswordAnswerPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.DGSafeboxChangePasswordAnswerPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DGSafeboxChangePasswordAnswerPacket::IsInitialized() const {
  return true;
}

void DGSafeboxChangePasswordAnswerPacket::InternalSwap(DGSafeboxChangePasswordAnswerPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.flag_, other->_impl_.flag_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DGSafeboxChangePasswordAnswerPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dg_5fpackets_2eproto_getter, &descriptor_table_dg_5fpackets_2eproto_once,
      file_level_metadata_dg_5fpackets_2eproto[13]);
}

// ===================================================================

class DGEmpireSelectPacket::_Internal {
 public:
};

DGEmpireSelectPacket::DGEmpireSelectPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.DGEmpireSelectPacket)
}
DGEmpireSelectPacket::DGEmpireSelectPacket(const DGEmpireSelectPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DGEmpireSelectPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.empire_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.empire_ = from._impl_.empire_;
  // @@protoc_insertion_point(copy_constructor:network.DGEmpireSelectPacket)
}

inline void DGEmpireSelectPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.empire_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DGEmpireSelectPacket::~DGEmpireSelectPacket() {
  // @@protoc_insertion_point(destructor:network.DGEmpireSelectPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DGEmpireSelectPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DGEmpireSelectPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DGEmpireSelectPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.DGEmpireSelectPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.empire_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DGEmpireSelectPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 empire = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.empire_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DGEmpireSelectPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.DGEmpireSelectPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 empire = 1;
  if (this->_internal_empire() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_empire(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.DGEmpireSelectPacket)
  return target;
}

size_t DGEmpireSelectPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.DGEmpireSelectPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 empire = 1;
  if (this->_internal_empire() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_empire());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DGEmpireSelectPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DGEmpireSelectPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DGEmpireSelectPacket::GetClassData() const { return &_class_data_; }


void DGEmpireSelectPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DGEmpireSelectPacket*>(&to_msg);
  auto& from = static_cast<const DGEmpireSelectPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.DGEmpireSelectPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_empire() != 0) {
    _this->_internal_set_empire(from._internal_empire());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DGEmpireSelectPacket::CopyFrom(const DGEmpireSelectPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.DGEmpireSelectPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DGEmpireSelectPacket::IsInitialized() const {
  return true;
}

void DGEmpireSelectPacket::InternalSwap(DGEmpireSelectPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.empire_, other->_impl_.empire_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DGEmpireSelectPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dg_5fpackets_2eproto_getter, &descriptor_table_dg_5fpackets_2eproto_once,
      file_level_metadata_dg_5fpackets_2eproto[14]);
}

// ===================================================================

class DGP2PInfoPacket::_Internal {
 public:
};

DGP2PInfoPacket::DGP2PInfoPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.DGP2PInfoPacket)
}
DGP2PInfoPacket::DGP2PInfoPacket(const DGP2PInfoPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DGP2PInfoPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.host_){}
    , decltype(_impl_.port_){}
    , decltype(_impl_.listen_port_){}
    , decltype(_impl_.channel_){}
    , decltype(_impl_.processor_core_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.host_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.host_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_host().empty()) {
    _this->_impl_.host_.Set(from._internal_host(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.port_, &from._impl_.port_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.processor_core_) -
    reinterpret_cast<char*>(&_impl_.port_)) + sizeof(_impl_.processor_core_));
  // @@protoc_insertion_point(copy_constructor:network.DGP2PInfoPacket)
}

inline void DGP2PInfoPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.host_){}
    , decltype(_impl_.port_){0u}
    , decltype(_impl_.listen_port_){0u}
    , decltype(_impl_.channel_){0u}
    , decltype(_impl_.processor_core_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.host_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.host_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DGP2PInfoPacket::~DGP2PInfoPacket() {
  // @@protoc_insertion_point(destructor:network.DGP2PInfoPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DGP2PInfoPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.host_.Destroy();
}

void DGP2PInfoPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DGP2PInfoPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.DGP2PInfoPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.host_.ClearToEmpty();
  ::memset(&_impl_.port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.processor_core_) -
      reinterpret_cast<char*>(&_impl_.port_)) + sizeof(_impl_.processor_core_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DGP2PInfoPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes host = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_host();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 listen_port = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.listen_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 channel = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool processor_core = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.processor_core_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DGP2PInfoPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.DGP2PInfoPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes host = 1;
  if (!this->_internal_host().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_host(), target);
  }

  // uint32 port = 2;
  if (this->_internal_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_port(), target);
  }

  // uint32 listen_port = 3;
  if (this->_internal_listen_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_listen_port(), target);
  }

  // uint32 channel = 4;
  if (this->_internal_channel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_channel(), target);
  }

  // bool processor_core = 5;
  if (this->_internal_processor_core() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_processor_core(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.DGP2PInfoPacket)
  return target;
}

size_t DGP2PInfoPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.DGP2PInfoPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes host = 1;
  if (!this->_internal_host().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_host());
  }

  // uint32 port = 2;
  if (this->_internal_port() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_port());
  }

  // uint32 listen_port = 3;
  if (this->_internal_listen_port() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_listen_port());
  }

  // uint32 channel = 4;
  if (this->_internal_channel() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel());
  }

  // bool processor_core = 5;
  if (this->_internal_processor_core() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DGP2PInfoPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DGP2PInfoPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DGP2PInfoPacket::GetClassData() const { return &_class_data_; }


void DGP2PInfoPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DGP2PInfoPacket*>(&to_msg);
  auto& from = static_cast<const DGP2PInfoPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.DGP2PInfoPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_host().empty()) {
    _this->_internal_set_host(from._internal_host());
  }
  if (from._internal_port() != 0) {
    _this->_internal_set_port(from._internal_port());
  }
  if (from._internal_listen_port() != 0) {
    _this->_internal_set_listen_port(from._internal_listen_port());
  }
  if (from._internal_channel() != 0) {
    _this->_internal_set_channel(from._internal_channel());
  }
  if (from._internal_processor_core() != 0) {
    _this->_internal_set_processor_core(from._internal_processor_core());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DGP2PInfoPacket::CopyFrom(const DGP2PInfoPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.DGP2PInfoPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DGP2PInfoPacket::IsInitialized() const {
  return true;
}

void DGP2PInfoPacket::InternalSwap(DGP2PInfoPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.host_, lhs_arena,
      &other->_impl_.host_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DGP2PInfoPacket, _impl_.processor_core_)
      + sizeof(DGP2PInfoPacket::_impl_.processor_core_)
      - PROTOBUF_FIELD_OFFSET(DGP2PInfoPacket, _impl_.port_)>(
          reinterpret_cast<char*>(&_impl_.port_),
          reinterpret_cast<char*>(&other->_impl_.port_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DGP2PInfoPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dg_5fpackets_2eproto_getter, &descriptor_table_dg_5fpackets_2eproto_once,
      file_level_metadata_dg_5fpackets_2eproto[15]);
}

// ===================================================================

class DGLoginAlreadyPacket::_Internal {
 public:
};

DGLoginAlreadyPacket::DGLoginAlreadyPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.DGLoginAlreadyPacket)
}
DGLoginAlreadyPacket::DGLoginAlreadyPacket(const DGLoginAlreadyPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DGLoginAlreadyPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.login_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.login_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.login_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_login().empty()) {
    _this->_impl_.login_.Set(from._internal_login(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:network.DGLoginAlreadyPacket)
}

inline void DGLoginAlreadyPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.login_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.login_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.login_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DGLoginAlreadyPacket::~DGLoginAlreadyPacket() {
  // @@protoc_insertion_point(destructor:network.DGLoginAlreadyPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DGLoginAlreadyPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.login_.Destroy();
}

void DGLoginAlreadyPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DGLoginAlreadyPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.DGLoginAlreadyPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.login_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DGLoginAlreadyPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes login = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_login();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DGLoginAlreadyPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.DGLoginAlreadyPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes login = 1;
  if (!this->_internal_login().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_login(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.DGLoginAlreadyPacket)
  return target;
}

size_t DGLoginAlreadyPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.DGLoginAlreadyPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes login = 1;
  if (!this->_internal_login().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_login());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DGLoginAlreadyPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DGLoginAlreadyPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DGLoginAlreadyPacket::GetClassData() const { return &_class_data_; }


void DGLoginAlreadyPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DGLoginAlreadyPacket*>(&to_msg);
  auto& from = static_cast<const DGLoginAlreadyPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.DGLoginAlreadyPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_login().empty()) {
    _this->_internal_set_login(from._internal_login());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DGLoginAlreadyPacket::CopyFrom(const DGLoginAlreadyPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.DGLoginAlreadyPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DGLoginAlreadyPacket::IsInitialized() const {
  return true;
}

void DGLoginAlreadyPacket::InternalSwap(DGLoginAlreadyPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.login_, lhs_arena,
      &other->_impl_.login_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DGLoginAlreadyPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dg_5fpackets_2eproto_getter, &descriptor_table_dg_5fpackets_2eproto_once,
      file_level_metadata_dg_5fpackets_2eproto[16]);
}

// ===================================================================

class DGTimePacket::_Internal {
 public:
};

DGTimePacket::DGTimePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.DGTimePacket)
}
DGTimePacket::DGTimePacket(const DGTimePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DGTimePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.time_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.time_ = from._impl_.time_;
  // @@protoc_insertion_point(copy_constructor:network.DGTimePacket)
}

inline void DGTimePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.time_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DGTimePacket::~DGTimePacket() {
  // @@protoc_insertion_point(destructor:network.DGTimePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DGTimePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DGTimePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DGTimePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.DGTimePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.time_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DGTimePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DGTimePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.DGTimePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 time = 1;
  if (this->_internal_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.DGTimePacket)
  return target;
}

size_t DGTimePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.DGTimePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 time = 1;
  if (this->_internal_time() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_time());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DGTimePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DGTimePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DGTimePacket::GetClassData() const { return &_class_data_; }


void DGTimePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DGTimePacket*>(&to_msg);
  auto& from = static_cast<const DGTimePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.DGTimePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_time() != 0) {
    _this->_internal_set_time(from._internal_time());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DGTimePacket::CopyFrom(const DGTimePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.DGTimePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DGTimePacket::IsInitialized() const {
  return true;
}

void DGTimePacket::InternalSwap(DGTimePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.time_, other->_impl_.time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DGTimePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dg_5fpackets_2eproto_getter, &descriptor_table_dg_5fpackets_2eproto_once,
      file_level_metadata_dg_5fpackets_2eproto[17]);
}

// ===================================================================

class DGReloadShopTablePacket::_Internal {
 public:
};

void DGReloadShopTablePacket::clear_shops() {
  _impl_.shops_.Clear();
}
DGReloadShopTablePacket::DGReloadShopTablePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.DGReloadShopTablePacket)
}
DGReloadShopTablePacket::DGReloadShopTablePacket(const DGReloadShopTablePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DGReloadShopTablePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.shops_){from._impl_.shops_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:network.DGReloadShopTablePacket)
}

inline void DGReloadShopTablePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.shops_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DGReloadShopTablePacket::~DGReloadShopTablePacket() {
  // @@protoc_insertion_point(destructor:network.DGReloadShopTablePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DGReloadShopTablePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.shops_.~RepeatedPtrField();
}

void DGReloadShopTablePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DGReloadShopTablePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.DGReloadShopTablePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.shops_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DGReloadShopTablePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .network.TShopTable shops = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_shops(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DGReloadShopTablePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.DGReloadShopTablePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .network.TShopTable shops = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_shops_size()); i < n; i++) {
    const auto& repfield = this->_internal_shops(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.DGReloadShopTablePacket)
  return target;
}

size_t DGReloadShopTablePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.DGReloadShopTablePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .network.TShopTable shops = 1;
  total_size += 1UL * this->_internal_shops_size();
  for (const auto& msg : this->_impl_.shops_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DGReloadShopTablePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DGReloadShopTablePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DGReloadShopTablePacket::GetClassData() const { return &_class_data_; }


void DGReloadShopTablePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DGReloadShopTablePacket*>(&to_msg);
  auto& from = static_cast<const DGReloadShopTablePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.DGReloadShopTablePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.shops_.MergeFrom(from._impl_.shops_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DGReloadShopTablePacket::CopyFrom(const DGReloadShopTablePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.DGReloadShopTablePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DGReloadShopTablePacket::IsInitialized() const {
  return true;
}

void DGReloadShopTablePacket::InternalSwap(DGReloadShopTablePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.shops_.InternalSwap(&other->_impl_.shops_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DGReloadShopTablePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dg_5fpackets_2eproto_getter, &descriptor_table_dg_5fpackets_2eproto_once,
      file_level_metadata_dg_5fpackets_2eproto[18]);
}

// ===================================================================

class DGReloadMobProtoPacket::_Internal {
 public:
};

void DGReloadMobProtoPacket::clear_mobs() {
  _impl_.mobs_.Clear();
}
DGReloadMobProtoPacket::DGReloadMobProtoPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.DGReloadMobProtoPacket)
}
DGReloadMobProtoPacket::DGReloadMobProtoPacket(const DGReloadMobProtoPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DGReloadMobProtoPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.mobs_){from._impl_.mobs_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:network.DGReloadMobProtoPacket)
}

inline void DGReloadMobProtoPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.mobs_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DGReloadMobProtoPacket::~DGReloadMobProtoPacket() {
  // @@protoc_insertion_point(destructor:network.DGReloadMobProtoPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DGReloadMobProtoPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.mobs_.~RepeatedPtrField();
}

void DGReloadMobProtoPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DGReloadMobProtoPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.DGReloadMobProtoPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mobs_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DGReloadMobProtoPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .network.TMobTable mobs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mobs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DGReloadMobProtoPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.DGReloadMobProtoPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .network.TMobTable mobs = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_mobs_size()); i < n; i++) {
    const auto& repfield = this->_internal_mobs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.DGReloadMobProtoPacket)
  return target;
}

size_t DGReloadMobProtoPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.DGReloadMobProtoPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .network.TMobTable mobs = 1;
  total_size += 1UL * this->_internal_mobs_size();
  for (const auto& msg : this->_impl_.mobs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DGReloadMobProtoPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DGReloadMobProtoPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DGReloadMobProtoPacket::GetClassData() const { return &_class_data_; }


void DGReloadMobProtoPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DGReloadMobProtoPacket*>(&to_msg);
  auto& from = static_cast<const DGReloadMobProtoPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.DGReloadMobProtoPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.mobs_.MergeFrom(from._impl_.mobs_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DGReloadMobProtoPacket::CopyFrom(const DGReloadMobProtoPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.DGReloadMobProtoPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DGReloadMobProtoPacket::IsInitialized() const {
  return true;
}

void DGReloadMobProtoPacket::InternalSwap(DGReloadMobProtoPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.mobs_.InternalSwap(&other->_impl_.mobs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DGReloadMobProtoPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dg_5fpackets_2eproto_getter, &descriptor_table_dg_5fpackets_2eproto_once,
      file_level_metadata_dg_5fpackets_2eproto[19]);
}

// ===================================================================

class DGReloadProtoPacket::_Internal {
 public:
};

void DGReloadProtoPacket::clear_skills() {
  _impl_.skills_.Clear();
}
void DGReloadProtoPacket::clear_items() {
  _impl_.items_.Clear();
}
void DGReloadProtoPacket::clear_mobs() {
  _impl_.mobs_.Clear();
}
void DGReloadProtoPacket::clear_shops() {
  _impl_.shops_.Clear();
}
void DGReloadProtoPacket::clear_soul_protos() {
  _impl_.soul_protos_.Clear();
}
void DGReloadProtoPacket::clear_pet_skills() {
  _impl_.pet_skills_.Clear();
}
void DGReloadProtoPacket::clear_pet_evolves() {
  _impl_.pet_evolves_.Clear();
}
void DGReloadProtoPacket::clear_pet_attrs() {
  _impl_.pet_attrs_.Clear();
}
DGReloadProtoPacket::DGReloadProtoPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.DGReloadProtoPacket)
}
DGReloadProtoPacket::DGReloadProtoPacket(const DGReloadProtoPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DGReloadProtoPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.skills_){from._impl_.skills_}
    , decltype(_impl_.items_){from._impl_.items_}
    , decltype(_impl_.mobs_){from._impl_.mobs_}
    , decltype(_impl_.shops_){from._impl_.shops_}
    , decltype(_impl_.soul_protos_){from._impl_.soul_protos_}
    , decltype(_impl_.pet_skills_){from._impl_.pet_skills_}
    , decltype(_impl_.pet_evolves_){from._impl_.pet_evolves_}
    , decltype(_impl_.pet_attrs_){from._impl_.pet_attrs_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:network.DGReloadProtoPacket)
}

inline void DGReloadProtoPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.skills_){arena}
    , decltype(_impl_.items_){arena}
    , decltype(_impl_.mobs_){arena}
    , decltype(_impl_.shops_){arena}
    , decltype(_impl_.soul_protos_){arena}
    , decltype(_impl_.pet_skills_){arena}
    , decltype(_impl_.pet_evolves_){arena}
    , decltype(_impl_.pet_attrs_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DGReloadProtoPacket::~DGReloadProtoPacket() {
  // @@protoc_insertion_point(destructor:network.DGReloadProtoPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DGReloadProtoPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.skills_.~RepeatedPtrField();
  _impl_.items_.~RepeatedPtrField();
  _impl_.mobs_.~RepeatedPtrField();
  _impl_.shops_.~RepeatedPtrField();
  _impl_.soul_protos_.~RepeatedPtrField();
  _impl_.pet_skills_.~RepeatedPtrField();
  _impl_.pet_evolves_.~RepeatedPtrField();
  _impl_.pet_attrs_.~RepeatedPtrField();
}

void DGReloadProtoPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DGReloadProtoPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.DGReloadProtoPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.skills_.Clear();
  _impl_.items_.Clear();
  _impl_.mobs_.Clear();
  _impl_.shops_.Clear();
  _impl_.soul_protos_.Clear();
  _impl_.pet_skills_.Clear();
  _impl_.pet_evolves_.Clear();
  _impl_.pet_attrs_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DGReloadProtoPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .network.TSkillTable skills = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_skills(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .network.TItemTable items = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .network.TMobTable mobs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mobs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .network.TShopTable shops = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_shops(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .network.TSoulProtoTable soul_protos = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_soul_protos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .network.TPetAdvancedSkillProto pet_skills = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pet_skills(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .network.TPetAdvancedEvolveProto pet_evolves = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pet_evolves(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .network.TPetAdvancedAttrProto pet_attrs = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pet_attrs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DGReloadProtoPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.DGReloadProtoPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .network.TSkillTable skills = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_skills_size()); i < n; i++) {
    const auto& repfield = this->_internal_skills(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .network.TItemTable items = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .network.TMobTable mobs = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_mobs_size()); i < n; i++) {
    const auto& repfield = this->_internal_mobs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .network.TShopTable shops = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_shops_size()); i < n; i++) {
    const auto& repfield = this->_internal_shops(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .network.TSoulProtoTable soul_protos = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_soul_protos_size()); i < n; i++) {
    const auto& repfield = this->_internal_soul_protos(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .network.TPetAdvancedSkillProto pet_skills = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_pet_skills_size()); i < n; i++) {
    const auto& repfield = this->_internal_pet_skills(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .network.TPetAdvancedEvolveProto pet_evolves = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_pet_evolves_size()); i < n; i++) {
    const auto& repfield = this->_internal_pet_evolves(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .network.TPetAdvancedAttrProto pet_attrs = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_pet_attrs_size()); i < n; i++) {
    const auto& repfield = this->_internal_pet_attrs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.DGReloadProtoPacket)
  return target;
}

size_t DGReloadProtoPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.DGReloadProtoPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .network.TSkillTable skills = 1;
  total_size += 1UL * this->_internal_skills_size();
  for (const auto& msg : this->_impl_.skills_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .network.TItemTable items = 2;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .network.TMobTable mobs = 3;
  total_size += 1UL * this->_internal_mobs_size();
  for (const auto& msg : this->_impl_.mobs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .network.TShopTable shops = 4;
  total_size += 1UL * this->_internal_shops_size();
  for (const auto& msg : this->_impl_.shops_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .network.TSoulProtoTable soul_protos = 5;
  total_size += 1UL * this->_internal_soul_protos_size();
  for (const auto& msg : this->_impl_.soul_protos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .network.TPetAdvancedSkillProto pet_skills = 6;
  total_size += 1UL * this->_internal_pet_skills_size();
  for (const auto& msg : this->_impl_.pet_skills_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .network.TPetAdvancedEvolveProto pet_evolves = 7;
  total_size += 1UL * this->_internal_pet_evolves_size();
  for (const auto& msg : this->_impl_.pet_evolves_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .network.TPetAdvancedAttrProto pet_attrs = 8;
  total_size += 1UL * this->_internal_pet_attrs_size();
  for (const auto& msg : this->_impl_.pet_attrs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DGReloadProtoPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DGReloadProtoPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DGReloadProtoPacket::GetClassData() const { return &_class_data_; }


void DGReloadProtoPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DGReloadProtoPacket*>(&to_msg);
  auto& from = static_cast<const DGReloadProtoPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.DGReloadProtoPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.skills_.MergeFrom(from._impl_.skills_);
  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  _this->_impl_.mobs_.MergeFrom(from._impl_.mobs_);
  _this->_impl_.shops_.MergeFrom(from._impl_.shops_);
  _this->_impl_.soul_protos_.MergeFrom(from._impl_.soul_protos_);
  _this->_impl_.pet_skills_.MergeFrom(from._impl_.pet_skills_);
  _this->_impl_.pet_evolves_.MergeFrom(from._impl_.pet_evolves_);
  _this->_impl_.pet_attrs_.MergeFrom(from._impl_.pet_attrs_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DGReloadProtoPacket::CopyFrom(const DGReloadProtoPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.DGReloadProtoPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DGReloadProtoPacket::IsInitialized() const {
  return true;
}

void DGReloadProtoPacket::InternalSwap(DGReloadProtoPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.skills_.InternalSwap(&other->_impl_.skills_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
  _impl_.mobs_.InternalSwap(&other->_impl_.mobs_);
  _impl_.shops_.InternalSwap(&other->_impl_.shops_);
  _impl_.soul_protos_.InternalSwap(&other->_impl_.soul_protos_);
  _impl_.pet_skills_.InternalSwap(&other->_impl_.pet_skills_);
  _impl_.pet_evolves_.InternalSwap(&other->_impl_.pet_evolves_);
  _impl_.pet_attrs_.InternalSwap(&other->_impl_.pet_attrs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DGReloadProtoPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dg_5fpackets_2eproto_getter, &descriptor_table_dg_5fpackets_2eproto_once,
      file_level_metadata_dg_5fpackets_2eproto[20]);
}

// ===================================================================

class DGChangeNamePacket::_Internal {
 public:
};

DGChangeNamePacket::DGChangeNamePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.DGChangeNamePacket)
}
DGChangeNamePacket::DGChangeNamePacket(const DGChangeNamePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DGChangeNamePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.pid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.pid_ = from._impl_.pid_;
  // @@protoc_insertion_point(copy_constructor:network.DGChangeNamePacket)
}

inline void DGChangeNamePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.pid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DGChangeNamePacket::~DGChangeNamePacket() {
  // @@protoc_insertion_point(destructor:network.DGChangeNamePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DGChangeNamePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void DGChangeNamePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DGChangeNamePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.DGChangeNamePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.pid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DGChangeNamePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DGChangeNamePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.DGChangeNamePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pid(), target);
  }

  // bytes name = 2;
  if (!this->_internal_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.DGChangeNamePacket)
  return target;
}

size_t DGChangeNamePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.DGChangeNamePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DGChangeNamePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DGChangeNamePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DGChangeNamePacket::GetClassData() const { return &_class_data_; }


void DGChangeNamePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DGChangeNamePacket*>(&to_msg);
  auto& from = static_cast<const DGChangeNamePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.DGChangeNamePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_pid() != 0) {
    _this->_internal_set_pid(from._internal_pid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DGChangeNamePacket::CopyFrom(const DGChangeNamePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.DGChangeNamePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DGChangeNamePacket::IsInitialized() const {
  return true;
}

void DGChangeNamePacket::InternalSwap(DGChangeNamePacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.pid_, other->_impl_.pid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DGChangeNamePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dg_5fpackets_2eproto_getter, &descriptor_table_dg_5fpackets_2eproto_once,
      file_level_metadata_dg_5fpackets_2eproto[21]);
}

// ===================================================================

class DGAuthLoginPacket::_Internal {
 public:
};

DGAuthLoginPacket::DGAuthLoginPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.DGAuthLoginPacket)
}
DGAuthLoginPacket::DGAuthLoginPacket(const DGAuthLoginPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DGAuthLoginPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.result_ = from._impl_.result_;
  // @@protoc_insertion_point(copy_constructor:network.DGAuthLoginPacket)
}

inline void DGAuthLoginPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DGAuthLoginPacket::~DGAuthLoginPacket() {
  // @@protoc_insertion_point(destructor:network.DGAuthLoginPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DGAuthLoginPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DGAuthLoginPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DGAuthLoginPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.DGAuthLoginPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.result_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DGAuthLoginPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DGAuthLoginPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.DGAuthLoginPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.DGAuthLoginPacket)
  return target;
}

size_t DGAuthLoginPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.DGAuthLoginPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool result = 1;
  if (this->_internal_result() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DGAuthLoginPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DGAuthLoginPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DGAuthLoginPacket::GetClassData() const { return &_class_data_; }


void DGAuthLoginPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DGAuthLoginPacket*>(&to_msg);
  auto& from = static_cast<const DGAuthLoginPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.DGAuthLoginPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_result() != 0) {
    _this->_internal_set_result(from._internal_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DGAuthLoginPacket::CopyFrom(const DGAuthLoginPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.DGAuthLoginPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DGAuthLoginPacket::IsInitialized() const {
  return true;
}

void DGAuthLoginPacket::InternalSwap(DGAuthLoginPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.result_, other->_impl_.result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DGAuthLoginPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dg_5fpackets_2eproto_getter, &descriptor_table_dg_5fpackets_2eproto_once,
      file_level_metadata_dg_5fpackets_2eproto[22]);
}

// ===================================================================

class DGChangeEmpirePrivPacket::_Internal {
 public:
};

DGChangeEmpirePrivPacket::DGChangeEmpirePrivPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.DGChangeEmpirePrivPacket)
}
DGChangeEmpirePrivPacket::DGChangeEmpirePrivPacket(const DGChangeEmpirePrivPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DGChangeEmpirePrivPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , decltype(_impl_.value_){}
    , decltype(_impl_.empire_){}
    , decltype(_impl_.log_){}
    , decltype(_impl_.end_time_sec_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.end_time_sec_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.end_time_sec_));
  // @@protoc_insertion_point(copy_constructor:network.DGChangeEmpirePrivPacket)
}

inline void DGChangeEmpirePrivPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){0u}
    , decltype(_impl_.value_){0}
    , decltype(_impl_.empire_){0u}
    , decltype(_impl_.log_){false}
    , decltype(_impl_.end_time_sec_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DGChangeEmpirePrivPacket::~DGChangeEmpirePrivPacket() {
  // @@protoc_insertion_point(destructor:network.DGChangeEmpirePrivPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DGChangeEmpirePrivPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DGChangeEmpirePrivPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DGChangeEmpirePrivPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.DGChangeEmpirePrivPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.end_time_sec_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.end_time_sec_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DGChangeEmpirePrivPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 empire = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.empire_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool log = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.log_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 end_time_sec = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.end_time_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DGChangeEmpirePrivPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.DGChangeEmpirePrivPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // int32 value = 2;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_value(), target);
  }

  // uint32 empire = 3;
  if (this->_internal_empire() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_empire(), target);
  }

  // bool log = 4;
  if (this->_internal_log() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_log(), target);
  }

  // uint32 end_time_sec = 5;
  if (this->_internal_end_time_sec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_end_time_sec(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.DGChangeEmpirePrivPacket)
  return target;
}

size_t DGChangeEmpirePrivPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.DGChangeEmpirePrivPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
  }

  // int32 value = 2;
  if (this->_internal_value() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_value());
  }

  // uint32 empire = 3;
  if (this->_internal_empire() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_empire());
  }

  // bool log = 4;
  if (this->_internal_log() != 0) {
    total_size += 1 + 1;
  }

  // uint32 end_time_sec = 5;
  if (this->_internal_end_time_sec() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_end_time_sec());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DGChangeEmpirePrivPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DGChangeEmpirePrivPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DGChangeEmpirePrivPacket::GetClassData() const { return &_class_data_; }


void DGChangeEmpirePrivPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DGChangeEmpirePrivPacket*>(&to_msg);
  auto& from = static_cast<const DGChangeEmpirePrivPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.DGChangeEmpirePrivPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_value() != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  if (from._internal_empire() != 0) {
    _this->_internal_set_empire(from._internal_empire());
  }
  if (from._internal_log() != 0) {
    _this->_internal_set_log(from._internal_log());
  }
  if (from._internal_end_time_sec() != 0) {
    _this->_internal_set_end_time_sec(from._internal_end_time_sec());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DGChangeEmpirePrivPacket::CopyFrom(const DGChangeEmpirePrivPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.DGChangeEmpirePrivPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DGChangeEmpirePrivPacket::IsInitialized() const {
  return true;
}

void DGChangeEmpirePrivPacket::InternalSwap(DGChangeEmpirePrivPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DGChangeEmpirePrivPacket, _impl_.end_time_sec_)
      + sizeof(DGChangeEmpirePrivPacket::_impl_.end_time_sec_)
      - PROTOBUF_FIELD_OFFSET(DGChangeEmpirePrivPacket, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DGChangeEmpirePrivPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dg_5fpackets_2eproto_getter, &descriptor_table_dg_5fpackets_2eproto_once,
      file_level_metadata_dg_5fpackets_2eproto[23]);
}

// ===================================================================

class DGChangeGuildPrivPacket::_Internal {
 public:
};

DGChangeGuildPrivPacket::DGChangeGuildPrivPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.DGChangeGuildPrivPacket)
}
DGChangeGuildPrivPacket::DGChangeGuildPrivPacket(const DGChangeGuildPrivPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DGChangeGuildPrivPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , decltype(_impl_.value_){}
    , decltype(_impl_.guild_id_){}
    , decltype(_impl_.log_){}
    , decltype(_impl_.end_time_sec_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.end_time_sec_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.end_time_sec_));
  // @@protoc_insertion_point(copy_constructor:network.DGChangeGuildPrivPacket)
}

inline void DGChangeGuildPrivPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){0u}
    , decltype(_impl_.value_){0}
    , decltype(_impl_.guild_id_){0u}
    , decltype(_impl_.log_){false}
    , decltype(_impl_.end_time_sec_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DGChangeGuildPrivPacket::~DGChangeGuildPrivPacket() {
  // @@protoc_insertion_point(destructor:network.DGChangeGuildPrivPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DGChangeGuildPrivPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DGChangeGuildPrivPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DGChangeGuildPrivPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.DGChangeGuildPrivPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.end_time_sec_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.end_time_sec_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DGChangeGuildPrivPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 guild_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool log = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.log_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 end_time_sec = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.end_time_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DGChangeGuildPrivPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.DGChangeGuildPrivPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // int32 value = 2;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_value(), target);
  }

  // uint32 guild_id = 3;
  if (this->_internal_guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_guild_id(), target);
  }

  // bool log = 4;
  if (this->_internal_log() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_log(), target);
  }

  // uint32 end_time_sec = 5;
  if (this->_internal_end_time_sec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_end_time_sec(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.DGChangeGuildPrivPacket)
  return target;
}

size_t DGChangeGuildPrivPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.DGChangeGuildPrivPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
  }

  // int32 value = 2;
  if (this->_internal_value() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_value());
  }

  // uint32 guild_id = 3;
  if (this->_internal_guild_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_guild_id());
  }

  // bool log = 4;
  if (this->_internal_log() != 0) {
    total_size += 1 + 1;
  }

  // uint32 end_time_sec = 5;
  if (this->_internal_end_time_sec() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_end_time_sec());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DGChangeGuildPrivPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DGChangeGuildPrivPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DGChangeGuildPrivPacket::GetClassData() const { return &_class_data_; }


void DGChangeGuildPrivPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DGChangeGuildPrivPacket*>(&to_msg);
  auto& from = static_cast<const DGChangeGuildPrivPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.DGChangeGuildPrivPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_value() != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  if (from._internal_guild_id() != 0) {
    _this->_internal_set_guild_id(from._internal_guild_id());
  }
  if (from._internal_log() != 0) {
    _this->_internal_set_log(from._internal_log());
  }
  if (from._internal_end_time_sec() != 0) {
    _this->_internal_set_end_time_sec(from._internal_end_time_sec());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DGChangeGuildPrivPacket::CopyFrom(const DGChangeGuildPrivPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.DGChangeGuildPrivPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DGChangeGuildPrivPacket::IsInitialized() const {
  return true;
}

void DGChangeGuildPrivPacket::InternalSwap(DGChangeGuildPrivPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DGChangeGuildPrivPacket, _impl_.end_time_sec_)
      + sizeof(DGChangeGuildPrivPacket::_impl_.end_time_sec_)
      - PROTOBUF_FIELD_OFFSET(DGChangeGuildPrivPacket, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DGChangeGuildPrivPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dg_5fpackets_2eproto_getter, &descriptor_table_dg_5fpackets_2eproto_once,
      file_level_metadata_dg_5fpackets_2eproto[24]);
}

// ===================================================================

class DGChangeCharacterPrivPacket::_Internal {
 public:
};

DGChangeCharacterPrivPacket::DGChangeCharacterPrivPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.DGChangeCharacterPrivPacket)
}
DGChangeCharacterPrivPacket::DGChangeCharacterPrivPacket(const DGChangeCharacterPrivPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DGChangeCharacterPrivPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , decltype(_impl_.value_){}
    , decltype(_impl_.pid_){}
    , decltype(_impl_.log_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.log_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.log_));
  // @@protoc_insertion_point(copy_constructor:network.DGChangeCharacterPrivPacket)
}

inline void DGChangeCharacterPrivPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){0u}
    , decltype(_impl_.value_){0}
    , decltype(_impl_.pid_){0u}
    , decltype(_impl_.log_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DGChangeCharacterPrivPacket::~DGChangeCharacterPrivPacket() {
  // @@protoc_insertion_point(destructor:network.DGChangeCharacterPrivPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DGChangeCharacterPrivPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DGChangeCharacterPrivPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DGChangeCharacterPrivPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.DGChangeCharacterPrivPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.log_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.log_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DGChangeCharacterPrivPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 pid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool log = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.log_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DGChangeCharacterPrivPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.DGChangeCharacterPrivPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // int32 value = 2;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_value(), target);
  }

  // uint32 pid = 3;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_pid(), target);
  }

  // bool log = 4;
  if (this->_internal_log() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_log(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.DGChangeCharacterPrivPacket)
  return target;
}

size_t DGChangeCharacterPrivPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.DGChangeCharacterPrivPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
  }

  // int32 value = 2;
  if (this->_internal_value() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_value());
  }

  // uint32 pid = 3;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid());
  }

  // bool log = 4;
  if (this->_internal_log() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DGChangeCharacterPrivPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DGChangeCharacterPrivPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DGChangeCharacterPrivPacket::GetClassData() const { return &_class_data_; }


void DGChangeCharacterPrivPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DGChangeCharacterPrivPacket*>(&to_msg);
  auto& from = static_cast<const DGChangeCharacterPrivPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.DGChangeCharacterPrivPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_value() != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  if (from._internal_pid() != 0) {
    _this->_internal_set_pid(from._internal_pid());
  }
  if (from._internal_log() != 0) {
    _this->_internal_set_log(from._internal_log());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DGChangeCharacterPrivPacket::CopyFrom(const DGChangeCharacterPrivPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.DGChangeCharacterPrivPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DGChangeCharacterPrivPacket::IsInitialized() const {
  return true;
}

void DGChangeCharacterPrivPacket::InternalSwap(DGChangeCharacterPrivPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DGChangeCharacterPrivPacket, _impl_.log_)
      + sizeof(DGChangeCharacterPrivPacket::_impl_.log_)
      - PROTOBUF_FIELD_OFFSET(DGChangeCharacterPrivPacket, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DGChangeCharacterPrivPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dg_5fpackets_2eproto_getter, &descriptor_table_dg_5fpackets_2eproto_once,
      file_level_metadata_dg_5fpackets_2eproto[25]);
}

// ===================================================================

class DGMoneyLogPacket::_Internal {
 public:
};

DGMoneyLogPacket::DGMoneyLogPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.DGMoneyLogPacket)
}
DGMoneyLogPacket::DGMoneyLogPacket(const DGMoneyLogPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DGMoneyLogPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , decltype(_impl_.vnum_){}
    , decltype(_impl_.gold_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.gold_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.gold_));
  // @@protoc_insertion_point(copy_constructor:network.DGMoneyLogPacket)
}

inline void DGMoneyLogPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){0u}
    , decltype(_impl_.vnum_){0u}
    , decltype(_impl_.gold_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DGMoneyLogPacket::~DGMoneyLogPacket() {
  // @@protoc_insertion_point(destructor:network.DGMoneyLogPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DGMoneyLogPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DGMoneyLogPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DGMoneyLogPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.DGMoneyLogPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.gold_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.gold_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DGMoneyLogPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 vnum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.vnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 gold = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DGMoneyLogPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.DGMoneyLogPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // uint32 vnum = 2;
  if (this->_internal_vnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_vnum(), target);
  }

  // uint64 gold = 3;
  if (this->_internal_gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_gold(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.DGMoneyLogPacket)
  return target;
}

size_t DGMoneyLogPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.DGMoneyLogPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
  }

  // uint32 vnum = 2;
  if (this->_internal_vnum() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_vnum());
  }

  // uint64 gold = 3;
  if (this->_internal_gold() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_gold());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DGMoneyLogPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DGMoneyLogPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DGMoneyLogPacket::GetClassData() const { return &_class_data_; }


void DGMoneyLogPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DGMoneyLogPacket*>(&to_msg);
  auto& from = static_cast<const DGMoneyLogPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.DGMoneyLogPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_vnum() != 0) {
    _this->_internal_set_vnum(from._internal_vnum());
  }
  if (from._internal_gold() != 0) {
    _this->_internal_set_gold(from._internal_gold());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DGMoneyLogPacket::CopyFrom(const DGMoneyLogPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.DGMoneyLogPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DGMoneyLogPacket::IsInitialized() const {
  return true;
}

void DGMoneyLogPacket::InternalSwap(DGMoneyLogPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DGMoneyLogPacket, _impl_.gold_)
      + sizeof(DGMoneyLogPacket::_impl_.gold_)
      - PROTOBUF_FIELD_OFFSET(DGMoneyLogPacket, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DGMoneyLogPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dg_5fpackets_2eproto_getter, &descriptor_table_dg_5fpackets_2eproto_once,
      file_level_metadata_dg_5fpackets_2eproto[26]);
}

// ===================================================================

class DGSetEventFlagPacket::_Internal {
 public:
};

DGSetEventFlagPacket::DGSetEventFlagPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.DGSetEventFlagPacket)
}
DGSetEventFlagPacket::DGSetEventFlagPacket(const DGSetEventFlagPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DGSetEventFlagPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.flag_name_){}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.flag_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.flag_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_flag_name().empty()) {
    _this->_impl_.flag_name_.Set(from._internal_flag_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.value_ = from._impl_.value_;
  // @@protoc_insertion_point(copy_constructor:network.DGSetEventFlagPacket)
}

inline void DGSetEventFlagPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.flag_name_){}
    , decltype(_impl_.value_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.flag_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.flag_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DGSetEventFlagPacket::~DGSetEventFlagPacket() {
  // @@protoc_insertion_point(destructor:network.DGSetEventFlagPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DGSetEventFlagPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.flag_name_.Destroy();
}

void DGSetEventFlagPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DGSetEventFlagPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.DGSetEventFlagPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.flag_name_.ClearToEmpty();
  _impl_.value_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DGSetEventFlagPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes flag_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_flag_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DGSetEventFlagPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.DGSetEventFlagPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes flag_name = 1;
  if (!this->_internal_flag_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_flag_name(), target);
  }

  // int32 value = 2;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.DGSetEventFlagPacket)
  return target;
}

size_t DGSetEventFlagPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.DGSetEventFlagPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes flag_name = 1;
  if (!this->_internal_flag_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_flag_name());
  }

  // int32 value = 2;
  if (this->_internal_value() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DGSetEventFlagPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DGSetEventFlagPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DGSetEventFlagPacket::GetClassData() const { return &_class_data_; }


void DGSetEventFlagPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DGSetEventFlagPacket*>(&to_msg);
  auto& from = static_cast<const DGSetEventFlagPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.DGSetEventFlagPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_flag_name().empty()) {
    _this->_internal_set_flag_name(from._internal_flag_name());
  }
  if (from._internal_value() != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DGSetEventFlagPacket::CopyFrom(const DGSetEventFlagPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.DGSetEventFlagPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DGSetEventFlagPacket::IsInitialized() const {
  return true;
}

void DGSetEventFlagPacket::InternalSwap(DGSetEventFlagPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.flag_name_, lhs_arena,
      &other->_impl_.flag_name_, rhs_arena
  );
  swap(_impl_.value_, other->_impl_.value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DGSetEventFlagPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dg_5fpackets_2eproto_getter, &descriptor_table_dg_5fpackets_2eproto_once,
      file_level_metadata_dg_5fpackets_2eproto[27]);
}

// ===================================================================

class DGVCardPacket::_Internal {
 public:
};

DGVCardPacket::DGVCardPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.DGVCardPacket)
}
DGVCardPacket::DGVCardPacket(const DGVCardPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DGVCardPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sell_character_){}
    , decltype(_impl_.sell_account_){}
    , decltype(_impl_.buy_character_){}
    , decltype(_impl_.buy_account_){}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sell_character_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sell_character_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sell_character().empty()) {
    _this->_impl_.sell_character_.Set(from._internal_sell_character(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sell_account_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sell_account_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sell_account().empty()) {
    _this->_impl_.sell_account_.Set(from._internal_sell_account(), 
      _this->GetArenaForAllocation());
  }
  _impl_.buy_character_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.buy_character_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_buy_character().empty()) {
    _this->_impl_.buy_character_.Set(from._internal_buy_character(), 
      _this->GetArenaForAllocation());
  }
  _impl_.buy_account_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.buy_account_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_buy_account().empty()) {
    _this->_impl_.buy_account_.Set(from._internal_buy_account(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:network.DGVCardPacket)
}

inline void DGVCardPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.sell_character_){}
    , decltype(_impl_.sell_account_){}
    , decltype(_impl_.buy_character_){}
    , decltype(_impl_.buy_account_){}
    , decltype(_impl_.id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.sell_character_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sell_character_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sell_account_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sell_account_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.buy_character_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.buy_character_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.buy_account_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.buy_account_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DGVCardPacket::~DGVCardPacket() {
  // @@protoc_insertion_point(destructor:network.DGVCardPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DGVCardPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sell_character_.Destroy();
  _impl_.sell_account_.Destroy();
  _impl_.buy_character_.Destroy();
  _impl_.buy_account_.Destroy();
}

void DGVCardPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DGVCardPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.DGVCardPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sell_character_.ClearToEmpty();
  _impl_.sell_account_.ClearToEmpty();
  _impl_.buy_character_.ClearToEmpty();
  _impl_.buy_account_.ClearToEmpty();
  _impl_.id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DGVCardPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes sell_character = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_sell_character();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes sell_account = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_sell_account();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes buy_character = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_buy_character();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes buy_account = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_buy_account();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DGVCardPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.DGVCardPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // bytes sell_character = 2;
  if (!this->_internal_sell_character().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_sell_character(), target);
  }

  // bytes sell_account = 3;
  if (!this->_internal_sell_account().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_sell_account(), target);
  }

  // bytes buy_character = 4;
  if (!this->_internal_buy_character().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_buy_character(), target);
  }

  // bytes buy_account = 5;
  if (!this->_internal_buy_account().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_buy_account(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.DGVCardPacket)
  return target;
}

size_t DGVCardPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.DGVCardPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes sell_character = 2;
  if (!this->_internal_sell_character().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sell_character());
  }

  // bytes sell_account = 3;
  if (!this->_internal_sell_account().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sell_account());
  }

  // bytes buy_character = 4;
  if (!this->_internal_buy_character().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_buy_character());
  }

  // bytes buy_account = 5;
  if (!this->_internal_buy_account().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_buy_account());
  }

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DGVCardPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DGVCardPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DGVCardPacket::GetClassData() const { return &_class_data_; }


void DGVCardPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DGVCardPacket*>(&to_msg);
  auto& from = static_cast<const DGVCardPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.DGVCardPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sell_character().empty()) {
    _this->_internal_set_sell_character(from._internal_sell_character());
  }
  if (!from._internal_sell_account().empty()) {
    _this->_internal_set_sell_account(from._internal_sell_account());
  }
  if (!from._internal_buy_character().empty()) {
    _this->_internal_set_buy_character(from._internal_buy_character());
  }
  if (!from._internal_buy_account().empty()) {
    _this->_internal_set_buy_account(from._internal_buy_account());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DGVCardPacket::CopyFrom(const DGVCardPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.DGVCardPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DGVCardPacket::IsInitialized() const {
  return true;
}

void DGVCardPacket::InternalSwap(DGVCardPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sell_character_, lhs_arena,
      &other->_impl_.sell_character_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sell_account_, lhs_arena,
      &other->_impl_.sell_account_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.buy_character_, lhs_arena,
      &other->_impl_.buy_character_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.buy_account_, lhs_arena,
      &other->_impl_.buy_account_, rhs_arena
  );
  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DGVCardPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dg_5fpackets_2eproto_getter, &descriptor_table_dg_5fpackets_2eproto_once,
      file_level_metadata_dg_5fpackets_2eproto[28]);
}

// ===================================================================

class DGNoticePacket::_Internal {
 public:
};

DGNoticePacket::DGNoticePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.DGNoticePacket)
}
DGNoticePacket::DGNoticePacket(const DGNoticePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DGNoticePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.notice_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.notice_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.notice_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_notice().empty()) {
    _this->_impl_.notice_.Set(from._internal_notice(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:network.DGNoticePacket)
}

inline void DGNoticePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.notice_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.notice_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.notice_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DGNoticePacket::~DGNoticePacket() {
  // @@protoc_insertion_point(destructor:network.DGNoticePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DGNoticePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.notice_.Destroy();
}

void DGNoticePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DGNoticePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.DGNoticePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.notice_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DGNoticePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes notice = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_notice();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DGNoticePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.DGNoticePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes notice = 1;
  if (!this->_internal_notice().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_notice(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.DGNoticePacket)
  return target;
}

size_t DGNoticePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.DGNoticePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes notice = 1;
  if (!this->_internal_notice().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_notice());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DGNoticePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DGNoticePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DGNoticePacket::GetClassData() const { return &_class_data_; }


void DGNoticePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DGNoticePacket*>(&to_msg);
  auto& from = static_cast<const DGNoticePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.DGNoticePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_notice().empty()) {
    _this->_internal_set_notice(from._internal_notice());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DGNoticePacket::CopyFrom(const DGNoticePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.DGNoticePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DGNoticePacket::IsInitialized() const {
  return true;
}

void DGNoticePacket::InternalSwap(DGNoticePacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.notice_, lhs_arena,
      &other->_impl_.notice_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DGNoticePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dg_5fpackets_2eproto_getter, &descriptor_table_dg_5fpackets_2eproto_once,
      file_level_metadata_dg_5fpackets_2eproto[29]);
}

// ===================================================================

class DGAddBlockCountryIPPacket::_Internal {
 public:
};

DGAddBlockCountryIPPacket::DGAddBlockCountryIPPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.DGAddBlockCountryIPPacket)
}
DGAddBlockCountryIPPacket::DGAddBlockCountryIPPacket(const DGAddBlockCountryIPPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DGAddBlockCountryIPPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ip_from_){}
    , decltype(_impl_.ip_to_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.ip_from_, &from._impl_.ip_from_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ip_to_) -
    reinterpret_cast<char*>(&_impl_.ip_from_)) + sizeof(_impl_.ip_to_));
  // @@protoc_insertion_point(copy_constructor:network.DGAddBlockCountryIPPacket)
}

inline void DGAddBlockCountryIPPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ip_from_){0u}
    , decltype(_impl_.ip_to_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DGAddBlockCountryIPPacket::~DGAddBlockCountryIPPacket() {
  // @@protoc_insertion_point(destructor:network.DGAddBlockCountryIPPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DGAddBlockCountryIPPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DGAddBlockCountryIPPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DGAddBlockCountryIPPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.DGAddBlockCountryIPPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.ip_from_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.ip_to_) -
      reinterpret_cast<char*>(&_impl_.ip_from_)) + sizeof(_impl_.ip_to_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DGAddBlockCountryIPPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 ip_from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.ip_from_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 ip_to = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.ip_to_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DGAddBlockCountryIPPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.DGAddBlockCountryIPPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 ip_from = 1;
  if (this->_internal_ip_from() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_ip_from(), target);
  }

  // uint32 ip_to = 2;
  if (this->_internal_ip_to() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_ip_to(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.DGAddBlockCountryIPPacket)
  return target;
}

size_t DGAddBlockCountryIPPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.DGAddBlockCountryIPPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 ip_from = 1;
  if (this->_internal_ip_from() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ip_from());
  }

  // uint32 ip_to = 2;
  if (this->_internal_ip_to() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ip_to());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DGAddBlockCountryIPPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DGAddBlockCountryIPPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DGAddBlockCountryIPPacket::GetClassData() const { return &_class_data_; }


void DGAddBlockCountryIPPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DGAddBlockCountryIPPacket*>(&to_msg);
  auto& from = static_cast<const DGAddBlockCountryIPPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.DGAddBlockCountryIPPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_ip_from() != 0) {
    _this->_internal_set_ip_from(from._internal_ip_from());
  }
  if (from._internal_ip_to() != 0) {
    _this->_internal_set_ip_to(from._internal_ip_to());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DGAddBlockCountryIPPacket::CopyFrom(const DGAddBlockCountryIPPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.DGAddBlockCountryIPPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DGAddBlockCountryIPPacket::IsInitialized() const {
  return true;
}

void DGAddBlockCountryIPPacket::InternalSwap(DGAddBlockCountryIPPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DGAddBlockCountryIPPacket, _impl_.ip_to_)
      + sizeof(DGAddBlockCountryIPPacket::_impl_.ip_to_)
      - PROTOBUF_FIELD_OFFSET(DGAddBlockCountryIPPacket, _impl_.ip_from_)>(
          reinterpret_cast<char*>(&_impl_.ip_from_),
          reinterpret_cast<char*>(&other->_impl_.ip_from_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DGAddBlockCountryIPPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dg_5fpackets_2eproto_getter, &descriptor_table_dg_5fpackets_2eproto_once,
      file_level_metadata_dg_5fpackets_2eproto[30]);
}

// ===================================================================

class DGBlockExceptionPacket::_Internal {
 public:
};

DGBlockExceptionPacket::DGBlockExceptionPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.DGBlockExceptionPacket)
}
DGBlockExceptionPacket::DGBlockExceptionPacket(const DGBlockExceptionPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DGBlockExceptionPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.login_){}
    , decltype(_impl_.cmd_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.login_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.login_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_login().empty()) {
    _this->_impl_.login_.Set(from._internal_login(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.cmd_ = from._impl_.cmd_;
  // @@protoc_insertion_point(copy_constructor:network.DGBlockExceptionPacket)
}

inline void DGBlockExceptionPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.login_){}
    , decltype(_impl_.cmd_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.login_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.login_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DGBlockExceptionPacket::~DGBlockExceptionPacket() {
  // @@protoc_insertion_point(destructor:network.DGBlockExceptionPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DGBlockExceptionPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.login_.Destroy();
}

void DGBlockExceptionPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DGBlockExceptionPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.DGBlockExceptionPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.login_.ClearToEmpty();
  _impl_.cmd_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DGBlockExceptionPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 cmd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.cmd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes login = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_login();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DGBlockExceptionPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.DGBlockExceptionPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 cmd = 1;
  if (this->_internal_cmd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_cmd(), target);
  }

  // bytes login = 2;
  if (!this->_internal_login().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_login(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.DGBlockExceptionPacket)
  return target;
}

size_t DGBlockExceptionPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.DGBlockExceptionPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes login = 2;
  if (!this->_internal_login().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_login());
  }

  // uint32 cmd = 1;
  if (this->_internal_cmd() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_cmd());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DGBlockExceptionPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DGBlockExceptionPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DGBlockExceptionPacket::GetClassData() const { return &_class_data_; }


void DGBlockExceptionPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DGBlockExceptionPacket*>(&to_msg);
  auto& from = static_cast<const DGBlockExceptionPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.DGBlockExceptionPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_login().empty()) {
    _this->_internal_set_login(from._internal_login());
  }
  if (from._internal_cmd() != 0) {
    _this->_internal_set_cmd(from._internal_cmd());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DGBlockExceptionPacket::CopyFrom(const DGBlockExceptionPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.DGBlockExceptionPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DGBlockExceptionPacket::IsInitialized() const {
  return true;
}

void DGBlockExceptionPacket::InternalSwap(DGBlockExceptionPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.login_, lhs_arena,
      &other->_impl_.login_, rhs_arena
  );
  swap(_impl_.cmd_, other->_impl_.cmd_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DGBlockExceptionPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dg_5fpackets_2eproto_getter, &descriptor_table_dg_5fpackets_2eproto_once,
      file_level_metadata_dg_5fpackets_2eproto[31]);
}

// ===================================================================

class DGMyShopPricelistPacket::_Internal {
 public:
};

void DGMyShopPricelistPacket::clear_price_info() {
  _impl_.price_info_.Clear();
}
DGMyShopPricelistPacket::DGMyShopPricelistPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.DGMyShopPricelistPacket)
}
DGMyShopPricelistPacket::DGMyShopPricelistPacket(const DGMyShopPricelistPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DGMyShopPricelistPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.price_info_){from._impl_.price_info_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:network.DGMyShopPricelistPacket)
}

inline void DGMyShopPricelistPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.price_info_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DGMyShopPricelistPacket::~DGMyShopPricelistPacket() {
  // @@protoc_insertion_point(destructor:network.DGMyShopPricelistPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DGMyShopPricelistPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.price_info_.~RepeatedPtrField();
}

void DGMyShopPricelistPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DGMyShopPricelistPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.DGMyShopPricelistPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.price_info_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DGMyShopPricelistPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .network.TItemPriceInfo price_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_price_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DGMyShopPricelistPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.DGMyShopPricelistPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .network.TItemPriceInfo price_info = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_price_info_size()); i < n; i++) {
    const auto& repfield = this->_internal_price_info(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.DGMyShopPricelistPacket)
  return target;
}

size_t DGMyShopPricelistPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.DGMyShopPricelistPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .network.TItemPriceInfo price_info = 1;
  total_size += 1UL * this->_internal_price_info_size();
  for (const auto& msg : this->_impl_.price_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DGMyShopPricelistPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DGMyShopPricelistPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DGMyShopPricelistPacket::GetClassData() const { return &_class_data_; }


void DGMyShopPricelistPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DGMyShopPricelistPacket*>(&to_msg);
  auto& from = static_cast<const DGMyShopPricelistPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.DGMyShopPricelistPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.price_info_.MergeFrom(from._impl_.price_info_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DGMyShopPricelistPacket::CopyFrom(const DGMyShopPricelistPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.DGMyShopPricelistPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DGMyShopPricelistPacket::IsInitialized() const {
  return true;
}

void DGMyShopPricelistPacket::InternalSwap(DGMyShopPricelistPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.price_info_.InternalSwap(&other->_impl_.price_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DGMyShopPricelistPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dg_5fpackets_2eproto_getter, &descriptor_table_dg_5fpackets_2eproto_once,
      file_level_metadata_dg_5fpackets_2eproto[32]);
}

// ===================================================================

class DGReloadAdminPacket::_Internal {
 public:
};

void DGReloadAdminPacket::clear_admins() {
  _impl_.admins_.Clear();
}
DGReloadAdminPacket::DGReloadAdminPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.DGReloadAdminPacket)
}
DGReloadAdminPacket::DGReloadAdminPacket(const DGReloadAdminPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DGReloadAdminPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.admins_){from._impl_.admins_}
    , decltype(_impl_.admin_configs_){from._impl_.admin_configs_}
    , /*decltype(_impl_._admin_configs_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:network.DGReloadAdminPacket)
}

inline void DGReloadAdminPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.admins_){arena}
    , decltype(_impl_.admin_configs_){arena}
    , /*decltype(_impl_._admin_configs_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DGReloadAdminPacket::~DGReloadAdminPacket() {
  // @@protoc_insertion_point(destructor:network.DGReloadAdminPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DGReloadAdminPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.admins_.~RepeatedPtrField();
  _impl_.admin_configs_.~RepeatedField();
}

void DGReloadAdminPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DGReloadAdminPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.DGReloadAdminPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.admins_.Clear();
  _impl_.admin_configs_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DGReloadAdminPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .network.TAdminInfo admins = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_admins(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 admin_configs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_admin_configs(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_admin_configs(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DGReloadAdminPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.DGReloadAdminPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .network.TAdminInfo admins = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_admins_size()); i < n; i++) {
    const auto& repfield = this->_internal_admins(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated uint32 admin_configs = 2;
  {
    int byte_size = _impl_._admin_configs_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          2, _internal_admin_configs(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.DGReloadAdminPacket)
  return target;
}

size_t DGReloadAdminPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.DGReloadAdminPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .network.TAdminInfo admins = 1;
  total_size += 1UL * this->_internal_admins_size();
  for (const auto& msg : this->_impl_.admins_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 admin_configs = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.admin_configs_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._admin_configs_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DGReloadAdminPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DGReloadAdminPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DGReloadAdminPacket::GetClassData() const { return &_class_data_; }


void DGReloadAdminPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DGReloadAdminPacket*>(&to_msg);
  auto& from = static_cast<const DGReloadAdminPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.DGReloadAdminPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.admins_.MergeFrom(from._impl_.admins_);
  _this->_impl_.admin_configs_.MergeFrom(from._impl_.admin_configs_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DGReloadAdminPacket::CopyFrom(const DGReloadAdminPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.DGReloadAdminPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DGReloadAdminPacket::IsInitialized() const {
  return true;
}

void DGReloadAdminPacket::InternalSwap(DGReloadAdminPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.admins_.InternalSwap(&other->_impl_.admins_);
  _impl_.admin_configs_.InternalSwap(&other->_impl_.admin_configs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DGReloadAdminPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dg_5fpackets_2eproto_getter, &descriptor_table_dg_5fpackets_2eproto_once,
      file_level_metadata_dg_5fpackets_2eproto[33]);
}

// ===================================================================

class DGDetailLogPacket::_Internal {
 public:
};

DGDetailLogPacket::DGDetailLogPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.DGDetailLogPacket)
}
DGDetailLogPacket::DGDetailLogPacket(const DGDetailLogPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DGDetailLogPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.pid_ = from._impl_.pid_;
  // @@protoc_insertion_point(copy_constructor:network.DGDetailLogPacket)
}

inline void DGDetailLogPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DGDetailLogPacket::~DGDetailLogPacket() {
  // @@protoc_insertion_point(destructor:network.DGDetailLogPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DGDetailLogPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DGDetailLogPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DGDetailLogPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.DGDetailLogPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DGDetailLogPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DGDetailLogPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.DGDetailLogPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.DGDetailLogPacket)
  return target;
}

size_t DGDetailLogPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.DGDetailLogPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DGDetailLogPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DGDetailLogPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DGDetailLogPacket::GetClassData() const { return &_class_data_; }


void DGDetailLogPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DGDetailLogPacket*>(&to_msg);
  auto& from = static_cast<const DGDetailLogPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.DGDetailLogPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_pid() != 0) {
    _this->_internal_set_pid(from._internal_pid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DGDetailLogPacket::CopyFrom(const DGDetailLogPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.DGDetailLogPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DGDetailLogPacket::IsInitialized() const {
  return true;
}

void DGDetailLogPacket::InternalSwap(DGDetailLogPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.pid_, other->_impl_.pid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DGDetailLogPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dg_5fpackets_2eproto_getter, &descriptor_table_dg_5fpackets_2eproto_once,
      file_level_metadata_dg_5fpackets_2eproto[34]);
}

// ===================================================================

class DGItemAwardInformerPacket::_Internal {
 public:
};

DGItemAwardInformerPacket::DGItemAwardInformerPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.DGItemAwardInformerPacket)
}
DGItemAwardInformerPacket::DGItemAwardInformerPacket(const DGItemAwardInformerPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DGItemAwardInformerPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.login_){}
    , decltype(_impl_.command_){}
    , decltype(_impl_.vnum_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.login_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.login_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_login().empty()) {
    _this->_impl_.login_.Set(from._internal_login(), 
      _this->GetArenaForAllocation());
  }
  _impl_.command_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.command_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_command().empty()) {
    _this->_impl_.command_.Set(from._internal_command(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.vnum_ = from._impl_.vnum_;
  // @@protoc_insertion_point(copy_constructor:network.DGItemAwardInformerPacket)
}

inline void DGItemAwardInformerPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.login_){}
    , decltype(_impl_.command_){}
    , decltype(_impl_.vnum_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.login_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.login_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.command_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.command_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DGItemAwardInformerPacket::~DGItemAwardInformerPacket() {
  // @@protoc_insertion_point(destructor:network.DGItemAwardInformerPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DGItemAwardInformerPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.login_.Destroy();
  _impl_.command_.Destroy();
}

void DGItemAwardInformerPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DGItemAwardInformerPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.DGItemAwardInformerPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.login_.ClearToEmpty();
  _impl_.command_.ClearToEmpty();
  _impl_.vnum_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DGItemAwardInformerPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes login = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_login();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes command = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_command();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 vnum = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.vnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DGItemAwardInformerPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.DGItemAwardInformerPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes login = 1;
  if (!this->_internal_login().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_login(), target);
  }

  // bytes command = 2;
  if (!this->_internal_command().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_command(), target);
  }

  // uint32 vnum = 3;
  if (this->_internal_vnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_vnum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.DGItemAwardInformerPacket)
  return target;
}

size_t DGItemAwardInformerPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.DGItemAwardInformerPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes login = 1;
  if (!this->_internal_login().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_login());
  }

  // bytes command = 2;
  if (!this->_internal_command().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_command());
  }

  // uint32 vnum = 3;
  if (this->_internal_vnum() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_vnum());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DGItemAwardInformerPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DGItemAwardInformerPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DGItemAwardInformerPacket::GetClassData() const { return &_class_data_; }


void DGItemAwardInformerPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DGItemAwardInformerPacket*>(&to_msg);
  auto& from = static_cast<const DGItemAwardInformerPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.DGItemAwardInformerPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_login().empty()) {
    _this->_internal_set_login(from._internal_login());
  }
  if (!from._internal_command().empty()) {
    _this->_internal_set_command(from._internal_command());
  }
  if (from._internal_vnum() != 0) {
    _this->_internal_set_vnum(from._internal_vnum());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DGItemAwardInformerPacket::CopyFrom(const DGItemAwardInformerPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.DGItemAwardInformerPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DGItemAwardInformerPacket::IsInitialized() const {
  return true;
}

void DGItemAwardInformerPacket::InternalSwap(DGItemAwardInformerPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.login_, lhs_arena,
      &other->_impl_.login_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.command_, lhs_arena,
      &other->_impl_.command_, rhs_arena
  );
  swap(_impl_.vnum_, other->_impl_.vnum_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DGItemAwardInformerPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dg_5fpackets_2eproto_getter, &descriptor_table_dg_5fpackets_2eproto_once,
      file_level_metadata_dg_5fpackets_2eproto[35]);
}

// ===================================================================

class DGRespondChannelStatusPacket::_Internal {
 public:
};

void DGRespondChannelStatusPacket::clear_states() {
  _impl_.states_.Clear();
}
DGRespondChannelStatusPacket::DGRespondChannelStatusPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.DGRespondChannelStatusPacket)
}
DGRespondChannelStatusPacket::DGRespondChannelStatusPacket(const DGRespondChannelStatusPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DGRespondChannelStatusPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.states_){from._impl_.states_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:network.DGRespondChannelStatusPacket)
}

inline void DGRespondChannelStatusPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.states_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DGRespondChannelStatusPacket::~DGRespondChannelStatusPacket() {
  // @@protoc_insertion_point(destructor:network.DGRespondChannelStatusPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DGRespondChannelStatusPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.states_.~RepeatedPtrField();
}

void DGRespondChannelStatusPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DGRespondChannelStatusPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.DGRespondChannelStatusPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.states_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DGRespondChannelStatusPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .network.TChannelStatus states = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_states(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DGRespondChannelStatusPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.DGRespondChannelStatusPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .network.TChannelStatus states = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_states_size()); i < n; i++) {
    const auto& repfield = this->_internal_states(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.DGRespondChannelStatusPacket)
  return target;
}

size_t DGRespondChannelStatusPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.DGRespondChannelStatusPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .network.TChannelStatus states = 1;
  total_size += 1UL * this->_internal_states_size();
  for (const auto& msg : this->_impl_.states_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DGRespondChannelStatusPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DGRespondChannelStatusPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DGRespondChannelStatusPacket::GetClassData() const { return &_class_data_; }


void DGRespondChannelStatusPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DGRespondChannelStatusPacket*>(&to_msg);
  auto& from = static_cast<const DGRespondChannelStatusPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.DGRespondChannelStatusPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.states_.MergeFrom(from._impl_.states_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DGRespondChannelStatusPacket::CopyFrom(const DGRespondChannelStatusPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.DGRespondChannelStatusPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DGRespondChannelStatusPacket::IsInitialized() const {
  return true;
}

void DGRespondChannelStatusPacket::InternalSwap(DGRespondChannelStatusPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.states_.InternalSwap(&other->_impl_.states_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DGRespondChannelStatusPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dg_5fpackets_2eproto_getter, &descriptor_table_dg_5fpackets_2eproto_once,
      file_level_metadata_dg_5fpackets_2eproto[36]);
}

// ===================================================================

class DGChannelSwitchPacket::_Internal {
 public:
};

DGChannelSwitchPacket::DGChannelSwitchPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.DGChannelSwitchPacket)
}
DGChannelSwitchPacket::DGChannelSwitchPacket(const DGChannelSwitchPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DGChannelSwitchPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ip_){}
    , decltype(_impl_.port_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ip().empty()) {
    _this->_impl_.ip_.Set(from._internal_ip(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.port_ = from._impl_.port_;
  // @@protoc_insertion_point(copy_constructor:network.DGChannelSwitchPacket)
}

inline void DGChannelSwitchPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ip_){}
    , decltype(_impl_.port_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DGChannelSwitchPacket::~DGChannelSwitchPacket() {
  // @@protoc_insertion_point(destructor:network.DGChannelSwitchPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DGChannelSwitchPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ip_.Destroy();
}

void DGChannelSwitchPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DGChannelSwitchPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.DGChannelSwitchPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ip_.ClearToEmpty();
  _impl_.port_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DGChannelSwitchPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes ip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_ip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DGChannelSwitchPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.DGChannelSwitchPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes ip = 1;
  if (!this->_internal_ip().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_ip(), target);
  }

  // uint32 port = 2;
  if (this->_internal_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.DGChannelSwitchPacket)
  return target;
}

size_t DGChannelSwitchPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.DGChannelSwitchPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes ip = 1;
  if (!this->_internal_ip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_ip());
  }

  // uint32 port = 2;
  if (this->_internal_port() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_port());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DGChannelSwitchPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DGChannelSwitchPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DGChannelSwitchPacket::GetClassData() const { return &_class_data_; }


void DGChannelSwitchPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DGChannelSwitchPacket*>(&to_msg);
  auto& from = static_cast<const DGChannelSwitchPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.DGChannelSwitchPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ip().empty()) {
    _this->_internal_set_ip(from._internal_ip());
  }
  if (from._internal_port() != 0) {
    _this->_internal_set_port(from._internal_port());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DGChannelSwitchPacket::CopyFrom(const DGChannelSwitchPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.DGChannelSwitchPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DGChannelSwitchPacket::IsInitialized() const {
  return true;
}

void DGChannelSwitchPacket::InternalSwap(DGChannelSwitchPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ip_, lhs_arena,
      &other->_impl_.ip_, rhs_arena
  );
  swap(_impl_.port_, other->_impl_.port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DGChannelSwitchPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dg_5fpackets_2eproto_getter, &descriptor_table_dg_5fpackets_2eproto_once,
      file_level_metadata_dg_5fpackets_2eproto[37]);
}

// ===================================================================

class DGSpareItemIDRangePacket::_Internal {
 public:
  static const ::network::TItemIDRangeTable& data(const DGSpareItemIDRangePacket* msg);
};

const ::network::TItemIDRangeTable&
DGSpareItemIDRangePacket::_Internal::data(const DGSpareItemIDRangePacket* msg) {
  return *msg->_impl_.data_;
}
void DGSpareItemIDRangePacket::clear_data() {
  if (GetArenaForAllocation() == nullptr && _impl_.data_ != nullptr) {
    delete _impl_.data_;
  }
  _impl_.data_ = nullptr;
}
DGSpareItemIDRangePacket::DGSpareItemIDRangePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.DGSpareItemIDRangePacket)
}
DGSpareItemIDRangePacket::DGSpareItemIDRangePacket(const DGSpareItemIDRangePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DGSpareItemIDRangePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data()) {
    _this->_impl_.data_ = new ::network::TItemIDRangeTable(*from._impl_.data_);
  }
  // @@protoc_insertion_point(copy_constructor:network.DGSpareItemIDRangePacket)
}

inline void DGSpareItemIDRangePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DGSpareItemIDRangePacket::~DGSpareItemIDRangePacket() {
  // @@protoc_insertion_point(destructor:network.DGSpareItemIDRangePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DGSpareItemIDRangePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.data_;
}

void DGSpareItemIDRangePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DGSpareItemIDRangePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.DGSpareItemIDRangePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.data_ != nullptr) {
    delete _impl_.data_;
  }
  _impl_.data_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DGSpareItemIDRangePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .network.TItemIDRangeTable data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DGSpareItemIDRangePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.DGSpareItemIDRangePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .network.TItemIDRangeTable data = 1;
  if (this->_internal_has_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::data(this),
        _Internal::data(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.DGSpareItemIDRangePacket)
  return target;
}

size_t DGSpareItemIDRangePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.DGSpareItemIDRangePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .network.TItemIDRangeTable data = 1;
  if (this->_internal_has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.data_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DGSpareItemIDRangePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DGSpareItemIDRangePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DGSpareItemIDRangePacket::GetClassData() const { return &_class_data_; }


void DGSpareItemIDRangePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DGSpareItemIDRangePacket*>(&to_msg);
  auto& from = static_cast<const DGSpareItemIDRangePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.DGSpareItemIDRangePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_data()) {
    _this->_internal_mutable_data()->::network::TItemIDRangeTable::MergeFrom(
        from._internal_data());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DGSpareItemIDRangePacket::CopyFrom(const DGSpareItemIDRangePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.DGSpareItemIDRangePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DGSpareItemIDRangePacket::IsInitialized() const {
  return true;
}

void DGSpareItemIDRangePacket::InternalSwap(DGSpareItemIDRangePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.data_, other->_impl_.data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DGSpareItemIDRangePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dg_5fpackets_2eproto_getter, &descriptor_table_dg_5fpackets_2eproto_once,
      file_level_metadata_dg_5fpackets_2eproto[38]);
}

// ===================================================================

class DGUpdateHorseNamePacket::_Internal {
 public:
};

DGUpdateHorseNamePacket::DGUpdateHorseNamePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.DGUpdateHorseNamePacket)
}
DGUpdateHorseNamePacket::DGUpdateHorseNamePacket(const DGUpdateHorseNamePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DGUpdateHorseNamePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.horse_name_){}
    , decltype(_impl_.player_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.horse_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.horse_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_horse_name().empty()) {
    _this->_impl_.horse_name_.Set(from._internal_horse_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.player_id_ = from._impl_.player_id_;
  // @@protoc_insertion_point(copy_constructor:network.DGUpdateHorseNamePacket)
}

inline void DGUpdateHorseNamePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.horse_name_){}
    , decltype(_impl_.player_id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.horse_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.horse_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DGUpdateHorseNamePacket::~DGUpdateHorseNamePacket() {
  // @@protoc_insertion_point(destructor:network.DGUpdateHorseNamePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DGUpdateHorseNamePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.horse_name_.Destroy();
}

void DGUpdateHorseNamePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DGUpdateHorseNamePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.DGUpdateHorseNamePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.horse_name_.ClearToEmpty();
  _impl_.player_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DGUpdateHorseNamePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes horse_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_horse_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DGUpdateHorseNamePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.DGUpdateHorseNamePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 player_id = 1;
  if (this->_internal_player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_player_id(), target);
  }

  // bytes horse_name = 2;
  if (!this->_internal_horse_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_horse_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.DGUpdateHorseNamePacket)
  return target;
}

size_t DGUpdateHorseNamePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.DGUpdateHorseNamePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes horse_name = 2;
  if (!this->_internal_horse_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_horse_name());
  }

  // uint32 player_id = 1;
  if (this->_internal_player_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_player_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DGUpdateHorseNamePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DGUpdateHorseNamePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DGUpdateHorseNamePacket::GetClassData() const { return &_class_data_; }


void DGUpdateHorseNamePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DGUpdateHorseNamePacket*>(&to_msg);
  auto& from = static_cast<const DGUpdateHorseNamePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.DGUpdateHorseNamePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_horse_name().empty()) {
    _this->_internal_set_horse_name(from._internal_horse_name());
  }
  if (from._internal_player_id() != 0) {
    _this->_internal_set_player_id(from._internal_player_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DGUpdateHorseNamePacket::CopyFrom(const DGUpdateHorseNamePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.DGUpdateHorseNamePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DGUpdateHorseNamePacket::IsInitialized() const {
  return true;
}

void DGUpdateHorseNamePacket::InternalSwap(DGUpdateHorseNamePacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.horse_name_, lhs_arena,
      &other->_impl_.horse_name_, rhs_arena
  );
  swap(_impl_.player_id_, other->_impl_.player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DGUpdateHorseNamePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dg_5fpackets_2eproto_getter, &descriptor_table_dg_5fpackets_2eproto_once,
      file_level_metadata_dg_5fpackets_2eproto[39]);
}

// ===================================================================

class DGSpawnMobTimedPacket::_Internal {
 public:
};

DGSpawnMobTimedPacket::DGSpawnMobTimedPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.DGSpawnMobTimedPacket)
}
DGSpawnMobTimedPacket::DGSpawnMobTimedPacket(const DGSpawnMobTimedPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DGSpawnMobTimedPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.mob_vnum_){}
    , decltype(_impl_.map_index_){}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.channel_){}
    , decltype(_impl_.target_time_){}
    , decltype(_impl_.despawn_time_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.mob_vnum_, &from._impl_.mob_vnum_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.despawn_time_) -
    reinterpret_cast<char*>(&_impl_.mob_vnum_)) + sizeof(_impl_.despawn_time_));
  // @@protoc_insertion_point(copy_constructor:network.DGSpawnMobTimedPacket)
}

inline void DGSpawnMobTimedPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.mob_vnum_){0u}
    , decltype(_impl_.map_index_){0u}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.channel_){0u}
    , decltype(_impl_.target_time_){0}
    , decltype(_impl_.despawn_time_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DGSpawnMobTimedPacket::~DGSpawnMobTimedPacket() {
  // @@protoc_insertion_point(destructor:network.DGSpawnMobTimedPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DGSpawnMobTimedPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DGSpawnMobTimedPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DGSpawnMobTimedPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.DGSpawnMobTimedPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.mob_vnum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.despawn_time_) -
      reinterpret_cast<char*>(&_impl_.mob_vnum_)) + sizeof(_impl_.despawn_time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DGSpawnMobTimedPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 mob_vnum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.mob_vnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 map_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.map_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 x = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 y = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 channel = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 target_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.target_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 despawn_time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.despawn_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DGSpawnMobTimedPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.DGSpawnMobTimedPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 mob_vnum = 1;
  if (this->_internal_mob_vnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_mob_vnum(), target);
  }

  // uint32 map_index = 2;
  if (this->_internal_map_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_map_index(), target);
  }

  // int32 x = 3;
  if (this->_internal_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_x(), target);
  }

  // int32 y = 4;
  if (this->_internal_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_y(), target);
  }

  // uint32 channel = 5;
  if (this->_internal_channel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_channel(), target);
  }

  // int32 target_time = 6;
  if (this->_internal_target_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_target_time(), target);
  }

  // int32 despawn_time = 7;
  if (this->_internal_despawn_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_despawn_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.DGSpawnMobTimedPacket)
  return target;
}

size_t DGSpawnMobTimedPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.DGSpawnMobTimedPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 mob_vnum = 1;
  if (this->_internal_mob_vnum() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_mob_vnum());
  }

  // uint32 map_index = 2;
  if (this->_internal_map_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_map_index());
  }

  // int32 x = 3;
  if (this->_internal_x() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x());
  }

  // int32 y = 4;
  if (this->_internal_y() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y());
  }

  // uint32 channel = 5;
  if (this->_internal_channel() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel());
  }

  // int32 target_time = 6;
  if (this->_internal_target_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_target_time());
  }

  // int32 despawn_time = 7;
  if (this->_internal_despawn_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_despawn_time());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DGSpawnMobTimedPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DGSpawnMobTimedPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DGSpawnMobTimedPacket::GetClassData() const { return &_class_data_; }


void DGSpawnMobTimedPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DGSpawnMobTimedPacket*>(&to_msg);
  auto& from = static_cast<const DGSpawnMobTimedPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.DGSpawnMobTimedPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_mob_vnum() != 0) {
    _this->_internal_set_mob_vnum(from._internal_mob_vnum());
  }
  if (from._internal_map_index() != 0) {
    _this->_internal_set_map_index(from._internal_map_index());
  }
  if (from._internal_x() != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  if (from._internal_y() != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  if (from._internal_channel() != 0) {
    _this->_internal_set_channel(from._internal_channel());
  }
  if (from._internal_target_time() != 0) {
    _this->_internal_set_target_time(from._internal_target_time());
  }
  if (from._internal_despawn_time() != 0) {
    _this->_internal_set_despawn_time(from._internal_despawn_time());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DGSpawnMobTimedPacket::CopyFrom(const DGSpawnMobTimedPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.DGSpawnMobTimedPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DGSpawnMobTimedPacket::IsInitialized() const {
  return true;
}

void DGSpawnMobTimedPacket::InternalSwap(DGSpawnMobTimedPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DGSpawnMobTimedPacket, _impl_.despawn_time_)
      + sizeof(DGSpawnMobTimedPacket::_impl_.despawn_time_)
      - PROTOBUF_FIELD_OFFSET(DGSpawnMobTimedPacket, _impl_.mob_vnum_)>(
          reinterpret_cast<char*>(&_impl_.mob_vnum_),
          reinterpret_cast<char*>(&other->_impl_.mob_vnum_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DGSpawnMobTimedPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dg_5fpackets_2eproto_getter, &descriptor_table_dg_5fpackets_2eproto_once,
      file_level_metadata_dg_5fpackets_2eproto[40]);
}

// ===================================================================

class DGItemOfflineRestorePacket::_Internal {
 public:
};

void DGItemOfflineRestorePacket::clear_items() {
  _impl_.items_.Clear();
}
DGItemOfflineRestorePacket::DGItemOfflineRestorePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.DGItemOfflineRestorePacket)
}
DGItemOfflineRestorePacket::DGItemOfflineRestorePacket(const DGItemOfflineRestorePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DGItemOfflineRestorePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:network.DGItemOfflineRestorePacket)
}

inline void DGItemOfflineRestorePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DGItemOfflineRestorePacket::~DGItemOfflineRestorePacket() {
  // @@protoc_insertion_point(destructor:network.DGItemOfflineRestorePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DGItemOfflineRestorePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
}

void DGItemOfflineRestorePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DGItemOfflineRestorePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.DGItemOfflineRestorePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DGItemOfflineRestorePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .network.TItemData items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DGItemOfflineRestorePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.DGItemOfflineRestorePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .network.TItemData items = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.DGItemOfflineRestorePacket)
  return target;
}

size_t DGItemOfflineRestorePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.DGItemOfflineRestorePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .network.TItemData items = 1;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DGItemOfflineRestorePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DGItemOfflineRestorePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DGItemOfflineRestorePacket::GetClassData() const { return &_class_data_; }


void DGItemOfflineRestorePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DGItemOfflineRestorePacket*>(&to_msg);
  auto& from = static_cast<const DGItemOfflineRestorePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.DGItemOfflineRestorePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DGItemOfflineRestorePacket::CopyFrom(const DGItemOfflineRestorePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.DGItemOfflineRestorePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DGItemOfflineRestorePacket::IsInitialized() const {
  return true;
}

void DGItemOfflineRestorePacket::InternalSwap(DGItemOfflineRestorePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DGItemOfflineRestorePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dg_5fpackets_2eproto_getter, &descriptor_table_dg_5fpackets_2eproto_once,
      file_level_metadata_dg_5fpackets_2eproto[41]);
}

// ===================================================================

class DGOfflineMessagesLoadPacket::_Internal {
 public:
};

void DGOfflineMessagesLoadPacket::clear_messages() {
  _impl_.messages_.Clear();
}
DGOfflineMessagesLoadPacket::DGOfflineMessagesLoadPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.DGOfflineMessagesLoadPacket)
}
DGOfflineMessagesLoadPacket::DGOfflineMessagesLoadPacket(const DGOfflineMessagesLoadPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DGOfflineMessagesLoadPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.messages_){from._impl_.messages_}
    , decltype(_impl_.pid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.pid_ = from._impl_.pid_;
  // @@protoc_insertion_point(copy_constructor:network.DGOfflineMessagesLoadPacket)
}

inline void DGOfflineMessagesLoadPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.messages_){arena}
    , decltype(_impl_.pid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DGOfflineMessagesLoadPacket::~DGOfflineMessagesLoadPacket() {
  // @@protoc_insertion_point(destructor:network.DGOfflineMessagesLoadPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DGOfflineMessagesLoadPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.messages_.~RepeatedPtrField();
}

void DGOfflineMessagesLoadPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DGOfflineMessagesLoadPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.DGOfflineMessagesLoadPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.messages_.Clear();
  _impl_.pid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DGOfflineMessagesLoadPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .network.TOfflineMessage messages = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_messages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DGOfflineMessagesLoadPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.DGOfflineMessagesLoadPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pid(), target);
  }

  // repeated .network.TOfflineMessage messages = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_messages_size()); i < n; i++) {
    const auto& repfield = this->_internal_messages(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.DGOfflineMessagesLoadPacket)
  return target;
}

size_t DGOfflineMessagesLoadPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.DGOfflineMessagesLoadPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .network.TOfflineMessage messages = 2;
  total_size += 1UL * this->_internal_messages_size();
  for (const auto& msg : this->_impl_.messages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DGOfflineMessagesLoadPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DGOfflineMessagesLoadPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DGOfflineMessagesLoadPacket::GetClassData() const { return &_class_data_; }


void DGOfflineMessagesLoadPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DGOfflineMessagesLoadPacket*>(&to_msg);
  auto& from = static_cast<const DGOfflineMessagesLoadPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.DGOfflineMessagesLoadPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.messages_.MergeFrom(from._impl_.messages_);
  if (from._internal_pid() != 0) {
    _this->_internal_set_pid(from._internal_pid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DGOfflineMessagesLoadPacket::CopyFrom(const DGOfflineMessagesLoadPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.DGOfflineMessagesLoadPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DGOfflineMessagesLoadPacket::IsInitialized() const {
  return true;
}

void DGOfflineMessagesLoadPacket::InternalSwap(DGOfflineMessagesLoadPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.messages_.InternalSwap(&other->_impl_.messages_);
  swap(_impl_.pid_, other->_impl_.pid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DGOfflineMessagesLoadPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dg_5fpackets_2eproto_getter, &descriptor_table_dg_5fpackets_2eproto_once,
      file_level_metadata_dg_5fpackets_2eproto[42]);
}

// ===================================================================

class DGItemRefundLoadPacket_RefundItem::_Internal {
 public:
  static const ::network::TItemData& item(const DGItemRefundLoadPacket_RefundItem* msg);
};

const ::network::TItemData&
DGItemRefundLoadPacket_RefundItem::_Internal::item(const DGItemRefundLoadPacket_RefundItem* msg) {
  return *msg->_impl_.item_;
}
void DGItemRefundLoadPacket_RefundItem::clear_item() {
  if (GetArenaForAllocation() == nullptr && _impl_.item_ != nullptr) {
    delete _impl_.item_;
  }
  _impl_.item_ = nullptr;
}
DGItemRefundLoadPacket_RefundItem::DGItemRefundLoadPacket_RefundItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.DGItemRefundLoadPacket.RefundItem)
}
DGItemRefundLoadPacket_RefundItem::DGItemRefundLoadPacket_RefundItem(const DGItemRefundLoadPacket_RefundItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DGItemRefundLoadPacket_RefundItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.item_){nullptr}
    , decltype(_impl_.id_){}
    , decltype(_impl_.socket_set_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_item()) {
    _this->_impl_.item_ = new ::network::TItemData(*from._impl_.item_);
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.socket_set_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.socket_set_));
  // @@protoc_insertion_point(copy_constructor:network.DGItemRefundLoadPacket.RefundItem)
}

inline void DGItemRefundLoadPacket_RefundItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.item_){nullptr}
    , decltype(_impl_.id_){0u}
    , decltype(_impl_.socket_set_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DGItemRefundLoadPacket_RefundItem::~DGItemRefundLoadPacket_RefundItem() {
  // @@protoc_insertion_point(destructor:network.DGItemRefundLoadPacket.RefundItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DGItemRefundLoadPacket_RefundItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.item_;
}

void DGItemRefundLoadPacket_RefundItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DGItemRefundLoadPacket_RefundItem::Clear() {
// @@protoc_insertion_point(message_clear_start:network.DGItemRefundLoadPacket.RefundItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.item_ != nullptr) {
    delete _impl_.item_;
  }
  _impl_.item_ = nullptr;
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.socket_set_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.socket_set_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DGItemRefundLoadPacket_RefundItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool socket_set = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.socket_set_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .network.TItemData item = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_item(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DGItemRefundLoadPacket_RefundItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.DGItemRefundLoadPacket.RefundItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // bool socket_set = 2;
  if (this->_internal_socket_set() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_socket_set(), target);
  }

  // .network.TItemData item = 3;
  if (this->_internal_has_item()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::item(this),
        _Internal::item(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.DGItemRefundLoadPacket.RefundItem)
  return target;
}

size_t DGItemRefundLoadPacket_RefundItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.DGItemRefundLoadPacket.RefundItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .network.TItemData item = 3;
  if (this->_internal_has_item()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.item_);
  }

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  // bool socket_set = 2;
  if (this->_internal_socket_set() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DGItemRefundLoadPacket_RefundItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DGItemRefundLoadPacket_RefundItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DGItemRefundLoadPacket_RefundItem::GetClassData() const { return &_class_data_; }


void DGItemRefundLoadPacket_RefundItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DGItemRefundLoadPacket_RefundItem*>(&to_msg);
  auto& from = static_cast<const DGItemRefundLoadPacket_RefundItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.DGItemRefundLoadPacket.RefundItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_item()) {
    _this->_internal_mutable_item()->::network::TItemData::MergeFrom(
        from._internal_item());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_socket_set() != 0) {
    _this->_internal_set_socket_set(from._internal_socket_set());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DGItemRefundLoadPacket_RefundItem::CopyFrom(const DGItemRefundLoadPacket_RefundItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.DGItemRefundLoadPacket.RefundItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DGItemRefundLoadPacket_RefundItem::IsInitialized() const {
  return true;
}

void DGItemRefundLoadPacket_RefundItem::InternalSwap(DGItemRefundLoadPacket_RefundItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DGItemRefundLoadPacket_RefundItem, _impl_.socket_set_)
      + sizeof(DGItemRefundLoadPacket_RefundItem::_impl_.socket_set_)
      - PROTOBUF_FIELD_OFFSET(DGItemRefundLoadPacket_RefundItem, _impl_.item_)>(
          reinterpret_cast<char*>(&_impl_.item_),
          reinterpret_cast<char*>(&other->_impl_.item_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DGItemRefundLoadPacket_RefundItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dg_5fpackets_2eproto_getter, &descriptor_table_dg_5fpackets_2eproto_once,
      file_level_metadata_dg_5fpackets_2eproto[43]);
}

// ===================================================================

class DGItemRefundLoadPacket::_Internal {
 public:
};

DGItemRefundLoadPacket::DGItemRefundLoadPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.DGItemRefundLoadPacket)
}
DGItemRefundLoadPacket::DGItemRefundLoadPacket(const DGItemRefundLoadPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DGItemRefundLoadPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , decltype(_impl_.pid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.pid_ = from._impl_.pid_;
  // @@protoc_insertion_point(copy_constructor:network.DGItemRefundLoadPacket)
}

inline void DGItemRefundLoadPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , decltype(_impl_.pid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DGItemRefundLoadPacket::~DGItemRefundLoadPacket() {
  // @@protoc_insertion_point(destructor:network.DGItemRefundLoadPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DGItemRefundLoadPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
}

void DGItemRefundLoadPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DGItemRefundLoadPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.DGItemRefundLoadPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  _impl_.pid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DGItemRefundLoadPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .network.DGItemRefundLoadPacket.RefundItem items = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DGItemRefundLoadPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.DGItemRefundLoadPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pid(), target);
  }

  // repeated .network.DGItemRefundLoadPacket.RefundItem items = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.DGItemRefundLoadPacket)
  return target;
}

size_t DGItemRefundLoadPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.DGItemRefundLoadPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .network.DGItemRefundLoadPacket.RefundItem items = 2;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DGItemRefundLoadPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DGItemRefundLoadPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DGItemRefundLoadPacket::GetClassData() const { return &_class_data_; }


void DGItemRefundLoadPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DGItemRefundLoadPacket*>(&to_msg);
  auto& from = static_cast<const DGItemRefundLoadPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.DGItemRefundLoadPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  if (from._internal_pid() != 0) {
    _this->_internal_set_pid(from._internal_pid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DGItemRefundLoadPacket::CopyFrom(const DGItemRefundLoadPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.DGItemRefundLoadPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DGItemRefundLoadPacket::IsInitialized() const {
  return true;
}

void DGItemRefundLoadPacket::InternalSwap(DGItemRefundLoadPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
  swap(_impl_.pid_, other->_impl_.pid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DGItemRefundLoadPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dg_5fpackets_2eproto_getter, &descriptor_table_dg_5fpackets_2eproto_once,
      file_level_metadata_dg_5fpackets_2eproto[44]);
}

// ===================================================================

class DGWhisperPlayerExistResultPacket::_Internal {
 public:
};

DGWhisperPlayerExistResultPacket::DGWhisperPlayerExistResultPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.DGWhisperPlayerExistResultPacket)
}
DGWhisperPlayerExistResultPacket::DGWhisperPlayerExistResultPacket(const DGWhisperPlayerExistResultPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DGWhisperPlayerExistResultPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.target_name_){}
    , decltype(_impl_.pid_){}
    , decltype(_impl_.is_exist_){}
    , decltype(_impl_.is_blocked_){}
    , decltype(_impl_.return_money_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  _impl_.target_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.target_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_target_name().empty()) {
    _this->_impl_.target_name_.Set(from._internal_target_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.pid_, &from._impl_.pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.return_money_) -
    reinterpret_cast<char*>(&_impl_.pid_)) + sizeof(_impl_.return_money_));
  // @@protoc_insertion_point(copy_constructor:network.DGWhisperPlayerExistResultPacket)
}

inline void DGWhisperPlayerExistResultPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.target_name_){}
    , decltype(_impl_.pid_){0u}
    , decltype(_impl_.is_exist_){false}
    , decltype(_impl_.is_blocked_){false}
    , decltype(_impl_.return_money_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.target_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.target_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DGWhisperPlayerExistResultPacket::~DGWhisperPlayerExistResultPacket() {
  // @@protoc_insertion_point(destructor:network.DGWhisperPlayerExistResultPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DGWhisperPlayerExistResultPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
  _impl_.target_name_.Destroy();
}

void DGWhisperPlayerExistResultPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DGWhisperPlayerExistResultPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.DGWhisperPlayerExistResultPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  _impl_.target_name_.ClearToEmpty();
  ::memset(&_impl_.pid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.return_money_) -
      reinterpret_cast<char*>(&_impl_.pid_)) + sizeof(_impl_.return_money_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DGWhisperPlayerExistResultPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes target_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_target_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_exist = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.is_exist_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_blocked = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.is_blocked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool return_money = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.return_money_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DGWhisperPlayerExistResultPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.DGWhisperPlayerExistResultPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pid(), target);
  }

  // bytes message = 2;
  if (!this->_internal_message().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_message(), target);
  }

  // bytes target_name = 3;
  if (!this->_internal_target_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_target_name(), target);
  }

  // bool is_exist = 4;
  if (this->_internal_is_exist() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_is_exist(), target);
  }

  // bool is_blocked = 5;
  if (this->_internal_is_blocked() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_is_blocked(), target);
  }

  // bool return_money = 6;
  if (this->_internal_return_money() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_return_money(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.DGWhisperPlayerExistResultPacket)
  return target;
}

size_t DGWhisperPlayerExistResultPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.DGWhisperPlayerExistResultPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_message());
  }

  // bytes target_name = 3;
  if (!this->_internal_target_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_target_name());
  }

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid());
  }

  // bool is_exist = 4;
  if (this->_internal_is_exist() != 0) {
    total_size += 1 + 1;
  }

  // bool is_blocked = 5;
  if (this->_internal_is_blocked() != 0) {
    total_size += 1 + 1;
  }

  // bool return_money = 6;
  if (this->_internal_return_money() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DGWhisperPlayerExistResultPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DGWhisperPlayerExistResultPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DGWhisperPlayerExistResultPacket::GetClassData() const { return &_class_data_; }


void DGWhisperPlayerExistResultPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DGWhisperPlayerExistResultPacket*>(&to_msg);
  auto& from = static_cast<const DGWhisperPlayerExistResultPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.DGWhisperPlayerExistResultPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (!from._internal_target_name().empty()) {
    _this->_internal_set_target_name(from._internal_target_name());
  }
  if (from._internal_pid() != 0) {
    _this->_internal_set_pid(from._internal_pid());
  }
  if (from._internal_is_exist() != 0) {
    _this->_internal_set_is_exist(from._internal_is_exist());
  }
  if (from._internal_is_blocked() != 0) {
    _this->_internal_set_is_blocked(from._internal_is_blocked());
  }
  if (from._internal_return_money() != 0) {
    _this->_internal_set_return_money(from._internal_return_money());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DGWhisperPlayerExistResultPacket::CopyFrom(const DGWhisperPlayerExistResultPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.DGWhisperPlayerExistResultPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DGWhisperPlayerExistResultPacket::IsInitialized() const {
  return true;
}

void DGWhisperPlayerExistResultPacket::InternalSwap(DGWhisperPlayerExistResultPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.target_name_, lhs_arena,
      &other->_impl_.target_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DGWhisperPlayerExistResultPacket, _impl_.return_money_)
      + sizeof(DGWhisperPlayerExistResultPacket::_impl_.return_money_)
      - PROTOBUF_FIELD_OFFSET(DGWhisperPlayerExistResultPacket, _impl_.pid_)>(
          reinterpret_cast<char*>(&_impl_.pid_),
          reinterpret_cast<char*>(&other->_impl_.pid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DGWhisperPlayerExistResultPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dg_5fpackets_2eproto_getter, &descriptor_table_dg_5fpackets_2eproto_once,
      file_level_metadata_dg_5fpackets_2eproto[45]);
}

// ===================================================================

class DGWhisperPlayerMessageOfflinePacket::_Internal {
 public:
};

DGWhisperPlayerMessageOfflinePacket::DGWhisperPlayerMessageOfflinePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.DGWhisperPlayerMessageOfflinePacket)
}
DGWhisperPlayerMessageOfflinePacket::DGWhisperPlayerMessageOfflinePacket(const DGWhisperPlayerMessageOfflinePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DGWhisperPlayerMessageOfflinePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.target_name_){}
    , decltype(_impl_.pid_){}
    , decltype(_impl_.target_pid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  _impl_.target_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.target_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_target_name().empty()) {
    _this->_impl_.target_name_.Set(from._internal_target_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.pid_, &from._impl_.pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.target_pid_) -
    reinterpret_cast<char*>(&_impl_.pid_)) + sizeof(_impl_.target_pid_));
  // @@protoc_insertion_point(copy_constructor:network.DGWhisperPlayerMessageOfflinePacket)
}

inline void DGWhisperPlayerMessageOfflinePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.target_name_){}
    , decltype(_impl_.pid_){0u}
    , decltype(_impl_.target_pid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.target_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.target_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DGWhisperPlayerMessageOfflinePacket::~DGWhisperPlayerMessageOfflinePacket() {
  // @@protoc_insertion_point(destructor:network.DGWhisperPlayerMessageOfflinePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DGWhisperPlayerMessageOfflinePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
  _impl_.target_name_.Destroy();
}

void DGWhisperPlayerMessageOfflinePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DGWhisperPlayerMessageOfflinePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.DGWhisperPlayerMessageOfflinePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  _impl_.target_name_.ClearToEmpty();
  ::memset(&_impl_.pid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.target_pid_) -
      reinterpret_cast<char*>(&_impl_.pid_)) + sizeof(_impl_.target_pid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DGWhisperPlayerMessageOfflinePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 target_pid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.target_pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes target_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_target_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DGWhisperPlayerMessageOfflinePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.DGWhisperPlayerMessageOfflinePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pid(), target);
  }

  // bytes message = 2;
  if (!this->_internal_message().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_message(), target);
  }

  // uint32 target_pid = 3;
  if (this->_internal_target_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_target_pid(), target);
  }

  // bytes target_name = 4;
  if (!this->_internal_target_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_target_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.DGWhisperPlayerMessageOfflinePacket)
  return target;
}

size_t DGWhisperPlayerMessageOfflinePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.DGWhisperPlayerMessageOfflinePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_message());
  }

  // bytes target_name = 4;
  if (!this->_internal_target_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_target_name());
  }

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid());
  }

  // uint32 target_pid = 3;
  if (this->_internal_target_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_target_pid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DGWhisperPlayerMessageOfflinePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DGWhisperPlayerMessageOfflinePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DGWhisperPlayerMessageOfflinePacket::GetClassData() const { return &_class_data_; }


void DGWhisperPlayerMessageOfflinePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DGWhisperPlayerMessageOfflinePacket*>(&to_msg);
  auto& from = static_cast<const DGWhisperPlayerMessageOfflinePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.DGWhisperPlayerMessageOfflinePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (!from._internal_target_name().empty()) {
    _this->_internal_set_target_name(from._internal_target_name());
  }
  if (from._internal_pid() != 0) {
    _this->_internal_set_pid(from._internal_pid());
  }
  if (from._internal_target_pid() != 0) {
    _this->_internal_set_target_pid(from._internal_target_pid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DGWhisperPlayerMessageOfflinePacket::CopyFrom(const DGWhisperPlayerMessageOfflinePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.DGWhisperPlayerMessageOfflinePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DGWhisperPlayerMessageOfflinePacket::IsInitialized() const {
  return true;
}

void DGWhisperPlayerMessageOfflinePacket::InternalSwap(DGWhisperPlayerMessageOfflinePacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.target_name_, lhs_arena,
      &other->_impl_.target_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DGWhisperPlayerMessageOfflinePacket, _impl_.target_pid_)
      + sizeof(DGWhisperPlayerMessageOfflinePacket::_impl_.target_pid_)
      - PROTOBUF_FIELD_OFFSET(DGWhisperPlayerMessageOfflinePacket, _impl_.pid_)>(
          reinterpret_cast<char*>(&_impl_.pid_),
          reinterpret_cast<char*>(&other->_impl_.pid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DGWhisperPlayerMessageOfflinePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dg_5fpackets_2eproto_getter, &descriptor_table_dg_5fpackets_2eproto_once,
      file_level_metadata_dg_5fpackets_2eproto[46]);
}

// ===================================================================

class DGReloadXmasRewardsPacket::_Internal {
 public:
};

void DGReloadXmasRewardsPacket::clear_rewards() {
  _impl_.rewards_.Clear();
}
DGReloadXmasRewardsPacket::DGReloadXmasRewardsPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.DGReloadXmasRewardsPacket)
}
DGReloadXmasRewardsPacket::DGReloadXmasRewardsPacket(const DGReloadXmasRewardsPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DGReloadXmasRewardsPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.rewards_){from._impl_.rewards_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:network.DGReloadXmasRewardsPacket)
}

inline void DGReloadXmasRewardsPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.rewards_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DGReloadXmasRewardsPacket::~DGReloadXmasRewardsPacket() {
  // @@protoc_insertion_point(destructor:network.DGReloadXmasRewardsPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DGReloadXmasRewardsPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.rewards_.~RepeatedPtrField();
}

void DGReloadXmasRewardsPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DGReloadXmasRewardsPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.DGReloadXmasRewardsPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rewards_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DGReloadXmasRewardsPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .network.TXmasRewards rewards = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rewards(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DGReloadXmasRewardsPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.DGReloadXmasRewardsPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .network.TXmasRewards rewards = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_rewards_size()); i < n; i++) {
    const auto& repfield = this->_internal_rewards(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.DGReloadXmasRewardsPacket)
  return target;
}

size_t DGReloadXmasRewardsPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.DGReloadXmasRewardsPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .network.TXmasRewards rewards = 1;
  total_size += 1UL * this->_internal_rewards_size();
  for (const auto& msg : this->_impl_.rewards_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DGReloadXmasRewardsPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DGReloadXmasRewardsPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DGReloadXmasRewardsPacket::GetClassData() const { return &_class_data_; }


void DGReloadXmasRewardsPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DGReloadXmasRewardsPacket*>(&to_msg);
  auto& from = static_cast<const DGReloadXmasRewardsPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.DGReloadXmasRewardsPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.rewards_.MergeFrom(from._impl_.rewards_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DGReloadXmasRewardsPacket::CopyFrom(const DGReloadXmasRewardsPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.DGReloadXmasRewardsPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DGReloadXmasRewardsPacket::IsInitialized() const {
  return true;
}

void DGReloadXmasRewardsPacket::InternalSwap(DGReloadXmasRewardsPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.rewards_.InternalSwap(&other->_impl_.rewards_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DGReloadXmasRewardsPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dg_5fpackets_2eproto_getter, &descriptor_table_dg_5fpackets_2eproto_once,
      file_level_metadata_dg_5fpackets_2eproto[47]);
}

// ===================================================================

class DGSetAveragePricesPacket_Element::_Internal {
 public:
};

DGSetAveragePricesPacket_Element::DGSetAveragePricesPacket_Element(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.DGSetAveragePricesPacket.Element)
}
DGSetAveragePricesPacket_Element::DGSetAveragePricesPacket_Element(const DGSetAveragePricesPacket_Element& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DGSetAveragePricesPacket_Element* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.price_){}
    , decltype(_impl_.vnum_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.price_, &from._impl_.price_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.vnum_) -
    reinterpret_cast<char*>(&_impl_.price_)) + sizeof(_impl_.vnum_));
  // @@protoc_insertion_point(copy_constructor:network.DGSetAveragePricesPacket.Element)
}

inline void DGSetAveragePricesPacket_Element::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.price_){uint64_t{0u}}
    , decltype(_impl_.vnum_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DGSetAveragePricesPacket_Element::~DGSetAveragePricesPacket_Element() {
  // @@protoc_insertion_point(destructor:network.DGSetAveragePricesPacket.Element)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DGSetAveragePricesPacket_Element::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DGSetAveragePricesPacket_Element::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DGSetAveragePricesPacket_Element::Clear() {
// @@protoc_insertion_point(message_clear_start:network.DGSetAveragePricesPacket.Element)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.vnum_) -
      reinterpret_cast<char*>(&_impl_.price_)) + sizeof(_impl_.vnum_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DGSetAveragePricesPacket_Element::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 vnum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.vnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 price = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DGSetAveragePricesPacket_Element::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.DGSetAveragePricesPacket.Element)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 vnum = 1;
  if (this->_internal_vnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_vnum(), target);
  }

  // uint64 price = 2;
  if (this->_internal_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_price(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.DGSetAveragePricesPacket.Element)
  return target;
}

size_t DGSetAveragePricesPacket_Element::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.DGSetAveragePricesPacket.Element)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 price = 2;
  if (this->_internal_price() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_price());
  }

  // uint32 vnum = 1;
  if (this->_internal_vnum() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_vnum());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DGSetAveragePricesPacket_Element::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DGSetAveragePricesPacket_Element::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DGSetAveragePricesPacket_Element::GetClassData() const { return &_class_data_; }


void DGSetAveragePricesPacket_Element::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DGSetAveragePricesPacket_Element*>(&to_msg);
  auto& from = static_cast<const DGSetAveragePricesPacket_Element&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.DGSetAveragePricesPacket.Element)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_price() != 0) {
    _this->_internal_set_price(from._internal_price());
  }
  if (from._internal_vnum() != 0) {
    _this->_internal_set_vnum(from._internal_vnum());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DGSetAveragePricesPacket_Element::CopyFrom(const DGSetAveragePricesPacket_Element& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.DGSetAveragePricesPacket.Element)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DGSetAveragePricesPacket_Element::IsInitialized() const {
  return true;
}

void DGSetAveragePricesPacket_Element::InternalSwap(DGSetAveragePricesPacket_Element* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DGSetAveragePricesPacket_Element, _impl_.vnum_)
      + sizeof(DGSetAveragePricesPacket_Element::_impl_.vnum_)
      - PROTOBUF_FIELD_OFFSET(DGSetAveragePricesPacket_Element, _impl_.price_)>(
          reinterpret_cast<char*>(&_impl_.price_),
          reinterpret_cast<char*>(&other->_impl_.price_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DGSetAveragePricesPacket_Element::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dg_5fpackets_2eproto_getter, &descriptor_table_dg_5fpackets_2eproto_once,
      file_level_metadata_dg_5fpackets_2eproto[48]);
}

// ===================================================================

class DGSetAveragePricesPacket::_Internal {
 public:
};

DGSetAveragePricesPacket::DGSetAveragePricesPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.DGSetAveragePricesPacket)
}
DGSetAveragePricesPacket::DGSetAveragePricesPacket(const DGSetAveragePricesPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DGSetAveragePricesPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.prices_){from._impl_.prices_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:network.DGSetAveragePricesPacket)
}

inline void DGSetAveragePricesPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.prices_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DGSetAveragePricesPacket::~DGSetAveragePricesPacket() {
  // @@protoc_insertion_point(destructor:network.DGSetAveragePricesPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DGSetAveragePricesPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.prices_.~RepeatedPtrField();
}

void DGSetAveragePricesPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DGSetAveragePricesPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.DGSetAveragePricesPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.prices_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DGSetAveragePricesPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .network.DGSetAveragePricesPacket.Element prices = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_prices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DGSetAveragePricesPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.DGSetAveragePricesPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .network.DGSetAveragePricesPacket.Element prices = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_prices_size()); i < n; i++) {
    const auto& repfield = this->_internal_prices(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.DGSetAveragePricesPacket)
  return target;
}

size_t DGSetAveragePricesPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.DGSetAveragePricesPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .network.DGSetAveragePricesPacket.Element prices = 1;
  total_size += 1UL * this->_internal_prices_size();
  for (const auto& msg : this->_impl_.prices_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DGSetAveragePricesPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DGSetAveragePricesPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DGSetAveragePricesPacket::GetClassData() const { return &_class_data_; }


void DGSetAveragePricesPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DGSetAveragePricesPacket*>(&to_msg);
  auto& from = static_cast<const DGSetAveragePricesPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.DGSetAveragePricesPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.prices_.MergeFrom(from._impl_.prices_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DGSetAveragePricesPacket::CopyFrom(const DGSetAveragePricesPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.DGSetAveragePricesPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DGSetAveragePricesPacket::IsInitialized() const {
  return true;
}

void DGSetAveragePricesPacket::InternalSwap(DGSetAveragePricesPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.prices_.InternalSwap(&other->_impl_.prices_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DGSetAveragePricesPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dg_5fpackets_2eproto_getter, &descriptor_table_dg_5fpackets_2eproto_once,
      file_level_metadata_dg_5fpackets_2eproto[49]);
}

// ===================================================================

class DGSkillColorLoadPacket_SkillColor::_Internal {
 public:
};

DGSkillColorLoadPacket_SkillColor::DGSkillColorLoadPacket_SkillColor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.DGSkillColorLoadPacket.SkillColor)
}
DGSkillColorLoadPacket_SkillColor::DGSkillColorLoadPacket_SkillColor(const DGSkillColorLoadPacket_SkillColor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DGSkillColorLoadPacket_SkillColor* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.colors_){from._impl_.colors_}
    , /*decltype(_impl_._colors_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:network.DGSkillColorLoadPacket.SkillColor)
}

inline void DGSkillColorLoadPacket_SkillColor::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.colors_){arena}
    , /*decltype(_impl_._colors_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DGSkillColorLoadPacket_SkillColor::~DGSkillColorLoadPacket_SkillColor() {
  // @@protoc_insertion_point(destructor:network.DGSkillColorLoadPacket.SkillColor)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DGSkillColorLoadPacket_SkillColor::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.colors_.~RepeatedField();
}

void DGSkillColorLoadPacket_SkillColor::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DGSkillColorLoadPacket_SkillColor::Clear() {
// @@protoc_insertion_point(message_clear_start:network.DGSkillColorLoadPacket.SkillColor)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.colors_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DGSkillColorLoadPacket_SkillColor::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 colors = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_colors(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_colors(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DGSkillColorLoadPacket_SkillColor::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.DGSkillColorLoadPacket.SkillColor)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 colors = 1;
  {
    int byte_size = _impl_._colors_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_colors(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.DGSkillColorLoadPacket.SkillColor)
  return target;
}

size_t DGSkillColorLoadPacket_SkillColor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.DGSkillColorLoadPacket.SkillColor)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 colors = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.colors_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._colors_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DGSkillColorLoadPacket_SkillColor::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DGSkillColorLoadPacket_SkillColor::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DGSkillColorLoadPacket_SkillColor::GetClassData() const { return &_class_data_; }


void DGSkillColorLoadPacket_SkillColor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DGSkillColorLoadPacket_SkillColor*>(&to_msg);
  auto& from = static_cast<const DGSkillColorLoadPacket_SkillColor&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.DGSkillColorLoadPacket.SkillColor)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.colors_.MergeFrom(from._impl_.colors_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DGSkillColorLoadPacket_SkillColor::CopyFrom(const DGSkillColorLoadPacket_SkillColor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.DGSkillColorLoadPacket.SkillColor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DGSkillColorLoadPacket_SkillColor::IsInitialized() const {
  return true;
}

void DGSkillColorLoadPacket_SkillColor::InternalSwap(DGSkillColorLoadPacket_SkillColor* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.colors_.InternalSwap(&other->_impl_.colors_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DGSkillColorLoadPacket_SkillColor::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dg_5fpackets_2eproto_getter, &descriptor_table_dg_5fpackets_2eproto_once,
      file_level_metadata_dg_5fpackets_2eproto[50]);
}

// ===================================================================

class DGSkillColorLoadPacket::_Internal {
 public:
};

DGSkillColorLoadPacket::DGSkillColorLoadPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.DGSkillColorLoadPacket)
}
DGSkillColorLoadPacket::DGSkillColorLoadPacket(const DGSkillColorLoadPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DGSkillColorLoadPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.colors_){from._impl_.colors_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:network.DGSkillColorLoadPacket)
}

inline void DGSkillColorLoadPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.colors_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DGSkillColorLoadPacket::~DGSkillColorLoadPacket() {
  // @@protoc_insertion_point(destructor:network.DGSkillColorLoadPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DGSkillColorLoadPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.colors_.~RepeatedPtrField();
}

void DGSkillColorLoadPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DGSkillColorLoadPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.DGSkillColorLoadPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.colors_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DGSkillColorLoadPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .network.DGSkillColorLoadPacket.SkillColor colors = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_colors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DGSkillColorLoadPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.DGSkillColorLoadPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .network.DGSkillColorLoadPacket.SkillColor colors = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_colors_size()); i < n; i++) {
    const auto& repfield = this->_internal_colors(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.DGSkillColorLoadPacket)
  return target;
}

size_t DGSkillColorLoadPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.DGSkillColorLoadPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .network.DGSkillColorLoadPacket.SkillColor colors = 1;
  total_size += 1UL * this->_internal_colors_size();
  for (const auto& msg : this->_impl_.colors_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DGSkillColorLoadPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DGSkillColorLoadPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DGSkillColorLoadPacket::GetClassData() const { return &_class_data_; }


void DGSkillColorLoadPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DGSkillColorLoadPacket*>(&to_msg);
  auto& from = static_cast<const DGSkillColorLoadPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.DGSkillColorLoadPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.colors_.MergeFrom(from._impl_.colors_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DGSkillColorLoadPacket::CopyFrom(const DGSkillColorLoadPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.DGSkillColorLoadPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DGSkillColorLoadPacket::IsInitialized() const {
  return true;
}

void DGSkillColorLoadPacket::InternalSwap(DGSkillColorLoadPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.colors_.InternalSwap(&other->_impl_.colors_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DGSkillColorLoadPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dg_5fpackets_2eproto_getter, &descriptor_table_dg_5fpackets_2eproto_once,
      file_level_metadata_dg_5fpackets_2eproto[51]);
}

// ===================================================================

class DGEquipmentPageLoadPacket::_Internal {
 public:
};

void DGEquipmentPageLoadPacket::clear_equipments() {
  _impl_.equipments_.Clear();
}
DGEquipmentPageLoadPacket::DGEquipmentPageLoadPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.DGEquipmentPageLoadPacket)
}
DGEquipmentPageLoadPacket::DGEquipmentPageLoadPacket(const DGEquipmentPageLoadPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DGEquipmentPageLoadPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.equipments_){from._impl_.equipments_}
    , decltype(_impl_.pid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.pid_ = from._impl_.pid_;
  // @@protoc_insertion_point(copy_constructor:network.DGEquipmentPageLoadPacket)
}

inline void DGEquipmentPageLoadPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.equipments_){arena}
    , decltype(_impl_.pid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DGEquipmentPageLoadPacket::~DGEquipmentPageLoadPacket() {
  // @@protoc_insertion_point(destructor:network.DGEquipmentPageLoadPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DGEquipmentPageLoadPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.equipments_.~RepeatedPtrField();
}

void DGEquipmentPageLoadPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DGEquipmentPageLoadPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.DGEquipmentPageLoadPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.equipments_.Clear();
  _impl_.pid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DGEquipmentPageLoadPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .network.TEquipmentChangerTable equipments = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_equipments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DGEquipmentPageLoadPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.DGEquipmentPageLoadPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pid(), target);
  }

  // repeated .network.TEquipmentChangerTable equipments = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_equipments_size()); i < n; i++) {
    const auto& repfield = this->_internal_equipments(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.DGEquipmentPageLoadPacket)
  return target;
}

size_t DGEquipmentPageLoadPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.DGEquipmentPageLoadPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .network.TEquipmentChangerTable equipments = 2;
  total_size += 1UL * this->_internal_equipments_size();
  for (const auto& msg : this->_impl_.equipments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DGEquipmentPageLoadPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DGEquipmentPageLoadPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DGEquipmentPageLoadPacket::GetClassData() const { return &_class_data_; }


void DGEquipmentPageLoadPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DGEquipmentPageLoadPacket*>(&to_msg);
  auto& from = static_cast<const DGEquipmentPageLoadPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.DGEquipmentPageLoadPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.equipments_.MergeFrom(from._impl_.equipments_);
  if (from._internal_pid() != 0) {
    _this->_internal_set_pid(from._internal_pid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DGEquipmentPageLoadPacket::CopyFrom(const DGEquipmentPageLoadPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.DGEquipmentPageLoadPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DGEquipmentPageLoadPacket::IsInitialized() const {
  return true;
}

void DGEquipmentPageLoadPacket::InternalSwap(DGEquipmentPageLoadPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.equipments_.InternalSwap(&other->_impl_.equipments_);
  swap(_impl_.pid_, other->_impl_.pid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DGEquipmentPageLoadPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dg_5fpackets_2eproto_getter, &descriptor_table_dg_5fpackets_2eproto_once,
      file_level_metadata_dg_5fpackets_2eproto[52]);
}

// ===================================================================

class DGGuildDungeonPacket::_Internal {
 public:
};

DGGuildDungeonPacket::DGGuildDungeonPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.DGGuildDungeonPacket)
}
DGGuildDungeonPacket::DGGuildDungeonPacket(const DGGuildDungeonPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DGGuildDungeonPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.guild_id_){}
    , decltype(_impl_.channel_){}
    , decltype(_impl_.map_index_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.guild_id_, &from._impl_.guild_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.map_index_) -
    reinterpret_cast<char*>(&_impl_.guild_id_)) + sizeof(_impl_.map_index_));
  // @@protoc_insertion_point(copy_constructor:network.DGGuildDungeonPacket)
}

inline void DGGuildDungeonPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.guild_id_){0u}
    , decltype(_impl_.channel_){0u}
    , decltype(_impl_.map_index_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DGGuildDungeonPacket::~DGGuildDungeonPacket() {
  // @@protoc_insertion_point(destructor:network.DGGuildDungeonPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DGGuildDungeonPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DGGuildDungeonPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DGGuildDungeonPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.DGGuildDungeonPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.guild_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.map_index_) -
      reinterpret_cast<char*>(&_impl_.guild_id_)) + sizeof(_impl_.map_index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DGGuildDungeonPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 guild_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 channel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 map_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.map_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DGGuildDungeonPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.DGGuildDungeonPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 guild_id = 1;
  if (this->_internal_guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_guild_id(), target);
  }

  // uint32 channel = 2;
  if (this->_internal_channel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_channel(), target);
  }

  // uint32 map_index = 3;
  if (this->_internal_map_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_map_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.DGGuildDungeonPacket)
  return target;
}

size_t DGGuildDungeonPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.DGGuildDungeonPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 guild_id = 1;
  if (this->_internal_guild_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_guild_id());
  }

  // uint32 channel = 2;
  if (this->_internal_channel() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel());
  }

  // uint32 map_index = 3;
  if (this->_internal_map_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_map_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DGGuildDungeonPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DGGuildDungeonPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DGGuildDungeonPacket::GetClassData() const { return &_class_data_; }


void DGGuildDungeonPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DGGuildDungeonPacket*>(&to_msg);
  auto& from = static_cast<const DGGuildDungeonPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.DGGuildDungeonPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_guild_id() != 0) {
    _this->_internal_set_guild_id(from._internal_guild_id());
  }
  if (from._internal_channel() != 0) {
    _this->_internal_set_channel(from._internal_channel());
  }
  if (from._internal_map_index() != 0) {
    _this->_internal_set_map_index(from._internal_map_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DGGuildDungeonPacket::CopyFrom(const DGGuildDungeonPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.DGGuildDungeonPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DGGuildDungeonPacket::IsInitialized() const {
  return true;
}

void DGGuildDungeonPacket::InternalSwap(DGGuildDungeonPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DGGuildDungeonPacket, _impl_.map_index_)
      + sizeof(DGGuildDungeonPacket::_impl_.map_index_)
      - PROTOBUF_FIELD_OFFSET(DGGuildDungeonPacket, _impl_.guild_id_)>(
          reinterpret_cast<char*>(&_impl_.guild_id_),
          reinterpret_cast<char*>(&other->_impl_.guild_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DGGuildDungeonPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dg_5fpackets_2eproto_getter, &descriptor_table_dg_5fpackets_2eproto_once,
      file_level_metadata_dg_5fpackets_2eproto[53]);
}

// ===================================================================

class DGGuildDungeonCDPacket::_Internal {
 public:
};

DGGuildDungeonCDPacket::DGGuildDungeonCDPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.DGGuildDungeonCDPacket)
}
DGGuildDungeonCDPacket::DGGuildDungeonCDPacket(const DGGuildDungeonCDPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DGGuildDungeonCDPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.guild_id_){}
    , decltype(_impl_.time_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.guild_id_, &from._impl_.guild_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.time_) -
    reinterpret_cast<char*>(&_impl_.guild_id_)) + sizeof(_impl_.time_));
  // @@protoc_insertion_point(copy_constructor:network.DGGuildDungeonCDPacket)
}

inline void DGGuildDungeonCDPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.guild_id_){0u}
    , decltype(_impl_.time_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DGGuildDungeonCDPacket::~DGGuildDungeonCDPacket() {
  // @@protoc_insertion_point(destructor:network.DGGuildDungeonCDPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DGGuildDungeonCDPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DGGuildDungeonCDPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DGGuildDungeonCDPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.DGGuildDungeonCDPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.guild_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.time_) -
      reinterpret_cast<char*>(&_impl_.guild_id_)) + sizeof(_impl_.time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DGGuildDungeonCDPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 guild_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DGGuildDungeonCDPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.DGGuildDungeonCDPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 guild_id = 1;
  if (this->_internal_guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_guild_id(), target);
  }

  // uint32 time = 2;
  if (this->_internal_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.DGGuildDungeonCDPacket)
  return target;
}

size_t DGGuildDungeonCDPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.DGGuildDungeonCDPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 guild_id = 1;
  if (this->_internal_guild_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_guild_id());
  }

  // uint32 time = 2;
  if (this->_internal_time() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_time());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DGGuildDungeonCDPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DGGuildDungeonCDPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DGGuildDungeonCDPacket::GetClassData() const { return &_class_data_; }


void DGGuildDungeonCDPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DGGuildDungeonCDPacket*>(&to_msg);
  auto& from = static_cast<const DGGuildDungeonCDPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.DGGuildDungeonCDPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_guild_id() != 0) {
    _this->_internal_set_guild_id(from._internal_guild_id());
  }
  if (from._internal_time() != 0) {
    _this->_internal_set_time(from._internal_time());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DGGuildDungeonCDPacket::CopyFrom(const DGGuildDungeonCDPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.DGGuildDungeonCDPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DGGuildDungeonCDPacket::IsInitialized() const {
  return true;
}

void DGGuildDungeonCDPacket::InternalSwap(DGGuildDungeonCDPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DGGuildDungeonCDPacket, _impl_.time_)
      + sizeof(DGGuildDungeonCDPacket::_impl_.time_)
      - PROTOBUF_FIELD_OFFSET(DGGuildDungeonCDPacket, _impl_.guild_id_)>(
          reinterpret_cast<char*>(&_impl_.guild_id_),
          reinterpret_cast<char*>(&other->_impl_.guild_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DGGuildDungeonCDPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dg_5fpackets_2eproto_getter, &descriptor_table_dg_5fpackets_2eproto_once,
      file_level_metadata_dg_5fpackets_2eproto[54]);
}

// ===================================================================

class DGMaintenancePacket::_Internal {
 public:
};

DGMaintenancePacket::DGMaintenancePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.DGMaintenancePacket)
}
DGMaintenancePacket::DGMaintenancePacket(const DGMaintenancePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DGMaintenancePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.shutdown_timer_){}
    , decltype(_impl_.maintenance_){}
    , decltype(_impl_.maintenance_duration_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.shutdown_timer_, &from._impl_.shutdown_timer_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.maintenance_duration_) -
    reinterpret_cast<char*>(&_impl_.shutdown_timer_)) + sizeof(_impl_.maintenance_duration_));
  // @@protoc_insertion_point(copy_constructor:network.DGMaintenancePacket)
}

inline void DGMaintenancePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.shutdown_timer_){0}
    , decltype(_impl_.maintenance_){false}
    , decltype(_impl_.maintenance_duration_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DGMaintenancePacket::~DGMaintenancePacket() {
  // @@protoc_insertion_point(destructor:network.DGMaintenancePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DGMaintenancePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DGMaintenancePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DGMaintenancePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.DGMaintenancePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.shutdown_timer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.maintenance_duration_) -
      reinterpret_cast<char*>(&_impl_.shutdown_timer_)) + sizeof(_impl_.maintenance_duration_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DGMaintenancePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 shutdown_timer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.shutdown_timer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool maintenance = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.maintenance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 maintenance_duration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.maintenance_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DGMaintenancePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.DGMaintenancePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 shutdown_timer = 1;
  if (this->_internal_shutdown_timer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_shutdown_timer(), target);
  }

  // bool maintenance = 2;
  if (this->_internal_maintenance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_maintenance(), target);
  }

  // int32 maintenance_duration = 3;
  if (this->_internal_maintenance_duration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_maintenance_duration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.DGMaintenancePacket)
  return target;
}

size_t DGMaintenancePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.DGMaintenancePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 shutdown_timer = 1;
  if (this->_internal_shutdown_timer() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_shutdown_timer());
  }

  // bool maintenance = 2;
  if (this->_internal_maintenance() != 0) {
    total_size += 1 + 1;
  }

  // int32 maintenance_duration = 3;
  if (this->_internal_maintenance_duration() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_maintenance_duration());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DGMaintenancePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DGMaintenancePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DGMaintenancePacket::GetClassData() const { return &_class_data_; }


void DGMaintenancePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DGMaintenancePacket*>(&to_msg);
  auto& from = static_cast<const DGMaintenancePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.DGMaintenancePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_shutdown_timer() != 0) {
    _this->_internal_set_shutdown_timer(from._internal_shutdown_timer());
  }
  if (from._internal_maintenance() != 0) {
    _this->_internal_set_maintenance(from._internal_maintenance());
  }
  if (from._internal_maintenance_duration() != 0) {
    _this->_internal_set_maintenance_duration(from._internal_maintenance_duration());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DGMaintenancePacket::CopyFrom(const DGMaintenancePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.DGMaintenancePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DGMaintenancePacket::IsInitialized() const {
  return true;
}

void DGMaintenancePacket::InternalSwap(DGMaintenancePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DGMaintenancePacket, _impl_.maintenance_duration_)
      + sizeof(DGMaintenancePacket::_impl_.maintenance_duration_)
      - PROTOBUF_FIELD_OFFSET(DGMaintenancePacket, _impl_.shutdown_timer_)>(
          reinterpret_cast<char*>(&_impl_.shutdown_timer_),
          reinterpret_cast<char*>(&other->_impl_.shutdown_timer_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DGMaintenancePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dg_5fpackets_2eproto_getter, &descriptor_table_dg_5fpackets_2eproto_once,
      file_level_metadata_dg_5fpackets_2eproto[55]);
}

// ===================================================================

class DGWhitelistIPPacket::_Internal {
 public:
};

DGWhitelistIPPacket::DGWhitelistIPPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.DGWhitelistIPPacket)
}
DGWhitelistIPPacket::DGWhitelistIPPacket(const DGWhitelistIPPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DGWhitelistIPPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ip_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ip().empty()) {
    _this->_impl_.ip_.Set(from._internal_ip(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:network.DGWhitelistIPPacket)
}

inline void DGWhitelistIPPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ip_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DGWhitelistIPPacket::~DGWhitelistIPPacket() {
  // @@protoc_insertion_point(destructor:network.DGWhitelistIPPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DGWhitelistIPPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ip_.Destroy();
}

void DGWhitelistIPPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DGWhitelistIPPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.DGWhitelistIPPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ip_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DGWhitelistIPPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string ip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_ip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "network.DGWhitelistIPPacket.ip"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DGWhitelistIPPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.DGWhitelistIPPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string ip = 1;
  if (!this->_internal_ip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "network.DGWhitelistIPPacket.ip");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ip(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.DGWhitelistIPPacket)
  return target;
}

size_t DGWhitelistIPPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.DGWhitelistIPPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ip = 1;
  if (!this->_internal_ip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DGWhitelistIPPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DGWhitelistIPPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DGWhitelistIPPacket::GetClassData() const { return &_class_data_; }


void DGWhitelistIPPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DGWhitelistIPPacket*>(&to_msg);
  auto& from = static_cast<const DGWhitelistIPPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.DGWhitelistIPPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ip().empty()) {
    _this->_internal_set_ip(from._internal_ip());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DGWhitelistIPPacket::CopyFrom(const DGWhitelistIPPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.DGWhitelistIPPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DGWhitelistIPPacket::IsInitialized() const {
  return true;
}

void DGWhitelistIPPacket::InternalSwap(DGWhitelistIPPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ip_, lhs_arena,
      &other->_impl_.ip_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DGWhitelistIPPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dg_5fpackets_2eproto_getter, &descriptor_table_dg_5fpackets_2eproto_once,
      file_level_metadata_dg_5fpackets_2eproto[56]);
}

// ===================================================================

class DGAuctionDeletePlayer::_Internal {
 public:
};

DGAuctionDeletePlayer::DGAuctionDeletePlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.DGAuctionDeletePlayer)
}
DGAuctionDeletePlayer::DGAuctionDeletePlayer(const DGAuctionDeletePlayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DGAuctionDeletePlayer* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.pid_ = from._impl_.pid_;
  // @@protoc_insertion_point(copy_constructor:network.DGAuctionDeletePlayer)
}

inline void DGAuctionDeletePlayer::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DGAuctionDeletePlayer::~DGAuctionDeletePlayer() {
  // @@protoc_insertion_point(destructor:network.DGAuctionDeletePlayer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DGAuctionDeletePlayer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DGAuctionDeletePlayer::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DGAuctionDeletePlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:network.DGAuctionDeletePlayer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DGAuctionDeletePlayer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DGAuctionDeletePlayer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.DGAuctionDeletePlayer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.DGAuctionDeletePlayer)
  return target;
}

size_t DGAuctionDeletePlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.DGAuctionDeletePlayer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DGAuctionDeletePlayer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DGAuctionDeletePlayer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DGAuctionDeletePlayer::GetClassData() const { return &_class_data_; }


void DGAuctionDeletePlayer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DGAuctionDeletePlayer*>(&to_msg);
  auto& from = static_cast<const DGAuctionDeletePlayer&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.DGAuctionDeletePlayer)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_pid() != 0) {
    _this->_internal_set_pid(from._internal_pid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DGAuctionDeletePlayer::CopyFrom(const DGAuctionDeletePlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.DGAuctionDeletePlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DGAuctionDeletePlayer::IsInitialized() const {
  return true;
}

void DGAuctionDeletePlayer::InternalSwap(DGAuctionDeletePlayer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.pid_, other->_impl_.pid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DGAuctionDeletePlayer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dg_5fpackets_2eproto_getter, &descriptor_table_dg_5fpackets_2eproto_once,
      file_level_metadata_dg_5fpackets_2eproto[57]);
}

// ===================================================================

class DGCreateObjectPacket::_Internal {
 public:
  static const ::network::TBuildingObject& object(const DGCreateObjectPacket* msg);
};

const ::network::TBuildingObject&
DGCreateObjectPacket::_Internal::object(const DGCreateObjectPacket* msg) {
  return *msg->_impl_.object_;
}
void DGCreateObjectPacket::clear_object() {
  if (GetArenaForAllocation() == nullptr && _impl_.object_ != nullptr) {
    delete _impl_.object_;
  }
  _impl_.object_ = nullptr;
}
DGCreateObjectPacket::DGCreateObjectPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.DGCreateObjectPacket)
}
DGCreateObjectPacket::DGCreateObjectPacket(const DGCreateObjectPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DGCreateObjectPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.object_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_object()) {
    _this->_impl_.object_ = new ::network::TBuildingObject(*from._impl_.object_);
  }
  // @@protoc_insertion_point(copy_constructor:network.DGCreateObjectPacket)
}

inline void DGCreateObjectPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.object_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DGCreateObjectPacket::~DGCreateObjectPacket() {
  // @@protoc_insertion_point(destructor:network.DGCreateObjectPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DGCreateObjectPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.object_;
}

void DGCreateObjectPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DGCreateObjectPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.DGCreateObjectPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.object_ != nullptr) {
    delete _impl_.object_;
  }
  _impl_.object_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DGCreateObjectPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .network.TBuildingObject object = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_object(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DGCreateObjectPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.DGCreateObjectPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .network.TBuildingObject object = 1;
  if (this->_internal_has_object()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::object(this),
        _Internal::object(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.DGCreateObjectPacket)
  return target;
}

size_t DGCreateObjectPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.DGCreateObjectPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .network.TBuildingObject object = 1;
  if (this->_internal_has_object()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.object_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DGCreateObjectPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DGCreateObjectPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DGCreateObjectPacket::GetClassData() const { return &_class_data_; }


void DGCreateObjectPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DGCreateObjectPacket*>(&to_msg);
  auto& from = static_cast<const DGCreateObjectPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.DGCreateObjectPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_object()) {
    _this->_internal_mutable_object()->::network::TBuildingObject::MergeFrom(
        from._internal_object());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DGCreateObjectPacket::CopyFrom(const DGCreateObjectPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.DGCreateObjectPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DGCreateObjectPacket::IsInitialized() const {
  return true;
}

void DGCreateObjectPacket::InternalSwap(DGCreateObjectPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.object_, other->_impl_.object_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DGCreateObjectPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dg_5fpackets_2eproto_getter, &descriptor_table_dg_5fpackets_2eproto_once,
      file_level_metadata_dg_5fpackets_2eproto[58]);
}

// ===================================================================

class DGDeleteObjectPacket::_Internal {
 public:
};

DGDeleteObjectPacket::DGDeleteObjectPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.DGDeleteObjectPacket)
}
DGDeleteObjectPacket::DGDeleteObjectPacket(const DGDeleteObjectPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DGDeleteObjectPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:network.DGDeleteObjectPacket)
}

inline void DGDeleteObjectPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DGDeleteObjectPacket::~DGDeleteObjectPacket() {
  // @@protoc_insertion_point(destructor:network.DGDeleteObjectPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DGDeleteObjectPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DGDeleteObjectPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DGDeleteObjectPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.DGDeleteObjectPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DGDeleteObjectPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DGDeleteObjectPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.DGDeleteObjectPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.DGDeleteObjectPacket)
  return target;
}

size_t DGDeleteObjectPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.DGDeleteObjectPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DGDeleteObjectPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DGDeleteObjectPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DGDeleteObjectPacket::GetClassData() const { return &_class_data_; }


void DGDeleteObjectPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DGDeleteObjectPacket*>(&to_msg);
  auto& from = static_cast<const DGDeleteObjectPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.DGDeleteObjectPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DGDeleteObjectPacket::CopyFrom(const DGDeleteObjectPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.DGDeleteObjectPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DGDeleteObjectPacket::IsInitialized() const {
  return true;
}

void DGDeleteObjectPacket::InternalSwap(DGDeleteObjectPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DGDeleteObjectPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dg_5fpackets_2eproto_getter, &descriptor_table_dg_5fpackets_2eproto_once,
      file_level_metadata_dg_5fpackets_2eproto[59]);
}

// ===================================================================

class DGUpdateLandPacket::_Internal {
 public:
  static const ::network::TBuildingLand& land(const DGUpdateLandPacket* msg);
};

const ::network::TBuildingLand&
DGUpdateLandPacket::_Internal::land(const DGUpdateLandPacket* msg) {
  return *msg->_impl_.land_;
}
void DGUpdateLandPacket::clear_land() {
  if (GetArenaForAllocation() == nullptr && _impl_.land_ != nullptr) {
    delete _impl_.land_;
  }
  _impl_.land_ = nullptr;
}
DGUpdateLandPacket::DGUpdateLandPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.DGUpdateLandPacket)
}
DGUpdateLandPacket::DGUpdateLandPacket(const DGUpdateLandPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DGUpdateLandPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.land_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_land()) {
    _this->_impl_.land_ = new ::network::TBuildingLand(*from._impl_.land_);
  }
  // @@protoc_insertion_point(copy_constructor:network.DGUpdateLandPacket)
}

inline void DGUpdateLandPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.land_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DGUpdateLandPacket::~DGUpdateLandPacket() {
  // @@protoc_insertion_point(destructor:network.DGUpdateLandPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DGUpdateLandPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.land_;
}

void DGUpdateLandPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DGUpdateLandPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.DGUpdateLandPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.land_ != nullptr) {
    delete _impl_.land_;
  }
  _impl_.land_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DGUpdateLandPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .network.TBuildingLand land = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_land(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DGUpdateLandPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.DGUpdateLandPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .network.TBuildingLand land = 1;
  if (this->_internal_has_land()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::land(this),
        _Internal::land(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.DGUpdateLandPacket)
  return target;
}

size_t DGUpdateLandPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.DGUpdateLandPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .network.TBuildingLand land = 1;
  if (this->_internal_has_land()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.land_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DGUpdateLandPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DGUpdateLandPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DGUpdateLandPacket::GetClassData() const { return &_class_data_; }


void DGUpdateLandPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DGUpdateLandPacket*>(&to_msg);
  auto& from = static_cast<const DGUpdateLandPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.DGUpdateLandPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_land()) {
    _this->_internal_mutable_land()->::network::TBuildingLand::MergeFrom(
        from._internal_land());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DGUpdateLandPacket::CopyFrom(const DGUpdateLandPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.DGUpdateLandPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DGUpdateLandPacket::IsInitialized() const {
  return true;
}

void DGUpdateLandPacket::InternalSwap(DGUpdateLandPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.land_, other->_impl_.land_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DGUpdateLandPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dg_5fpackets_2eproto_getter, &descriptor_table_dg_5fpackets_2eproto_once,
      file_level_metadata_dg_5fpackets_2eproto[60]);
}

// ===================================================================

class DGMarriageAddPacket::_Internal {
 public:
};

DGMarriageAddPacket::DGMarriageAddPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.DGMarriageAddPacket)
}
DGMarriageAddPacket::DGMarriageAddPacket(const DGMarriageAddPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DGMarriageAddPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name1_){}
    , decltype(_impl_.name2_){}
    , decltype(_impl_.pid1_){}
    , decltype(_impl_.pid2_){}
    , decltype(_impl_.marry_time_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name1().empty()) {
    _this->_impl_.name1_.Set(from._internal_name1(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name2().empty()) {
    _this->_impl_.name2_.Set(from._internal_name2(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.pid1_, &from._impl_.pid1_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.marry_time_) -
    reinterpret_cast<char*>(&_impl_.pid1_)) + sizeof(_impl_.marry_time_));
  // @@protoc_insertion_point(copy_constructor:network.DGMarriageAddPacket)
}

inline void DGMarriageAddPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name1_){}
    , decltype(_impl_.name2_){}
    , decltype(_impl_.pid1_){0u}
    , decltype(_impl_.pid2_){0u}
    , decltype(_impl_.marry_time_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DGMarriageAddPacket::~DGMarriageAddPacket() {
  // @@protoc_insertion_point(destructor:network.DGMarriageAddPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DGMarriageAddPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name1_.Destroy();
  _impl_.name2_.Destroy();
}

void DGMarriageAddPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DGMarriageAddPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.DGMarriageAddPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name1_.ClearToEmpty();
  _impl_.name2_.ClearToEmpty();
  ::memset(&_impl_.pid1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.marry_time_) -
      reinterpret_cast<char*>(&_impl_.pid1_)) + sizeof(_impl_.marry_time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DGMarriageAddPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 pid1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pid1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 pid2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.pid2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 marry_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.marry_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes name1 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_name1();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes name2 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_name2();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DGMarriageAddPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.DGMarriageAddPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pid1 = 1;
  if (this->_internal_pid1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pid1(), target);
  }

  // uint32 pid2 = 2;
  if (this->_internal_pid2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_pid2(), target);
  }

  // uint32 marry_time = 3;
  if (this->_internal_marry_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_marry_time(), target);
  }

  // bytes name1 = 4;
  if (!this->_internal_name1().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_name1(), target);
  }

  // bytes name2 = 5;
  if (!this->_internal_name2().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_name2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.DGMarriageAddPacket)
  return target;
}

size_t DGMarriageAddPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.DGMarriageAddPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name1 = 4;
  if (!this->_internal_name1().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name1());
  }

  // bytes name2 = 5;
  if (!this->_internal_name2().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name2());
  }

  // uint32 pid1 = 1;
  if (this->_internal_pid1() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid1());
  }

  // uint32 pid2 = 2;
  if (this->_internal_pid2() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid2());
  }

  // uint32 marry_time = 3;
  if (this->_internal_marry_time() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_marry_time());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DGMarriageAddPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DGMarriageAddPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DGMarriageAddPacket::GetClassData() const { return &_class_data_; }


void DGMarriageAddPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DGMarriageAddPacket*>(&to_msg);
  auto& from = static_cast<const DGMarriageAddPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.DGMarriageAddPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name1().empty()) {
    _this->_internal_set_name1(from._internal_name1());
  }
  if (!from._internal_name2().empty()) {
    _this->_internal_set_name2(from._internal_name2());
  }
  if (from._internal_pid1() != 0) {
    _this->_internal_set_pid1(from._internal_pid1());
  }
  if (from._internal_pid2() != 0) {
    _this->_internal_set_pid2(from._internal_pid2());
  }
  if (from._internal_marry_time() != 0) {
    _this->_internal_set_marry_time(from._internal_marry_time());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DGMarriageAddPacket::CopyFrom(const DGMarriageAddPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.DGMarriageAddPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DGMarriageAddPacket::IsInitialized() const {
  return true;
}

void DGMarriageAddPacket::InternalSwap(DGMarriageAddPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name1_, lhs_arena,
      &other->_impl_.name1_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name2_, lhs_arena,
      &other->_impl_.name2_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DGMarriageAddPacket, _impl_.marry_time_)
      + sizeof(DGMarriageAddPacket::_impl_.marry_time_)
      - PROTOBUF_FIELD_OFFSET(DGMarriageAddPacket, _impl_.pid1_)>(
          reinterpret_cast<char*>(&_impl_.pid1_),
          reinterpret_cast<char*>(&other->_impl_.pid1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DGMarriageAddPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dg_5fpackets_2eproto_getter, &descriptor_table_dg_5fpackets_2eproto_once,
      file_level_metadata_dg_5fpackets_2eproto[61]);
}

// ===================================================================

class DGMarriageUpdatePacket::_Internal {
 public:
};

DGMarriageUpdatePacket::DGMarriageUpdatePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.DGMarriageUpdatePacket)
}
DGMarriageUpdatePacket::DGMarriageUpdatePacket(const DGMarriageUpdatePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DGMarriageUpdatePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pid1_){}
    , decltype(_impl_.pid2_){}
    , decltype(_impl_.love_point_){}
    , decltype(_impl_.married_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.pid1_, &from._impl_.pid1_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.married_) -
    reinterpret_cast<char*>(&_impl_.pid1_)) + sizeof(_impl_.married_));
  // @@protoc_insertion_point(copy_constructor:network.DGMarriageUpdatePacket)
}

inline void DGMarriageUpdatePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pid1_){0u}
    , decltype(_impl_.pid2_){0u}
    , decltype(_impl_.love_point_){0}
    , decltype(_impl_.married_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DGMarriageUpdatePacket::~DGMarriageUpdatePacket() {
  // @@protoc_insertion_point(destructor:network.DGMarriageUpdatePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DGMarriageUpdatePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DGMarriageUpdatePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DGMarriageUpdatePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.DGMarriageUpdatePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.pid1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.married_) -
      reinterpret_cast<char*>(&_impl_.pid1_)) + sizeof(_impl_.married_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DGMarriageUpdatePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 pid1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pid1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 pid2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.pid2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 love_point = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.love_point_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool married = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.married_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DGMarriageUpdatePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.DGMarriageUpdatePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pid1 = 1;
  if (this->_internal_pid1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pid1(), target);
  }

  // uint32 pid2 = 2;
  if (this->_internal_pid2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_pid2(), target);
  }

  // int32 love_point = 3;
  if (this->_internal_love_point() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_love_point(), target);
  }

  // bool married = 4;
  if (this->_internal_married() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_married(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.DGMarriageUpdatePacket)
  return target;
}

size_t DGMarriageUpdatePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.DGMarriageUpdatePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 pid1 = 1;
  if (this->_internal_pid1() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid1());
  }

  // uint32 pid2 = 2;
  if (this->_internal_pid2() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid2());
  }

  // int32 love_point = 3;
  if (this->_internal_love_point() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_love_point());
  }

  // bool married = 4;
  if (this->_internal_married() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DGMarriageUpdatePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DGMarriageUpdatePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DGMarriageUpdatePacket::GetClassData() const { return &_class_data_; }


void DGMarriageUpdatePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DGMarriageUpdatePacket*>(&to_msg);
  auto& from = static_cast<const DGMarriageUpdatePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.DGMarriageUpdatePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_pid1() != 0) {
    _this->_internal_set_pid1(from._internal_pid1());
  }
  if (from._internal_pid2() != 0) {
    _this->_internal_set_pid2(from._internal_pid2());
  }
  if (from._internal_love_point() != 0) {
    _this->_internal_set_love_point(from._internal_love_point());
  }
  if (from._internal_married() != 0) {
    _this->_internal_set_married(from._internal_married());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DGMarriageUpdatePacket::CopyFrom(const DGMarriageUpdatePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.DGMarriageUpdatePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DGMarriageUpdatePacket::IsInitialized() const {
  return true;
}

void DGMarriageUpdatePacket::InternalSwap(DGMarriageUpdatePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DGMarriageUpdatePacket, _impl_.married_)
      + sizeof(DGMarriageUpdatePacket::_impl_.married_)
      - PROTOBUF_FIELD_OFFSET(DGMarriageUpdatePacket, _impl_.pid1_)>(
          reinterpret_cast<char*>(&_impl_.pid1_),
          reinterpret_cast<char*>(&other->_impl_.pid1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DGMarriageUpdatePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dg_5fpackets_2eproto_getter, &descriptor_table_dg_5fpackets_2eproto_once,
      file_level_metadata_dg_5fpackets_2eproto[62]);
}

// ===================================================================

class DGMarriageRemovePacket::_Internal {
 public:
};

DGMarriageRemovePacket::DGMarriageRemovePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.DGMarriageRemovePacket)
}
DGMarriageRemovePacket::DGMarriageRemovePacket(const DGMarriageRemovePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DGMarriageRemovePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pid1_){}
    , decltype(_impl_.pid2_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.pid1_, &from._impl_.pid1_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.pid2_) -
    reinterpret_cast<char*>(&_impl_.pid1_)) + sizeof(_impl_.pid2_));
  // @@protoc_insertion_point(copy_constructor:network.DGMarriageRemovePacket)
}

inline void DGMarriageRemovePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pid1_){0u}
    , decltype(_impl_.pid2_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DGMarriageRemovePacket::~DGMarriageRemovePacket() {
  // @@protoc_insertion_point(destructor:network.DGMarriageRemovePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DGMarriageRemovePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DGMarriageRemovePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DGMarriageRemovePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.DGMarriageRemovePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.pid1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.pid2_) -
      reinterpret_cast<char*>(&_impl_.pid1_)) + sizeof(_impl_.pid2_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DGMarriageRemovePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 pid1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pid1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 pid2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.pid2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DGMarriageRemovePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.DGMarriageRemovePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pid1 = 1;
  if (this->_internal_pid1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pid1(), target);
  }

  // uint32 pid2 = 2;
  if (this->_internal_pid2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_pid2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.DGMarriageRemovePacket)
  return target;
}

size_t DGMarriageRemovePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.DGMarriageRemovePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 pid1 = 1;
  if (this->_internal_pid1() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid1());
  }

  // uint32 pid2 = 2;
  if (this->_internal_pid2() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid2());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DGMarriageRemovePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DGMarriageRemovePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DGMarriageRemovePacket::GetClassData() const { return &_class_data_; }


void DGMarriageRemovePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DGMarriageRemovePacket*>(&to_msg);
  auto& from = static_cast<const DGMarriageRemovePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.DGMarriageRemovePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_pid1() != 0) {
    _this->_internal_set_pid1(from._internal_pid1());
  }
  if (from._internal_pid2() != 0) {
    _this->_internal_set_pid2(from._internal_pid2());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DGMarriageRemovePacket::CopyFrom(const DGMarriageRemovePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.DGMarriageRemovePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DGMarriageRemovePacket::IsInitialized() const {
  return true;
}

void DGMarriageRemovePacket::InternalSwap(DGMarriageRemovePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DGMarriageRemovePacket, _impl_.pid2_)
      + sizeof(DGMarriageRemovePacket::_impl_.pid2_)
      - PROTOBUF_FIELD_OFFSET(DGMarriageRemovePacket, _impl_.pid1_)>(
          reinterpret_cast<char*>(&_impl_.pid1_),
          reinterpret_cast<char*>(&other->_impl_.pid1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DGMarriageRemovePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dg_5fpackets_2eproto_getter, &descriptor_table_dg_5fpackets_2eproto_once,
      file_level_metadata_dg_5fpackets_2eproto[63]);
}

// ===================================================================

class DGWeddingRequestPacket::_Internal {
 public:
};

DGWeddingRequestPacket::DGWeddingRequestPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.DGWeddingRequestPacket)
}
DGWeddingRequestPacket::DGWeddingRequestPacket(const DGWeddingRequestPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DGWeddingRequestPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pid1_){}
    , decltype(_impl_.pid2_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.pid1_, &from._impl_.pid1_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.pid2_) -
    reinterpret_cast<char*>(&_impl_.pid1_)) + sizeof(_impl_.pid2_));
  // @@protoc_insertion_point(copy_constructor:network.DGWeddingRequestPacket)
}

inline void DGWeddingRequestPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pid1_){0u}
    , decltype(_impl_.pid2_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DGWeddingRequestPacket::~DGWeddingRequestPacket() {
  // @@protoc_insertion_point(destructor:network.DGWeddingRequestPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DGWeddingRequestPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DGWeddingRequestPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DGWeddingRequestPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.DGWeddingRequestPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.pid1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.pid2_) -
      reinterpret_cast<char*>(&_impl_.pid1_)) + sizeof(_impl_.pid2_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DGWeddingRequestPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 pid1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pid1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 pid2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.pid2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DGWeddingRequestPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.DGWeddingRequestPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pid1 = 1;
  if (this->_internal_pid1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pid1(), target);
  }

  // uint32 pid2 = 2;
  if (this->_internal_pid2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_pid2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.DGWeddingRequestPacket)
  return target;
}

size_t DGWeddingRequestPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.DGWeddingRequestPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 pid1 = 1;
  if (this->_internal_pid1() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid1());
  }

  // uint32 pid2 = 2;
  if (this->_internal_pid2() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid2());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DGWeddingRequestPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DGWeddingRequestPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DGWeddingRequestPacket::GetClassData() const { return &_class_data_; }


void DGWeddingRequestPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DGWeddingRequestPacket*>(&to_msg);
  auto& from = static_cast<const DGWeddingRequestPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.DGWeddingRequestPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_pid1() != 0) {
    _this->_internal_set_pid1(from._internal_pid1());
  }
  if (from._internal_pid2() != 0) {
    _this->_internal_set_pid2(from._internal_pid2());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DGWeddingRequestPacket::CopyFrom(const DGWeddingRequestPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.DGWeddingRequestPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DGWeddingRequestPacket::IsInitialized() const {
  return true;
}

void DGWeddingRequestPacket::InternalSwap(DGWeddingRequestPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DGWeddingRequestPacket, _impl_.pid2_)
      + sizeof(DGWeddingRequestPacket::_impl_.pid2_)
      - PROTOBUF_FIELD_OFFSET(DGWeddingRequestPacket, _impl_.pid1_)>(
          reinterpret_cast<char*>(&_impl_.pid1_),
          reinterpret_cast<char*>(&other->_impl_.pid1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DGWeddingRequestPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dg_5fpackets_2eproto_getter, &descriptor_table_dg_5fpackets_2eproto_once,
      file_level_metadata_dg_5fpackets_2eproto[64]);
}

// ===================================================================

class DGWeddingReadyPacket::_Internal {
 public:
};

DGWeddingReadyPacket::DGWeddingReadyPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.DGWeddingReadyPacket)
}
DGWeddingReadyPacket::DGWeddingReadyPacket(const DGWeddingReadyPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DGWeddingReadyPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pid1_){}
    , decltype(_impl_.pid2_){}
    , decltype(_impl_.map_index_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.pid1_, &from._impl_.pid1_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.map_index_) -
    reinterpret_cast<char*>(&_impl_.pid1_)) + sizeof(_impl_.map_index_));
  // @@protoc_insertion_point(copy_constructor:network.DGWeddingReadyPacket)
}

inline void DGWeddingReadyPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pid1_){0u}
    , decltype(_impl_.pid2_){0u}
    , decltype(_impl_.map_index_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DGWeddingReadyPacket::~DGWeddingReadyPacket() {
  // @@protoc_insertion_point(destructor:network.DGWeddingReadyPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DGWeddingReadyPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DGWeddingReadyPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DGWeddingReadyPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.DGWeddingReadyPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.pid1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.map_index_) -
      reinterpret_cast<char*>(&_impl_.pid1_)) + sizeof(_impl_.map_index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DGWeddingReadyPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 pid1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pid1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 pid2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.pid2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 map_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.map_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DGWeddingReadyPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.DGWeddingReadyPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pid1 = 1;
  if (this->_internal_pid1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pid1(), target);
  }

  // uint32 pid2 = 2;
  if (this->_internal_pid2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_pid2(), target);
  }

  // uint32 map_index = 3;
  if (this->_internal_map_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_map_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.DGWeddingReadyPacket)
  return target;
}

size_t DGWeddingReadyPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.DGWeddingReadyPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 pid1 = 1;
  if (this->_internal_pid1() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid1());
  }

  // uint32 pid2 = 2;
  if (this->_internal_pid2() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid2());
  }

  // uint32 map_index = 3;
  if (this->_internal_map_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_map_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DGWeddingReadyPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DGWeddingReadyPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DGWeddingReadyPacket::GetClassData() const { return &_class_data_; }


void DGWeddingReadyPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DGWeddingReadyPacket*>(&to_msg);
  auto& from = static_cast<const DGWeddingReadyPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.DGWeddingReadyPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_pid1() != 0) {
    _this->_internal_set_pid1(from._internal_pid1());
  }
  if (from._internal_pid2() != 0) {
    _this->_internal_set_pid2(from._internal_pid2());
  }
  if (from._internal_map_index() != 0) {
    _this->_internal_set_map_index(from._internal_map_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DGWeddingReadyPacket::CopyFrom(const DGWeddingReadyPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.DGWeddingReadyPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DGWeddingReadyPacket::IsInitialized() const {
  return true;
}

void DGWeddingReadyPacket::InternalSwap(DGWeddingReadyPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DGWeddingReadyPacket, _impl_.map_index_)
      + sizeof(DGWeddingReadyPacket::_impl_.map_index_)
      - PROTOBUF_FIELD_OFFSET(DGWeddingReadyPacket, _impl_.pid1_)>(
          reinterpret_cast<char*>(&_impl_.pid1_),
          reinterpret_cast<char*>(&other->_impl_.pid1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DGWeddingReadyPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dg_5fpackets_2eproto_getter, &descriptor_table_dg_5fpackets_2eproto_once,
      file_level_metadata_dg_5fpackets_2eproto[65]);
}

// ===================================================================

class DGWeddingStartPacket::_Internal {
 public:
};

DGWeddingStartPacket::DGWeddingStartPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.DGWeddingStartPacket)
}
DGWeddingStartPacket::DGWeddingStartPacket(const DGWeddingStartPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DGWeddingStartPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pid1_){}
    , decltype(_impl_.pid2_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.pid1_, &from._impl_.pid1_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.pid2_) -
    reinterpret_cast<char*>(&_impl_.pid1_)) + sizeof(_impl_.pid2_));
  // @@protoc_insertion_point(copy_constructor:network.DGWeddingStartPacket)
}

inline void DGWeddingStartPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pid1_){0u}
    , decltype(_impl_.pid2_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DGWeddingStartPacket::~DGWeddingStartPacket() {
  // @@protoc_insertion_point(destructor:network.DGWeddingStartPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DGWeddingStartPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DGWeddingStartPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DGWeddingStartPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.DGWeddingStartPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.pid1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.pid2_) -
      reinterpret_cast<char*>(&_impl_.pid1_)) + sizeof(_impl_.pid2_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DGWeddingStartPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 pid1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pid1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 pid2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.pid2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DGWeddingStartPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.DGWeddingStartPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pid1 = 1;
  if (this->_internal_pid1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pid1(), target);
  }

  // uint32 pid2 = 2;
  if (this->_internal_pid2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_pid2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.DGWeddingStartPacket)
  return target;
}

size_t DGWeddingStartPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.DGWeddingStartPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 pid1 = 1;
  if (this->_internal_pid1() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid1());
  }

  // uint32 pid2 = 2;
  if (this->_internal_pid2() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid2());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DGWeddingStartPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DGWeddingStartPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DGWeddingStartPacket::GetClassData() const { return &_class_data_; }


void DGWeddingStartPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DGWeddingStartPacket*>(&to_msg);
  auto& from = static_cast<const DGWeddingStartPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.DGWeddingStartPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_pid1() != 0) {
    _this->_internal_set_pid1(from._internal_pid1());
  }
  if (from._internal_pid2() != 0) {
    _this->_internal_set_pid2(from._internal_pid2());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DGWeddingStartPacket::CopyFrom(const DGWeddingStartPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.DGWeddingStartPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DGWeddingStartPacket::IsInitialized() const {
  return true;
}

void DGWeddingStartPacket::InternalSwap(DGWeddingStartPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DGWeddingStartPacket, _impl_.pid2_)
      + sizeof(DGWeddingStartPacket::_impl_.pid2_)
      - PROTOBUF_FIELD_OFFSET(DGWeddingStartPacket, _impl_.pid1_)>(
          reinterpret_cast<char*>(&_impl_.pid1_),
          reinterpret_cast<char*>(&other->_impl_.pid1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DGWeddingStartPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dg_5fpackets_2eproto_getter, &descriptor_table_dg_5fpackets_2eproto_once,
      file_level_metadata_dg_5fpackets_2eproto[66]);
}

// ===================================================================

class DGWeddingEndPacket::_Internal {
 public:
};

DGWeddingEndPacket::DGWeddingEndPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.DGWeddingEndPacket)
}
DGWeddingEndPacket::DGWeddingEndPacket(const DGWeddingEndPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DGWeddingEndPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pid1_){}
    , decltype(_impl_.pid2_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.pid1_, &from._impl_.pid1_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.pid2_) -
    reinterpret_cast<char*>(&_impl_.pid1_)) + sizeof(_impl_.pid2_));
  // @@protoc_insertion_point(copy_constructor:network.DGWeddingEndPacket)
}

inline void DGWeddingEndPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pid1_){0u}
    , decltype(_impl_.pid2_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DGWeddingEndPacket::~DGWeddingEndPacket() {
  // @@protoc_insertion_point(destructor:network.DGWeddingEndPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DGWeddingEndPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DGWeddingEndPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DGWeddingEndPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.DGWeddingEndPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.pid1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.pid2_) -
      reinterpret_cast<char*>(&_impl_.pid1_)) + sizeof(_impl_.pid2_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DGWeddingEndPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 pid1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pid1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 pid2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.pid2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DGWeddingEndPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.DGWeddingEndPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pid1 = 1;
  if (this->_internal_pid1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pid1(), target);
  }

  // uint32 pid2 = 2;
  if (this->_internal_pid2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_pid2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.DGWeddingEndPacket)
  return target;
}

size_t DGWeddingEndPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.DGWeddingEndPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 pid1 = 1;
  if (this->_internal_pid1() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid1());
  }

  // uint32 pid2 = 2;
  if (this->_internal_pid2() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid2());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DGWeddingEndPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DGWeddingEndPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DGWeddingEndPacket::GetClassData() const { return &_class_data_; }


void DGWeddingEndPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DGWeddingEndPacket*>(&to_msg);
  auto& from = static_cast<const DGWeddingEndPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.DGWeddingEndPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_pid1() != 0) {
    _this->_internal_set_pid1(from._internal_pid1());
  }
  if (from._internal_pid2() != 0) {
    _this->_internal_set_pid2(from._internal_pid2());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DGWeddingEndPacket::CopyFrom(const DGWeddingEndPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.DGWeddingEndPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DGWeddingEndPacket::IsInitialized() const {
  return true;
}

void DGWeddingEndPacket::InternalSwap(DGWeddingEndPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DGWeddingEndPacket, _impl_.pid2_)
      + sizeof(DGWeddingEndPacket::_impl_.pid2_)
      - PROTOBUF_FIELD_OFFSET(DGWeddingEndPacket, _impl_.pid1_)>(
          reinterpret_cast<char*>(&_impl_.pid1_),
          reinterpret_cast<char*>(&other->_impl_.pid1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DGWeddingEndPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dg_5fpackets_2eproto_getter, &descriptor_table_dg_5fpackets_2eproto_once,
      file_level_metadata_dg_5fpackets_2eproto[67]);
}

// ===================================================================

class DGBillingRepairPacket::_Internal {
 public:
};

DGBillingRepairPacket::DGBillingRepairPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.DGBillingRepairPacket)
}
DGBillingRepairPacket::DGBillingRepairPacket(const DGBillingRepairPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DGBillingRepairPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.login_keys_){from._impl_.login_keys_}
    , /*decltype(_impl_._login_keys_cached_byte_size_)*/{0}
    , decltype(_impl_.logins_){from._impl_.logins_}
    , decltype(_impl_.hosts_){from._impl_.hosts_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:network.DGBillingRepairPacket)
}

inline void DGBillingRepairPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.login_keys_){arena}
    , /*decltype(_impl_._login_keys_cached_byte_size_)*/{0}
    , decltype(_impl_.logins_){arena}
    , decltype(_impl_.hosts_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DGBillingRepairPacket::~DGBillingRepairPacket() {
  // @@protoc_insertion_point(destructor:network.DGBillingRepairPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DGBillingRepairPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.login_keys_.~RepeatedField();
  _impl_.logins_.~RepeatedPtrField();
  _impl_.hosts_.~RepeatedPtrField();
}

void DGBillingRepairPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DGBillingRepairPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.DGBillingRepairPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.login_keys_.Clear();
  _impl_.logins_.Clear();
  _impl_.hosts_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DGBillingRepairPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 login_keys = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_login_keys(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_login_keys(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bytes logins = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_logins();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated bytes hosts = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_hosts();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DGBillingRepairPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.DGBillingRepairPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 login_keys = 1;
  {
    int byte_size = _impl_._login_keys_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_login_keys(), byte_size, target);
    }
  }

  // repeated bytes logins = 2;
  for (int i = 0, n = this->_internal_logins_size(); i < n; i++) {
    const auto& s = this->_internal_logins(i);
    target = stream->WriteBytes(2, s, target);
  }

  // repeated bytes hosts = 3;
  for (int i = 0, n = this->_internal_hosts_size(); i < n; i++) {
    const auto& s = this->_internal_hosts(i);
    target = stream->WriteBytes(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.DGBillingRepairPacket)
  return target;
}

size_t DGBillingRepairPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.DGBillingRepairPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 login_keys = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.login_keys_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._login_keys_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated bytes logins = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.logins_.size());
  for (int i = 0, n = _impl_.logins_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      _impl_.logins_.Get(i));
  }

  // repeated bytes hosts = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.hosts_.size());
  for (int i = 0, n = _impl_.hosts_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      _impl_.hosts_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DGBillingRepairPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DGBillingRepairPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DGBillingRepairPacket::GetClassData() const { return &_class_data_; }


void DGBillingRepairPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DGBillingRepairPacket*>(&to_msg);
  auto& from = static_cast<const DGBillingRepairPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.DGBillingRepairPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.login_keys_.MergeFrom(from._impl_.login_keys_);
  _this->_impl_.logins_.MergeFrom(from._impl_.logins_);
  _this->_impl_.hosts_.MergeFrom(from._impl_.hosts_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DGBillingRepairPacket::CopyFrom(const DGBillingRepairPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.DGBillingRepairPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DGBillingRepairPacket::IsInitialized() const {
  return true;
}

void DGBillingRepairPacket::InternalSwap(DGBillingRepairPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.login_keys_.InternalSwap(&other->_impl_.login_keys_);
  _impl_.logins_.InternalSwap(&other->_impl_.logins_);
  _impl_.hosts_.InternalSwap(&other->_impl_.hosts_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DGBillingRepairPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dg_5fpackets_2eproto_getter, &descriptor_table_dg_5fpackets_2eproto_once,
      file_level_metadata_dg_5fpackets_2eproto[68]);
}

// ===================================================================

class DGBillingExpirePacket::_Internal {
 public:
};

DGBillingExpirePacket::DGBillingExpirePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.DGBillingExpirePacket)
}
DGBillingExpirePacket::DGBillingExpirePacket(const DGBillingExpirePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DGBillingExpirePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.login_){}
    , decltype(_impl_.bill_type_){}
    , decltype(_impl_.remain_seconds_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.login_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.login_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_login().empty()) {
    _this->_impl_.login_.Set(from._internal_login(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.bill_type_, &from._impl_.bill_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.remain_seconds_) -
    reinterpret_cast<char*>(&_impl_.bill_type_)) + sizeof(_impl_.remain_seconds_));
  // @@protoc_insertion_point(copy_constructor:network.DGBillingExpirePacket)
}

inline void DGBillingExpirePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.login_){}
    , decltype(_impl_.bill_type_){0u}
    , decltype(_impl_.remain_seconds_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.login_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.login_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DGBillingExpirePacket::~DGBillingExpirePacket() {
  // @@protoc_insertion_point(destructor:network.DGBillingExpirePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DGBillingExpirePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.login_.Destroy();
}

void DGBillingExpirePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DGBillingExpirePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.DGBillingExpirePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.login_.ClearToEmpty();
  ::memset(&_impl_.bill_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.remain_seconds_) -
      reinterpret_cast<char*>(&_impl_.bill_type_)) + sizeof(_impl_.remain_seconds_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DGBillingExpirePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes login = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_login();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 bill_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.bill_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 remain_seconds = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.remain_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DGBillingExpirePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.DGBillingExpirePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes login = 1;
  if (!this->_internal_login().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_login(), target);
  }

  // uint32 bill_type = 2;
  if (this->_internal_bill_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_bill_type(), target);
  }

  // uint32 remain_seconds = 3;
  if (this->_internal_remain_seconds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_remain_seconds(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.DGBillingExpirePacket)
  return target;
}

size_t DGBillingExpirePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.DGBillingExpirePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes login = 1;
  if (!this->_internal_login().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_login());
  }

  // uint32 bill_type = 2;
  if (this->_internal_bill_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_bill_type());
  }

  // uint32 remain_seconds = 3;
  if (this->_internal_remain_seconds() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_remain_seconds());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DGBillingExpirePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DGBillingExpirePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DGBillingExpirePacket::GetClassData() const { return &_class_data_; }


void DGBillingExpirePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DGBillingExpirePacket*>(&to_msg);
  auto& from = static_cast<const DGBillingExpirePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.DGBillingExpirePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_login().empty()) {
    _this->_internal_set_login(from._internal_login());
  }
  if (from._internal_bill_type() != 0) {
    _this->_internal_set_bill_type(from._internal_bill_type());
  }
  if (from._internal_remain_seconds() != 0) {
    _this->_internal_set_remain_seconds(from._internal_remain_seconds());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DGBillingExpirePacket::CopyFrom(const DGBillingExpirePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.DGBillingExpirePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DGBillingExpirePacket::IsInitialized() const {
  return true;
}

void DGBillingExpirePacket::InternalSwap(DGBillingExpirePacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.login_, lhs_arena,
      &other->_impl_.login_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DGBillingExpirePacket, _impl_.remain_seconds_)
      + sizeof(DGBillingExpirePacket::_impl_.remain_seconds_)
      - PROTOBUF_FIELD_OFFSET(DGBillingExpirePacket, _impl_.bill_type_)>(
          reinterpret_cast<char*>(&_impl_.bill_type_),
          reinterpret_cast<char*>(&other->_impl_.bill_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DGBillingExpirePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dg_5fpackets_2eproto_getter, &descriptor_table_dg_5fpackets_2eproto_once,
      file_level_metadata_dg_5fpackets_2eproto[69]);
}

// ===================================================================

class DGBillingLoginPacket::_Internal {
 public:
};

DGBillingLoginPacket::DGBillingLoginPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.DGBillingLoginPacket)
}
DGBillingLoginPacket::DGBillingLoginPacket(const DGBillingLoginPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DGBillingLoginPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.login_keys_){from._impl_.login_keys_}
    , /*decltype(_impl_._login_keys_cached_byte_size_)*/{0}
    , decltype(_impl_.logins_){from._impl_.logins_}
    , /*decltype(_impl_._logins_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:network.DGBillingLoginPacket)
}

inline void DGBillingLoginPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.login_keys_){arena}
    , /*decltype(_impl_._login_keys_cached_byte_size_)*/{0}
    , decltype(_impl_.logins_){arena}
    , /*decltype(_impl_._logins_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DGBillingLoginPacket::~DGBillingLoginPacket() {
  // @@protoc_insertion_point(destructor:network.DGBillingLoginPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DGBillingLoginPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.login_keys_.~RepeatedField();
  _impl_.logins_.~RepeatedField();
}

void DGBillingLoginPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DGBillingLoginPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.DGBillingLoginPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.login_keys_.Clear();
  _impl_.logins_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DGBillingLoginPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 login_keys = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_login_keys(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_login_keys(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 logins = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_logins(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_logins(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DGBillingLoginPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.DGBillingLoginPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 login_keys = 1;
  {
    int byte_size = _impl_._login_keys_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_login_keys(), byte_size, target);
    }
  }

  // repeated uint32 logins = 2;
  {
    int byte_size = _impl_._logins_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          2, _internal_logins(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.DGBillingLoginPacket)
  return target;
}

size_t DGBillingLoginPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.DGBillingLoginPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 login_keys = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.login_keys_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._login_keys_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 logins = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.logins_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._logins_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DGBillingLoginPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DGBillingLoginPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DGBillingLoginPacket::GetClassData() const { return &_class_data_; }


void DGBillingLoginPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DGBillingLoginPacket*>(&to_msg);
  auto& from = static_cast<const DGBillingLoginPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.DGBillingLoginPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.login_keys_.MergeFrom(from._impl_.login_keys_);
  _this->_impl_.logins_.MergeFrom(from._impl_.logins_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DGBillingLoginPacket::CopyFrom(const DGBillingLoginPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.DGBillingLoginPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DGBillingLoginPacket::IsInitialized() const {
  return true;
}

void DGBillingLoginPacket::InternalSwap(DGBillingLoginPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.login_keys_.InternalSwap(&other->_impl_.login_keys_);
  _impl_.logins_.InternalSwap(&other->_impl_.logins_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DGBillingLoginPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dg_5fpackets_2eproto_getter, &descriptor_table_dg_5fpackets_2eproto_once,
      file_level_metadata_dg_5fpackets_2eproto[70]);
}

// ===================================================================

class DGBillingCheckPacket::_Internal {
 public:
};

DGBillingCheckPacket::DGBillingCheckPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.DGBillingCheckPacket)
}
DGBillingCheckPacket::DGBillingCheckPacket(const DGBillingCheckPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DGBillingCheckPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.keys_){from._impl_.keys_}
    , /*decltype(_impl_._keys_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:network.DGBillingCheckPacket)
}

inline void DGBillingCheckPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.keys_){arena}
    , /*decltype(_impl_._keys_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DGBillingCheckPacket::~DGBillingCheckPacket() {
  // @@protoc_insertion_point(destructor:network.DGBillingCheckPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DGBillingCheckPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.keys_.~RepeatedField();
}

void DGBillingCheckPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DGBillingCheckPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.DGBillingCheckPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.keys_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DGBillingCheckPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 keys = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_keys(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_keys(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DGBillingCheckPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.DGBillingCheckPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 keys = 1;
  {
    int byte_size = _impl_._keys_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_keys(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.DGBillingCheckPacket)
  return target;
}

size_t DGBillingCheckPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.DGBillingCheckPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 keys = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.keys_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._keys_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DGBillingCheckPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DGBillingCheckPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DGBillingCheckPacket::GetClassData() const { return &_class_data_; }


void DGBillingCheckPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DGBillingCheckPacket*>(&to_msg);
  auto& from = static_cast<const DGBillingCheckPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.DGBillingCheckPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.keys_.MergeFrom(from._impl_.keys_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DGBillingCheckPacket::CopyFrom(const DGBillingCheckPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.DGBillingCheckPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DGBillingCheckPacket::IsInitialized() const {
  return true;
}

void DGBillingCheckPacket::InternalSwap(DGBillingCheckPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.keys_.InternalSwap(&other->_impl_.keys_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DGBillingCheckPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dg_5fpackets_2eproto_getter, &descriptor_table_dg_5fpackets_2eproto_once,
      file_level_metadata_dg_5fpackets_2eproto[71]);
}

// ===================================================================

class DGGuildLoadPacket::_Internal {
 public:
};

DGGuildLoadPacket::DGGuildLoadPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.DGGuildLoadPacket)
}
DGGuildLoadPacket::DGGuildLoadPacket(const DGGuildLoadPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DGGuildLoadPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.guild_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.guild_id_ = from._impl_.guild_id_;
  // @@protoc_insertion_point(copy_constructor:network.DGGuildLoadPacket)
}

inline void DGGuildLoadPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.guild_id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DGGuildLoadPacket::~DGGuildLoadPacket() {
  // @@protoc_insertion_point(destructor:network.DGGuildLoadPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DGGuildLoadPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DGGuildLoadPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DGGuildLoadPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.DGGuildLoadPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.guild_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DGGuildLoadPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 guild_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DGGuildLoadPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.DGGuildLoadPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 guild_id = 1;
  if (this->_internal_guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_guild_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.DGGuildLoadPacket)
  return target;
}

size_t DGGuildLoadPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.DGGuildLoadPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 guild_id = 1;
  if (this->_internal_guild_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_guild_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DGGuildLoadPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DGGuildLoadPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DGGuildLoadPacket::GetClassData() const { return &_class_data_; }


void DGGuildLoadPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DGGuildLoadPacket*>(&to_msg);
  auto& from = static_cast<const DGGuildLoadPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.DGGuildLoadPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_guild_id() != 0) {
    _this->_internal_set_guild_id(from._internal_guild_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DGGuildLoadPacket::CopyFrom(const DGGuildLoadPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.DGGuildLoadPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DGGuildLoadPacket::IsInitialized() const {
  return true;
}

void DGGuildLoadPacket::InternalSwap(DGGuildLoadPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.guild_id_, other->_impl_.guild_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DGGuildLoadPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dg_5fpackets_2eproto_getter, &descriptor_table_dg_5fpackets_2eproto_once,
      file_level_metadata_dg_5fpackets_2eproto[72]);
}

// ===================================================================

class DGGuildSkillUpdatePacket::_Internal {
 public:
};

DGGuildSkillUpdatePacket::DGGuildSkillUpdatePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.DGGuildSkillUpdatePacket)
}
DGGuildSkillUpdatePacket::DGGuildSkillUpdatePacket(const DGGuildSkillUpdatePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DGGuildSkillUpdatePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.skill_levels_){from._impl_.skill_levels_}
    , /*decltype(_impl_._skill_levels_cached_byte_size_)*/{0}
    , decltype(_impl_.guild_id_){}
    , decltype(_impl_.amount_){}
    , decltype(_impl_.skill_point_){}
    , decltype(_impl_.save_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.guild_id_, &from._impl_.guild_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.save_) -
    reinterpret_cast<char*>(&_impl_.guild_id_)) + sizeof(_impl_.save_));
  // @@protoc_insertion_point(copy_constructor:network.DGGuildSkillUpdatePacket)
}

inline void DGGuildSkillUpdatePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.skill_levels_){arena}
    , /*decltype(_impl_._skill_levels_cached_byte_size_)*/{0}
    , decltype(_impl_.guild_id_){0u}
    , decltype(_impl_.amount_){0}
    , decltype(_impl_.skill_point_){0u}
    , decltype(_impl_.save_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DGGuildSkillUpdatePacket::~DGGuildSkillUpdatePacket() {
  // @@protoc_insertion_point(destructor:network.DGGuildSkillUpdatePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DGGuildSkillUpdatePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.skill_levels_.~RepeatedField();
}

void DGGuildSkillUpdatePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DGGuildSkillUpdatePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.DGGuildSkillUpdatePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.skill_levels_.Clear();
  ::memset(&_impl_.guild_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.save_) -
      reinterpret_cast<char*>(&_impl_.guild_id_)) + sizeof(_impl_.save_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DGGuildSkillUpdatePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 guild_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 amount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 skill_levels = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_skill_levels(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_skill_levels(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 skill_point = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.skill_point_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 save = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.save_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DGGuildSkillUpdatePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.DGGuildSkillUpdatePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 guild_id = 1;
  if (this->_internal_guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_guild_id(), target);
  }

  // int32 amount = 2;
  if (this->_internal_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_amount(), target);
  }

  // repeated uint32 skill_levels = 3;
  {
    int byte_size = _impl_._skill_levels_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          3, _internal_skill_levels(), byte_size, target);
    }
  }

  // uint32 skill_point = 4;
  if (this->_internal_skill_point() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_skill_point(), target);
  }

  // uint32 save = 5;
  if (this->_internal_save() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_save(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.DGGuildSkillUpdatePacket)
  return target;
}

size_t DGGuildSkillUpdatePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.DGGuildSkillUpdatePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 skill_levels = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.skill_levels_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._skill_levels_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint32 guild_id = 1;
  if (this->_internal_guild_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_guild_id());
  }

  // int32 amount = 2;
  if (this->_internal_amount() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_amount());
  }

  // uint32 skill_point = 4;
  if (this->_internal_skill_point() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_skill_point());
  }

  // uint32 save = 5;
  if (this->_internal_save() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_save());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DGGuildSkillUpdatePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DGGuildSkillUpdatePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DGGuildSkillUpdatePacket::GetClassData() const { return &_class_data_; }


void DGGuildSkillUpdatePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DGGuildSkillUpdatePacket*>(&to_msg);
  auto& from = static_cast<const DGGuildSkillUpdatePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.DGGuildSkillUpdatePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.skill_levels_.MergeFrom(from._impl_.skill_levels_);
  if (from._internal_guild_id() != 0) {
    _this->_internal_set_guild_id(from._internal_guild_id());
  }
  if (from._internal_amount() != 0) {
    _this->_internal_set_amount(from._internal_amount());
  }
  if (from._internal_skill_point() != 0) {
    _this->_internal_set_skill_point(from._internal_skill_point());
  }
  if (from._internal_save() != 0) {
    _this->_internal_set_save(from._internal_save());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DGGuildSkillUpdatePacket::CopyFrom(const DGGuildSkillUpdatePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.DGGuildSkillUpdatePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DGGuildSkillUpdatePacket::IsInitialized() const {
  return true;
}

void DGGuildSkillUpdatePacket::InternalSwap(DGGuildSkillUpdatePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.skill_levels_.InternalSwap(&other->_impl_.skill_levels_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DGGuildSkillUpdatePacket, _impl_.save_)
      + sizeof(DGGuildSkillUpdatePacket::_impl_.save_)
      - PROTOBUF_FIELD_OFFSET(DGGuildSkillUpdatePacket, _impl_.guild_id_)>(
          reinterpret_cast<char*>(&_impl_.guild_id_),
          reinterpret_cast<char*>(&other->_impl_.guild_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DGGuildSkillUpdatePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dg_5fpackets_2eproto_getter, &descriptor_table_dg_5fpackets_2eproto_once,
      file_level_metadata_dg_5fpackets_2eproto[73]);
}

// ===================================================================

class DGGuildExpUpdatePacket::_Internal {
 public:
};

DGGuildExpUpdatePacket::DGGuildExpUpdatePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.DGGuildExpUpdatePacket)
}
DGGuildExpUpdatePacket::DGGuildExpUpdatePacket(const DGGuildExpUpdatePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DGGuildExpUpdatePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.guild_id_){}
    , decltype(_impl_.amount_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.guild_id_, &from._impl_.guild_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.amount_) -
    reinterpret_cast<char*>(&_impl_.guild_id_)) + sizeof(_impl_.amount_));
  // @@protoc_insertion_point(copy_constructor:network.DGGuildExpUpdatePacket)
}

inline void DGGuildExpUpdatePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.guild_id_){0u}
    , decltype(_impl_.amount_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DGGuildExpUpdatePacket::~DGGuildExpUpdatePacket() {
  // @@protoc_insertion_point(destructor:network.DGGuildExpUpdatePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DGGuildExpUpdatePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DGGuildExpUpdatePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DGGuildExpUpdatePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.DGGuildExpUpdatePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.guild_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.amount_) -
      reinterpret_cast<char*>(&_impl_.guild_id_)) + sizeof(_impl_.amount_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DGGuildExpUpdatePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 guild_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 amount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DGGuildExpUpdatePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.DGGuildExpUpdatePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 guild_id = 1;
  if (this->_internal_guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_guild_id(), target);
  }

  // int32 amount = 2;
  if (this->_internal_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.DGGuildExpUpdatePacket)
  return target;
}

size_t DGGuildExpUpdatePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.DGGuildExpUpdatePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 guild_id = 1;
  if (this->_internal_guild_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_guild_id());
  }

  // int32 amount = 2;
  if (this->_internal_amount() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_amount());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DGGuildExpUpdatePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DGGuildExpUpdatePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DGGuildExpUpdatePacket::GetClassData() const { return &_class_data_; }


void DGGuildExpUpdatePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DGGuildExpUpdatePacket*>(&to_msg);
  auto& from = static_cast<const DGGuildExpUpdatePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.DGGuildExpUpdatePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_guild_id() != 0) {
    _this->_internal_set_guild_id(from._internal_guild_id());
  }
  if (from._internal_amount() != 0) {
    _this->_internal_set_amount(from._internal_amount());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DGGuildExpUpdatePacket::CopyFrom(const DGGuildExpUpdatePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.DGGuildExpUpdatePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DGGuildExpUpdatePacket::IsInitialized() const {
  return true;
}

void DGGuildExpUpdatePacket::InternalSwap(DGGuildExpUpdatePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DGGuildExpUpdatePacket, _impl_.amount_)
      + sizeof(DGGuildExpUpdatePacket::_impl_.amount_)
      - PROTOBUF_FIELD_OFFSET(DGGuildExpUpdatePacket, _impl_.guild_id_)>(
          reinterpret_cast<char*>(&_impl_.guild_id_),
          reinterpret_cast<char*>(&other->_impl_.guild_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DGGuildExpUpdatePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dg_5fpackets_2eproto_getter, &descriptor_table_dg_5fpackets_2eproto_once,
      file_level_metadata_dg_5fpackets_2eproto[74]);
}

// ===================================================================

class DGGuildAddMemberPacket::_Internal {
 public:
};

DGGuildAddMemberPacket::DGGuildAddMemberPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.DGGuildAddMemberPacket)
}
DGGuildAddMemberPacket::DGGuildAddMemberPacket(const DGGuildAddMemberPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DGGuildAddMemberPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.guild_id_){}
    , decltype(_impl_.pid_){}
    , decltype(_impl_.grade_){}
    , decltype(_impl_.is_general_){}
    , decltype(_impl_.job_){}
    , decltype(_impl_.level_){}
    , decltype(_impl_.offer_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.guild_id_, &from._impl_.guild_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.offer_) -
    reinterpret_cast<char*>(&_impl_.guild_id_)) + sizeof(_impl_.offer_));
  // @@protoc_insertion_point(copy_constructor:network.DGGuildAddMemberPacket)
}

inline void DGGuildAddMemberPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.guild_id_){0u}
    , decltype(_impl_.pid_){0u}
    , decltype(_impl_.grade_){0u}
    , decltype(_impl_.is_general_){false}
    , decltype(_impl_.job_){0u}
    , decltype(_impl_.level_){0u}
    , decltype(_impl_.offer_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DGGuildAddMemberPacket::~DGGuildAddMemberPacket() {
  // @@protoc_insertion_point(destructor:network.DGGuildAddMemberPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DGGuildAddMemberPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void DGGuildAddMemberPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DGGuildAddMemberPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.DGGuildAddMemberPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  ::memset(&_impl_.guild_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.offer_) -
      reinterpret_cast<char*>(&_impl_.guild_id_)) + sizeof(_impl_.offer_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DGGuildAddMemberPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 guild_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 pid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 grade = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.grade_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_general = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.is_general_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 job = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.job_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 level = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 offer = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.offer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes name = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DGGuildAddMemberPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.DGGuildAddMemberPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 guild_id = 1;
  if (this->_internal_guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_guild_id(), target);
  }

  // uint32 pid = 2;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_pid(), target);
  }

  // uint32 grade = 3;
  if (this->_internal_grade() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_grade(), target);
  }

  // bool is_general = 4;
  if (this->_internal_is_general() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_is_general(), target);
  }

  // uint32 job = 5;
  if (this->_internal_job() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_job(), target);
  }

  // uint32 level = 6;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_level(), target);
  }

  // uint32 offer = 7;
  if (this->_internal_offer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_offer(), target);
  }

  // bytes name = 8;
  if (!this->_internal_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.DGGuildAddMemberPacket)
  return target;
}

size_t DGGuildAddMemberPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.DGGuildAddMemberPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 8;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // uint32 guild_id = 1;
  if (this->_internal_guild_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_guild_id());
  }

  // uint32 pid = 2;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid());
  }

  // uint32 grade = 3;
  if (this->_internal_grade() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_grade());
  }

  // bool is_general = 4;
  if (this->_internal_is_general() != 0) {
    total_size += 1 + 1;
  }

  // uint32 job = 5;
  if (this->_internal_job() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_job());
  }

  // uint32 level = 6;
  if (this->_internal_level() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_level());
  }

  // uint32 offer = 7;
  if (this->_internal_offer() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_offer());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DGGuildAddMemberPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DGGuildAddMemberPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DGGuildAddMemberPacket::GetClassData() const { return &_class_data_; }


void DGGuildAddMemberPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DGGuildAddMemberPacket*>(&to_msg);
  auto& from = static_cast<const DGGuildAddMemberPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.DGGuildAddMemberPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_guild_id() != 0) {
    _this->_internal_set_guild_id(from._internal_guild_id());
  }
  if (from._internal_pid() != 0) {
    _this->_internal_set_pid(from._internal_pid());
  }
  if (from._internal_grade() != 0) {
    _this->_internal_set_grade(from._internal_grade());
  }
  if (from._internal_is_general() != 0) {
    _this->_internal_set_is_general(from._internal_is_general());
  }
  if (from._internal_job() != 0) {
    _this->_internal_set_job(from._internal_job());
  }
  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  if (from._internal_offer() != 0) {
    _this->_internal_set_offer(from._internal_offer());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DGGuildAddMemberPacket::CopyFrom(const DGGuildAddMemberPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.DGGuildAddMemberPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DGGuildAddMemberPacket::IsInitialized() const {
  return true;
}

void DGGuildAddMemberPacket::InternalSwap(DGGuildAddMemberPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DGGuildAddMemberPacket, _impl_.offer_)
      + sizeof(DGGuildAddMemberPacket::_impl_.offer_)
      - PROTOBUF_FIELD_OFFSET(DGGuildAddMemberPacket, _impl_.guild_id_)>(
          reinterpret_cast<char*>(&_impl_.guild_id_),
          reinterpret_cast<char*>(&other->_impl_.guild_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DGGuildAddMemberPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dg_5fpackets_2eproto_getter, &descriptor_table_dg_5fpackets_2eproto_once,
      file_level_metadata_dg_5fpackets_2eproto[75]);
}

// ===================================================================

class DGGuildRemoveMemberPacket::_Internal {
 public:
};

DGGuildRemoveMemberPacket::DGGuildRemoveMemberPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.DGGuildRemoveMemberPacket)
}
DGGuildRemoveMemberPacket::DGGuildRemoveMemberPacket(const DGGuildRemoveMemberPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DGGuildRemoveMemberPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.guild_id_){}
    , decltype(_impl_.pid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.guild_id_, &from._impl_.guild_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.pid_) -
    reinterpret_cast<char*>(&_impl_.guild_id_)) + sizeof(_impl_.pid_));
  // @@protoc_insertion_point(copy_constructor:network.DGGuildRemoveMemberPacket)
}

inline void DGGuildRemoveMemberPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.guild_id_){0u}
    , decltype(_impl_.pid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DGGuildRemoveMemberPacket::~DGGuildRemoveMemberPacket() {
  // @@protoc_insertion_point(destructor:network.DGGuildRemoveMemberPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DGGuildRemoveMemberPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DGGuildRemoveMemberPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DGGuildRemoveMemberPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.DGGuildRemoveMemberPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.guild_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.pid_) -
      reinterpret_cast<char*>(&_impl_.guild_id_)) + sizeof(_impl_.pid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DGGuildRemoveMemberPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 guild_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 pid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DGGuildRemoveMemberPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.DGGuildRemoveMemberPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 guild_id = 1;
  if (this->_internal_guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_guild_id(), target);
  }

  // uint32 pid = 2;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_pid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.DGGuildRemoveMemberPacket)
  return target;
}

size_t DGGuildRemoveMemberPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.DGGuildRemoveMemberPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 guild_id = 1;
  if (this->_internal_guild_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_guild_id());
  }

  // uint32 pid = 2;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DGGuildRemoveMemberPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DGGuildRemoveMemberPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DGGuildRemoveMemberPacket::GetClassData() const { return &_class_data_; }


void DGGuildRemoveMemberPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DGGuildRemoveMemberPacket*>(&to_msg);
  auto& from = static_cast<const DGGuildRemoveMemberPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.DGGuildRemoveMemberPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_guild_id() != 0) {
    _this->_internal_set_guild_id(from._internal_guild_id());
  }
  if (from._internal_pid() != 0) {
    _this->_internal_set_pid(from._internal_pid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DGGuildRemoveMemberPacket::CopyFrom(const DGGuildRemoveMemberPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.DGGuildRemoveMemberPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DGGuildRemoveMemberPacket::IsInitialized() const {
  return true;
}

void DGGuildRemoveMemberPacket::InternalSwap(DGGuildRemoveMemberPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DGGuildRemoveMemberPacket, _impl_.pid_)
      + sizeof(DGGuildRemoveMemberPacket::_impl_.pid_)
      - PROTOBUF_FIELD_OFFSET(DGGuildRemoveMemberPacket, _impl_.guild_id_)>(
          reinterpret_cast<char*>(&_impl_.guild_id_),
          reinterpret_cast<char*>(&other->_impl_.guild_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DGGuildRemoveMemberPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dg_5fpackets_2eproto_getter, &descriptor_table_dg_5fpackets_2eproto_once,
      file_level_metadata_dg_5fpackets_2eproto[76]);
}

// ===================================================================

class DGGuildChangeGradePacket::_Internal {
 public:
};

DGGuildChangeGradePacket::DGGuildChangeGradePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.DGGuildChangeGradePacket)
}
DGGuildChangeGradePacket::DGGuildChangeGradePacket(const DGGuildChangeGradePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DGGuildChangeGradePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.guild_id_){}
    , decltype(_impl_.grade_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.guild_id_, &from._impl_.guild_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.grade_) -
    reinterpret_cast<char*>(&_impl_.guild_id_)) + sizeof(_impl_.grade_));
  // @@protoc_insertion_point(copy_constructor:network.DGGuildChangeGradePacket)
}

inline void DGGuildChangeGradePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.guild_id_){0u}
    , decltype(_impl_.grade_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DGGuildChangeGradePacket::~DGGuildChangeGradePacket() {
  // @@protoc_insertion_point(destructor:network.DGGuildChangeGradePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DGGuildChangeGradePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DGGuildChangeGradePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DGGuildChangeGradePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.DGGuildChangeGradePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.guild_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.grade_) -
      reinterpret_cast<char*>(&_impl_.guild_id_)) + sizeof(_impl_.grade_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DGGuildChangeGradePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 guild_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 grade = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.grade_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DGGuildChangeGradePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.DGGuildChangeGradePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 guild_id = 1;
  if (this->_internal_guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_guild_id(), target);
  }

  // uint32 grade = 2;
  if (this->_internal_grade() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_grade(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.DGGuildChangeGradePacket)
  return target;
}

size_t DGGuildChangeGradePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.DGGuildChangeGradePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 guild_id = 1;
  if (this->_internal_guild_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_guild_id());
  }

  // uint32 grade = 2;
  if (this->_internal_grade() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_grade());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DGGuildChangeGradePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DGGuildChangeGradePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DGGuildChangeGradePacket::GetClassData() const { return &_class_data_; }


void DGGuildChangeGradePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DGGuildChangeGradePacket*>(&to_msg);
  auto& from = static_cast<const DGGuildChangeGradePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.DGGuildChangeGradePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_guild_id() != 0) {
    _this->_internal_set_guild_id(from._internal_guild_id());
  }
  if (from._internal_grade() != 0) {
    _this->_internal_set_grade(from._internal_grade());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DGGuildChangeGradePacket::CopyFrom(const DGGuildChangeGradePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.DGGuildChangeGradePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DGGuildChangeGradePacket::IsInitialized() const {
  return true;
}

void DGGuildChangeGradePacket::InternalSwap(DGGuildChangeGradePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DGGuildChangeGradePacket, _impl_.grade_)
      + sizeof(DGGuildChangeGradePacket::_impl_.grade_)
      - PROTOBUF_FIELD_OFFSET(DGGuildChangeGradePacket, _impl_.guild_id_)>(
          reinterpret_cast<char*>(&_impl_.guild_id_),
          reinterpret_cast<char*>(&other->_impl_.guild_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DGGuildChangeGradePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dg_5fpackets_2eproto_getter, &descriptor_table_dg_5fpackets_2eproto_once,
      file_level_metadata_dg_5fpackets_2eproto[77]);
}

// ===================================================================

class DGGuildChangeMemberDataPacket::_Internal {
 public:
};

DGGuildChangeMemberDataPacket::DGGuildChangeMemberDataPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.DGGuildChangeMemberDataPacket)
}
DGGuildChangeMemberDataPacket::DGGuildChangeMemberDataPacket(const DGGuildChangeMemberDataPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DGGuildChangeMemberDataPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.guild_id_){}
    , decltype(_impl_.pid_){}
    , decltype(_impl_.offer_){}
    , decltype(_impl_.level_){}
    , decltype(_impl_.grade_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.guild_id_, &from._impl_.guild_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.grade_) -
    reinterpret_cast<char*>(&_impl_.guild_id_)) + sizeof(_impl_.grade_));
  // @@protoc_insertion_point(copy_constructor:network.DGGuildChangeMemberDataPacket)
}

inline void DGGuildChangeMemberDataPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.guild_id_){0u}
    , decltype(_impl_.pid_){0u}
    , decltype(_impl_.offer_){0u}
    , decltype(_impl_.level_){0u}
    , decltype(_impl_.grade_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DGGuildChangeMemberDataPacket::~DGGuildChangeMemberDataPacket() {
  // @@protoc_insertion_point(destructor:network.DGGuildChangeMemberDataPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DGGuildChangeMemberDataPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DGGuildChangeMemberDataPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DGGuildChangeMemberDataPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.DGGuildChangeMemberDataPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.guild_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.grade_) -
      reinterpret_cast<char*>(&_impl_.guild_id_)) + sizeof(_impl_.grade_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DGGuildChangeMemberDataPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 guild_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 pid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 offer = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.offer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 level = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 grade = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.grade_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DGGuildChangeMemberDataPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.DGGuildChangeMemberDataPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 guild_id = 1;
  if (this->_internal_guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_guild_id(), target);
  }

  // uint32 pid = 2;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_pid(), target);
  }

  // uint32 offer = 3;
  if (this->_internal_offer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_offer(), target);
  }

  // uint32 level = 4;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_level(), target);
  }

  // uint32 grade = 5;
  if (this->_internal_grade() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_grade(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.DGGuildChangeMemberDataPacket)
  return target;
}

size_t DGGuildChangeMemberDataPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.DGGuildChangeMemberDataPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 guild_id = 1;
  if (this->_internal_guild_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_guild_id());
  }

  // uint32 pid = 2;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid());
  }

  // uint32 offer = 3;
  if (this->_internal_offer() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_offer());
  }

  // uint32 level = 4;
  if (this->_internal_level() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_level());
  }

  // uint32 grade = 5;
  if (this->_internal_grade() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_grade());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DGGuildChangeMemberDataPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DGGuildChangeMemberDataPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DGGuildChangeMemberDataPacket::GetClassData() const { return &_class_data_; }


void DGGuildChangeMemberDataPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DGGuildChangeMemberDataPacket*>(&to_msg);
  auto& from = static_cast<const DGGuildChangeMemberDataPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.DGGuildChangeMemberDataPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_guild_id() != 0) {
    _this->_internal_set_guild_id(from._internal_guild_id());
  }
  if (from._internal_pid() != 0) {
    _this->_internal_set_pid(from._internal_pid());
  }
  if (from._internal_offer() != 0) {
    _this->_internal_set_offer(from._internal_offer());
  }
  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  if (from._internal_grade() != 0) {
    _this->_internal_set_grade(from._internal_grade());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DGGuildChangeMemberDataPacket::CopyFrom(const DGGuildChangeMemberDataPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.DGGuildChangeMemberDataPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DGGuildChangeMemberDataPacket::IsInitialized() const {
  return true;
}

void DGGuildChangeMemberDataPacket::InternalSwap(DGGuildChangeMemberDataPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DGGuildChangeMemberDataPacket, _impl_.grade_)
      + sizeof(DGGuildChangeMemberDataPacket::_impl_.grade_)
      - PROTOBUF_FIELD_OFFSET(DGGuildChangeMemberDataPacket, _impl_.guild_id_)>(
          reinterpret_cast<char*>(&_impl_.guild_id_),
          reinterpret_cast<char*>(&other->_impl_.guild_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DGGuildChangeMemberDataPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dg_5fpackets_2eproto_getter, &descriptor_table_dg_5fpackets_2eproto_once,
      file_level_metadata_dg_5fpackets_2eproto[78]);
}

// ===================================================================

class DGGuildDisbandPacket::_Internal {
 public:
};

DGGuildDisbandPacket::DGGuildDisbandPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.DGGuildDisbandPacket)
}
DGGuildDisbandPacket::DGGuildDisbandPacket(const DGGuildDisbandPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DGGuildDisbandPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.guild_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.guild_id_ = from._impl_.guild_id_;
  // @@protoc_insertion_point(copy_constructor:network.DGGuildDisbandPacket)
}

inline void DGGuildDisbandPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.guild_id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DGGuildDisbandPacket::~DGGuildDisbandPacket() {
  // @@protoc_insertion_point(destructor:network.DGGuildDisbandPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DGGuildDisbandPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DGGuildDisbandPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DGGuildDisbandPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.DGGuildDisbandPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.guild_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DGGuildDisbandPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 guild_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DGGuildDisbandPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.DGGuildDisbandPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 guild_id = 1;
  if (this->_internal_guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_guild_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.DGGuildDisbandPacket)
  return target;
}

size_t DGGuildDisbandPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.DGGuildDisbandPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 guild_id = 1;
  if (this->_internal_guild_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_guild_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DGGuildDisbandPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DGGuildDisbandPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DGGuildDisbandPacket::GetClassData() const { return &_class_data_; }


void DGGuildDisbandPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DGGuildDisbandPacket*>(&to_msg);
  auto& from = static_cast<const DGGuildDisbandPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.DGGuildDisbandPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_guild_id() != 0) {
    _this->_internal_set_guild_id(from._internal_guild_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DGGuildDisbandPacket::CopyFrom(const DGGuildDisbandPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.DGGuildDisbandPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DGGuildDisbandPacket::IsInitialized() const {
  return true;
}

void DGGuildDisbandPacket::InternalSwap(DGGuildDisbandPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.guild_id_, other->_impl_.guild_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DGGuildDisbandPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dg_5fpackets_2eproto_getter, &descriptor_table_dg_5fpackets_2eproto_once,
      file_level_metadata_dg_5fpackets_2eproto[79]);
}

// ===================================================================

class DGGuildLadderPacket::_Internal {
 public:
};

DGGuildLadderPacket::DGGuildLadderPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.DGGuildLadderPacket)
}
DGGuildLadderPacket::DGGuildLadderPacket(const DGGuildLadderPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DGGuildLadderPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.wins_){from._impl_.wins_}
    , /*decltype(_impl_._wins_cached_byte_size_)*/{0}
    , decltype(_impl_.draws_){from._impl_.draws_}
    , /*decltype(_impl_._draws_cached_byte_size_)*/{0}
    , decltype(_impl_.losses_){from._impl_.losses_}
    , /*decltype(_impl_._losses_cached_byte_size_)*/{0}
    , decltype(_impl_.guild_id_){}
    , decltype(_impl_.ladder_point_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.guild_id_, &from._impl_.guild_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ladder_point_) -
    reinterpret_cast<char*>(&_impl_.guild_id_)) + sizeof(_impl_.ladder_point_));
  // @@protoc_insertion_point(copy_constructor:network.DGGuildLadderPacket)
}

inline void DGGuildLadderPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.wins_){arena}
    , /*decltype(_impl_._wins_cached_byte_size_)*/{0}
    , decltype(_impl_.draws_){arena}
    , /*decltype(_impl_._draws_cached_byte_size_)*/{0}
    , decltype(_impl_.losses_){arena}
    , /*decltype(_impl_._losses_cached_byte_size_)*/{0}
    , decltype(_impl_.guild_id_){0u}
    , decltype(_impl_.ladder_point_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DGGuildLadderPacket::~DGGuildLadderPacket() {
  // @@protoc_insertion_point(destructor:network.DGGuildLadderPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DGGuildLadderPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.wins_.~RepeatedField();
  _impl_.draws_.~RepeatedField();
  _impl_.losses_.~RepeatedField();
}

void DGGuildLadderPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DGGuildLadderPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.DGGuildLadderPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.wins_.Clear();
  _impl_.draws_.Clear();
  _impl_.losses_.Clear();
  ::memset(&_impl_.guild_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.ladder_point_) -
      reinterpret_cast<char*>(&_impl_.guild_id_)) + sizeof(_impl_.ladder_point_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DGGuildLadderPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 guild_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ladder_point = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.ladder_point_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 wins = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_wins(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_wins(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 draws = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_draws(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_draws(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 losses = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_losses(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 40) {
          _internal_add_losses(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DGGuildLadderPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.DGGuildLadderPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 guild_id = 1;
  if (this->_internal_guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_guild_id(), target);
  }

  // int32 ladder_point = 2;
  if (this->_internal_ladder_point() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_ladder_point(), target);
  }

  // repeated int32 wins = 3;
  {
    int byte_size = _impl_._wins_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_wins(), byte_size, target);
    }
  }

  // repeated int32 draws = 4;
  {
    int byte_size = _impl_._draws_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          4, _internal_draws(), byte_size, target);
    }
  }

  // repeated int32 losses = 5;
  {
    int byte_size = _impl_._losses_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          5, _internal_losses(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.DGGuildLadderPacket)
  return target;
}

size_t DGGuildLadderPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.DGGuildLadderPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 wins = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.wins_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._wins_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 draws = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.draws_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._draws_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 losses = 5;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.losses_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._losses_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint32 guild_id = 1;
  if (this->_internal_guild_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_guild_id());
  }

  // int32 ladder_point = 2;
  if (this->_internal_ladder_point() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ladder_point());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DGGuildLadderPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DGGuildLadderPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DGGuildLadderPacket::GetClassData() const { return &_class_data_; }


void DGGuildLadderPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DGGuildLadderPacket*>(&to_msg);
  auto& from = static_cast<const DGGuildLadderPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.DGGuildLadderPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.wins_.MergeFrom(from._impl_.wins_);
  _this->_impl_.draws_.MergeFrom(from._impl_.draws_);
  _this->_impl_.losses_.MergeFrom(from._impl_.losses_);
  if (from._internal_guild_id() != 0) {
    _this->_internal_set_guild_id(from._internal_guild_id());
  }
  if (from._internal_ladder_point() != 0) {
    _this->_internal_set_ladder_point(from._internal_ladder_point());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DGGuildLadderPacket::CopyFrom(const DGGuildLadderPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.DGGuildLadderPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DGGuildLadderPacket::IsInitialized() const {
  return true;
}

void DGGuildLadderPacket::InternalSwap(DGGuildLadderPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.wins_.InternalSwap(&other->_impl_.wins_);
  _impl_.draws_.InternalSwap(&other->_impl_.draws_);
  _impl_.losses_.InternalSwap(&other->_impl_.losses_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DGGuildLadderPacket, _impl_.ladder_point_)
      + sizeof(DGGuildLadderPacket::_impl_.ladder_point_)
      - PROTOBUF_FIELD_OFFSET(DGGuildLadderPacket, _impl_.guild_id_)>(
          reinterpret_cast<char*>(&_impl_.guild_id_),
          reinterpret_cast<char*>(&other->_impl_.guild_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DGGuildLadderPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dg_5fpackets_2eproto_getter, &descriptor_table_dg_5fpackets_2eproto_once,
      file_level_metadata_dg_5fpackets_2eproto[80]);
}

// ===================================================================

class DGGuildWarPacket::_Internal {
 public:
};

DGGuildWarPacket::DGGuildWarPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.DGGuildWarPacket)
}
DGGuildWarPacket::DGGuildWarPacket(const DGGuildWarPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DGGuildWarPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , decltype(_impl_.war_){}
    , decltype(_impl_.guild_from_){}
    , decltype(_impl_.guild_to_){}
    , decltype(_impl_.war_price_){}
    , decltype(_impl_.initial_score_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.initial_score_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.initial_score_));
  // @@protoc_insertion_point(copy_constructor:network.DGGuildWarPacket)
}

inline void DGGuildWarPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){0u}
    , decltype(_impl_.war_){0u}
    , decltype(_impl_.guild_from_){0u}
    , decltype(_impl_.guild_to_){0u}
    , decltype(_impl_.war_price_){0}
    , decltype(_impl_.initial_score_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DGGuildWarPacket::~DGGuildWarPacket() {
  // @@protoc_insertion_point(destructor:network.DGGuildWarPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DGGuildWarPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DGGuildWarPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DGGuildWarPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.DGGuildWarPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.initial_score_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.initial_score_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DGGuildWarPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 war = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.war_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 guild_from = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.guild_from_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 guild_to = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.guild_to_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 war_price = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.war_price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 initial_score = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.initial_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DGGuildWarPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.DGGuildWarPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // uint32 war = 2;
  if (this->_internal_war() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_war(), target);
  }

  // uint32 guild_from = 3;
  if (this->_internal_guild_from() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_guild_from(), target);
  }

  // uint32 guild_to = 4;
  if (this->_internal_guild_to() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_guild_to(), target);
  }

  // int32 war_price = 5;
  if (this->_internal_war_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_war_price(), target);
  }

  // int32 initial_score = 6;
  if (this->_internal_initial_score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_initial_score(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.DGGuildWarPacket)
  return target;
}

size_t DGGuildWarPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.DGGuildWarPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
  }

  // uint32 war = 2;
  if (this->_internal_war() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_war());
  }

  // uint32 guild_from = 3;
  if (this->_internal_guild_from() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_guild_from());
  }

  // uint32 guild_to = 4;
  if (this->_internal_guild_to() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_guild_to());
  }

  // int32 war_price = 5;
  if (this->_internal_war_price() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_war_price());
  }

  // int32 initial_score = 6;
  if (this->_internal_initial_score() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_initial_score());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DGGuildWarPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DGGuildWarPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DGGuildWarPacket::GetClassData() const { return &_class_data_; }


void DGGuildWarPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DGGuildWarPacket*>(&to_msg);
  auto& from = static_cast<const DGGuildWarPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.DGGuildWarPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_war() != 0) {
    _this->_internal_set_war(from._internal_war());
  }
  if (from._internal_guild_from() != 0) {
    _this->_internal_set_guild_from(from._internal_guild_from());
  }
  if (from._internal_guild_to() != 0) {
    _this->_internal_set_guild_to(from._internal_guild_to());
  }
  if (from._internal_war_price() != 0) {
    _this->_internal_set_war_price(from._internal_war_price());
  }
  if (from._internal_initial_score() != 0) {
    _this->_internal_set_initial_score(from._internal_initial_score());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DGGuildWarPacket::CopyFrom(const DGGuildWarPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.DGGuildWarPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DGGuildWarPacket::IsInitialized() const {
  return true;
}

void DGGuildWarPacket::InternalSwap(DGGuildWarPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DGGuildWarPacket, _impl_.initial_score_)
      + sizeof(DGGuildWarPacket::_impl_.initial_score_)
      - PROTOBUF_FIELD_OFFSET(DGGuildWarPacket, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DGGuildWarPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dg_5fpackets_2eproto_getter, &descriptor_table_dg_5fpackets_2eproto_once,
      file_level_metadata_dg_5fpackets_2eproto[81]);
}

// ===================================================================

class DGGuildWarScorePacket::_Internal {
 public:
};

DGGuildWarScorePacket::DGGuildWarScorePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.DGGuildWarScorePacket)
}
DGGuildWarScorePacket::DGGuildWarScorePacket(const DGGuildWarScorePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DGGuildWarScorePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.guild_gain_point_){}
    , decltype(_impl_.guild_opponent_){}
    , decltype(_impl_.score_){}
    , decltype(_impl_.bet_score_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.guild_gain_point_, &from._impl_.guild_gain_point_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.bet_score_) -
    reinterpret_cast<char*>(&_impl_.guild_gain_point_)) + sizeof(_impl_.bet_score_));
  // @@protoc_insertion_point(copy_constructor:network.DGGuildWarScorePacket)
}

inline void DGGuildWarScorePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.guild_gain_point_){0u}
    , decltype(_impl_.guild_opponent_){0u}
    , decltype(_impl_.score_){0}
    , decltype(_impl_.bet_score_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DGGuildWarScorePacket::~DGGuildWarScorePacket() {
  // @@protoc_insertion_point(destructor:network.DGGuildWarScorePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DGGuildWarScorePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DGGuildWarScorePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DGGuildWarScorePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.DGGuildWarScorePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.guild_gain_point_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.bet_score_) -
      reinterpret_cast<char*>(&_impl_.guild_gain_point_)) + sizeof(_impl_.bet_score_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DGGuildWarScorePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 guild_gain_point = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.guild_gain_point_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 guild_opponent = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.guild_opponent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 score = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 bet_score = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.bet_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DGGuildWarScorePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.DGGuildWarScorePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 guild_gain_point = 1;
  if (this->_internal_guild_gain_point() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_guild_gain_point(), target);
  }

  // uint32 guild_opponent = 2;
  if (this->_internal_guild_opponent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_guild_opponent(), target);
  }

  // int32 score = 3;
  if (this->_internal_score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_score(), target);
  }

  // int32 bet_score = 4;
  if (this->_internal_bet_score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_bet_score(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.DGGuildWarScorePacket)
  return target;
}

size_t DGGuildWarScorePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.DGGuildWarScorePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 guild_gain_point = 1;
  if (this->_internal_guild_gain_point() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_guild_gain_point());
  }

  // uint32 guild_opponent = 2;
  if (this->_internal_guild_opponent() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_guild_opponent());
  }

  // int32 score = 3;
  if (this->_internal_score() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_score());
  }

  // int32 bet_score = 4;
  if (this->_internal_bet_score() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_bet_score());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DGGuildWarScorePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DGGuildWarScorePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DGGuildWarScorePacket::GetClassData() const { return &_class_data_; }


void DGGuildWarScorePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DGGuildWarScorePacket*>(&to_msg);
  auto& from = static_cast<const DGGuildWarScorePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.DGGuildWarScorePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_guild_gain_point() != 0) {
    _this->_internal_set_guild_gain_point(from._internal_guild_gain_point());
  }
  if (from._internal_guild_opponent() != 0) {
    _this->_internal_set_guild_opponent(from._internal_guild_opponent());
  }
  if (from._internal_score() != 0) {
    _this->_internal_set_score(from._internal_score());
  }
  if (from._internal_bet_score() != 0) {
    _this->_internal_set_bet_score(from._internal_bet_score());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DGGuildWarScorePacket::CopyFrom(const DGGuildWarScorePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.DGGuildWarScorePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DGGuildWarScorePacket::IsInitialized() const {
  return true;
}

void DGGuildWarScorePacket::InternalSwap(DGGuildWarScorePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DGGuildWarScorePacket, _impl_.bet_score_)
      + sizeof(DGGuildWarScorePacket::_impl_.bet_score_)
      - PROTOBUF_FIELD_OFFSET(DGGuildWarScorePacket, _impl_.guild_gain_point_)>(
          reinterpret_cast<char*>(&_impl_.guild_gain_point_),
          reinterpret_cast<char*>(&other->_impl_.guild_gain_point_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DGGuildWarScorePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dg_5fpackets_2eproto_getter, &descriptor_table_dg_5fpackets_2eproto_once,
      file_level_metadata_dg_5fpackets_2eproto[82]);
}

// ===================================================================

class DGGuildSkillUsableChangePacket::_Internal {
 public:
};

DGGuildSkillUsableChangePacket::DGGuildSkillUsableChangePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.DGGuildSkillUsableChangePacket)
}
DGGuildSkillUsableChangePacket::DGGuildSkillUsableChangePacket(const DGGuildSkillUsableChangePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DGGuildSkillUsableChangePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.guild_id_){}
    , decltype(_impl_.skill_vnum_){}
    , decltype(_impl_.usable_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.guild_id_, &from._impl_.guild_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.usable_) -
    reinterpret_cast<char*>(&_impl_.guild_id_)) + sizeof(_impl_.usable_));
  // @@protoc_insertion_point(copy_constructor:network.DGGuildSkillUsableChangePacket)
}

inline void DGGuildSkillUsableChangePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.guild_id_){0u}
    , decltype(_impl_.skill_vnum_){0u}
    , decltype(_impl_.usable_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DGGuildSkillUsableChangePacket::~DGGuildSkillUsableChangePacket() {
  // @@protoc_insertion_point(destructor:network.DGGuildSkillUsableChangePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DGGuildSkillUsableChangePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DGGuildSkillUsableChangePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DGGuildSkillUsableChangePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.DGGuildSkillUsableChangePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.guild_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.usable_) -
      reinterpret_cast<char*>(&_impl_.guild_id_)) + sizeof(_impl_.usable_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DGGuildSkillUsableChangePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 guild_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 skill_vnum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.skill_vnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool usable = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.usable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DGGuildSkillUsableChangePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.DGGuildSkillUsableChangePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 guild_id = 1;
  if (this->_internal_guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_guild_id(), target);
  }

  // uint32 skill_vnum = 2;
  if (this->_internal_skill_vnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_skill_vnum(), target);
  }

  // bool usable = 3;
  if (this->_internal_usable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_usable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.DGGuildSkillUsableChangePacket)
  return target;
}

size_t DGGuildSkillUsableChangePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.DGGuildSkillUsableChangePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 guild_id = 1;
  if (this->_internal_guild_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_guild_id());
  }

  // uint32 skill_vnum = 2;
  if (this->_internal_skill_vnum() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_skill_vnum());
  }

  // bool usable = 3;
  if (this->_internal_usable() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DGGuildSkillUsableChangePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DGGuildSkillUsableChangePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DGGuildSkillUsableChangePacket::GetClassData() const { return &_class_data_; }


void DGGuildSkillUsableChangePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DGGuildSkillUsableChangePacket*>(&to_msg);
  auto& from = static_cast<const DGGuildSkillUsableChangePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.DGGuildSkillUsableChangePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_guild_id() != 0) {
    _this->_internal_set_guild_id(from._internal_guild_id());
  }
  if (from._internal_skill_vnum() != 0) {
    _this->_internal_set_skill_vnum(from._internal_skill_vnum());
  }
  if (from._internal_usable() != 0) {
    _this->_internal_set_usable(from._internal_usable());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DGGuildSkillUsableChangePacket::CopyFrom(const DGGuildSkillUsableChangePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.DGGuildSkillUsableChangePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DGGuildSkillUsableChangePacket::IsInitialized() const {
  return true;
}

void DGGuildSkillUsableChangePacket::InternalSwap(DGGuildSkillUsableChangePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DGGuildSkillUsableChangePacket, _impl_.usable_)
      + sizeof(DGGuildSkillUsableChangePacket::_impl_.usable_)
      - PROTOBUF_FIELD_OFFSET(DGGuildSkillUsableChangePacket, _impl_.guild_id_)>(
          reinterpret_cast<char*>(&_impl_.guild_id_),
          reinterpret_cast<char*>(&other->_impl_.guild_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DGGuildSkillUsableChangePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dg_5fpackets_2eproto_getter, &descriptor_table_dg_5fpackets_2eproto_once,
      file_level_metadata_dg_5fpackets_2eproto[83]);
}

// ===================================================================

class DGGuildMoneyChangePacket::_Internal {
 public:
};

DGGuildMoneyChangePacket::DGGuildMoneyChangePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.DGGuildMoneyChangePacket)
}
DGGuildMoneyChangePacket::DGGuildMoneyChangePacket(const DGGuildMoneyChangePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DGGuildMoneyChangePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.guild_id_){}
    , decltype(_impl_.total_gold_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.guild_id_, &from._impl_.guild_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.total_gold_) -
    reinterpret_cast<char*>(&_impl_.guild_id_)) + sizeof(_impl_.total_gold_));
  // @@protoc_insertion_point(copy_constructor:network.DGGuildMoneyChangePacket)
}

inline void DGGuildMoneyChangePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.guild_id_){0u}
    , decltype(_impl_.total_gold_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DGGuildMoneyChangePacket::~DGGuildMoneyChangePacket() {
  // @@protoc_insertion_point(destructor:network.DGGuildMoneyChangePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DGGuildMoneyChangePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DGGuildMoneyChangePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DGGuildMoneyChangePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.DGGuildMoneyChangePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.guild_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.total_gold_) -
      reinterpret_cast<char*>(&_impl_.guild_id_)) + sizeof(_impl_.total_gold_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DGGuildMoneyChangePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 guild_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 total_gold = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.total_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DGGuildMoneyChangePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.DGGuildMoneyChangePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 guild_id = 1;
  if (this->_internal_guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_guild_id(), target);
  }

  // int32 total_gold = 2;
  if (this->_internal_total_gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_total_gold(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.DGGuildMoneyChangePacket)
  return target;
}

size_t DGGuildMoneyChangePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.DGGuildMoneyChangePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 guild_id = 1;
  if (this->_internal_guild_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_guild_id());
  }

  // int32 total_gold = 2;
  if (this->_internal_total_gold() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_total_gold());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DGGuildMoneyChangePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DGGuildMoneyChangePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DGGuildMoneyChangePacket::GetClassData() const { return &_class_data_; }


void DGGuildMoneyChangePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DGGuildMoneyChangePacket*>(&to_msg);
  auto& from = static_cast<const DGGuildMoneyChangePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.DGGuildMoneyChangePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_guild_id() != 0) {
    _this->_internal_set_guild_id(from._internal_guild_id());
  }
  if (from._internal_total_gold() != 0) {
    _this->_internal_set_total_gold(from._internal_total_gold());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DGGuildMoneyChangePacket::CopyFrom(const DGGuildMoneyChangePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.DGGuildMoneyChangePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DGGuildMoneyChangePacket::IsInitialized() const {
  return true;
}

void DGGuildMoneyChangePacket::InternalSwap(DGGuildMoneyChangePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DGGuildMoneyChangePacket, _impl_.total_gold_)
      + sizeof(DGGuildMoneyChangePacket::_impl_.total_gold_)
      - PROTOBUF_FIELD_OFFSET(DGGuildMoneyChangePacket, _impl_.guild_id_)>(
          reinterpret_cast<char*>(&_impl_.guild_id_),
          reinterpret_cast<char*>(&other->_impl_.guild_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DGGuildMoneyChangePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dg_5fpackets_2eproto_getter, &descriptor_table_dg_5fpackets_2eproto_once,
      file_level_metadata_dg_5fpackets_2eproto[84]);
}

// ===================================================================

class DGGuildMoneyWithdrawPacket::_Internal {
 public:
};

DGGuildMoneyWithdrawPacket::DGGuildMoneyWithdrawPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.DGGuildMoneyWithdrawPacket)
}
DGGuildMoneyWithdrawPacket::DGGuildMoneyWithdrawPacket(const DGGuildMoneyWithdrawPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DGGuildMoneyWithdrawPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.guild_id_){}
    , decltype(_impl_.change_gold_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.guild_id_, &from._impl_.guild_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.change_gold_) -
    reinterpret_cast<char*>(&_impl_.guild_id_)) + sizeof(_impl_.change_gold_));
  // @@protoc_insertion_point(copy_constructor:network.DGGuildMoneyWithdrawPacket)
}

inline void DGGuildMoneyWithdrawPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.guild_id_){0u}
    , decltype(_impl_.change_gold_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DGGuildMoneyWithdrawPacket::~DGGuildMoneyWithdrawPacket() {
  // @@protoc_insertion_point(destructor:network.DGGuildMoneyWithdrawPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DGGuildMoneyWithdrawPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DGGuildMoneyWithdrawPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DGGuildMoneyWithdrawPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.DGGuildMoneyWithdrawPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.guild_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.change_gold_) -
      reinterpret_cast<char*>(&_impl_.guild_id_)) + sizeof(_impl_.change_gold_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DGGuildMoneyWithdrawPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 guild_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 change_gold = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.change_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DGGuildMoneyWithdrawPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.DGGuildMoneyWithdrawPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 guild_id = 1;
  if (this->_internal_guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_guild_id(), target);
  }

  // int32 change_gold = 2;
  if (this->_internal_change_gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_change_gold(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.DGGuildMoneyWithdrawPacket)
  return target;
}

size_t DGGuildMoneyWithdrawPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.DGGuildMoneyWithdrawPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 guild_id = 1;
  if (this->_internal_guild_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_guild_id());
  }

  // int32 change_gold = 2;
  if (this->_internal_change_gold() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_change_gold());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DGGuildMoneyWithdrawPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DGGuildMoneyWithdrawPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DGGuildMoneyWithdrawPacket::GetClassData() const { return &_class_data_; }


void DGGuildMoneyWithdrawPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DGGuildMoneyWithdrawPacket*>(&to_msg);
  auto& from = static_cast<const DGGuildMoneyWithdrawPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.DGGuildMoneyWithdrawPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_guild_id() != 0) {
    _this->_internal_set_guild_id(from._internal_guild_id());
  }
  if (from._internal_change_gold() != 0) {
    _this->_internal_set_change_gold(from._internal_change_gold());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DGGuildMoneyWithdrawPacket::CopyFrom(const DGGuildMoneyWithdrawPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.DGGuildMoneyWithdrawPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DGGuildMoneyWithdrawPacket::IsInitialized() const {
  return true;
}

void DGGuildMoneyWithdrawPacket::InternalSwap(DGGuildMoneyWithdrawPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DGGuildMoneyWithdrawPacket, _impl_.change_gold_)
      + sizeof(DGGuildMoneyWithdrawPacket::_impl_.change_gold_)
      - PROTOBUF_FIELD_OFFSET(DGGuildMoneyWithdrawPacket, _impl_.guild_id_)>(
          reinterpret_cast<char*>(&_impl_.guild_id_),
          reinterpret_cast<char*>(&other->_impl_.guild_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DGGuildMoneyWithdrawPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dg_5fpackets_2eproto_getter, &descriptor_table_dg_5fpackets_2eproto_once,
      file_level_metadata_dg_5fpackets_2eproto[85]);
}

// ===================================================================

class DGGuildWarReserveAddPacket::_Internal {
 public:
};

DGGuildWarReserveAddPacket::DGGuildWarReserveAddPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.DGGuildWarReserveAddPacket)
}
DGGuildWarReserveAddPacket::DGGuildWarReserveAddPacket(const DGGuildWarReserveAddPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DGGuildWarReserveAddPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.guild_from_){}
    , decltype(_impl_.guild_to_){}
    , decltype(_impl_.time_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.war_price_){}
    , decltype(_impl_.initial_score_){}
    , decltype(_impl_.started_){}
    , decltype(_impl_.bet_from_){}
    , decltype(_impl_.bet_to_){}
    , decltype(_impl_.power_from_){}
    , decltype(_impl_.power_to_){}
    , decltype(_impl_.handicap_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.handicap_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.handicap_));
  // @@protoc_insertion_point(copy_constructor:network.DGGuildWarReserveAddPacket)
}

inline void DGGuildWarReserveAddPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){0u}
    , decltype(_impl_.guild_from_){0u}
    , decltype(_impl_.guild_to_){0u}
    , decltype(_impl_.time_){0u}
    , decltype(_impl_.type_){0u}
    , decltype(_impl_.war_price_){0}
    , decltype(_impl_.initial_score_){0}
    , decltype(_impl_.started_){false}
    , decltype(_impl_.bet_from_){0u}
    , decltype(_impl_.bet_to_){0u}
    , decltype(_impl_.power_from_){0}
    , decltype(_impl_.power_to_){0}
    , decltype(_impl_.handicap_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DGGuildWarReserveAddPacket::~DGGuildWarReserveAddPacket() {
  // @@protoc_insertion_point(destructor:network.DGGuildWarReserveAddPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DGGuildWarReserveAddPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DGGuildWarReserveAddPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DGGuildWarReserveAddPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.DGGuildWarReserveAddPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.handicap_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.handicap_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DGGuildWarReserveAddPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 guild_from = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.guild_from_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 guild_to = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.guild_to_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 war_price = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.war_price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 initial_score = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.initial_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool started = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.started_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 bet_from = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.bet_from_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 bet_to = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.bet_to_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 power_from = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.power_from_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 power_to = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.power_to_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 handicap = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.handicap_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DGGuildWarReserveAddPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.DGGuildWarReserveAddPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // uint32 guild_from = 2;
  if (this->_internal_guild_from() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_guild_from(), target);
  }

  // uint32 guild_to = 3;
  if (this->_internal_guild_to() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_guild_to(), target);
  }

  // uint32 time = 4;
  if (this->_internal_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_time(), target);
  }

  // uint32 type = 5;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_type(), target);
  }

  // int32 war_price = 6;
  if (this->_internal_war_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_war_price(), target);
  }

  // int32 initial_score = 7;
  if (this->_internal_initial_score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_initial_score(), target);
  }

  // bool started = 8;
  if (this->_internal_started() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_started(), target);
  }

  // uint32 bet_from = 9;
  if (this->_internal_bet_from() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_bet_from(), target);
  }

  // uint32 bet_to = 10;
  if (this->_internal_bet_to() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_bet_to(), target);
  }

  // int32 power_from = 11;
  if (this->_internal_power_from() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_power_from(), target);
  }

  // int32 power_to = 12;
  if (this->_internal_power_to() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(12, this->_internal_power_to(), target);
  }

  // int32 handicap = 13;
  if (this->_internal_handicap() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(13, this->_internal_handicap(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.DGGuildWarReserveAddPacket)
  return target;
}

size_t DGGuildWarReserveAddPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.DGGuildWarReserveAddPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  // uint32 guild_from = 2;
  if (this->_internal_guild_from() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_guild_from());
  }

  // uint32 guild_to = 3;
  if (this->_internal_guild_to() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_guild_to());
  }

  // uint32 time = 4;
  if (this->_internal_time() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_time());
  }

  // uint32 type = 5;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
  }

  // int32 war_price = 6;
  if (this->_internal_war_price() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_war_price());
  }

  // int32 initial_score = 7;
  if (this->_internal_initial_score() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_initial_score());
  }

  // bool started = 8;
  if (this->_internal_started() != 0) {
    total_size += 1 + 1;
  }

  // uint32 bet_from = 9;
  if (this->_internal_bet_from() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_bet_from());
  }

  // uint32 bet_to = 10;
  if (this->_internal_bet_to() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_bet_to());
  }

  // int32 power_from = 11;
  if (this->_internal_power_from() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_power_from());
  }

  // int32 power_to = 12;
  if (this->_internal_power_to() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_power_to());
  }

  // int32 handicap = 13;
  if (this->_internal_handicap() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_handicap());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DGGuildWarReserveAddPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DGGuildWarReserveAddPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DGGuildWarReserveAddPacket::GetClassData() const { return &_class_data_; }


void DGGuildWarReserveAddPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DGGuildWarReserveAddPacket*>(&to_msg);
  auto& from = static_cast<const DGGuildWarReserveAddPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.DGGuildWarReserveAddPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_guild_from() != 0) {
    _this->_internal_set_guild_from(from._internal_guild_from());
  }
  if (from._internal_guild_to() != 0) {
    _this->_internal_set_guild_to(from._internal_guild_to());
  }
  if (from._internal_time() != 0) {
    _this->_internal_set_time(from._internal_time());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_war_price() != 0) {
    _this->_internal_set_war_price(from._internal_war_price());
  }
  if (from._internal_initial_score() != 0) {
    _this->_internal_set_initial_score(from._internal_initial_score());
  }
  if (from._internal_started() != 0) {
    _this->_internal_set_started(from._internal_started());
  }
  if (from._internal_bet_from() != 0) {
    _this->_internal_set_bet_from(from._internal_bet_from());
  }
  if (from._internal_bet_to() != 0) {
    _this->_internal_set_bet_to(from._internal_bet_to());
  }
  if (from._internal_power_from() != 0) {
    _this->_internal_set_power_from(from._internal_power_from());
  }
  if (from._internal_power_to() != 0) {
    _this->_internal_set_power_to(from._internal_power_to());
  }
  if (from._internal_handicap() != 0) {
    _this->_internal_set_handicap(from._internal_handicap());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DGGuildWarReserveAddPacket::CopyFrom(const DGGuildWarReserveAddPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.DGGuildWarReserveAddPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DGGuildWarReserveAddPacket::IsInitialized() const {
  return true;
}

void DGGuildWarReserveAddPacket::InternalSwap(DGGuildWarReserveAddPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DGGuildWarReserveAddPacket, _impl_.handicap_)
      + sizeof(DGGuildWarReserveAddPacket::_impl_.handicap_)
      - PROTOBUF_FIELD_OFFSET(DGGuildWarReserveAddPacket, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DGGuildWarReserveAddPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dg_5fpackets_2eproto_getter, &descriptor_table_dg_5fpackets_2eproto_once,
      file_level_metadata_dg_5fpackets_2eproto[86]);
}

// ===================================================================

class DGGuildWarReserveDeletePacket::_Internal {
 public:
};

DGGuildWarReserveDeletePacket::DGGuildWarReserveDeletePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.DGGuildWarReserveDeletePacket)
}
DGGuildWarReserveDeletePacket::DGGuildWarReserveDeletePacket(const DGGuildWarReserveDeletePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DGGuildWarReserveDeletePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:network.DGGuildWarReserveDeletePacket)
}

inline void DGGuildWarReserveDeletePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DGGuildWarReserveDeletePacket::~DGGuildWarReserveDeletePacket() {
  // @@protoc_insertion_point(destructor:network.DGGuildWarReserveDeletePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DGGuildWarReserveDeletePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DGGuildWarReserveDeletePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DGGuildWarReserveDeletePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.DGGuildWarReserveDeletePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DGGuildWarReserveDeletePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DGGuildWarReserveDeletePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.DGGuildWarReserveDeletePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.DGGuildWarReserveDeletePacket)
  return target;
}

size_t DGGuildWarReserveDeletePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.DGGuildWarReserveDeletePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DGGuildWarReserveDeletePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DGGuildWarReserveDeletePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DGGuildWarReserveDeletePacket::GetClassData() const { return &_class_data_; }


void DGGuildWarReserveDeletePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DGGuildWarReserveDeletePacket*>(&to_msg);
  auto& from = static_cast<const DGGuildWarReserveDeletePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.DGGuildWarReserveDeletePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DGGuildWarReserveDeletePacket::CopyFrom(const DGGuildWarReserveDeletePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.DGGuildWarReserveDeletePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DGGuildWarReserveDeletePacket::IsInitialized() const {
  return true;
}

void DGGuildWarReserveDeletePacket::InternalSwap(DGGuildWarReserveDeletePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DGGuildWarReserveDeletePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dg_5fpackets_2eproto_getter, &descriptor_table_dg_5fpackets_2eproto_once,
      file_level_metadata_dg_5fpackets_2eproto[87]);
}

// ===================================================================

class DGGuildWarBetPacket::_Internal {
 public:
};

DGGuildWarBetPacket::DGGuildWarBetPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.DGGuildWarBetPacket)
}
DGGuildWarBetPacket::DGGuildWarBetPacket(const DGGuildWarBetPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DGGuildWarBetPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.login_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.gold_){}
    , decltype(_impl_.guild_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.login_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.login_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_login().empty()) {
    _this->_impl_.login_.Set(from._internal_login(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.guild_id_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.guild_id_));
  // @@protoc_insertion_point(copy_constructor:network.DGGuildWarBetPacket)
}

inline void DGGuildWarBetPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.login_){}
    , decltype(_impl_.id_){0u}
    , decltype(_impl_.gold_){0u}
    , decltype(_impl_.guild_id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.login_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.login_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DGGuildWarBetPacket::~DGGuildWarBetPacket() {
  // @@protoc_insertion_point(destructor:network.DGGuildWarBetPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DGGuildWarBetPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.login_.Destroy();
}

void DGGuildWarBetPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DGGuildWarBetPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.DGGuildWarBetPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.login_.ClearToEmpty();
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.guild_id_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.guild_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DGGuildWarBetPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes login = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_login();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 gold = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 guild_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DGGuildWarBetPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.DGGuildWarBetPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // bytes login = 2;
  if (!this->_internal_login().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_login(), target);
  }

  // uint32 gold = 3;
  if (this->_internal_gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_gold(), target);
  }

  // uint32 guild_id = 4;
  if (this->_internal_guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_guild_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.DGGuildWarBetPacket)
  return target;
}

size_t DGGuildWarBetPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.DGGuildWarBetPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes login = 2;
  if (!this->_internal_login().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_login());
  }

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  // uint32 gold = 3;
  if (this->_internal_gold() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_gold());
  }

  // uint32 guild_id = 4;
  if (this->_internal_guild_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_guild_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DGGuildWarBetPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DGGuildWarBetPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DGGuildWarBetPacket::GetClassData() const { return &_class_data_; }


void DGGuildWarBetPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DGGuildWarBetPacket*>(&to_msg);
  auto& from = static_cast<const DGGuildWarBetPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.DGGuildWarBetPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_login().empty()) {
    _this->_internal_set_login(from._internal_login());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_gold() != 0) {
    _this->_internal_set_gold(from._internal_gold());
  }
  if (from._internal_guild_id() != 0) {
    _this->_internal_set_guild_id(from._internal_guild_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DGGuildWarBetPacket::CopyFrom(const DGGuildWarBetPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.DGGuildWarBetPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DGGuildWarBetPacket::IsInitialized() const {
  return true;
}

void DGGuildWarBetPacket::InternalSwap(DGGuildWarBetPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.login_, lhs_arena,
      &other->_impl_.login_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DGGuildWarBetPacket, _impl_.guild_id_)
      + sizeof(DGGuildWarBetPacket::_impl_.guild_id_)
      - PROTOBUF_FIELD_OFFSET(DGGuildWarBetPacket, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DGGuildWarBetPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dg_5fpackets_2eproto_getter, &descriptor_table_dg_5fpackets_2eproto_once,
      file_level_metadata_dg_5fpackets_2eproto[88]);
}

// ===================================================================

class DGGuildChangeMasterPacket::_Internal {
 public:
};

DGGuildChangeMasterPacket::DGGuildChangeMasterPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.DGGuildChangeMasterPacket)
}
DGGuildChangeMasterPacket::DGGuildChangeMasterPacket(const DGGuildChangeMasterPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DGGuildChangeMasterPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.guild_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.guild_id_ = from._impl_.guild_id_;
  // @@protoc_insertion_point(copy_constructor:network.DGGuildChangeMasterPacket)
}

inline void DGGuildChangeMasterPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.guild_id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DGGuildChangeMasterPacket::~DGGuildChangeMasterPacket() {
  // @@protoc_insertion_point(destructor:network.DGGuildChangeMasterPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DGGuildChangeMasterPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DGGuildChangeMasterPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DGGuildChangeMasterPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.DGGuildChangeMasterPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.guild_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DGGuildChangeMasterPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 guild_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DGGuildChangeMasterPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.DGGuildChangeMasterPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 guild_id = 1;
  if (this->_internal_guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_guild_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.DGGuildChangeMasterPacket)
  return target;
}

size_t DGGuildChangeMasterPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.DGGuildChangeMasterPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 guild_id = 1;
  if (this->_internal_guild_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_guild_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DGGuildChangeMasterPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DGGuildChangeMasterPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DGGuildChangeMasterPacket::GetClassData() const { return &_class_data_; }


void DGGuildChangeMasterPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DGGuildChangeMasterPacket*>(&to_msg);
  auto& from = static_cast<const DGGuildChangeMasterPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.DGGuildChangeMasterPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_guild_id() != 0) {
    _this->_internal_set_guild_id(from._internal_guild_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DGGuildChangeMasterPacket::CopyFrom(const DGGuildChangeMasterPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.DGGuildChangeMasterPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DGGuildChangeMasterPacket::IsInitialized() const {
  return true;
}

void DGGuildChangeMasterPacket::InternalSwap(DGGuildChangeMasterPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.guild_id_, other->_impl_.guild_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DGGuildChangeMasterPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dg_5fpackets_2eproto_getter, &descriptor_table_dg_5fpackets_2eproto_once,
      file_level_metadata_dg_5fpackets_2eproto[89]);
}

// ===================================================================

class DGGuildSafeboxPacket::_Internal {
 public:
  static const ::network::TItemData& item(const DGGuildSafeboxPacket* msg);
  static const ::network::TGuildSafeboxLogTable& added_log(const DGGuildSafeboxPacket* msg);
};

const ::network::TItemData&
DGGuildSafeboxPacket::_Internal::item(const DGGuildSafeboxPacket* msg) {
  return *msg->_impl_.item_;
}
const ::network::TGuildSafeboxLogTable&
DGGuildSafeboxPacket::_Internal::added_log(const DGGuildSafeboxPacket* msg) {
  return *msg->_impl_.added_log_;
}
void DGGuildSafeboxPacket::clear_item() {
  if (GetArenaForAllocation() == nullptr && _impl_.item_ != nullptr) {
    delete _impl_.item_;
  }
  _impl_.item_ = nullptr;
}
void DGGuildSafeboxPacket::clear_items() {
  _impl_.items_.Clear();
}
void DGGuildSafeboxPacket::clear_added_log() {
  if (GetArenaForAllocation() == nullptr && _impl_.added_log_ != nullptr) {
    delete _impl_.added_log_;
  }
  _impl_.added_log_ = nullptr;
}
DGGuildSafeboxPacket::DGGuildSafeboxPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.DGGuildSafeboxPacket)
}
DGGuildSafeboxPacket::DGGuildSafeboxPacket(const DGGuildSafeboxPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DGGuildSafeboxPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , decltype(_impl_.item_){nullptr}
    , decltype(_impl_.added_log_){nullptr}
    , decltype(_impl_.sub_header_){}
    , decltype(_impl_.guild_id_){}
    , decltype(_impl_.gold_){}
    , decltype(_impl_.size_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_item()) {
    _this->_impl_.item_ = new ::network::TItemData(*from._impl_.item_);
  }
  if (from._internal_has_added_log()) {
    _this->_impl_.added_log_ = new ::network::TGuildSafeboxLogTable(*from._impl_.added_log_);
  }
  ::memcpy(&_impl_.sub_header_, &from._impl_.sub_header_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.size_) -
    reinterpret_cast<char*>(&_impl_.sub_header_)) + sizeof(_impl_.size_));
  // @@protoc_insertion_point(copy_constructor:network.DGGuildSafeboxPacket)
}

inline void DGGuildSafeboxPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , decltype(_impl_.item_){nullptr}
    , decltype(_impl_.added_log_){nullptr}
    , decltype(_impl_.sub_header_){0u}
    , decltype(_impl_.guild_id_){0u}
    , decltype(_impl_.gold_){uint64_t{0u}}
    , decltype(_impl_.size_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DGGuildSafeboxPacket::~DGGuildSafeboxPacket() {
  // @@protoc_insertion_point(destructor:network.DGGuildSafeboxPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DGGuildSafeboxPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.item_;
  if (this != internal_default_instance()) delete _impl_.added_log_;
}

void DGGuildSafeboxPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DGGuildSafeboxPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.DGGuildSafeboxPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.item_ != nullptr) {
    delete _impl_.item_;
  }
  _impl_.item_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.added_log_ != nullptr) {
    delete _impl_.added_log_;
  }
  _impl_.added_log_ = nullptr;
  ::memset(&_impl_.sub_header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.size_) -
      reinterpret_cast<char*>(&_impl_.sub_header_)) + sizeof(_impl_.size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DGGuildSafeboxPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 sub_header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.sub_header_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 guild_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .network.TItemData item = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_item(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 gold = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 size = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .network.TItemData items = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .network.TGuildSafeboxLogTable added_log = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_added_log(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DGGuildSafeboxPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.DGGuildSafeboxPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 sub_header = 1;
  if (this->_internal_sub_header() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_sub_header(), target);
  }

  // uint32 guild_id = 2;
  if (this->_internal_guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_guild_id(), target);
  }

  // .network.TItemData item = 3;
  if (this->_internal_has_item()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::item(this),
        _Internal::item(this).GetCachedSize(), target, stream);
  }

  // uint64 gold = 4;
  if (this->_internal_gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_gold(), target);
  }

  // uint32 size = 5;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_size(), target);
  }

  // repeated .network.TItemData items = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .network.TGuildSafeboxLogTable added_log = 7;
  if (this->_internal_has_added_log()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::added_log(this),
        _Internal::added_log(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.DGGuildSafeboxPacket)
  return target;
}

size_t DGGuildSafeboxPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.DGGuildSafeboxPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .network.TItemData items = 6;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .network.TItemData item = 3;
  if (this->_internal_has_item()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.item_);
  }

  // .network.TGuildSafeboxLogTable added_log = 7;
  if (this->_internal_has_added_log()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.added_log_);
  }

  // uint32 sub_header = 1;
  if (this->_internal_sub_header() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_sub_header());
  }

  // uint32 guild_id = 2;
  if (this->_internal_guild_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_guild_id());
  }

  // uint64 gold = 4;
  if (this->_internal_gold() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_gold());
  }

  // uint32 size = 5;
  if (this->_internal_size() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DGGuildSafeboxPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DGGuildSafeboxPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DGGuildSafeboxPacket::GetClassData() const { return &_class_data_; }


void DGGuildSafeboxPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DGGuildSafeboxPacket*>(&to_msg);
  auto& from = static_cast<const DGGuildSafeboxPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.DGGuildSafeboxPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  if (from._internal_has_item()) {
    _this->_internal_mutable_item()->::network::TItemData::MergeFrom(
        from._internal_item());
  }
  if (from._internal_has_added_log()) {
    _this->_internal_mutable_added_log()->::network::TGuildSafeboxLogTable::MergeFrom(
        from._internal_added_log());
  }
  if (from._internal_sub_header() != 0) {
    _this->_internal_set_sub_header(from._internal_sub_header());
  }
  if (from._internal_guild_id() != 0) {
    _this->_internal_set_guild_id(from._internal_guild_id());
  }
  if (from._internal_gold() != 0) {
    _this->_internal_set_gold(from._internal_gold());
  }
  if (from._internal_size() != 0) {
    _this->_internal_set_size(from._internal_size());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DGGuildSafeboxPacket::CopyFrom(const DGGuildSafeboxPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.DGGuildSafeboxPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DGGuildSafeboxPacket::IsInitialized() const {
  return true;
}

void DGGuildSafeboxPacket::InternalSwap(DGGuildSafeboxPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DGGuildSafeboxPacket, _impl_.size_)
      + sizeof(DGGuildSafeboxPacket::_impl_.size_)
      - PROTOBUF_FIELD_OFFSET(DGGuildSafeboxPacket, _impl_.item_)>(
          reinterpret_cast<char*>(&_impl_.item_),
          reinterpret_cast<char*>(&other->_impl_.item_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DGGuildSafeboxPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dg_5fpackets_2eproto_getter, &descriptor_table_dg_5fpackets_2eproto_once,
      file_level_metadata_dg_5fpackets_2eproto[90]);
}

// ===================================================================

class DGPartyCreatePacket::_Internal {
 public:
};

DGPartyCreatePacket::DGPartyCreatePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.DGPartyCreatePacket)
}
DGPartyCreatePacket::DGPartyCreatePacket(const DGPartyCreatePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DGPartyCreatePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.leader_pid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.leader_pid_ = from._impl_.leader_pid_;
  // @@protoc_insertion_point(copy_constructor:network.DGPartyCreatePacket)
}

inline void DGPartyCreatePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.leader_pid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DGPartyCreatePacket::~DGPartyCreatePacket() {
  // @@protoc_insertion_point(destructor:network.DGPartyCreatePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DGPartyCreatePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DGPartyCreatePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DGPartyCreatePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.DGPartyCreatePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.leader_pid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DGPartyCreatePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 leader_pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.leader_pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DGPartyCreatePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.DGPartyCreatePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 leader_pid = 1;
  if (this->_internal_leader_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_leader_pid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.DGPartyCreatePacket)
  return target;
}

size_t DGPartyCreatePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.DGPartyCreatePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 leader_pid = 1;
  if (this->_internal_leader_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_leader_pid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DGPartyCreatePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DGPartyCreatePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DGPartyCreatePacket::GetClassData() const { return &_class_data_; }


void DGPartyCreatePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DGPartyCreatePacket*>(&to_msg);
  auto& from = static_cast<const DGPartyCreatePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.DGPartyCreatePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_leader_pid() != 0) {
    _this->_internal_set_leader_pid(from._internal_leader_pid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DGPartyCreatePacket::CopyFrom(const DGPartyCreatePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.DGPartyCreatePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DGPartyCreatePacket::IsInitialized() const {
  return true;
}

void DGPartyCreatePacket::InternalSwap(DGPartyCreatePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.leader_pid_, other->_impl_.leader_pid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DGPartyCreatePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dg_5fpackets_2eproto_getter, &descriptor_table_dg_5fpackets_2eproto_once,
      file_level_metadata_dg_5fpackets_2eproto[91]);
}

// ===================================================================

class DGPartyDeletePacket::_Internal {
 public:
};

DGPartyDeletePacket::DGPartyDeletePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.DGPartyDeletePacket)
}
DGPartyDeletePacket::DGPartyDeletePacket(const DGPartyDeletePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DGPartyDeletePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.leader_pid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.leader_pid_ = from._impl_.leader_pid_;
  // @@protoc_insertion_point(copy_constructor:network.DGPartyDeletePacket)
}

inline void DGPartyDeletePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.leader_pid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DGPartyDeletePacket::~DGPartyDeletePacket() {
  // @@protoc_insertion_point(destructor:network.DGPartyDeletePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DGPartyDeletePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DGPartyDeletePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DGPartyDeletePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.DGPartyDeletePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.leader_pid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DGPartyDeletePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 leader_pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.leader_pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DGPartyDeletePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.DGPartyDeletePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 leader_pid = 1;
  if (this->_internal_leader_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_leader_pid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.DGPartyDeletePacket)
  return target;
}

size_t DGPartyDeletePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.DGPartyDeletePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 leader_pid = 1;
  if (this->_internal_leader_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_leader_pid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DGPartyDeletePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DGPartyDeletePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DGPartyDeletePacket::GetClassData() const { return &_class_data_; }


void DGPartyDeletePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DGPartyDeletePacket*>(&to_msg);
  auto& from = static_cast<const DGPartyDeletePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.DGPartyDeletePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_leader_pid() != 0) {
    _this->_internal_set_leader_pid(from._internal_leader_pid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DGPartyDeletePacket::CopyFrom(const DGPartyDeletePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.DGPartyDeletePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DGPartyDeletePacket::IsInitialized() const {
  return true;
}

void DGPartyDeletePacket::InternalSwap(DGPartyDeletePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.leader_pid_, other->_impl_.leader_pid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DGPartyDeletePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dg_5fpackets_2eproto_getter, &descriptor_table_dg_5fpackets_2eproto_once,
      file_level_metadata_dg_5fpackets_2eproto[92]);
}

// ===================================================================

class DGPartyAddPacket::_Internal {
 public:
};

DGPartyAddPacket::DGPartyAddPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.DGPartyAddPacket)
}
DGPartyAddPacket::DGPartyAddPacket(const DGPartyAddPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DGPartyAddPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.leader_pid_){}
    , decltype(_impl_.pid_){}
    , decltype(_impl_.state_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.leader_pid_, &from._impl_.leader_pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.state_) -
    reinterpret_cast<char*>(&_impl_.leader_pid_)) + sizeof(_impl_.state_));
  // @@protoc_insertion_point(copy_constructor:network.DGPartyAddPacket)
}

inline void DGPartyAddPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.leader_pid_){0u}
    , decltype(_impl_.pid_){0u}
    , decltype(_impl_.state_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DGPartyAddPacket::~DGPartyAddPacket() {
  // @@protoc_insertion_point(destructor:network.DGPartyAddPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DGPartyAddPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DGPartyAddPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DGPartyAddPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.DGPartyAddPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.leader_pid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.state_) -
      reinterpret_cast<char*>(&_impl_.leader_pid_)) + sizeof(_impl_.state_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DGPartyAddPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 leader_pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.leader_pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 pid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DGPartyAddPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.DGPartyAddPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 leader_pid = 1;
  if (this->_internal_leader_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_leader_pid(), target);
  }

  // uint32 pid = 2;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_pid(), target);
  }

  // uint32 state = 3;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.DGPartyAddPacket)
  return target;
}

size_t DGPartyAddPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.DGPartyAddPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 leader_pid = 1;
  if (this->_internal_leader_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_leader_pid());
  }

  // uint32 pid = 2;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid());
  }

  // uint32 state = 3;
  if (this->_internal_state() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DGPartyAddPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DGPartyAddPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DGPartyAddPacket::GetClassData() const { return &_class_data_; }


void DGPartyAddPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DGPartyAddPacket*>(&to_msg);
  auto& from = static_cast<const DGPartyAddPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.DGPartyAddPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_leader_pid() != 0) {
    _this->_internal_set_leader_pid(from._internal_leader_pid());
  }
  if (from._internal_pid() != 0) {
    _this->_internal_set_pid(from._internal_pid());
  }
  if (from._internal_state() != 0) {
    _this->_internal_set_state(from._internal_state());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DGPartyAddPacket::CopyFrom(const DGPartyAddPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.DGPartyAddPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DGPartyAddPacket::IsInitialized() const {
  return true;
}

void DGPartyAddPacket::InternalSwap(DGPartyAddPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DGPartyAddPacket, _impl_.state_)
      + sizeof(DGPartyAddPacket::_impl_.state_)
      - PROTOBUF_FIELD_OFFSET(DGPartyAddPacket, _impl_.leader_pid_)>(
          reinterpret_cast<char*>(&_impl_.leader_pid_),
          reinterpret_cast<char*>(&other->_impl_.leader_pid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DGPartyAddPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dg_5fpackets_2eproto_getter, &descriptor_table_dg_5fpackets_2eproto_once,
      file_level_metadata_dg_5fpackets_2eproto[93]);
}

// ===================================================================

class DGPartyRemovePacket::_Internal {
 public:
};

DGPartyRemovePacket::DGPartyRemovePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.DGPartyRemovePacket)
}
DGPartyRemovePacket::DGPartyRemovePacket(const DGPartyRemovePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DGPartyRemovePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.pid_ = from._impl_.pid_;
  // @@protoc_insertion_point(copy_constructor:network.DGPartyRemovePacket)
}

inline void DGPartyRemovePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DGPartyRemovePacket::~DGPartyRemovePacket() {
  // @@protoc_insertion_point(destructor:network.DGPartyRemovePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DGPartyRemovePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DGPartyRemovePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DGPartyRemovePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.DGPartyRemovePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DGPartyRemovePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DGPartyRemovePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.DGPartyRemovePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.DGPartyRemovePacket)
  return target;
}

size_t DGPartyRemovePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.DGPartyRemovePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DGPartyRemovePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DGPartyRemovePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DGPartyRemovePacket::GetClassData() const { return &_class_data_; }


void DGPartyRemovePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DGPartyRemovePacket*>(&to_msg);
  auto& from = static_cast<const DGPartyRemovePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.DGPartyRemovePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_pid() != 0) {
    _this->_internal_set_pid(from._internal_pid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DGPartyRemovePacket::CopyFrom(const DGPartyRemovePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.DGPartyRemovePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DGPartyRemovePacket::IsInitialized() const {
  return true;
}

void DGPartyRemovePacket::InternalSwap(DGPartyRemovePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.pid_, other->_impl_.pid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DGPartyRemovePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dg_5fpackets_2eproto_getter, &descriptor_table_dg_5fpackets_2eproto_once,
      file_level_metadata_dg_5fpackets_2eproto[94]);
}

// ===================================================================

class DGPartyStateChangePacket::_Internal {
 public:
};

DGPartyStateChangePacket::DGPartyStateChangePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.DGPartyStateChangePacket)
}
DGPartyStateChangePacket::DGPartyStateChangePacket(const DGPartyStateChangePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DGPartyStateChangePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.leader_pid_){}
    , decltype(_impl_.pid_){}
    , decltype(_impl_.role_){}
    , decltype(_impl_.flag_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.leader_pid_, &from._impl_.leader_pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.flag_) -
    reinterpret_cast<char*>(&_impl_.leader_pid_)) + sizeof(_impl_.flag_));
  // @@protoc_insertion_point(copy_constructor:network.DGPartyStateChangePacket)
}

inline void DGPartyStateChangePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.leader_pid_){0u}
    , decltype(_impl_.pid_){0u}
    , decltype(_impl_.role_){0u}
    , decltype(_impl_.flag_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DGPartyStateChangePacket::~DGPartyStateChangePacket() {
  // @@protoc_insertion_point(destructor:network.DGPartyStateChangePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DGPartyStateChangePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DGPartyStateChangePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DGPartyStateChangePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.DGPartyStateChangePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.leader_pid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.flag_) -
      reinterpret_cast<char*>(&_impl_.leader_pid_)) + sizeof(_impl_.flag_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DGPartyStateChangePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 leader_pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.leader_pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 pid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 role = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.role_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool flag = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DGPartyStateChangePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.DGPartyStateChangePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 leader_pid = 1;
  if (this->_internal_leader_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_leader_pid(), target);
  }

  // uint32 pid = 2;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_pid(), target);
  }

  // uint32 role = 3;
  if (this->_internal_role() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_role(), target);
  }

  // bool flag = 4;
  if (this->_internal_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_flag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.DGPartyStateChangePacket)
  return target;
}

size_t DGPartyStateChangePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.DGPartyStateChangePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 leader_pid = 1;
  if (this->_internal_leader_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_leader_pid());
  }

  // uint32 pid = 2;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid());
  }

  // uint32 role = 3;
  if (this->_internal_role() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_role());
  }

  // bool flag = 4;
  if (this->_internal_flag() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DGPartyStateChangePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DGPartyStateChangePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DGPartyStateChangePacket::GetClassData() const { return &_class_data_; }


void DGPartyStateChangePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DGPartyStateChangePacket*>(&to_msg);
  auto& from = static_cast<const DGPartyStateChangePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.DGPartyStateChangePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_leader_pid() != 0) {
    _this->_internal_set_leader_pid(from._internal_leader_pid());
  }
  if (from._internal_pid() != 0) {
    _this->_internal_set_pid(from._internal_pid());
  }
  if (from._internal_role() != 0) {
    _this->_internal_set_role(from._internal_role());
  }
  if (from._internal_flag() != 0) {
    _this->_internal_set_flag(from._internal_flag());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DGPartyStateChangePacket::CopyFrom(const DGPartyStateChangePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.DGPartyStateChangePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DGPartyStateChangePacket::IsInitialized() const {
  return true;
}

void DGPartyStateChangePacket::InternalSwap(DGPartyStateChangePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DGPartyStateChangePacket, _impl_.flag_)
      + sizeof(DGPartyStateChangePacket::_impl_.flag_)
      - PROTOBUF_FIELD_OFFSET(DGPartyStateChangePacket, _impl_.leader_pid_)>(
          reinterpret_cast<char*>(&_impl_.leader_pid_),
          reinterpret_cast<char*>(&other->_impl_.leader_pid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DGPartyStateChangePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dg_5fpackets_2eproto_getter, &descriptor_table_dg_5fpackets_2eproto_once,
      file_level_metadata_dg_5fpackets_2eproto[95]);
}

// ===================================================================

class DGPartySetMemberLevelPacket::_Internal {
 public:
};

DGPartySetMemberLevelPacket::DGPartySetMemberLevelPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.DGPartySetMemberLevelPacket)
}
DGPartySetMemberLevelPacket::DGPartySetMemberLevelPacket(const DGPartySetMemberLevelPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DGPartySetMemberLevelPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.leader_pid_){}
    , decltype(_impl_.pid_){}
    , decltype(_impl_.level_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.leader_pid_, &from._impl_.leader_pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.level_) -
    reinterpret_cast<char*>(&_impl_.leader_pid_)) + sizeof(_impl_.level_));
  // @@protoc_insertion_point(copy_constructor:network.DGPartySetMemberLevelPacket)
}

inline void DGPartySetMemberLevelPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.leader_pid_){0u}
    , decltype(_impl_.pid_){0u}
    , decltype(_impl_.level_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DGPartySetMemberLevelPacket::~DGPartySetMemberLevelPacket() {
  // @@protoc_insertion_point(destructor:network.DGPartySetMemberLevelPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DGPartySetMemberLevelPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DGPartySetMemberLevelPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DGPartySetMemberLevelPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.DGPartySetMemberLevelPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.leader_pid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.level_) -
      reinterpret_cast<char*>(&_impl_.leader_pid_)) + sizeof(_impl_.level_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DGPartySetMemberLevelPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 leader_pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.leader_pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 pid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 level = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DGPartySetMemberLevelPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.DGPartySetMemberLevelPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 leader_pid = 1;
  if (this->_internal_leader_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_leader_pid(), target);
  }

  // uint32 pid = 2;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_pid(), target);
  }

  // uint32 level = 3;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.DGPartySetMemberLevelPacket)
  return target;
}

size_t DGPartySetMemberLevelPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.DGPartySetMemberLevelPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 leader_pid = 1;
  if (this->_internal_leader_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_leader_pid());
  }

  // uint32 pid = 2;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid());
  }

  // uint32 level = 3;
  if (this->_internal_level() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_level());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DGPartySetMemberLevelPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DGPartySetMemberLevelPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DGPartySetMemberLevelPacket::GetClassData() const { return &_class_data_; }


void DGPartySetMemberLevelPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DGPartySetMemberLevelPacket*>(&to_msg);
  auto& from = static_cast<const DGPartySetMemberLevelPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.DGPartySetMemberLevelPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_leader_pid() != 0) {
    _this->_internal_set_leader_pid(from._internal_leader_pid());
  }
  if (from._internal_pid() != 0) {
    _this->_internal_set_pid(from._internal_pid());
  }
  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DGPartySetMemberLevelPacket::CopyFrom(const DGPartySetMemberLevelPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.DGPartySetMemberLevelPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DGPartySetMemberLevelPacket::IsInitialized() const {
  return true;
}

void DGPartySetMemberLevelPacket::InternalSwap(DGPartySetMemberLevelPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DGPartySetMemberLevelPacket, _impl_.level_)
      + sizeof(DGPartySetMemberLevelPacket::_impl_.level_)
      - PROTOBUF_FIELD_OFFSET(DGPartySetMemberLevelPacket, _impl_.leader_pid_)>(
          reinterpret_cast<char*>(&_impl_.leader_pid_),
          reinterpret_cast<char*>(&other->_impl_.leader_pid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DGPartySetMemberLevelPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dg_5fpackets_2eproto_getter, &descriptor_table_dg_5fpackets_2eproto_once,
      file_level_metadata_dg_5fpackets_2eproto[96]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace network
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::network::DGBootPacket*
Arena::CreateMaybeMessage< ::network::DGBootPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::DGBootPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::DGMapLocationsPacket*
Arena::CreateMaybeMessage< ::network::DGMapLocationsPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::DGMapLocationsPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::DGLoginSuccessPacket*
Arena::CreateMaybeMessage< ::network::DGLoginSuccessPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::DGLoginSuccessPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::DGPlayerCreateSuccessPacket*
Arena::CreateMaybeMessage< ::network::DGPlayerCreateSuccessPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::DGPlayerCreateSuccessPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::DGPlayerDeleteSuccessPacket*
Arena::CreateMaybeMessage< ::network::DGPlayerDeleteSuccessPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::DGPlayerDeleteSuccessPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::DGPlayerLoadPacket*
Arena::CreateMaybeMessage< ::network::DGPlayerLoadPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::DGPlayerLoadPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::DGPlayerSkillLoadPacket*
Arena::CreateMaybeMessage< ::network::DGPlayerSkillLoadPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::DGPlayerSkillLoadPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::DGItemLoadPacket*
Arena::CreateMaybeMessage< ::network::DGItemLoadPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::DGItemLoadPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::DGPetLoadPacket*
Arena::CreateMaybeMessage< ::network::DGPetLoadPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::DGPetLoadPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::DGQuestLoadPacket*
Arena::CreateMaybeMessage< ::network::DGQuestLoadPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::DGQuestLoadPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::DGAffectLoadPacket*
Arena::CreateMaybeMessage< ::network::DGAffectLoadPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::DGAffectLoadPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::DGSafeboxLoadPacket*
Arena::CreateMaybeMessage< ::network::DGSafeboxLoadPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::DGSafeboxLoadPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::DGSafeboxChangeSizePacket*
Arena::CreateMaybeMessage< ::network::DGSafeboxChangeSizePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::DGSafeboxChangeSizePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::DGSafeboxChangePasswordAnswerPacket*
Arena::CreateMaybeMessage< ::network::DGSafeboxChangePasswordAnswerPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::DGSafeboxChangePasswordAnswerPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::DGEmpireSelectPacket*
Arena::CreateMaybeMessage< ::network::DGEmpireSelectPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::DGEmpireSelectPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::DGP2PInfoPacket*
Arena::CreateMaybeMessage< ::network::DGP2PInfoPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::DGP2PInfoPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::DGLoginAlreadyPacket*
Arena::CreateMaybeMessage< ::network::DGLoginAlreadyPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::DGLoginAlreadyPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::DGTimePacket*
Arena::CreateMaybeMessage< ::network::DGTimePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::DGTimePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::DGReloadShopTablePacket*
Arena::CreateMaybeMessage< ::network::DGReloadShopTablePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::DGReloadShopTablePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::DGReloadMobProtoPacket*
Arena::CreateMaybeMessage< ::network::DGReloadMobProtoPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::DGReloadMobProtoPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::DGReloadProtoPacket*
Arena::CreateMaybeMessage< ::network::DGReloadProtoPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::DGReloadProtoPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::DGChangeNamePacket*
Arena::CreateMaybeMessage< ::network::DGChangeNamePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::DGChangeNamePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::DGAuthLoginPacket*
Arena::CreateMaybeMessage< ::network::DGAuthLoginPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::DGAuthLoginPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::DGChangeEmpirePrivPacket*
Arena::CreateMaybeMessage< ::network::DGChangeEmpirePrivPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::DGChangeEmpirePrivPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::DGChangeGuildPrivPacket*
Arena::CreateMaybeMessage< ::network::DGChangeGuildPrivPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::DGChangeGuildPrivPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::DGChangeCharacterPrivPacket*
Arena::CreateMaybeMessage< ::network::DGChangeCharacterPrivPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::DGChangeCharacterPrivPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::DGMoneyLogPacket*
Arena::CreateMaybeMessage< ::network::DGMoneyLogPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::DGMoneyLogPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::DGSetEventFlagPacket*
Arena::CreateMaybeMessage< ::network::DGSetEventFlagPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::DGSetEventFlagPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::DGVCardPacket*
Arena::CreateMaybeMessage< ::network::DGVCardPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::DGVCardPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::DGNoticePacket*
Arena::CreateMaybeMessage< ::network::DGNoticePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::DGNoticePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::DGAddBlockCountryIPPacket*
Arena::CreateMaybeMessage< ::network::DGAddBlockCountryIPPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::DGAddBlockCountryIPPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::DGBlockExceptionPacket*
Arena::CreateMaybeMessage< ::network::DGBlockExceptionPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::DGBlockExceptionPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::DGMyShopPricelistPacket*
Arena::CreateMaybeMessage< ::network::DGMyShopPricelistPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::DGMyShopPricelistPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::DGReloadAdminPacket*
Arena::CreateMaybeMessage< ::network::DGReloadAdminPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::DGReloadAdminPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::DGDetailLogPacket*
Arena::CreateMaybeMessage< ::network::DGDetailLogPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::DGDetailLogPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::DGItemAwardInformerPacket*
Arena::CreateMaybeMessage< ::network::DGItemAwardInformerPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::DGItemAwardInformerPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::DGRespondChannelStatusPacket*
Arena::CreateMaybeMessage< ::network::DGRespondChannelStatusPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::DGRespondChannelStatusPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::DGChannelSwitchPacket*
Arena::CreateMaybeMessage< ::network::DGChannelSwitchPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::DGChannelSwitchPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::DGSpareItemIDRangePacket*
Arena::CreateMaybeMessage< ::network::DGSpareItemIDRangePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::DGSpareItemIDRangePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::DGUpdateHorseNamePacket*
Arena::CreateMaybeMessage< ::network::DGUpdateHorseNamePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::DGUpdateHorseNamePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::DGSpawnMobTimedPacket*
Arena::CreateMaybeMessage< ::network::DGSpawnMobTimedPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::DGSpawnMobTimedPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::DGItemOfflineRestorePacket*
Arena::CreateMaybeMessage< ::network::DGItemOfflineRestorePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::DGItemOfflineRestorePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::DGOfflineMessagesLoadPacket*
Arena::CreateMaybeMessage< ::network::DGOfflineMessagesLoadPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::DGOfflineMessagesLoadPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::DGItemRefundLoadPacket_RefundItem*
Arena::CreateMaybeMessage< ::network::DGItemRefundLoadPacket_RefundItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::DGItemRefundLoadPacket_RefundItem >(arena);
}
template<> PROTOBUF_NOINLINE ::network::DGItemRefundLoadPacket*
Arena::CreateMaybeMessage< ::network::DGItemRefundLoadPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::DGItemRefundLoadPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::DGWhisperPlayerExistResultPacket*
Arena::CreateMaybeMessage< ::network::DGWhisperPlayerExistResultPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::DGWhisperPlayerExistResultPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::DGWhisperPlayerMessageOfflinePacket*
Arena::CreateMaybeMessage< ::network::DGWhisperPlayerMessageOfflinePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::DGWhisperPlayerMessageOfflinePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::DGReloadXmasRewardsPacket*
Arena::CreateMaybeMessage< ::network::DGReloadXmasRewardsPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::DGReloadXmasRewardsPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::DGSetAveragePricesPacket_Element*
Arena::CreateMaybeMessage< ::network::DGSetAveragePricesPacket_Element >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::DGSetAveragePricesPacket_Element >(arena);
}
template<> PROTOBUF_NOINLINE ::network::DGSetAveragePricesPacket*
Arena::CreateMaybeMessage< ::network::DGSetAveragePricesPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::DGSetAveragePricesPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::DGSkillColorLoadPacket_SkillColor*
Arena::CreateMaybeMessage< ::network::DGSkillColorLoadPacket_SkillColor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::DGSkillColorLoadPacket_SkillColor >(arena);
}
template<> PROTOBUF_NOINLINE ::network::DGSkillColorLoadPacket*
Arena::CreateMaybeMessage< ::network::DGSkillColorLoadPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::DGSkillColorLoadPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::DGEquipmentPageLoadPacket*
Arena::CreateMaybeMessage< ::network::DGEquipmentPageLoadPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::DGEquipmentPageLoadPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::DGGuildDungeonPacket*
Arena::CreateMaybeMessage< ::network::DGGuildDungeonPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::DGGuildDungeonPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::DGGuildDungeonCDPacket*
Arena::CreateMaybeMessage< ::network::DGGuildDungeonCDPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::DGGuildDungeonCDPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::DGMaintenancePacket*
Arena::CreateMaybeMessage< ::network::DGMaintenancePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::DGMaintenancePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::DGWhitelistIPPacket*
Arena::CreateMaybeMessage< ::network::DGWhitelistIPPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::DGWhitelistIPPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::DGAuctionDeletePlayer*
Arena::CreateMaybeMessage< ::network::DGAuctionDeletePlayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::DGAuctionDeletePlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::network::DGCreateObjectPacket*
Arena::CreateMaybeMessage< ::network::DGCreateObjectPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::DGCreateObjectPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::DGDeleteObjectPacket*
Arena::CreateMaybeMessage< ::network::DGDeleteObjectPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::DGDeleteObjectPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::DGUpdateLandPacket*
Arena::CreateMaybeMessage< ::network::DGUpdateLandPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::DGUpdateLandPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::DGMarriageAddPacket*
Arena::CreateMaybeMessage< ::network::DGMarriageAddPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::DGMarriageAddPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::DGMarriageUpdatePacket*
Arena::CreateMaybeMessage< ::network::DGMarriageUpdatePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::DGMarriageUpdatePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::DGMarriageRemovePacket*
Arena::CreateMaybeMessage< ::network::DGMarriageRemovePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::DGMarriageRemovePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::DGWeddingRequestPacket*
Arena::CreateMaybeMessage< ::network::DGWeddingRequestPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::DGWeddingRequestPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::DGWeddingReadyPacket*
Arena::CreateMaybeMessage< ::network::DGWeddingReadyPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::DGWeddingReadyPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::DGWeddingStartPacket*
Arena::CreateMaybeMessage< ::network::DGWeddingStartPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::DGWeddingStartPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::DGWeddingEndPacket*
Arena::CreateMaybeMessage< ::network::DGWeddingEndPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::DGWeddingEndPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::DGBillingRepairPacket*
Arena::CreateMaybeMessage< ::network::DGBillingRepairPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::DGBillingRepairPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::DGBillingExpirePacket*
Arena::CreateMaybeMessage< ::network::DGBillingExpirePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::DGBillingExpirePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::DGBillingLoginPacket*
Arena::CreateMaybeMessage< ::network::DGBillingLoginPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::DGBillingLoginPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::DGBillingCheckPacket*
Arena::CreateMaybeMessage< ::network::DGBillingCheckPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::DGBillingCheckPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::DGGuildLoadPacket*
Arena::CreateMaybeMessage< ::network::DGGuildLoadPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::DGGuildLoadPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::DGGuildSkillUpdatePacket*
Arena::CreateMaybeMessage< ::network::DGGuildSkillUpdatePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::DGGuildSkillUpdatePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::DGGuildExpUpdatePacket*
Arena::CreateMaybeMessage< ::network::DGGuildExpUpdatePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::DGGuildExpUpdatePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::DGGuildAddMemberPacket*
Arena::CreateMaybeMessage< ::network::DGGuildAddMemberPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::DGGuildAddMemberPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::DGGuildRemoveMemberPacket*
Arena::CreateMaybeMessage< ::network::DGGuildRemoveMemberPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::DGGuildRemoveMemberPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::DGGuildChangeGradePacket*
Arena::CreateMaybeMessage< ::network::DGGuildChangeGradePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::DGGuildChangeGradePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::DGGuildChangeMemberDataPacket*
Arena::CreateMaybeMessage< ::network::DGGuildChangeMemberDataPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::DGGuildChangeMemberDataPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::DGGuildDisbandPacket*
Arena::CreateMaybeMessage< ::network::DGGuildDisbandPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::DGGuildDisbandPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::DGGuildLadderPacket*
Arena::CreateMaybeMessage< ::network::DGGuildLadderPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::DGGuildLadderPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::DGGuildWarPacket*
Arena::CreateMaybeMessage< ::network::DGGuildWarPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::DGGuildWarPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::DGGuildWarScorePacket*
Arena::CreateMaybeMessage< ::network::DGGuildWarScorePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::DGGuildWarScorePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::DGGuildSkillUsableChangePacket*
Arena::CreateMaybeMessage< ::network::DGGuildSkillUsableChangePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::DGGuildSkillUsableChangePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::DGGuildMoneyChangePacket*
Arena::CreateMaybeMessage< ::network::DGGuildMoneyChangePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::DGGuildMoneyChangePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::DGGuildMoneyWithdrawPacket*
Arena::CreateMaybeMessage< ::network::DGGuildMoneyWithdrawPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::DGGuildMoneyWithdrawPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::DGGuildWarReserveAddPacket*
Arena::CreateMaybeMessage< ::network::DGGuildWarReserveAddPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::DGGuildWarReserveAddPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::DGGuildWarReserveDeletePacket*
Arena::CreateMaybeMessage< ::network::DGGuildWarReserveDeletePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::DGGuildWarReserveDeletePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::DGGuildWarBetPacket*
Arena::CreateMaybeMessage< ::network::DGGuildWarBetPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::DGGuildWarBetPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::DGGuildChangeMasterPacket*
Arena::CreateMaybeMessage< ::network::DGGuildChangeMasterPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::DGGuildChangeMasterPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::DGGuildSafeboxPacket*
Arena::CreateMaybeMessage< ::network::DGGuildSafeboxPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::DGGuildSafeboxPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::DGPartyCreatePacket*
Arena::CreateMaybeMessage< ::network::DGPartyCreatePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::DGPartyCreatePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::DGPartyDeletePacket*
Arena::CreateMaybeMessage< ::network::DGPartyDeletePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::DGPartyDeletePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::DGPartyAddPacket*
Arena::CreateMaybeMessage< ::network::DGPartyAddPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::DGPartyAddPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::DGPartyRemovePacket*
Arena::CreateMaybeMessage< ::network::DGPartyRemovePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::DGPartyRemovePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::DGPartyStateChangePacket*
Arena::CreateMaybeMessage< ::network::DGPartyStateChangePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::DGPartyStateChangePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::DGPartySetMemberLevelPacket*
Arena::CreateMaybeMessage< ::network::DGPartySetMemberLevelPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::DGPartySetMemberLevelPacket >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
