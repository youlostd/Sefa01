// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gd_packets.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_gd_5fpackets_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_gd_5fpackets_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "protobuf_data.h"
#include "protobuf_data_item.h"
#include "protobuf_data_player.h"
#include "protobuf_data_pet.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_gd_5fpackets_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_gd_5fpackets_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gd_5fpackets_2eproto;
namespace network {
class GDAddAffectPacket;
struct GDAddAffectPacketDefaultTypeInternal;
extern GDAddAffectPacketDefaultTypeInternal _GDAddAffectPacket_default_instance_;
class GDAuthLoginPacket;
struct GDAuthLoginPacketDefaultTypeInternal;
extern GDAuthLoginPacketDefaultTypeInternal _GDAuthLoginPacket_default_instance_;
class GDBillingCheckPacket;
struct GDBillingCheckPacketDefaultTypeInternal;
extern GDBillingCheckPacketDefaultTypeInternal _GDBillingCheckPacket_default_instance_;
class GDBillingExpirePacket;
struct GDBillingExpirePacketDefaultTypeInternal;
extern GDBillingExpirePacketDefaultTypeInternal _GDBillingExpirePacket_default_instance_;
class GDBlockChatPacket;
struct GDBlockChatPacketDefaultTypeInternal;
extern GDBlockChatPacketDefaultTypeInternal _GDBlockChatPacket_default_instance_;
class GDBlockExceptionPacket;
struct GDBlockExceptionPacketDefaultTypeInternal;
extern GDBlockExceptionPacketDefaultTypeInternal _GDBlockExceptionPacket_default_instance_;
class GDBootPacket;
struct GDBootPacketDefaultTypeInternal;
extern GDBootPacketDefaultTypeInternal _GDBootPacket_default_instance_;
class GDChangeNamePacket;
struct GDChangeNamePacketDefaultTypeInternal;
extern GDChangeNamePacketDefaultTypeInternal _GDChangeNamePacket_default_instance_;
class GDChannelSwitchPacket;
struct GDChannelSwitchPacketDefaultTypeInternal;
extern GDChannelSwitchPacketDefaultTypeInternal _GDChannelSwitchPacket_default_instance_;
class GDCombatZoneSkillsCachePacket;
struct GDCombatZoneSkillsCachePacketDefaultTypeInternal;
extern GDCombatZoneSkillsCachePacketDefaultTypeInternal _GDCombatZoneSkillsCachePacket_default_instance_;
class GDCreateObjectPacket;
struct GDCreateObjectPacketDefaultTypeInternal;
extern GDCreateObjectPacketDefaultTypeInternal _GDCreateObjectPacket_default_instance_;
class GDDeleteAwardIDPacket;
struct GDDeleteAwardIDPacketDefaultTypeInternal;
extern GDDeleteAwardIDPacketDefaultTypeInternal _GDDeleteAwardIDPacket_default_instance_;
class GDDeleteObjectPacket;
struct GDDeleteObjectPacketDefaultTypeInternal;
extern GDDeleteObjectPacketDefaultTypeInternal _GDDeleteObjectPacket_default_instance_;
class GDDisconnectPacket;
struct GDDisconnectPacketDefaultTypeInternal;
extern GDDisconnectPacketDefaultTypeInternal _GDDisconnectPacket_default_instance_;
class GDEmpireSelectPacket;
struct GDEmpireSelectPacketDefaultTypeInternal;
extern GDEmpireSelectPacketDefaultTypeInternal _GDEmpireSelectPacket_default_instance_;
class GDEquipmentPageDeletePacket;
struct GDEquipmentPageDeletePacketDefaultTypeInternal;
extern GDEquipmentPageDeletePacketDefaultTypeInternal _GDEquipmentPageDeletePacket_default_instance_;
class GDEquipmentPageSavePacket;
struct GDEquipmentPageSavePacketDefaultTypeInternal;
extern GDEquipmentPageSavePacketDefaultTypeInternal _GDEquipmentPageSavePacket_default_instance_;
class GDFlushCachePacket;
struct GDFlushCachePacketDefaultTypeInternal;
extern GDFlushCachePacketDefaultTypeInternal _GDFlushCachePacket_default_instance_;
class GDForceItemDeletePacket;
struct GDForceItemDeletePacketDefaultTypeInternal;
extern GDForceItemDeletePacketDefaultTypeInternal _GDForceItemDeletePacket_default_instance_;
class GDGuildAddMemberPacket;
struct GDGuildAddMemberPacketDefaultTypeInternal;
extern GDGuildAddMemberPacketDefaultTypeInternal _GDGuildAddMemberPacket_default_instance_;
class GDGuildChangeGradePacket;
struct GDGuildChangeGradePacketDefaultTypeInternal;
extern GDGuildChangeGradePacketDefaultTypeInternal _GDGuildChangeGradePacket_default_instance_;
class GDGuildChangeLadderPointPacket;
struct GDGuildChangeLadderPointPacketDefaultTypeInternal;
extern GDGuildChangeLadderPointPacketDefaultTypeInternal _GDGuildChangeLadderPointPacket_default_instance_;
class GDGuildChangeMemberDataPacket;
struct GDGuildChangeMemberDataPacketDefaultTypeInternal;
extern GDGuildChangeMemberDataPacketDefaultTypeInternal _GDGuildChangeMemberDataPacket_default_instance_;
class GDGuildCreatePacket;
struct GDGuildCreatePacketDefaultTypeInternal;
extern GDGuildCreatePacketDefaultTypeInternal _GDGuildCreatePacket_default_instance_;
class GDGuildDepositMoneyPacket;
struct GDGuildDepositMoneyPacketDefaultTypeInternal;
extern GDGuildDepositMoneyPacketDefaultTypeInternal _GDGuildDepositMoneyPacket_default_instance_;
class GDGuildDisbandPacket;
struct GDGuildDisbandPacketDefaultTypeInternal;
extern GDGuildDisbandPacketDefaultTypeInternal _GDGuildDisbandPacket_default_instance_;
class GDGuildDungeonCDPacket;
struct GDGuildDungeonCDPacketDefaultTypeInternal;
extern GDGuildDungeonCDPacketDefaultTypeInternal _GDGuildDungeonCDPacket_default_instance_;
class GDGuildDungeonPacket;
struct GDGuildDungeonPacketDefaultTypeInternal;
extern GDGuildDungeonPacketDefaultTypeInternal _GDGuildDungeonPacket_default_instance_;
class GDGuildExpUpdatePacket;
struct GDGuildExpUpdatePacketDefaultTypeInternal;
extern GDGuildExpUpdatePacketDefaultTypeInternal _GDGuildExpUpdatePacket_default_instance_;
class GDGuildRemoveMemberPacket;
struct GDGuildRemoveMemberPacketDefaultTypeInternal;
extern GDGuildRemoveMemberPacketDefaultTypeInternal _GDGuildRemoveMemberPacket_default_instance_;
class GDGuildReqChangeMasterPacket;
struct GDGuildReqChangeMasterPacketDefaultTypeInternal;
extern GDGuildReqChangeMasterPacketDefaultTypeInternal _GDGuildReqChangeMasterPacket_default_instance_;
class GDGuildSafeboxAddPacket;
struct GDGuildSafeboxAddPacketDefaultTypeInternal;
extern GDGuildSafeboxAddPacketDefaultTypeInternal _GDGuildSafeboxAddPacket_default_instance_;
class GDGuildSafeboxCreatePacket;
struct GDGuildSafeboxCreatePacketDefaultTypeInternal;
extern GDGuildSafeboxCreatePacketDefaultTypeInternal _GDGuildSafeboxCreatePacket_default_instance_;
class GDGuildSafeboxGetGoldPacket;
struct GDGuildSafeboxGetGoldPacketDefaultTypeInternal;
extern GDGuildSafeboxGetGoldPacketDefaultTypeInternal _GDGuildSafeboxGetGoldPacket_default_instance_;
class GDGuildSafeboxGiveGoldPacket;
struct GDGuildSafeboxGiveGoldPacketDefaultTypeInternal;
extern GDGuildSafeboxGiveGoldPacketDefaultTypeInternal _GDGuildSafeboxGiveGoldPacket_default_instance_;
class GDGuildSafeboxLoadPacket;
struct GDGuildSafeboxLoadPacketDefaultTypeInternal;
extern GDGuildSafeboxLoadPacketDefaultTypeInternal _GDGuildSafeboxLoadPacket_default_instance_;
class GDGuildSafeboxMovePacket;
struct GDGuildSafeboxMovePacketDefaultTypeInternal;
extern GDGuildSafeboxMovePacketDefaultTypeInternal _GDGuildSafeboxMovePacket_default_instance_;
class GDGuildSafeboxSizePacket;
struct GDGuildSafeboxSizePacketDefaultTypeInternal;
extern GDGuildSafeboxSizePacketDefaultTypeInternal _GDGuildSafeboxSizePacket_default_instance_;
class GDGuildSafeboxTakePacket;
struct GDGuildSafeboxTakePacketDefaultTypeInternal;
extern GDGuildSafeboxTakePacketDefaultTypeInternal _GDGuildSafeboxTakePacket_default_instance_;
class GDGuildSkillUpdatePacket;
struct GDGuildSkillUpdatePacketDefaultTypeInternal;
extern GDGuildSkillUpdatePacketDefaultTypeInternal _GDGuildSkillUpdatePacket_default_instance_;
class GDGuildUseSkillPacket;
struct GDGuildUseSkillPacketDefaultTypeInternal;
extern GDGuildUseSkillPacketDefaultTypeInternal _GDGuildUseSkillPacket_default_instance_;
class GDGuildWarBetPacket;
struct GDGuildWarBetPacketDefaultTypeInternal;
extern GDGuildWarBetPacketDefaultTypeInternal _GDGuildWarBetPacket_default_instance_;
class GDGuildWarPacket;
struct GDGuildWarPacketDefaultTypeInternal;
extern GDGuildWarPacketDefaultTypeInternal _GDGuildWarPacket_default_instance_;
class GDGuildWarScorePacket;
struct GDGuildWarScorePacketDefaultTypeInternal;
extern GDGuildWarScorePacketDefaultTypeInternal _GDGuildWarScorePacket_default_instance_;
class GDGuildWithdrawMoneyGiveReplyPacket;
struct GDGuildWithdrawMoneyGiveReplyPacketDefaultTypeInternal;
extern GDGuildWithdrawMoneyGiveReplyPacketDefaultTypeInternal _GDGuildWithdrawMoneyGiveReplyPacket_default_instance_;
class GDGuildWithdrawMoneyPacket;
struct GDGuildWithdrawMoneyPacketDefaultTypeInternal;
extern GDGuildWithdrawMoneyPacketDefaultTypeInternal _GDGuildWithdrawMoneyPacket_default_instance_;
class GDHighscoreRegisterPacket;
struct GDHighscoreRegisterPacketDefaultTypeInternal;
extern GDHighscoreRegisterPacketDefaultTypeInternal _GDHighscoreRegisterPacket_default_instance_;
class GDItemDestroyLogPacket;
struct GDItemDestroyLogPacketDefaultTypeInternal;
extern GDItemDestroyLogPacketDefaultTypeInternal _GDItemDestroyLogPacket_default_instance_;
class GDItemDestroyPacket;
struct GDItemDestroyPacketDefaultTypeInternal;
extern GDItemDestroyPacketDefaultTypeInternal _GDItemDestroyPacket_default_instance_;
class GDItemFlushPacket;
struct GDItemFlushPacketDefaultTypeInternal;
extern GDItemFlushPacketDefaultTypeInternal _GDItemFlushPacket_default_instance_;
class GDItemSavePacket;
struct GDItemSavePacketDefaultTypeInternal;
extern GDItemSavePacketDefaultTypeInternal _GDItemSavePacket_default_instance_;
class GDItemTimedIgnorePacket;
struct GDItemTimedIgnorePacketDefaultTypeInternal;
extern GDItemTimedIgnorePacketDefaultTypeInternal _GDItemTimedIgnorePacket_default_instance_;
class GDLoadItemRefundPacket;
struct GDLoadItemRefundPacketDefaultTypeInternal;
extern GDLoadItemRefundPacketDefaultTypeInternal _GDLoadItemRefundPacket_default_instance_;
class GDLoginByKeyPacket;
struct GDLoginByKeyPacketDefaultTypeInternal;
extern GDLoginByKeyPacketDefaultTypeInternal _GDLoginByKeyPacket_default_instance_;
class GDLogoutPacket;
struct GDLogoutPacketDefaultTypeInternal;
extern GDLogoutPacketDefaultTypeInternal _GDLogoutPacket_default_instance_;
class GDMarriageAddPacket;
struct GDMarriageAddPacketDefaultTypeInternal;
extern GDMarriageAddPacketDefaultTypeInternal _GDMarriageAddPacket_default_instance_;
class GDMarriageBreakPacket;
struct GDMarriageBreakPacketDefaultTypeInternal;
extern GDMarriageBreakPacketDefaultTypeInternal _GDMarriageBreakPacket_default_instance_;
class GDMarriageRemovePacket;
struct GDMarriageRemovePacketDefaultTypeInternal;
extern GDMarriageRemovePacketDefaultTypeInternal _GDMarriageRemovePacket_default_instance_;
class GDMarriageUpdatePacket;
struct GDMarriageUpdatePacketDefaultTypeInternal;
extern GDMarriageUpdatePacketDefaultTypeInternal _GDMarriageUpdatePacket_default_instance_;
class GDMoneyLogPacket;
struct GDMoneyLogPacketDefaultTypeInternal;
extern GDMoneyLogPacketDefaultTypeInternal _GDMoneyLogPacket_default_instance_;
class GDMyShopPricelistRequestPacket;
struct GDMyShopPricelistRequestPacketDefaultTypeInternal;
extern GDMyShopPricelistRequestPacketDefaultTypeInternal _GDMyShopPricelistRequestPacket_default_instance_;
class GDMyShopPricelistUpdatePacket;
struct GDMyShopPricelistUpdatePacketDefaultTypeInternal;
extern GDMyShopPricelistUpdatePacketDefaultTypeInternal _GDMyShopPricelistUpdatePacket_default_instance_;
class GDPartyAddPacket;
struct GDPartyAddPacketDefaultTypeInternal;
extern GDPartyAddPacketDefaultTypeInternal _GDPartyAddPacket_default_instance_;
class GDPartyCreatePacket;
struct GDPartyCreatePacketDefaultTypeInternal;
extern GDPartyCreatePacketDefaultTypeInternal _GDPartyCreatePacket_default_instance_;
class GDPartyDeletePacket;
struct GDPartyDeletePacketDefaultTypeInternal;
extern GDPartyDeletePacketDefaultTypeInternal _GDPartyDeletePacket_default_instance_;
class GDPartyRemovePacket;
struct GDPartyRemovePacketDefaultTypeInternal;
extern GDPartyRemovePacketDefaultTypeInternal _GDPartyRemovePacket_default_instance_;
class GDPartySetMemberLevelPacket;
struct GDPartySetMemberLevelPacketDefaultTypeInternal;
extern GDPartySetMemberLevelPacketDefaultTypeInternal _GDPartySetMemberLevelPacket_default_instance_;
class GDPartyStateChangePacket;
struct GDPartyStateChangePacketDefaultTypeInternal;
extern GDPartyStateChangePacketDefaultTypeInternal _GDPartyStateChangePacket_default_instance_;
class GDPetSavePacket;
struct GDPetSavePacketDefaultTypeInternal;
extern GDPetSavePacketDefaultTypeInternal _GDPetSavePacket_default_instance_;
class GDPlayerCountPacket;
struct GDPlayerCountPacketDefaultTypeInternal;
extern GDPlayerCountPacketDefaultTypeInternal _GDPlayerCountPacket_default_instance_;
class GDPlayerCreatePacket;
struct GDPlayerCreatePacketDefaultTypeInternal;
extern GDPlayerCreatePacketDefaultTypeInternal _GDPlayerCreatePacket_default_instance_;
class GDPlayerDeletePacket;
struct GDPlayerDeletePacketDefaultTypeInternal;
extern GDPlayerDeletePacketDefaultTypeInternal _GDPlayerDeletePacket_default_instance_;
class GDPlayerLoadPacket;
struct GDPlayerLoadPacketDefaultTypeInternal;
extern GDPlayerLoadPacketDefaultTypeInternal _GDPlayerLoadPacket_default_instance_;
class GDPlayerRuneSavePacket;
struct GDPlayerRuneSavePacketDefaultTypeInternal;
extern GDPlayerRuneSavePacketDefaultTypeInternal _GDPlayerRuneSavePacket_default_instance_;
class GDPlayerSavePacket;
struct GDPlayerSavePacketDefaultTypeInternal;
extern GDPlayerSavePacketDefaultTypeInternal _GDPlayerSavePacket_default_instance_;
class GDQuestSavePacket;
struct GDQuestSavePacketDefaultTypeInternal;
extern GDQuestSavePacketDefaultTypeInternal _GDQuestSavePacket_default_instance_;
class GDRecvShutdownPacket;
struct GDRecvShutdownPacketDefaultTypeInternal;
extern GDRecvShutdownPacketDefaultTypeInternal _GDRecvShutdownPacket_default_instance_;
class GDReloadAdminPacket;
struct GDReloadAdminPacketDefaultTypeInternal;
extern GDReloadAdminPacketDefaultTypeInternal _GDReloadAdminPacket_default_instance_;
class GDRemoveAffectPacket;
struct GDRemoveAffectPacketDefaultTypeInternal;
extern GDRemoveAffectPacketDefaultTypeInternal _GDRemoveAffectPacket_default_instance_;
class GDReqHorseNamePacket;
struct GDReqHorseNamePacketDefaultTypeInternal;
extern GDReqHorseNamePacketDefaultTypeInternal _GDReqHorseNamePacket_default_instance_;
class GDRequestCharacterPrivPacket;
struct GDRequestCharacterPrivPacketDefaultTypeInternal;
extern GDRequestCharacterPrivPacketDefaultTypeInternal _GDRequestCharacterPrivPacket_default_instance_;
class GDRequestChargeCashPacket;
struct GDRequestChargeCashPacketDefaultTypeInternal;
extern GDRequestChargeCashPacketDefaultTypeInternal _GDRequestChargeCashPacket_default_instance_;
class GDRequestEmpirePrivPacket;
struct GDRequestEmpirePrivPacketDefaultTypeInternal;
extern GDRequestEmpirePrivPacketDefaultTypeInternal _GDRequestEmpirePrivPacket_default_instance_;
class GDRequestGuildPrivPacket;
struct GDRequestGuildPrivPacketDefaultTypeInternal;
extern GDRequestGuildPrivPacketDefaultTypeInternal _GDRequestGuildPrivPacket_default_instance_;
class GDSMSPacket;
struct GDSMSPacketDefaultTypeInternal;
extern GDSMSPacketDefaultTypeInternal _GDSMSPacket_default_instance_;
class GDSafeboxChangePasswordPacket;
struct GDSafeboxChangePasswordPacketDefaultTypeInternal;
extern GDSafeboxChangePasswordPacketDefaultTypeInternal _GDSafeboxChangePasswordPacket_default_instance_;
class GDSafeboxChangeSizePacket;
struct GDSafeboxChangeSizePacketDefaultTypeInternal;
extern GDSafeboxChangeSizePacketDefaultTypeInternal _GDSafeboxChangeSizePacket_default_instance_;
class GDSafeboxLoadPacket;
struct GDSafeboxLoadPacketDefaultTypeInternal;
extern GDSafeboxLoadPacketDefaultTypeInternal _GDSafeboxLoadPacket_default_instance_;
class GDSafeboxSavePacket;
struct GDSafeboxSavePacketDefaultTypeInternal;
extern GDSafeboxSavePacketDefaultTypeInternal _GDSafeboxSavePacket_default_instance_;
class GDSelectUpdateHairPacket;
struct GDSelectUpdateHairPacketDefaultTypeInternal;
extern GDSelectUpdateHairPacketDefaultTypeInternal _GDSelectUpdateHairPacket_default_instance_;
class GDSetEventFlagPacket;
struct GDSetEventFlagPacketDefaultTypeInternal;
extern GDSetEventFlagPacketDefaultTypeInternal _GDSetEventFlagPacket_default_instance_;
class GDSetupPacket;
struct GDSetupPacketDefaultTypeInternal;
extern GDSetupPacketDefaultTypeInternal _GDSetupPacket_default_instance_;
class GDSkillColorSavePacket;
struct GDSkillColorSavePacketDefaultTypeInternal;
extern GDSkillColorSavePacketDefaultTypeInternal _GDSkillColorSavePacket_default_instance_;
class GDSpawnMobTimedPacket;
struct GDSpawnMobTimedPacketDefaultTypeInternal;
extern GDSpawnMobTimedPacketDefaultTypeInternal _GDSpawnMobTimedPacket_default_instance_;
class GDUpdateChannelStatusPacket;
struct GDUpdateChannelStatusPacketDefaultTypeInternal;
extern GDUpdateChannelStatusPacketDefaultTypeInternal _GDUpdateChannelStatusPacket_default_instance_;
class GDUpdateHorseNamePacket;
struct GDUpdateHorseNamePacketDefaultTypeInternal;
extern GDUpdateHorseNamePacketDefaultTypeInternal _GDUpdateHorseNamePacket_default_instance_;
class GDUpdateLandPacket;
struct GDUpdateLandPacketDefaultTypeInternal;
extern GDUpdateLandPacketDefaultTypeInternal _GDUpdateLandPacket_default_instance_;
class GDVCardPacket;
struct GDVCardPacketDefaultTypeInternal;
extern GDVCardPacketDefaultTypeInternal _GDVCardPacket_default_instance_;
class GDValidLogoutPacket;
struct GDValidLogoutPacketDefaultTypeInternal;
extern GDValidLogoutPacketDefaultTypeInternal _GDValidLogoutPacket_default_instance_;
class GDWeddingEndPacket;
struct GDWeddingEndPacketDefaultTypeInternal;
extern GDWeddingEndPacketDefaultTypeInternal _GDWeddingEndPacket_default_instance_;
class GDWeddingReadyPacket;
struct GDWeddingReadyPacketDefaultTypeInternal;
extern GDWeddingReadyPacketDefaultTypeInternal _GDWeddingReadyPacket_default_instance_;
class GDWeddingRequestPacket;
struct GDWeddingRequestPacketDefaultTypeInternal;
extern GDWeddingRequestPacketDefaultTypeInternal _GDWeddingRequestPacket_default_instance_;
class GDWhisperPlayerExistCheckPacket;
struct GDWhisperPlayerExistCheckPacketDefaultTypeInternal;
extern GDWhisperPlayerExistCheckPacketDefaultTypeInternal _GDWhisperPlayerExistCheckPacket_default_instance_;
class GDWhisperPlayerMessageOfflinePacket;
struct GDWhisperPlayerMessageOfflinePacketDefaultTypeInternal;
extern GDWhisperPlayerMessageOfflinePacketDefaultTypeInternal _GDWhisperPlayerMessageOfflinePacket_default_instance_;
}  // namespace network
PROTOBUF_NAMESPACE_OPEN
template<> ::network::GDAddAffectPacket* Arena::CreateMaybeMessage<::network::GDAddAffectPacket>(Arena*);
template<> ::network::GDAuthLoginPacket* Arena::CreateMaybeMessage<::network::GDAuthLoginPacket>(Arena*);
template<> ::network::GDBillingCheckPacket* Arena::CreateMaybeMessage<::network::GDBillingCheckPacket>(Arena*);
template<> ::network::GDBillingExpirePacket* Arena::CreateMaybeMessage<::network::GDBillingExpirePacket>(Arena*);
template<> ::network::GDBlockChatPacket* Arena::CreateMaybeMessage<::network::GDBlockChatPacket>(Arena*);
template<> ::network::GDBlockExceptionPacket* Arena::CreateMaybeMessage<::network::GDBlockExceptionPacket>(Arena*);
template<> ::network::GDBootPacket* Arena::CreateMaybeMessage<::network::GDBootPacket>(Arena*);
template<> ::network::GDChangeNamePacket* Arena::CreateMaybeMessage<::network::GDChangeNamePacket>(Arena*);
template<> ::network::GDChannelSwitchPacket* Arena::CreateMaybeMessage<::network::GDChannelSwitchPacket>(Arena*);
template<> ::network::GDCombatZoneSkillsCachePacket* Arena::CreateMaybeMessage<::network::GDCombatZoneSkillsCachePacket>(Arena*);
template<> ::network::GDCreateObjectPacket* Arena::CreateMaybeMessage<::network::GDCreateObjectPacket>(Arena*);
template<> ::network::GDDeleteAwardIDPacket* Arena::CreateMaybeMessage<::network::GDDeleteAwardIDPacket>(Arena*);
template<> ::network::GDDeleteObjectPacket* Arena::CreateMaybeMessage<::network::GDDeleteObjectPacket>(Arena*);
template<> ::network::GDDisconnectPacket* Arena::CreateMaybeMessage<::network::GDDisconnectPacket>(Arena*);
template<> ::network::GDEmpireSelectPacket* Arena::CreateMaybeMessage<::network::GDEmpireSelectPacket>(Arena*);
template<> ::network::GDEquipmentPageDeletePacket* Arena::CreateMaybeMessage<::network::GDEquipmentPageDeletePacket>(Arena*);
template<> ::network::GDEquipmentPageSavePacket* Arena::CreateMaybeMessage<::network::GDEquipmentPageSavePacket>(Arena*);
template<> ::network::GDFlushCachePacket* Arena::CreateMaybeMessage<::network::GDFlushCachePacket>(Arena*);
template<> ::network::GDForceItemDeletePacket* Arena::CreateMaybeMessage<::network::GDForceItemDeletePacket>(Arena*);
template<> ::network::GDGuildAddMemberPacket* Arena::CreateMaybeMessage<::network::GDGuildAddMemberPacket>(Arena*);
template<> ::network::GDGuildChangeGradePacket* Arena::CreateMaybeMessage<::network::GDGuildChangeGradePacket>(Arena*);
template<> ::network::GDGuildChangeLadderPointPacket* Arena::CreateMaybeMessage<::network::GDGuildChangeLadderPointPacket>(Arena*);
template<> ::network::GDGuildChangeMemberDataPacket* Arena::CreateMaybeMessage<::network::GDGuildChangeMemberDataPacket>(Arena*);
template<> ::network::GDGuildCreatePacket* Arena::CreateMaybeMessage<::network::GDGuildCreatePacket>(Arena*);
template<> ::network::GDGuildDepositMoneyPacket* Arena::CreateMaybeMessage<::network::GDGuildDepositMoneyPacket>(Arena*);
template<> ::network::GDGuildDisbandPacket* Arena::CreateMaybeMessage<::network::GDGuildDisbandPacket>(Arena*);
template<> ::network::GDGuildDungeonCDPacket* Arena::CreateMaybeMessage<::network::GDGuildDungeonCDPacket>(Arena*);
template<> ::network::GDGuildDungeonPacket* Arena::CreateMaybeMessage<::network::GDGuildDungeonPacket>(Arena*);
template<> ::network::GDGuildExpUpdatePacket* Arena::CreateMaybeMessage<::network::GDGuildExpUpdatePacket>(Arena*);
template<> ::network::GDGuildRemoveMemberPacket* Arena::CreateMaybeMessage<::network::GDGuildRemoveMemberPacket>(Arena*);
template<> ::network::GDGuildReqChangeMasterPacket* Arena::CreateMaybeMessage<::network::GDGuildReqChangeMasterPacket>(Arena*);
template<> ::network::GDGuildSafeboxAddPacket* Arena::CreateMaybeMessage<::network::GDGuildSafeboxAddPacket>(Arena*);
template<> ::network::GDGuildSafeboxCreatePacket* Arena::CreateMaybeMessage<::network::GDGuildSafeboxCreatePacket>(Arena*);
template<> ::network::GDGuildSafeboxGetGoldPacket* Arena::CreateMaybeMessage<::network::GDGuildSafeboxGetGoldPacket>(Arena*);
template<> ::network::GDGuildSafeboxGiveGoldPacket* Arena::CreateMaybeMessage<::network::GDGuildSafeboxGiveGoldPacket>(Arena*);
template<> ::network::GDGuildSafeboxLoadPacket* Arena::CreateMaybeMessage<::network::GDGuildSafeboxLoadPacket>(Arena*);
template<> ::network::GDGuildSafeboxMovePacket* Arena::CreateMaybeMessage<::network::GDGuildSafeboxMovePacket>(Arena*);
template<> ::network::GDGuildSafeboxSizePacket* Arena::CreateMaybeMessage<::network::GDGuildSafeboxSizePacket>(Arena*);
template<> ::network::GDGuildSafeboxTakePacket* Arena::CreateMaybeMessage<::network::GDGuildSafeboxTakePacket>(Arena*);
template<> ::network::GDGuildSkillUpdatePacket* Arena::CreateMaybeMessage<::network::GDGuildSkillUpdatePacket>(Arena*);
template<> ::network::GDGuildUseSkillPacket* Arena::CreateMaybeMessage<::network::GDGuildUseSkillPacket>(Arena*);
template<> ::network::GDGuildWarBetPacket* Arena::CreateMaybeMessage<::network::GDGuildWarBetPacket>(Arena*);
template<> ::network::GDGuildWarPacket* Arena::CreateMaybeMessage<::network::GDGuildWarPacket>(Arena*);
template<> ::network::GDGuildWarScorePacket* Arena::CreateMaybeMessage<::network::GDGuildWarScorePacket>(Arena*);
template<> ::network::GDGuildWithdrawMoneyGiveReplyPacket* Arena::CreateMaybeMessage<::network::GDGuildWithdrawMoneyGiveReplyPacket>(Arena*);
template<> ::network::GDGuildWithdrawMoneyPacket* Arena::CreateMaybeMessage<::network::GDGuildWithdrawMoneyPacket>(Arena*);
template<> ::network::GDHighscoreRegisterPacket* Arena::CreateMaybeMessage<::network::GDHighscoreRegisterPacket>(Arena*);
template<> ::network::GDItemDestroyLogPacket* Arena::CreateMaybeMessage<::network::GDItemDestroyLogPacket>(Arena*);
template<> ::network::GDItemDestroyPacket* Arena::CreateMaybeMessage<::network::GDItemDestroyPacket>(Arena*);
template<> ::network::GDItemFlushPacket* Arena::CreateMaybeMessage<::network::GDItemFlushPacket>(Arena*);
template<> ::network::GDItemSavePacket* Arena::CreateMaybeMessage<::network::GDItemSavePacket>(Arena*);
template<> ::network::GDItemTimedIgnorePacket* Arena::CreateMaybeMessage<::network::GDItemTimedIgnorePacket>(Arena*);
template<> ::network::GDLoadItemRefundPacket* Arena::CreateMaybeMessage<::network::GDLoadItemRefundPacket>(Arena*);
template<> ::network::GDLoginByKeyPacket* Arena::CreateMaybeMessage<::network::GDLoginByKeyPacket>(Arena*);
template<> ::network::GDLogoutPacket* Arena::CreateMaybeMessage<::network::GDLogoutPacket>(Arena*);
template<> ::network::GDMarriageAddPacket* Arena::CreateMaybeMessage<::network::GDMarriageAddPacket>(Arena*);
template<> ::network::GDMarriageBreakPacket* Arena::CreateMaybeMessage<::network::GDMarriageBreakPacket>(Arena*);
template<> ::network::GDMarriageRemovePacket* Arena::CreateMaybeMessage<::network::GDMarriageRemovePacket>(Arena*);
template<> ::network::GDMarriageUpdatePacket* Arena::CreateMaybeMessage<::network::GDMarriageUpdatePacket>(Arena*);
template<> ::network::GDMoneyLogPacket* Arena::CreateMaybeMessage<::network::GDMoneyLogPacket>(Arena*);
template<> ::network::GDMyShopPricelistRequestPacket* Arena::CreateMaybeMessage<::network::GDMyShopPricelistRequestPacket>(Arena*);
template<> ::network::GDMyShopPricelistUpdatePacket* Arena::CreateMaybeMessage<::network::GDMyShopPricelistUpdatePacket>(Arena*);
template<> ::network::GDPartyAddPacket* Arena::CreateMaybeMessage<::network::GDPartyAddPacket>(Arena*);
template<> ::network::GDPartyCreatePacket* Arena::CreateMaybeMessage<::network::GDPartyCreatePacket>(Arena*);
template<> ::network::GDPartyDeletePacket* Arena::CreateMaybeMessage<::network::GDPartyDeletePacket>(Arena*);
template<> ::network::GDPartyRemovePacket* Arena::CreateMaybeMessage<::network::GDPartyRemovePacket>(Arena*);
template<> ::network::GDPartySetMemberLevelPacket* Arena::CreateMaybeMessage<::network::GDPartySetMemberLevelPacket>(Arena*);
template<> ::network::GDPartyStateChangePacket* Arena::CreateMaybeMessage<::network::GDPartyStateChangePacket>(Arena*);
template<> ::network::GDPetSavePacket* Arena::CreateMaybeMessage<::network::GDPetSavePacket>(Arena*);
template<> ::network::GDPlayerCountPacket* Arena::CreateMaybeMessage<::network::GDPlayerCountPacket>(Arena*);
template<> ::network::GDPlayerCreatePacket* Arena::CreateMaybeMessage<::network::GDPlayerCreatePacket>(Arena*);
template<> ::network::GDPlayerDeletePacket* Arena::CreateMaybeMessage<::network::GDPlayerDeletePacket>(Arena*);
template<> ::network::GDPlayerLoadPacket* Arena::CreateMaybeMessage<::network::GDPlayerLoadPacket>(Arena*);
template<> ::network::GDPlayerRuneSavePacket* Arena::CreateMaybeMessage<::network::GDPlayerRuneSavePacket>(Arena*);
template<> ::network::GDPlayerSavePacket* Arena::CreateMaybeMessage<::network::GDPlayerSavePacket>(Arena*);
template<> ::network::GDQuestSavePacket* Arena::CreateMaybeMessage<::network::GDQuestSavePacket>(Arena*);
template<> ::network::GDRecvShutdownPacket* Arena::CreateMaybeMessage<::network::GDRecvShutdownPacket>(Arena*);
template<> ::network::GDReloadAdminPacket* Arena::CreateMaybeMessage<::network::GDReloadAdminPacket>(Arena*);
template<> ::network::GDRemoveAffectPacket* Arena::CreateMaybeMessage<::network::GDRemoveAffectPacket>(Arena*);
template<> ::network::GDReqHorseNamePacket* Arena::CreateMaybeMessage<::network::GDReqHorseNamePacket>(Arena*);
template<> ::network::GDRequestCharacterPrivPacket* Arena::CreateMaybeMessage<::network::GDRequestCharacterPrivPacket>(Arena*);
template<> ::network::GDRequestChargeCashPacket* Arena::CreateMaybeMessage<::network::GDRequestChargeCashPacket>(Arena*);
template<> ::network::GDRequestEmpirePrivPacket* Arena::CreateMaybeMessage<::network::GDRequestEmpirePrivPacket>(Arena*);
template<> ::network::GDRequestGuildPrivPacket* Arena::CreateMaybeMessage<::network::GDRequestGuildPrivPacket>(Arena*);
template<> ::network::GDSMSPacket* Arena::CreateMaybeMessage<::network::GDSMSPacket>(Arena*);
template<> ::network::GDSafeboxChangePasswordPacket* Arena::CreateMaybeMessage<::network::GDSafeboxChangePasswordPacket>(Arena*);
template<> ::network::GDSafeboxChangeSizePacket* Arena::CreateMaybeMessage<::network::GDSafeboxChangeSizePacket>(Arena*);
template<> ::network::GDSafeboxLoadPacket* Arena::CreateMaybeMessage<::network::GDSafeboxLoadPacket>(Arena*);
template<> ::network::GDSafeboxSavePacket* Arena::CreateMaybeMessage<::network::GDSafeboxSavePacket>(Arena*);
template<> ::network::GDSelectUpdateHairPacket* Arena::CreateMaybeMessage<::network::GDSelectUpdateHairPacket>(Arena*);
template<> ::network::GDSetEventFlagPacket* Arena::CreateMaybeMessage<::network::GDSetEventFlagPacket>(Arena*);
template<> ::network::GDSetupPacket* Arena::CreateMaybeMessage<::network::GDSetupPacket>(Arena*);
template<> ::network::GDSkillColorSavePacket* Arena::CreateMaybeMessage<::network::GDSkillColorSavePacket>(Arena*);
template<> ::network::GDSpawnMobTimedPacket* Arena::CreateMaybeMessage<::network::GDSpawnMobTimedPacket>(Arena*);
template<> ::network::GDUpdateChannelStatusPacket* Arena::CreateMaybeMessage<::network::GDUpdateChannelStatusPacket>(Arena*);
template<> ::network::GDUpdateHorseNamePacket* Arena::CreateMaybeMessage<::network::GDUpdateHorseNamePacket>(Arena*);
template<> ::network::GDUpdateLandPacket* Arena::CreateMaybeMessage<::network::GDUpdateLandPacket>(Arena*);
template<> ::network::GDVCardPacket* Arena::CreateMaybeMessage<::network::GDVCardPacket>(Arena*);
template<> ::network::GDValidLogoutPacket* Arena::CreateMaybeMessage<::network::GDValidLogoutPacket>(Arena*);
template<> ::network::GDWeddingEndPacket* Arena::CreateMaybeMessage<::network::GDWeddingEndPacket>(Arena*);
template<> ::network::GDWeddingReadyPacket* Arena::CreateMaybeMessage<::network::GDWeddingReadyPacket>(Arena*);
template<> ::network::GDWeddingRequestPacket* Arena::CreateMaybeMessage<::network::GDWeddingRequestPacket>(Arena*);
template<> ::network::GDWhisperPlayerExistCheckPacket* Arena::CreateMaybeMessage<::network::GDWhisperPlayerExistCheckPacket>(Arena*);
template<> ::network::GDWhisperPlayerMessageOfflinePacket* Arena::CreateMaybeMessage<::network::GDWhisperPlayerMessageOfflinePacket>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace network {

// ===================================================================

class GDBootPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GDBootPacket) */ {
 public:
  inline GDBootPacket() : GDBootPacket(nullptr) {}
  ~GDBootPacket() override;
  explicit PROTOBUF_CONSTEXPR GDBootPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GDBootPacket(const GDBootPacket& from);
  GDBootPacket(GDBootPacket&& from) noexcept
    : GDBootPacket() {
    *this = ::std::move(from);
  }

  inline GDBootPacket& operator=(const GDBootPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GDBootPacket& operator=(GDBootPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GDBootPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GDBootPacket* internal_default_instance() {
    return reinterpret_cast<const GDBootPacket*>(
               &_GDBootPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GDBootPacket& a, GDBootPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GDBootPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GDBootPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GDBootPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GDBootPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GDBootPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GDBootPacket& from) {
    GDBootPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GDBootPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GDBootPacket";
  }
  protected:
  explicit GDBootPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber = 3,
    kItemRangeStartFieldNumber = 1,
    kItemRangeEndFieldNumber = 2,
    kChannelFieldNumber = 4,
  };
  // bytes ip = 3;
  void clear_ip();
  const std::string& ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ip();
  PROTOBUF_NODISCARD std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // uint32 item_range_start = 1;
  void clear_item_range_start();
  uint32_t item_range_start() const;
  void set_item_range_start(uint32_t value);
  private:
  uint32_t _internal_item_range_start() const;
  void _internal_set_item_range_start(uint32_t value);
  public:

  // uint32 item_range_end = 2;
  void clear_item_range_end();
  uint32_t item_range_end() const;
  void set_item_range_end(uint32_t value);
  private:
  uint32_t _internal_item_range_end() const;
  void _internal_set_item_range_end(uint32_t value);
  public:

  // uint32 channel = 4;
  void clear_channel();
  uint32_t channel() const;
  void set_channel(uint32_t value);
  private:
  uint32_t _internal_channel() const;
  void _internal_set_channel(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GDBootPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
    uint32_t item_range_start_;
    uint32_t item_range_end_;
    uint32_t channel_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gd_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GDSetupPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GDSetupPacket) */ {
 public:
  inline GDSetupPacket() : GDSetupPacket(nullptr) {}
  ~GDSetupPacket() override;
  explicit PROTOBUF_CONSTEXPR GDSetupPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GDSetupPacket(const GDSetupPacket& from);
  GDSetupPacket(GDSetupPacket&& from) noexcept
    : GDSetupPacket() {
    *this = ::std::move(from);
  }

  inline GDSetupPacket& operator=(const GDSetupPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GDSetupPacket& operator=(GDSetupPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GDSetupPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GDSetupPacket* internal_default_instance() {
    return reinterpret_cast<const GDSetupPacket*>(
               &_GDSetupPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GDSetupPacket& a, GDSetupPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GDSetupPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GDSetupPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GDSetupPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GDSetupPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GDSetupPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GDSetupPacket& from) {
    GDSetupPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GDSetupPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GDSetupPacket";
  }
  protected:
  explicit GDSetupPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMapsFieldNumber = 5,
    kLoginsFieldNumber = 6,
    kPublicIpFieldNumber = 1,
    kChannelFieldNumber = 2,
    kListenPortFieldNumber = 3,
    kP2PPortFieldNumber = 4,
    kAuthServerFieldNumber = 7,
    kProcessorCoreFieldNumber = 8,
  };
  // repeated uint32 maps = 5;
  int maps_size() const;
  private:
  int _internal_maps_size() const;
  public:
  void clear_maps();
  private:
  uint32_t _internal_maps(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_maps() const;
  void _internal_add_maps(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_maps();
  public:
  uint32_t maps(int index) const;
  void set_maps(int index, uint32_t value);
  void add_maps(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      maps() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_maps();

  // repeated .network.TPacketLoginOnSetup logins = 6;
  int logins_size() const;
  private:
  int _internal_logins_size() const;
  public:
  void clear_logins();
  ::network::TPacketLoginOnSetup* mutable_logins(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TPacketLoginOnSetup >*
      mutable_logins();
  private:
  const ::network::TPacketLoginOnSetup& _internal_logins(int index) const;
  ::network::TPacketLoginOnSetup* _internal_add_logins();
  public:
  const ::network::TPacketLoginOnSetup& logins(int index) const;
  ::network::TPacketLoginOnSetup* add_logins();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TPacketLoginOnSetup >&
      logins() const;

  // bytes public_ip = 1;
  void clear_public_ip();
  const std::string& public_ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_public_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_public_ip();
  PROTOBUF_NODISCARD std::string* release_public_ip();
  void set_allocated_public_ip(std::string* public_ip);
  private:
  const std::string& _internal_public_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_public_ip(const std::string& value);
  std::string* _internal_mutable_public_ip();
  public:

  // uint32 channel = 2;
  void clear_channel();
  uint32_t channel() const;
  void set_channel(uint32_t value);
  private:
  uint32_t _internal_channel() const;
  void _internal_set_channel(uint32_t value);
  public:

  // uint32 listen_port = 3;
  void clear_listen_port();
  uint32_t listen_port() const;
  void set_listen_port(uint32_t value);
  private:
  uint32_t _internal_listen_port() const;
  void _internal_set_listen_port(uint32_t value);
  public:

  // uint32 p2p_port = 4;
  void clear_p2p_port();
  uint32_t p2p_port() const;
  void set_p2p_port(uint32_t value);
  private:
  uint32_t _internal_p2p_port() const;
  void _internal_set_p2p_port(uint32_t value);
  public:

  // bool auth_server = 7;
  void clear_auth_server();
  bool auth_server() const;
  void set_auth_server(bool value);
  private:
  bool _internal_auth_server() const;
  void _internal_set_auth_server(bool value);
  public:

  // bool processor_core = 8;
  void clear_processor_core();
  bool processor_core() const;
  void set_processor_core(bool value);
  private:
  bool _internal_processor_core() const;
  void _internal_set_processor_core(bool value);
  public:

  // @@protoc_insertion_point(class_scope:network.GDSetupPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > maps_;
    mutable std::atomic<int> _maps_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TPacketLoginOnSetup > logins_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr public_ip_;
    uint32_t channel_;
    uint32_t listen_port_;
    uint32_t p2p_port_;
    bool auth_server_;
    bool processor_core_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gd_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GDUpdateChannelStatusPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GDUpdateChannelStatusPacket) */ {
 public:
  inline GDUpdateChannelStatusPacket() : GDUpdateChannelStatusPacket(nullptr) {}
  ~GDUpdateChannelStatusPacket() override;
  explicit PROTOBUF_CONSTEXPR GDUpdateChannelStatusPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GDUpdateChannelStatusPacket(const GDUpdateChannelStatusPacket& from);
  GDUpdateChannelStatusPacket(GDUpdateChannelStatusPacket&& from) noexcept
    : GDUpdateChannelStatusPacket() {
    *this = ::std::move(from);
  }

  inline GDUpdateChannelStatusPacket& operator=(const GDUpdateChannelStatusPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GDUpdateChannelStatusPacket& operator=(GDUpdateChannelStatusPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GDUpdateChannelStatusPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GDUpdateChannelStatusPacket* internal_default_instance() {
    return reinterpret_cast<const GDUpdateChannelStatusPacket*>(
               &_GDUpdateChannelStatusPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GDUpdateChannelStatusPacket& a, GDUpdateChannelStatusPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GDUpdateChannelStatusPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GDUpdateChannelStatusPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GDUpdateChannelStatusPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GDUpdateChannelStatusPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GDUpdateChannelStatusPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GDUpdateChannelStatusPacket& from) {
    GDUpdateChannelStatusPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GDUpdateChannelStatusPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GDUpdateChannelStatusPacket";
  }
  protected:
  explicit GDUpdateChannelStatusPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPortFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // uint32 port = 1;
  void clear_port();
  uint32_t port() const;
  void set_port(uint32_t value);
  private:
  uint32_t _internal_port() const;
  void _internal_set_port(uint32_t value);
  public:

  // uint32 status = 2;
  void clear_status();
  uint32_t status() const;
  void set_status(uint32_t value);
  private:
  uint32_t _internal_status() const;
  void _internal_set_status(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GDUpdateChannelStatusPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t port_;
    uint32_t status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gd_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GDBlockExceptionPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GDBlockExceptionPacket) */ {
 public:
  inline GDBlockExceptionPacket() : GDBlockExceptionPacket(nullptr) {}
  ~GDBlockExceptionPacket() override;
  explicit PROTOBUF_CONSTEXPR GDBlockExceptionPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GDBlockExceptionPacket(const GDBlockExceptionPacket& from);
  GDBlockExceptionPacket(GDBlockExceptionPacket&& from) noexcept
    : GDBlockExceptionPacket() {
    *this = ::std::move(from);
  }

  inline GDBlockExceptionPacket& operator=(const GDBlockExceptionPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GDBlockExceptionPacket& operator=(GDBlockExceptionPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GDBlockExceptionPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GDBlockExceptionPacket* internal_default_instance() {
    return reinterpret_cast<const GDBlockExceptionPacket*>(
               &_GDBlockExceptionPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GDBlockExceptionPacket& a, GDBlockExceptionPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GDBlockExceptionPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GDBlockExceptionPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GDBlockExceptionPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GDBlockExceptionPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GDBlockExceptionPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GDBlockExceptionPacket& from) {
    GDBlockExceptionPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GDBlockExceptionPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GDBlockExceptionPacket";
  }
  protected:
  explicit GDBlockExceptionPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLoginFieldNumber = 2,
    kCmdFieldNumber = 1,
  };
  // bytes login = 2;
  void clear_login();
  const std::string& login() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_login(ArgT0&& arg0, ArgT... args);
  std::string* mutable_login();
  PROTOBUF_NODISCARD std::string* release_login();
  void set_allocated_login(std::string* login);
  private:
  const std::string& _internal_login() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_login(const std::string& value);
  std::string* _internal_mutable_login();
  public:

  // uint32 cmd = 1;
  void clear_cmd();
  uint32_t cmd() const;
  void set_cmd(uint32_t value);
  private:
  uint32_t _internal_cmd() const;
  void _internal_set_cmd(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GDBlockExceptionPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr login_;
    uint32_t cmd_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gd_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GDPlayerCountPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GDPlayerCountPacket) */ {
 public:
  inline GDPlayerCountPacket() : GDPlayerCountPacket(nullptr) {}
  ~GDPlayerCountPacket() override;
  explicit PROTOBUF_CONSTEXPR GDPlayerCountPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GDPlayerCountPacket(const GDPlayerCountPacket& from);
  GDPlayerCountPacket(GDPlayerCountPacket&& from) noexcept
    : GDPlayerCountPacket() {
    *this = ::std::move(from);
  }

  inline GDPlayerCountPacket& operator=(const GDPlayerCountPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GDPlayerCountPacket& operator=(GDPlayerCountPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GDPlayerCountPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GDPlayerCountPacket* internal_default_instance() {
    return reinterpret_cast<const GDPlayerCountPacket*>(
               &_GDPlayerCountPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GDPlayerCountPacket& a, GDPlayerCountPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GDPlayerCountPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GDPlayerCountPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GDPlayerCountPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GDPlayerCountPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GDPlayerCountPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GDPlayerCountPacket& from) {
    GDPlayerCountPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GDPlayerCountPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GDPlayerCountPacket";
  }
  protected:
  explicit GDPlayerCountPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCountFieldNumber = 1,
  };
  // uint32 count = 1;
  void clear_count();
  uint32_t count() const;
  void set_count(uint32_t value);
  private:
  uint32_t _internal_count() const;
  void _internal_set_count(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GDPlayerCountPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t count_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gd_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GDReloadAdminPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GDReloadAdminPacket) */ {
 public:
  inline GDReloadAdminPacket() : GDReloadAdminPacket(nullptr) {}
  ~GDReloadAdminPacket() override;
  explicit PROTOBUF_CONSTEXPR GDReloadAdminPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GDReloadAdminPacket(const GDReloadAdminPacket& from);
  GDReloadAdminPacket(GDReloadAdminPacket&& from) noexcept
    : GDReloadAdminPacket() {
    *this = ::std::move(from);
  }

  inline GDReloadAdminPacket& operator=(const GDReloadAdminPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GDReloadAdminPacket& operator=(GDReloadAdminPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GDReloadAdminPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GDReloadAdminPacket* internal_default_instance() {
    return reinterpret_cast<const GDReloadAdminPacket*>(
               &_GDReloadAdminPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GDReloadAdminPacket& a, GDReloadAdminPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GDReloadAdminPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GDReloadAdminPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GDReloadAdminPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GDReloadAdminPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GDReloadAdminPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GDReloadAdminPacket& from) {
    GDReloadAdminPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GDReloadAdminPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GDReloadAdminPacket";
  }
  protected:
  explicit GDReloadAdminPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber = 1,
  };
  // bytes ip = 1;
  void clear_ip();
  const std::string& ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ip();
  PROTOBUF_NODISCARD std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // @@protoc_insertion_point(class_scope:network.GDReloadAdminPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gd_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GDRecvShutdownPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GDRecvShutdownPacket) */ {
 public:
  inline GDRecvShutdownPacket() : GDRecvShutdownPacket(nullptr) {}
  ~GDRecvShutdownPacket() override;
  explicit PROTOBUF_CONSTEXPR GDRecvShutdownPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GDRecvShutdownPacket(const GDRecvShutdownPacket& from);
  GDRecvShutdownPacket(GDRecvShutdownPacket&& from) noexcept
    : GDRecvShutdownPacket() {
    *this = ::std::move(from);
  }

  inline GDRecvShutdownPacket& operator=(const GDRecvShutdownPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GDRecvShutdownPacket& operator=(GDRecvShutdownPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GDRecvShutdownPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GDRecvShutdownPacket* internal_default_instance() {
    return reinterpret_cast<const GDRecvShutdownPacket*>(
               &_GDRecvShutdownPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GDRecvShutdownPacket& a, GDRecvShutdownPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GDRecvShutdownPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GDRecvShutdownPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GDRecvShutdownPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GDRecvShutdownPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GDRecvShutdownPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GDRecvShutdownPacket& from) {
    GDRecvShutdownPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GDRecvShutdownPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GDRecvShutdownPacket";
  }
  protected:
  explicit GDRecvShutdownPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartSecFieldNumber = 1,
    kMaintenanceFieldNumber = 2,
    kMaintenanceDurationFieldNumber = 3,
  };
  // int32 start_sec = 1;
  void clear_start_sec();
  int32_t start_sec() const;
  void set_start_sec(int32_t value);
  private:
  int32_t _internal_start_sec() const;
  void _internal_set_start_sec(int32_t value);
  public:

  // bool maintenance = 2;
  void clear_maintenance();
  bool maintenance() const;
  void set_maintenance(bool value);
  private:
  bool _internal_maintenance() const;
  void _internal_set_maintenance(bool value);
  public:

  // int32 maintenance_duration = 3;
  void clear_maintenance_duration();
  int32_t maintenance_duration() const;
  void set_maintenance_duration(int32_t value);
  private:
  int32_t _internal_maintenance_duration() const;
  void _internal_set_maintenance_duration(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GDRecvShutdownPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t start_sec_;
    bool maintenance_;
    int32_t maintenance_duration_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gd_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GDAuthLoginPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GDAuthLoginPacket) */ {
 public:
  inline GDAuthLoginPacket() : GDAuthLoginPacket(nullptr) {}
  ~GDAuthLoginPacket() override;
  explicit PROTOBUF_CONSTEXPR GDAuthLoginPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GDAuthLoginPacket(const GDAuthLoginPacket& from);
  GDAuthLoginPacket(GDAuthLoginPacket&& from) noexcept
    : GDAuthLoginPacket() {
    *this = ::std::move(from);
  }

  inline GDAuthLoginPacket& operator=(const GDAuthLoginPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GDAuthLoginPacket& operator=(GDAuthLoginPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GDAuthLoginPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GDAuthLoginPacket* internal_default_instance() {
    return reinterpret_cast<const GDAuthLoginPacket*>(
               &_GDAuthLoginPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GDAuthLoginPacket& a, GDAuthLoginPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GDAuthLoginPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GDAuthLoginPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GDAuthLoginPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GDAuthLoginPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GDAuthLoginPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GDAuthLoginPacket& from) {
    GDAuthLoginPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GDAuthLoginPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GDAuthLoginPacket";
  }
  protected:
  explicit GDAuthLoginPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientKeysFieldNumber = 6,
    kPremiumTimesFieldNumber = 9,
    kLoginFieldNumber = 3,
    kHwidFieldNumber = 4,
    kSocialIdFieldNumber = 5,
    kHwid2FieldNumber = 13,
    kAccountIdFieldNumber = 1,
    kLoginKeyFieldNumber = 2,
    kBillTypeFieldNumber = 7,
    kBillIdFieldNumber = 8,
    kLanguageFieldNumber = 10,
    kTradeblockFieldNumber = 11,
    kHwid2BanFieldNumber = 12,
    kCoinsFieldNumber = 14,
    kTempLoginFieldNumber = 15,
  };
  // repeated uint32 client_keys = 6;
  int client_keys_size() const;
  private:
  int _internal_client_keys_size() const;
  public:
  void clear_client_keys();
  private:
  uint32_t _internal_client_keys(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_client_keys() const;
  void _internal_add_client_keys(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_client_keys();
  public:
  uint32_t client_keys(int index) const;
  void set_client_keys(int index, uint32_t value);
  void add_client_keys(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      client_keys() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_client_keys();

  // repeated int32 premium_times = 9;
  int premium_times_size() const;
  private:
  int _internal_premium_times_size() const;
  public:
  void clear_premium_times();
  private:
  int32_t _internal_premium_times(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_premium_times() const;
  void _internal_add_premium_times(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_premium_times();
  public:
  int32_t premium_times(int index) const;
  void set_premium_times(int index, int32_t value);
  void add_premium_times(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      premium_times() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_premium_times();

  // bytes login = 3;
  void clear_login();
  const std::string& login() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_login(ArgT0&& arg0, ArgT... args);
  std::string* mutable_login();
  PROTOBUF_NODISCARD std::string* release_login();
  void set_allocated_login(std::string* login);
  private:
  const std::string& _internal_login() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_login(const std::string& value);
  std::string* _internal_mutable_login();
  public:

  // bytes hwid = 4;
  void clear_hwid();
  const std::string& hwid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hwid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hwid();
  PROTOBUF_NODISCARD std::string* release_hwid();
  void set_allocated_hwid(std::string* hwid);
  private:
  const std::string& _internal_hwid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hwid(const std::string& value);
  std::string* _internal_mutable_hwid();
  public:

  // bytes social_id = 5;
  void clear_social_id();
  const std::string& social_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_social_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_social_id();
  PROTOBUF_NODISCARD std::string* release_social_id();
  void set_allocated_social_id(std::string* social_id);
  private:
  const std::string& _internal_social_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_social_id(const std::string& value);
  std::string* _internal_mutable_social_id();
  public:

  // bytes hwid2 = 13;
  void clear_hwid2();
  const std::string& hwid2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hwid2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hwid2();
  PROTOBUF_NODISCARD std::string* release_hwid2();
  void set_allocated_hwid2(std::string* hwid2);
  private:
  const std::string& _internal_hwid2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hwid2(const std::string& value);
  std::string* _internal_mutable_hwid2();
  public:

  // uint32 account_id = 1;
  void clear_account_id();
  uint32_t account_id() const;
  void set_account_id(uint32_t value);
  private:
  uint32_t _internal_account_id() const;
  void _internal_set_account_id(uint32_t value);
  public:

  // uint32 login_key = 2;
  void clear_login_key();
  uint32_t login_key() const;
  void set_login_key(uint32_t value);
  private:
  uint32_t _internal_login_key() const;
  void _internal_set_login_key(uint32_t value);
  public:

  // uint32 bill_type = 7;
  void clear_bill_type();
  uint32_t bill_type() const;
  void set_bill_type(uint32_t value);
  private:
  uint32_t _internal_bill_type() const;
  void _internal_set_bill_type(uint32_t value);
  public:

  // uint32 bill_id = 8;
  void clear_bill_id();
  uint32_t bill_id() const;
  void set_bill_id(uint32_t value);
  private:
  uint32_t _internal_bill_id() const;
  void _internal_set_bill_id(uint32_t value);
  public:

  // uint32 language = 10;
  void clear_language();
  uint32_t language() const;
  void set_language(uint32_t value);
  private:
  uint32_t _internal_language() const;
  void _internal_set_language(uint32_t value);
  public:

  // uint32 tradeblock = 11;
  void clear_tradeblock();
  uint32_t tradeblock() const;
  void set_tradeblock(uint32_t value);
  private:
  uint32_t _internal_tradeblock() const;
  void _internal_set_tradeblock(uint32_t value);
  public:

  // uint32 hwid2ban = 12;
  void clear_hwid2ban();
  uint32_t hwid2ban() const;
  void set_hwid2ban(uint32_t value);
  private:
  uint32_t _internal_hwid2ban() const;
  void _internal_set_hwid2ban(uint32_t value);
  public:

  // bool coins = 14;
  void clear_coins();
  bool coins() const;
  void set_coins(bool value);
  private:
  bool _internal_coins() const;
  void _internal_set_coins(bool value);
  public:

  // bool temp_login = 15;
  void clear_temp_login();
  bool temp_login() const;
  void set_temp_login(bool value);
  private:
  bool _internal_temp_login() const;
  void _internal_set_temp_login(bool value);
  public:

  // @@protoc_insertion_point(class_scope:network.GDAuthLoginPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > client_keys_;
    mutable std::atomic<int> _client_keys_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > premium_times_;
    mutable std::atomic<int> _premium_times_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr login_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hwid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr social_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hwid2_;
    uint32_t account_id_;
    uint32_t login_key_;
    uint32_t bill_type_;
    uint32_t bill_id_;
    uint32_t language_;
    uint32_t tradeblock_;
    uint32_t hwid2ban_;
    bool coins_;
    bool temp_login_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gd_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GDLoginByKeyPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GDLoginByKeyPacket) */ {
 public:
  inline GDLoginByKeyPacket() : GDLoginByKeyPacket(nullptr) {}
  ~GDLoginByKeyPacket() override;
  explicit PROTOBUF_CONSTEXPR GDLoginByKeyPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GDLoginByKeyPacket(const GDLoginByKeyPacket& from);
  GDLoginByKeyPacket(GDLoginByKeyPacket&& from) noexcept
    : GDLoginByKeyPacket() {
    *this = ::std::move(from);
  }

  inline GDLoginByKeyPacket& operator=(const GDLoginByKeyPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GDLoginByKeyPacket& operator=(GDLoginByKeyPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GDLoginByKeyPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GDLoginByKeyPacket* internal_default_instance() {
    return reinterpret_cast<const GDLoginByKeyPacket*>(
               &_GDLoginByKeyPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GDLoginByKeyPacket& a, GDLoginByKeyPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GDLoginByKeyPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GDLoginByKeyPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GDLoginByKeyPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GDLoginByKeyPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GDLoginByKeyPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GDLoginByKeyPacket& from) {
    GDLoginByKeyPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GDLoginByKeyPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GDLoginByKeyPacket";
  }
  protected:
  explicit GDLoginByKeyPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientKeyFieldNumber = 3,
    kLoginFieldNumber = 1,
    kIpFieldNumber = 4,
    kLoginKeyFieldNumber = 2,
  };
  // repeated uint32 client_key = 3;
  int client_key_size() const;
  private:
  int _internal_client_key_size() const;
  public:
  void clear_client_key();
  private:
  uint32_t _internal_client_key(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_client_key() const;
  void _internal_add_client_key(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_client_key();
  public:
  uint32_t client_key(int index) const;
  void set_client_key(int index, uint32_t value);
  void add_client_key(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      client_key() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_client_key();

  // bytes login = 1;
  void clear_login();
  const std::string& login() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_login(ArgT0&& arg0, ArgT... args);
  std::string* mutable_login();
  PROTOBUF_NODISCARD std::string* release_login();
  void set_allocated_login(std::string* login);
  private:
  const std::string& _internal_login() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_login(const std::string& value);
  std::string* _internal_mutable_login();
  public:

  // bytes ip = 4;
  void clear_ip();
  const std::string& ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ip();
  PROTOBUF_NODISCARD std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // uint32 login_key = 2;
  void clear_login_key();
  uint32_t login_key() const;
  void set_login_key(uint32_t value);
  private:
  uint32_t _internal_login_key() const;
  void _internal_set_login_key(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GDLoginByKeyPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > client_key_;
    mutable std::atomic<int> _client_key_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr login_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
    uint32_t login_key_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gd_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GDPlayerCreatePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GDPlayerCreatePacket) */ {
 public:
  inline GDPlayerCreatePacket() : GDPlayerCreatePacket(nullptr) {}
  ~GDPlayerCreatePacket() override;
  explicit PROTOBUF_CONSTEXPR GDPlayerCreatePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GDPlayerCreatePacket(const GDPlayerCreatePacket& from);
  GDPlayerCreatePacket(GDPlayerCreatePacket&& from) noexcept
    : GDPlayerCreatePacket() {
    *this = ::std::move(from);
  }

  inline GDPlayerCreatePacket& operator=(const GDPlayerCreatePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GDPlayerCreatePacket& operator=(GDPlayerCreatePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GDPlayerCreatePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GDPlayerCreatePacket* internal_default_instance() {
    return reinterpret_cast<const GDPlayerCreatePacket*>(
               &_GDPlayerCreatePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(GDPlayerCreatePacket& a, GDPlayerCreatePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GDPlayerCreatePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GDPlayerCreatePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GDPlayerCreatePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GDPlayerCreatePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GDPlayerCreatePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GDPlayerCreatePacket& from) {
    GDPlayerCreatePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GDPlayerCreatePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GDPlayerCreatePacket";
  }
  protected:
  explicit GDPlayerCreatePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLoginFieldNumber = 1,
    kPasswdFieldNumber = 2,
    kPlayerTableFieldNumber = 5,
    kAccountIdFieldNumber = 3,
    kAccountIndexFieldNumber = 4,
  };
  // bytes login = 1;
  void clear_login();
  const std::string& login() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_login(ArgT0&& arg0, ArgT... args);
  std::string* mutable_login();
  PROTOBUF_NODISCARD std::string* release_login();
  void set_allocated_login(std::string* login);
  private:
  const std::string& _internal_login() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_login(const std::string& value);
  std::string* _internal_mutable_login();
  public:

  // bytes passwd = 2;
  void clear_passwd();
  const std::string& passwd() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_passwd(ArgT0&& arg0, ArgT... args);
  std::string* mutable_passwd();
  PROTOBUF_NODISCARD std::string* release_passwd();
  void set_allocated_passwd(std::string* passwd);
  private:
  const std::string& _internal_passwd() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_passwd(const std::string& value);
  std::string* _internal_mutable_passwd();
  public:

  // .TPlayerTable player_table = 5;
  bool has_player_table() const;
  private:
  bool _internal_has_player_table() const;
  public:
  void clear_player_table();
  const ::TPlayerTable& player_table() const;
  PROTOBUF_NODISCARD ::TPlayerTable* release_player_table();
  ::TPlayerTable* mutable_player_table();
  void set_allocated_player_table(::TPlayerTable* player_table);
  private:
  const ::TPlayerTable& _internal_player_table() const;
  ::TPlayerTable* _internal_mutable_player_table();
  public:
  void unsafe_arena_set_allocated_player_table(
      ::TPlayerTable* player_table);
  ::TPlayerTable* unsafe_arena_release_player_table();

  // uint32 account_id = 3;
  void clear_account_id();
  uint32_t account_id() const;
  void set_account_id(uint32_t value);
  private:
  uint32_t _internal_account_id() const;
  void _internal_set_account_id(uint32_t value);
  public:

  // uint32 account_index = 4;
  void clear_account_index();
  uint32_t account_index() const;
  void set_account_index(uint32_t value);
  private:
  uint32_t _internal_account_index() const;
  void _internal_set_account_index(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GDPlayerCreatePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr login_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr passwd_;
    ::TPlayerTable* player_table_;
    uint32_t account_id_;
    uint32_t account_index_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gd_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GDPlayerDeletePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GDPlayerDeletePacket) */ {
 public:
  inline GDPlayerDeletePacket() : GDPlayerDeletePacket(nullptr) {}
  ~GDPlayerDeletePacket() override;
  explicit PROTOBUF_CONSTEXPR GDPlayerDeletePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GDPlayerDeletePacket(const GDPlayerDeletePacket& from);
  GDPlayerDeletePacket(GDPlayerDeletePacket&& from) noexcept
    : GDPlayerDeletePacket() {
    *this = ::std::move(from);
  }

  inline GDPlayerDeletePacket& operator=(const GDPlayerDeletePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GDPlayerDeletePacket& operator=(GDPlayerDeletePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GDPlayerDeletePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GDPlayerDeletePacket* internal_default_instance() {
    return reinterpret_cast<const GDPlayerDeletePacket*>(
               &_GDPlayerDeletePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(GDPlayerDeletePacket& a, GDPlayerDeletePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GDPlayerDeletePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GDPlayerDeletePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GDPlayerDeletePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GDPlayerDeletePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GDPlayerDeletePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GDPlayerDeletePacket& from) {
    GDPlayerDeletePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GDPlayerDeletePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GDPlayerDeletePacket";
  }
  protected:
  explicit GDPlayerDeletePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLoginFieldNumber = 1,
    kPrivateCodeFieldNumber = 4,
    kPlayerIdFieldNumber = 2,
    kAccountIndexFieldNumber = 3,
  };
  // bytes login = 1;
  void clear_login();
  const std::string& login() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_login(ArgT0&& arg0, ArgT... args);
  std::string* mutable_login();
  PROTOBUF_NODISCARD std::string* release_login();
  void set_allocated_login(std::string* login);
  private:
  const std::string& _internal_login() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_login(const std::string& value);
  std::string* _internal_mutable_login();
  public:

  // bytes private_code = 4;
  void clear_private_code();
  const std::string& private_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_private_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_private_code();
  PROTOBUF_NODISCARD std::string* release_private_code();
  void set_allocated_private_code(std::string* private_code);
  private:
  const std::string& _internal_private_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_private_code(const std::string& value);
  std::string* _internal_mutable_private_code();
  public:

  // uint32 player_id = 2;
  void clear_player_id();
  uint32_t player_id() const;
  void set_player_id(uint32_t value);
  private:
  uint32_t _internal_player_id() const;
  void _internal_set_player_id(uint32_t value);
  public:

  // uint32 account_index = 3;
  void clear_account_index();
  uint32_t account_index() const;
  void set_account_index(uint32_t value);
  private:
  uint32_t _internal_account_index() const;
  void _internal_set_account_index(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GDPlayerDeletePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr login_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr private_code_;
    uint32_t player_id_;
    uint32_t account_index_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gd_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GDChangeNamePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GDChangeNamePacket) */ {
 public:
  inline GDChangeNamePacket() : GDChangeNamePacket(nullptr) {}
  ~GDChangeNamePacket() override;
  explicit PROTOBUF_CONSTEXPR GDChangeNamePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GDChangeNamePacket(const GDChangeNamePacket& from);
  GDChangeNamePacket(GDChangeNamePacket&& from) noexcept
    : GDChangeNamePacket() {
    *this = ::std::move(from);
  }

  inline GDChangeNamePacket& operator=(const GDChangeNamePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GDChangeNamePacket& operator=(GDChangeNamePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GDChangeNamePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GDChangeNamePacket* internal_default_instance() {
    return reinterpret_cast<const GDChangeNamePacket*>(
               &_GDChangeNamePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(GDChangeNamePacket& a, GDChangeNamePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GDChangeNamePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GDChangeNamePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GDChangeNamePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GDChangeNamePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GDChangeNamePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GDChangeNamePacket& from) {
    GDChangeNamePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GDChangeNamePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GDChangeNamePacket";
  }
  protected:
  explicit GDChangeNamePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kPidFieldNumber = 1,
  };
  // bytes name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 pid = 1;
  void clear_pid();
  uint32_t pid() const;
  void set_pid(uint32_t value);
  private:
  uint32_t _internal_pid() const;
  void _internal_set_pid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GDChangeNamePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    uint32_t pid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gd_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GDEmpireSelectPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GDEmpireSelectPacket) */ {
 public:
  inline GDEmpireSelectPacket() : GDEmpireSelectPacket(nullptr) {}
  ~GDEmpireSelectPacket() override;
  explicit PROTOBUF_CONSTEXPR GDEmpireSelectPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GDEmpireSelectPacket(const GDEmpireSelectPacket& from);
  GDEmpireSelectPacket(GDEmpireSelectPacket&& from) noexcept
    : GDEmpireSelectPacket() {
    *this = ::std::move(from);
  }

  inline GDEmpireSelectPacket& operator=(const GDEmpireSelectPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GDEmpireSelectPacket& operator=(GDEmpireSelectPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GDEmpireSelectPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GDEmpireSelectPacket* internal_default_instance() {
    return reinterpret_cast<const GDEmpireSelectPacket*>(
               &_GDEmpireSelectPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(GDEmpireSelectPacket& a, GDEmpireSelectPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GDEmpireSelectPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GDEmpireSelectPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GDEmpireSelectPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GDEmpireSelectPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GDEmpireSelectPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GDEmpireSelectPacket& from) {
    GDEmpireSelectPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GDEmpireSelectPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GDEmpireSelectPacket";
  }
  protected:
  explicit GDEmpireSelectPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 1,
    kEmpireFieldNumber = 2,
  };
  // uint32 account_id = 1;
  void clear_account_id();
  uint32_t account_id() const;
  void set_account_id(uint32_t value);
  private:
  uint32_t _internal_account_id() const;
  void _internal_set_account_id(uint32_t value);
  public:

  // uint32 empire = 2;
  void clear_empire();
  uint32_t empire() const;
  void set_empire(uint32_t value);
  private:
  uint32_t _internal_empire() const;
  void _internal_set_empire(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GDEmpireSelectPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t account_id_;
    uint32_t empire_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gd_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GDSelectUpdateHairPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GDSelectUpdateHairPacket) */ {
 public:
  inline GDSelectUpdateHairPacket() : GDSelectUpdateHairPacket(nullptr) {}
  ~GDSelectUpdateHairPacket() override;
  explicit PROTOBUF_CONSTEXPR GDSelectUpdateHairPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GDSelectUpdateHairPacket(const GDSelectUpdateHairPacket& from);
  GDSelectUpdateHairPacket(GDSelectUpdateHairPacket&& from) noexcept
    : GDSelectUpdateHairPacket() {
    *this = ::std::move(from);
  }

  inline GDSelectUpdateHairPacket& operator=(const GDSelectUpdateHairPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GDSelectUpdateHairPacket& operator=(GDSelectUpdateHairPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GDSelectUpdateHairPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GDSelectUpdateHairPacket* internal_default_instance() {
    return reinterpret_cast<const GDSelectUpdateHairPacket*>(
               &_GDSelectUpdateHairPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(GDSelectUpdateHairPacket& a, GDSelectUpdateHairPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GDSelectUpdateHairPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GDSelectUpdateHairPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GDSelectUpdateHairPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GDSelectUpdateHairPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GDSelectUpdateHairPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GDSelectUpdateHairPacket& from) {
    GDSelectUpdateHairPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GDSelectUpdateHairPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GDSelectUpdateHairPacket";
  }
  protected:
  explicit GDSelectUpdateHairPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPidFieldNumber = 1,
    kHairPartFieldNumber = 2,
    kHairBasePartFieldNumber = 3,
  };
  // uint32 pid = 1;
  void clear_pid();
  uint32_t pid() const;
  void set_pid(uint32_t value);
  private:
  uint32_t _internal_pid() const;
  void _internal_set_pid(uint32_t value);
  public:

  // uint32 hair_part = 2;
  void clear_hair_part();
  uint32_t hair_part() const;
  void set_hair_part(uint32_t value);
  private:
  uint32_t _internal_hair_part() const;
  void _internal_set_hair_part(uint32_t value);
  public:

  // uint32 hair_base_part = 3;
  void clear_hair_base_part();
  uint32_t hair_base_part() const;
  void set_hair_base_part(uint32_t value);
  private:
  uint32_t _internal_hair_base_part() const;
  void _internal_set_hair_base_part(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GDSelectUpdateHairPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t pid_;
    uint32_t hair_part_;
    uint32_t hair_base_part_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gd_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GDBillingExpirePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GDBillingExpirePacket) */ {
 public:
  inline GDBillingExpirePacket() : GDBillingExpirePacket(nullptr) {}
  ~GDBillingExpirePacket() override;
  explicit PROTOBUF_CONSTEXPR GDBillingExpirePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GDBillingExpirePacket(const GDBillingExpirePacket& from);
  GDBillingExpirePacket(GDBillingExpirePacket&& from) noexcept
    : GDBillingExpirePacket() {
    *this = ::std::move(from);
  }

  inline GDBillingExpirePacket& operator=(const GDBillingExpirePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GDBillingExpirePacket& operator=(GDBillingExpirePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GDBillingExpirePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GDBillingExpirePacket* internal_default_instance() {
    return reinterpret_cast<const GDBillingExpirePacket*>(
               &_GDBillingExpirePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(GDBillingExpirePacket& a, GDBillingExpirePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GDBillingExpirePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GDBillingExpirePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GDBillingExpirePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GDBillingExpirePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GDBillingExpirePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GDBillingExpirePacket& from) {
    GDBillingExpirePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GDBillingExpirePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GDBillingExpirePacket";
  }
  protected:
  explicit GDBillingExpirePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLoginFieldNumber = 1,
    kBillTypeFieldNumber = 2,
    kRemainSecondsFieldNumber = 3,
  };
  // bytes login = 1;
  void clear_login();
  const std::string& login() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_login(ArgT0&& arg0, ArgT... args);
  std::string* mutable_login();
  PROTOBUF_NODISCARD std::string* release_login();
  void set_allocated_login(std::string* login);
  private:
  const std::string& _internal_login() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_login(const std::string& value);
  std::string* _internal_mutable_login();
  public:

  // uint32 bill_type = 2;
  void clear_bill_type();
  uint32_t bill_type() const;
  void set_bill_type(uint32_t value);
  private:
  uint32_t _internal_bill_type() const;
  void _internal_set_bill_type(uint32_t value);
  public:

  // uint32 remain_seconds = 3;
  void clear_remain_seconds();
  uint32_t remain_seconds() const;
  void set_remain_seconds(uint32_t value);
  private:
  uint32_t _internal_remain_seconds() const;
  void _internal_set_remain_seconds(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GDBillingExpirePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr login_;
    uint32_t bill_type_;
    uint32_t remain_seconds_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gd_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GDBillingCheckPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GDBillingCheckPacket) */ {
 public:
  inline GDBillingCheckPacket() : GDBillingCheckPacket(nullptr) {}
  ~GDBillingCheckPacket() override;
  explicit PROTOBUF_CONSTEXPR GDBillingCheckPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GDBillingCheckPacket(const GDBillingCheckPacket& from);
  GDBillingCheckPacket(GDBillingCheckPacket&& from) noexcept
    : GDBillingCheckPacket() {
    *this = ::std::move(from);
  }

  inline GDBillingCheckPacket& operator=(const GDBillingCheckPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GDBillingCheckPacket& operator=(GDBillingCheckPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GDBillingCheckPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GDBillingCheckPacket* internal_default_instance() {
    return reinterpret_cast<const GDBillingCheckPacket*>(
               &_GDBillingCheckPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(GDBillingCheckPacket& a, GDBillingCheckPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GDBillingCheckPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GDBillingCheckPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GDBillingCheckPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GDBillingCheckPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GDBillingCheckPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GDBillingCheckPacket& from) {
    GDBillingCheckPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GDBillingCheckPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GDBillingCheckPacket";
  }
  protected:
  explicit GDBillingCheckPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeysFieldNumber = 1,
  };
  // repeated uint32 keys = 1;
  int keys_size() const;
  private:
  int _internal_keys_size() const;
  public:
  void clear_keys();
  private:
  uint32_t _internal_keys(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_keys() const;
  void _internal_add_keys(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_keys();
  public:
  uint32_t keys(int index) const;
  void set_keys(int index, uint32_t value);
  void add_keys(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      keys() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_keys();

  // @@protoc_insertion_point(class_scope:network.GDBillingCheckPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > keys_;
    mutable std::atomic<int> _keys_cached_byte_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gd_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GDDisconnectPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GDDisconnectPacket) */ {
 public:
  inline GDDisconnectPacket() : GDDisconnectPacket(nullptr) {}
  ~GDDisconnectPacket() override;
  explicit PROTOBUF_CONSTEXPR GDDisconnectPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GDDisconnectPacket(const GDDisconnectPacket& from);
  GDDisconnectPacket(GDDisconnectPacket&& from) noexcept
    : GDDisconnectPacket() {
    *this = ::std::move(from);
  }

  inline GDDisconnectPacket& operator=(const GDDisconnectPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GDDisconnectPacket& operator=(GDDisconnectPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GDDisconnectPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GDDisconnectPacket* internal_default_instance() {
    return reinterpret_cast<const GDDisconnectPacket*>(
               &_GDDisconnectPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(GDDisconnectPacket& a, GDDisconnectPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GDDisconnectPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GDDisconnectPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GDDisconnectPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GDDisconnectPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GDDisconnectPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GDDisconnectPacket& from) {
    GDDisconnectPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GDDisconnectPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GDDisconnectPacket";
  }
  protected:
  explicit GDDisconnectPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLoginFieldNumber = 1,
  };
  // bytes login = 1;
  void clear_login();
  const std::string& login() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_login(ArgT0&& arg0, ArgT... args);
  std::string* mutable_login();
  PROTOBUF_NODISCARD std::string* release_login();
  void set_allocated_login(std::string* login);
  private:
  const std::string& _internal_login() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_login(const std::string& value);
  std::string* _internal_mutable_login();
  public:

  // @@protoc_insertion_point(class_scope:network.GDDisconnectPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr login_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gd_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GDValidLogoutPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GDValidLogoutPacket) */ {
 public:
  inline GDValidLogoutPacket() : GDValidLogoutPacket(nullptr) {}
  ~GDValidLogoutPacket() override;
  explicit PROTOBUF_CONSTEXPR GDValidLogoutPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GDValidLogoutPacket(const GDValidLogoutPacket& from);
  GDValidLogoutPacket(GDValidLogoutPacket&& from) noexcept
    : GDValidLogoutPacket() {
    *this = ::std::move(from);
  }

  inline GDValidLogoutPacket& operator=(const GDValidLogoutPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GDValidLogoutPacket& operator=(GDValidLogoutPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GDValidLogoutPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GDValidLogoutPacket* internal_default_instance() {
    return reinterpret_cast<const GDValidLogoutPacket*>(
               &_GDValidLogoutPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(GDValidLogoutPacket& a, GDValidLogoutPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GDValidLogoutPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GDValidLogoutPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GDValidLogoutPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GDValidLogoutPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GDValidLogoutPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GDValidLogoutPacket& from) {
    GDValidLogoutPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GDValidLogoutPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GDValidLogoutPacket";
  }
  protected:
  explicit GDValidLogoutPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 1,
  };
  // uint32 account_id = 1;
  void clear_account_id();
  uint32_t account_id() const;
  void set_account_id(uint32_t value);
  private:
  uint32_t _internal_account_id() const;
  void _internal_set_account_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GDValidLogoutPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t account_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gd_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GDPlayerLoadPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GDPlayerLoadPacket) */ {
 public:
  inline GDPlayerLoadPacket() : GDPlayerLoadPacket(nullptr) {}
  ~GDPlayerLoadPacket() override;
  explicit PROTOBUF_CONSTEXPR GDPlayerLoadPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GDPlayerLoadPacket(const GDPlayerLoadPacket& from);
  GDPlayerLoadPacket(GDPlayerLoadPacket&& from) noexcept
    : GDPlayerLoadPacket() {
    *this = ::std::move(from);
  }

  inline GDPlayerLoadPacket& operator=(const GDPlayerLoadPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GDPlayerLoadPacket& operator=(GDPlayerLoadPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GDPlayerLoadPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GDPlayerLoadPacket* internal_default_instance() {
    return reinterpret_cast<const GDPlayerLoadPacket*>(
               &_GDPlayerLoadPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(GDPlayerLoadPacket& a, GDPlayerLoadPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GDPlayerLoadPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GDPlayerLoadPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GDPlayerLoadPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GDPlayerLoadPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GDPlayerLoadPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GDPlayerLoadPacket& from) {
    GDPlayerLoadPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GDPlayerLoadPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GDPlayerLoadPacket";
  }
  protected:
  explicit GDPlayerLoadPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 1,
    kPlayerIdFieldNumber = 2,
    kAccountIndexFieldNumber = 3,
  };
  // uint32 account_id = 1;
  void clear_account_id();
  uint32_t account_id() const;
  void set_account_id(uint32_t value);
  private:
  uint32_t _internal_account_id() const;
  void _internal_set_account_id(uint32_t value);
  public:

  // uint32 player_id = 2;
  void clear_player_id();
  uint32_t player_id() const;
  void set_player_id(uint32_t value);
  private:
  uint32_t _internal_player_id() const;
  void _internal_set_player_id(uint32_t value);
  public:

  // uint32 account_index = 3;
  void clear_account_index();
  uint32_t account_index() const;
  void set_account_index(uint32_t value);
  private:
  uint32_t _internal_account_index() const;
  void _internal_set_account_index(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GDPlayerLoadPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t account_id_;
    uint32_t player_id_;
    uint32_t account_index_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gd_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GDSafeboxLoadPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GDSafeboxLoadPacket) */ {
 public:
  inline GDSafeboxLoadPacket() : GDSafeboxLoadPacket(nullptr) {}
  ~GDSafeboxLoadPacket() override;
  explicit PROTOBUF_CONSTEXPR GDSafeboxLoadPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GDSafeboxLoadPacket(const GDSafeboxLoadPacket& from);
  GDSafeboxLoadPacket(GDSafeboxLoadPacket&& from) noexcept
    : GDSafeboxLoadPacket() {
    *this = ::std::move(from);
  }

  inline GDSafeboxLoadPacket& operator=(const GDSafeboxLoadPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GDSafeboxLoadPacket& operator=(GDSafeboxLoadPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GDSafeboxLoadPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GDSafeboxLoadPacket* internal_default_instance() {
    return reinterpret_cast<const GDSafeboxLoadPacket*>(
               &_GDSafeboxLoadPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(GDSafeboxLoadPacket& a, GDSafeboxLoadPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GDSafeboxLoadPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GDSafeboxLoadPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GDSafeboxLoadPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GDSafeboxLoadPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GDSafeboxLoadPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GDSafeboxLoadPacket& from) {
    GDSafeboxLoadPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GDSafeboxLoadPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GDSafeboxLoadPacket";
  }
  protected:
  explicit GDSafeboxLoadPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLoginFieldNumber = 2,
    kPasswordFieldNumber = 3,
    kAccountIdFieldNumber = 1,
    kIsMallFieldNumber = 4,
  };
  // bytes login = 2;
  void clear_login();
  const std::string& login() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_login(ArgT0&& arg0, ArgT... args);
  std::string* mutable_login();
  PROTOBUF_NODISCARD std::string* release_login();
  void set_allocated_login(std::string* login);
  private:
  const std::string& _internal_login() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_login(const std::string& value);
  std::string* _internal_mutable_login();
  public:

  // bytes password = 3;
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // uint32 account_id = 1;
  void clear_account_id();
  uint32_t account_id() const;
  void set_account_id(uint32_t value);
  private:
  uint32_t _internal_account_id() const;
  void _internal_set_account_id(uint32_t value);
  public:

  // bool is_mall = 4;
  void clear_is_mall();
  bool is_mall() const;
  void set_is_mall(bool value);
  private:
  bool _internal_is_mall() const;
  void _internal_set_is_mall(bool value);
  public:

  // @@protoc_insertion_point(class_scope:network.GDSafeboxLoadPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr login_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
    uint32_t account_id_;
    bool is_mall_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gd_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GDReqHorseNamePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GDReqHorseNamePacket) */ {
 public:
  inline GDReqHorseNamePacket() : GDReqHorseNamePacket(nullptr) {}
  ~GDReqHorseNamePacket() override;
  explicit PROTOBUF_CONSTEXPR GDReqHorseNamePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GDReqHorseNamePacket(const GDReqHorseNamePacket& from);
  GDReqHorseNamePacket(GDReqHorseNamePacket&& from) noexcept
    : GDReqHorseNamePacket() {
    *this = ::std::move(from);
  }

  inline GDReqHorseNamePacket& operator=(const GDReqHorseNamePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GDReqHorseNamePacket& operator=(GDReqHorseNamePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GDReqHorseNamePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GDReqHorseNamePacket* internal_default_instance() {
    return reinterpret_cast<const GDReqHorseNamePacket*>(
               &_GDReqHorseNamePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(GDReqHorseNamePacket& a, GDReqHorseNamePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GDReqHorseNamePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GDReqHorseNamePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GDReqHorseNamePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GDReqHorseNamePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GDReqHorseNamePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GDReqHorseNamePacket& from) {
    GDReqHorseNamePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GDReqHorseNamePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GDReqHorseNamePacket";
  }
  protected:
  explicit GDReqHorseNamePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPidFieldNumber = 1,
  };
  // uint32 pid = 1;
  void clear_pid();
  uint32_t pid() const;
  void set_pid(uint32_t value);
  private:
  uint32_t _internal_pid() const;
  void _internal_set_pid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GDReqHorseNamePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t pid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gd_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GDPlayerSavePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GDPlayerSavePacket) */ {
 public:
  inline GDPlayerSavePacket() : GDPlayerSavePacket(nullptr) {}
  ~GDPlayerSavePacket() override;
  explicit PROTOBUF_CONSTEXPR GDPlayerSavePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GDPlayerSavePacket(const GDPlayerSavePacket& from);
  GDPlayerSavePacket(GDPlayerSavePacket&& from) noexcept
    : GDPlayerSavePacket() {
    *this = ::std::move(from);
  }

  inline GDPlayerSavePacket& operator=(const GDPlayerSavePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GDPlayerSavePacket& operator=(GDPlayerSavePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GDPlayerSavePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GDPlayerSavePacket* internal_default_instance() {
    return reinterpret_cast<const GDPlayerSavePacket*>(
               &_GDPlayerSavePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(GDPlayerSavePacket& a, GDPlayerSavePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GDPlayerSavePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GDPlayerSavePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GDPlayerSavePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GDPlayerSavePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GDPlayerSavePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GDPlayerSavePacket& from) {
    GDPlayerSavePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GDPlayerSavePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GDPlayerSavePacket";
  }
  protected:
  explicit GDPlayerSavePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // .TPlayerTable data = 1;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::TPlayerTable& data() const;
  PROTOBUF_NODISCARD ::TPlayerTable* release_data();
  ::TPlayerTable* mutable_data();
  void set_allocated_data(::TPlayerTable* data);
  private:
  const ::TPlayerTable& _internal_data() const;
  ::TPlayerTable* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::TPlayerTable* data);
  ::TPlayerTable* unsafe_arena_release_data();

  // @@protoc_insertion_point(class_scope:network.GDPlayerSavePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::TPlayerTable* data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gd_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GDItemSavePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GDItemSavePacket) */ {
 public:
  inline GDItemSavePacket() : GDItemSavePacket(nullptr) {}
  ~GDItemSavePacket() override;
  explicit PROTOBUF_CONSTEXPR GDItemSavePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GDItemSavePacket(const GDItemSavePacket& from);
  GDItemSavePacket(GDItemSavePacket&& from) noexcept
    : GDItemSavePacket() {
    *this = ::std::move(from);
  }

  inline GDItemSavePacket& operator=(const GDItemSavePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GDItemSavePacket& operator=(GDItemSavePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GDItemSavePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GDItemSavePacket* internal_default_instance() {
    return reinterpret_cast<const GDItemSavePacket*>(
               &_GDItemSavePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(GDItemSavePacket& a, GDItemSavePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GDItemSavePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GDItemSavePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GDItemSavePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GDItemSavePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GDItemSavePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GDItemSavePacket& from) {
    GDItemSavePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GDItemSavePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GDItemSavePacket";
  }
  protected:
  explicit GDItemSavePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // .network.TItemData data = 1;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::network::TItemData& data() const;
  PROTOBUF_NODISCARD ::network::TItemData* release_data();
  ::network::TItemData* mutable_data();
  void set_allocated_data(::network::TItemData* data);
  private:
  const ::network::TItemData& _internal_data() const;
  ::network::TItemData* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::network::TItemData* data);
  ::network::TItemData* unsafe_arena_release_data();

  // @@protoc_insertion_point(class_scope:network.GDItemSavePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::network::TItemData* data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gd_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GDQuestSavePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GDQuestSavePacket) */ {
 public:
  inline GDQuestSavePacket() : GDQuestSavePacket(nullptr) {}
  ~GDQuestSavePacket() override;
  explicit PROTOBUF_CONSTEXPR GDQuestSavePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GDQuestSavePacket(const GDQuestSavePacket& from);
  GDQuestSavePacket(GDQuestSavePacket&& from) noexcept
    : GDQuestSavePacket() {
    *this = ::std::move(from);
  }

  inline GDQuestSavePacket& operator=(const GDQuestSavePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GDQuestSavePacket& operator=(GDQuestSavePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GDQuestSavePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GDQuestSavePacket* internal_default_instance() {
    return reinterpret_cast<const GDQuestSavePacket*>(
               &_GDQuestSavePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(GDQuestSavePacket& a, GDQuestSavePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GDQuestSavePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GDQuestSavePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GDQuestSavePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GDQuestSavePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GDQuestSavePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GDQuestSavePacket& from) {
    GDQuestSavePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GDQuestSavePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GDQuestSavePacket";
  }
  protected:
  explicit GDQuestSavePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDatasFieldNumber = 1,
  };
  // repeated .TQuestTable datas = 1;
  int datas_size() const;
  private:
  int _internal_datas_size() const;
  public:
  void clear_datas();
  ::TQuestTable* mutable_datas(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TQuestTable >*
      mutable_datas();
  private:
  const ::TQuestTable& _internal_datas(int index) const;
  ::TQuestTable* _internal_add_datas();
  public:
  const ::TQuestTable& datas(int index) const;
  ::TQuestTable* add_datas();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TQuestTable >&
      datas() const;

  // @@protoc_insertion_point(class_scope:network.GDQuestSavePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TQuestTable > datas_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gd_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GDPetSavePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GDPetSavePacket) */ {
 public:
  inline GDPetSavePacket() : GDPetSavePacket(nullptr) {}
  ~GDPetSavePacket() override;
  explicit PROTOBUF_CONSTEXPR GDPetSavePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GDPetSavePacket(const GDPetSavePacket& from);
  GDPetSavePacket(GDPetSavePacket&& from) noexcept
    : GDPetSavePacket() {
    *this = ::std::move(from);
  }

  inline GDPetSavePacket& operator=(const GDPetSavePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GDPetSavePacket& operator=(GDPetSavePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GDPetSavePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GDPetSavePacket* internal_default_instance() {
    return reinterpret_cast<const GDPetSavePacket*>(
               &_GDPetSavePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(GDPetSavePacket& a, GDPetSavePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GDPetSavePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GDPetSavePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GDPetSavePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GDPetSavePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GDPetSavePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GDPetSavePacket& from) {
    GDPetSavePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GDPetSavePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GDPetSavePacket";
  }
  protected:
  explicit GDPetSavePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // .network.TPetAdvancedTable data = 1;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::network::TPetAdvancedTable& data() const;
  PROTOBUF_NODISCARD ::network::TPetAdvancedTable* release_data();
  ::network::TPetAdvancedTable* mutable_data();
  void set_allocated_data(::network::TPetAdvancedTable* data);
  private:
  const ::network::TPetAdvancedTable& _internal_data() const;
  ::network::TPetAdvancedTable* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::network::TPetAdvancedTable* data);
  ::network::TPetAdvancedTable* unsafe_arena_release_data();

  // @@protoc_insertion_point(class_scope:network.GDPetSavePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::network::TPetAdvancedTable* data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gd_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GDSafeboxSavePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GDSafeboxSavePacket) */ {
 public:
  inline GDSafeboxSavePacket() : GDSafeboxSavePacket(nullptr) {}
  ~GDSafeboxSavePacket() override;
  explicit PROTOBUF_CONSTEXPR GDSafeboxSavePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GDSafeboxSavePacket(const GDSafeboxSavePacket& from);
  GDSafeboxSavePacket(GDSafeboxSavePacket&& from) noexcept
    : GDSafeboxSavePacket() {
    *this = ::std::move(from);
  }

  inline GDSafeboxSavePacket& operator=(const GDSafeboxSavePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GDSafeboxSavePacket& operator=(GDSafeboxSavePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GDSafeboxSavePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GDSafeboxSavePacket* internal_default_instance() {
    return reinterpret_cast<const GDSafeboxSavePacket*>(
               &_GDSafeboxSavePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(GDSafeboxSavePacket& a, GDSafeboxSavePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GDSafeboxSavePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GDSafeboxSavePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GDSafeboxSavePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GDSafeboxSavePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GDSafeboxSavePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GDSafeboxSavePacket& from) {
    GDSafeboxSavePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GDSafeboxSavePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GDSafeboxSavePacket";
  }
  protected:
  explicit GDSafeboxSavePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 4,
    kAccountIdFieldNumber = 1,
    kSizeFieldNumber = 2,
    kGoldFieldNumber = 3,
  };
  // repeated .network.TItemData items = 4;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::network::TItemData* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemData >*
      mutable_items();
  private:
  const ::network::TItemData& _internal_items(int index) const;
  ::network::TItemData* _internal_add_items();
  public:
  const ::network::TItemData& items(int index) const;
  ::network::TItemData* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemData >&
      items() const;

  // uint32 account_id = 1;
  void clear_account_id();
  uint32_t account_id() const;
  void set_account_id(uint32_t value);
  private:
  uint32_t _internal_account_id() const;
  void _internal_set_account_id(uint32_t value);
  public:

  // uint32 size = 2;
  void clear_size();
  uint32_t size() const;
  void set_size(uint32_t value);
  private:
  uint32_t _internal_size() const;
  void _internal_set_size(uint32_t value);
  public:

  // int64 gold = 3;
  void clear_gold();
  int64_t gold() const;
  void set_gold(int64_t value);
  private:
  int64_t _internal_gold() const;
  void _internal_set_gold(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GDSafeboxSavePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemData > items_;
    uint32_t account_id_;
    uint32_t size_;
    int64_t gold_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gd_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GDItemDestroyPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GDItemDestroyPacket) */ {
 public:
  inline GDItemDestroyPacket() : GDItemDestroyPacket(nullptr) {}
  ~GDItemDestroyPacket() override;
  explicit PROTOBUF_CONSTEXPR GDItemDestroyPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GDItemDestroyPacket(const GDItemDestroyPacket& from);
  GDItemDestroyPacket(GDItemDestroyPacket&& from) noexcept
    : GDItemDestroyPacket() {
    *this = ::std::move(from);
  }

  inline GDItemDestroyPacket& operator=(const GDItemDestroyPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GDItemDestroyPacket& operator=(GDItemDestroyPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GDItemDestroyPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GDItemDestroyPacket* internal_default_instance() {
    return reinterpret_cast<const GDItemDestroyPacket*>(
               &_GDItemDestroyPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(GDItemDestroyPacket& a, GDItemDestroyPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GDItemDestroyPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GDItemDestroyPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GDItemDestroyPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GDItemDestroyPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GDItemDestroyPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GDItemDestroyPacket& from) {
    GDItemDestroyPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GDItemDestroyPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GDItemDestroyPacket";
  }
  protected:
  explicit GDItemDestroyPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemIdFieldNumber = 1,
    kPidFieldNumber = 2,
  };
  // uint32 item_id = 1;
  void clear_item_id();
  uint32_t item_id() const;
  void set_item_id(uint32_t value);
  private:
  uint32_t _internal_item_id() const;
  void _internal_set_item_id(uint32_t value);
  public:

  // uint32 pid = 2;
  void clear_pid();
  uint32_t pid() const;
  void set_pid(uint32_t value);
  private:
  uint32_t _internal_pid() const;
  void _internal_set_pid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GDItemDestroyPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t item_id_;
    uint32_t pid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gd_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GDSkillColorSavePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GDSkillColorSavePacket) */ {
 public:
  inline GDSkillColorSavePacket() : GDSkillColorSavePacket(nullptr) {}
  ~GDSkillColorSavePacket() override;
  explicit PROTOBUF_CONSTEXPR GDSkillColorSavePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GDSkillColorSavePacket(const GDSkillColorSavePacket& from);
  GDSkillColorSavePacket(GDSkillColorSavePacket&& from) noexcept
    : GDSkillColorSavePacket() {
    *this = ::std::move(from);
  }

  inline GDSkillColorSavePacket& operator=(const GDSkillColorSavePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GDSkillColorSavePacket& operator=(GDSkillColorSavePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GDSkillColorSavePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GDSkillColorSavePacket* internal_default_instance() {
    return reinterpret_cast<const GDSkillColorSavePacket*>(
               &_GDSkillColorSavePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(GDSkillColorSavePacket& a, GDSkillColorSavePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GDSkillColorSavePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GDSkillColorSavePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GDSkillColorSavePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GDSkillColorSavePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GDSkillColorSavePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GDSkillColorSavePacket& from) {
    GDSkillColorSavePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GDSkillColorSavePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GDSkillColorSavePacket";
  }
  protected:
  explicit GDSkillColorSavePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSkillColorsFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
  };
  // repeated uint32 skill_colors = 2;
  int skill_colors_size() const;
  private:
  int _internal_skill_colors_size() const;
  public:
  void clear_skill_colors();
  private:
  uint32_t _internal_skill_colors(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_skill_colors() const;
  void _internal_add_skill_colors(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_skill_colors();
  public:
  uint32_t skill_colors(int index) const;
  void set_skill_colors(int index, uint32_t value);
  void add_skill_colors(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      skill_colors() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_skill_colors();

  // uint32 player_id = 1;
  void clear_player_id();
  uint32_t player_id() const;
  void set_player_id(uint32_t value);
  private:
  uint32_t _internal_player_id() const;
  void _internal_set_player_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GDSkillColorSavePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > skill_colors_;
    mutable std::atomic<int> _skill_colors_cached_byte_size_;
    uint32_t player_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gd_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GDPlayerRuneSavePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GDPlayerRuneSavePacket) */ {
 public:
  inline GDPlayerRuneSavePacket() : GDPlayerRuneSavePacket(nullptr) {}
  ~GDPlayerRuneSavePacket() override;
  explicit PROTOBUF_CONSTEXPR GDPlayerRuneSavePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GDPlayerRuneSavePacket(const GDPlayerRuneSavePacket& from);
  GDPlayerRuneSavePacket(GDPlayerRuneSavePacket&& from) noexcept
    : GDPlayerRuneSavePacket() {
    *this = ::std::move(from);
  }

  inline GDPlayerRuneSavePacket& operator=(const GDPlayerRuneSavePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GDPlayerRuneSavePacket& operator=(GDPlayerRuneSavePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GDPlayerRuneSavePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GDPlayerRuneSavePacket* internal_default_instance() {
    return reinterpret_cast<const GDPlayerRuneSavePacket*>(
               &_GDPlayerRuneSavePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(GDPlayerRuneSavePacket& a, GDPlayerRuneSavePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GDPlayerRuneSavePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GDPlayerRuneSavePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GDPlayerRuneSavePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GDPlayerRuneSavePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GDPlayerRuneSavePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GDPlayerRuneSavePacket& from) {
    GDPlayerRuneSavePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GDPlayerRuneSavePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GDPlayerRuneSavePacket";
  }
  protected:
  explicit GDPlayerRuneSavePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRunesFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
  };
  // repeated uint32 runes = 2;
  int runes_size() const;
  private:
  int _internal_runes_size() const;
  public:
  void clear_runes();
  private:
  uint32_t _internal_runes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_runes() const;
  void _internal_add_runes(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_runes();
  public:
  uint32_t runes(int index) const;
  void set_runes(int index, uint32_t value);
  void add_runes(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      runes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_runes();

  // uint32 player_id = 1;
  void clear_player_id();
  uint32_t player_id() const;
  void set_player_id(uint32_t value);
  private:
  uint32_t _internal_player_id() const;
  void _internal_set_player_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GDPlayerRuneSavePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > runes_;
    mutable std::atomic<int> _runes_cached_byte_size_;
    uint32_t player_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gd_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GDEquipmentPageDeletePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GDEquipmentPageDeletePacket) */ {
 public:
  inline GDEquipmentPageDeletePacket() : GDEquipmentPageDeletePacket(nullptr) {}
  ~GDEquipmentPageDeletePacket() override;
  explicit PROTOBUF_CONSTEXPR GDEquipmentPageDeletePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GDEquipmentPageDeletePacket(const GDEquipmentPageDeletePacket& from);
  GDEquipmentPageDeletePacket(GDEquipmentPageDeletePacket&& from) noexcept
    : GDEquipmentPageDeletePacket() {
    *this = ::std::move(from);
  }

  inline GDEquipmentPageDeletePacket& operator=(const GDEquipmentPageDeletePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GDEquipmentPageDeletePacket& operator=(GDEquipmentPageDeletePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GDEquipmentPageDeletePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GDEquipmentPageDeletePacket* internal_default_instance() {
    return reinterpret_cast<const GDEquipmentPageDeletePacket*>(
               &_GDEquipmentPageDeletePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(GDEquipmentPageDeletePacket& a, GDEquipmentPageDeletePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GDEquipmentPageDeletePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GDEquipmentPageDeletePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GDEquipmentPageDeletePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GDEquipmentPageDeletePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GDEquipmentPageDeletePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GDEquipmentPageDeletePacket& from) {
    GDEquipmentPageDeletePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GDEquipmentPageDeletePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GDEquipmentPageDeletePacket";
  }
  protected:
  explicit GDEquipmentPageDeletePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPidFieldNumber = 1,
  };
  // uint32 pid = 1;
  void clear_pid();
  uint32_t pid() const;
  void set_pid(uint32_t value);
  private:
  uint32_t _internal_pid() const;
  void _internal_set_pid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GDEquipmentPageDeletePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t pid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gd_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GDEquipmentPageSavePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GDEquipmentPageSavePacket) */ {
 public:
  inline GDEquipmentPageSavePacket() : GDEquipmentPageSavePacket(nullptr) {}
  ~GDEquipmentPageSavePacket() override;
  explicit PROTOBUF_CONSTEXPR GDEquipmentPageSavePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GDEquipmentPageSavePacket(const GDEquipmentPageSavePacket& from);
  GDEquipmentPageSavePacket(GDEquipmentPageSavePacket&& from) noexcept
    : GDEquipmentPageSavePacket() {
    *this = ::std::move(from);
  }

  inline GDEquipmentPageSavePacket& operator=(const GDEquipmentPageSavePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GDEquipmentPageSavePacket& operator=(GDEquipmentPageSavePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GDEquipmentPageSavePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GDEquipmentPageSavePacket* internal_default_instance() {
    return reinterpret_cast<const GDEquipmentPageSavePacket*>(
               &_GDEquipmentPageSavePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(GDEquipmentPageSavePacket& a, GDEquipmentPageSavePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GDEquipmentPageSavePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GDEquipmentPageSavePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GDEquipmentPageSavePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GDEquipmentPageSavePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GDEquipmentPageSavePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GDEquipmentPageSavePacket& from) {
    GDEquipmentPageSavePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GDEquipmentPageSavePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GDEquipmentPageSavePacket";
  }
  protected:
  explicit GDEquipmentPageSavePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPagesFieldNumber = 1,
  };
  // repeated .network.TEquipmentChangerTable pages = 1;
  int pages_size() const;
  private:
  int _internal_pages_size() const;
  public:
  void clear_pages();
  ::network::TEquipmentChangerTable* mutable_pages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TEquipmentChangerTable >*
      mutable_pages();
  private:
  const ::network::TEquipmentChangerTable& _internal_pages(int index) const;
  ::network::TEquipmentChangerTable* _internal_add_pages();
  public:
  const ::network::TEquipmentChangerTable& pages(int index) const;
  ::network::TEquipmentChangerTable* add_pages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TEquipmentChangerTable >&
      pages() const;

  // @@protoc_insertion_point(class_scope:network.GDEquipmentPageSavePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TEquipmentChangerTable > pages_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gd_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GDFlushCachePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GDFlushCachePacket) */ {
 public:
  inline GDFlushCachePacket() : GDFlushCachePacket(nullptr) {}
  ~GDFlushCachePacket() override;
  explicit PROTOBUF_CONSTEXPR GDFlushCachePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GDFlushCachePacket(const GDFlushCachePacket& from);
  GDFlushCachePacket(GDFlushCachePacket&& from) noexcept
    : GDFlushCachePacket() {
    *this = ::std::move(from);
  }

  inline GDFlushCachePacket& operator=(const GDFlushCachePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GDFlushCachePacket& operator=(GDFlushCachePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GDFlushCachePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GDFlushCachePacket* internal_default_instance() {
    return reinterpret_cast<const GDFlushCachePacket*>(
               &_GDFlushCachePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(GDFlushCachePacket& a, GDFlushCachePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GDFlushCachePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GDFlushCachePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GDFlushCachePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GDFlushCachePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GDFlushCachePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GDFlushCachePacket& from) {
    GDFlushCachePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GDFlushCachePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GDFlushCachePacket";
  }
  protected:
  explicit GDFlushCachePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPidFieldNumber = 1,
  };
  // uint32 pid = 1;
  void clear_pid();
  uint32_t pid() const;
  void set_pid(uint32_t value);
  private:
  uint32_t _internal_pid() const;
  void _internal_set_pid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GDFlushCachePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t pid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gd_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GDItemFlushPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GDItemFlushPacket) */ {
 public:
  inline GDItemFlushPacket() : GDItemFlushPacket(nullptr) {}
  ~GDItemFlushPacket() override;
  explicit PROTOBUF_CONSTEXPR GDItemFlushPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GDItemFlushPacket(const GDItemFlushPacket& from);
  GDItemFlushPacket(GDItemFlushPacket&& from) noexcept
    : GDItemFlushPacket() {
    *this = ::std::move(from);
  }

  inline GDItemFlushPacket& operator=(const GDItemFlushPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GDItemFlushPacket& operator=(GDItemFlushPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GDItemFlushPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GDItemFlushPacket* internal_default_instance() {
    return reinterpret_cast<const GDItemFlushPacket*>(
               &_GDItemFlushPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(GDItemFlushPacket& a, GDItemFlushPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GDItemFlushPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GDItemFlushPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GDItemFlushPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GDItemFlushPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GDItemFlushPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GDItemFlushPacket& from) {
    GDItemFlushPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GDItemFlushPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GDItemFlushPacket";
  }
  protected:
  explicit GDItemFlushPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemIdFieldNumber = 1,
  };
  // uint32 item_id = 1;
  void clear_item_id();
  uint32_t item_id() const;
  void set_item_id(uint32_t value);
  private:
  uint32_t _internal_item_id() const;
  void _internal_set_item_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GDItemFlushPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t item_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gd_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GDLogoutPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GDLogoutPacket) */ {
 public:
  inline GDLogoutPacket() : GDLogoutPacket(nullptr) {}
  ~GDLogoutPacket() override;
  explicit PROTOBUF_CONSTEXPR GDLogoutPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GDLogoutPacket(const GDLogoutPacket& from);
  GDLogoutPacket(GDLogoutPacket&& from) noexcept
    : GDLogoutPacket() {
    *this = ::std::move(from);
  }

  inline GDLogoutPacket& operator=(const GDLogoutPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GDLogoutPacket& operator=(GDLogoutPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GDLogoutPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GDLogoutPacket* internal_default_instance() {
    return reinterpret_cast<const GDLogoutPacket*>(
               &_GDLogoutPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(GDLogoutPacket& a, GDLogoutPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GDLogoutPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GDLogoutPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GDLogoutPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GDLogoutPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GDLogoutPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GDLogoutPacket& from) {
    GDLogoutPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GDLogoutPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GDLogoutPacket";
  }
  protected:
  explicit GDLogoutPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLoginFieldNumber = 1,
    kPasswdFieldNumber = 2,
  };
  // bytes login = 1;
  void clear_login();
  const std::string& login() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_login(ArgT0&& arg0, ArgT... args);
  std::string* mutable_login();
  PROTOBUF_NODISCARD std::string* release_login();
  void set_allocated_login(std::string* login);
  private:
  const std::string& _internal_login() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_login(const std::string& value);
  std::string* _internal_mutable_login();
  public:

  // bytes passwd = 2;
  void clear_passwd();
  const std::string& passwd() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_passwd(ArgT0&& arg0, ArgT... args);
  std::string* mutable_passwd();
  PROTOBUF_NODISCARD std::string* release_passwd();
  void set_allocated_passwd(std::string* passwd);
  private:
  const std::string& _internal_passwd() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_passwd(const std::string& value);
  std::string* _internal_mutable_passwd();
  public:

  // @@protoc_insertion_point(class_scope:network.GDLogoutPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr login_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr passwd_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gd_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GDSafeboxChangeSizePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GDSafeboxChangeSizePacket) */ {
 public:
  inline GDSafeboxChangeSizePacket() : GDSafeboxChangeSizePacket(nullptr) {}
  ~GDSafeboxChangeSizePacket() override;
  explicit PROTOBUF_CONSTEXPR GDSafeboxChangeSizePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GDSafeboxChangeSizePacket(const GDSafeboxChangeSizePacket& from);
  GDSafeboxChangeSizePacket(GDSafeboxChangeSizePacket&& from) noexcept
    : GDSafeboxChangeSizePacket() {
    *this = ::std::move(from);
  }

  inline GDSafeboxChangeSizePacket& operator=(const GDSafeboxChangeSizePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GDSafeboxChangeSizePacket& operator=(GDSafeboxChangeSizePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GDSafeboxChangeSizePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GDSafeboxChangeSizePacket* internal_default_instance() {
    return reinterpret_cast<const GDSafeboxChangeSizePacket*>(
               &_GDSafeboxChangeSizePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(GDSafeboxChangeSizePacket& a, GDSafeboxChangeSizePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GDSafeboxChangeSizePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GDSafeboxChangeSizePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GDSafeboxChangeSizePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GDSafeboxChangeSizePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GDSafeboxChangeSizePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GDSafeboxChangeSizePacket& from) {
    GDSafeboxChangeSizePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GDSafeboxChangeSizePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GDSafeboxChangeSizePacket";
  }
  protected:
  explicit GDSafeboxChangeSizePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 1,
    kSizeFieldNumber = 2,
  };
  // uint32 account_id = 1;
  void clear_account_id();
  uint32_t account_id() const;
  void set_account_id(uint32_t value);
  private:
  uint32_t _internal_account_id() const;
  void _internal_set_account_id(uint32_t value);
  public:

  // uint32 size = 2;
  void clear_size();
  uint32_t size() const;
  void set_size(uint32_t value);
  private:
  uint32_t _internal_size() const;
  void _internal_set_size(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GDSafeboxChangeSizePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t account_id_;
    uint32_t size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gd_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GDSafeboxChangePasswordPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GDSafeboxChangePasswordPacket) */ {
 public:
  inline GDSafeboxChangePasswordPacket() : GDSafeboxChangePasswordPacket(nullptr) {}
  ~GDSafeboxChangePasswordPacket() override;
  explicit PROTOBUF_CONSTEXPR GDSafeboxChangePasswordPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GDSafeboxChangePasswordPacket(const GDSafeboxChangePasswordPacket& from);
  GDSafeboxChangePasswordPacket(GDSafeboxChangePasswordPacket&& from) noexcept
    : GDSafeboxChangePasswordPacket() {
    *this = ::std::move(from);
  }

  inline GDSafeboxChangePasswordPacket& operator=(const GDSafeboxChangePasswordPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GDSafeboxChangePasswordPacket& operator=(GDSafeboxChangePasswordPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GDSafeboxChangePasswordPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GDSafeboxChangePasswordPacket* internal_default_instance() {
    return reinterpret_cast<const GDSafeboxChangePasswordPacket*>(
               &_GDSafeboxChangePasswordPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(GDSafeboxChangePasswordPacket& a, GDSafeboxChangePasswordPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GDSafeboxChangePasswordPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GDSafeboxChangePasswordPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GDSafeboxChangePasswordPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GDSafeboxChangePasswordPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GDSafeboxChangePasswordPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GDSafeboxChangePasswordPacket& from) {
    GDSafeboxChangePasswordPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GDSafeboxChangePasswordPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GDSafeboxChangePasswordPacket";
  }
  protected:
  explicit GDSafeboxChangePasswordPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOldPasswordFieldNumber = 2,
    kNewPasswordFieldNumber = 3,
    kAccountIdFieldNumber = 1,
  };
  // bytes old_password = 2;
  void clear_old_password();
  const std::string& old_password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_old_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_old_password();
  PROTOBUF_NODISCARD std::string* release_old_password();
  void set_allocated_old_password(std::string* old_password);
  private:
  const std::string& _internal_old_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_old_password(const std::string& value);
  std::string* _internal_mutable_old_password();
  public:

  // bytes new_password = 3;
  void clear_new_password();
  const std::string& new_password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_new_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_new_password();
  PROTOBUF_NODISCARD std::string* release_new_password();
  void set_allocated_new_password(std::string* new_password);
  private:
  const std::string& _internal_new_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_new_password(const std::string& value);
  std::string* _internal_mutable_new_password();
  public:

  // uint32 account_id = 1;
  void clear_account_id();
  uint32_t account_id() const;
  void set_account_id(uint32_t value);
  private:
  uint32_t _internal_account_id() const;
  void _internal_set_account_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GDSafeboxChangePasswordPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr old_password_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr new_password_;
    uint32_t account_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gd_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GDAddAffectPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GDAddAffectPacket) */ {
 public:
  inline GDAddAffectPacket() : GDAddAffectPacket(nullptr) {}
  ~GDAddAffectPacket() override;
  explicit PROTOBUF_CONSTEXPR GDAddAffectPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GDAddAffectPacket(const GDAddAffectPacket& from);
  GDAddAffectPacket(GDAddAffectPacket&& from) noexcept
    : GDAddAffectPacket() {
    *this = ::std::move(from);
  }

  inline GDAddAffectPacket& operator=(const GDAddAffectPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GDAddAffectPacket& operator=(GDAddAffectPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GDAddAffectPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GDAddAffectPacket* internal_default_instance() {
    return reinterpret_cast<const GDAddAffectPacket*>(
               &_GDAddAffectPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(GDAddAffectPacket& a, GDAddAffectPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GDAddAffectPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GDAddAffectPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GDAddAffectPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GDAddAffectPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GDAddAffectPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GDAddAffectPacket& from) {
    GDAddAffectPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GDAddAffectPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GDAddAffectPacket";
  }
  protected:
  explicit GDAddAffectPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kElemFieldNumber = 2,
    kPidFieldNumber = 1,
  };
  // .TPacketAffectElement elem = 2;
  bool has_elem() const;
  private:
  bool _internal_has_elem() const;
  public:
  void clear_elem();
  const ::TPacketAffectElement& elem() const;
  PROTOBUF_NODISCARD ::TPacketAffectElement* release_elem();
  ::TPacketAffectElement* mutable_elem();
  void set_allocated_elem(::TPacketAffectElement* elem);
  private:
  const ::TPacketAffectElement& _internal_elem() const;
  ::TPacketAffectElement* _internal_mutable_elem();
  public:
  void unsafe_arena_set_allocated_elem(
      ::TPacketAffectElement* elem);
  ::TPacketAffectElement* unsafe_arena_release_elem();

  // uint32 pid = 1;
  void clear_pid();
  uint32_t pid() const;
  void set_pid(uint32_t value);
  private:
  uint32_t _internal_pid() const;
  void _internal_set_pid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GDAddAffectPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::TPacketAffectElement* elem_;
    uint32_t pid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gd_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GDRemoveAffectPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GDRemoveAffectPacket) */ {
 public:
  inline GDRemoveAffectPacket() : GDRemoveAffectPacket(nullptr) {}
  ~GDRemoveAffectPacket() override;
  explicit PROTOBUF_CONSTEXPR GDRemoveAffectPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GDRemoveAffectPacket(const GDRemoveAffectPacket& from);
  GDRemoveAffectPacket(GDRemoveAffectPacket&& from) noexcept
    : GDRemoveAffectPacket() {
    *this = ::std::move(from);
  }

  inline GDRemoveAffectPacket& operator=(const GDRemoveAffectPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GDRemoveAffectPacket& operator=(GDRemoveAffectPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GDRemoveAffectPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GDRemoveAffectPacket* internal_default_instance() {
    return reinterpret_cast<const GDRemoveAffectPacket*>(
               &_GDRemoveAffectPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(GDRemoveAffectPacket& a, GDRemoveAffectPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GDRemoveAffectPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GDRemoveAffectPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GDRemoveAffectPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GDRemoveAffectPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GDRemoveAffectPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GDRemoveAffectPacket& from) {
    GDRemoveAffectPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GDRemoveAffectPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GDRemoveAffectPacket";
  }
  protected:
  explicit GDRemoveAffectPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPidFieldNumber = 1,
    kTypeFieldNumber = 2,
    kApplyOnFieldNumber = 3,
    kApplyValueFieldNumber = 4,
  };
  // uint32 pid = 1;
  void clear_pid();
  uint32_t pid() const;
  void set_pid(uint32_t value);
  private:
  uint32_t _internal_pid() const;
  void _internal_set_pid(uint32_t value);
  public:

  // uint32 type = 2;
  void clear_type();
  uint32_t type() const;
  void set_type(uint32_t value);
  private:
  uint32_t _internal_type() const;
  void _internal_set_type(uint32_t value);
  public:

  // uint32 apply_on = 3;
  void clear_apply_on();
  uint32_t apply_on() const;
  void set_apply_on(uint32_t value);
  private:
  uint32_t _internal_apply_on() const;
  void _internal_set_apply_on(uint32_t value);
  public:

  // int32 apply_value = 4;
  void clear_apply_value();
  int32_t apply_value() const;
  void set_apply_value(int32_t value);
  private:
  int32_t _internal_apply_value() const;
  void _internal_set_apply_value(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GDRemoveAffectPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t pid_;
    uint32_t type_;
    uint32_t apply_on_;
    int32_t apply_value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gd_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GDHighscoreRegisterPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GDHighscoreRegisterPacket) */ {
 public:
  inline GDHighscoreRegisterPacket() : GDHighscoreRegisterPacket(nullptr) {}
  ~GDHighscoreRegisterPacket() override;
  explicit PROTOBUF_CONSTEXPR GDHighscoreRegisterPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GDHighscoreRegisterPacket(const GDHighscoreRegisterPacket& from);
  GDHighscoreRegisterPacket(GDHighscoreRegisterPacket&& from) noexcept
    : GDHighscoreRegisterPacket() {
    *this = ::std::move(from);
  }

  inline GDHighscoreRegisterPacket& operator=(const GDHighscoreRegisterPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GDHighscoreRegisterPacket& operator=(GDHighscoreRegisterPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GDHighscoreRegisterPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GDHighscoreRegisterPacket* internal_default_instance() {
    return reinterpret_cast<const GDHighscoreRegisterPacket*>(
               &_GDHighscoreRegisterPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(GDHighscoreRegisterPacket& a, GDHighscoreRegisterPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GDHighscoreRegisterPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GDHighscoreRegisterPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GDHighscoreRegisterPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GDHighscoreRegisterPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GDHighscoreRegisterPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GDHighscoreRegisterPacket& from) {
    GDHighscoreRegisterPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GDHighscoreRegisterPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GDHighscoreRegisterPacket";
  }
  protected:
  explicit GDHighscoreRegisterPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBoardFieldNumber = 4,
    kPidFieldNumber = 1,
    kValueFieldNumber = 2,
    kDirFieldNumber = 3,
  };
  // bytes board = 4;
  void clear_board();
  const std::string& board() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_board(ArgT0&& arg0, ArgT... args);
  std::string* mutable_board();
  PROTOBUF_NODISCARD std::string* release_board();
  void set_allocated_board(std::string* board);
  private:
  const std::string& _internal_board() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_board(const std::string& value);
  std::string* _internal_mutable_board();
  public:

  // uint32 pid = 1;
  void clear_pid();
  uint32_t pid() const;
  void set_pid(uint32_t value);
  private:
  uint32_t _internal_pid() const;
  void _internal_set_pid(uint32_t value);
  public:

  // int32 value = 2;
  void clear_value();
  int32_t value() const;
  void set_value(int32_t value);
  private:
  int32_t _internal_value() const;
  void _internal_set_value(int32_t value);
  public:

  // int32 dir = 3;
  void clear_dir();
  int32_t dir() const;
  void set_dir(int32_t value);
  private:
  int32_t _internal_dir() const;
  void _internal_set_dir(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GDHighscoreRegisterPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr board_;
    uint32_t pid_;
    int32_t value_;
    int32_t dir_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gd_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GDSMSPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GDSMSPacket) */ {
 public:
  inline GDSMSPacket() : GDSMSPacket(nullptr) {}
  ~GDSMSPacket() override;
  explicit PROTOBUF_CONSTEXPR GDSMSPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GDSMSPacket(const GDSMSPacket& from);
  GDSMSPacket(GDSMSPacket&& from) noexcept
    : GDSMSPacket() {
    *this = ::std::move(from);
  }

  inline GDSMSPacket& operator=(const GDSMSPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GDSMSPacket& operator=(GDSMSPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GDSMSPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GDSMSPacket* internal_default_instance() {
    return reinterpret_cast<const GDSMSPacket*>(
               &_GDSMSPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(GDSMSPacket& a, GDSMSPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GDSMSPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GDSMSPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GDSMSPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GDSMSPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GDSMSPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GDSMSPacket& from) {
    GDSMSPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GDSMSPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GDSMSPacket";
  }
  protected:
  explicit GDSMSPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromFieldNumber = 1,
    kToFieldNumber = 2,
    kMobileFieldNumber = 3,
    kMsgFieldNumber = 4,
  };
  // bytes from = 1;
  void clear_from();
  const std::string& from() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_from(ArgT0&& arg0, ArgT... args);
  std::string* mutable_from();
  PROTOBUF_NODISCARD std::string* release_from();
  void set_allocated_from(std::string* from);
  private:
  const std::string& _internal_from() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_from(const std::string& value);
  std::string* _internal_mutable_from();
  public:

  // bytes to = 2;
  void clear_to();
  const std::string& to() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_to(ArgT0&& arg0, ArgT... args);
  std::string* mutable_to();
  PROTOBUF_NODISCARD std::string* release_to();
  void set_allocated_to(std::string* to);
  private:
  const std::string& _internal_to() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_to(const std::string& value);
  std::string* _internal_mutable_to();
  public:

  // bytes mobile = 3;
  void clear_mobile();
  const std::string& mobile() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mobile(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mobile();
  PROTOBUF_NODISCARD std::string* release_mobile();
  void set_allocated_mobile(std::string* mobile);
  private:
  const std::string& _internal_mobile() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mobile(const std::string& value);
  std::string* _internal_mutable_mobile();
  public:

  // bytes msg = 4;
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_NODISCARD std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // @@protoc_insertion_point(class_scope:network.GDSMSPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mobile_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gd_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GDRequestGuildPrivPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GDRequestGuildPrivPacket) */ {
 public:
  inline GDRequestGuildPrivPacket() : GDRequestGuildPrivPacket(nullptr) {}
  ~GDRequestGuildPrivPacket() override;
  explicit PROTOBUF_CONSTEXPR GDRequestGuildPrivPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GDRequestGuildPrivPacket(const GDRequestGuildPrivPacket& from);
  GDRequestGuildPrivPacket(GDRequestGuildPrivPacket&& from) noexcept
    : GDRequestGuildPrivPacket() {
    *this = ::std::move(from);
  }

  inline GDRequestGuildPrivPacket& operator=(const GDRequestGuildPrivPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GDRequestGuildPrivPacket& operator=(GDRequestGuildPrivPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GDRequestGuildPrivPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GDRequestGuildPrivPacket* internal_default_instance() {
    return reinterpret_cast<const GDRequestGuildPrivPacket*>(
               &_GDRequestGuildPrivPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(GDRequestGuildPrivPacket& a, GDRequestGuildPrivPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GDRequestGuildPrivPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GDRequestGuildPrivPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GDRequestGuildPrivPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GDRequestGuildPrivPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GDRequestGuildPrivPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GDRequestGuildPrivPacket& from) {
    GDRequestGuildPrivPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GDRequestGuildPrivPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GDRequestGuildPrivPacket";
  }
  protected:
  explicit GDRequestGuildPrivPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kValueFieldNumber = 2,
    kGuildIdFieldNumber = 3,
    kDurationSecFieldNumber = 4,
  };
  // uint32 type = 1;
  void clear_type();
  uint32_t type() const;
  void set_type(uint32_t value);
  private:
  uint32_t _internal_type() const;
  void _internal_set_type(uint32_t value);
  public:

  // int32 value = 2;
  void clear_value();
  int32_t value() const;
  void set_value(int32_t value);
  private:
  int32_t _internal_value() const;
  void _internal_set_value(int32_t value);
  public:

  // uint32 guild_id = 3;
  void clear_guild_id();
  uint32_t guild_id() const;
  void set_guild_id(uint32_t value);
  private:
  uint32_t _internal_guild_id() const;
  void _internal_set_guild_id(uint32_t value);
  public:

  // uint32 duration_sec = 4;
  void clear_duration_sec();
  uint32_t duration_sec() const;
  void set_duration_sec(uint32_t value);
  private:
  uint32_t _internal_duration_sec() const;
  void _internal_set_duration_sec(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GDRequestGuildPrivPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t type_;
    int32_t value_;
    uint32_t guild_id_;
    uint32_t duration_sec_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gd_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GDRequestEmpirePrivPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GDRequestEmpirePrivPacket) */ {
 public:
  inline GDRequestEmpirePrivPacket() : GDRequestEmpirePrivPacket(nullptr) {}
  ~GDRequestEmpirePrivPacket() override;
  explicit PROTOBUF_CONSTEXPR GDRequestEmpirePrivPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GDRequestEmpirePrivPacket(const GDRequestEmpirePrivPacket& from);
  GDRequestEmpirePrivPacket(GDRequestEmpirePrivPacket&& from) noexcept
    : GDRequestEmpirePrivPacket() {
    *this = ::std::move(from);
  }

  inline GDRequestEmpirePrivPacket& operator=(const GDRequestEmpirePrivPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GDRequestEmpirePrivPacket& operator=(GDRequestEmpirePrivPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GDRequestEmpirePrivPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GDRequestEmpirePrivPacket* internal_default_instance() {
    return reinterpret_cast<const GDRequestEmpirePrivPacket*>(
               &_GDRequestEmpirePrivPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(GDRequestEmpirePrivPacket& a, GDRequestEmpirePrivPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GDRequestEmpirePrivPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GDRequestEmpirePrivPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GDRequestEmpirePrivPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GDRequestEmpirePrivPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GDRequestEmpirePrivPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GDRequestEmpirePrivPacket& from) {
    GDRequestEmpirePrivPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GDRequestEmpirePrivPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GDRequestEmpirePrivPacket";
  }
  protected:
  explicit GDRequestEmpirePrivPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kValueFieldNumber = 2,
    kEmpireFieldNumber = 3,
    kDurationSecFieldNumber = 4,
  };
  // uint32 type = 1;
  void clear_type();
  uint32_t type() const;
  void set_type(uint32_t value);
  private:
  uint32_t _internal_type() const;
  void _internal_set_type(uint32_t value);
  public:

  // int32 value = 2;
  void clear_value();
  int32_t value() const;
  void set_value(int32_t value);
  private:
  int32_t _internal_value() const;
  void _internal_set_value(int32_t value);
  public:

  // uint32 empire = 3;
  void clear_empire();
  uint32_t empire() const;
  void set_empire(uint32_t value);
  private:
  uint32_t _internal_empire() const;
  void _internal_set_empire(uint32_t value);
  public:

  // uint32 duration_sec = 4;
  void clear_duration_sec();
  uint32_t duration_sec() const;
  void set_duration_sec(uint32_t value);
  private:
  uint32_t _internal_duration_sec() const;
  void _internal_set_duration_sec(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GDRequestEmpirePrivPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t type_;
    int32_t value_;
    uint32_t empire_;
    uint32_t duration_sec_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gd_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GDRequestCharacterPrivPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GDRequestCharacterPrivPacket) */ {
 public:
  inline GDRequestCharacterPrivPacket() : GDRequestCharacterPrivPacket(nullptr) {}
  ~GDRequestCharacterPrivPacket() override;
  explicit PROTOBUF_CONSTEXPR GDRequestCharacterPrivPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GDRequestCharacterPrivPacket(const GDRequestCharacterPrivPacket& from);
  GDRequestCharacterPrivPacket(GDRequestCharacterPrivPacket&& from) noexcept
    : GDRequestCharacterPrivPacket() {
    *this = ::std::move(from);
  }

  inline GDRequestCharacterPrivPacket& operator=(const GDRequestCharacterPrivPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GDRequestCharacterPrivPacket& operator=(GDRequestCharacterPrivPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GDRequestCharacterPrivPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GDRequestCharacterPrivPacket* internal_default_instance() {
    return reinterpret_cast<const GDRequestCharacterPrivPacket*>(
               &_GDRequestCharacterPrivPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(GDRequestCharacterPrivPacket& a, GDRequestCharacterPrivPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GDRequestCharacterPrivPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GDRequestCharacterPrivPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GDRequestCharacterPrivPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GDRequestCharacterPrivPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GDRequestCharacterPrivPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GDRequestCharacterPrivPacket& from) {
    GDRequestCharacterPrivPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GDRequestCharacterPrivPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GDRequestCharacterPrivPacket";
  }
  protected:
  explicit GDRequestCharacterPrivPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kValueFieldNumber = 2,
    kPidFieldNumber = 3,
  };
  // uint32 type = 1;
  void clear_type();
  uint32_t type() const;
  void set_type(uint32_t value);
  private:
  uint32_t _internal_type() const;
  void _internal_set_type(uint32_t value);
  public:

  // int32 value = 2;
  void clear_value();
  int32_t value() const;
  void set_value(int32_t value);
  private:
  int32_t _internal_value() const;
  void _internal_set_value(int32_t value);
  public:

  // uint32 pid = 3;
  void clear_pid();
  uint32_t pid() const;
  void set_pid(uint32_t value);
  private:
  uint32_t _internal_pid() const;
  void _internal_set_pid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GDRequestCharacterPrivPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t type_;
    int32_t value_;
    uint32_t pid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gd_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GDMoneyLogPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GDMoneyLogPacket) */ {
 public:
  inline GDMoneyLogPacket() : GDMoneyLogPacket(nullptr) {}
  ~GDMoneyLogPacket() override;
  explicit PROTOBUF_CONSTEXPR GDMoneyLogPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GDMoneyLogPacket(const GDMoneyLogPacket& from);
  GDMoneyLogPacket(GDMoneyLogPacket&& from) noexcept
    : GDMoneyLogPacket() {
    *this = ::std::move(from);
  }

  inline GDMoneyLogPacket& operator=(const GDMoneyLogPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GDMoneyLogPacket& operator=(GDMoneyLogPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GDMoneyLogPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GDMoneyLogPacket* internal_default_instance() {
    return reinterpret_cast<const GDMoneyLogPacket*>(
               &_GDMoneyLogPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(GDMoneyLogPacket& a, GDMoneyLogPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GDMoneyLogPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GDMoneyLogPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GDMoneyLogPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GDMoneyLogPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GDMoneyLogPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GDMoneyLogPacket& from) {
    GDMoneyLogPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GDMoneyLogPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GDMoneyLogPacket";
  }
  protected:
  explicit GDMoneyLogPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kVnumFieldNumber = 2,
    kGoldFieldNumber = 3,
  };
  // uint32 type = 1;
  void clear_type();
  uint32_t type() const;
  void set_type(uint32_t value);
  private:
  uint32_t _internal_type() const;
  void _internal_set_type(uint32_t value);
  public:

  // uint32 vnum = 2;
  void clear_vnum();
  uint32_t vnum() const;
  void set_vnum(uint32_t value);
  private:
  uint32_t _internal_vnum() const;
  void _internal_set_vnum(uint32_t value);
  public:

  // int64 gold = 3;
  void clear_gold();
  int64_t gold() const;
  void set_gold(int64_t value);
  private:
  int64_t _internal_gold() const;
  void _internal_set_gold(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GDMoneyLogPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t type_;
    uint32_t vnum_;
    int64_t gold_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gd_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GDSetEventFlagPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GDSetEventFlagPacket) */ {
 public:
  inline GDSetEventFlagPacket() : GDSetEventFlagPacket(nullptr) {}
  ~GDSetEventFlagPacket() override;
  explicit PROTOBUF_CONSTEXPR GDSetEventFlagPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GDSetEventFlagPacket(const GDSetEventFlagPacket& from);
  GDSetEventFlagPacket(GDSetEventFlagPacket&& from) noexcept
    : GDSetEventFlagPacket() {
    *this = ::std::move(from);
  }

  inline GDSetEventFlagPacket& operator=(const GDSetEventFlagPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GDSetEventFlagPacket& operator=(GDSetEventFlagPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GDSetEventFlagPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GDSetEventFlagPacket* internal_default_instance() {
    return reinterpret_cast<const GDSetEventFlagPacket*>(
               &_GDSetEventFlagPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(GDSetEventFlagPacket& a, GDSetEventFlagPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GDSetEventFlagPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GDSetEventFlagPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GDSetEventFlagPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GDSetEventFlagPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GDSetEventFlagPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GDSetEventFlagPacket& from) {
    GDSetEventFlagPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GDSetEventFlagPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GDSetEventFlagPacket";
  }
  protected:
  explicit GDSetEventFlagPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFlagNameFieldNumber = 1,
    kValueFieldNumber = 2,
    kIsAddFieldNumber = 3,
  };
  // bytes flag_name = 1;
  void clear_flag_name();
  const std::string& flag_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_flag_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_flag_name();
  PROTOBUF_NODISCARD std::string* release_flag_name();
  void set_allocated_flag_name(std::string* flag_name);
  private:
  const std::string& _internal_flag_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_flag_name(const std::string& value);
  std::string* _internal_mutable_flag_name();
  public:

  // int32 value = 2;
  void clear_value();
  int32_t value() const;
  void set_value(int32_t value);
  private:
  int32_t _internal_value() const;
  void _internal_set_value(int32_t value);
  public:

  // bool is_add = 3;
  void clear_is_add();
  bool is_add() const;
  void set_is_add(bool value);
  private:
  bool _internal_is_add() const;
  void _internal_set_is_add(bool value);
  public:

  // @@protoc_insertion_point(class_scope:network.GDSetEventFlagPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr flag_name_;
    int32_t value_;
    bool is_add_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gd_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GDCreateObjectPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GDCreateObjectPacket) */ {
 public:
  inline GDCreateObjectPacket() : GDCreateObjectPacket(nullptr) {}
  ~GDCreateObjectPacket() override;
  explicit PROTOBUF_CONSTEXPR GDCreateObjectPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GDCreateObjectPacket(const GDCreateObjectPacket& from);
  GDCreateObjectPacket(GDCreateObjectPacket&& from) noexcept
    : GDCreateObjectPacket() {
    *this = ::std::move(from);
  }

  inline GDCreateObjectPacket& operator=(const GDCreateObjectPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GDCreateObjectPacket& operator=(GDCreateObjectPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GDCreateObjectPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GDCreateObjectPacket* internal_default_instance() {
    return reinterpret_cast<const GDCreateObjectPacket*>(
               &_GDCreateObjectPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(GDCreateObjectPacket& a, GDCreateObjectPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GDCreateObjectPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GDCreateObjectPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GDCreateObjectPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GDCreateObjectPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GDCreateObjectPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GDCreateObjectPacket& from) {
    GDCreateObjectPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GDCreateObjectPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GDCreateObjectPacket";
  }
  protected:
  explicit GDCreateObjectPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVnumFieldNumber = 1,
    kLandIdFieldNumber = 2,
    kMapIndexFieldNumber = 3,
    kXFieldNumber = 4,
    kYFieldNumber = 5,
    kRotXFieldNumber = 6,
    kRotYFieldNumber = 7,
    kRotZFieldNumber = 8,
  };
  // uint32 vnum = 1;
  void clear_vnum();
  uint32_t vnum() const;
  void set_vnum(uint32_t value);
  private:
  uint32_t _internal_vnum() const;
  void _internal_set_vnum(uint32_t value);
  public:

  // uint32 land_id = 2;
  void clear_land_id();
  uint32_t land_id() const;
  void set_land_id(uint32_t value);
  private:
  uint32_t _internal_land_id() const;
  void _internal_set_land_id(uint32_t value);
  public:

  // uint32 map_index = 3;
  void clear_map_index();
  uint32_t map_index() const;
  void set_map_index(uint32_t value);
  private:
  uint32_t _internal_map_index() const;
  void _internal_set_map_index(uint32_t value);
  public:

  // int32 x = 4;
  void clear_x();
  int32_t x() const;
  void set_x(int32_t value);
  private:
  int32_t _internal_x() const;
  void _internal_set_x(int32_t value);
  public:

  // int32 y = 5;
  void clear_y();
  int32_t y() const;
  void set_y(int32_t value);
  private:
  int32_t _internal_y() const;
  void _internal_set_y(int32_t value);
  public:

  // float rot_x = 6;
  void clear_rot_x();
  float rot_x() const;
  void set_rot_x(float value);
  private:
  float _internal_rot_x() const;
  void _internal_set_rot_x(float value);
  public:

  // float rot_y = 7;
  void clear_rot_y();
  float rot_y() const;
  void set_rot_y(float value);
  private:
  float _internal_rot_y() const;
  void _internal_set_rot_y(float value);
  public:

  // float rot_z = 8;
  void clear_rot_z();
  float rot_z() const;
  void set_rot_z(float value);
  private:
  float _internal_rot_z() const;
  void _internal_set_rot_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:network.GDCreateObjectPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t vnum_;
    uint32_t land_id_;
    uint32_t map_index_;
    int32_t x_;
    int32_t y_;
    float rot_x_;
    float rot_y_;
    float rot_z_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gd_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GDDeleteObjectPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GDDeleteObjectPacket) */ {
 public:
  inline GDDeleteObjectPacket() : GDDeleteObjectPacket(nullptr) {}
  ~GDDeleteObjectPacket() override;
  explicit PROTOBUF_CONSTEXPR GDDeleteObjectPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GDDeleteObjectPacket(const GDDeleteObjectPacket& from);
  GDDeleteObjectPacket(GDDeleteObjectPacket&& from) noexcept
    : GDDeleteObjectPacket() {
    *this = ::std::move(from);
  }

  inline GDDeleteObjectPacket& operator=(const GDDeleteObjectPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GDDeleteObjectPacket& operator=(GDDeleteObjectPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GDDeleteObjectPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GDDeleteObjectPacket* internal_default_instance() {
    return reinterpret_cast<const GDDeleteObjectPacket*>(
               &_GDDeleteObjectPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(GDDeleteObjectPacket& a, GDDeleteObjectPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GDDeleteObjectPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GDDeleteObjectPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GDDeleteObjectPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GDDeleteObjectPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GDDeleteObjectPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GDDeleteObjectPacket& from) {
    GDDeleteObjectPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GDDeleteObjectPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GDDeleteObjectPacket";
  }
  protected:
  explicit GDDeleteObjectPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // uint32 id = 1;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GDDeleteObjectPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gd_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GDUpdateLandPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GDUpdateLandPacket) */ {
 public:
  inline GDUpdateLandPacket() : GDUpdateLandPacket(nullptr) {}
  ~GDUpdateLandPacket() override;
  explicit PROTOBUF_CONSTEXPR GDUpdateLandPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GDUpdateLandPacket(const GDUpdateLandPacket& from);
  GDUpdateLandPacket(GDUpdateLandPacket&& from) noexcept
    : GDUpdateLandPacket() {
    *this = ::std::move(from);
  }

  inline GDUpdateLandPacket& operator=(const GDUpdateLandPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GDUpdateLandPacket& operator=(GDUpdateLandPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GDUpdateLandPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GDUpdateLandPacket* internal_default_instance() {
    return reinterpret_cast<const GDUpdateLandPacket*>(
               &_GDUpdateLandPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(GDUpdateLandPacket& a, GDUpdateLandPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GDUpdateLandPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GDUpdateLandPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GDUpdateLandPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GDUpdateLandPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GDUpdateLandPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GDUpdateLandPacket& from) {
    GDUpdateLandPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GDUpdateLandPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GDUpdateLandPacket";
  }
  protected:
  explicit GDUpdateLandPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGuildIdFieldNumber = 1,
    kLandIdFieldNumber = 2,
  };
  // uint32 guild_id = 1;
  void clear_guild_id();
  uint32_t guild_id() const;
  void set_guild_id(uint32_t value);
  private:
  uint32_t _internal_guild_id() const;
  void _internal_set_guild_id(uint32_t value);
  public:

  // uint32 land_id = 2;
  void clear_land_id();
  uint32_t land_id() const;
  void set_land_id(uint32_t value);
  private:
  uint32_t _internal_land_id() const;
  void _internal_set_land_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GDUpdateLandPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t guild_id_;
    uint32_t land_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gd_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GDVCardPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GDVCardPacket) */ {
 public:
  inline GDVCardPacket() : GDVCardPacket(nullptr) {}
  ~GDVCardPacket() override;
  explicit PROTOBUF_CONSTEXPR GDVCardPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GDVCardPacket(const GDVCardPacket& from);
  GDVCardPacket(GDVCardPacket&& from) noexcept
    : GDVCardPacket() {
    *this = ::std::move(from);
  }

  inline GDVCardPacket& operator=(const GDVCardPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GDVCardPacket& operator=(GDVCardPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GDVCardPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GDVCardPacket* internal_default_instance() {
    return reinterpret_cast<const GDVCardPacket*>(
               &_GDVCardPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(GDVCardPacket& a, GDVCardPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GDVCardPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GDVCardPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GDVCardPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GDVCardPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GDVCardPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GDVCardPacket& from) {
    GDVCardPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GDVCardPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GDVCardPacket";
  }
  protected:
  explicit GDVCardPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSellCharacterFieldNumber = 2,
    kSellAccountFieldNumber = 3,
    kBuyCharacterFieldNumber = 4,
    kBuyAccountFieldNumber = 5,
    kIdFieldNumber = 1,
  };
  // bytes sell_character = 2;
  void clear_sell_character();
  const std::string& sell_character() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sell_character(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sell_character();
  PROTOBUF_NODISCARD std::string* release_sell_character();
  void set_allocated_sell_character(std::string* sell_character);
  private:
  const std::string& _internal_sell_character() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sell_character(const std::string& value);
  std::string* _internal_mutable_sell_character();
  public:

  // bytes sell_account = 3;
  void clear_sell_account();
  const std::string& sell_account() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sell_account(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sell_account();
  PROTOBUF_NODISCARD std::string* release_sell_account();
  void set_allocated_sell_account(std::string* sell_account);
  private:
  const std::string& _internal_sell_account() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sell_account(const std::string& value);
  std::string* _internal_mutable_sell_account();
  public:

  // bytes buy_character = 4;
  void clear_buy_character();
  const std::string& buy_character() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_buy_character(ArgT0&& arg0, ArgT... args);
  std::string* mutable_buy_character();
  PROTOBUF_NODISCARD std::string* release_buy_character();
  void set_allocated_buy_character(std::string* buy_character);
  private:
  const std::string& _internal_buy_character() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_buy_character(const std::string& value);
  std::string* _internal_mutable_buy_character();
  public:

  // bytes buy_account = 5;
  void clear_buy_account();
  const std::string& buy_account() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_buy_account(ArgT0&& arg0, ArgT... args);
  std::string* mutable_buy_account();
  PROTOBUF_NODISCARD std::string* release_buy_account();
  void set_allocated_buy_account(std::string* buy_account);
  private:
  const std::string& _internal_buy_account() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_buy_account(const std::string& value);
  std::string* _internal_mutable_buy_account();
  public:

  // uint32 id = 1;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GDVCardPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sell_character_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sell_account_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buy_character_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buy_account_;
    uint32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gd_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GDBlockChatPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GDBlockChatPacket) */ {
 public:
  inline GDBlockChatPacket() : GDBlockChatPacket(nullptr) {}
  ~GDBlockChatPacket() override;
  explicit PROTOBUF_CONSTEXPR GDBlockChatPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GDBlockChatPacket(const GDBlockChatPacket& from);
  GDBlockChatPacket(GDBlockChatPacket&& from) noexcept
    : GDBlockChatPacket() {
    *this = ::std::move(from);
  }

  inline GDBlockChatPacket& operator=(const GDBlockChatPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GDBlockChatPacket& operator=(GDBlockChatPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GDBlockChatPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GDBlockChatPacket* internal_default_instance() {
    return reinterpret_cast<const GDBlockChatPacket*>(
               &_GDBlockChatPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(GDBlockChatPacket& a, GDBlockChatPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GDBlockChatPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GDBlockChatPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GDBlockChatPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GDBlockChatPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GDBlockChatPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GDBlockChatPacket& from) {
    GDBlockChatPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GDBlockChatPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GDBlockChatPacket";
  }
  protected:
  explicit GDBlockChatPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kDurationFieldNumber = 2,
  };
  // bytes name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 duration = 2;
  void clear_duration();
  int32_t duration() const;
  void set_duration(int32_t value);
  private:
  int32_t _internal_duration() const;
  void _internal_set_duration(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GDBlockChatPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int32_t duration_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gd_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GDMyShopPricelistUpdatePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GDMyShopPricelistUpdatePacket) */ {
 public:
  inline GDMyShopPricelistUpdatePacket() : GDMyShopPricelistUpdatePacket(nullptr) {}
  ~GDMyShopPricelistUpdatePacket() override;
  explicit PROTOBUF_CONSTEXPR GDMyShopPricelistUpdatePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GDMyShopPricelistUpdatePacket(const GDMyShopPricelistUpdatePacket& from);
  GDMyShopPricelistUpdatePacket(GDMyShopPricelistUpdatePacket&& from) noexcept
    : GDMyShopPricelistUpdatePacket() {
    *this = ::std::move(from);
  }

  inline GDMyShopPricelistUpdatePacket& operator=(const GDMyShopPricelistUpdatePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GDMyShopPricelistUpdatePacket& operator=(GDMyShopPricelistUpdatePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GDMyShopPricelistUpdatePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GDMyShopPricelistUpdatePacket* internal_default_instance() {
    return reinterpret_cast<const GDMyShopPricelistUpdatePacket*>(
               &_GDMyShopPricelistUpdatePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(GDMyShopPricelistUpdatePacket& a, GDMyShopPricelistUpdatePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GDMyShopPricelistUpdatePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GDMyShopPricelistUpdatePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GDMyShopPricelistUpdatePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GDMyShopPricelistUpdatePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GDMyShopPricelistUpdatePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GDMyShopPricelistUpdatePacket& from) {
    GDMyShopPricelistUpdatePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GDMyShopPricelistUpdatePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GDMyShopPricelistUpdatePacket";
  }
  protected:
  explicit GDMyShopPricelistUpdatePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPriceInfoFieldNumber = 2,
    kOwnerIdFieldNumber = 1,
  };
  // repeated .network.TItemPriceInfo price_info = 2;
  int price_info_size() const;
  private:
  int _internal_price_info_size() const;
  public:
  void clear_price_info();
  ::network::TItemPriceInfo* mutable_price_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemPriceInfo >*
      mutable_price_info();
  private:
  const ::network::TItemPriceInfo& _internal_price_info(int index) const;
  ::network::TItemPriceInfo* _internal_add_price_info();
  public:
  const ::network::TItemPriceInfo& price_info(int index) const;
  ::network::TItemPriceInfo* add_price_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemPriceInfo >&
      price_info() const;

  // uint32 owner_id = 1;
  void clear_owner_id();
  uint32_t owner_id() const;
  void set_owner_id(uint32_t value);
  private:
  uint32_t _internal_owner_id() const;
  void _internal_set_owner_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GDMyShopPricelistUpdatePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemPriceInfo > price_info_;
    uint32_t owner_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gd_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GDMyShopPricelistRequestPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GDMyShopPricelistRequestPacket) */ {
 public:
  inline GDMyShopPricelistRequestPacket() : GDMyShopPricelistRequestPacket(nullptr) {}
  ~GDMyShopPricelistRequestPacket() override;
  explicit PROTOBUF_CONSTEXPR GDMyShopPricelistRequestPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GDMyShopPricelistRequestPacket(const GDMyShopPricelistRequestPacket& from);
  GDMyShopPricelistRequestPacket(GDMyShopPricelistRequestPacket&& from) noexcept
    : GDMyShopPricelistRequestPacket() {
    *this = ::std::move(from);
  }

  inline GDMyShopPricelistRequestPacket& operator=(const GDMyShopPricelistRequestPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GDMyShopPricelistRequestPacket& operator=(GDMyShopPricelistRequestPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GDMyShopPricelistRequestPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GDMyShopPricelistRequestPacket* internal_default_instance() {
    return reinterpret_cast<const GDMyShopPricelistRequestPacket*>(
               &_GDMyShopPricelistRequestPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(GDMyShopPricelistRequestPacket& a, GDMyShopPricelistRequestPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GDMyShopPricelistRequestPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GDMyShopPricelistRequestPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GDMyShopPricelistRequestPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GDMyShopPricelistRequestPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GDMyShopPricelistRequestPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GDMyShopPricelistRequestPacket& from) {
    GDMyShopPricelistRequestPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GDMyShopPricelistRequestPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GDMyShopPricelistRequestPacket";
  }
  protected:
  explicit GDMyShopPricelistRequestPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPidFieldNumber = 1,
  };
  // uint32 pid = 1;
  void clear_pid();
  uint32_t pid() const;
  void set_pid(uint32_t value);
  private:
  uint32_t _internal_pid() const;
  void _internal_set_pid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GDMyShopPricelistRequestPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t pid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gd_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GDUpdateHorseNamePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GDUpdateHorseNamePacket) */ {
 public:
  inline GDUpdateHorseNamePacket() : GDUpdateHorseNamePacket(nullptr) {}
  ~GDUpdateHorseNamePacket() override;
  explicit PROTOBUF_CONSTEXPR GDUpdateHorseNamePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GDUpdateHorseNamePacket(const GDUpdateHorseNamePacket& from);
  GDUpdateHorseNamePacket(GDUpdateHorseNamePacket&& from) noexcept
    : GDUpdateHorseNamePacket() {
    *this = ::std::move(from);
  }

  inline GDUpdateHorseNamePacket& operator=(const GDUpdateHorseNamePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GDUpdateHorseNamePacket& operator=(GDUpdateHorseNamePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GDUpdateHorseNamePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GDUpdateHorseNamePacket* internal_default_instance() {
    return reinterpret_cast<const GDUpdateHorseNamePacket*>(
               &_GDUpdateHorseNamePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(GDUpdateHorseNamePacket& a, GDUpdateHorseNamePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GDUpdateHorseNamePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GDUpdateHorseNamePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GDUpdateHorseNamePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GDUpdateHorseNamePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GDUpdateHorseNamePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GDUpdateHorseNamePacket& from) {
    GDUpdateHorseNamePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GDUpdateHorseNamePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GDUpdateHorseNamePacket";
  }
  protected:
  explicit GDUpdateHorseNamePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHorseNameFieldNumber = 2,
    kPidFieldNumber = 1,
  };
  // bytes horse_name = 2;
  void clear_horse_name();
  const std::string& horse_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_horse_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_horse_name();
  PROTOBUF_NODISCARD std::string* release_horse_name();
  void set_allocated_horse_name(std::string* horse_name);
  private:
  const std::string& _internal_horse_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_horse_name(const std::string& value);
  std::string* _internal_mutable_horse_name();
  public:

  // uint32 pid = 1;
  void clear_pid();
  uint32_t pid() const;
  void set_pid(uint32_t value);
  private:
  uint32_t _internal_pid() const;
  void _internal_set_pid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GDUpdateHorseNamePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr horse_name_;
    uint32_t pid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gd_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GDRequestChargeCashPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GDRequestChargeCashPacket) */ {
 public:
  inline GDRequestChargeCashPacket() : GDRequestChargeCashPacket(nullptr) {}
  ~GDRequestChargeCashPacket() override;
  explicit PROTOBUF_CONSTEXPR GDRequestChargeCashPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GDRequestChargeCashPacket(const GDRequestChargeCashPacket& from);
  GDRequestChargeCashPacket(GDRequestChargeCashPacket&& from) noexcept
    : GDRequestChargeCashPacket() {
    *this = ::std::move(from);
  }

  inline GDRequestChargeCashPacket& operator=(const GDRequestChargeCashPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GDRequestChargeCashPacket& operator=(GDRequestChargeCashPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GDRequestChargeCashPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GDRequestChargeCashPacket* internal_default_instance() {
    return reinterpret_cast<const GDRequestChargeCashPacket*>(
               &_GDRequestChargeCashPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(GDRequestChargeCashPacket& a, GDRequestChargeCashPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GDRequestChargeCashPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GDRequestChargeCashPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GDRequestChargeCashPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GDRequestChargeCashPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GDRequestChargeCashPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GDRequestChargeCashPacket& from) {
    GDRequestChargeCashPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GDRequestChargeCashPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GDRequestChargeCashPacket";
  }
  protected:
  explicit GDRequestChargeCashPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 1,
    kAmountFieldNumber = 2,
    kChargeTypeFieldNumber = 3,
  };
  // uint32 account_id = 1;
  void clear_account_id();
  uint32_t account_id() const;
  void set_account_id(uint32_t value);
  private:
  uint32_t _internal_account_id() const;
  void _internal_set_account_id(uint32_t value);
  public:

  // uint32 amount = 2;
  void clear_amount();
  uint32_t amount() const;
  void set_amount(uint32_t value);
  private:
  uint32_t _internal_amount() const;
  void _internal_set_amount(uint32_t value);
  public:

  // uint32 charge_type = 3;
  void clear_charge_type();
  uint32_t charge_type() const;
  void set_charge_type(uint32_t value);
  private:
  uint32_t _internal_charge_type() const;
  void _internal_set_charge_type(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GDRequestChargeCashPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t account_id_;
    uint32_t amount_;
    uint32_t charge_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gd_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GDDeleteAwardIDPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GDDeleteAwardIDPacket) */ {
 public:
  inline GDDeleteAwardIDPacket() : GDDeleteAwardIDPacket(nullptr) {}
  ~GDDeleteAwardIDPacket() override;
  explicit PROTOBUF_CONSTEXPR GDDeleteAwardIDPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GDDeleteAwardIDPacket(const GDDeleteAwardIDPacket& from);
  GDDeleteAwardIDPacket(GDDeleteAwardIDPacket&& from) noexcept
    : GDDeleteAwardIDPacket() {
    *this = ::std::move(from);
  }

  inline GDDeleteAwardIDPacket& operator=(const GDDeleteAwardIDPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GDDeleteAwardIDPacket& operator=(GDDeleteAwardIDPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GDDeleteAwardIDPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GDDeleteAwardIDPacket* internal_default_instance() {
    return reinterpret_cast<const GDDeleteAwardIDPacket*>(
               &_GDDeleteAwardIDPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(GDDeleteAwardIDPacket& a, GDDeleteAwardIDPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GDDeleteAwardIDPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GDDeleteAwardIDPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GDDeleteAwardIDPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GDDeleteAwardIDPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GDDeleteAwardIDPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GDDeleteAwardIDPacket& from) {
    GDDeleteAwardIDPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GDDeleteAwardIDPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GDDeleteAwardIDPacket";
  }
  protected:
  explicit GDDeleteAwardIDPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // uint32 id = 1;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GDDeleteAwardIDPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gd_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GDChannelSwitchPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GDChannelSwitchPacket) */ {
 public:
  inline GDChannelSwitchPacket() : GDChannelSwitchPacket(nullptr) {}
  ~GDChannelSwitchPacket() override;
  explicit PROTOBUF_CONSTEXPR GDChannelSwitchPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GDChannelSwitchPacket(const GDChannelSwitchPacket& from);
  GDChannelSwitchPacket(GDChannelSwitchPacket&& from) noexcept
    : GDChannelSwitchPacket() {
    *this = ::std::move(from);
  }

  inline GDChannelSwitchPacket& operator=(const GDChannelSwitchPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GDChannelSwitchPacket& operator=(GDChannelSwitchPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GDChannelSwitchPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GDChannelSwitchPacket* internal_default_instance() {
    return reinterpret_cast<const GDChannelSwitchPacket*>(
               &_GDChannelSwitchPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(GDChannelSwitchPacket& a, GDChannelSwitchPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GDChannelSwitchPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GDChannelSwitchPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GDChannelSwitchPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GDChannelSwitchPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GDChannelSwitchPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GDChannelSwitchPacket& from) {
    GDChannelSwitchPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GDChannelSwitchPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GDChannelSwitchPacket";
  }
  protected:
  explicit GDChannelSwitchPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelFieldNumber = 1,
    kMapIndexFieldNumber = 2,
  };
  // uint32 channel = 1;
  void clear_channel();
  uint32_t channel() const;
  void set_channel(uint32_t value);
  private:
  uint32_t _internal_channel() const;
  void _internal_set_channel(uint32_t value);
  public:

  // uint32 map_index = 2;
  void clear_map_index();
  uint32_t map_index() const;
  void set_map_index(uint32_t value);
  private:
  uint32_t _internal_map_index() const;
  void _internal_set_map_index(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GDChannelSwitchPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t channel_;
    uint32_t map_index_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gd_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GDSpawnMobTimedPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GDSpawnMobTimedPacket) */ {
 public:
  inline GDSpawnMobTimedPacket() : GDSpawnMobTimedPacket(nullptr) {}
  ~GDSpawnMobTimedPacket() override;
  explicit PROTOBUF_CONSTEXPR GDSpawnMobTimedPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GDSpawnMobTimedPacket(const GDSpawnMobTimedPacket& from);
  GDSpawnMobTimedPacket(GDSpawnMobTimedPacket&& from) noexcept
    : GDSpawnMobTimedPacket() {
    *this = ::std::move(from);
  }

  inline GDSpawnMobTimedPacket& operator=(const GDSpawnMobTimedPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GDSpawnMobTimedPacket& operator=(GDSpawnMobTimedPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GDSpawnMobTimedPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GDSpawnMobTimedPacket* internal_default_instance() {
    return reinterpret_cast<const GDSpawnMobTimedPacket*>(
               &_GDSpawnMobTimedPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(GDSpawnMobTimedPacket& a, GDSpawnMobTimedPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GDSpawnMobTimedPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GDSpawnMobTimedPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GDSpawnMobTimedPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GDSpawnMobTimedPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GDSpawnMobTimedPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GDSpawnMobTimedPacket& from) {
    GDSpawnMobTimedPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GDSpawnMobTimedPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GDSpawnMobTimedPacket";
  }
  protected:
  explicit GDSpawnMobTimedPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMobVnumFieldNumber = 1,
    kMapIndexFieldNumber = 2,
    kXFieldNumber = 3,
    kYFieldNumber = 4,
    kChannelFieldNumber = 5,
    kTargetTimeFieldNumber = 6,
    kDespawnTimeFieldNumber = 7,
  };
  // uint32 mob_vnum = 1;
  void clear_mob_vnum();
  uint32_t mob_vnum() const;
  void set_mob_vnum(uint32_t value);
  private:
  uint32_t _internal_mob_vnum() const;
  void _internal_set_mob_vnum(uint32_t value);
  public:

  // uint32 map_index = 2;
  void clear_map_index();
  uint32_t map_index() const;
  void set_map_index(uint32_t value);
  private:
  uint32_t _internal_map_index() const;
  void _internal_set_map_index(uint32_t value);
  public:

  // int32 x = 3;
  void clear_x();
  int32_t x() const;
  void set_x(int32_t value);
  private:
  int32_t _internal_x() const;
  void _internal_set_x(int32_t value);
  public:

  // int32 y = 4;
  void clear_y();
  int32_t y() const;
  void set_y(int32_t value);
  private:
  int32_t _internal_y() const;
  void _internal_set_y(int32_t value);
  public:

  // uint32 channel = 5;
  void clear_channel();
  uint32_t channel() const;
  void set_channel(uint32_t value);
  private:
  uint32_t _internal_channel() const;
  void _internal_set_channel(uint32_t value);
  public:

  // int32 target_time = 6;
  void clear_target_time();
  int32_t target_time() const;
  void set_target_time(int32_t value);
  private:
  int32_t _internal_target_time() const;
  void _internal_set_target_time(int32_t value);
  public:

  // int32 despawn_time = 7;
  void clear_despawn_time();
  int32_t despawn_time() const;
  void set_despawn_time(int32_t value);
  private:
  int32_t _internal_despawn_time() const;
  void _internal_set_despawn_time(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GDSpawnMobTimedPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t mob_vnum_;
    uint32_t map_index_;
    int32_t x_;
    int32_t y_;
    uint32_t channel_;
    int32_t target_time_;
    int32_t despawn_time_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gd_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GDForceItemDeletePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GDForceItemDeletePacket) */ {
 public:
  inline GDForceItemDeletePacket() : GDForceItemDeletePacket(nullptr) {}
  ~GDForceItemDeletePacket() override;
  explicit PROTOBUF_CONSTEXPR GDForceItemDeletePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GDForceItemDeletePacket(const GDForceItemDeletePacket& from);
  GDForceItemDeletePacket(GDForceItemDeletePacket&& from) noexcept
    : GDForceItemDeletePacket() {
    *this = ::std::move(from);
  }

  inline GDForceItemDeletePacket& operator=(const GDForceItemDeletePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GDForceItemDeletePacket& operator=(GDForceItemDeletePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GDForceItemDeletePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GDForceItemDeletePacket* internal_default_instance() {
    return reinterpret_cast<const GDForceItemDeletePacket*>(
               &_GDForceItemDeletePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(GDForceItemDeletePacket& a, GDForceItemDeletePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GDForceItemDeletePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GDForceItemDeletePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GDForceItemDeletePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GDForceItemDeletePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GDForceItemDeletePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GDForceItemDeletePacket& from) {
    GDForceItemDeletePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GDForceItemDeletePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GDForceItemDeletePacket";
  }
  protected:
  explicit GDForceItemDeletePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // uint32 id = 1;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GDForceItemDeletePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gd_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GDCombatZoneSkillsCachePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GDCombatZoneSkillsCachePacket) */ {
 public:
  inline GDCombatZoneSkillsCachePacket() : GDCombatZoneSkillsCachePacket(nullptr) {}
  ~GDCombatZoneSkillsCachePacket() override;
  explicit PROTOBUF_CONSTEXPR GDCombatZoneSkillsCachePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GDCombatZoneSkillsCachePacket(const GDCombatZoneSkillsCachePacket& from);
  GDCombatZoneSkillsCachePacket(GDCombatZoneSkillsCachePacket&& from) noexcept
    : GDCombatZoneSkillsCachePacket() {
    *this = ::std::move(from);
  }

  inline GDCombatZoneSkillsCachePacket& operator=(const GDCombatZoneSkillsCachePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GDCombatZoneSkillsCachePacket& operator=(GDCombatZoneSkillsCachePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GDCombatZoneSkillsCachePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GDCombatZoneSkillsCachePacket* internal_default_instance() {
    return reinterpret_cast<const GDCombatZoneSkillsCachePacket*>(
               &_GDCombatZoneSkillsCachePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(GDCombatZoneSkillsCachePacket& a, GDCombatZoneSkillsCachePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GDCombatZoneSkillsCachePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GDCombatZoneSkillsCachePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GDCombatZoneSkillsCachePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GDCombatZoneSkillsCachePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GDCombatZoneSkillsCachePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GDCombatZoneSkillsCachePacket& from) {
    GDCombatZoneSkillsCachePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GDCombatZoneSkillsCachePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GDCombatZoneSkillsCachePacket";
  }
  protected:
  explicit GDCombatZoneSkillsCachePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPidFieldNumber = 1,
    kSkillLevel1FieldNumber = 2,
    kSkillLevel2FieldNumber = 3,
    kSkillLevel3FieldNumber = 4,
    kSkillLevel4FieldNumber = 5,
    kSkillLevel5FieldNumber = 6,
    kSkillLevel6FieldNumber = 7,
  };
  // uint32 pid = 1;
  void clear_pid();
  uint32_t pid() const;
  void set_pid(uint32_t value);
  private:
  uint32_t _internal_pid() const;
  void _internal_set_pid(uint32_t value);
  public:

  // uint32 skill_level1 = 2;
  void clear_skill_level1();
  uint32_t skill_level1() const;
  void set_skill_level1(uint32_t value);
  private:
  uint32_t _internal_skill_level1() const;
  void _internal_set_skill_level1(uint32_t value);
  public:

  // uint32 skill_level2 = 3;
  void clear_skill_level2();
  uint32_t skill_level2() const;
  void set_skill_level2(uint32_t value);
  private:
  uint32_t _internal_skill_level2() const;
  void _internal_set_skill_level2(uint32_t value);
  public:

  // uint32 skill_level3 = 4;
  void clear_skill_level3();
  uint32_t skill_level3() const;
  void set_skill_level3(uint32_t value);
  private:
  uint32_t _internal_skill_level3() const;
  void _internal_set_skill_level3(uint32_t value);
  public:

  // uint32 skill_level4 = 5;
  void clear_skill_level4();
  uint32_t skill_level4() const;
  void set_skill_level4(uint32_t value);
  private:
  uint32_t _internal_skill_level4() const;
  void _internal_set_skill_level4(uint32_t value);
  public:

  // uint32 skill_level5 = 6;
  void clear_skill_level5();
  uint32_t skill_level5() const;
  void set_skill_level5(uint32_t value);
  private:
  uint32_t _internal_skill_level5() const;
  void _internal_set_skill_level5(uint32_t value);
  public:

  // uint32 skill_level6 = 7;
  void clear_skill_level6();
  uint32_t skill_level6() const;
  void set_skill_level6(uint32_t value);
  private:
  uint32_t _internal_skill_level6() const;
  void _internal_set_skill_level6(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GDCombatZoneSkillsCachePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t pid_;
    uint32_t skill_level1_;
    uint32_t skill_level2_;
    uint32_t skill_level3_;
    uint32_t skill_level4_;
    uint32_t skill_level5_;
    uint32_t skill_level6_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gd_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GDWhisperPlayerExistCheckPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GDWhisperPlayerExistCheckPacket) */ {
 public:
  inline GDWhisperPlayerExistCheckPacket() : GDWhisperPlayerExistCheckPacket(nullptr) {}
  ~GDWhisperPlayerExistCheckPacket() override;
  explicit PROTOBUF_CONSTEXPR GDWhisperPlayerExistCheckPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GDWhisperPlayerExistCheckPacket(const GDWhisperPlayerExistCheckPacket& from);
  GDWhisperPlayerExistCheckPacket(GDWhisperPlayerExistCheckPacket&& from) noexcept
    : GDWhisperPlayerExistCheckPacket() {
    *this = ::std::move(from);
  }

  inline GDWhisperPlayerExistCheckPacket& operator=(const GDWhisperPlayerExistCheckPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GDWhisperPlayerExistCheckPacket& operator=(GDWhisperPlayerExistCheckPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GDWhisperPlayerExistCheckPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GDWhisperPlayerExistCheckPacket* internal_default_instance() {
    return reinterpret_cast<const GDWhisperPlayerExistCheckPacket*>(
               &_GDWhisperPlayerExistCheckPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(GDWhisperPlayerExistCheckPacket& a, GDWhisperPlayerExistCheckPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GDWhisperPlayerExistCheckPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GDWhisperPlayerExistCheckPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GDWhisperPlayerExistCheckPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GDWhisperPlayerExistCheckPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GDWhisperPlayerExistCheckPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GDWhisperPlayerExistCheckPacket& from) {
    GDWhisperPlayerExistCheckPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GDWhisperPlayerExistCheckPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GDWhisperPlayerExistCheckPacket";
  }
  protected:
  explicit GDWhisperPlayerExistCheckPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetNameFieldNumber = 3,
    kMessageFieldNumber = 4,
    kPidFieldNumber = 1,
    kIsGmFieldNumber = 2,
  };
  // bytes target_name = 3;
  void clear_target_name();
  const std::string& target_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_target_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_target_name();
  PROTOBUF_NODISCARD std::string* release_target_name();
  void set_allocated_target_name(std::string* target_name);
  private:
  const std::string& _internal_target_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_target_name(const std::string& value);
  std::string* _internal_mutable_target_name();
  public:

  // bytes message = 4;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // uint32 pid = 1;
  void clear_pid();
  uint32_t pid() const;
  void set_pid(uint32_t value);
  private:
  uint32_t _internal_pid() const;
  void _internal_set_pid(uint32_t value);
  public:

  // bool is_gm = 2;
  void clear_is_gm();
  bool is_gm() const;
  void set_is_gm(bool value);
  private:
  bool _internal_is_gm() const;
  void _internal_set_is_gm(bool value);
  public:

  // @@protoc_insertion_point(class_scope:network.GDWhisperPlayerExistCheckPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    uint32_t pid_;
    bool is_gm_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gd_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GDWhisperPlayerMessageOfflinePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GDWhisperPlayerMessageOfflinePacket) */ {
 public:
  inline GDWhisperPlayerMessageOfflinePacket() : GDWhisperPlayerMessageOfflinePacket(nullptr) {}
  ~GDWhisperPlayerMessageOfflinePacket() override;
  explicit PROTOBUF_CONSTEXPR GDWhisperPlayerMessageOfflinePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GDWhisperPlayerMessageOfflinePacket(const GDWhisperPlayerMessageOfflinePacket& from);
  GDWhisperPlayerMessageOfflinePacket(GDWhisperPlayerMessageOfflinePacket&& from) noexcept
    : GDWhisperPlayerMessageOfflinePacket() {
    *this = ::std::move(from);
  }

  inline GDWhisperPlayerMessageOfflinePacket& operator=(const GDWhisperPlayerMessageOfflinePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GDWhisperPlayerMessageOfflinePacket& operator=(GDWhisperPlayerMessageOfflinePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GDWhisperPlayerMessageOfflinePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GDWhisperPlayerMessageOfflinePacket* internal_default_instance() {
    return reinterpret_cast<const GDWhisperPlayerMessageOfflinePacket*>(
               &_GDWhisperPlayerMessageOfflinePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(GDWhisperPlayerMessageOfflinePacket& a, GDWhisperPlayerMessageOfflinePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GDWhisperPlayerMessageOfflinePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GDWhisperPlayerMessageOfflinePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GDWhisperPlayerMessageOfflinePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GDWhisperPlayerMessageOfflinePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GDWhisperPlayerMessageOfflinePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GDWhisperPlayerMessageOfflinePacket& from) {
    GDWhisperPlayerMessageOfflinePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GDWhisperPlayerMessageOfflinePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GDWhisperPlayerMessageOfflinePacket";
  }
  protected:
  explicit GDWhisperPlayerMessageOfflinePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 3,
    kTargetNameFieldNumber = 4,
    kMessageFieldNumber = 5,
    kPidFieldNumber = 1,
    kIsGmFieldNumber = 2,
  };
  // bytes name = 3;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bytes target_name = 4;
  void clear_target_name();
  const std::string& target_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_target_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_target_name();
  PROTOBUF_NODISCARD std::string* release_target_name();
  void set_allocated_target_name(std::string* target_name);
  private:
  const std::string& _internal_target_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_target_name(const std::string& value);
  std::string* _internal_mutable_target_name();
  public:

  // bytes message = 5;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // uint32 pid = 1;
  void clear_pid();
  uint32_t pid() const;
  void set_pid(uint32_t value);
  private:
  uint32_t _internal_pid() const;
  void _internal_set_pid(uint32_t value);
  public:

  // bool is_gm = 2;
  void clear_is_gm();
  bool is_gm() const;
  void set_is_gm(bool value);
  private:
  bool _internal_is_gm() const;
  void _internal_set_is_gm(bool value);
  public:

  // @@protoc_insertion_point(class_scope:network.GDWhisperPlayerMessageOfflinePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    uint32_t pid_;
    bool is_gm_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gd_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GDLoadItemRefundPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GDLoadItemRefundPacket) */ {
 public:
  inline GDLoadItemRefundPacket() : GDLoadItemRefundPacket(nullptr) {}
  ~GDLoadItemRefundPacket() override;
  explicit PROTOBUF_CONSTEXPR GDLoadItemRefundPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GDLoadItemRefundPacket(const GDLoadItemRefundPacket& from);
  GDLoadItemRefundPacket(GDLoadItemRefundPacket&& from) noexcept
    : GDLoadItemRefundPacket() {
    *this = ::std::move(from);
  }

  inline GDLoadItemRefundPacket& operator=(const GDLoadItemRefundPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GDLoadItemRefundPacket& operator=(GDLoadItemRefundPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GDLoadItemRefundPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GDLoadItemRefundPacket* internal_default_instance() {
    return reinterpret_cast<const GDLoadItemRefundPacket*>(
               &_GDLoadItemRefundPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(GDLoadItemRefundPacket& a, GDLoadItemRefundPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GDLoadItemRefundPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GDLoadItemRefundPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GDLoadItemRefundPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GDLoadItemRefundPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GDLoadItemRefundPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GDLoadItemRefundPacket& from) {
    GDLoadItemRefundPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GDLoadItemRefundPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GDLoadItemRefundPacket";
  }
  protected:
  explicit GDLoadItemRefundPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPidFieldNumber = 1,
  };
  // uint32 pid = 1;
  void clear_pid();
  uint32_t pid() const;
  void set_pid(uint32_t value);
  private:
  uint32_t _internal_pid() const;
  void _internal_set_pid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GDLoadItemRefundPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t pid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gd_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GDItemDestroyLogPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GDItemDestroyLogPacket) */ {
 public:
  inline GDItemDestroyLogPacket() : GDItemDestroyLogPacket(nullptr) {}
  ~GDItemDestroyLogPacket() override;
  explicit PROTOBUF_CONSTEXPR GDItemDestroyLogPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GDItemDestroyLogPacket(const GDItemDestroyLogPacket& from);
  GDItemDestroyLogPacket(GDItemDestroyLogPacket&& from) noexcept
    : GDItemDestroyLogPacket() {
    *this = ::std::move(from);
  }

  inline GDItemDestroyLogPacket& operator=(const GDItemDestroyLogPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GDItemDestroyLogPacket& operator=(GDItemDestroyLogPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GDItemDestroyLogPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GDItemDestroyLogPacket* internal_default_instance() {
    return reinterpret_cast<const GDItemDestroyLogPacket*>(
               &_GDItemDestroyLogPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(GDItemDestroyLogPacket& a, GDItemDestroyLogPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GDItemDestroyLogPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GDItemDestroyLogPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GDItemDestroyLogPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GDItemDestroyLogPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GDItemDestroyLogPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GDItemDestroyLogPacket& from) {
    GDItemDestroyLogPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GDItemDestroyLogPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GDItemDestroyLogPacket";
  }
  protected:
  explicit GDItemDestroyLogPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // .network.TItemData item = 1;
  bool has_item() const;
  private:
  bool _internal_has_item() const;
  public:
  void clear_item();
  const ::network::TItemData& item() const;
  PROTOBUF_NODISCARD ::network::TItemData* release_item();
  ::network::TItemData* mutable_item();
  void set_allocated_item(::network::TItemData* item);
  private:
  const ::network::TItemData& _internal_item() const;
  ::network::TItemData* _internal_mutable_item();
  public:
  void unsafe_arena_set_allocated_item(
      ::network::TItemData* item);
  ::network::TItemData* unsafe_arena_release_item();

  // uint32 type = 2;
  void clear_type();
  uint32_t type() const;
  void set_type(uint32_t value);
  private:
  uint32_t _internal_type() const;
  void _internal_set_type(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GDItemDestroyLogPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::network::TItemData* item_;
    uint32_t type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gd_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GDItemTimedIgnorePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GDItemTimedIgnorePacket) */ {
 public:
  inline GDItemTimedIgnorePacket() : GDItemTimedIgnorePacket(nullptr) {}
  ~GDItemTimedIgnorePacket() override;
  explicit PROTOBUF_CONSTEXPR GDItemTimedIgnorePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GDItemTimedIgnorePacket(const GDItemTimedIgnorePacket& from);
  GDItemTimedIgnorePacket(GDItemTimedIgnorePacket&& from) noexcept
    : GDItemTimedIgnorePacket() {
    *this = ::std::move(from);
  }

  inline GDItemTimedIgnorePacket& operator=(const GDItemTimedIgnorePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GDItemTimedIgnorePacket& operator=(GDItemTimedIgnorePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GDItemTimedIgnorePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GDItemTimedIgnorePacket* internal_default_instance() {
    return reinterpret_cast<const GDItemTimedIgnorePacket*>(
               &_GDItemTimedIgnorePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(GDItemTimedIgnorePacket& a, GDItemTimedIgnorePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GDItemTimedIgnorePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GDItemTimedIgnorePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GDItemTimedIgnorePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GDItemTimedIgnorePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GDItemTimedIgnorePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GDItemTimedIgnorePacket& from) {
    GDItemTimedIgnorePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GDItemTimedIgnorePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GDItemTimedIgnorePacket";
  }
  protected:
  explicit GDItemTimedIgnorePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemIdFieldNumber = 1,
    kIgnoreDurationFieldNumber = 2,
  };
  // uint32 item_id = 1;
  void clear_item_id();
  uint32_t item_id() const;
  void set_item_id(uint32_t value);
  private:
  uint32_t _internal_item_id() const;
  void _internal_set_item_id(uint32_t value);
  public:

  // uint32 ignore_duration = 2;
  void clear_ignore_duration();
  uint32_t ignore_duration() const;
  void set_ignore_duration(uint32_t value);
  private:
  uint32_t _internal_ignore_duration() const;
  void _internal_set_ignore_duration(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GDItemTimedIgnorePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t item_id_;
    uint32_t ignore_duration_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gd_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GDMarriageAddPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GDMarriageAddPacket) */ {
 public:
  inline GDMarriageAddPacket() : GDMarriageAddPacket(nullptr) {}
  ~GDMarriageAddPacket() override;
  explicit PROTOBUF_CONSTEXPR GDMarriageAddPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GDMarriageAddPacket(const GDMarriageAddPacket& from);
  GDMarriageAddPacket(GDMarriageAddPacket&& from) noexcept
    : GDMarriageAddPacket() {
    *this = ::std::move(from);
  }

  inline GDMarriageAddPacket& operator=(const GDMarriageAddPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GDMarriageAddPacket& operator=(GDMarriageAddPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GDMarriageAddPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GDMarriageAddPacket* internal_default_instance() {
    return reinterpret_cast<const GDMarriageAddPacket*>(
               &_GDMarriageAddPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(GDMarriageAddPacket& a, GDMarriageAddPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GDMarriageAddPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GDMarriageAddPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GDMarriageAddPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GDMarriageAddPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GDMarriageAddPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GDMarriageAddPacket& from) {
    GDMarriageAddPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GDMarriageAddPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GDMarriageAddPacket";
  }
  protected:
  explicit GDMarriageAddPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kName1FieldNumber = 4,
    kName2FieldNumber = 5,
    kPid1FieldNumber = 1,
    kPid2FieldNumber = 2,
    kMarryTimeFieldNumber = 3,
  };
  // bytes name1 = 4;
  void clear_name1();
  const std::string& name1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name1();
  PROTOBUF_NODISCARD std::string* release_name1();
  void set_allocated_name1(std::string* name1);
  private:
  const std::string& _internal_name1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name1(const std::string& value);
  std::string* _internal_mutable_name1();
  public:

  // bytes name2 = 5;
  void clear_name2();
  const std::string& name2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name2();
  PROTOBUF_NODISCARD std::string* release_name2();
  void set_allocated_name2(std::string* name2);
  private:
  const std::string& _internal_name2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name2(const std::string& value);
  std::string* _internal_mutable_name2();
  public:

  // uint32 pid1 = 1;
  void clear_pid1();
  uint32_t pid1() const;
  void set_pid1(uint32_t value);
  private:
  uint32_t _internal_pid1() const;
  void _internal_set_pid1(uint32_t value);
  public:

  // uint32 pid2 = 2;
  void clear_pid2();
  uint32_t pid2() const;
  void set_pid2(uint32_t value);
  private:
  uint32_t _internal_pid2() const;
  void _internal_set_pid2(uint32_t value);
  public:

  // uint32 marry_time = 3;
  void clear_marry_time();
  uint32_t marry_time() const;
  void set_marry_time(uint32_t value);
  private:
  uint32_t _internal_marry_time() const;
  void _internal_set_marry_time(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GDMarriageAddPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name1_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name2_;
    uint32_t pid1_;
    uint32_t pid2_;
    uint32_t marry_time_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gd_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GDMarriageUpdatePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GDMarriageUpdatePacket) */ {
 public:
  inline GDMarriageUpdatePacket() : GDMarriageUpdatePacket(nullptr) {}
  ~GDMarriageUpdatePacket() override;
  explicit PROTOBUF_CONSTEXPR GDMarriageUpdatePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GDMarriageUpdatePacket(const GDMarriageUpdatePacket& from);
  GDMarriageUpdatePacket(GDMarriageUpdatePacket&& from) noexcept
    : GDMarriageUpdatePacket() {
    *this = ::std::move(from);
  }

  inline GDMarriageUpdatePacket& operator=(const GDMarriageUpdatePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GDMarriageUpdatePacket& operator=(GDMarriageUpdatePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GDMarriageUpdatePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GDMarriageUpdatePacket* internal_default_instance() {
    return reinterpret_cast<const GDMarriageUpdatePacket*>(
               &_GDMarriageUpdatePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(GDMarriageUpdatePacket& a, GDMarriageUpdatePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GDMarriageUpdatePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GDMarriageUpdatePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GDMarriageUpdatePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GDMarriageUpdatePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GDMarriageUpdatePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GDMarriageUpdatePacket& from) {
    GDMarriageUpdatePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GDMarriageUpdatePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GDMarriageUpdatePacket";
  }
  protected:
  explicit GDMarriageUpdatePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPid1FieldNumber = 1,
    kPid2FieldNumber = 2,
    kLovePointFieldNumber = 3,
    kMarriedFieldNumber = 4,
  };
  // uint32 pid1 = 1;
  void clear_pid1();
  uint32_t pid1() const;
  void set_pid1(uint32_t value);
  private:
  uint32_t _internal_pid1() const;
  void _internal_set_pid1(uint32_t value);
  public:

  // uint32 pid2 = 2;
  void clear_pid2();
  uint32_t pid2() const;
  void set_pid2(uint32_t value);
  private:
  uint32_t _internal_pid2() const;
  void _internal_set_pid2(uint32_t value);
  public:

  // int32 love_point = 3;
  void clear_love_point();
  int32_t love_point() const;
  void set_love_point(int32_t value);
  private:
  int32_t _internal_love_point() const;
  void _internal_set_love_point(int32_t value);
  public:

  // bool married = 4;
  void clear_married();
  bool married() const;
  void set_married(bool value);
  private:
  bool _internal_married() const;
  void _internal_set_married(bool value);
  public:

  // @@protoc_insertion_point(class_scope:network.GDMarriageUpdatePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t pid1_;
    uint32_t pid2_;
    int32_t love_point_;
    bool married_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gd_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GDMarriageRemovePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GDMarriageRemovePacket) */ {
 public:
  inline GDMarriageRemovePacket() : GDMarriageRemovePacket(nullptr) {}
  ~GDMarriageRemovePacket() override;
  explicit PROTOBUF_CONSTEXPR GDMarriageRemovePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GDMarriageRemovePacket(const GDMarriageRemovePacket& from);
  GDMarriageRemovePacket(GDMarriageRemovePacket&& from) noexcept
    : GDMarriageRemovePacket() {
    *this = ::std::move(from);
  }

  inline GDMarriageRemovePacket& operator=(const GDMarriageRemovePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GDMarriageRemovePacket& operator=(GDMarriageRemovePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GDMarriageRemovePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GDMarriageRemovePacket* internal_default_instance() {
    return reinterpret_cast<const GDMarriageRemovePacket*>(
               &_GDMarriageRemovePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  friend void swap(GDMarriageRemovePacket& a, GDMarriageRemovePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GDMarriageRemovePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GDMarriageRemovePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GDMarriageRemovePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GDMarriageRemovePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GDMarriageRemovePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GDMarriageRemovePacket& from) {
    GDMarriageRemovePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GDMarriageRemovePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GDMarriageRemovePacket";
  }
  protected:
  explicit GDMarriageRemovePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPid1FieldNumber = 1,
    kPid2FieldNumber = 2,
  };
  // uint32 pid1 = 1;
  void clear_pid1();
  uint32_t pid1() const;
  void set_pid1(uint32_t value);
  private:
  uint32_t _internal_pid1() const;
  void _internal_set_pid1(uint32_t value);
  public:

  // uint32 pid2 = 2;
  void clear_pid2();
  uint32_t pid2() const;
  void set_pid2(uint32_t value);
  private:
  uint32_t _internal_pid2() const;
  void _internal_set_pid2(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GDMarriageRemovePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t pid1_;
    uint32_t pid2_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gd_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GDMarriageBreakPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GDMarriageBreakPacket) */ {
 public:
  inline GDMarriageBreakPacket() : GDMarriageBreakPacket(nullptr) {}
  ~GDMarriageBreakPacket() override;
  explicit PROTOBUF_CONSTEXPR GDMarriageBreakPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GDMarriageBreakPacket(const GDMarriageBreakPacket& from);
  GDMarriageBreakPacket(GDMarriageBreakPacket&& from) noexcept
    : GDMarriageBreakPacket() {
    *this = ::std::move(from);
  }

  inline GDMarriageBreakPacket& operator=(const GDMarriageBreakPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GDMarriageBreakPacket& operator=(GDMarriageBreakPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GDMarriageBreakPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GDMarriageBreakPacket* internal_default_instance() {
    return reinterpret_cast<const GDMarriageBreakPacket*>(
               &_GDMarriageBreakPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  friend void swap(GDMarriageBreakPacket& a, GDMarriageBreakPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GDMarriageBreakPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GDMarriageBreakPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GDMarriageBreakPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GDMarriageBreakPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GDMarriageBreakPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GDMarriageBreakPacket& from) {
    GDMarriageBreakPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GDMarriageBreakPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GDMarriageBreakPacket";
  }
  protected:
  explicit GDMarriageBreakPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPid1FieldNumber = 1,
    kPid2FieldNumber = 2,
  };
  // uint32 pid1 = 1;
  void clear_pid1();
  uint32_t pid1() const;
  void set_pid1(uint32_t value);
  private:
  uint32_t _internal_pid1() const;
  void _internal_set_pid1(uint32_t value);
  public:

  // uint32 pid2 = 2;
  void clear_pid2();
  uint32_t pid2() const;
  void set_pid2(uint32_t value);
  private:
  uint32_t _internal_pid2() const;
  void _internal_set_pid2(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GDMarriageBreakPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t pid1_;
    uint32_t pid2_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gd_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GDWeddingRequestPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GDWeddingRequestPacket) */ {
 public:
  inline GDWeddingRequestPacket() : GDWeddingRequestPacket(nullptr) {}
  ~GDWeddingRequestPacket() override;
  explicit PROTOBUF_CONSTEXPR GDWeddingRequestPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GDWeddingRequestPacket(const GDWeddingRequestPacket& from);
  GDWeddingRequestPacket(GDWeddingRequestPacket&& from) noexcept
    : GDWeddingRequestPacket() {
    *this = ::std::move(from);
  }

  inline GDWeddingRequestPacket& operator=(const GDWeddingRequestPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GDWeddingRequestPacket& operator=(GDWeddingRequestPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GDWeddingRequestPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GDWeddingRequestPacket* internal_default_instance() {
    return reinterpret_cast<const GDWeddingRequestPacket*>(
               &_GDWeddingRequestPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  friend void swap(GDWeddingRequestPacket& a, GDWeddingRequestPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GDWeddingRequestPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GDWeddingRequestPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GDWeddingRequestPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GDWeddingRequestPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GDWeddingRequestPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GDWeddingRequestPacket& from) {
    GDWeddingRequestPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GDWeddingRequestPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GDWeddingRequestPacket";
  }
  protected:
  explicit GDWeddingRequestPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPid1FieldNumber = 1,
    kPid2FieldNumber = 2,
  };
  // uint32 pid1 = 1;
  void clear_pid1();
  uint32_t pid1() const;
  void set_pid1(uint32_t value);
  private:
  uint32_t _internal_pid1() const;
  void _internal_set_pid1(uint32_t value);
  public:

  // uint32 pid2 = 2;
  void clear_pid2();
  uint32_t pid2() const;
  void set_pid2(uint32_t value);
  private:
  uint32_t _internal_pid2() const;
  void _internal_set_pid2(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GDWeddingRequestPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t pid1_;
    uint32_t pid2_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gd_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GDWeddingReadyPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GDWeddingReadyPacket) */ {
 public:
  inline GDWeddingReadyPacket() : GDWeddingReadyPacket(nullptr) {}
  ~GDWeddingReadyPacket() override;
  explicit PROTOBUF_CONSTEXPR GDWeddingReadyPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GDWeddingReadyPacket(const GDWeddingReadyPacket& from);
  GDWeddingReadyPacket(GDWeddingReadyPacket&& from) noexcept
    : GDWeddingReadyPacket() {
    *this = ::std::move(from);
  }

  inline GDWeddingReadyPacket& operator=(const GDWeddingReadyPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GDWeddingReadyPacket& operator=(GDWeddingReadyPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GDWeddingReadyPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GDWeddingReadyPacket* internal_default_instance() {
    return reinterpret_cast<const GDWeddingReadyPacket*>(
               &_GDWeddingReadyPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  friend void swap(GDWeddingReadyPacket& a, GDWeddingReadyPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GDWeddingReadyPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GDWeddingReadyPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GDWeddingReadyPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GDWeddingReadyPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GDWeddingReadyPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GDWeddingReadyPacket& from) {
    GDWeddingReadyPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GDWeddingReadyPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GDWeddingReadyPacket";
  }
  protected:
  explicit GDWeddingReadyPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPid1FieldNumber = 1,
    kPid2FieldNumber = 2,
    kMapIndexFieldNumber = 3,
  };
  // uint32 pid1 = 1;
  void clear_pid1();
  uint32_t pid1() const;
  void set_pid1(uint32_t value);
  private:
  uint32_t _internal_pid1() const;
  void _internal_set_pid1(uint32_t value);
  public:

  // uint32 pid2 = 2;
  void clear_pid2();
  uint32_t pid2() const;
  void set_pid2(uint32_t value);
  private:
  uint32_t _internal_pid2() const;
  void _internal_set_pid2(uint32_t value);
  public:

  // uint32 map_index = 3;
  void clear_map_index();
  uint32_t map_index() const;
  void set_map_index(uint32_t value);
  private:
  uint32_t _internal_map_index() const;
  void _internal_set_map_index(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GDWeddingReadyPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t pid1_;
    uint32_t pid2_;
    uint32_t map_index_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gd_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GDWeddingEndPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GDWeddingEndPacket) */ {
 public:
  inline GDWeddingEndPacket() : GDWeddingEndPacket(nullptr) {}
  ~GDWeddingEndPacket() override;
  explicit PROTOBUF_CONSTEXPR GDWeddingEndPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GDWeddingEndPacket(const GDWeddingEndPacket& from);
  GDWeddingEndPacket(GDWeddingEndPacket&& from) noexcept
    : GDWeddingEndPacket() {
    *this = ::std::move(from);
  }

  inline GDWeddingEndPacket& operator=(const GDWeddingEndPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GDWeddingEndPacket& operator=(GDWeddingEndPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GDWeddingEndPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GDWeddingEndPacket* internal_default_instance() {
    return reinterpret_cast<const GDWeddingEndPacket*>(
               &_GDWeddingEndPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  friend void swap(GDWeddingEndPacket& a, GDWeddingEndPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GDWeddingEndPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GDWeddingEndPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GDWeddingEndPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GDWeddingEndPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GDWeddingEndPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GDWeddingEndPacket& from) {
    GDWeddingEndPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GDWeddingEndPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GDWeddingEndPacket";
  }
  protected:
  explicit GDWeddingEndPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPid1FieldNumber = 1,
    kPid2FieldNumber = 2,
  };
  // uint32 pid1 = 1;
  void clear_pid1();
  uint32_t pid1() const;
  void set_pid1(uint32_t value);
  private:
  uint32_t _internal_pid1() const;
  void _internal_set_pid1(uint32_t value);
  public:

  // uint32 pid2 = 2;
  void clear_pid2();
  uint32_t pid2() const;
  void set_pid2(uint32_t value);
  private:
  uint32_t _internal_pid2() const;
  void _internal_set_pid2(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GDWeddingEndPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t pid1_;
    uint32_t pid2_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gd_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GDPartyCreatePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GDPartyCreatePacket) */ {
 public:
  inline GDPartyCreatePacket() : GDPartyCreatePacket(nullptr) {}
  ~GDPartyCreatePacket() override;
  explicit PROTOBUF_CONSTEXPR GDPartyCreatePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GDPartyCreatePacket(const GDPartyCreatePacket& from);
  GDPartyCreatePacket(GDPartyCreatePacket&& from) noexcept
    : GDPartyCreatePacket() {
    *this = ::std::move(from);
  }

  inline GDPartyCreatePacket& operator=(const GDPartyCreatePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GDPartyCreatePacket& operator=(GDPartyCreatePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GDPartyCreatePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GDPartyCreatePacket* internal_default_instance() {
    return reinterpret_cast<const GDPartyCreatePacket*>(
               &_GDPartyCreatePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  friend void swap(GDPartyCreatePacket& a, GDPartyCreatePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GDPartyCreatePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GDPartyCreatePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GDPartyCreatePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GDPartyCreatePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GDPartyCreatePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GDPartyCreatePacket& from) {
    GDPartyCreatePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GDPartyCreatePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GDPartyCreatePacket";
  }
  protected:
  explicit GDPartyCreatePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeaderPidFieldNumber = 1,
  };
  // uint32 leader_pid = 1;
  void clear_leader_pid();
  uint32_t leader_pid() const;
  void set_leader_pid(uint32_t value);
  private:
  uint32_t _internal_leader_pid() const;
  void _internal_set_leader_pid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GDPartyCreatePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t leader_pid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gd_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GDPartyDeletePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GDPartyDeletePacket) */ {
 public:
  inline GDPartyDeletePacket() : GDPartyDeletePacket(nullptr) {}
  ~GDPartyDeletePacket() override;
  explicit PROTOBUF_CONSTEXPR GDPartyDeletePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GDPartyDeletePacket(const GDPartyDeletePacket& from);
  GDPartyDeletePacket(GDPartyDeletePacket&& from) noexcept
    : GDPartyDeletePacket() {
    *this = ::std::move(from);
  }

  inline GDPartyDeletePacket& operator=(const GDPartyDeletePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GDPartyDeletePacket& operator=(GDPartyDeletePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GDPartyDeletePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GDPartyDeletePacket* internal_default_instance() {
    return reinterpret_cast<const GDPartyDeletePacket*>(
               &_GDPartyDeletePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    72;

  friend void swap(GDPartyDeletePacket& a, GDPartyDeletePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GDPartyDeletePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GDPartyDeletePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GDPartyDeletePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GDPartyDeletePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GDPartyDeletePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GDPartyDeletePacket& from) {
    GDPartyDeletePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GDPartyDeletePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GDPartyDeletePacket";
  }
  protected:
  explicit GDPartyDeletePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeaderPidFieldNumber = 1,
  };
  // uint32 leader_pid = 1;
  void clear_leader_pid();
  uint32_t leader_pid() const;
  void set_leader_pid(uint32_t value);
  private:
  uint32_t _internal_leader_pid() const;
  void _internal_set_leader_pid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GDPartyDeletePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t leader_pid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gd_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GDPartyAddPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GDPartyAddPacket) */ {
 public:
  inline GDPartyAddPacket() : GDPartyAddPacket(nullptr) {}
  ~GDPartyAddPacket() override;
  explicit PROTOBUF_CONSTEXPR GDPartyAddPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GDPartyAddPacket(const GDPartyAddPacket& from);
  GDPartyAddPacket(GDPartyAddPacket&& from) noexcept
    : GDPartyAddPacket() {
    *this = ::std::move(from);
  }

  inline GDPartyAddPacket& operator=(const GDPartyAddPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GDPartyAddPacket& operator=(GDPartyAddPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GDPartyAddPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GDPartyAddPacket* internal_default_instance() {
    return reinterpret_cast<const GDPartyAddPacket*>(
               &_GDPartyAddPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    73;

  friend void swap(GDPartyAddPacket& a, GDPartyAddPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GDPartyAddPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GDPartyAddPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GDPartyAddPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GDPartyAddPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GDPartyAddPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GDPartyAddPacket& from) {
    GDPartyAddPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GDPartyAddPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GDPartyAddPacket";
  }
  protected:
  explicit GDPartyAddPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeaderPidFieldNumber = 1,
    kPidFieldNumber = 2,
    kStateFieldNumber = 3,
  };
  // uint32 leader_pid = 1;
  void clear_leader_pid();
  uint32_t leader_pid() const;
  void set_leader_pid(uint32_t value);
  private:
  uint32_t _internal_leader_pid() const;
  void _internal_set_leader_pid(uint32_t value);
  public:

  // uint32 pid = 2;
  void clear_pid();
  uint32_t pid() const;
  void set_pid(uint32_t value);
  private:
  uint32_t _internal_pid() const;
  void _internal_set_pid(uint32_t value);
  public:

  // uint32 state = 3;
  void clear_state();
  uint32_t state() const;
  void set_state(uint32_t value);
  private:
  uint32_t _internal_state() const;
  void _internal_set_state(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GDPartyAddPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t leader_pid_;
    uint32_t pid_;
    uint32_t state_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gd_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GDPartyRemovePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GDPartyRemovePacket) */ {
 public:
  inline GDPartyRemovePacket() : GDPartyRemovePacket(nullptr) {}
  ~GDPartyRemovePacket() override;
  explicit PROTOBUF_CONSTEXPR GDPartyRemovePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GDPartyRemovePacket(const GDPartyRemovePacket& from);
  GDPartyRemovePacket(GDPartyRemovePacket&& from) noexcept
    : GDPartyRemovePacket() {
    *this = ::std::move(from);
  }

  inline GDPartyRemovePacket& operator=(const GDPartyRemovePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GDPartyRemovePacket& operator=(GDPartyRemovePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GDPartyRemovePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GDPartyRemovePacket* internal_default_instance() {
    return reinterpret_cast<const GDPartyRemovePacket*>(
               &_GDPartyRemovePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    74;

  friend void swap(GDPartyRemovePacket& a, GDPartyRemovePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GDPartyRemovePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GDPartyRemovePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GDPartyRemovePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GDPartyRemovePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GDPartyRemovePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GDPartyRemovePacket& from) {
    GDPartyRemovePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GDPartyRemovePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GDPartyRemovePacket";
  }
  protected:
  explicit GDPartyRemovePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeaderPidFieldNumber = 1,
    kPidFieldNumber = 2,
  };
  // uint32 leader_pid = 1;
  void clear_leader_pid();
  uint32_t leader_pid() const;
  void set_leader_pid(uint32_t value);
  private:
  uint32_t _internal_leader_pid() const;
  void _internal_set_leader_pid(uint32_t value);
  public:

  // uint32 pid = 2;
  void clear_pid();
  uint32_t pid() const;
  void set_pid(uint32_t value);
  private:
  uint32_t _internal_pid() const;
  void _internal_set_pid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GDPartyRemovePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t leader_pid_;
    uint32_t pid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gd_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GDPartyStateChangePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GDPartyStateChangePacket) */ {
 public:
  inline GDPartyStateChangePacket() : GDPartyStateChangePacket(nullptr) {}
  ~GDPartyStateChangePacket() override;
  explicit PROTOBUF_CONSTEXPR GDPartyStateChangePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GDPartyStateChangePacket(const GDPartyStateChangePacket& from);
  GDPartyStateChangePacket(GDPartyStateChangePacket&& from) noexcept
    : GDPartyStateChangePacket() {
    *this = ::std::move(from);
  }

  inline GDPartyStateChangePacket& operator=(const GDPartyStateChangePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GDPartyStateChangePacket& operator=(GDPartyStateChangePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GDPartyStateChangePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GDPartyStateChangePacket* internal_default_instance() {
    return reinterpret_cast<const GDPartyStateChangePacket*>(
               &_GDPartyStateChangePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    75;

  friend void swap(GDPartyStateChangePacket& a, GDPartyStateChangePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GDPartyStateChangePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GDPartyStateChangePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GDPartyStateChangePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GDPartyStateChangePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GDPartyStateChangePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GDPartyStateChangePacket& from) {
    GDPartyStateChangePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GDPartyStateChangePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GDPartyStateChangePacket";
  }
  protected:
  explicit GDPartyStateChangePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeaderPidFieldNumber = 1,
    kPidFieldNumber = 2,
    kRoleFieldNumber = 3,
    kFlagFieldNumber = 4,
  };
  // uint32 leader_pid = 1;
  void clear_leader_pid();
  uint32_t leader_pid() const;
  void set_leader_pid(uint32_t value);
  private:
  uint32_t _internal_leader_pid() const;
  void _internal_set_leader_pid(uint32_t value);
  public:

  // uint32 pid = 2;
  void clear_pid();
  uint32_t pid() const;
  void set_pid(uint32_t value);
  private:
  uint32_t _internal_pid() const;
  void _internal_set_pid(uint32_t value);
  public:

  // uint32 role = 3;
  void clear_role();
  uint32_t role() const;
  void set_role(uint32_t value);
  private:
  uint32_t _internal_role() const;
  void _internal_set_role(uint32_t value);
  public:

  // bool flag = 4;
  void clear_flag();
  bool flag() const;
  void set_flag(bool value);
  private:
  bool _internal_flag() const;
  void _internal_set_flag(bool value);
  public:

  // @@protoc_insertion_point(class_scope:network.GDPartyStateChangePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t leader_pid_;
    uint32_t pid_;
    uint32_t role_;
    bool flag_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gd_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GDPartySetMemberLevelPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GDPartySetMemberLevelPacket) */ {
 public:
  inline GDPartySetMemberLevelPacket() : GDPartySetMemberLevelPacket(nullptr) {}
  ~GDPartySetMemberLevelPacket() override;
  explicit PROTOBUF_CONSTEXPR GDPartySetMemberLevelPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GDPartySetMemberLevelPacket(const GDPartySetMemberLevelPacket& from);
  GDPartySetMemberLevelPacket(GDPartySetMemberLevelPacket&& from) noexcept
    : GDPartySetMemberLevelPacket() {
    *this = ::std::move(from);
  }

  inline GDPartySetMemberLevelPacket& operator=(const GDPartySetMemberLevelPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GDPartySetMemberLevelPacket& operator=(GDPartySetMemberLevelPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GDPartySetMemberLevelPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GDPartySetMemberLevelPacket* internal_default_instance() {
    return reinterpret_cast<const GDPartySetMemberLevelPacket*>(
               &_GDPartySetMemberLevelPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    76;

  friend void swap(GDPartySetMemberLevelPacket& a, GDPartySetMemberLevelPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GDPartySetMemberLevelPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GDPartySetMemberLevelPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GDPartySetMemberLevelPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GDPartySetMemberLevelPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GDPartySetMemberLevelPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GDPartySetMemberLevelPacket& from) {
    GDPartySetMemberLevelPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GDPartySetMemberLevelPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GDPartySetMemberLevelPacket";
  }
  protected:
  explicit GDPartySetMemberLevelPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeaderPidFieldNumber = 1,
    kPidFieldNumber = 2,
    kLevelFieldNumber = 3,
  };
  // uint32 leader_pid = 1;
  void clear_leader_pid();
  uint32_t leader_pid() const;
  void set_leader_pid(uint32_t value);
  private:
  uint32_t _internal_leader_pid() const;
  void _internal_set_leader_pid(uint32_t value);
  public:

  // uint32 pid = 2;
  void clear_pid();
  uint32_t pid() const;
  void set_pid(uint32_t value);
  private:
  uint32_t _internal_pid() const;
  void _internal_set_pid(uint32_t value);
  public:

  // uint32 level = 3;
  void clear_level();
  uint32_t level() const;
  void set_level(uint32_t value);
  private:
  uint32_t _internal_level() const;
  void _internal_set_level(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GDPartySetMemberLevelPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t leader_pid_;
    uint32_t pid_;
    uint32_t level_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gd_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GDGuildCreatePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GDGuildCreatePacket) */ {
 public:
  inline GDGuildCreatePacket() : GDGuildCreatePacket(nullptr) {}
  ~GDGuildCreatePacket() override;
  explicit PROTOBUF_CONSTEXPR GDGuildCreatePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GDGuildCreatePacket(const GDGuildCreatePacket& from);
  GDGuildCreatePacket(GDGuildCreatePacket&& from) noexcept
    : GDGuildCreatePacket() {
    *this = ::std::move(from);
  }

  inline GDGuildCreatePacket& operator=(const GDGuildCreatePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GDGuildCreatePacket& operator=(GDGuildCreatePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GDGuildCreatePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GDGuildCreatePacket* internal_default_instance() {
    return reinterpret_cast<const GDGuildCreatePacket*>(
               &_GDGuildCreatePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    77;

  friend void swap(GDGuildCreatePacket& a, GDGuildCreatePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GDGuildCreatePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GDGuildCreatePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GDGuildCreatePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GDGuildCreatePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GDGuildCreatePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GDGuildCreatePacket& from) {
    GDGuildCreatePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GDGuildCreatePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GDGuildCreatePacket";
  }
  protected:
  explicit GDGuildCreatePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGuildIdFieldNumber = 1,
  };
  // uint32 guild_id = 1;
  void clear_guild_id();
  uint32_t guild_id() const;
  void set_guild_id(uint32_t value);
  private:
  uint32_t _internal_guild_id() const;
  void _internal_set_guild_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GDGuildCreatePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t guild_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gd_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GDGuildSkillUpdatePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GDGuildSkillUpdatePacket) */ {
 public:
  inline GDGuildSkillUpdatePacket() : GDGuildSkillUpdatePacket(nullptr) {}
  ~GDGuildSkillUpdatePacket() override;
  explicit PROTOBUF_CONSTEXPR GDGuildSkillUpdatePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GDGuildSkillUpdatePacket(const GDGuildSkillUpdatePacket& from);
  GDGuildSkillUpdatePacket(GDGuildSkillUpdatePacket&& from) noexcept
    : GDGuildSkillUpdatePacket() {
    *this = ::std::move(from);
  }

  inline GDGuildSkillUpdatePacket& operator=(const GDGuildSkillUpdatePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GDGuildSkillUpdatePacket& operator=(GDGuildSkillUpdatePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GDGuildSkillUpdatePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GDGuildSkillUpdatePacket* internal_default_instance() {
    return reinterpret_cast<const GDGuildSkillUpdatePacket*>(
               &_GDGuildSkillUpdatePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    78;

  friend void swap(GDGuildSkillUpdatePacket& a, GDGuildSkillUpdatePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GDGuildSkillUpdatePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GDGuildSkillUpdatePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GDGuildSkillUpdatePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GDGuildSkillUpdatePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GDGuildSkillUpdatePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GDGuildSkillUpdatePacket& from) {
    GDGuildSkillUpdatePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GDGuildSkillUpdatePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GDGuildSkillUpdatePacket";
  }
  protected:
  explicit GDGuildSkillUpdatePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSkillLevelsFieldNumber = 3,
    kGuildIdFieldNumber = 1,
    kAmountFieldNumber = 2,
    kSkillPointFieldNumber = 4,
    kSaveFieldNumber = 5,
  };
  // repeated uint32 skill_levels = 3;
  int skill_levels_size() const;
  private:
  int _internal_skill_levels_size() const;
  public:
  void clear_skill_levels();
  private:
  uint32_t _internal_skill_levels(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_skill_levels() const;
  void _internal_add_skill_levels(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_skill_levels();
  public:
  uint32_t skill_levels(int index) const;
  void set_skill_levels(int index, uint32_t value);
  void add_skill_levels(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      skill_levels() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_skill_levels();

  // uint32 guild_id = 1;
  void clear_guild_id();
  uint32_t guild_id() const;
  void set_guild_id(uint32_t value);
  private:
  uint32_t _internal_guild_id() const;
  void _internal_set_guild_id(uint32_t value);
  public:

  // int32 amount = 2;
  void clear_amount();
  int32_t amount() const;
  void set_amount(int32_t value);
  private:
  int32_t _internal_amount() const;
  void _internal_set_amount(int32_t value);
  public:

  // uint32 skill_point = 4;
  void clear_skill_point();
  uint32_t skill_point() const;
  void set_skill_point(uint32_t value);
  private:
  uint32_t _internal_skill_point() const;
  void _internal_set_skill_point(uint32_t value);
  public:

  // bool save = 5;
  void clear_save();
  bool save() const;
  void set_save(bool value);
  private:
  bool _internal_save() const;
  void _internal_set_save(bool value);
  public:

  // @@protoc_insertion_point(class_scope:network.GDGuildSkillUpdatePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > skill_levels_;
    mutable std::atomic<int> _skill_levels_cached_byte_size_;
    uint32_t guild_id_;
    int32_t amount_;
    uint32_t skill_point_;
    bool save_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gd_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GDGuildExpUpdatePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GDGuildExpUpdatePacket) */ {
 public:
  inline GDGuildExpUpdatePacket() : GDGuildExpUpdatePacket(nullptr) {}
  ~GDGuildExpUpdatePacket() override;
  explicit PROTOBUF_CONSTEXPR GDGuildExpUpdatePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GDGuildExpUpdatePacket(const GDGuildExpUpdatePacket& from);
  GDGuildExpUpdatePacket(GDGuildExpUpdatePacket&& from) noexcept
    : GDGuildExpUpdatePacket() {
    *this = ::std::move(from);
  }

  inline GDGuildExpUpdatePacket& operator=(const GDGuildExpUpdatePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GDGuildExpUpdatePacket& operator=(GDGuildExpUpdatePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GDGuildExpUpdatePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GDGuildExpUpdatePacket* internal_default_instance() {
    return reinterpret_cast<const GDGuildExpUpdatePacket*>(
               &_GDGuildExpUpdatePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    79;

  friend void swap(GDGuildExpUpdatePacket& a, GDGuildExpUpdatePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GDGuildExpUpdatePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GDGuildExpUpdatePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GDGuildExpUpdatePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GDGuildExpUpdatePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GDGuildExpUpdatePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GDGuildExpUpdatePacket& from) {
    GDGuildExpUpdatePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GDGuildExpUpdatePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GDGuildExpUpdatePacket";
  }
  protected:
  explicit GDGuildExpUpdatePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGuildIdFieldNumber = 1,
    kAmountFieldNumber = 2,
  };
  // uint32 guild_id = 1;
  void clear_guild_id();
  uint32_t guild_id() const;
  void set_guild_id(uint32_t value);
  private:
  uint32_t _internal_guild_id() const;
  void _internal_set_guild_id(uint32_t value);
  public:

  // int32 amount = 2;
  void clear_amount();
  int32_t amount() const;
  void set_amount(int32_t value);
  private:
  int32_t _internal_amount() const;
  void _internal_set_amount(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GDGuildExpUpdatePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t guild_id_;
    int32_t amount_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gd_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GDGuildAddMemberPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GDGuildAddMemberPacket) */ {
 public:
  inline GDGuildAddMemberPacket() : GDGuildAddMemberPacket(nullptr) {}
  ~GDGuildAddMemberPacket() override;
  explicit PROTOBUF_CONSTEXPR GDGuildAddMemberPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GDGuildAddMemberPacket(const GDGuildAddMemberPacket& from);
  GDGuildAddMemberPacket(GDGuildAddMemberPacket&& from) noexcept
    : GDGuildAddMemberPacket() {
    *this = ::std::move(from);
  }

  inline GDGuildAddMemberPacket& operator=(const GDGuildAddMemberPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GDGuildAddMemberPacket& operator=(GDGuildAddMemberPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GDGuildAddMemberPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GDGuildAddMemberPacket* internal_default_instance() {
    return reinterpret_cast<const GDGuildAddMemberPacket*>(
               &_GDGuildAddMemberPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    80;

  friend void swap(GDGuildAddMemberPacket& a, GDGuildAddMemberPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GDGuildAddMemberPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GDGuildAddMemberPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GDGuildAddMemberPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GDGuildAddMemberPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GDGuildAddMemberPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GDGuildAddMemberPacket& from) {
    GDGuildAddMemberPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GDGuildAddMemberPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GDGuildAddMemberPacket";
  }
  protected:
  explicit GDGuildAddMemberPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPidFieldNumber = 1,
    kGuildIdFieldNumber = 2,
    kGradeFieldNumber = 3,
  };
  // uint32 pid = 1;
  void clear_pid();
  uint32_t pid() const;
  void set_pid(uint32_t value);
  private:
  uint32_t _internal_pid() const;
  void _internal_set_pid(uint32_t value);
  public:

  // uint32 guild_id = 2;
  void clear_guild_id();
  uint32_t guild_id() const;
  void set_guild_id(uint32_t value);
  private:
  uint32_t _internal_guild_id() const;
  void _internal_set_guild_id(uint32_t value);
  public:

  // uint32 grade = 3;
  void clear_grade();
  uint32_t grade() const;
  void set_grade(uint32_t value);
  private:
  uint32_t _internal_grade() const;
  void _internal_set_grade(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GDGuildAddMemberPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t pid_;
    uint32_t guild_id_;
    uint32_t grade_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gd_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GDGuildRemoveMemberPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GDGuildRemoveMemberPacket) */ {
 public:
  inline GDGuildRemoveMemberPacket() : GDGuildRemoveMemberPacket(nullptr) {}
  ~GDGuildRemoveMemberPacket() override;
  explicit PROTOBUF_CONSTEXPR GDGuildRemoveMemberPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GDGuildRemoveMemberPacket(const GDGuildRemoveMemberPacket& from);
  GDGuildRemoveMemberPacket(GDGuildRemoveMemberPacket&& from) noexcept
    : GDGuildRemoveMemberPacket() {
    *this = ::std::move(from);
  }

  inline GDGuildRemoveMemberPacket& operator=(const GDGuildRemoveMemberPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GDGuildRemoveMemberPacket& operator=(GDGuildRemoveMemberPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GDGuildRemoveMemberPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GDGuildRemoveMemberPacket* internal_default_instance() {
    return reinterpret_cast<const GDGuildRemoveMemberPacket*>(
               &_GDGuildRemoveMemberPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    81;

  friend void swap(GDGuildRemoveMemberPacket& a, GDGuildRemoveMemberPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GDGuildRemoveMemberPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GDGuildRemoveMemberPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GDGuildRemoveMemberPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GDGuildRemoveMemberPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GDGuildRemoveMemberPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GDGuildRemoveMemberPacket& from) {
    GDGuildRemoveMemberPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GDGuildRemoveMemberPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GDGuildRemoveMemberPacket";
  }
  protected:
  explicit GDGuildRemoveMemberPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGuildIdFieldNumber = 1,
    kPidFieldNumber = 2,
  };
  // uint32 guild_id = 1;
  void clear_guild_id();
  uint32_t guild_id() const;
  void set_guild_id(uint32_t value);
  private:
  uint32_t _internal_guild_id() const;
  void _internal_set_guild_id(uint32_t value);
  public:

  // uint32 pid = 2;
  void clear_pid();
  uint32_t pid() const;
  void set_pid(uint32_t value);
  private:
  uint32_t _internal_pid() const;
  void _internal_set_pid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GDGuildRemoveMemberPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t guild_id_;
    uint32_t pid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gd_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GDGuildChangeGradePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GDGuildChangeGradePacket) */ {
 public:
  inline GDGuildChangeGradePacket() : GDGuildChangeGradePacket(nullptr) {}
  ~GDGuildChangeGradePacket() override;
  explicit PROTOBUF_CONSTEXPR GDGuildChangeGradePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GDGuildChangeGradePacket(const GDGuildChangeGradePacket& from);
  GDGuildChangeGradePacket(GDGuildChangeGradePacket&& from) noexcept
    : GDGuildChangeGradePacket() {
    *this = ::std::move(from);
  }

  inline GDGuildChangeGradePacket& operator=(const GDGuildChangeGradePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GDGuildChangeGradePacket& operator=(GDGuildChangeGradePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GDGuildChangeGradePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GDGuildChangeGradePacket* internal_default_instance() {
    return reinterpret_cast<const GDGuildChangeGradePacket*>(
               &_GDGuildChangeGradePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    82;

  friend void swap(GDGuildChangeGradePacket& a, GDGuildChangeGradePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GDGuildChangeGradePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GDGuildChangeGradePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GDGuildChangeGradePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GDGuildChangeGradePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GDGuildChangeGradePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GDGuildChangeGradePacket& from) {
    GDGuildChangeGradePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GDGuildChangeGradePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GDGuildChangeGradePacket";
  }
  protected:
  explicit GDGuildChangeGradePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGuildIdFieldNumber = 1,
    kGradeFieldNumber = 2,
  };
  // uint32 guild_id = 1;
  void clear_guild_id();
  uint32_t guild_id() const;
  void set_guild_id(uint32_t value);
  private:
  uint32_t _internal_guild_id() const;
  void _internal_set_guild_id(uint32_t value);
  public:

  // uint32 grade = 2;
  void clear_grade();
  uint32_t grade() const;
  void set_grade(uint32_t value);
  private:
  uint32_t _internal_grade() const;
  void _internal_set_grade(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GDGuildChangeGradePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t guild_id_;
    uint32_t grade_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gd_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GDGuildChangeMemberDataPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GDGuildChangeMemberDataPacket) */ {
 public:
  inline GDGuildChangeMemberDataPacket() : GDGuildChangeMemberDataPacket(nullptr) {}
  ~GDGuildChangeMemberDataPacket() override;
  explicit PROTOBUF_CONSTEXPR GDGuildChangeMemberDataPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GDGuildChangeMemberDataPacket(const GDGuildChangeMemberDataPacket& from);
  GDGuildChangeMemberDataPacket(GDGuildChangeMemberDataPacket&& from) noexcept
    : GDGuildChangeMemberDataPacket() {
    *this = ::std::move(from);
  }

  inline GDGuildChangeMemberDataPacket& operator=(const GDGuildChangeMemberDataPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GDGuildChangeMemberDataPacket& operator=(GDGuildChangeMemberDataPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GDGuildChangeMemberDataPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GDGuildChangeMemberDataPacket* internal_default_instance() {
    return reinterpret_cast<const GDGuildChangeMemberDataPacket*>(
               &_GDGuildChangeMemberDataPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    83;

  friend void swap(GDGuildChangeMemberDataPacket& a, GDGuildChangeMemberDataPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GDGuildChangeMemberDataPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GDGuildChangeMemberDataPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GDGuildChangeMemberDataPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GDGuildChangeMemberDataPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GDGuildChangeMemberDataPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GDGuildChangeMemberDataPacket& from) {
    GDGuildChangeMemberDataPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GDGuildChangeMemberDataPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GDGuildChangeMemberDataPacket";
  }
  protected:
  explicit GDGuildChangeMemberDataPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGuildIdFieldNumber = 1,
    kPidFieldNumber = 2,
    kOfferFieldNumber = 3,
    kLevelFieldNumber = 4,
    kGradeFieldNumber = 5,
  };
  // uint32 guild_id = 1;
  void clear_guild_id();
  uint32_t guild_id() const;
  void set_guild_id(uint32_t value);
  private:
  uint32_t _internal_guild_id() const;
  void _internal_set_guild_id(uint32_t value);
  public:

  // uint32 pid = 2;
  void clear_pid();
  uint32_t pid() const;
  void set_pid(uint32_t value);
  private:
  uint32_t _internal_pid() const;
  void _internal_set_pid(uint32_t value);
  public:

  // uint32 offer = 3;
  void clear_offer();
  uint32_t offer() const;
  void set_offer(uint32_t value);
  private:
  uint32_t _internal_offer() const;
  void _internal_set_offer(uint32_t value);
  public:

  // uint32 level = 4;
  void clear_level();
  uint32_t level() const;
  void set_level(uint32_t value);
  private:
  uint32_t _internal_level() const;
  void _internal_set_level(uint32_t value);
  public:

  // uint32 grade = 5;
  void clear_grade();
  uint32_t grade() const;
  void set_grade(uint32_t value);
  private:
  uint32_t _internal_grade() const;
  void _internal_set_grade(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GDGuildChangeMemberDataPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t guild_id_;
    uint32_t pid_;
    uint32_t offer_;
    uint32_t level_;
    uint32_t grade_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gd_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GDGuildDisbandPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GDGuildDisbandPacket) */ {
 public:
  inline GDGuildDisbandPacket() : GDGuildDisbandPacket(nullptr) {}
  ~GDGuildDisbandPacket() override;
  explicit PROTOBUF_CONSTEXPR GDGuildDisbandPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GDGuildDisbandPacket(const GDGuildDisbandPacket& from);
  GDGuildDisbandPacket(GDGuildDisbandPacket&& from) noexcept
    : GDGuildDisbandPacket() {
    *this = ::std::move(from);
  }

  inline GDGuildDisbandPacket& operator=(const GDGuildDisbandPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GDGuildDisbandPacket& operator=(GDGuildDisbandPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GDGuildDisbandPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GDGuildDisbandPacket* internal_default_instance() {
    return reinterpret_cast<const GDGuildDisbandPacket*>(
               &_GDGuildDisbandPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    84;

  friend void swap(GDGuildDisbandPacket& a, GDGuildDisbandPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GDGuildDisbandPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GDGuildDisbandPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GDGuildDisbandPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GDGuildDisbandPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GDGuildDisbandPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GDGuildDisbandPacket& from) {
    GDGuildDisbandPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GDGuildDisbandPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GDGuildDisbandPacket";
  }
  protected:
  explicit GDGuildDisbandPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGuildIdFieldNumber = 1,
  };
  // uint32 guild_id = 1;
  void clear_guild_id();
  uint32_t guild_id() const;
  void set_guild_id(uint32_t value);
  private:
  uint32_t _internal_guild_id() const;
  void _internal_set_guild_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GDGuildDisbandPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t guild_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gd_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GDGuildDungeonPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GDGuildDungeonPacket) */ {
 public:
  inline GDGuildDungeonPacket() : GDGuildDungeonPacket(nullptr) {}
  ~GDGuildDungeonPacket() override;
  explicit PROTOBUF_CONSTEXPR GDGuildDungeonPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GDGuildDungeonPacket(const GDGuildDungeonPacket& from);
  GDGuildDungeonPacket(GDGuildDungeonPacket&& from) noexcept
    : GDGuildDungeonPacket() {
    *this = ::std::move(from);
  }

  inline GDGuildDungeonPacket& operator=(const GDGuildDungeonPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GDGuildDungeonPacket& operator=(GDGuildDungeonPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GDGuildDungeonPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GDGuildDungeonPacket* internal_default_instance() {
    return reinterpret_cast<const GDGuildDungeonPacket*>(
               &_GDGuildDungeonPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    85;

  friend void swap(GDGuildDungeonPacket& a, GDGuildDungeonPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GDGuildDungeonPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GDGuildDungeonPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GDGuildDungeonPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GDGuildDungeonPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GDGuildDungeonPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GDGuildDungeonPacket& from) {
    GDGuildDungeonPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GDGuildDungeonPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GDGuildDungeonPacket";
  }
  protected:
  explicit GDGuildDungeonPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGuildIdFieldNumber = 1,
    kChannelFieldNumber = 2,
    kMapIndexFieldNumber = 3,
  };
  // uint32 guild_id = 1;
  void clear_guild_id();
  uint32_t guild_id() const;
  void set_guild_id(uint32_t value);
  private:
  uint32_t _internal_guild_id() const;
  void _internal_set_guild_id(uint32_t value);
  public:

  // uint32 channel = 2;
  void clear_channel();
  uint32_t channel() const;
  void set_channel(uint32_t value);
  private:
  uint32_t _internal_channel() const;
  void _internal_set_channel(uint32_t value);
  public:

  // uint32 map_index = 3;
  void clear_map_index();
  uint32_t map_index() const;
  void set_map_index(uint32_t value);
  private:
  uint32_t _internal_map_index() const;
  void _internal_set_map_index(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GDGuildDungeonPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t guild_id_;
    uint32_t channel_;
    uint32_t map_index_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gd_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GDGuildDungeonCDPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GDGuildDungeonCDPacket) */ {
 public:
  inline GDGuildDungeonCDPacket() : GDGuildDungeonCDPacket(nullptr) {}
  ~GDGuildDungeonCDPacket() override;
  explicit PROTOBUF_CONSTEXPR GDGuildDungeonCDPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GDGuildDungeonCDPacket(const GDGuildDungeonCDPacket& from);
  GDGuildDungeonCDPacket(GDGuildDungeonCDPacket&& from) noexcept
    : GDGuildDungeonCDPacket() {
    *this = ::std::move(from);
  }

  inline GDGuildDungeonCDPacket& operator=(const GDGuildDungeonCDPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GDGuildDungeonCDPacket& operator=(GDGuildDungeonCDPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GDGuildDungeonCDPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GDGuildDungeonCDPacket* internal_default_instance() {
    return reinterpret_cast<const GDGuildDungeonCDPacket*>(
               &_GDGuildDungeonCDPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    86;

  friend void swap(GDGuildDungeonCDPacket& a, GDGuildDungeonCDPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GDGuildDungeonCDPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GDGuildDungeonCDPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GDGuildDungeonCDPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GDGuildDungeonCDPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GDGuildDungeonCDPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GDGuildDungeonCDPacket& from) {
    GDGuildDungeonCDPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GDGuildDungeonCDPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GDGuildDungeonCDPacket";
  }
  protected:
  explicit GDGuildDungeonCDPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGuildIdFieldNumber = 1,
    kTimeFieldNumber = 2,
  };
  // uint32 guild_id = 1;
  void clear_guild_id();
  uint32_t guild_id() const;
  void set_guild_id(uint32_t value);
  private:
  uint32_t _internal_guild_id() const;
  void _internal_set_guild_id(uint32_t value);
  public:

  // uint32 time = 2;
  void clear_time();
  uint32_t time() const;
  void set_time(uint32_t value);
  private:
  uint32_t _internal_time() const;
  void _internal_set_time(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GDGuildDungeonCDPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t guild_id_;
    uint32_t time_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gd_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GDGuildWarPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GDGuildWarPacket) */ {
 public:
  inline GDGuildWarPacket() : GDGuildWarPacket(nullptr) {}
  ~GDGuildWarPacket() override;
  explicit PROTOBUF_CONSTEXPR GDGuildWarPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GDGuildWarPacket(const GDGuildWarPacket& from);
  GDGuildWarPacket(GDGuildWarPacket&& from) noexcept
    : GDGuildWarPacket() {
    *this = ::std::move(from);
  }

  inline GDGuildWarPacket& operator=(const GDGuildWarPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GDGuildWarPacket& operator=(GDGuildWarPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GDGuildWarPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GDGuildWarPacket* internal_default_instance() {
    return reinterpret_cast<const GDGuildWarPacket*>(
               &_GDGuildWarPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    87;

  friend void swap(GDGuildWarPacket& a, GDGuildWarPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GDGuildWarPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GDGuildWarPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GDGuildWarPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GDGuildWarPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GDGuildWarPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GDGuildWarPacket& from) {
    GDGuildWarPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GDGuildWarPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GDGuildWarPacket";
  }
  protected:
  explicit GDGuildWarPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kWarFieldNumber = 2,
    kGuildFromFieldNumber = 3,
    kGuildToFieldNumber = 4,
    kWarPriceFieldNumber = 5,
    kInitialScoreFieldNumber = 6,
  };
  // uint32 type = 1;
  void clear_type();
  uint32_t type() const;
  void set_type(uint32_t value);
  private:
  uint32_t _internal_type() const;
  void _internal_set_type(uint32_t value);
  public:

  // uint32 war = 2;
  void clear_war();
  uint32_t war() const;
  void set_war(uint32_t value);
  private:
  uint32_t _internal_war() const;
  void _internal_set_war(uint32_t value);
  public:

  // uint32 guild_from = 3;
  void clear_guild_from();
  uint32_t guild_from() const;
  void set_guild_from(uint32_t value);
  private:
  uint32_t _internal_guild_from() const;
  void _internal_set_guild_from(uint32_t value);
  public:

  // uint32 guild_to = 4;
  void clear_guild_to();
  uint32_t guild_to() const;
  void set_guild_to(uint32_t value);
  private:
  uint32_t _internal_guild_to() const;
  void _internal_set_guild_to(uint32_t value);
  public:

  // int32 war_price = 5;
  void clear_war_price();
  int32_t war_price() const;
  void set_war_price(int32_t value);
  private:
  int32_t _internal_war_price() const;
  void _internal_set_war_price(int32_t value);
  public:

  // int32 initial_score = 6;
  void clear_initial_score();
  int32_t initial_score() const;
  void set_initial_score(int32_t value);
  private:
  int32_t _internal_initial_score() const;
  void _internal_set_initial_score(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GDGuildWarPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t type_;
    uint32_t war_;
    uint32_t guild_from_;
    uint32_t guild_to_;
    int32_t war_price_;
    int32_t initial_score_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gd_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GDGuildWarScorePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GDGuildWarScorePacket) */ {
 public:
  inline GDGuildWarScorePacket() : GDGuildWarScorePacket(nullptr) {}
  ~GDGuildWarScorePacket() override;
  explicit PROTOBUF_CONSTEXPR GDGuildWarScorePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GDGuildWarScorePacket(const GDGuildWarScorePacket& from);
  GDGuildWarScorePacket(GDGuildWarScorePacket&& from) noexcept
    : GDGuildWarScorePacket() {
    *this = ::std::move(from);
  }

  inline GDGuildWarScorePacket& operator=(const GDGuildWarScorePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GDGuildWarScorePacket& operator=(GDGuildWarScorePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GDGuildWarScorePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GDGuildWarScorePacket* internal_default_instance() {
    return reinterpret_cast<const GDGuildWarScorePacket*>(
               &_GDGuildWarScorePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    88;

  friend void swap(GDGuildWarScorePacket& a, GDGuildWarScorePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GDGuildWarScorePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GDGuildWarScorePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GDGuildWarScorePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GDGuildWarScorePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GDGuildWarScorePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GDGuildWarScorePacket& from) {
    GDGuildWarScorePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GDGuildWarScorePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GDGuildWarScorePacket";
  }
  protected:
  explicit GDGuildWarScorePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGuildGainPointFieldNumber = 1,
    kGuildOpponentFieldNumber = 2,
    kScoreFieldNumber = 3,
    kBetScoreFieldNumber = 4,
  };
  // uint32 guild_gain_point = 1;
  void clear_guild_gain_point();
  uint32_t guild_gain_point() const;
  void set_guild_gain_point(uint32_t value);
  private:
  uint32_t _internal_guild_gain_point() const;
  void _internal_set_guild_gain_point(uint32_t value);
  public:

  // uint32 guild_opponent = 2;
  void clear_guild_opponent();
  uint32_t guild_opponent() const;
  void set_guild_opponent(uint32_t value);
  private:
  uint32_t _internal_guild_opponent() const;
  void _internal_set_guild_opponent(uint32_t value);
  public:

  // int32 score = 3;
  void clear_score();
  int32_t score() const;
  void set_score(int32_t value);
  private:
  int32_t _internal_score() const;
  void _internal_set_score(int32_t value);
  public:

  // int32 bet_score = 4;
  void clear_bet_score();
  int32_t bet_score() const;
  void set_bet_score(int32_t value);
  private:
  int32_t _internal_bet_score() const;
  void _internal_set_bet_score(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GDGuildWarScorePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t guild_gain_point_;
    uint32_t guild_opponent_;
    int32_t score_;
    int32_t bet_score_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gd_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GDGuildChangeLadderPointPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GDGuildChangeLadderPointPacket) */ {
 public:
  inline GDGuildChangeLadderPointPacket() : GDGuildChangeLadderPointPacket(nullptr) {}
  ~GDGuildChangeLadderPointPacket() override;
  explicit PROTOBUF_CONSTEXPR GDGuildChangeLadderPointPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GDGuildChangeLadderPointPacket(const GDGuildChangeLadderPointPacket& from);
  GDGuildChangeLadderPointPacket(GDGuildChangeLadderPointPacket&& from) noexcept
    : GDGuildChangeLadderPointPacket() {
    *this = ::std::move(from);
  }

  inline GDGuildChangeLadderPointPacket& operator=(const GDGuildChangeLadderPointPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GDGuildChangeLadderPointPacket& operator=(GDGuildChangeLadderPointPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GDGuildChangeLadderPointPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GDGuildChangeLadderPointPacket* internal_default_instance() {
    return reinterpret_cast<const GDGuildChangeLadderPointPacket*>(
               &_GDGuildChangeLadderPointPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    89;

  friend void swap(GDGuildChangeLadderPointPacket& a, GDGuildChangeLadderPointPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GDGuildChangeLadderPointPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GDGuildChangeLadderPointPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GDGuildChangeLadderPointPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GDGuildChangeLadderPointPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GDGuildChangeLadderPointPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GDGuildChangeLadderPointPacket& from) {
    GDGuildChangeLadderPointPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GDGuildChangeLadderPointPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GDGuildChangeLadderPointPacket";
  }
  protected:
  explicit GDGuildChangeLadderPointPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGuildIdFieldNumber = 1,
    kChangeFieldNumber = 2,
  };
  // uint32 guild_id = 1;
  void clear_guild_id();
  uint32_t guild_id() const;
  void set_guild_id(uint32_t value);
  private:
  uint32_t _internal_guild_id() const;
  void _internal_set_guild_id(uint32_t value);
  public:

  // int32 change = 2;
  void clear_change();
  int32_t change() const;
  void set_change(int32_t value);
  private:
  int32_t _internal_change() const;
  void _internal_set_change(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GDGuildChangeLadderPointPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t guild_id_;
    int32_t change_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gd_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GDGuildUseSkillPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GDGuildUseSkillPacket) */ {
 public:
  inline GDGuildUseSkillPacket() : GDGuildUseSkillPacket(nullptr) {}
  ~GDGuildUseSkillPacket() override;
  explicit PROTOBUF_CONSTEXPR GDGuildUseSkillPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GDGuildUseSkillPacket(const GDGuildUseSkillPacket& from);
  GDGuildUseSkillPacket(GDGuildUseSkillPacket&& from) noexcept
    : GDGuildUseSkillPacket() {
    *this = ::std::move(from);
  }

  inline GDGuildUseSkillPacket& operator=(const GDGuildUseSkillPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GDGuildUseSkillPacket& operator=(GDGuildUseSkillPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GDGuildUseSkillPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GDGuildUseSkillPacket* internal_default_instance() {
    return reinterpret_cast<const GDGuildUseSkillPacket*>(
               &_GDGuildUseSkillPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    90;

  friend void swap(GDGuildUseSkillPacket& a, GDGuildUseSkillPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GDGuildUseSkillPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GDGuildUseSkillPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GDGuildUseSkillPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GDGuildUseSkillPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GDGuildUseSkillPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GDGuildUseSkillPacket& from) {
    GDGuildUseSkillPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GDGuildUseSkillPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GDGuildUseSkillPacket";
  }
  protected:
  explicit GDGuildUseSkillPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGuildIdFieldNumber = 1,
    kSkillVnumFieldNumber = 2,
    kCooltimeFieldNumber = 3,
  };
  // uint32 guild_id = 1;
  void clear_guild_id();
  uint32_t guild_id() const;
  void set_guild_id(uint32_t value);
  private:
  uint32_t _internal_guild_id() const;
  void _internal_set_guild_id(uint32_t value);
  public:

  // uint32 skill_vnum = 2;
  void clear_skill_vnum();
  uint32_t skill_vnum() const;
  void set_skill_vnum(uint32_t value);
  private:
  uint32_t _internal_skill_vnum() const;
  void _internal_set_skill_vnum(uint32_t value);
  public:

  // uint32 cooltime = 3;
  void clear_cooltime();
  uint32_t cooltime() const;
  void set_cooltime(uint32_t value);
  private:
  uint32_t _internal_cooltime() const;
  void _internal_set_cooltime(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GDGuildUseSkillPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t guild_id_;
    uint32_t skill_vnum_;
    uint32_t cooltime_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gd_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GDGuildDepositMoneyPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GDGuildDepositMoneyPacket) */ {
 public:
  inline GDGuildDepositMoneyPacket() : GDGuildDepositMoneyPacket(nullptr) {}
  ~GDGuildDepositMoneyPacket() override;
  explicit PROTOBUF_CONSTEXPR GDGuildDepositMoneyPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GDGuildDepositMoneyPacket(const GDGuildDepositMoneyPacket& from);
  GDGuildDepositMoneyPacket(GDGuildDepositMoneyPacket&& from) noexcept
    : GDGuildDepositMoneyPacket() {
    *this = ::std::move(from);
  }

  inline GDGuildDepositMoneyPacket& operator=(const GDGuildDepositMoneyPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GDGuildDepositMoneyPacket& operator=(GDGuildDepositMoneyPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GDGuildDepositMoneyPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GDGuildDepositMoneyPacket* internal_default_instance() {
    return reinterpret_cast<const GDGuildDepositMoneyPacket*>(
               &_GDGuildDepositMoneyPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    91;

  friend void swap(GDGuildDepositMoneyPacket& a, GDGuildDepositMoneyPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GDGuildDepositMoneyPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GDGuildDepositMoneyPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GDGuildDepositMoneyPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GDGuildDepositMoneyPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GDGuildDepositMoneyPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GDGuildDepositMoneyPacket& from) {
    GDGuildDepositMoneyPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GDGuildDepositMoneyPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GDGuildDepositMoneyPacket";
  }
  protected:
  explicit GDGuildDepositMoneyPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGuildIdFieldNumber = 1,
    kGoldFieldNumber = 2,
  };
  // uint32 guild_id = 1;
  void clear_guild_id();
  uint32_t guild_id() const;
  void set_guild_id(uint32_t value);
  private:
  uint32_t _internal_guild_id() const;
  void _internal_set_guild_id(uint32_t value);
  public:

  // int32 gold = 2;
  void clear_gold();
  int32_t gold() const;
  void set_gold(int32_t value);
  private:
  int32_t _internal_gold() const;
  void _internal_set_gold(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GDGuildDepositMoneyPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t guild_id_;
    int32_t gold_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gd_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GDGuildWithdrawMoneyPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GDGuildWithdrawMoneyPacket) */ {
 public:
  inline GDGuildWithdrawMoneyPacket() : GDGuildWithdrawMoneyPacket(nullptr) {}
  ~GDGuildWithdrawMoneyPacket() override;
  explicit PROTOBUF_CONSTEXPR GDGuildWithdrawMoneyPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GDGuildWithdrawMoneyPacket(const GDGuildWithdrawMoneyPacket& from);
  GDGuildWithdrawMoneyPacket(GDGuildWithdrawMoneyPacket&& from) noexcept
    : GDGuildWithdrawMoneyPacket() {
    *this = ::std::move(from);
  }

  inline GDGuildWithdrawMoneyPacket& operator=(const GDGuildWithdrawMoneyPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GDGuildWithdrawMoneyPacket& operator=(GDGuildWithdrawMoneyPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GDGuildWithdrawMoneyPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GDGuildWithdrawMoneyPacket* internal_default_instance() {
    return reinterpret_cast<const GDGuildWithdrawMoneyPacket*>(
               &_GDGuildWithdrawMoneyPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    92;

  friend void swap(GDGuildWithdrawMoneyPacket& a, GDGuildWithdrawMoneyPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GDGuildWithdrawMoneyPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GDGuildWithdrawMoneyPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GDGuildWithdrawMoneyPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GDGuildWithdrawMoneyPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GDGuildWithdrawMoneyPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GDGuildWithdrawMoneyPacket& from) {
    GDGuildWithdrawMoneyPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GDGuildWithdrawMoneyPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GDGuildWithdrawMoneyPacket";
  }
  protected:
  explicit GDGuildWithdrawMoneyPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGuildIdFieldNumber = 1,
    kGoldFieldNumber = 2,
  };
  // uint32 guild_id = 1;
  void clear_guild_id();
  uint32_t guild_id() const;
  void set_guild_id(uint32_t value);
  private:
  uint32_t _internal_guild_id() const;
  void _internal_set_guild_id(uint32_t value);
  public:

  // int32 gold = 2;
  void clear_gold();
  int32_t gold() const;
  void set_gold(int32_t value);
  private:
  int32_t _internal_gold() const;
  void _internal_set_gold(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GDGuildWithdrawMoneyPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t guild_id_;
    int32_t gold_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gd_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GDGuildWithdrawMoneyGiveReplyPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GDGuildWithdrawMoneyGiveReplyPacket) */ {
 public:
  inline GDGuildWithdrawMoneyGiveReplyPacket() : GDGuildWithdrawMoneyGiveReplyPacket(nullptr) {}
  ~GDGuildWithdrawMoneyGiveReplyPacket() override;
  explicit PROTOBUF_CONSTEXPR GDGuildWithdrawMoneyGiveReplyPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GDGuildWithdrawMoneyGiveReplyPacket(const GDGuildWithdrawMoneyGiveReplyPacket& from);
  GDGuildWithdrawMoneyGiveReplyPacket(GDGuildWithdrawMoneyGiveReplyPacket&& from) noexcept
    : GDGuildWithdrawMoneyGiveReplyPacket() {
    *this = ::std::move(from);
  }

  inline GDGuildWithdrawMoneyGiveReplyPacket& operator=(const GDGuildWithdrawMoneyGiveReplyPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GDGuildWithdrawMoneyGiveReplyPacket& operator=(GDGuildWithdrawMoneyGiveReplyPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GDGuildWithdrawMoneyGiveReplyPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GDGuildWithdrawMoneyGiveReplyPacket* internal_default_instance() {
    return reinterpret_cast<const GDGuildWithdrawMoneyGiveReplyPacket*>(
               &_GDGuildWithdrawMoneyGiveReplyPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    93;

  friend void swap(GDGuildWithdrawMoneyGiveReplyPacket& a, GDGuildWithdrawMoneyGiveReplyPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GDGuildWithdrawMoneyGiveReplyPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GDGuildWithdrawMoneyGiveReplyPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GDGuildWithdrawMoneyGiveReplyPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GDGuildWithdrawMoneyGiveReplyPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GDGuildWithdrawMoneyGiveReplyPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GDGuildWithdrawMoneyGiveReplyPacket& from) {
    GDGuildWithdrawMoneyGiveReplyPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GDGuildWithdrawMoneyGiveReplyPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GDGuildWithdrawMoneyGiveReplyPacket";
  }
  protected:
  explicit GDGuildWithdrawMoneyGiveReplyPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGuildIdFieldNumber = 1,
    kChangeGoldFieldNumber = 2,
    kGiveSuccessFieldNumber = 3,
  };
  // uint32 guild_id = 1;
  void clear_guild_id();
  uint32_t guild_id() const;
  void set_guild_id(uint32_t value);
  private:
  uint32_t _internal_guild_id() const;
  void _internal_set_guild_id(uint32_t value);
  public:

  // int32 change_gold = 2;
  void clear_change_gold();
  int32_t change_gold() const;
  void set_change_gold(int32_t value);
  private:
  int32_t _internal_change_gold() const;
  void _internal_set_change_gold(int32_t value);
  public:

  // bool give_success = 3;
  void clear_give_success();
  bool give_success() const;
  void set_give_success(bool value);
  private:
  bool _internal_give_success() const;
  void _internal_set_give_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:network.GDGuildWithdrawMoneyGiveReplyPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t guild_id_;
    int32_t change_gold_;
    bool give_success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gd_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GDGuildWarBetPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GDGuildWarBetPacket) */ {
 public:
  inline GDGuildWarBetPacket() : GDGuildWarBetPacket(nullptr) {}
  ~GDGuildWarBetPacket() override;
  explicit PROTOBUF_CONSTEXPR GDGuildWarBetPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GDGuildWarBetPacket(const GDGuildWarBetPacket& from);
  GDGuildWarBetPacket(GDGuildWarBetPacket&& from) noexcept
    : GDGuildWarBetPacket() {
    *this = ::std::move(from);
  }

  inline GDGuildWarBetPacket& operator=(const GDGuildWarBetPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GDGuildWarBetPacket& operator=(GDGuildWarBetPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GDGuildWarBetPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GDGuildWarBetPacket* internal_default_instance() {
    return reinterpret_cast<const GDGuildWarBetPacket*>(
               &_GDGuildWarBetPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    94;

  friend void swap(GDGuildWarBetPacket& a, GDGuildWarBetPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GDGuildWarBetPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GDGuildWarBetPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GDGuildWarBetPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GDGuildWarBetPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GDGuildWarBetPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GDGuildWarBetPacket& from) {
    GDGuildWarBetPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GDGuildWarBetPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GDGuildWarBetPacket";
  }
  protected:
  explicit GDGuildWarBetPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLoginFieldNumber = 2,
    kWarIdFieldNumber = 1,
    kGoldFieldNumber = 3,
    kGuildIdFieldNumber = 4,
  };
  // bytes login = 2;
  void clear_login();
  const std::string& login() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_login(ArgT0&& arg0, ArgT... args);
  std::string* mutable_login();
  PROTOBUF_NODISCARD std::string* release_login();
  void set_allocated_login(std::string* login);
  private:
  const std::string& _internal_login() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_login(const std::string& value);
  std::string* _internal_mutable_login();
  public:

  // uint32 war_id = 1;
  void clear_war_id();
  uint32_t war_id() const;
  void set_war_id(uint32_t value);
  private:
  uint32_t _internal_war_id() const;
  void _internal_set_war_id(uint32_t value);
  public:

  // uint32 gold = 3;
  void clear_gold();
  uint32_t gold() const;
  void set_gold(uint32_t value);
  private:
  uint32_t _internal_gold() const;
  void _internal_set_gold(uint32_t value);
  public:

  // uint32 guild_id = 4;
  void clear_guild_id();
  uint32_t guild_id() const;
  void set_guild_id(uint32_t value);
  private:
  uint32_t _internal_guild_id() const;
  void _internal_set_guild_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GDGuildWarBetPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr login_;
    uint32_t war_id_;
    uint32_t gold_;
    uint32_t guild_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gd_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GDGuildReqChangeMasterPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GDGuildReqChangeMasterPacket) */ {
 public:
  inline GDGuildReqChangeMasterPacket() : GDGuildReqChangeMasterPacket(nullptr) {}
  ~GDGuildReqChangeMasterPacket() override;
  explicit PROTOBUF_CONSTEXPR GDGuildReqChangeMasterPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GDGuildReqChangeMasterPacket(const GDGuildReqChangeMasterPacket& from);
  GDGuildReqChangeMasterPacket(GDGuildReqChangeMasterPacket&& from) noexcept
    : GDGuildReqChangeMasterPacket() {
    *this = ::std::move(from);
  }

  inline GDGuildReqChangeMasterPacket& operator=(const GDGuildReqChangeMasterPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GDGuildReqChangeMasterPacket& operator=(GDGuildReqChangeMasterPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GDGuildReqChangeMasterPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GDGuildReqChangeMasterPacket* internal_default_instance() {
    return reinterpret_cast<const GDGuildReqChangeMasterPacket*>(
               &_GDGuildReqChangeMasterPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    95;

  friend void swap(GDGuildReqChangeMasterPacket& a, GDGuildReqChangeMasterPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GDGuildReqChangeMasterPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GDGuildReqChangeMasterPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GDGuildReqChangeMasterPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GDGuildReqChangeMasterPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GDGuildReqChangeMasterPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GDGuildReqChangeMasterPacket& from) {
    GDGuildReqChangeMasterPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GDGuildReqChangeMasterPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GDGuildReqChangeMasterPacket";
  }
  protected:
  explicit GDGuildReqChangeMasterPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGuildIdFieldNumber = 1,
    kIdFromFieldNumber = 2,
    kIdToFieldNumber = 3,
  };
  // uint32 guild_id = 1;
  void clear_guild_id();
  uint32_t guild_id() const;
  void set_guild_id(uint32_t value);
  private:
  uint32_t _internal_guild_id() const;
  void _internal_set_guild_id(uint32_t value);
  public:

  // uint32 id_from = 2;
  void clear_id_from();
  uint32_t id_from() const;
  void set_id_from(uint32_t value);
  private:
  uint32_t _internal_id_from() const;
  void _internal_set_id_from(uint32_t value);
  public:

  // uint32 id_to = 3;
  void clear_id_to();
  uint32_t id_to() const;
  void set_id_to(uint32_t value);
  private:
  uint32_t _internal_id_to() const;
  void _internal_set_id_to(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GDGuildReqChangeMasterPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t guild_id_;
    uint32_t id_from_;
    uint32_t id_to_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gd_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GDGuildSafeboxLoadPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GDGuildSafeboxLoadPacket) */ {
 public:
  inline GDGuildSafeboxLoadPacket() : GDGuildSafeboxLoadPacket(nullptr) {}
  ~GDGuildSafeboxLoadPacket() override;
  explicit PROTOBUF_CONSTEXPR GDGuildSafeboxLoadPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GDGuildSafeboxLoadPacket(const GDGuildSafeboxLoadPacket& from);
  GDGuildSafeboxLoadPacket(GDGuildSafeboxLoadPacket&& from) noexcept
    : GDGuildSafeboxLoadPacket() {
    *this = ::std::move(from);
  }

  inline GDGuildSafeboxLoadPacket& operator=(const GDGuildSafeboxLoadPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GDGuildSafeboxLoadPacket& operator=(GDGuildSafeboxLoadPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GDGuildSafeboxLoadPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GDGuildSafeboxLoadPacket* internal_default_instance() {
    return reinterpret_cast<const GDGuildSafeboxLoadPacket*>(
               &_GDGuildSafeboxLoadPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    96;

  friend void swap(GDGuildSafeboxLoadPacket& a, GDGuildSafeboxLoadPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GDGuildSafeboxLoadPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GDGuildSafeboxLoadPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GDGuildSafeboxLoadPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GDGuildSafeboxLoadPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GDGuildSafeboxLoadPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GDGuildSafeboxLoadPacket& from) {
    GDGuildSafeboxLoadPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GDGuildSafeboxLoadPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GDGuildSafeboxLoadPacket";
  }
  protected:
  explicit GDGuildSafeboxLoadPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGuildIdFieldNumber = 1,
  };
  // uint32 guild_id = 1;
  void clear_guild_id();
  uint32_t guild_id() const;
  void set_guild_id(uint32_t value);
  private:
  uint32_t _internal_guild_id() const;
  void _internal_set_guild_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GDGuildSafeboxLoadPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t guild_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gd_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GDGuildSafeboxCreatePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GDGuildSafeboxCreatePacket) */ {
 public:
  inline GDGuildSafeboxCreatePacket() : GDGuildSafeboxCreatePacket(nullptr) {}
  ~GDGuildSafeboxCreatePacket() override;
  explicit PROTOBUF_CONSTEXPR GDGuildSafeboxCreatePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GDGuildSafeboxCreatePacket(const GDGuildSafeboxCreatePacket& from);
  GDGuildSafeboxCreatePacket(GDGuildSafeboxCreatePacket&& from) noexcept
    : GDGuildSafeboxCreatePacket() {
    *this = ::std::move(from);
  }

  inline GDGuildSafeboxCreatePacket& operator=(const GDGuildSafeboxCreatePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GDGuildSafeboxCreatePacket& operator=(GDGuildSafeboxCreatePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GDGuildSafeboxCreatePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GDGuildSafeboxCreatePacket* internal_default_instance() {
    return reinterpret_cast<const GDGuildSafeboxCreatePacket*>(
               &_GDGuildSafeboxCreatePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    97;

  friend void swap(GDGuildSafeboxCreatePacket& a, GDGuildSafeboxCreatePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GDGuildSafeboxCreatePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GDGuildSafeboxCreatePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GDGuildSafeboxCreatePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GDGuildSafeboxCreatePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GDGuildSafeboxCreatePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GDGuildSafeboxCreatePacket& from) {
    GDGuildSafeboxCreatePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GDGuildSafeboxCreatePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GDGuildSafeboxCreatePacket";
  }
  protected:
  explicit GDGuildSafeboxCreatePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 3,
    kGuildIdFieldNumber = 1,
    kPidFieldNumber = 2,
    kSizeFieldNumber = 4,
  };
  // bytes name = 3;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 guild_id = 1;
  void clear_guild_id();
  uint32_t guild_id() const;
  void set_guild_id(uint32_t value);
  private:
  uint32_t _internal_guild_id() const;
  void _internal_set_guild_id(uint32_t value);
  public:

  // uint32 pid = 2;
  void clear_pid();
  uint32_t pid() const;
  void set_pid(uint32_t value);
  private:
  uint32_t _internal_pid() const;
  void _internal_set_pid(uint32_t value);
  public:

  // uint32 size = 4;
  void clear_size();
  uint32_t size() const;
  void set_size(uint32_t value);
  private:
  uint32_t _internal_size() const;
  void _internal_set_size(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GDGuildSafeboxCreatePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    uint32_t guild_id_;
    uint32_t pid_;
    uint32_t size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gd_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GDGuildSafeboxSizePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GDGuildSafeboxSizePacket) */ {
 public:
  inline GDGuildSafeboxSizePacket() : GDGuildSafeboxSizePacket(nullptr) {}
  ~GDGuildSafeboxSizePacket() override;
  explicit PROTOBUF_CONSTEXPR GDGuildSafeboxSizePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GDGuildSafeboxSizePacket(const GDGuildSafeboxSizePacket& from);
  GDGuildSafeboxSizePacket(GDGuildSafeboxSizePacket&& from) noexcept
    : GDGuildSafeboxSizePacket() {
    *this = ::std::move(from);
  }

  inline GDGuildSafeboxSizePacket& operator=(const GDGuildSafeboxSizePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GDGuildSafeboxSizePacket& operator=(GDGuildSafeboxSizePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GDGuildSafeboxSizePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GDGuildSafeboxSizePacket* internal_default_instance() {
    return reinterpret_cast<const GDGuildSafeboxSizePacket*>(
               &_GDGuildSafeboxSizePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    98;

  friend void swap(GDGuildSafeboxSizePacket& a, GDGuildSafeboxSizePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GDGuildSafeboxSizePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GDGuildSafeboxSizePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GDGuildSafeboxSizePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GDGuildSafeboxSizePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GDGuildSafeboxSizePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GDGuildSafeboxSizePacket& from) {
    GDGuildSafeboxSizePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GDGuildSafeboxSizePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GDGuildSafeboxSizePacket";
  }
  protected:
  explicit GDGuildSafeboxSizePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 3,
    kGuildIdFieldNumber = 1,
    kPidFieldNumber = 2,
    kSizeFieldNumber = 4,
  };
  // bytes name = 3;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 guild_id = 1;
  void clear_guild_id();
  uint32_t guild_id() const;
  void set_guild_id(uint32_t value);
  private:
  uint32_t _internal_guild_id() const;
  void _internal_set_guild_id(uint32_t value);
  public:

  // uint32 pid = 2;
  void clear_pid();
  uint32_t pid() const;
  void set_pid(uint32_t value);
  private:
  uint32_t _internal_pid() const;
  void _internal_set_pid(uint32_t value);
  public:

  // uint32 size = 4;
  void clear_size();
  uint32_t size() const;
  void set_size(uint32_t value);
  private:
  uint32_t _internal_size() const;
  void _internal_set_size(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GDGuildSafeboxSizePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    uint32_t guild_id_;
    uint32_t pid_;
    uint32_t size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gd_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GDGuildSafeboxAddPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GDGuildSafeboxAddPacket) */ {
 public:
  inline GDGuildSafeboxAddPacket() : GDGuildSafeboxAddPacket(nullptr) {}
  ~GDGuildSafeboxAddPacket() override;
  explicit PROTOBUF_CONSTEXPR GDGuildSafeboxAddPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GDGuildSafeboxAddPacket(const GDGuildSafeboxAddPacket& from);
  GDGuildSafeboxAddPacket(GDGuildSafeboxAddPacket&& from) noexcept
    : GDGuildSafeboxAddPacket() {
    *this = ::std::move(from);
  }

  inline GDGuildSafeboxAddPacket& operator=(const GDGuildSafeboxAddPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GDGuildSafeboxAddPacket& operator=(GDGuildSafeboxAddPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GDGuildSafeboxAddPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GDGuildSafeboxAddPacket* internal_default_instance() {
    return reinterpret_cast<const GDGuildSafeboxAddPacket*>(
               &_GDGuildSafeboxAddPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    99;

  friend void swap(GDGuildSafeboxAddPacket& a, GDGuildSafeboxAddPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GDGuildSafeboxAddPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GDGuildSafeboxAddPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GDGuildSafeboxAddPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GDGuildSafeboxAddPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GDGuildSafeboxAddPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GDGuildSafeboxAddPacket& from) {
    GDGuildSafeboxAddPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GDGuildSafeboxAddPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GDGuildSafeboxAddPacket";
  }
  protected:
  explicit GDGuildSafeboxAddPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kItemFieldNumber = 3,
    kPidFieldNumber = 1,
  };
  // bytes name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .network.TItemData item = 3;
  bool has_item() const;
  private:
  bool _internal_has_item() const;
  public:
  void clear_item();
  const ::network::TItemData& item() const;
  PROTOBUF_NODISCARD ::network::TItemData* release_item();
  ::network::TItemData* mutable_item();
  void set_allocated_item(::network::TItemData* item);
  private:
  const ::network::TItemData& _internal_item() const;
  ::network::TItemData* _internal_mutable_item();
  public:
  void unsafe_arena_set_allocated_item(
      ::network::TItemData* item);
  ::network::TItemData* unsafe_arena_release_item();

  // uint32 pid = 1;
  void clear_pid();
  uint32_t pid() const;
  void set_pid(uint32_t value);
  private:
  uint32_t _internal_pid() const;
  void _internal_set_pid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GDGuildSafeboxAddPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::network::TItemData* item_;
    uint32_t pid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gd_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GDGuildSafeboxTakePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GDGuildSafeboxTakePacket) */ {
 public:
  inline GDGuildSafeboxTakePacket() : GDGuildSafeboxTakePacket(nullptr) {}
  ~GDGuildSafeboxTakePacket() override;
  explicit PROTOBUF_CONSTEXPR GDGuildSafeboxTakePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GDGuildSafeboxTakePacket(const GDGuildSafeboxTakePacket& from);
  GDGuildSafeboxTakePacket(GDGuildSafeboxTakePacket&& from) noexcept
    : GDGuildSafeboxTakePacket() {
    *this = ::std::move(from);
  }

  inline GDGuildSafeboxTakePacket& operator=(const GDGuildSafeboxTakePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GDGuildSafeboxTakePacket& operator=(GDGuildSafeboxTakePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GDGuildSafeboxTakePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GDGuildSafeboxTakePacket* internal_default_instance() {
    return reinterpret_cast<const GDGuildSafeboxTakePacket*>(
               &_GDGuildSafeboxTakePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    100;

  friend void swap(GDGuildSafeboxTakePacket& a, GDGuildSafeboxTakePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GDGuildSafeboxTakePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GDGuildSafeboxTakePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GDGuildSafeboxTakePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GDGuildSafeboxTakePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GDGuildSafeboxTakePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GDGuildSafeboxTakePacket& from) {
    GDGuildSafeboxTakePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GDGuildSafeboxTakePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GDGuildSafeboxTakePacket";
  }
  protected:
  explicit GDGuildSafeboxTakePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerNameFieldNumber = 3,
    kTargetPosFieldNumber = 5,
    kGuildIdFieldNumber = 1,
    kPidFieldNumber = 2,
    kSourcePosFieldNumber = 4,
  };
  // bytes player_name = 3;
  void clear_player_name();
  const std::string& player_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_player_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_player_name();
  PROTOBUF_NODISCARD std::string* release_player_name();
  void set_allocated_player_name(std::string* player_name);
  private:
  const std::string& _internal_player_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_player_name(const std::string& value);
  std::string* _internal_mutable_player_name();
  public:

  // .network.TItemPos target_pos = 5;
  bool has_target_pos() const;
  private:
  bool _internal_has_target_pos() const;
  public:
  void clear_target_pos();
  const ::network::TItemPos& target_pos() const;
  PROTOBUF_NODISCARD ::network::TItemPos* release_target_pos();
  ::network::TItemPos* mutable_target_pos();
  void set_allocated_target_pos(::network::TItemPos* target_pos);
  private:
  const ::network::TItemPos& _internal_target_pos() const;
  ::network::TItemPos* _internal_mutable_target_pos();
  public:
  void unsafe_arena_set_allocated_target_pos(
      ::network::TItemPos* target_pos);
  ::network::TItemPos* unsafe_arena_release_target_pos();

  // uint32 guild_id = 1;
  void clear_guild_id();
  uint32_t guild_id() const;
  void set_guild_id(uint32_t value);
  private:
  uint32_t _internal_guild_id() const;
  void _internal_set_guild_id(uint32_t value);
  public:

  // uint32 pid = 2;
  void clear_pid();
  uint32_t pid() const;
  void set_pid(uint32_t value);
  private:
  uint32_t _internal_pid() const;
  void _internal_set_pid(uint32_t value);
  public:

  // uint32 source_pos = 4;
  void clear_source_pos();
  uint32_t source_pos() const;
  void set_source_pos(uint32_t value);
  private:
  uint32_t _internal_source_pos() const;
  void _internal_set_source_pos(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GDGuildSafeboxTakePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr player_name_;
    ::network::TItemPos* target_pos_;
    uint32_t guild_id_;
    uint32_t pid_;
    uint32_t source_pos_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gd_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GDGuildSafeboxMovePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GDGuildSafeboxMovePacket) */ {
 public:
  inline GDGuildSafeboxMovePacket() : GDGuildSafeboxMovePacket(nullptr) {}
  ~GDGuildSafeboxMovePacket() override;
  explicit PROTOBUF_CONSTEXPR GDGuildSafeboxMovePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GDGuildSafeboxMovePacket(const GDGuildSafeboxMovePacket& from);
  GDGuildSafeboxMovePacket(GDGuildSafeboxMovePacket&& from) noexcept
    : GDGuildSafeboxMovePacket() {
    *this = ::std::move(from);
  }

  inline GDGuildSafeboxMovePacket& operator=(const GDGuildSafeboxMovePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GDGuildSafeboxMovePacket& operator=(GDGuildSafeboxMovePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GDGuildSafeboxMovePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GDGuildSafeboxMovePacket* internal_default_instance() {
    return reinterpret_cast<const GDGuildSafeboxMovePacket*>(
               &_GDGuildSafeboxMovePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    101;

  friend void swap(GDGuildSafeboxMovePacket& a, GDGuildSafeboxMovePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GDGuildSafeboxMovePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GDGuildSafeboxMovePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GDGuildSafeboxMovePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GDGuildSafeboxMovePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GDGuildSafeboxMovePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GDGuildSafeboxMovePacket& from) {
    GDGuildSafeboxMovePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GDGuildSafeboxMovePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GDGuildSafeboxMovePacket";
  }
  protected:
  explicit GDGuildSafeboxMovePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGuildIdFieldNumber = 1,
    kSourceSlotFieldNumber = 2,
    kTargetSlotFieldNumber = 3,
  };
  // uint32 guild_id = 1;
  void clear_guild_id();
  uint32_t guild_id() const;
  void set_guild_id(uint32_t value);
  private:
  uint32_t _internal_guild_id() const;
  void _internal_set_guild_id(uint32_t value);
  public:

  // uint32 source_slot = 2;
  void clear_source_slot();
  uint32_t source_slot() const;
  void set_source_slot(uint32_t value);
  private:
  uint32_t _internal_source_slot() const;
  void _internal_set_source_slot(uint32_t value);
  public:

  // uint32 target_slot = 3;
  void clear_target_slot();
  uint32_t target_slot() const;
  void set_target_slot(uint32_t value);
  private:
  uint32_t _internal_target_slot() const;
  void _internal_set_target_slot(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GDGuildSafeboxMovePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t guild_id_;
    uint32_t source_slot_;
    uint32_t target_slot_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gd_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GDGuildSafeboxGiveGoldPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GDGuildSafeboxGiveGoldPacket) */ {
 public:
  inline GDGuildSafeboxGiveGoldPacket() : GDGuildSafeboxGiveGoldPacket(nullptr) {}
  ~GDGuildSafeboxGiveGoldPacket() override;
  explicit PROTOBUF_CONSTEXPR GDGuildSafeboxGiveGoldPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GDGuildSafeboxGiveGoldPacket(const GDGuildSafeboxGiveGoldPacket& from);
  GDGuildSafeboxGiveGoldPacket(GDGuildSafeboxGiveGoldPacket&& from) noexcept
    : GDGuildSafeboxGiveGoldPacket() {
    *this = ::std::move(from);
  }

  inline GDGuildSafeboxGiveGoldPacket& operator=(const GDGuildSafeboxGiveGoldPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GDGuildSafeboxGiveGoldPacket& operator=(GDGuildSafeboxGiveGoldPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GDGuildSafeboxGiveGoldPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GDGuildSafeboxGiveGoldPacket* internal_default_instance() {
    return reinterpret_cast<const GDGuildSafeboxGiveGoldPacket*>(
               &_GDGuildSafeboxGiveGoldPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    102;

  friend void swap(GDGuildSafeboxGiveGoldPacket& a, GDGuildSafeboxGiveGoldPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GDGuildSafeboxGiveGoldPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GDGuildSafeboxGiveGoldPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GDGuildSafeboxGiveGoldPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GDGuildSafeboxGiveGoldPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GDGuildSafeboxGiveGoldPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GDGuildSafeboxGiveGoldPacket& from) {
    GDGuildSafeboxGiveGoldPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GDGuildSafeboxGiveGoldPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GDGuildSafeboxGiveGoldPacket";
  }
  protected:
  explicit GDGuildSafeboxGiveGoldPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kPidFieldNumber = 1,
    kGuildIdFieldNumber = 3,
    kGoldFieldNumber = 4,
  };
  // bytes name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 pid = 1;
  void clear_pid();
  uint32_t pid() const;
  void set_pid(uint32_t value);
  private:
  uint32_t _internal_pid() const;
  void _internal_set_pid(uint32_t value);
  public:

  // uint32 guild_id = 3;
  void clear_guild_id();
  uint32_t guild_id() const;
  void set_guild_id(uint32_t value);
  private:
  uint32_t _internal_guild_id() const;
  void _internal_set_guild_id(uint32_t value);
  public:

  // uint64 gold = 4;
  void clear_gold();
  uint64_t gold() const;
  void set_gold(uint64_t value);
  private:
  uint64_t _internal_gold() const;
  void _internal_set_gold(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GDGuildSafeboxGiveGoldPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    uint32_t pid_;
    uint32_t guild_id_;
    uint64_t gold_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gd_5fpackets_2eproto;
};
// -------------------------------------------------------------------

class GDGuildSafeboxGetGoldPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.GDGuildSafeboxGetGoldPacket) */ {
 public:
  inline GDGuildSafeboxGetGoldPacket() : GDGuildSafeboxGetGoldPacket(nullptr) {}
  ~GDGuildSafeboxGetGoldPacket() override;
  explicit PROTOBUF_CONSTEXPR GDGuildSafeboxGetGoldPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GDGuildSafeboxGetGoldPacket(const GDGuildSafeboxGetGoldPacket& from);
  GDGuildSafeboxGetGoldPacket(GDGuildSafeboxGetGoldPacket&& from) noexcept
    : GDGuildSafeboxGetGoldPacket() {
    *this = ::std::move(from);
  }

  inline GDGuildSafeboxGetGoldPacket& operator=(const GDGuildSafeboxGetGoldPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GDGuildSafeboxGetGoldPacket& operator=(GDGuildSafeboxGetGoldPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GDGuildSafeboxGetGoldPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const GDGuildSafeboxGetGoldPacket* internal_default_instance() {
    return reinterpret_cast<const GDGuildSafeboxGetGoldPacket*>(
               &_GDGuildSafeboxGetGoldPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    103;

  friend void swap(GDGuildSafeboxGetGoldPacket& a, GDGuildSafeboxGetGoldPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GDGuildSafeboxGetGoldPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GDGuildSafeboxGetGoldPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GDGuildSafeboxGetGoldPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GDGuildSafeboxGetGoldPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GDGuildSafeboxGetGoldPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GDGuildSafeboxGetGoldPacket& from) {
    GDGuildSafeboxGetGoldPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GDGuildSafeboxGetGoldPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.GDGuildSafeboxGetGoldPacket";
  }
  protected:
  explicit GDGuildSafeboxGetGoldPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kPidFieldNumber = 1,
    kGuildIdFieldNumber = 3,
    kGoldFieldNumber = 4,
  };
  // bytes name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 pid = 1;
  void clear_pid();
  uint32_t pid() const;
  void set_pid(uint32_t value);
  private:
  uint32_t _internal_pid() const;
  void _internal_set_pid(uint32_t value);
  public:

  // uint32 guild_id = 3;
  void clear_guild_id();
  uint32_t guild_id() const;
  void set_guild_id(uint32_t value);
  private:
  uint32_t _internal_guild_id() const;
  void _internal_set_guild_id(uint32_t value);
  public:

  // uint64 gold = 4;
  void clear_gold();
  uint64_t gold() const;
  void set_gold(uint64_t value);
  private:
  uint64_t _internal_gold() const;
  void _internal_set_gold(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:network.GDGuildSafeboxGetGoldPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    uint32_t pid_;
    uint32_t guild_id_;
    uint64_t gold_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gd_5fpackets_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GDBootPacket

// uint32 item_range_start = 1;
inline void GDBootPacket::clear_item_range_start() {
  _impl_.item_range_start_ = 0u;
}
inline uint32_t GDBootPacket::_internal_item_range_start() const {
  return _impl_.item_range_start_;
}
inline uint32_t GDBootPacket::item_range_start() const {
  // @@protoc_insertion_point(field_get:network.GDBootPacket.item_range_start)
  return _internal_item_range_start();
}
inline void GDBootPacket::_internal_set_item_range_start(uint32_t value) {
  
  _impl_.item_range_start_ = value;
}
inline void GDBootPacket::set_item_range_start(uint32_t value) {
  _internal_set_item_range_start(value);
  // @@protoc_insertion_point(field_set:network.GDBootPacket.item_range_start)
}

// uint32 item_range_end = 2;
inline void GDBootPacket::clear_item_range_end() {
  _impl_.item_range_end_ = 0u;
}
inline uint32_t GDBootPacket::_internal_item_range_end() const {
  return _impl_.item_range_end_;
}
inline uint32_t GDBootPacket::item_range_end() const {
  // @@protoc_insertion_point(field_get:network.GDBootPacket.item_range_end)
  return _internal_item_range_end();
}
inline void GDBootPacket::_internal_set_item_range_end(uint32_t value) {
  
  _impl_.item_range_end_ = value;
}
inline void GDBootPacket::set_item_range_end(uint32_t value) {
  _internal_set_item_range_end(value);
  // @@protoc_insertion_point(field_set:network.GDBootPacket.item_range_end)
}

// bytes ip = 3;
inline void GDBootPacket::clear_ip() {
  _impl_.ip_.ClearToEmpty();
}
inline const std::string& GDBootPacket::ip() const {
  // @@protoc_insertion_point(field_get:network.GDBootPacket.ip)
  return _internal_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GDBootPacket::set_ip(ArgT0&& arg0, ArgT... args) {
 
 _impl_.ip_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GDBootPacket.ip)
}
inline std::string* GDBootPacket::mutable_ip() {
  std::string* _s = _internal_mutable_ip();
  // @@protoc_insertion_point(field_mutable:network.GDBootPacket.ip)
  return _s;
}
inline const std::string& GDBootPacket::_internal_ip() const {
  return _impl_.ip_.Get();
}
inline void GDBootPacket::_internal_set_ip(const std::string& value) {
  
  _impl_.ip_.Set(value, GetArenaForAllocation());
}
inline std::string* GDBootPacket::_internal_mutable_ip() {
  
  return _impl_.ip_.Mutable(GetArenaForAllocation());
}
inline std::string* GDBootPacket::release_ip() {
  // @@protoc_insertion_point(field_release:network.GDBootPacket.ip)
  return _impl_.ip_.Release();
}
inline void GDBootPacket::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  _impl_.ip_.SetAllocated(ip, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ip_.IsDefault()) {
    _impl_.ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GDBootPacket.ip)
}

// uint32 channel = 4;
inline void GDBootPacket::clear_channel() {
  _impl_.channel_ = 0u;
}
inline uint32_t GDBootPacket::_internal_channel() const {
  return _impl_.channel_;
}
inline uint32_t GDBootPacket::channel() const {
  // @@protoc_insertion_point(field_get:network.GDBootPacket.channel)
  return _internal_channel();
}
inline void GDBootPacket::_internal_set_channel(uint32_t value) {
  
  _impl_.channel_ = value;
}
inline void GDBootPacket::set_channel(uint32_t value) {
  _internal_set_channel(value);
  // @@protoc_insertion_point(field_set:network.GDBootPacket.channel)
}

// -------------------------------------------------------------------

// GDSetupPacket

// bytes public_ip = 1;
inline void GDSetupPacket::clear_public_ip() {
  _impl_.public_ip_.ClearToEmpty();
}
inline const std::string& GDSetupPacket::public_ip() const {
  // @@protoc_insertion_point(field_get:network.GDSetupPacket.public_ip)
  return _internal_public_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GDSetupPacket::set_public_ip(ArgT0&& arg0, ArgT... args) {
 
 _impl_.public_ip_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GDSetupPacket.public_ip)
}
inline std::string* GDSetupPacket::mutable_public_ip() {
  std::string* _s = _internal_mutable_public_ip();
  // @@protoc_insertion_point(field_mutable:network.GDSetupPacket.public_ip)
  return _s;
}
inline const std::string& GDSetupPacket::_internal_public_ip() const {
  return _impl_.public_ip_.Get();
}
inline void GDSetupPacket::_internal_set_public_ip(const std::string& value) {
  
  _impl_.public_ip_.Set(value, GetArenaForAllocation());
}
inline std::string* GDSetupPacket::_internal_mutable_public_ip() {
  
  return _impl_.public_ip_.Mutable(GetArenaForAllocation());
}
inline std::string* GDSetupPacket::release_public_ip() {
  // @@protoc_insertion_point(field_release:network.GDSetupPacket.public_ip)
  return _impl_.public_ip_.Release();
}
inline void GDSetupPacket::set_allocated_public_ip(std::string* public_ip) {
  if (public_ip != nullptr) {
    
  } else {
    
  }
  _impl_.public_ip_.SetAllocated(public_ip, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.public_ip_.IsDefault()) {
    _impl_.public_ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GDSetupPacket.public_ip)
}

// uint32 channel = 2;
inline void GDSetupPacket::clear_channel() {
  _impl_.channel_ = 0u;
}
inline uint32_t GDSetupPacket::_internal_channel() const {
  return _impl_.channel_;
}
inline uint32_t GDSetupPacket::channel() const {
  // @@protoc_insertion_point(field_get:network.GDSetupPacket.channel)
  return _internal_channel();
}
inline void GDSetupPacket::_internal_set_channel(uint32_t value) {
  
  _impl_.channel_ = value;
}
inline void GDSetupPacket::set_channel(uint32_t value) {
  _internal_set_channel(value);
  // @@protoc_insertion_point(field_set:network.GDSetupPacket.channel)
}

// uint32 listen_port = 3;
inline void GDSetupPacket::clear_listen_port() {
  _impl_.listen_port_ = 0u;
}
inline uint32_t GDSetupPacket::_internal_listen_port() const {
  return _impl_.listen_port_;
}
inline uint32_t GDSetupPacket::listen_port() const {
  // @@protoc_insertion_point(field_get:network.GDSetupPacket.listen_port)
  return _internal_listen_port();
}
inline void GDSetupPacket::_internal_set_listen_port(uint32_t value) {
  
  _impl_.listen_port_ = value;
}
inline void GDSetupPacket::set_listen_port(uint32_t value) {
  _internal_set_listen_port(value);
  // @@protoc_insertion_point(field_set:network.GDSetupPacket.listen_port)
}

// uint32 p2p_port = 4;
inline void GDSetupPacket::clear_p2p_port() {
  _impl_.p2p_port_ = 0u;
}
inline uint32_t GDSetupPacket::_internal_p2p_port() const {
  return _impl_.p2p_port_;
}
inline uint32_t GDSetupPacket::p2p_port() const {
  // @@protoc_insertion_point(field_get:network.GDSetupPacket.p2p_port)
  return _internal_p2p_port();
}
inline void GDSetupPacket::_internal_set_p2p_port(uint32_t value) {
  
  _impl_.p2p_port_ = value;
}
inline void GDSetupPacket::set_p2p_port(uint32_t value) {
  _internal_set_p2p_port(value);
  // @@protoc_insertion_point(field_set:network.GDSetupPacket.p2p_port)
}

// repeated uint32 maps = 5;
inline int GDSetupPacket::_internal_maps_size() const {
  return _impl_.maps_.size();
}
inline int GDSetupPacket::maps_size() const {
  return _internal_maps_size();
}
inline void GDSetupPacket::clear_maps() {
  _impl_.maps_.Clear();
}
inline uint32_t GDSetupPacket::_internal_maps(int index) const {
  return _impl_.maps_.Get(index);
}
inline uint32_t GDSetupPacket::maps(int index) const {
  // @@protoc_insertion_point(field_get:network.GDSetupPacket.maps)
  return _internal_maps(index);
}
inline void GDSetupPacket::set_maps(int index, uint32_t value) {
  _impl_.maps_.Set(index, value);
  // @@protoc_insertion_point(field_set:network.GDSetupPacket.maps)
}
inline void GDSetupPacket::_internal_add_maps(uint32_t value) {
  _impl_.maps_.Add(value);
}
inline void GDSetupPacket::add_maps(uint32_t value) {
  _internal_add_maps(value);
  // @@protoc_insertion_point(field_add:network.GDSetupPacket.maps)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
GDSetupPacket::_internal_maps() const {
  return _impl_.maps_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
GDSetupPacket::maps() const {
  // @@protoc_insertion_point(field_list:network.GDSetupPacket.maps)
  return _internal_maps();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
GDSetupPacket::_internal_mutable_maps() {
  return &_impl_.maps_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
GDSetupPacket::mutable_maps() {
  // @@protoc_insertion_point(field_mutable_list:network.GDSetupPacket.maps)
  return _internal_mutable_maps();
}

// repeated .network.TPacketLoginOnSetup logins = 6;
inline int GDSetupPacket::_internal_logins_size() const {
  return _impl_.logins_.size();
}
inline int GDSetupPacket::logins_size() const {
  return _internal_logins_size();
}
inline ::network::TPacketLoginOnSetup* GDSetupPacket::mutable_logins(int index) {
  // @@protoc_insertion_point(field_mutable:network.GDSetupPacket.logins)
  return _impl_.logins_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TPacketLoginOnSetup >*
GDSetupPacket::mutable_logins() {
  // @@protoc_insertion_point(field_mutable_list:network.GDSetupPacket.logins)
  return &_impl_.logins_;
}
inline const ::network::TPacketLoginOnSetup& GDSetupPacket::_internal_logins(int index) const {
  return _impl_.logins_.Get(index);
}
inline const ::network::TPacketLoginOnSetup& GDSetupPacket::logins(int index) const {
  // @@protoc_insertion_point(field_get:network.GDSetupPacket.logins)
  return _internal_logins(index);
}
inline ::network::TPacketLoginOnSetup* GDSetupPacket::_internal_add_logins() {
  return _impl_.logins_.Add();
}
inline ::network::TPacketLoginOnSetup* GDSetupPacket::add_logins() {
  ::network::TPacketLoginOnSetup* _add = _internal_add_logins();
  // @@protoc_insertion_point(field_add:network.GDSetupPacket.logins)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TPacketLoginOnSetup >&
GDSetupPacket::logins() const {
  // @@protoc_insertion_point(field_list:network.GDSetupPacket.logins)
  return _impl_.logins_;
}

// bool auth_server = 7;
inline void GDSetupPacket::clear_auth_server() {
  _impl_.auth_server_ = false;
}
inline bool GDSetupPacket::_internal_auth_server() const {
  return _impl_.auth_server_;
}
inline bool GDSetupPacket::auth_server() const {
  // @@protoc_insertion_point(field_get:network.GDSetupPacket.auth_server)
  return _internal_auth_server();
}
inline void GDSetupPacket::_internal_set_auth_server(bool value) {
  
  _impl_.auth_server_ = value;
}
inline void GDSetupPacket::set_auth_server(bool value) {
  _internal_set_auth_server(value);
  // @@protoc_insertion_point(field_set:network.GDSetupPacket.auth_server)
}

// bool processor_core = 8;
inline void GDSetupPacket::clear_processor_core() {
  _impl_.processor_core_ = false;
}
inline bool GDSetupPacket::_internal_processor_core() const {
  return _impl_.processor_core_;
}
inline bool GDSetupPacket::processor_core() const {
  // @@protoc_insertion_point(field_get:network.GDSetupPacket.processor_core)
  return _internal_processor_core();
}
inline void GDSetupPacket::_internal_set_processor_core(bool value) {
  
  _impl_.processor_core_ = value;
}
inline void GDSetupPacket::set_processor_core(bool value) {
  _internal_set_processor_core(value);
  // @@protoc_insertion_point(field_set:network.GDSetupPacket.processor_core)
}

// -------------------------------------------------------------------

// GDUpdateChannelStatusPacket

// uint32 port = 1;
inline void GDUpdateChannelStatusPacket::clear_port() {
  _impl_.port_ = 0u;
}
inline uint32_t GDUpdateChannelStatusPacket::_internal_port() const {
  return _impl_.port_;
}
inline uint32_t GDUpdateChannelStatusPacket::port() const {
  // @@protoc_insertion_point(field_get:network.GDUpdateChannelStatusPacket.port)
  return _internal_port();
}
inline void GDUpdateChannelStatusPacket::_internal_set_port(uint32_t value) {
  
  _impl_.port_ = value;
}
inline void GDUpdateChannelStatusPacket::set_port(uint32_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:network.GDUpdateChannelStatusPacket.port)
}

// uint32 status = 2;
inline void GDUpdateChannelStatusPacket::clear_status() {
  _impl_.status_ = 0u;
}
inline uint32_t GDUpdateChannelStatusPacket::_internal_status() const {
  return _impl_.status_;
}
inline uint32_t GDUpdateChannelStatusPacket::status() const {
  // @@protoc_insertion_point(field_get:network.GDUpdateChannelStatusPacket.status)
  return _internal_status();
}
inline void GDUpdateChannelStatusPacket::_internal_set_status(uint32_t value) {
  
  _impl_.status_ = value;
}
inline void GDUpdateChannelStatusPacket::set_status(uint32_t value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:network.GDUpdateChannelStatusPacket.status)
}

// -------------------------------------------------------------------

// GDBlockExceptionPacket

// uint32 cmd = 1;
inline void GDBlockExceptionPacket::clear_cmd() {
  _impl_.cmd_ = 0u;
}
inline uint32_t GDBlockExceptionPacket::_internal_cmd() const {
  return _impl_.cmd_;
}
inline uint32_t GDBlockExceptionPacket::cmd() const {
  // @@protoc_insertion_point(field_get:network.GDBlockExceptionPacket.cmd)
  return _internal_cmd();
}
inline void GDBlockExceptionPacket::_internal_set_cmd(uint32_t value) {
  
  _impl_.cmd_ = value;
}
inline void GDBlockExceptionPacket::set_cmd(uint32_t value) {
  _internal_set_cmd(value);
  // @@protoc_insertion_point(field_set:network.GDBlockExceptionPacket.cmd)
}

// bytes login = 2;
inline void GDBlockExceptionPacket::clear_login() {
  _impl_.login_.ClearToEmpty();
}
inline const std::string& GDBlockExceptionPacket::login() const {
  // @@protoc_insertion_point(field_get:network.GDBlockExceptionPacket.login)
  return _internal_login();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GDBlockExceptionPacket::set_login(ArgT0&& arg0, ArgT... args) {
 
 _impl_.login_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GDBlockExceptionPacket.login)
}
inline std::string* GDBlockExceptionPacket::mutable_login() {
  std::string* _s = _internal_mutable_login();
  // @@protoc_insertion_point(field_mutable:network.GDBlockExceptionPacket.login)
  return _s;
}
inline const std::string& GDBlockExceptionPacket::_internal_login() const {
  return _impl_.login_.Get();
}
inline void GDBlockExceptionPacket::_internal_set_login(const std::string& value) {
  
  _impl_.login_.Set(value, GetArenaForAllocation());
}
inline std::string* GDBlockExceptionPacket::_internal_mutable_login() {
  
  return _impl_.login_.Mutable(GetArenaForAllocation());
}
inline std::string* GDBlockExceptionPacket::release_login() {
  // @@protoc_insertion_point(field_release:network.GDBlockExceptionPacket.login)
  return _impl_.login_.Release();
}
inline void GDBlockExceptionPacket::set_allocated_login(std::string* login) {
  if (login != nullptr) {
    
  } else {
    
  }
  _impl_.login_.SetAllocated(login, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.login_.IsDefault()) {
    _impl_.login_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GDBlockExceptionPacket.login)
}

// -------------------------------------------------------------------

// GDPlayerCountPacket

// uint32 count = 1;
inline void GDPlayerCountPacket::clear_count() {
  _impl_.count_ = 0u;
}
inline uint32_t GDPlayerCountPacket::_internal_count() const {
  return _impl_.count_;
}
inline uint32_t GDPlayerCountPacket::count() const {
  // @@protoc_insertion_point(field_get:network.GDPlayerCountPacket.count)
  return _internal_count();
}
inline void GDPlayerCountPacket::_internal_set_count(uint32_t value) {
  
  _impl_.count_ = value;
}
inline void GDPlayerCountPacket::set_count(uint32_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:network.GDPlayerCountPacket.count)
}

// -------------------------------------------------------------------

// GDReloadAdminPacket

// bytes ip = 1;
inline void GDReloadAdminPacket::clear_ip() {
  _impl_.ip_.ClearToEmpty();
}
inline const std::string& GDReloadAdminPacket::ip() const {
  // @@protoc_insertion_point(field_get:network.GDReloadAdminPacket.ip)
  return _internal_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GDReloadAdminPacket::set_ip(ArgT0&& arg0, ArgT... args) {
 
 _impl_.ip_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GDReloadAdminPacket.ip)
}
inline std::string* GDReloadAdminPacket::mutable_ip() {
  std::string* _s = _internal_mutable_ip();
  // @@protoc_insertion_point(field_mutable:network.GDReloadAdminPacket.ip)
  return _s;
}
inline const std::string& GDReloadAdminPacket::_internal_ip() const {
  return _impl_.ip_.Get();
}
inline void GDReloadAdminPacket::_internal_set_ip(const std::string& value) {
  
  _impl_.ip_.Set(value, GetArenaForAllocation());
}
inline std::string* GDReloadAdminPacket::_internal_mutable_ip() {
  
  return _impl_.ip_.Mutable(GetArenaForAllocation());
}
inline std::string* GDReloadAdminPacket::release_ip() {
  // @@protoc_insertion_point(field_release:network.GDReloadAdminPacket.ip)
  return _impl_.ip_.Release();
}
inline void GDReloadAdminPacket::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  _impl_.ip_.SetAllocated(ip, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ip_.IsDefault()) {
    _impl_.ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GDReloadAdminPacket.ip)
}

// -------------------------------------------------------------------

// GDRecvShutdownPacket

// int32 start_sec = 1;
inline void GDRecvShutdownPacket::clear_start_sec() {
  _impl_.start_sec_ = 0;
}
inline int32_t GDRecvShutdownPacket::_internal_start_sec() const {
  return _impl_.start_sec_;
}
inline int32_t GDRecvShutdownPacket::start_sec() const {
  // @@protoc_insertion_point(field_get:network.GDRecvShutdownPacket.start_sec)
  return _internal_start_sec();
}
inline void GDRecvShutdownPacket::_internal_set_start_sec(int32_t value) {
  
  _impl_.start_sec_ = value;
}
inline void GDRecvShutdownPacket::set_start_sec(int32_t value) {
  _internal_set_start_sec(value);
  // @@protoc_insertion_point(field_set:network.GDRecvShutdownPacket.start_sec)
}

// bool maintenance = 2;
inline void GDRecvShutdownPacket::clear_maintenance() {
  _impl_.maintenance_ = false;
}
inline bool GDRecvShutdownPacket::_internal_maintenance() const {
  return _impl_.maintenance_;
}
inline bool GDRecvShutdownPacket::maintenance() const {
  // @@protoc_insertion_point(field_get:network.GDRecvShutdownPacket.maintenance)
  return _internal_maintenance();
}
inline void GDRecvShutdownPacket::_internal_set_maintenance(bool value) {
  
  _impl_.maintenance_ = value;
}
inline void GDRecvShutdownPacket::set_maintenance(bool value) {
  _internal_set_maintenance(value);
  // @@protoc_insertion_point(field_set:network.GDRecvShutdownPacket.maintenance)
}

// int32 maintenance_duration = 3;
inline void GDRecvShutdownPacket::clear_maintenance_duration() {
  _impl_.maintenance_duration_ = 0;
}
inline int32_t GDRecvShutdownPacket::_internal_maintenance_duration() const {
  return _impl_.maintenance_duration_;
}
inline int32_t GDRecvShutdownPacket::maintenance_duration() const {
  // @@protoc_insertion_point(field_get:network.GDRecvShutdownPacket.maintenance_duration)
  return _internal_maintenance_duration();
}
inline void GDRecvShutdownPacket::_internal_set_maintenance_duration(int32_t value) {
  
  _impl_.maintenance_duration_ = value;
}
inline void GDRecvShutdownPacket::set_maintenance_duration(int32_t value) {
  _internal_set_maintenance_duration(value);
  // @@protoc_insertion_point(field_set:network.GDRecvShutdownPacket.maintenance_duration)
}

// -------------------------------------------------------------------

// GDAuthLoginPacket

// uint32 account_id = 1;
inline void GDAuthLoginPacket::clear_account_id() {
  _impl_.account_id_ = 0u;
}
inline uint32_t GDAuthLoginPacket::_internal_account_id() const {
  return _impl_.account_id_;
}
inline uint32_t GDAuthLoginPacket::account_id() const {
  // @@protoc_insertion_point(field_get:network.GDAuthLoginPacket.account_id)
  return _internal_account_id();
}
inline void GDAuthLoginPacket::_internal_set_account_id(uint32_t value) {
  
  _impl_.account_id_ = value;
}
inline void GDAuthLoginPacket::set_account_id(uint32_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:network.GDAuthLoginPacket.account_id)
}

// uint32 login_key = 2;
inline void GDAuthLoginPacket::clear_login_key() {
  _impl_.login_key_ = 0u;
}
inline uint32_t GDAuthLoginPacket::_internal_login_key() const {
  return _impl_.login_key_;
}
inline uint32_t GDAuthLoginPacket::login_key() const {
  // @@protoc_insertion_point(field_get:network.GDAuthLoginPacket.login_key)
  return _internal_login_key();
}
inline void GDAuthLoginPacket::_internal_set_login_key(uint32_t value) {
  
  _impl_.login_key_ = value;
}
inline void GDAuthLoginPacket::set_login_key(uint32_t value) {
  _internal_set_login_key(value);
  // @@protoc_insertion_point(field_set:network.GDAuthLoginPacket.login_key)
}

// bytes login = 3;
inline void GDAuthLoginPacket::clear_login() {
  _impl_.login_.ClearToEmpty();
}
inline const std::string& GDAuthLoginPacket::login() const {
  // @@protoc_insertion_point(field_get:network.GDAuthLoginPacket.login)
  return _internal_login();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GDAuthLoginPacket::set_login(ArgT0&& arg0, ArgT... args) {
 
 _impl_.login_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GDAuthLoginPacket.login)
}
inline std::string* GDAuthLoginPacket::mutable_login() {
  std::string* _s = _internal_mutable_login();
  // @@protoc_insertion_point(field_mutable:network.GDAuthLoginPacket.login)
  return _s;
}
inline const std::string& GDAuthLoginPacket::_internal_login() const {
  return _impl_.login_.Get();
}
inline void GDAuthLoginPacket::_internal_set_login(const std::string& value) {
  
  _impl_.login_.Set(value, GetArenaForAllocation());
}
inline std::string* GDAuthLoginPacket::_internal_mutable_login() {
  
  return _impl_.login_.Mutable(GetArenaForAllocation());
}
inline std::string* GDAuthLoginPacket::release_login() {
  // @@protoc_insertion_point(field_release:network.GDAuthLoginPacket.login)
  return _impl_.login_.Release();
}
inline void GDAuthLoginPacket::set_allocated_login(std::string* login) {
  if (login != nullptr) {
    
  } else {
    
  }
  _impl_.login_.SetAllocated(login, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.login_.IsDefault()) {
    _impl_.login_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GDAuthLoginPacket.login)
}

// bytes hwid = 4;
inline void GDAuthLoginPacket::clear_hwid() {
  _impl_.hwid_.ClearToEmpty();
}
inline const std::string& GDAuthLoginPacket::hwid() const {
  // @@protoc_insertion_point(field_get:network.GDAuthLoginPacket.hwid)
  return _internal_hwid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GDAuthLoginPacket::set_hwid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.hwid_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GDAuthLoginPacket.hwid)
}
inline std::string* GDAuthLoginPacket::mutable_hwid() {
  std::string* _s = _internal_mutable_hwid();
  // @@protoc_insertion_point(field_mutable:network.GDAuthLoginPacket.hwid)
  return _s;
}
inline const std::string& GDAuthLoginPacket::_internal_hwid() const {
  return _impl_.hwid_.Get();
}
inline void GDAuthLoginPacket::_internal_set_hwid(const std::string& value) {
  
  _impl_.hwid_.Set(value, GetArenaForAllocation());
}
inline std::string* GDAuthLoginPacket::_internal_mutable_hwid() {
  
  return _impl_.hwid_.Mutable(GetArenaForAllocation());
}
inline std::string* GDAuthLoginPacket::release_hwid() {
  // @@protoc_insertion_point(field_release:network.GDAuthLoginPacket.hwid)
  return _impl_.hwid_.Release();
}
inline void GDAuthLoginPacket::set_allocated_hwid(std::string* hwid) {
  if (hwid != nullptr) {
    
  } else {
    
  }
  _impl_.hwid_.SetAllocated(hwid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.hwid_.IsDefault()) {
    _impl_.hwid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GDAuthLoginPacket.hwid)
}

// bytes social_id = 5;
inline void GDAuthLoginPacket::clear_social_id() {
  _impl_.social_id_.ClearToEmpty();
}
inline const std::string& GDAuthLoginPacket::social_id() const {
  // @@protoc_insertion_point(field_get:network.GDAuthLoginPacket.social_id)
  return _internal_social_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GDAuthLoginPacket::set_social_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.social_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GDAuthLoginPacket.social_id)
}
inline std::string* GDAuthLoginPacket::mutable_social_id() {
  std::string* _s = _internal_mutable_social_id();
  // @@protoc_insertion_point(field_mutable:network.GDAuthLoginPacket.social_id)
  return _s;
}
inline const std::string& GDAuthLoginPacket::_internal_social_id() const {
  return _impl_.social_id_.Get();
}
inline void GDAuthLoginPacket::_internal_set_social_id(const std::string& value) {
  
  _impl_.social_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GDAuthLoginPacket::_internal_mutable_social_id() {
  
  return _impl_.social_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GDAuthLoginPacket::release_social_id() {
  // @@protoc_insertion_point(field_release:network.GDAuthLoginPacket.social_id)
  return _impl_.social_id_.Release();
}
inline void GDAuthLoginPacket::set_allocated_social_id(std::string* social_id) {
  if (social_id != nullptr) {
    
  } else {
    
  }
  _impl_.social_id_.SetAllocated(social_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.social_id_.IsDefault()) {
    _impl_.social_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GDAuthLoginPacket.social_id)
}

// repeated uint32 client_keys = 6;
inline int GDAuthLoginPacket::_internal_client_keys_size() const {
  return _impl_.client_keys_.size();
}
inline int GDAuthLoginPacket::client_keys_size() const {
  return _internal_client_keys_size();
}
inline void GDAuthLoginPacket::clear_client_keys() {
  _impl_.client_keys_.Clear();
}
inline uint32_t GDAuthLoginPacket::_internal_client_keys(int index) const {
  return _impl_.client_keys_.Get(index);
}
inline uint32_t GDAuthLoginPacket::client_keys(int index) const {
  // @@protoc_insertion_point(field_get:network.GDAuthLoginPacket.client_keys)
  return _internal_client_keys(index);
}
inline void GDAuthLoginPacket::set_client_keys(int index, uint32_t value) {
  _impl_.client_keys_.Set(index, value);
  // @@protoc_insertion_point(field_set:network.GDAuthLoginPacket.client_keys)
}
inline void GDAuthLoginPacket::_internal_add_client_keys(uint32_t value) {
  _impl_.client_keys_.Add(value);
}
inline void GDAuthLoginPacket::add_client_keys(uint32_t value) {
  _internal_add_client_keys(value);
  // @@protoc_insertion_point(field_add:network.GDAuthLoginPacket.client_keys)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
GDAuthLoginPacket::_internal_client_keys() const {
  return _impl_.client_keys_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
GDAuthLoginPacket::client_keys() const {
  // @@protoc_insertion_point(field_list:network.GDAuthLoginPacket.client_keys)
  return _internal_client_keys();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
GDAuthLoginPacket::_internal_mutable_client_keys() {
  return &_impl_.client_keys_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
GDAuthLoginPacket::mutable_client_keys() {
  // @@protoc_insertion_point(field_mutable_list:network.GDAuthLoginPacket.client_keys)
  return _internal_mutable_client_keys();
}

// uint32 bill_type = 7;
inline void GDAuthLoginPacket::clear_bill_type() {
  _impl_.bill_type_ = 0u;
}
inline uint32_t GDAuthLoginPacket::_internal_bill_type() const {
  return _impl_.bill_type_;
}
inline uint32_t GDAuthLoginPacket::bill_type() const {
  // @@protoc_insertion_point(field_get:network.GDAuthLoginPacket.bill_type)
  return _internal_bill_type();
}
inline void GDAuthLoginPacket::_internal_set_bill_type(uint32_t value) {
  
  _impl_.bill_type_ = value;
}
inline void GDAuthLoginPacket::set_bill_type(uint32_t value) {
  _internal_set_bill_type(value);
  // @@protoc_insertion_point(field_set:network.GDAuthLoginPacket.bill_type)
}

// uint32 bill_id = 8;
inline void GDAuthLoginPacket::clear_bill_id() {
  _impl_.bill_id_ = 0u;
}
inline uint32_t GDAuthLoginPacket::_internal_bill_id() const {
  return _impl_.bill_id_;
}
inline uint32_t GDAuthLoginPacket::bill_id() const {
  // @@protoc_insertion_point(field_get:network.GDAuthLoginPacket.bill_id)
  return _internal_bill_id();
}
inline void GDAuthLoginPacket::_internal_set_bill_id(uint32_t value) {
  
  _impl_.bill_id_ = value;
}
inline void GDAuthLoginPacket::set_bill_id(uint32_t value) {
  _internal_set_bill_id(value);
  // @@protoc_insertion_point(field_set:network.GDAuthLoginPacket.bill_id)
}

// repeated int32 premium_times = 9;
inline int GDAuthLoginPacket::_internal_premium_times_size() const {
  return _impl_.premium_times_.size();
}
inline int GDAuthLoginPacket::premium_times_size() const {
  return _internal_premium_times_size();
}
inline void GDAuthLoginPacket::clear_premium_times() {
  _impl_.premium_times_.Clear();
}
inline int32_t GDAuthLoginPacket::_internal_premium_times(int index) const {
  return _impl_.premium_times_.Get(index);
}
inline int32_t GDAuthLoginPacket::premium_times(int index) const {
  // @@protoc_insertion_point(field_get:network.GDAuthLoginPacket.premium_times)
  return _internal_premium_times(index);
}
inline void GDAuthLoginPacket::set_premium_times(int index, int32_t value) {
  _impl_.premium_times_.Set(index, value);
  // @@protoc_insertion_point(field_set:network.GDAuthLoginPacket.premium_times)
}
inline void GDAuthLoginPacket::_internal_add_premium_times(int32_t value) {
  _impl_.premium_times_.Add(value);
}
inline void GDAuthLoginPacket::add_premium_times(int32_t value) {
  _internal_add_premium_times(value);
  // @@protoc_insertion_point(field_add:network.GDAuthLoginPacket.premium_times)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
GDAuthLoginPacket::_internal_premium_times() const {
  return _impl_.premium_times_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
GDAuthLoginPacket::premium_times() const {
  // @@protoc_insertion_point(field_list:network.GDAuthLoginPacket.premium_times)
  return _internal_premium_times();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
GDAuthLoginPacket::_internal_mutable_premium_times() {
  return &_impl_.premium_times_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
GDAuthLoginPacket::mutable_premium_times() {
  // @@protoc_insertion_point(field_mutable_list:network.GDAuthLoginPacket.premium_times)
  return _internal_mutable_premium_times();
}

// uint32 language = 10;
inline void GDAuthLoginPacket::clear_language() {
  _impl_.language_ = 0u;
}
inline uint32_t GDAuthLoginPacket::_internal_language() const {
  return _impl_.language_;
}
inline uint32_t GDAuthLoginPacket::language() const {
  // @@protoc_insertion_point(field_get:network.GDAuthLoginPacket.language)
  return _internal_language();
}
inline void GDAuthLoginPacket::_internal_set_language(uint32_t value) {
  
  _impl_.language_ = value;
}
inline void GDAuthLoginPacket::set_language(uint32_t value) {
  _internal_set_language(value);
  // @@protoc_insertion_point(field_set:network.GDAuthLoginPacket.language)
}

// uint32 tradeblock = 11;
inline void GDAuthLoginPacket::clear_tradeblock() {
  _impl_.tradeblock_ = 0u;
}
inline uint32_t GDAuthLoginPacket::_internal_tradeblock() const {
  return _impl_.tradeblock_;
}
inline uint32_t GDAuthLoginPacket::tradeblock() const {
  // @@protoc_insertion_point(field_get:network.GDAuthLoginPacket.tradeblock)
  return _internal_tradeblock();
}
inline void GDAuthLoginPacket::_internal_set_tradeblock(uint32_t value) {
  
  _impl_.tradeblock_ = value;
}
inline void GDAuthLoginPacket::set_tradeblock(uint32_t value) {
  _internal_set_tradeblock(value);
  // @@protoc_insertion_point(field_set:network.GDAuthLoginPacket.tradeblock)
}

// uint32 hwid2ban = 12;
inline void GDAuthLoginPacket::clear_hwid2ban() {
  _impl_.hwid2ban_ = 0u;
}
inline uint32_t GDAuthLoginPacket::_internal_hwid2ban() const {
  return _impl_.hwid2ban_;
}
inline uint32_t GDAuthLoginPacket::hwid2ban() const {
  // @@protoc_insertion_point(field_get:network.GDAuthLoginPacket.hwid2ban)
  return _internal_hwid2ban();
}
inline void GDAuthLoginPacket::_internal_set_hwid2ban(uint32_t value) {
  
  _impl_.hwid2ban_ = value;
}
inline void GDAuthLoginPacket::set_hwid2ban(uint32_t value) {
  _internal_set_hwid2ban(value);
  // @@protoc_insertion_point(field_set:network.GDAuthLoginPacket.hwid2ban)
}

// bytes hwid2 = 13;
inline void GDAuthLoginPacket::clear_hwid2() {
  _impl_.hwid2_.ClearToEmpty();
}
inline const std::string& GDAuthLoginPacket::hwid2() const {
  // @@protoc_insertion_point(field_get:network.GDAuthLoginPacket.hwid2)
  return _internal_hwid2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GDAuthLoginPacket::set_hwid2(ArgT0&& arg0, ArgT... args) {
 
 _impl_.hwid2_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GDAuthLoginPacket.hwid2)
}
inline std::string* GDAuthLoginPacket::mutable_hwid2() {
  std::string* _s = _internal_mutable_hwid2();
  // @@protoc_insertion_point(field_mutable:network.GDAuthLoginPacket.hwid2)
  return _s;
}
inline const std::string& GDAuthLoginPacket::_internal_hwid2() const {
  return _impl_.hwid2_.Get();
}
inline void GDAuthLoginPacket::_internal_set_hwid2(const std::string& value) {
  
  _impl_.hwid2_.Set(value, GetArenaForAllocation());
}
inline std::string* GDAuthLoginPacket::_internal_mutable_hwid2() {
  
  return _impl_.hwid2_.Mutable(GetArenaForAllocation());
}
inline std::string* GDAuthLoginPacket::release_hwid2() {
  // @@protoc_insertion_point(field_release:network.GDAuthLoginPacket.hwid2)
  return _impl_.hwid2_.Release();
}
inline void GDAuthLoginPacket::set_allocated_hwid2(std::string* hwid2) {
  if (hwid2 != nullptr) {
    
  } else {
    
  }
  _impl_.hwid2_.SetAllocated(hwid2, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.hwid2_.IsDefault()) {
    _impl_.hwid2_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GDAuthLoginPacket.hwid2)
}

// bool coins = 14;
inline void GDAuthLoginPacket::clear_coins() {
  _impl_.coins_ = false;
}
inline bool GDAuthLoginPacket::_internal_coins() const {
  return _impl_.coins_;
}
inline bool GDAuthLoginPacket::coins() const {
  // @@protoc_insertion_point(field_get:network.GDAuthLoginPacket.coins)
  return _internal_coins();
}
inline void GDAuthLoginPacket::_internal_set_coins(bool value) {
  
  _impl_.coins_ = value;
}
inline void GDAuthLoginPacket::set_coins(bool value) {
  _internal_set_coins(value);
  // @@protoc_insertion_point(field_set:network.GDAuthLoginPacket.coins)
}

// bool temp_login = 15;
inline void GDAuthLoginPacket::clear_temp_login() {
  _impl_.temp_login_ = false;
}
inline bool GDAuthLoginPacket::_internal_temp_login() const {
  return _impl_.temp_login_;
}
inline bool GDAuthLoginPacket::temp_login() const {
  // @@protoc_insertion_point(field_get:network.GDAuthLoginPacket.temp_login)
  return _internal_temp_login();
}
inline void GDAuthLoginPacket::_internal_set_temp_login(bool value) {
  
  _impl_.temp_login_ = value;
}
inline void GDAuthLoginPacket::set_temp_login(bool value) {
  _internal_set_temp_login(value);
  // @@protoc_insertion_point(field_set:network.GDAuthLoginPacket.temp_login)
}

// -------------------------------------------------------------------

// GDLoginByKeyPacket

// bytes login = 1;
inline void GDLoginByKeyPacket::clear_login() {
  _impl_.login_.ClearToEmpty();
}
inline const std::string& GDLoginByKeyPacket::login() const {
  // @@protoc_insertion_point(field_get:network.GDLoginByKeyPacket.login)
  return _internal_login();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GDLoginByKeyPacket::set_login(ArgT0&& arg0, ArgT... args) {
 
 _impl_.login_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GDLoginByKeyPacket.login)
}
inline std::string* GDLoginByKeyPacket::mutable_login() {
  std::string* _s = _internal_mutable_login();
  // @@protoc_insertion_point(field_mutable:network.GDLoginByKeyPacket.login)
  return _s;
}
inline const std::string& GDLoginByKeyPacket::_internal_login() const {
  return _impl_.login_.Get();
}
inline void GDLoginByKeyPacket::_internal_set_login(const std::string& value) {
  
  _impl_.login_.Set(value, GetArenaForAllocation());
}
inline std::string* GDLoginByKeyPacket::_internal_mutable_login() {
  
  return _impl_.login_.Mutable(GetArenaForAllocation());
}
inline std::string* GDLoginByKeyPacket::release_login() {
  // @@protoc_insertion_point(field_release:network.GDLoginByKeyPacket.login)
  return _impl_.login_.Release();
}
inline void GDLoginByKeyPacket::set_allocated_login(std::string* login) {
  if (login != nullptr) {
    
  } else {
    
  }
  _impl_.login_.SetAllocated(login, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.login_.IsDefault()) {
    _impl_.login_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GDLoginByKeyPacket.login)
}

// uint32 login_key = 2;
inline void GDLoginByKeyPacket::clear_login_key() {
  _impl_.login_key_ = 0u;
}
inline uint32_t GDLoginByKeyPacket::_internal_login_key() const {
  return _impl_.login_key_;
}
inline uint32_t GDLoginByKeyPacket::login_key() const {
  // @@protoc_insertion_point(field_get:network.GDLoginByKeyPacket.login_key)
  return _internal_login_key();
}
inline void GDLoginByKeyPacket::_internal_set_login_key(uint32_t value) {
  
  _impl_.login_key_ = value;
}
inline void GDLoginByKeyPacket::set_login_key(uint32_t value) {
  _internal_set_login_key(value);
  // @@protoc_insertion_point(field_set:network.GDLoginByKeyPacket.login_key)
}

// repeated uint32 client_key = 3;
inline int GDLoginByKeyPacket::_internal_client_key_size() const {
  return _impl_.client_key_.size();
}
inline int GDLoginByKeyPacket::client_key_size() const {
  return _internal_client_key_size();
}
inline void GDLoginByKeyPacket::clear_client_key() {
  _impl_.client_key_.Clear();
}
inline uint32_t GDLoginByKeyPacket::_internal_client_key(int index) const {
  return _impl_.client_key_.Get(index);
}
inline uint32_t GDLoginByKeyPacket::client_key(int index) const {
  // @@protoc_insertion_point(field_get:network.GDLoginByKeyPacket.client_key)
  return _internal_client_key(index);
}
inline void GDLoginByKeyPacket::set_client_key(int index, uint32_t value) {
  _impl_.client_key_.Set(index, value);
  // @@protoc_insertion_point(field_set:network.GDLoginByKeyPacket.client_key)
}
inline void GDLoginByKeyPacket::_internal_add_client_key(uint32_t value) {
  _impl_.client_key_.Add(value);
}
inline void GDLoginByKeyPacket::add_client_key(uint32_t value) {
  _internal_add_client_key(value);
  // @@protoc_insertion_point(field_add:network.GDLoginByKeyPacket.client_key)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
GDLoginByKeyPacket::_internal_client_key() const {
  return _impl_.client_key_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
GDLoginByKeyPacket::client_key() const {
  // @@protoc_insertion_point(field_list:network.GDLoginByKeyPacket.client_key)
  return _internal_client_key();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
GDLoginByKeyPacket::_internal_mutable_client_key() {
  return &_impl_.client_key_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
GDLoginByKeyPacket::mutable_client_key() {
  // @@protoc_insertion_point(field_mutable_list:network.GDLoginByKeyPacket.client_key)
  return _internal_mutable_client_key();
}

// bytes ip = 4;
inline void GDLoginByKeyPacket::clear_ip() {
  _impl_.ip_.ClearToEmpty();
}
inline const std::string& GDLoginByKeyPacket::ip() const {
  // @@protoc_insertion_point(field_get:network.GDLoginByKeyPacket.ip)
  return _internal_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GDLoginByKeyPacket::set_ip(ArgT0&& arg0, ArgT... args) {
 
 _impl_.ip_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GDLoginByKeyPacket.ip)
}
inline std::string* GDLoginByKeyPacket::mutable_ip() {
  std::string* _s = _internal_mutable_ip();
  // @@protoc_insertion_point(field_mutable:network.GDLoginByKeyPacket.ip)
  return _s;
}
inline const std::string& GDLoginByKeyPacket::_internal_ip() const {
  return _impl_.ip_.Get();
}
inline void GDLoginByKeyPacket::_internal_set_ip(const std::string& value) {
  
  _impl_.ip_.Set(value, GetArenaForAllocation());
}
inline std::string* GDLoginByKeyPacket::_internal_mutable_ip() {
  
  return _impl_.ip_.Mutable(GetArenaForAllocation());
}
inline std::string* GDLoginByKeyPacket::release_ip() {
  // @@protoc_insertion_point(field_release:network.GDLoginByKeyPacket.ip)
  return _impl_.ip_.Release();
}
inline void GDLoginByKeyPacket::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  _impl_.ip_.SetAllocated(ip, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ip_.IsDefault()) {
    _impl_.ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GDLoginByKeyPacket.ip)
}

// -------------------------------------------------------------------

// GDPlayerCreatePacket

// bytes login = 1;
inline void GDPlayerCreatePacket::clear_login() {
  _impl_.login_.ClearToEmpty();
}
inline const std::string& GDPlayerCreatePacket::login() const {
  // @@protoc_insertion_point(field_get:network.GDPlayerCreatePacket.login)
  return _internal_login();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GDPlayerCreatePacket::set_login(ArgT0&& arg0, ArgT... args) {
 
 _impl_.login_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GDPlayerCreatePacket.login)
}
inline std::string* GDPlayerCreatePacket::mutable_login() {
  std::string* _s = _internal_mutable_login();
  // @@protoc_insertion_point(field_mutable:network.GDPlayerCreatePacket.login)
  return _s;
}
inline const std::string& GDPlayerCreatePacket::_internal_login() const {
  return _impl_.login_.Get();
}
inline void GDPlayerCreatePacket::_internal_set_login(const std::string& value) {
  
  _impl_.login_.Set(value, GetArenaForAllocation());
}
inline std::string* GDPlayerCreatePacket::_internal_mutable_login() {
  
  return _impl_.login_.Mutable(GetArenaForAllocation());
}
inline std::string* GDPlayerCreatePacket::release_login() {
  // @@protoc_insertion_point(field_release:network.GDPlayerCreatePacket.login)
  return _impl_.login_.Release();
}
inline void GDPlayerCreatePacket::set_allocated_login(std::string* login) {
  if (login != nullptr) {
    
  } else {
    
  }
  _impl_.login_.SetAllocated(login, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.login_.IsDefault()) {
    _impl_.login_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GDPlayerCreatePacket.login)
}

// bytes passwd = 2;
inline void GDPlayerCreatePacket::clear_passwd() {
  _impl_.passwd_.ClearToEmpty();
}
inline const std::string& GDPlayerCreatePacket::passwd() const {
  // @@protoc_insertion_point(field_get:network.GDPlayerCreatePacket.passwd)
  return _internal_passwd();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GDPlayerCreatePacket::set_passwd(ArgT0&& arg0, ArgT... args) {
 
 _impl_.passwd_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GDPlayerCreatePacket.passwd)
}
inline std::string* GDPlayerCreatePacket::mutable_passwd() {
  std::string* _s = _internal_mutable_passwd();
  // @@protoc_insertion_point(field_mutable:network.GDPlayerCreatePacket.passwd)
  return _s;
}
inline const std::string& GDPlayerCreatePacket::_internal_passwd() const {
  return _impl_.passwd_.Get();
}
inline void GDPlayerCreatePacket::_internal_set_passwd(const std::string& value) {
  
  _impl_.passwd_.Set(value, GetArenaForAllocation());
}
inline std::string* GDPlayerCreatePacket::_internal_mutable_passwd() {
  
  return _impl_.passwd_.Mutable(GetArenaForAllocation());
}
inline std::string* GDPlayerCreatePacket::release_passwd() {
  // @@protoc_insertion_point(field_release:network.GDPlayerCreatePacket.passwd)
  return _impl_.passwd_.Release();
}
inline void GDPlayerCreatePacket::set_allocated_passwd(std::string* passwd) {
  if (passwd != nullptr) {
    
  } else {
    
  }
  _impl_.passwd_.SetAllocated(passwd, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.passwd_.IsDefault()) {
    _impl_.passwd_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GDPlayerCreatePacket.passwd)
}

// uint32 account_id = 3;
inline void GDPlayerCreatePacket::clear_account_id() {
  _impl_.account_id_ = 0u;
}
inline uint32_t GDPlayerCreatePacket::_internal_account_id() const {
  return _impl_.account_id_;
}
inline uint32_t GDPlayerCreatePacket::account_id() const {
  // @@protoc_insertion_point(field_get:network.GDPlayerCreatePacket.account_id)
  return _internal_account_id();
}
inline void GDPlayerCreatePacket::_internal_set_account_id(uint32_t value) {
  
  _impl_.account_id_ = value;
}
inline void GDPlayerCreatePacket::set_account_id(uint32_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:network.GDPlayerCreatePacket.account_id)
}

// uint32 account_index = 4;
inline void GDPlayerCreatePacket::clear_account_index() {
  _impl_.account_index_ = 0u;
}
inline uint32_t GDPlayerCreatePacket::_internal_account_index() const {
  return _impl_.account_index_;
}
inline uint32_t GDPlayerCreatePacket::account_index() const {
  // @@protoc_insertion_point(field_get:network.GDPlayerCreatePacket.account_index)
  return _internal_account_index();
}
inline void GDPlayerCreatePacket::_internal_set_account_index(uint32_t value) {
  
  _impl_.account_index_ = value;
}
inline void GDPlayerCreatePacket::set_account_index(uint32_t value) {
  _internal_set_account_index(value);
  // @@protoc_insertion_point(field_set:network.GDPlayerCreatePacket.account_index)
}

// .TPlayerTable player_table = 5;
inline bool GDPlayerCreatePacket::_internal_has_player_table() const {
  return this != internal_default_instance() && _impl_.player_table_ != nullptr;
}
inline bool GDPlayerCreatePacket::has_player_table() const {
  return _internal_has_player_table();
}
inline const ::TPlayerTable& GDPlayerCreatePacket::_internal_player_table() const {
  const ::TPlayerTable* p = _impl_.player_table_;
  return p != nullptr ? *p : reinterpret_cast<const ::TPlayerTable&>(
      ::_TPlayerTable_default_instance_);
}
inline const ::TPlayerTable& GDPlayerCreatePacket::player_table() const {
  // @@protoc_insertion_point(field_get:network.GDPlayerCreatePacket.player_table)
  return _internal_player_table();
}
inline void GDPlayerCreatePacket::unsafe_arena_set_allocated_player_table(
    ::TPlayerTable* player_table) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.player_table_);
  }
  _impl_.player_table_ = player_table;
  if (player_table) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:network.GDPlayerCreatePacket.player_table)
}
inline ::TPlayerTable* GDPlayerCreatePacket::release_player_table() {
  
  ::TPlayerTable* temp = _impl_.player_table_;
  _impl_.player_table_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TPlayerTable* GDPlayerCreatePacket::unsafe_arena_release_player_table() {
  // @@protoc_insertion_point(field_release:network.GDPlayerCreatePacket.player_table)
  
  ::TPlayerTable* temp = _impl_.player_table_;
  _impl_.player_table_ = nullptr;
  return temp;
}
inline ::TPlayerTable* GDPlayerCreatePacket::_internal_mutable_player_table() {
  
  if (_impl_.player_table_ == nullptr) {
    auto* p = CreateMaybeMessage<::TPlayerTable>(GetArenaForAllocation());
    _impl_.player_table_ = p;
  }
  return _impl_.player_table_;
}
inline ::TPlayerTable* GDPlayerCreatePacket::mutable_player_table() {
  ::TPlayerTable* _msg = _internal_mutable_player_table();
  // @@protoc_insertion_point(field_mutable:network.GDPlayerCreatePacket.player_table)
  return _msg;
}
inline void GDPlayerCreatePacket::set_allocated_player_table(::TPlayerTable* player_table) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.player_table_);
  }
  if (player_table) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_table));
    if (message_arena != submessage_arena) {
      player_table = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_table, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.player_table_ = player_table;
  // @@protoc_insertion_point(field_set_allocated:network.GDPlayerCreatePacket.player_table)
}

// -------------------------------------------------------------------

// GDPlayerDeletePacket

// bytes login = 1;
inline void GDPlayerDeletePacket::clear_login() {
  _impl_.login_.ClearToEmpty();
}
inline const std::string& GDPlayerDeletePacket::login() const {
  // @@protoc_insertion_point(field_get:network.GDPlayerDeletePacket.login)
  return _internal_login();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GDPlayerDeletePacket::set_login(ArgT0&& arg0, ArgT... args) {
 
 _impl_.login_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GDPlayerDeletePacket.login)
}
inline std::string* GDPlayerDeletePacket::mutable_login() {
  std::string* _s = _internal_mutable_login();
  // @@protoc_insertion_point(field_mutable:network.GDPlayerDeletePacket.login)
  return _s;
}
inline const std::string& GDPlayerDeletePacket::_internal_login() const {
  return _impl_.login_.Get();
}
inline void GDPlayerDeletePacket::_internal_set_login(const std::string& value) {
  
  _impl_.login_.Set(value, GetArenaForAllocation());
}
inline std::string* GDPlayerDeletePacket::_internal_mutable_login() {
  
  return _impl_.login_.Mutable(GetArenaForAllocation());
}
inline std::string* GDPlayerDeletePacket::release_login() {
  // @@protoc_insertion_point(field_release:network.GDPlayerDeletePacket.login)
  return _impl_.login_.Release();
}
inline void GDPlayerDeletePacket::set_allocated_login(std::string* login) {
  if (login != nullptr) {
    
  } else {
    
  }
  _impl_.login_.SetAllocated(login, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.login_.IsDefault()) {
    _impl_.login_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GDPlayerDeletePacket.login)
}

// uint32 player_id = 2;
inline void GDPlayerDeletePacket::clear_player_id() {
  _impl_.player_id_ = 0u;
}
inline uint32_t GDPlayerDeletePacket::_internal_player_id() const {
  return _impl_.player_id_;
}
inline uint32_t GDPlayerDeletePacket::player_id() const {
  // @@protoc_insertion_point(field_get:network.GDPlayerDeletePacket.player_id)
  return _internal_player_id();
}
inline void GDPlayerDeletePacket::_internal_set_player_id(uint32_t value) {
  
  _impl_.player_id_ = value;
}
inline void GDPlayerDeletePacket::set_player_id(uint32_t value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:network.GDPlayerDeletePacket.player_id)
}

// uint32 account_index = 3;
inline void GDPlayerDeletePacket::clear_account_index() {
  _impl_.account_index_ = 0u;
}
inline uint32_t GDPlayerDeletePacket::_internal_account_index() const {
  return _impl_.account_index_;
}
inline uint32_t GDPlayerDeletePacket::account_index() const {
  // @@protoc_insertion_point(field_get:network.GDPlayerDeletePacket.account_index)
  return _internal_account_index();
}
inline void GDPlayerDeletePacket::_internal_set_account_index(uint32_t value) {
  
  _impl_.account_index_ = value;
}
inline void GDPlayerDeletePacket::set_account_index(uint32_t value) {
  _internal_set_account_index(value);
  // @@protoc_insertion_point(field_set:network.GDPlayerDeletePacket.account_index)
}

// bytes private_code = 4;
inline void GDPlayerDeletePacket::clear_private_code() {
  _impl_.private_code_.ClearToEmpty();
}
inline const std::string& GDPlayerDeletePacket::private_code() const {
  // @@protoc_insertion_point(field_get:network.GDPlayerDeletePacket.private_code)
  return _internal_private_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GDPlayerDeletePacket::set_private_code(ArgT0&& arg0, ArgT... args) {
 
 _impl_.private_code_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GDPlayerDeletePacket.private_code)
}
inline std::string* GDPlayerDeletePacket::mutable_private_code() {
  std::string* _s = _internal_mutable_private_code();
  // @@protoc_insertion_point(field_mutable:network.GDPlayerDeletePacket.private_code)
  return _s;
}
inline const std::string& GDPlayerDeletePacket::_internal_private_code() const {
  return _impl_.private_code_.Get();
}
inline void GDPlayerDeletePacket::_internal_set_private_code(const std::string& value) {
  
  _impl_.private_code_.Set(value, GetArenaForAllocation());
}
inline std::string* GDPlayerDeletePacket::_internal_mutable_private_code() {
  
  return _impl_.private_code_.Mutable(GetArenaForAllocation());
}
inline std::string* GDPlayerDeletePacket::release_private_code() {
  // @@protoc_insertion_point(field_release:network.GDPlayerDeletePacket.private_code)
  return _impl_.private_code_.Release();
}
inline void GDPlayerDeletePacket::set_allocated_private_code(std::string* private_code) {
  if (private_code != nullptr) {
    
  } else {
    
  }
  _impl_.private_code_.SetAllocated(private_code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.private_code_.IsDefault()) {
    _impl_.private_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GDPlayerDeletePacket.private_code)
}

// -------------------------------------------------------------------

// GDChangeNamePacket

// uint32 pid = 1;
inline void GDChangeNamePacket::clear_pid() {
  _impl_.pid_ = 0u;
}
inline uint32_t GDChangeNamePacket::_internal_pid() const {
  return _impl_.pid_;
}
inline uint32_t GDChangeNamePacket::pid() const {
  // @@protoc_insertion_point(field_get:network.GDChangeNamePacket.pid)
  return _internal_pid();
}
inline void GDChangeNamePacket::_internal_set_pid(uint32_t value) {
  
  _impl_.pid_ = value;
}
inline void GDChangeNamePacket::set_pid(uint32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:network.GDChangeNamePacket.pid)
}

// bytes name = 2;
inline void GDChangeNamePacket::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GDChangeNamePacket::name() const {
  // @@protoc_insertion_point(field_get:network.GDChangeNamePacket.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GDChangeNamePacket::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GDChangeNamePacket.name)
}
inline std::string* GDChangeNamePacket::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:network.GDChangeNamePacket.name)
  return _s;
}
inline const std::string& GDChangeNamePacket::_internal_name() const {
  return _impl_.name_.Get();
}
inline void GDChangeNamePacket::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* GDChangeNamePacket::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* GDChangeNamePacket::release_name() {
  // @@protoc_insertion_point(field_release:network.GDChangeNamePacket.name)
  return _impl_.name_.Release();
}
inline void GDChangeNamePacket::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GDChangeNamePacket.name)
}

// -------------------------------------------------------------------

// GDEmpireSelectPacket

// uint32 account_id = 1;
inline void GDEmpireSelectPacket::clear_account_id() {
  _impl_.account_id_ = 0u;
}
inline uint32_t GDEmpireSelectPacket::_internal_account_id() const {
  return _impl_.account_id_;
}
inline uint32_t GDEmpireSelectPacket::account_id() const {
  // @@protoc_insertion_point(field_get:network.GDEmpireSelectPacket.account_id)
  return _internal_account_id();
}
inline void GDEmpireSelectPacket::_internal_set_account_id(uint32_t value) {
  
  _impl_.account_id_ = value;
}
inline void GDEmpireSelectPacket::set_account_id(uint32_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:network.GDEmpireSelectPacket.account_id)
}

// uint32 empire = 2;
inline void GDEmpireSelectPacket::clear_empire() {
  _impl_.empire_ = 0u;
}
inline uint32_t GDEmpireSelectPacket::_internal_empire() const {
  return _impl_.empire_;
}
inline uint32_t GDEmpireSelectPacket::empire() const {
  // @@protoc_insertion_point(field_get:network.GDEmpireSelectPacket.empire)
  return _internal_empire();
}
inline void GDEmpireSelectPacket::_internal_set_empire(uint32_t value) {
  
  _impl_.empire_ = value;
}
inline void GDEmpireSelectPacket::set_empire(uint32_t value) {
  _internal_set_empire(value);
  // @@protoc_insertion_point(field_set:network.GDEmpireSelectPacket.empire)
}

// -------------------------------------------------------------------

// GDSelectUpdateHairPacket

// uint32 pid = 1;
inline void GDSelectUpdateHairPacket::clear_pid() {
  _impl_.pid_ = 0u;
}
inline uint32_t GDSelectUpdateHairPacket::_internal_pid() const {
  return _impl_.pid_;
}
inline uint32_t GDSelectUpdateHairPacket::pid() const {
  // @@protoc_insertion_point(field_get:network.GDSelectUpdateHairPacket.pid)
  return _internal_pid();
}
inline void GDSelectUpdateHairPacket::_internal_set_pid(uint32_t value) {
  
  _impl_.pid_ = value;
}
inline void GDSelectUpdateHairPacket::set_pid(uint32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:network.GDSelectUpdateHairPacket.pid)
}

// uint32 hair_part = 2;
inline void GDSelectUpdateHairPacket::clear_hair_part() {
  _impl_.hair_part_ = 0u;
}
inline uint32_t GDSelectUpdateHairPacket::_internal_hair_part() const {
  return _impl_.hair_part_;
}
inline uint32_t GDSelectUpdateHairPacket::hair_part() const {
  // @@protoc_insertion_point(field_get:network.GDSelectUpdateHairPacket.hair_part)
  return _internal_hair_part();
}
inline void GDSelectUpdateHairPacket::_internal_set_hair_part(uint32_t value) {
  
  _impl_.hair_part_ = value;
}
inline void GDSelectUpdateHairPacket::set_hair_part(uint32_t value) {
  _internal_set_hair_part(value);
  // @@protoc_insertion_point(field_set:network.GDSelectUpdateHairPacket.hair_part)
}

// uint32 hair_base_part = 3;
inline void GDSelectUpdateHairPacket::clear_hair_base_part() {
  _impl_.hair_base_part_ = 0u;
}
inline uint32_t GDSelectUpdateHairPacket::_internal_hair_base_part() const {
  return _impl_.hair_base_part_;
}
inline uint32_t GDSelectUpdateHairPacket::hair_base_part() const {
  // @@protoc_insertion_point(field_get:network.GDSelectUpdateHairPacket.hair_base_part)
  return _internal_hair_base_part();
}
inline void GDSelectUpdateHairPacket::_internal_set_hair_base_part(uint32_t value) {
  
  _impl_.hair_base_part_ = value;
}
inline void GDSelectUpdateHairPacket::set_hair_base_part(uint32_t value) {
  _internal_set_hair_base_part(value);
  // @@protoc_insertion_point(field_set:network.GDSelectUpdateHairPacket.hair_base_part)
}

// -------------------------------------------------------------------

// GDBillingExpirePacket

// bytes login = 1;
inline void GDBillingExpirePacket::clear_login() {
  _impl_.login_.ClearToEmpty();
}
inline const std::string& GDBillingExpirePacket::login() const {
  // @@protoc_insertion_point(field_get:network.GDBillingExpirePacket.login)
  return _internal_login();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GDBillingExpirePacket::set_login(ArgT0&& arg0, ArgT... args) {
 
 _impl_.login_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GDBillingExpirePacket.login)
}
inline std::string* GDBillingExpirePacket::mutable_login() {
  std::string* _s = _internal_mutable_login();
  // @@protoc_insertion_point(field_mutable:network.GDBillingExpirePacket.login)
  return _s;
}
inline const std::string& GDBillingExpirePacket::_internal_login() const {
  return _impl_.login_.Get();
}
inline void GDBillingExpirePacket::_internal_set_login(const std::string& value) {
  
  _impl_.login_.Set(value, GetArenaForAllocation());
}
inline std::string* GDBillingExpirePacket::_internal_mutable_login() {
  
  return _impl_.login_.Mutable(GetArenaForAllocation());
}
inline std::string* GDBillingExpirePacket::release_login() {
  // @@protoc_insertion_point(field_release:network.GDBillingExpirePacket.login)
  return _impl_.login_.Release();
}
inline void GDBillingExpirePacket::set_allocated_login(std::string* login) {
  if (login != nullptr) {
    
  } else {
    
  }
  _impl_.login_.SetAllocated(login, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.login_.IsDefault()) {
    _impl_.login_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GDBillingExpirePacket.login)
}

// uint32 bill_type = 2;
inline void GDBillingExpirePacket::clear_bill_type() {
  _impl_.bill_type_ = 0u;
}
inline uint32_t GDBillingExpirePacket::_internal_bill_type() const {
  return _impl_.bill_type_;
}
inline uint32_t GDBillingExpirePacket::bill_type() const {
  // @@protoc_insertion_point(field_get:network.GDBillingExpirePacket.bill_type)
  return _internal_bill_type();
}
inline void GDBillingExpirePacket::_internal_set_bill_type(uint32_t value) {
  
  _impl_.bill_type_ = value;
}
inline void GDBillingExpirePacket::set_bill_type(uint32_t value) {
  _internal_set_bill_type(value);
  // @@protoc_insertion_point(field_set:network.GDBillingExpirePacket.bill_type)
}

// uint32 remain_seconds = 3;
inline void GDBillingExpirePacket::clear_remain_seconds() {
  _impl_.remain_seconds_ = 0u;
}
inline uint32_t GDBillingExpirePacket::_internal_remain_seconds() const {
  return _impl_.remain_seconds_;
}
inline uint32_t GDBillingExpirePacket::remain_seconds() const {
  // @@protoc_insertion_point(field_get:network.GDBillingExpirePacket.remain_seconds)
  return _internal_remain_seconds();
}
inline void GDBillingExpirePacket::_internal_set_remain_seconds(uint32_t value) {
  
  _impl_.remain_seconds_ = value;
}
inline void GDBillingExpirePacket::set_remain_seconds(uint32_t value) {
  _internal_set_remain_seconds(value);
  // @@protoc_insertion_point(field_set:network.GDBillingExpirePacket.remain_seconds)
}

// -------------------------------------------------------------------

// GDBillingCheckPacket

// repeated uint32 keys = 1;
inline int GDBillingCheckPacket::_internal_keys_size() const {
  return _impl_.keys_.size();
}
inline int GDBillingCheckPacket::keys_size() const {
  return _internal_keys_size();
}
inline void GDBillingCheckPacket::clear_keys() {
  _impl_.keys_.Clear();
}
inline uint32_t GDBillingCheckPacket::_internal_keys(int index) const {
  return _impl_.keys_.Get(index);
}
inline uint32_t GDBillingCheckPacket::keys(int index) const {
  // @@protoc_insertion_point(field_get:network.GDBillingCheckPacket.keys)
  return _internal_keys(index);
}
inline void GDBillingCheckPacket::set_keys(int index, uint32_t value) {
  _impl_.keys_.Set(index, value);
  // @@protoc_insertion_point(field_set:network.GDBillingCheckPacket.keys)
}
inline void GDBillingCheckPacket::_internal_add_keys(uint32_t value) {
  _impl_.keys_.Add(value);
}
inline void GDBillingCheckPacket::add_keys(uint32_t value) {
  _internal_add_keys(value);
  // @@protoc_insertion_point(field_add:network.GDBillingCheckPacket.keys)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
GDBillingCheckPacket::_internal_keys() const {
  return _impl_.keys_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
GDBillingCheckPacket::keys() const {
  // @@protoc_insertion_point(field_list:network.GDBillingCheckPacket.keys)
  return _internal_keys();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
GDBillingCheckPacket::_internal_mutable_keys() {
  return &_impl_.keys_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
GDBillingCheckPacket::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:network.GDBillingCheckPacket.keys)
  return _internal_mutable_keys();
}

// -------------------------------------------------------------------

// GDDisconnectPacket

// bytes login = 1;
inline void GDDisconnectPacket::clear_login() {
  _impl_.login_.ClearToEmpty();
}
inline const std::string& GDDisconnectPacket::login() const {
  // @@protoc_insertion_point(field_get:network.GDDisconnectPacket.login)
  return _internal_login();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GDDisconnectPacket::set_login(ArgT0&& arg0, ArgT... args) {
 
 _impl_.login_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GDDisconnectPacket.login)
}
inline std::string* GDDisconnectPacket::mutable_login() {
  std::string* _s = _internal_mutable_login();
  // @@protoc_insertion_point(field_mutable:network.GDDisconnectPacket.login)
  return _s;
}
inline const std::string& GDDisconnectPacket::_internal_login() const {
  return _impl_.login_.Get();
}
inline void GDDisconnectPacket::_internal_set_login(const std::string& value) {
  
  _impl_.login_.Set(value, GetArenaForAllocation());
}
inline std::string* GDDisconnectPacket::_internal_mutable_login() {
  
  return _impl_.login_.Mutable(GetArenaForAllocation());
}
inline std::string* GDDisconnectPacket::release_login() {
  // @@protoc_insertion_point(field_release:network.GDDisconnectPacket.login)
  return _impl_.login_.Release();
}
inline void GDDisconnectPacket::set_allocated_login(std::string* login) {
  if (login != nullptr) {
    
  } else {
    
  }
  _impl_.login_.SetAllocated(login, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.login_.IsDefault()) {
    _impl_.login_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GDDisconnectPacket.login)
}

// -------------------------------------------------------------------

// GDValidLogoutPacket

// uint32 account_id = 1;
inline void GDValidLogoutPacket::clear_account_id() {
  _impl_.account_id_ = 0u;
}
inline uint32_t GDValidLogoutPacket::_internal_account_id() const {
  return _impl_.account_id_;
}
inline uint32_t GDValidLogoutPacket::account_id() const {
  // @@protoc_insertion_point(field_get:network.GDValidLogoutPacket.account_id)
  return _internal_account_id();
}
inline void GDValidLogoutPacket::_internal_set_account_id(uint32_t value) {
  
  _impl_.account_id_ = value;
}
inline void GDValidLogoutPacket::set_account_id(uint32_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:network.GDValidLogoutPacket.account_id)
}

// -------------------------------------------------------------------

// GDPlayerLoadPacket

// uint32 account_id = 1;
inline void GDPlayerLoadPacket::clear_account_id() {
  _impl_.account_id_ = 0u;
}
inline uint32_t GDPlayerLoadPacket::_internal_account_id() const {
  return _impl_.account_id_;
}
inline uint32_t GDPlayerLoadPacket::account_id() const {
  // @@protoc_insertion_point(field_get:network.GDPlayerLoadPacket.account_id)
  return _internal_account_id();
}
inline void GDPlayerLoadPacket::_internal_set_account_id(uint32_t value) {
  
  _impl_.account_id_ = value;
}
inline void GDPlayerLoadPacket::set_account_id(uint32_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:network.GDPlayerLoadPacket.account_id)
}

// uint32 player_id = 2;
inline void GDPlayerLoadPacket::clear_player_id() {
  _impl_.player_id_ = 0u;
}
inline uint32_t GDPlayerLoadPacket::_internal_player_id() const {
  return _impl_.player_id_;
}
inline uint32_t GDPlayerLoadPacket::player_id() const {
  // @@protoc_insertion_point(field_get:network.GDPlayerLoadPacket.player_id)
  return _internal_player_id();
}
inline void GDPlayerLoadPacket::_internal_set_player_id(uint32_t value) {
  
  _impl_.player_id_ = value;
}
inline void GDPlayerLoadPacket::set_player_id(uint32_t value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:network.GDPlayerLoadPacket.player_id)
}

// uint32 account_index = 3;
inline void GDPlayerLoadPacket::clear_account_index() {
  _impl_.account_index_ = 0u;
}
inline uint32_t GDPlayerLoadPacket::_internal_account_index() const {
  return _impl_.account_index_;
}
inline uint32_t GDPlayerLoadPacket::account_index() const {
  // @@protoc_insertion_point(field_get:network.GDPlayerLoadPacket.account_index)
  return _internal_account_index();
}
inline void GDPlayerLoadPacket::_internal_set_account_index(uint32_t value) {
  
  _impl_.account_index_ = value;
}
inline void GDPlayerLoadPacket::set_account_index(uint32_t value) {
  _internal_set_account_index(value);
  // @@protoc_insertion_point(field_set:network.GDPlayerLoadPacket.account_index)
}

// -------------------------------------------------------------------

// GDSafeboxLoadPacket

// uint32 account_id = 1;
inline void GDSafeboxLoadPacket::clear_account_id() {
  _impl_.account_id_ = 0u;
}
inline uint32_t GDSafeboxLoadPacket::_internal_account_id() const {
  return _impl_.account_id_;
}
inline uint32_t GDSafeboxLoadPacket::account_id() const {
  // @@protoc_insertion_point(field_get:network.GDSafeboxLoadPacket.account_id)
  return _internal_account_id();
}
inline void GDSafeboxLoadPacket::_internal_set_account_id(uint32_t value) {
  
  _impl_.account_id_ = value;
}
inline void GDSafeboxLoadPacket::set_account_id(uint32_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:network.GDSafeboxLoadPacket.account_id)
}

// bytes login = 2;
inline void GDSafeboxLoadPacket::clear_login() {
  _impl_.login_.ClearToEmpty();
}
inline const std::string& GDSafeboxLoadPacket::login() const {
  // @@protoc_insertion_point(field_get:network.GDSafeboxLoadPacket.login)
  return _internal_login();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GDSafeboxLoadPacket::set_login(ArgT0&& arg0, ArgT... args) {
 
 _impl_.login_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GDSafeboxLoadPacket.login)
}
inline std::string* GDSafeboxLoadPacket::mutable_login() {
  std::string* _s = _internal_mutable_login();
  // @@protoc_insertion_point(field_mutable:network.GDSafeboxLoadPacket.login)
  return _s;
}
inline const std::string& GDSafeboxLoadPacket::_internal_login() const {
  return _impl_.login_.Get();
}
inline void GDSafeboxLoadPacket::_internal_set_login(const std::string& value) {
  
  _impl_.login_.Set(value, GetArenaForAllocation());
}
inline std::string* GDSafeboxLoadPacket::_internal_mutable_login() {
  
  return _impl_.login_.Mutable(GetArenaForAllocation());
}
inline std::string* GDSafeboxLoadPacket::release_login() {
  // @@protoc_insertion_point(field_release:network.GDSafeboxLoadPacket.login)
  return _impl_.login_.Release();
}
inline void GDSafeboxLoadPacket::set_allocated_login(std::string* login) {
  if (login != nullptr) {
    
  } else {
    
  }
  _impl_.login_.SetAllocated(login, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.login_.IsDefault()) {
    _impl_.login_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GDSafeboxLoadPacket.login)
}

// bytes password = 3;
inline void GDSafeboxLoadPacket::clear_password() {
  _impl_.password_.ClearToEmpty();
}
inline const std::string& GDSafeboxLoadPacket::password() const {
  // @@protoc_insertion_point(field_get:network.GDSafeboxLoadPacket.password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GDSafeboxLoadPacket::set_password(ArgT0&& arg0, ArgT... args) {
 
 _impl_.password_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GDSafeboxLoadPacket.password)
}
inline std::string* GDSafeboxLoadPacket::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:network.GDSafeboxLoadPacket.password)
  return _s;
}
inline const std::string& GDSafeboxLoadPacket::_internal_password() const {
  return _impl_.password_.Get();
}
inline void GDSafeboxLoadPacket::_internal_set_password(const std::string& value) {
  
  _impl_.password_.Set(value, GetArenaForAllocation());
}
inline std::string* GDSafeboxLoadPacket::_internal_mutable_password() {
  
  return _impl_.password_.Mutable(GetArenaForAllocation());
}
inline std::string* GDSafeboxLoadPacket::release_password() {
  // @@protoc_insertion_point(field_release:network.GDSafeboxLoadPacket.password)
  return _impl_.password_.Release();
}
inline void GDSafeboxLoadPacket::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  _impl_.password_.SetAllocated(password, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.password_.IsDefault()) {
    _impl_.password_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GDSafeboxLoadPacket.password)
}

// bool is_mall = 4;
inline void GDSafeboxLoadPacket::clear_is_mall() {
  _impl_.is_mall_ = false;
}
inline bool GDSafeboxLoadPacket::_internal_is_mall() const {
  return _impl_.is_mall_;
}
inline bool GDSafeboxLoadPacket::is_mall() const {
  // @@protoc_insertion_point(field_get:network.GDSafeboxLoadPacket.is_mall)
  return _internal_is_mall();
}
inline void GDSafeboxLoadPacket::_internal_set_is_mall(bool value) {
  
  _impl_.is_mall_ = value;
}
inline void GDSafeboxLoadPacket::set_is_mall(bool value) {
  _internal_set_is_mall(value);
  // @@protoc_insertion_point(field_set:network.GDSafeboxLoadPacket.is_mall)
}

// -------------------------------------------------------------------

// GDReqHorseNamePacket

// uint32 pid = 1;
inline void GDReqHorseNamePacket::clear_pid() {
  _impl_.pid_ = 0u;
}
inline uint32_t GDReqHorseNamePacket::_internal_pid() const {
  return _impl_.pid_;
}
inline uint32_t GDReqHorseNamePacket::pid() const {
  // @@protoc_insertion_point(field_get:network.GDReqHorseNamePacket.pid)
  return _internal_pid();
}
inline void GDReqHorseNamePacket::_internal_set_pid(uint32_t value) {
  
  _impl_.pid_ = value;
}
inline void GDReqHorseNamePacket::set_pid(uint32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:network.GDReqHorseNamePacket.pid)
}

// -------------------------------------------------------------------

// GDPlayerSavePacket

// .TPlayerTable data = 1;
inline bool GDPlayerSavePacket::_internal_has_data() const {
  return this != internal_default_instance() && _impl_.data_ != nullptr;
}
inline bool GDPlayerSavePacket::has_data() const {
  return _internal_has_data();
}
inline const ::TPlayerTable& GDPlayerSavePacket::_internal_data() const {
  const ::TPlayerTable* p = _impl_.data_;
  return p != nullptr ? *p : reinterpret_cast<const ::TPlayerTable&>(
      ::_TPlayerTable_default_instance_);
}
inline const ::TPlayerTable& GDPlayerSavePacket::data() const {
  // @@protoc_insertion_point(field_get:network.GDPlayerSavePacket.data)
  return _internal_data();
}
inline void GDPlayerSavePacket::unsafe_arena_set_allocated_data(
    ::TPlayerTable* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.data_);
  }
  _impl_.data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:network.GDPlayerSavePacket.data)
}
inline ::TPlayerTable* GDPlayerSavePacket::release_data() {
  
  ::TPlayerTable* temp = _impl_.data_;
  _impl_.data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TPlayerTable* GDPlayerSavePacket::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:network.GDPlayerSavePacket.data)
  
  ::TPlayerTable* temp = _impl_.data_;
  _impl_.data_ = nullptr;
  return temp;
}
inline ::TPlayerTable* GDPlayerSavePacket::_internal_mutable_data() {
  
  if (_impl_.data_ == nullptr) {
    auto* p = CreateMaybeMessage<::TPlayerTable>(GetArenaForAllocation());
    _impl_.data_ = p;
  }
  return _impl_.data_;
}
inline ::TPlayerTable* GDPlayerSavePacket::mutable_data() {
  ::TPlayerTable* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:network.GDPlayerSavePacket.data)
  return _msg;
}
inline void GDPlayerSavePacket::set_allocated_data(::TPlayerTable* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.data_);
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data));
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.data_ = data;
  // @@protoc_insertion_point(field_set_allocated:network.GDPlayerSavePacket.data)
}

// -------------------------------------------------------------------

// GDItemSavePacket

// .network.TItemData data = 1;
inline bool GDItemSavePacket::_internal_has_data() const {
  return this != internal_default_instance() && _impl_.data_ != nullptr;
}
inline bool GDItemSavePacket::has_data() const {
  return _internal_has_data();
}
inline const ::network::TItemData& GDItemSavePacket::_internal_data() const {
  const ::network::TItemData* p = _impl_.data_;
  return p != nullptr ? *p : reinterpret_cast<const ::network::TItemData&>(
      ::network::_TItemData_default_instance_);
}
inline const ::network::TItemData& GDItemSavePacket::data() const {
  // @@protoc_insertion_point(field_get:network.GDItemSavePacket.data)
  return _internal_data();
}
inline void GDItemSavePacket::unsafe_arena_set_allocated_data(
    ::network::TItemData* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.data_);
  }
  _impl_.data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:network.GDItemSavePacket.data)
}
inline ::network::TItemData* GDItemSavePacket::release_data() {
  
  ::network::TItemData* temp = _impl_.data_;
  _impl_.data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::network::TItemData* GDItemSavePacket::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:network.GDItemSavePacket.data)
  
  ::network::TItemData* temp = _impl_.data_;
  _impl_.data_ = nullptr;
  return temp;
}
inline ::network::TItemData* GDItemSavePacket::_internal_mutable_data() {
  
  if (_impl_.data_ == nullptr) {
    auto* p = CreateMaybeMessage<::network::TItemData>(GetArenaForAllocation());
    _impl_.data_ = p;
  }
  return _impl_.data_;
}
inline ::network::TItemData* GDItemSavePacket::mutable_data() {
  ::network::TItemData* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:network.GDItemSavePacket.data)
  return _msg;
}
inline void GDItemSavePacket::set_allocated_data(::network::TItemData* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.data_);
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data));
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.data_ = data;
  // @@protoc_insertion_point(field_set_allocated:network.GDItemSavePacket.data)
}

// -------------------------------------------------------------------

// GDQuestSavePacket

// repeated .TQuestTable datas = 1;
inline int GDQuestSavePacket::_internal_datas_size() const {
  return _impl_.datas_.size();
}
inline int GDQuestSavePacket::datas_size() const {
  return _internal_datas_size();
}
inline ::TQuestTable* GDQuestSavePacket::mutable_datas(int index) {
  // @@protoc_insertion_point(field_mutable:network.GDQuestSavePacket.datas)
  return _impl_.datas_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TQuestTable >*
GDQuestSavePacket::mutable_datas() {
  // @@protoc_insertion_point(field_mutable_list:network.GDQuestSavePacket.datas)
  return &_impl_.datas_;
}
inline const ::TQuestTable& GDQuestSavePacket::_internal_datas(int index) const {
  return _impl_.datas_.Get(index);
}
inline const ::TQuestTable& GDQuestSavePacket::datas(int index) const {
  // @@protoc_insertion_point(field_get:network.GDQuestSavePacket.datas)
  return _internal_datas(index);
}
inline ::TQuestTable* GDQuestSavePacket::_internal_add_datas() {
  return _impl_.datas_.Add();
}
inline ::TQuestTable* GDQuestSavePacket::add_datas() {
  ::TQuestTable* _add = _internal_add_datas();
  // @@protoc_insertion_point(field_add:network.GDQuestSavePacket.datas)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TQuestTable >&
GDQuestSavePacket::datas() const {
  // @@protoc_insertion_point(field_list:network.GDQuestSavePacket.datas)
  return _impl_.datas_;
}

// -------------------------------------------------------------------

// GDPetSavePacket

// .network.TPetAdvancedTable data = 1;
inline bool GDPetSavePacket::_internal_has_data() const {
  return this != internal_default_instance() && _impl_.data_ != nullptr;
}
inline bool GDPetSavePacket::has_data() const {
  return _internal_has_data();
}
inline const ::network::TPetAdvancedTable& GDPetSavePacket::_internal_data() const {
  const ::network::TPetAdvancedTable* p = _impl_.data_;
  return p != nullptr ? *p : reinterpret_cast<const ::network::TPetAdvancedTable&>(
      ::network::_TPetAdvancedTable_default_instance_);
}
inline const ::network::TPetAdvancedTable& GDPetSavePacket::data() const {
  // @@protoc_insertion_point(field_get:network.GDPetSavePacket.data)
  return _internal_data();
}
inline void GDPetSavePacket::unsafe_arena_set_allocated_data(
    ::network::TPetAdvancedTable* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.data_);
  }
  _impl_.data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:network.GDPetSavePacket.data)
}
inline ::network::TPetAdvancedTable* GDPetSavePacket::release_data() {
  
  ::network::TPetAdvancedTable* temp = _impl_.data_;
  _impl_.data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::network::TPetAdvancedTable* GDPetSavePacket::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:network.GDPetSavePacket.data)
  
  ::network::TPetAdvancedTable* temp = _impl_.data_;
  _impl_.data_ = nullptr;
  return temp;
}
inline ::network::TPetAdvancedTable* GDPetSavePacket::_internal_mutable_data() {
  
  if (_impl_.data_ == nullptr) {
    auto* p = CreateMaybeMessage<::network::TPetAdvancedTable>(GetArenaForAllocation());
    _impl_.data_ = p;
  }
  return _impl_.data_;
}
inline ::network::TPetAdvancedTable* GDPetSavePacket::mutable_data() {
  ::network::TPetAdvancedTable* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:network.GDPetSavePacket.data)
  return _msg;
}
inline void GDPetSavePacket::set_allocated_data(::network::TPetAdvancedTable* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.data_);
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data));
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.data_ = data;
  // @@protoc_insertion_point(field_set_allocated:network.GDPetSavePacket.data)
}

// -------------------------------------------------------------------

// GDSafeboxSavePacket

// uint32 account_id = 1;
inline void GDSafeboxSavePacket::clear_account_id() {
  _impl_.account_id_ = 0u;
}
inline uint32_t GDSafeboxSavePacket::_internal_account_id() const {
  return _impl_.account_id_;
}
inline uint32_t GDSafeboxSavePacket::account_id() const {
  // @@protoc_insertion_point(field_get:network.GDSafeboxSavePacket.account_id)
  return _internal_account_id();
}
inline void GDSafeboxSavePacket::_internal_set_account_id(uint32_t value) {
  
  _impl_.account_id_ = value;
}
inline void GDSafeboxSavePacket::set_account_id(uint32_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:network.GDSafeboxSavePacket.account_id)
}

// uint32 size = 2;
inline void GDSafeboxSavePacket::clear_size() {
  _impl_.size_ = 0u;
}
inline uint32_t GDSafeboxSavePacket::_internal_size() const {
  return _impl_.size_;
}
inline uint32_t GDSafeboxSavePacket::size() const {
  // @@protoc_insertion_point(field_get:network.GDSafeboxSavePacket.size)
  return _internal_size();
}
inline void GDSafeboxSavePacket::_internal_set_size(uint32_t value) {
  
  _impl_.size_ = value;
}
inline void GDSafeboxSavePacket::set_size(uint32_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:network.GDSafeboxSavePacket.size)
}

// int64 gold = 3;
inline void GDSafeboxSavePacket::clear_gold() {
  _impl_.gold_ = int64_t{0};
}
inline int64_t GDSafeboxSavePacket::_internal_gold() const {
  return _impl_.gold_;
}
inline int64_t GDSafeboxSavePacket::gold() const {
  // @@protoc_insertion_point(field_get:network.GDSafeboxSavePacket.gold)
  return _internal_gold();
}
inline void GDSafeboxSavePacket::_internal_set_gold(int64_t value) {
  
  _impl_.gold_ = value;
}
inline void GDSafeboxSavePacket::set_gold(int64_t value) {
  _internal_set_gold(value);
  // @@protoc_insertion_point(field_set:network.GDSafeboxSavePacket.gold)
}

// repeated .network.TItemData items = 4;
inline int GDSafeboxSavePacket::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int GDSafeboxSavePacket::items_size() const {
  return _internal_items_size();
}
inline ::network::TItemData* GDSafeboxSavePacket::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:network.GDSafeboxSavePacket.items)
  return _impl_.items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemData >*
GDSafeboxSavePacket::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:network.GDSafeboxSavePacket.items)
  return &_impl_.items_;
}
inline const ::network::TItemData& GDSafeboxSavePacket::_internal_items(int index) const {
  return _impl_.items_.Get(index);
}
inline const ::network::TItemData& GDSafeboxSavePacket::items(int index) const {
  // @@protoc_insertion_point(field_get:network.GDSafeboxSavePacket.items)
  return _internal_items(index);
}
inline ::network::TItemData* GDSafeboxSavePacket::_internal_add_items() {
  return _impl_.items_.Add();
}
inline ::network::TItemData* GDSafeboxSavePacket::add_items() {
  ::network::TItemData* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:network.GDSafeboxSavePacket.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemData >&
GDSafeboxSavePacket::items() const {
  // @@protoc_insertion_point(field_list:network.GDSafeboxSavePacket.items)
  return _impl_.items_;
}

// -------------------------------------------------------------------

// GDItemDestroyPacket

// uint32 item_id = 1;
inline void GDItemDestroyPacket::clear_item_id() {
  _impl_.item_id_ = 0u;
}
inline uint32_t GDItemDestroyPacket::_internal_item_id() const {
  return _impl_.item_id_;
}
inline uint32_t GDItemDestroyPacket::item_id() const {
  // @@protoc_insertion_point(field_get:network.GDItemDestroyPacket.item_id)
  return _internal_item_id();
}
inline void GDItemDestroyPacket::_internal_set_item_id(uint32_t value) {
  
  _impl_.item_id_ = value;
}
inline void GDItemDestroyPacket::set_item_id(uint32_t value) {
  _internal_set_item_id(value);
  // @@protoc_insertion_point(field_set:network.GDItemDestroyPacket.item_id)
}

// uint32 pid = 2;
inline void GDItemDestroyPacket::clear_pid() {
  _impl_.pid_ = 0u;
}
inline uint32_t GDItemDestroyPacket::_internal_pid() const {
  return _impl_.pid_;
}
inline uint32_t GDItemDestroyPacket::pid() const {
  // @@protoc_insertion_point(field_get:network.GDItemDestroyPacket.pid)
  return _internal_pid();
}
inline void GDItemDestroyPacket::_internal_set_pid(uint32_t value) {
  
  _impl_.pid_ = value;
}
inline void GDItemDestroyPacket::set_pid(uint32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:network.GDItemDestroyPacket.pid)
}

// -------------------------------------------------------------------

// GDSkillColorSavePacket

// uint32 player_id = 1;
inline void GDSkillColorSavePacket::clear_player_id() {
  _impl_.player_id_ = 0u;
}
inline uint32_t GDSkillColorSavePacket::_internal_player_id() const {
  return _impl_.player_id_;
}
inline uint32_t GDSkillColorSavePacket::player_id() const {
  // @@protoc_insertion_point(field_get:network.GDSkillColorSavePacket.player_id)
  return _internal_player_id();
}
inline void GDSkillColorSavePacket::_internal_set_player_id(uint32_t value) {
  
  _impl_.player_id_ = value;
}
inline void GDSkillColorSavePacket::set_player_id(uint32_t value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:network.GDSkillColorSavePacket.player_id)
}

// repeated uint32 skill_colors = 2;
inline int GDSkillColorSavePacket::_internal_skill_colors_size() const {
  return _impl_.skill_colors_.size();
}
inline int GDSkillColorSavePacket::skill_colors_size() const {
  return _internal_skill_colors_size();
}
inline void GDSkillColorSavePacket::clear_skill_colors() {
  _impl_.skill_colors_.Clear();
}
inline uint32_t GDSkillColorSavePacket::_internal_skill_colors(int index) const {
  return _impl_.skill_colors_.Get(index);
}
inline uint32_t GDSkillColorSavePacket::skill_colors(int index) const {
  // @@protoc_insertion_point(field_get:network.GDSkillColorSavePacket.skill_colors)
  return _internal_skill_colors(index);
}
inline void GDSkillColorSavePacket::set_skill_colors(int index, uint32_t value) {
  _impl_.skill_colors_.Set(index, value);
  // @@protoc_insertion_point(field_set:network.GDSkillColorSavePacket.skill_colors)
}
inline void GDSkillColorSavePacket::_internal_add_skill_colors(uint32_t value) {
  _impl_.skill_colors_.Add(value);
}
inline void GDSkillColorSavePacket::add_skill_colors(uint32_t value) {
  _internal_add_skill_colors(value);
  // @@protoc_insertion_point(field_add:network.GDSkillColorSavePacket.skill_colors)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
GDSkillColorSavePacket::_internal_skill_colors() const {
  return _impl_.skill_colors_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
GDSkillColorSavePacket::skill_colors() const {
  // @@protoc_insertion_point(field_list:network.GDSkillColorSavePacket.skill_colors)
  return _internal_skill_colors();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
GDSkillColorSavePacket::_internal_mutable_skill_colors() {
  return &_impl_.skill_colors_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
GDSkillColorSavePacket::mutable_skill_colors() {
  // @@protoc_insertion_point(field_mutable_list:network.GDSkillColorSavePacket.skill_colors)
  return _internal_mutable_skill_colors();
}

// -------------------------------------------------------------------

// GDPlayerRuneSavePacket

// uint32 player_id = 1;
inline void GDPlayerRuneSavePacket::clear_player_id() {
  _impl_.player_id_ = 0u;
}
inline uint32_t GDPlayerRuneSavePacket::_internal_player_id() const {
  return _impl_.player_id_;
}
inline uint32_t GDPlayerRuneSavePacket::player_id() const {
  // @@protoc_insertion_point(field_get:network.GDPlayerRuneSavePacket.player_id)
  return _internal_player_id();
}
inline void GDPlayerRuneSavePacket::_internal_set_player_id(uint32_t value) {
  
  _impl_.player_id_ = value;
}
inline void GDPlayerRuneSavePacket::set_player_id(uint32_t value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:network.GDPlayerRuneSavePacket.player_id)
}

// repeated uint32 runes = 2;
inline int GDPlayerRuneSavePacket::_internal_runes_size() const {
  return _impl_.runes_.size();
}
inline int GDPlayerRuneSavePacket::runes_size() const {
  return _internal_runes_size();
}
inline void GDPlayerRuneSavePacket::clear_runes() {
  _impl_.runes_.Clear();
}
inline uint32_t GDPlayerRuneSavePacket::_internal_runes(int index) const {
  return _impl_.runes_.Get(index);
}
inline uint32_t GDPlayerRuneSavePacket::runes(int index) const {
  // @@protoc_insertion_point(field_get:network.GDPlayerRuneSavePacket.runes)
  return _internal_runes(index);
}
inline void GDPlayerRuneSavePacket::set_runes(int index, uint32_t value) {
  _impl_.runes_.Set(index, value);
  // @@protoc_insertion_point(field_set:network.GDPlayerRuneSavePacket.runes)
}
inline void GDPlayerRuneSavePacket::_internal_add_runes(uint32_t value) {
  _impl_.runes_.Add(value);
}
inline void GDPlayerRuneSavePacket::add_runes(uint32_t value) {
  _internal_add_runes(value);
  // @@protoc_insertion_point(field_add:network.GDPlayerRuneSavePacket.runes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
GDPlayerRuneSavePacket::_internal_runes() const {
  return _impl_.runes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
GDPlayerRuneSavePacket::runes() const {
  // @@protoc_insertion_point(field_list:network.GDPlayerRuneSavePacket.runes)
  return _internal_runes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
GDPlayerRuneSavePacket::_internal_mutable_runes() {
  return &_impl_.runes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
GDPlayerRuneSavePacket::mutable_runes() {
  // @@protoc_insertion_point(field_mutable_list:network.GDPlayerRuneSavePacket.runes)
  return _internal_mutable_runes();
}

// -------------------------------------------------------------------

// GDEquipmentPageDeletePacket

// uint32 pid = 1;
inline void GDEquipmentPageDeletePacket::clear_pid() {
  _impl_.pid_ = 0u;
}
inline uint32_t GDEquipmentPageDeletePacket::_internal_pid() const {
  return _impl_.pid_;
}
inline uint32_t GDEquipmentPageDeletePacket::pid() const {
  // @@protoc_insertion_point(field_get:network.GDEquipmentPageDeletePacket.pid)
  return _internal_pid();
}
inline void GDEquipmentPageDeletePacket::_internal_set_pid(uint32_t value) {
  
  _impl_.pid_ = value;
}
inline void GDEquipmentPageDeletePacket::set_pid(uint32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:network.GDEquipmentPageDeletePacket.pid)
}

// -------------------------------------------------------------------

// GDEquipmentPageSavePacket

// repeated .network.TEquipmentChangerTable pages = 1;
inline int GDEquipmentPageSavePacket::_internal_pages_size() const {
  return _impl_.pages_.size();
}
inline int GDEquipmentPageSavePacket::pages_size() const {
  return _internal_pages_size();
}
inline ::network::TEquipmentChangerTable* GDEquipmentPageSavePacket::mutable_pages(int index) {
  // @@protoc_insertion_point(field_mutable:network.GDEquipmentPageSavePacket.pages)
  return _impl_.pages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TEquipmentChangerTable >*
GDEquipmentPageSavePacket::mutable_pages() {
  // @@protoc_insertion_point(field_mutable_list:network.GDEquipmentPageSavePacket.pages)
  return &_impl_.pages_;
}
inline const ::network::TEquipmentChangerTable& GDEquipmentPageSavePacket::_internal_pages(int index) const {
  return _impl_.pages_.Get(index);
}
inline const ::network::TEquipmentChangerTable& GDEquipmentPageSavePacket::pages(int index) const {
  // @@protoc_insertion_point(field_get:network.GDEquipmentPageSavePacket.pages)
  return _internal_pages(index);
}
inline ::network::TEquipmentChangerTable* GDEquipmentPageSavePacket::_internal_add_pages() {
  return _impl_.pages_.Add();
}
inline ::network::TEquipmentChangerTable* GDEquipmentPageSavePacket::add_pages() {
  ::network::TEquipmentChangerTable* _add = _internal_add_pages();
  // @@protoc_insertion_point(field_add:network.GDEquipmentPageSavePacket.pages)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TEquipmentChangerTable >&
GDEquipmentPageSavePacket::pages() const {
  // @@protoc_insertion_point(field_list:network.GDEquipmentPageSavePacket.pages)
  return _impl_.pages_;
}

// -------------------------------------------------------------------

// GDFlushCachePacket

// uint32 pid = 1;
inline void GDFlushCachePacket::clear_pid() {
  _impl_.pid_ = 0u;
}
inline uint32_t GDFlushCachePacket::_internal_pid() const {
  return _impl_.pid_;
}
inline uint32_t GDFlushCachePacket::pid() const {
  // @@protoc_insertion_point(field_get:network.GDFlushCachePacket.pid)
  return _internal_pid();
}
inline void GDFlushCachePacket::_internal_set_pid(uint32_t value) {
  
  _impl_.pid_ = value;
}
inline void GDFlushCachePacket::set_pid(uint32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:network.GDFlushCachePacket.pid)
}

// -------------------------------------------------------------------

// GDItemFlushPacket

// uint32 item_id = 1;
inline void GDItemFlushPacket::clear_item_id() {
  _impl_.item_id_ = 0u;
}
inline uint32_t GDItemFlushPacket::_internal_item_id() const {
  return _impl_.item_id_;
}
inline uint32_t GDItemFlushPacket::item_id() const {
  // @@protoc_insertion_point(field_get:network.GDItemFlushPacket.item_id)
  return _internal_item_id();
}
inline void GDItemFlushPacket::_internal_set_item_id(uint32_t value) {
  
  _impl_.item_id_ = value;
}
inline void GDItemFlushPacket::set_item_id(uint32_t value) {
  _internal_set_item_id(value);
  // @@protoc_insertion_point(field_set:network.GDItemFlushPacket.item_id)
}

// -------------------------------------------------------------------

// GDLogoutPacket

// bytes login = 1;
inline void GDLogoutPacket::clear_login() {
  _impl_.login_.ClearToEmpty();
}
inline const std::string& GDLogoutPacket::login() const {
  // @@protoc_insertion_point(field_get:network.GDLogoutPacket.login)
  return _internal_login();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GDLogoutPacket::set_login(ArgT0&& arg0, ArgT... args) {
 
 _impl_.login_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GDLogoutPacket.login)
}
inline std::string* GDLogoutPacket::mutable_login() {
  std::string* _s = _internal_mutable_login();
  // @@protoc_insertion_point(field_mutable:network.GDLogoutPacket.login)
  return _s;
}
inline const std::string& GDLogoutPacket::_internal_login() const {
  return _impl_.login_.Get();
}
inline void GDLogoutPacket::_internal_set_login(const std::string& value) {
  
  _impl_.login_.Set(value, GetArenaForAllocation());
}
inline std::string* GDLogoutPacket::_internal_mutable_login() {
  
  return _impl_.login_.Mutable(GetArenaForAllocation());
}
inline std::string* GDLogoutPacket::release_login() {
  // @@protoc_insertion_point(field_release:network.GDLogoutPacket.login)
  return _impl_.login_.Release();
}
inline void GDLogoutPacket::set_allocated_login(std::string* login) {
  if (login != nullptr) {
    
  } else {
    
  }
  _impl_.login_.SetAllocated(login, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.login_.IsDefault()) {
    _impl_.login_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GDLogoutPacket.login)
}

// bytes passwd = 2;
inline void GDLogoutPacket::clear_passwd() {
  _impl_.passwd_.ClearToEmpty();
}
inline const std::string& GDLogoutPacket::passwd() const {
  // @@protoc_insertion_point(field_get:network.GDLogoutPacket.passwd)
  return _internal_passwd();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GDLogoutPacket::set_passwd(ArgT0&& arg0, ArgT... args) {
 
 _impl_.passwd_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GDLogoutPacket.passwd)
}
inline std::string* GDLogoutPacket::mutable_passwd() {
  std::string* _s = _internal_mutable_passwd();
  // @@protoc_insertion_point(field_mutable:network.GDLogoutPacket.passwd)
  return _s;
}
inline const std::string& GDLogoutPacket::_internal_passwd() const {
  return _impl_.passwd_.Get();
}
inline void GDLogoutPacket::_internal_set_passwd(const std::string& value) {
  
  _impl_.passwd_.Set(value, GetArenaForAllocation());
}
inline std::string* GDLogoutPacket::_internal_mutable_passwd() {
  
  return _impl_.passwd_.Mutable(GetArenaForAllocation());
}
inline std::string* GDLogoutPacket::release_passwd() {
  // @@protoc_insertion_point(field_release:network.GDLogoutPacket.passwd)
  return _impl_.passwd_.Release();
}
inline void GDLogoutPacket::set_allocated_passwd(std::string* passwd) {
  if (passwd != nullptr) {
    
  } else {
    
  }
  _impl_.passwd_.SetAllocated(passwd, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.passwd_.IsDefault()) {
    _impl_.passwd_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GDLogoutPacket.passwd)
}

// -------------------------------------------------------------------

// GDSafeboxChangeSizePacket

// uint32 account_id = 1;
inline void GDSafeboxChangeSizePacket::clear_account_id() {
  _impl_.account_id_ = 0u;
}
inline uint32_t GDSafeboxChangeSizePacket::_internal_account_id() const {
  return _impl_.account_id_;
}
inline uint32_t GDSafeboxChangeSizePacket::account_id() const {
  // @@protoc_insertion_point(field_get:network.GDSafeboxChangeSizePacket.account_id)
  return _internal_account_id();
}
inline void GDSafeboxChangeSizePacket::_internal_set_account_id(uint32_t value) {
  
  _impl_.account_id_ = value;
}
inline void GDSafeboxChangeSizePacket::set_account_id(uint32_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:network.GDSafeboxChangeSizePacket.account_id)
}

// uint32 size = 2;
inline void GDSafeboxChangeSizePacket::clear_size() {
  _impl_.size_ = 0u;
}
inline uint32_t GDSafeboxChangeSizePacket::_internal_size() const {
  return _impl_.size_;
}
inline uint32_t GDSafeboxChangeSizePacket::size() const {
  // @@protoc_insertion_point(field_get:network.GDSafeboxChangeSizePacket.size)
  return _internal_size();
}
inline void GDSafeboxChangeSizePacket::_internal_set_size(uint32_t value) {
  
  _impl_.size_ = value;
}
inline void GDSafeboxChangeSizePacket::set_size(uint32_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:network.GDSafeboxChangeSizePacket.size)
}

// -------------------------------------------------------------------

// GDSafeboxChangePasswordPacket

// uint32 account_id = 1;
inline void GDSafeboxChangePasswordPacket::clear_account_id() {
  _impl_.account_id_ = 0u;
}
inline uint32_t GDSafeboxChangePasswordPacket::_internal_account_id() const {
  return _impl_.account_id_;
}
inline uint32_t GDSafeboxChangePasswordPacket::account_id() const {
  // @@protoc_insertion_point(field_get:network.GDSafeboxChangePasswordPacket.account_id)
  return _internal_account_id();
}
inline void GDSafeboxChangePasswordPacket::_internal_set_account_id(uint32_t value) {
  
  _impl_.account_id_ = value;
}
inline void GDSafeboxChangePasswordPacket::set_account_id(uint32_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:network.GDSafeboxChangePasswordPacket.account_id)
}

// bytes old_password = 2;
inline void GDSafeboxChangePasswordPacket::clear_old_password() {
  _impl_.old_password_.ClearToEmpty();
}
inline const std::string& GDSafeboxChangePasswordPacket::old_password() const {
  // @@protoc_insertion_point(field_get:network.GDSafeboxChangePasswordPacket.old_password)
  return _internal_old_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GDSafeboxChangePasswordPacket::set_old_password(ArgT0&& arg0, ArgT... args) {
 
 _impl_.old_password_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GDSafeboxChangePasswordPacket.old_password)
}
inline std::string* GDSafeboxChangePasswordPacket::mutable_old_password() {
  std::string* _s = _internal_mutable_old_password();
  // @@protoc_insertion_point(field_mutable:network.GDSafeboxChangePasswordPacket.old_password)
  return _s;
}
inline const std::string& GDSafeboxChangePasswordPacket::_internal_old_password() const {
  return _impl_.old_password_.Get();
}
inline void GDSafeboxChangePasswordPacket::_internal_set_old_password(const std::string& value) {
  
  _impl_.old_password_.Set(value, GetArenaForAllocation());
}
inline std::string* GDSafeboxChangePasswordPacket::_internal_mutable_old_password() {
  
  return _impl_.old_password_.Mutable(GetArenaForAllocation());
}
inline std::string* GDSafeboxChangePasswordPacket::release_old_password() {
  // @@protoc_insertion_point(field_release:network.GDSafeboxChangePasswordPacket.old_password)
  return _impl_.old_password_.Release();
}
inline void GDSafeboxChangePasswordPacket::set_allocated_old_password(std::string* old_password) {
  if (old_password != nullptr) {
    
  } else {
    
  }
  _impl_.old_password_.SetAllocated(old_password, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.old_password_.IsDefault()) {
    _impl_.old_password_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GDSafeboxChangePasswordPacket.old_password)
}

// bytes new_password = 3;
inline void GDSafeboxChangePasswordPacket::clear_new_password() {
  _impl_.new_password_.ClearToEmpty();
}
inline const std::string& GDSafeboxChangePasswordPacket::new_password() const {
  // @@protoc_insertion_point(field_get:network.GDSafeboxChangePasswordPacket.new_password)
  return _internal_new_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GDSafeboxChangePasswordPacket::set_new_password(ArgT0&& arg0, ArgT... args) {
 
 _impl_.new_password_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GDSafeboxChangePasswordPacket.new_password)
}
inline std::string* GDSafeboxChangePasswordPacket::mutable_new_password() {
  std::string* _s = _internal_mutable_new_password();
  // @@protoc_insertion_point(field_mutable:network.GDSafeboxChangePasswordPacket.new_password)
  return _s;
}
inline const std::string& GDSafeboxChangePasswordPacket::_internal_new_password() const {
  return _impl_.new_password_.Get();
}
inline void GDSafeboxChangePasswordPacket::_internal_set_new_password(const std::string& value) {
  
  _impl_.new_password_.Set(value, GetArenaForAllocation());
}
inline std::string* GDSafeboxChangePasswordPacket::_internal_mutable_new_password() {
  
  return _impl_.new_password_.Mutable(GetArenaForAllocation());
}
inline std::string* GDSafeboxChangePasswordPacket::release_new_password() {
  // @@protoc_insertion_point(field_release:network.GDSafeboxChangePasswordPacket.new_password)
  return _impl_.new_password_.Release();
}
inline void GDSafeboxChangePasswordPacket::set_allocated_new_password(std::string* new_password) {
  if (new_password != nullptr) {
    
  } else {
    
  }
  _impl_.new_password_.SetAllocated(new_password, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.new_password_.IsDefault()) {
    _impl_.new_password_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GDSafeboxChangePasswordPacket.new_password)
}

// -------------------------------------------------------------------

// GDAddAffectPacket

// uint32 pid = 1;
inline void GDAddAffectPacket::clear_pid() {
  _impl_.pid_ = 0u;
}
inline uint32_t GDAddAffectPacket::_internal_pid() const {
  return _impl_.pid_;
}
inline uint32_t GDAddAffectPacket::pid() const {
  // @@protoc_insertion_point(field_get:network.GDAddAffectPacket.pid)
  return _internal_pid();
}
inline void GDAddAffectPacket::_internal_set_pid(uint32_t value) {
  
  _impl_.pid_ = value;
}
inline void GDAddAffectPacket::set_pid(uint32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:network.GDAddAffectPacket.pid)
}

// .TPacketAffectElement elem = 2;
inline bool GDAddAffectPacket::_internal_has_elem() const {
  return this != internal_default_instance() && _impl_.elem_ != nullptr;
}
inline bool GDAddAffectPacket::has_elem() const {
  return _internal_has_elem();
}
inline const ::TPacketAffectElement& GDAddAffectPacket::_internal_elem() const {
  const ::TPacketAffectElement* p = _impl_.elem_;
  return p != nullptr ? *p : reinterpret_cast<const ::TPacketAffectElement&>(
      ::_TPacketAffectElement_default_instance_);
}
inline const ::TPacketAffectElement& GDAddAffectPacket::elem() const {
  // @@protoc_insertion_point(field_get:network.GDAddAffectPacket.elem)
  return _internal_elem();
}
inline void GDAddAffectPacket::unsafe_arena_set_allocated_elem(
    ::TPacketAffectElement* elem) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.elem_);
  }
  _impl_.elem_ = elem;
  if (elem) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:network.GDAddAffectPacket.elem)
}
inline ::TPacketAffectElement* GDAddAffectPacket::release_elem() {
  
  ::TPacketAffectElement* temp = _impl_.elem_;
  _impl_.elem_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TPacketAffectElement* GDAddAffectPacket::unsafe_arena_release_elem() {
  // @@protoc_insertion_point(field_release:network.GDAddAffectPacket.elem)
  
  ::TPacketAffectElement* temp = _impl_.elem_;
  _impl_.elem_ = nullptr;
  return temp;
}
inline ::TPacketAffectElement* GDAddAffectPacket::_internal_mutable_elem() {
  
  if (_impl_.elem_ == nullptr) {
    auto* p = CreateMaybeMessage<::TPacketAffectElement>(GetArenaForAllocation());
    _impl_.elem_ = p;
  }
  return _impl_.elem_;
}
inline ::TPacketAffectElement* GDAddAffectPacket::mutable_elem() {
  ::TPacketAffectElement* _msg = _internal_mutable_elem();
  // @@protoc_insertion_point(field_mutable:network.GDAddAffectPacket.elem)
  return _msg;
}
inline void GDAddAffectPacket::set_allocated_elem(::TPacketAffectElement* elem) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.elem_);
  }
  if (elem) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(elem));
    if (message_arena != submessage_arena) {
      elem = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, elem, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.elem_ = elem;
  // @@protoc_insertion_point(field_set_allocated:network.GDAddAffectPacket.elem)
}

// -------------------------------------------------------------------

// GDRemoveAffectPacket

// uint32 pid = 1;
inline void GDRemoveAffectPacket::clear_pid() {
  _impl_.pid_ = 0u;
}
inline uint32_t GDRemoveAffectPacket::_internal_pid() const {
  return _impl_.pid_;
}
inline uint32_t GDRemoveAffectPacket::pid() const {
  // @@protoc_insertion_point(field_get:network.GDRemoveAffectPacket.pid)
  return _internal_pid();
}
inline void GDRemoveAffectPacket::_internal_set_pid(uint32_t value) {
  
  _impl_.pid_ = value;
}
inline void GDRemoveAffectPacket::set_pid(uint32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:network.GDRemoveAffectPacket.pid)
}

// uint32 type = 2;
inline void GDRemoveAffectPacket::clear_type() {
  _impl_.type_ = 0u;
}
inline uint32_t GDRemoveAffectPacket::_internal_type() const {
  return _impl_.type_;
}
inline uint32_t GDRemoveAffectPacket::type() const {
  // @@protoc_insertion_point(field_get:network.GDRemoveAffectPacket.type)
  return _internal_type();
}
inline void GDRemoveAffectPacket::_internal_set_type(uint32_t value) {
  
  _impl_.type_ = value;
}
inline void GDRemoveAffectPacket::set_type(uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:network.GDRemoveAffectPacket.type)
}

// uint32 apply_on = 3;
inline void GDRemoveAffectPacket::clear_apply_on() {
  _impl_.apply_on_ = 0u;
}
inline uint32_t GDRemoveAffectPacket::_internal_apply_on() const {
  return _impl_.apply_on_;
}
inline uint32_t GDRemoveAffectPacket::apply_on() const {
  // @@protoc_insertion_point(field_get:network.GDRemoveAffectPacket.apply_on)
  return _internal_apply_on();
}
inline void GDRemoveAffectPacket::_internal_set_apply_on(uint32_t value) {
  
  _impl_.apply_on_ = value;
}
inline void GDRemoveAffectPacket::set_apply_on(uint32_t value) {
  _internal_set_apply_on(value);
  // @@protoc_insertion_point(field_set:network.GDRemoveAffectPacket.apply_on)
}

// int32 apply_value = 4;
inline void GDRemoveAffectPacket::clear_apply_value() {
  _impl_.apply_value_ = 0;
}
inline int32_t GDRemoveAffectPacket::_internal_apply_value() const {
  return _impl_.apply_value_;
}
inline int32_t GDRemoveAffectPacket::apply_value() const {
  // @@protoc_insertion_point(field_get:network.GDRemoveAffectPacket.apply_value)
  return _internal_apply_value();
}
inline void GDRemoveAffectPacket::_internal_set_apply_value(int32_t value) {
  
  _impl_.apply_value_ = value;
}
inline void GDRemoveAffectPacket::set_apply_value(int32_t value) {
  _internal_set_apply_value(value);
  // @@protoc_insertion_point(field_set:network.GDRemoveAffectPacket.apply_value)
}

// -------------------------------------------------------------------

// GDHighscoreRegisterPacket

// uint32 pid = 1;
inline void GDHighscoreRegisterPacket::clear_pid() {
  _impl_.pid_ = 0u;
}
inline uint32_t GDHighscoreRegisterPacket::_internal_pid() const {
  return _impl_.pid_;
}
inline uint32_t GDHighscoreRegisterPacket::pid() const {
  // @@protoc_insertion_point(field_get:network.GDHighscoreRegisterPacket.pid)
  return _internal_pid();
}
inline void GDHighscoreRegisterPacket::_internal_set_pid(uint32_t value) {
  
  _impl_.pid_ = value;
}
inline void GDHighscoreRegisterPacket::set_pid(uint32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:network.GDHighscoreRegisterPacket.pid)
}

// int32 value = 2;
inline void GDHighscoreRegisterPacket::clear_value() {
  _impl_.value_ = 0;
}
inline int32_t GDHighscoreRegisterPacket::_internal_value() const {
  return _impl_.value_;
}
inline int32_t GDHighscoreRegisterPacket::value() const {
  // @@protoc_insertion_point(field_get:network.GDHighscoreRegisterPacket.value)
  return _internal_value();
}
inline void GDHighscoreRegisterPacket::_internal_set_value(int32_t value) {
  
  _impl_.value_ = value;
}
inline void GDHighscoreRegisterPacket::set_value(int32_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:network.GDHighscoreRegisterPacket.value)
}

// int32 dir = 3;
inline void GDHighscoreRegisterPacket::clear_dir() {
  _impl_.dir_ = 0;
}
inline int32_t GDHighscoreRegisterPacket::_internal_dir() const {
  return _impl_.dir_;
}
inline int32_t GDHighscoreRegisterPacket::dir() const {
  // @@protoc_insertion_point(field_get:network.GDHighscoreRegisterPacket.dir)
  return _internal_dir();
}
inline void GDHighscoreRegisterPacket::_internal_set_dir(int32_t value) {
  
  _impl_.dir_ = value;
}
inline void GDHighscoreRegisterPacket::set_dir(int32_t value) {
  _internal_set_dir(value);
  // @@protoc_insertion_point(field_set:network.GDHighscoreRegisterPacket.dir)
}

// bytes board = 4;
inline void GDHighscoreRegisterPacket::clear_board() {
  _impl_.board_.ClearToEmpty();
}
inline const std::string& GDHighscoreRegisterPacket::board() const {
  // @@protoc_insertion_point(field_get:network.GDHighscoreRegisterPacket.board)
  return _internal_board();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GDHighscoreRegisterPacket::set_board(ArgT0&& arg0, ArgT... args) {
 
 _impl_.board_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GDHighscoreRegisterPacket.board)
}
inline std::string* GDHighscoreRegisterPacket::mutable_board() {
  std::string* _s = _internal_mutable_board();
  // @@protoc_insertion_point(field_mutable:network.GDHighscoreRegisterPacket.board)
  return _s;
}
inline const std::string& GDHighscoreRegisterPacket::_internal_board() const {
  return _impl_.board_.Get();
}
inline void GDHighscoreRegisterPacket::_internal_set_board(const std::string& value) {
  
  _impl_.board_.Set(value, GetArenaForAllocation());
}
inline std::string* GDHighscoreRegisterPacket::_internal_mutable_board() {
  
  return _impl_.board_.Mutable(GetArenaForAllocation());
}
inline std::string* GDHighscoreRegisterPacket::release_board() {
  // @@protoc_insertion_point(field_release:network.GDHighscoreRegisterPacket.board)
  return _impl_.board_.Release();
}
inline void GDHighscoreRegisterPacket::set_allocated_board(std::string* board) {
  if (board != nullptr) {
    
  } else {
    
  }
  _impl_.board_.SetAllocated(board, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.board_.IsDefault()) {
    _impl_.board_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GDHighscoreRegisterPacket.board)
}

// -------------------------------------------------------------------

// GDSMSPacket

// bytes from = 1;
inline void GDSMSPacket::clear_from() {
  _impl_.from_.ClearToEmpty();
}
inline const std::string& GDSMSPacket::from() const {
  // @@protoc_insertion_point(field_get:network.GDSMSPacket.from)
  return _internal_from();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GDSMSPacket::set_from(ArgT0&& arg0, ArgT... args) {
 
 _impl_.from_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GDSMSPacket.from)
}
inline std::string* GDSMSPacket::mutable_from() {
  std::string* _s = _internal_mutable_from();
  // @@protoc_insertion_point(field_mutable:network.GDSMSPacket.from)
  return _s;
}
inline const std::string& GDSMSPacket::_internal_from() const {
  return _impl_.from_.Get();
}
inline void GDSMSPacket::_internal_set_from(const std::string& value) {
  
  _impl_.from_.Set(value, GetArenaForAllocation());
}
inline std::string* GDSMSPacket::_internal_mutable_from() {
  
  return _impl_.from_.Mutable(GetArenaForAllocation());
}
inline std::string* GDSMSPacket::release_from() {
  // @@protoc_insertion_point(field_release:network.GDSMSPacket.from)
  return _impl_.from_.Release();
}
inline void GDSMSPacket::set_allocated_from(std::string* from) {
  if (from != nullptr) {
    
  } else {
    
  }
  _impl_.from_.SetAllocated(from, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.from_.IsDefault()) {
    _impl_.from_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GDSMSPacket.from)
}

// bytes to = 2;
inline void GDSMSPacket::clear_to() {
  _impl_.to_.ClearToEmpty();
}
inline const std::string& GDSMSPacket::to() const {
  // @@protoc_insertion_point(field_get:network.GDSMSPacket.to)
  return _internal_to();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GDSMSPacket::set_to(ArgT0&& arg0, ArgT... args) {
 
 _impl_.to_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GDSMSPacket.to)
}
inline std::string* GDSMSPacket::mutable_to() {
  std::string* _s = _internal_mutable_to();
  // @@protoc_insertion_point(field_mutable:network.GDSMSPacket.to)
  return _s;
}
inline const std::string& GDSMSPacket::_internal_to() const {
  return _impl_.to_.Get();
}
inline void GDSMSPacket::_internal_set_to(const std::string& value) {
  
  _impl_.to_.Set(value, GetArenaForAllocation());
}
inline std::string* GDSMSPacket::_internal_mutable_to() {
  
  return _impl_.to_.Mutable(GetArenaForAllocation());
}
inline std::string* GDSMSPacket::release_to() {
  // @@protoc_insertion_point(field_release:network.GDSMSPacket.to)
  return _impl_.to_.Release();
}
inline void GDSMSPacket::set_allocated_to(std::string* to) {
  if (to != nullptr) {
    
  } else {
    
  }
  _impl_.to_.SetAllocated(to, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.to_.IsDefault()) {
    _impl_.to_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GDSMSPacket.to)
}

// bytes mobile = 3;
inline void GDSMSPacket::clear_mobile() {
  _impl_.mobile_.ClearToEmpty();
}
inline const std::string& GDSMSPacket::mobile() const {
  // @@protoc_insertion_point(field_get:network.GDSMSPacket.mobile)
  return _internal_mobile();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GDSMSPacket::set_mobile(ArgT0&& arg0, ArgT... args) {
 
 _impl_.mobile_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GDSMSPacket.mobile)
}
inline std::string* GDSMSPacket::mutable_mobile() {
  std::string* _s = _internal_mutable_mobile();
  // @@protoc_insertion_point(field_mutable:network.GDSMSPacket.mobile)
  return _s;
}
inline const std::string& GDSMSPacket::_internal_mobile() const {
  return _impl_.mobile_.Get();
}
inline void GDSMSPacket::_internal_set_mobile(const std::string& value) {
  
  _impl_.mobile_.Set(value, GetArenaForAllocation());
}
inline std::string* GDSMSPacket::_internal_mutable_mobile() {
  
  return _impl_.mobile_.Mutable(GetArenaForAllocation());
}
inline std::string* GDSMSPacket::release_mobile() {
  // @@protoc_insertion_point(field_release:network.GDSMSPacket.mobile)
  return _impl_.mobile_.Release();
}
inline void GDSMSPacket::set_allocated_mobile(std::string* mobile) {
  if (mobile != nullptr) {
    
  } else {
    
  }
  _impl_.mobile_.SetAllocated(mobile, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.mobile_.IsDefault()) {
    _impl_.mobile_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GDSMSPacket.mobile)
}

// bytes msg = 4;
inline void GDSMSPacket::clear_msg() {
  _impl_.msg_.ClearToEmpty();
}
inline const std::string& GDSMSPacket::msg() const {
  // @@protoc_insertion_point(field_get:network.GDSMSPacket.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GDSMSPacket::set_msg(ArgT0&& arg0, ArgT... args) {
 
 _impl_.msg_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GDSMSPacket.msg)
}
inline std::string* GDSMSPacket::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:network.GDSMSPacket.msg)
  return _s;
}
inline const std::string& GDSMSPacket::_internal_msg() const {
  return _impl_.msg_.Get();
}
inline void GDSMSPacket::_internal_set_msg(const std::string& value) {
  
  _impl_.msg_.Set(value, GetArenaForAllocation());
}
inline std::string* GDSMSPacket::_internal_mutable_msg() {
  
  return _impl_.msg_.Mutable(GetArenaForAllocation());
}
inline std::string* GDSMSPacket::release_msg() {
  // @@protoc_insertion_point(field_release:network.GDSMSPacket.msg)
  return _impl_.msg_.Release();
}
inline void GDSMSPacket::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  _impl_.msg_.SetAllocated(msg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.msg_.IsDefault()) {
    _impl_.msg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GDSMSPacket.msg)
}

// -------------------------------------------------------------------

// GDRequestGuildPrivPacket

// uint32 type = 1;
inline void GDRequestGuildPrivPacket::clear_type() {
  _impl_.type_ = 0u;
}
inline uint32_t GDRequestGuildPrivPacket::_internal_type() const {
  return _impl_.type_;
}
inline uint32_t GDRequestGuildPrivPacket::type() const {
  // @@protoc_insertion_point(field_get:network.GDRequestGuildPrivPacket.type)
  return _internal_type();
}
inline void GDRequestGuildPrivPacket::_internal_set_type(uint32_t value) {
  
  _impl_.type_ = value;
}
inline void GDRequestGuildPrivPacket::set_type(uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:network.GDRequestGuildPrivPacket.type)
}

// int32 value = 2;
inline void GDRequestGuildPrivPacket::clear_value() {
  _impl_.value_ = 0;
}
inline int32_t GDRequestGuildPrivPacket::_internal_value() const {
  return _impl_.value_;
}
inline int32_t GDRequestGuildPrivPacket::value() const {
  // @@protoc_insertion_point(field_get:network.GDRequestGuildPrivPacket.value)
  return _internal_value();
}
inline void GDRequestGuildPrivPacket::_internal_set_value(int32_t value) {
  
  _impl_.value_ = value;
}
inline void GDRequestGuildPrivPacket::set_value(int32_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:network.GDRequestGuildPrivPacket.value)
}

// uint32 guild_id = 3;
inline void GDRequestGuildPrivPacket::clear_guild_id() {
  _impl_.guild_id_ = 0u;
}
inline uint32_t GDRequestGuildPrivPacket::_internal_guild_id() const {
  return _impl_.guild_id_;
}
inline uint32_t GDRequestGuildPrivPacket::guild_id() const {
  // @@protoc_insertion_point(field_get:network.GDRequestGuildPrivPacket.guild_id)
  return _internal_guild_id();
}
inline void GDRequestGuildPrivPacket::_internal_set_guild_id(uint32_t value) {
  
  _impl_.guild_id_ = value;
}
inline void GDRequestGuildPrivPacket::set_guild_id(uint32_t value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:network.GDRequestGuildPrivPacket.guild_id)
}

// uint32 duration_sec = 4;
inline void GDRequestGuildPrivPacket::clear_duration_sec() {
  _impl_.duration_sec_ = 0u;
}
inline uint32_t GDRequestGuildPrivPacket::_internal_duration_sec() const {
  return _impl_.duration_sec_;
}
inline uint32_t GDRequestGuildPrivPacket::duration_sec() const {
  // @@protoc_insertion_point(field_get:network.GDRequestGuildPrivPacket.duration_sec)
  return _internal_duration_sec();
}
inline void GDRequestGuildPrivPacket::_internal_set_duration_sec(uint32_t value) {
  
  _impl_.duration_sec_ = value;
}
inline void GDRequestGuildPrivPacket::set_duration_sec(uint32_t value) {
  _internal_set_duration_sec(value);
  // @@protoc_insertion_point(field_set:network.GDRequestGuildPrivPacket.duration_sec)
}

// -------------------------------------------------------------------

// GDRequestEmpirePrivPacket

// uint32 type = 1;
inline void GDRequestEmpirePrivPacket::clear_type() {
  _impl_.type_ = 0u;
}
inline uint32_t GDRequestEmpirePrivPacket::_internal_type() const {
  return _impl_.type_;
}
inline uint32_t GDRequestEmpirePrivPacket::type() const {
  // @@protoc_insertion_point(field_get:network.GDRequestEmpirePrivPacket.type)
  return _internal_type();
}
inline void GDRequestEmpirePrivPacket::_internal_set_type(uint32_t value) {
  
  _impl_.type_ = value;
}
inline void GDRequestEmpirePrivPacket::set_type(uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:network.GDRequestEmpirePrivPacket.type)
}

// int32 value = 2;
inline void GDRequestEmpirePrivPacket::clear_value() {
  _impl_.value_ = 0;
}
inline int32_t GDRequestEmpirePrivPacket::_internal_value() const {
  return _impl_.value_;
}
inline int32_t GDRequestEmpirePrivPacket::value() const {
  // @@protoc_insertion_point(field_get:network.GDRequestEmpirePrivPacket.value)
  return _internal_value();
}
inline void GDRequestEmpirePrivPacket::_internal_set_value(int32_t value) {
  
  _impl_.value_ = value;
}
inline void GDRequestEmpirePrivPacket::set_value(int32_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:network.GDRequestEmpirePrivPacket.value)
}

// uint32 empire = 3;
inline void GDRequestEmpirePrivPacket::clear_empire() {
  _impl_.empire_ = 0u;
}
inline uint32_t GDRequestEmpirePrivPacket::_internal_empire() const {
  return _impl_.empire_;
}
inline uint32_t GDRequestEmpirePrivPacket::empire() const {
  // @@protoc_insertion_point(field_get:network.GDRequestEmpirePrivPacket.empire)
  return _internal_empire();
}
inline void GDRequestEmpirePrivPacket::_internal_set_empire(uint32_t value) {
  
  _impl_.empire_ = value;
}
inline void GDRequestEmpirePrivPacket::set_empire(uint32_t value) {
  _internal_set_empire(value);
  // @@protoc_insertion_point(field_set:network.GDRequestEmpirePrivPacket.empire)
}

// uint32 duration_sec = 4;
inline void GDRequestEmpirePrivPacket::clear_duration_sec() {
  _impl_.duration_sec_ = 0u;
}
inline uint32_t GDRequestEmpirePrivPacket::_internal_duration_sec() const {
  return _impl_.duration_sec_;
}
inline uint32_t GDRequestEmpirePrivPacket::duration_sec() const {
  // @@protoc_insertion_point(field_get:network.GDRequestEmpirePrivPacket.duration_sec)
  return _internal_duration_sec();
}
inline void GDRequestEmpirePrivPacket::_internal_set_duration_sec(uint32_t value) {
  
  _impl_.duration_sec_ = value;
}
inline void GDRequestEmpirePrivPacket::set_duration_sec(uint32_t value) {
  _internal_set_duration_sec(value);
  // @@protoc_insertion_point(field_set:network.GDRequestEmpirePrivPacket.duration_sec)
}

// -------------------------------------------------------------------

// GDRequestCharacterPrivPacket

// uint32 type = 1;
inline void GDRequestCharacterPrivPacket::clear_type() {
  _impl_.type_ = 0u;
}
inline uint32_t GDRequestCharacterPrivPacket::_internal_type() const {
  return _impl_.type_;
}
inline uint32_t GDRequestCharacterPrivPacket::type() const {
  // @@protoc_insertion_point(field_get:network.GDRequestCharacterPrivPacket.type)
  return _internal_type();
}
inline void GDRequestCharacterPrivPacket::_internal_set_type(uint32_t value) {
  
  _impl_.type_ = value;
}
inline void GDRequestCharacterPrivPacket::set_type(uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:network.GDRequestCharacterPrivPacket.type)
}

// int32 value = 2;
inline void GDRequestCharacterPrivPacket::clear_value() {
  _impl_.value_ = 0;
}
inline int32_t GDRequestCharacterPrivPacket::_internal_value() const {
  return _impl_.value_;
}
inline int32_t GDRequestCharacterPrivPacket::value() const {
  // @@protoc_insertion_point(field_get:network.GDRequestCharacterPrivPacket.value)
  return _internal_value();
}
inline void GDRequestCharacterPrivPacket::_internal_set_value(int32_t value) {
  
  _impl_.value_ = value;
}
inline void GDRequestCharacterPrivPacket::set_value(int32_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:network.GDRequestCharacterPrivPacket.value)
}

// uint32 pid = 3;
inline void GDRequestCharacterPrivPacket::clear_pid() {
  _impl_.pid_ = 0u;
}
inline uint32_t GDRequestCharacterPrivPacket::_internal_pid() const {
  return _impl_.pid_;
}
inline uint32_t GDRequestCharacterPrivPacket::pid() const {
  // @@protoc_insertion_point(field_get:network.GDRequestCharacterPrivPacket.pid)
  return _internal_pid();
}
inline void GDRequestCharacterPrivPacket::_internal_set_pid(uint32_t value) {
  
  _impl_.pid_ = value;
}
inline void GDRequestCharacterPrivPacket::set_pid(uint32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:network.GDRequestCharacterPrivPacket.pid)
}

// -------------------------------------------------------------------

// GDMoneyLogPacket

// uint32 type = 1;
inline void GDMoneyLogPacket::clear_type() {
  _impl_.type_ = 0u;
}
inline uint32_t GDMoneyLogPacket::_internal_type() const {
  return _impl_.type_;
}
inline uint32_t GDMoneyLogPacket::type() const {
  // @@protoc_insertion_point(field_get:network.GDMoneyLogPacket.type)
  return _internal_type();
}
inline void GDMoneyLogPacket::_internal_set_type(uint32_t value) {
  
  _impl_.type_ = value;
}
inline void GDMoneyLogPacket::set_type(uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:network.GDMoneyLogPacket.type)
}

// uint32 vnum = 2;
inline void GDMoneyLogPacket::clear_vnum() {
  _impl_.vnum_ = 0u;
}
inline uint32_t GDMoneyLogPacket::_internal_vnum() const {
  return _impl_.vnum_;
}
inline uint32_t GDMoneyLogPacket::vnum() const {
  // @@protoc_insertion_point(field_get:network.GDMoneyLogPacket.vnum)
  return _internal_vnum();
}
inline void GDMoneyLogPacket::_internal_set_vnum(uint32_t value) {
  
  _impl_.vnum_ = value;
}
inline void GDMoneyLogPacket::set_vnum(uint32_t value) {
  _internal_set_vnum(value);
  // @@protoc_insertion_point(field_set:network.GDMoneyLogPacket.vnum)
}

// int64 gold = 3;
inline void GDMoneyLogPacket::clear_gold() {
  _impl_.gold_ = int64_t{0};
}
inline int64_t GDMoneyLogPacket::_internal_gold() const {
  return _impl_.gold_;
}
inline int64_t GDMoneyLogPacket::gold() const {
  // @@protoc_insertion_point(field_get:network.GDMoneyLogPacket.gold)
  return _internal_gold();
}
inline void GDMoneyLogPacket::_internal_set_gold(int64_t value) {
  
  _impl_.gold_ = value;
}
inline void GDMoneyLogPacket::set_gold(int64_t value) {
  _internal_set_gold(value);
  // @@protoc_insertion_point(field_set:network.GDMoneyLogPacket.gold)
}

// -------------------------------------------------------------------

// GDSetEventFlagPacket

// bytes flag_name = 1;
inline void GDSetEventFlagPacket::clear_flag_name() {
  _impl_.flag_name_.ClearToEmpty();
}
inline const std::string& GDSetEventFlagPacket::flag_name() const {
  // @@protoc_insertion_point(field_get:network.GDSetEventFlagPacket.flag_name)
  return _internal_flag_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GDSetEventFlagPacket::set_flag_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.flag_name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GDSetEventFlagPacket.flag_name)
}
inline std::string* GDSetEventFlagPacket::mutable_flag_name() {
  std::string* _s = _internal_mutable_flag_name();
  // @@protoc_insertion_point(field_mutable:network.GDSetEventFlagPacket.flag_name)
  return _s;
}
inline const std::string& GDSetEventFlagPacket::_internal_flag_name() const {
  return _impl_.flag_name_.Get();
}
inline void GDSetEventFlagPacket::_internal_set_flag_name(const std::string& value) {
  
  _impl_.flag_name_.Set(value, GetArenaForAllocation());
}
inline std::string* GDSetEventFlagPacket::_internal_mutable_flag_name() {
  
  return _impl_.flag_name_.Mutable(GetArenaForAllocation());
}
inline std::string* GDSetEventFlagPacket::release_flag_name() {
  // @@protoc_insertion_point(field_release:network.GDSetEventFlagPacket.flag_name)
  return _impl_.flag_name_.Release();
}
inline void GDSetEventFlagPacket::set_allocated_flag_name(std::string* flag_name) {
  if (flag_name != nullptr) {
    
  } else {
    
  }
  _impl_.flag_name_.SetAllocated(flag_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.flag_name_.IsDefault()) {
    _impl_.flag_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GDSetEventFlagPacket.flag_name)
}

// int32 value = 2;
inline void GDSetEventFlagPacket::clear_value() {
  _impl_.value_ = 0;
}
inline int32_t GDSetEventFlagPacket::_internal_value() const {
  return _impl_.value_;
}
inline int32_t GDSetEventFlagPacket::value() const {
  // @@protoc_insertion_point(field_get:network.GDSetEventFlagPacket.value)
  return _internal_value();
}
inline void GDSetEventFlagPacket::_internal_set_value(int32_t value) {
  
  _impl_.value_ = value;
}
inline void GDSetEventFlagPacket::set_value(int32_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:network.GDSetEventFlagPacket.value)
}

// bool is_add = 3;
inline void GDSetEventFlagPacket::clear_is_add() {
  _impl_.is_add_ = false;
}
inline bool GDSetEventFlagPacket::_internal_is_add() const {
  return _impl_.is_add_;
}
inline bool GDSetEventFlagPacket::is_add() const {
  // @@protoc_insertion_point(field_get:network.GDSetEventFlagPacket.is_add)
  return _internal_is_add();
}
inline void GDSetEventFlagPacket::_internal_set_is_add(bool value) {
  
  _impl_.is_add_ = value;
}
inline void GDSetEventFlagPacket::set_is_add(bool value) {
  _internal_set_is_add(value);
  // @@protoc_insertion_point(field_set:network.GDSetEventFlagPacket.is_add)
}

// -------------------------------------------------------------------

// GDCreateObjectPacket

// uint32 vnum = 1;
inline void GDCreateObjectPacket::clear_vnum() {
  _impl_.vnum_ = 0u;
}
inline uint32_t GDCreateObjectPacket::_internal_vnum() const {
  return _impl_.vnum_;
}
inline uint32_t GDCreateObjectPacket::vnum() const {
  // @@protoc_insertion_point(field_get:network.GDCreateObjectPacket.vnum)
  return _internal_vnum();
}
inline void GDCreateObjectPacket::_internal_set_vnum(uint32_t value) {
  
  _impl_.vnum_ = value;
}
inline void GDCreateObjectPacket::set_vnum(uint32_t value) {
  _internal_set_vnum(value);
  // @@protoc_insertion_point(field_set:network.GDCreateObjectPacket.vnum)
}

// uint32 land_id = 2;
inline void GDCreateObjectPacket::clear_land_id() {
  _impl_.land_id_ = 0u;
}
inline uint32_t GDCreateObjectPacket::_internal_land_id() const {
  return _impl_.land_id_;
}
inline uint32_t GDCreateObjectPacket::land_id() const {
  // @@protoc_insertion_point(field_get:network.GDCreateObjectPacket.land_id)
  return _internal_land_id();
}
inline void GDCreateObjectPacket::_internal_set_land_id(uint32_t value) {
  
  _impl_.land_id_ = value;
}
inline void GDCreateObjectPacket::set_land_id(uint32_t value) {
  _internal_set_land_id(value);
  // @@protoc_insertion_point(field_set:network.GDCreateObjectPacket.land_id)
}

// uint32 map_index = 3;
inline void GDCreateObjectPacket::clear_map_index() {
  _impl_.map_index_ = 0u;
}
inline uint32_t GDCreateObjectPacket::_internal_map_index() const {
  return _impl_.map_index_;
}
inline uint32_t GDCreateObjectPacket::map_index() const {
  // @@protoc_insertion_point(field_get:network.GDCreateObjectPacket.map_index)
  return _internal_map_index();
}
inline void GDCreateObjectPacket::_internal_set_map_index(uint32_t value) {
  
  _impl_.map_index_ = value;
}
inline void GDCreateObjectPacket::set_map_index(uint32_t value) {
  _internal_set_map_index(value);
  // @@protoc_insertion_point(field_set:network.GDCreateObjectPacket.map_index)
}

// int32 x = 4;
inline void GDCreateObjectPacket::clear_x() {
  _impl_.x_ = 0;
}
inline int32_t GDCreateObjectPacket::_internal_x() const {
  return _impl_.x_;
}
inline int32_t GDCreateObjectPacket::x() const {
  // @@protoc_insertion_point(field_get:network.GDCreateObjectPacket.x)
  return _internal_x();
}
inline void GDCreateObjectPacket::_internal_set_x(int32_t value) {
  
  _impl_.x_ = value;
}
inline void GDCreateObjectPacket::set_x(int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:network.GDCreateObjectPacket.x)
}

// int32 y = 5;
inline void GDCreateObjectPacket::clear_y() {
  _impl_.y_ = 0;
}
inline int32_t GDCreateObjectPacket::_internal_y() const {
  return _impl_.y_;
}
inline int32_t GDCreateObjectPacket::y() const {
  // @@protoc_insertion_point(field_get:network.GDCreateObjectPacket.y)
  return _internal_y();
}
inline void GDCreateObjectPacket::_internal_set_y(int32_t value) {
  
  _impl_.y_ = value;
}
inline void GDCreateObjectPacket::set_y(int32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:network.GDCreateObjectPacket.y)
}

// float rot_x = 6;
inline void GDCreateObjectPacket::clear_rot_x() {
  _impl_.rot_x_ = 0;
}
inline float GDCreateObjectPacket::_internal_rot_x() const {
  return _impl_.rot_x_;
}
inline float GDCreateObjectPacket::rot_x() const {
  // @@protoc_insertion_point(field_get:network.GDCreateObjectPacket.rot_x)
  return _internal_rot_x();
}
inline void GDCreateObjectPacket::_internal_set_rot_x(float value) {
  
  _impl_.rot_x_ = value;
}
inline void GDCreateObjectPacket::set_rot_x(float value) {
  _internal_set_rot_x(value);
  // @@protoc_insertion_point(field_set:network.GDCreateObjectPacket.rot_x)
}

// float rot_y = 7;
inline void GDCreateObjectPacket::clear_rot_y() {
  _impl_.rot_y_ = 0;
}
inline float GDCreateObjectPacket::_internal_rot_y() const {
  return _impl_.rot_y_;
}
inline float GDCreateObjectPacket::rot_y() const {
  // @@protoc_insertion_point(field_get:network.GDCreateObjectPacket.rot_y)
  return _internal_rot_y();
}
inline void GDCreateObjectPacket::_internal_set_rot_y(float value) {
  
  _impl_.rot_y_ = value;
}
inline void GDCreateObjectPacket::set_rot_y(float value) {
  _internal_set_rot_y(value);
  // @@protoc_insertion_point(field_set:network.GDCreateObjectPacket.rot_y)
}

// float rot_z = 8;
inline void GDCreateObjectPacket::clear_rot_z() {
  _impl_.rot_z_ = 0;
}
inline float GDCreateObjectPacket::_internal_rot_z() const {
  return _impl_.rot_z_;
}
inline float GDCreateObjectPacket::rot_z() const {
  // @@protoc_insertion_point(field_get:network.GDCreateObjectPacket.rot_z)
  return _internal_rot_z();
}
inline void GDCreateObjectPacket::_internal_set_rot_z(float value) {
  
  _impl_.rot_z_ = value;
}
inline void GDCreateObjectPacket::set_rot_z(float value) {
  _internal_set_rot_z(value);
  // @@protoc_insertion_point(field_set:network.GDCreateObjectPacket.rot_z)
}

// -------------------------------------------------------------------

// GDDeleteObjectPacket

// uint32 id = 1;
inline void GDDeleteObjectPacket::clear_id() {
  _impl_.id_ = 0u;
}
inline uint32_t GDDeleteObjectPacket::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t GDDeleteObjectPacket::id() const {
  // @@protoc_insertion_point(field_get:network.GDDeleteObjectPacket.id)
  return _internal_id();
}
inline void GDDeleteObjectPacket::_internal_set_id(uint32_t value) {
  
  _impl_.id_ = value;
}
inline void GDDeleteObjectPacket::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:network.GDDeleteObjectPacket.id)
}

// -------------------------------------------------------------------

// GDUpdateLandPacket

// uint32 guild_id = 1;
inline void GDUpdateLandPacket::clear_guild_id() {
  _impl_.guild_id_ = 0u;
}
inline uint32_t GDUpdateLandPacket::_internal_guild_id() const {
  return _impl_.guild_id_;
}
inline uint32_t GDUpdateLandPacket::guild_id() const {
  // @@protoc_insertion_point(field_get:network.GDUpdateLandPacket.guild_id)
  return _internal_guild_id();
}
inline void GDUpdateLandPacket::_internal_set_guild_id(uint32_t value) {
  
  _impl_.guild_id_ = value;
}
inline void GDUpdateLandPacket::set_guild_id(uint32_t value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:network.GDUpdateLandPacket.guild_id)
}

// uint32 land_id = 2;
inline void GDUpdateLandPacket::clear_land_id() {
  _impl_.land_id_ = 0u;
}
inline uint32_t GDUpdateLandPacket::_internal_land_id() const {
  return _impl_.land_id_;
}
inline uint32_t GDUpdateLandPacket::land_id() const {
  // @@protoc_insertion_point(field_get:network.GDUpdateLandPacket.land_id)
  return _internal_land_id();
}
inline void GDUpdateLandPacket::_internal_set_land_id(uint32_t value) {
  
  _impl_.land_id_ = value;
}
inline void GDUpdateLandPacket::set_land_id(uint32_t value) {
  _internal_set_land_id(value);
  // @@protoc_insertion_point(field_set:network.GDUpdateLandPacket.land_id)
}

// -------------------------------------------------------------------

// GDVCardPacket

// uint32 id = 1;
inline void GDVCardPacket::clear_id() {
  _impl_.id_ = 0u;
}
inline uint32_t GDVCardPacket::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t GDVCardPacket::id() const {
  // @@protoc_insertion_point(field_get:network.GDVCardPacket.id)
  return _internal_id();
}
inline void GDVCardPacket::_internal_set_id(uint32_t value) {
  
  _impl_.id_ = value;
}
inline void GDVCardPacket::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:network.GDVCardPacket.id)
}

// bytes sell_character = 2;
inline void GDVCardPacket::clear_sell_character() {
  _impl_.sell_character_.ClearToEmpty();
}
inline const std::string& GDVCardPacket::sell_character() const {
  // @@protoc_insertion_point(field_get:network.GDVCardPacket.sell_character)
  return _internal_sell_character();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GDVCardPacket::set_sell_character(ArgT0&& arg0, ArgT... args) {
 
 _impl_.sell_character_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GDVCardPacket.sell_character)
}
inline std::string* GDVCardPacket::mutable_sell_character() {
  std::string* _s = _internal_mutable_sell_character();
  // @@protoc_insertion_point(field_mutable:network.GDVCardPacket.sell_character)
  return _s;
}
inline const std::string& GDVCardPacket::_internal_sell_character() const {
  return _impl_.sell_character_.Get();
}
inline void GDVCardPacket::_internal_set_sell_character(const std::string& value) {
  
  _impl_.sell_character_.Set(value, GetArenaForAllocation());
}
inline std::string* GDVCardPacket::_internal_mutable_sell_character() {
  
  return _impl_.sell_character_.Mutable(GetArenaForAllocation());
}
inline std::string* GDVCardPacket::release_sell_character() {
  // @@protoc_insertion_point(field_release:network.GDVCardPacket.sell_character)
  return _impl_.sell_character_.Release();
}
inline void GDVCardPacket::set_allocated_sell_character(std::string* sell_character) {
  if (sell_character != nullptr) {
    
  } else {
    
  }
  _impl_.sell_character_.SetAllocated(sell_character, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sell_character_.IsDefault()) {
    _impl_.sell_character_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GDVCardPacket.sell_character)
}

// bytes sell_account = 3;
inline void GDVCardPacket::clear_sell_account() {
  _impl_.sell_account_.ClearToEmpty();
}
inline const std::string& GDVCardPacket::sell_account() const {
  // @@protoc_insertion_point(field_get:network.GDVCardPacket.sell_account)
  return _internal_sell_account();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GDVCardPacket::set_sell_account(ArgT0&& arg0, ArgT... args) {
 
 _impl_.sell_account_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GDVCardPacket.sell_account)
}
inline std::string* GDVCardPacket::mutable_sell_account() {
  std::string* _s = _internal_mutable_sell_account();
  // @@protoc_insertion_point(field_mutable:network.GDVCardPacket.sell_account)
  return _s;
}
inline const std::string& GDVCardPacket::_internal_sell_account() const {
  return _impl_.sell_account_.Get();
}
inline void GDVCardPacket::_internal_set_sell_account(const std::string& value) {
  
  _impl_.sell_account_.Set(value, GetArenaForAllocation());
}
inline std::string* GDVCardPacket::_internal_mutable_sell_account() {
  
  return _impl_.sell_account_.Mutable(GetArenaForAllocation());
}
inline std::string* GDVCardPacket::release_sell_account() {
  // @@protoc_insertion_point(field_release:network.GDVCardPacket.sell_account)
  return _impl_.sell_account_.Release();
}
inline void GDVCardPacket::set_allocated_sell_account(std::string* sell_account) {
  if (sell_account != nullptr) {
    
  } else {
    
  }
  _impl_.sell_account_.SetAllocated(sell_account, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sell_account_.IsDefault()) {
    _impl_.sell_account_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GDVCardPacket.sell_account)
}

// bytes buy_character = 4;
inline void GDVCardPacket::clear_buy_character() {
  _impl_.buy_character_.ClearToEmpty();
}
inline const std::string& GDVCardPacket::buy_character() const {
  // @@protoc_insertion_point(field_get:network.GDVCardPacket.buy_character)
  return _internal_buy_character();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GDVCardPacket::set_buy_character(ArgT0&& arg0, ArgT... args) {
 
 _impl_.buy_character_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GDVCardPacket.buy_character)
}
inline std::string* GDVCardPacket::mutable_buy_character() {
  std::string* _s = _internal_mutable_buy_character();
  // @@protoc_insertion_point(field_mutable:network.GDVCardPacket.buy_character)
  return _s;
}
inline const std::string& GDVCardPacket::_internal_buy_character() const {
  return _impl_.buy_character_.Get();
}
inline void GDVCardPacket::_internal_set_buy_character(const std::string& value) {
  
  _impl_.buy_character_.Set(value, GetArenaForAllocation());
}
inline std::string* GDVCardPacket::_internal_mutable_buy_character() {
  
  return _impl_.buy_character_.Mutable(GetArenaForAllocation());
}
inline std::string* GDVCardPacket::release_buy_character() {
  // @@protoc_insertion_point(field_release:network.GDVCardPacket.buy_character)
  return _impl_.buy_character_.Release();
}
inline void GDVCardPacket::set_allocated_buy_character(std::string* buy_character) {
  if (buy_character != nullptr) {
    
  } else {
    
  }
  _impl_.buy_character_.SetAllocated(buy_character, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.buy_character_.IsDefault()) {
    _impl_.buy_character_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GDVCardPacket.buy_character)
}

// bytes buy_account = 5;
inline void GDVCardPacket::clear_buy_account() {
  _impl_.buy_account_.ClearToEmpty();
}
inline const std::string& GDVCardPacket::buy_account() const {
  // @@protoc_insertion_point(field_get:network.GDVCardPacket.buy_account)
  return _internal_buy_account();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GDVCardPacket::set_buy_account(ArgT0&& arg0, ArgT... args) {
 
 _impl_.buy_account_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GDVCardPacket.buy_account)
}
inline std::string* GDVCardPacket::mutable_buy_account() {
  std::string* _s = _internal_mutable_buy_account();
  // @@protoc_insertion_point(field_mutable:network.GDVCardPacket.buy_account)
  return _s;
}
inline const std::string& GDVCardPacket::_internal_buy_account() const {
  return _impl_.buy_account_.Get();
}
inline void GDVCardPacket::_internal_set_buy_account(const std::string& value) {
  
  _impl_.buy_account_.Set(value, GetArenaForAllocation());
}
inline std::string* GDVCardPacket::_internal_mutable_buy_account() {
  
  return _impl_.buy_account_.Mutable(GetArenaForAllocation());
}
inline std::string* GDVCardPacket::release_buy_account() {
  // @@protoc_insertion_point(field_release:network.GDVCardPacket.buy_account)
  return _impl_.buy_account_.Release();
}
inline void GDVCardPacket::set_allocated_buy_account(std::string* buy_account) {
  if (buy_account != nullptr) {
    
  } else {
    
  }
  _impl_.buy_account_.SetAllocated(buy_account, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.buy_account_.IsDefault()) {
    _impl_.buy_account_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GDVCardPacket.buy_account)
}

// -------------------------------------------------------------------

// GDBlockChatPacket

// bytes name = 1;
inline void GDBlockChatPacket::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GDBlockChatPacket::name() const {
  // @@protoc_insertion_point(field_get:network.GDBlockChatPacket.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GDBlockChatPacket::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GDBlockChatPacket.name)
}
inline std::string* GDBlockChatPacket::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:network.GDBlockChatPacket.name)
  return _s;
}
inline const std::string& GDBlockChatPacket::_internal_name() const {
  return _impl_.name_.Get();
}
inline void GDBlockChatPacket::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* GDBlockChatPacket::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* GDBlockChatPacket::release_name() {
  // @@protoc_insertion_point(field_release:network.GDBlockChatPacket.name)
  return _impl_.name_.Release();
}
inline void GDBlockChatPacket::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GDBlockChatPacket.name)
}

// int32 duration = 2;
inline void GDBlockChatPacket::clear_duration() {
  _impl_.duration_ = 0;
}
inline int32_t GDBlockChatPacket::_internal_duration() const {
  return _impl_.duration_;
}
inline int32_t GDBlockChatPacket::duration() const {
  // @@protoc_insertion_point(field_get:network.GDBlockChatPacket.duration)
  return _internal_duration();
}
inline void GDBlockChatPacket::_internal_set_duration(int32_t value) {
  
  _impl_.duration_ = value;
}
inline void GDBlockChatPacket::set_duration(int32_t value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:network.GDBlockChatPacket.duration)
}

// -------------------------------------------------------------------

// GDMyShopPricelistUpdatePacket

// uint32 owner_id = 1;
inline void GDMyShopPricelistUpdatePacket::clear_owner_id() {
  _impl_.owner_id_ = 0u;
}
inline uint32_t GDMyShopPricelistUpdatePacket::_internal_owner_id() const {
  return _impl_.owner_id_;
}
inline uint32_t GDMyShopPricelistUpdatePacket::owner_id() const {
  // @@protoc_insertion_point(field_get:network.GDMyShopPricelistUpdatePacket.owner_id)
  return _internal_owner_id();
}
inline void GDMyShopPricelistUpdatePacket::_internal_set_owner_id(uint32_t value) {
  
  _impl_.owner_id_ = value;
}
inline void GDMyShopPricelistUpdatePacket::set_owner_id(uint32_t value) {
  _internal_set_owner_id(value);
  // @@protoc_insertion_point(field_set:network.GDMyShopPricelistUpdatePacket.owner_id)
}

// repeated .network.TItemPriceInfo price_info = 2;
inline int GDMyShopPricelistUpdatePacket::_internal_price_info_size() const {
  return _impl_.price_info_.size();
}
inline int GDMyShopPricelistUpdatePacket::price_info_size() const {
  return _internal_price_info_size();
}
inline ::network::TItemPriceInfo* GDMyShopPricelistUpdatePacket::mutable_price_info(int index) {
  // @@protoc_insertion_point(field_mutable:network.GDMyShopPricelistUpdatePacket.price_info)
  return _impl_.price_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemPriceInfo >*
GDMyShopPricelistUpdatePacket::mutable_price_info() {
  // @@protoc_insertion_point(field_mutable_list:network.GDMyShopPricelistUpdatePacket.price_info)
  return &_impl_.price_info_;
}
inline const ::network::TItemPriceInfo& GDMyShopPricelistUpdatePacket::_internal_price_info(int index) const {
  return _impl_.price_info_.Get(index);
}
inline const ::network::TItemPriceInfo& GDMyShopPricelistUpdatePacket::price_info(int index) const {
  // @@protoc_insertion_point(field_get:network.GDMyShopPricelistUpdatePacket.price_info)
  return _internal_price_info(index);
}
inline ::network::TItemPriceInfo* GDMyShopPricelistUpdatePacket::_internal_add_price_info() {
  return _impl_.price_info_.Add();
}
inline ::network::TItemPriceInfo* GDMyShopPricelistUpdatePacket::add_price_info() {
  ::network::TItemPriceInfo* _add = _internal_add_price_info();
  // @@protoc_insertion_point(field_add:network.GDMyShopPricelistUpdatePacket.price_info)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TItemPriceInfo >&
GDMyShopPricelistUpdatePacket::price_info() const {
  // @@protoc_insertion_point(field_list:network.GDMyShopPricelistUpdatePacket.price_info)
  return _impl_.price_info_;
}

// -------------------------------------------------------------------

// GDMyShopPricelistRequestPacket

// uint32 pid = 1;
inline void GDMyShopPricelistRequestPacket::clear_pid() {
  _impl_.pid_ = 0u;
}
inline uint32_t GDMyShopPricelistRequestPacket::_internal_pid() const {
  return _impl_.pid_;
}
inline uint32_t GDMyShopPricelistRequestPacket::pid() const {
  // @@protoc_insertion_point(field_get:network.GDMyShopPricelistRequestPacket.pid)
  return _internal_pid();
}
inline void GDMyShopPricelistRequestPacket::_internal_set_pid(uint32_t value) {
  
  _impl_.pid_ = value;
}
inline void GDMyShopPricelistRequestPacket::set_pid(uint32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:network.GDMyShopPricelistRequestPacket.pid)
}

// -------------------------------------------------------------------

// GDUpdateHorseNamePacket

// uint32 pid = 1;
inline void GDUpdateHorseNamePacket::clear_pid() {
  _impl_.pid_ = 0u;
}
inline uint32_t GDUpdateHorseNamePacket::_internal_pid() const {
  return _impl_.pid_;
}
inline uint32_t GDUpdateHorseNamePacket::pid() const {
  // @@protoc_insertion_point(field_get:network.GDUpdateHorseNamePacket.pid)
  return _internal_pid();
}
inline void GDUpdateHorseNamePacket::_internal_set_pid(uint32_t value) {
  
  _impl_.pid_ = value;
}
inline void GDUpdateHorseNamePacket::set_pid(uint32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:network.GDUpdateHorseNamePacket.pid)
}

// bytes horse_name = 2;
inline void GDUpdateHorseNamePacket::clear_horse_name() {
  _impl_.horse_name_.ClearToEmpty();
}
inline const std::string& GDUpdateHorseNamePacket::horse_name() const {
  // @@protoc_insertion_point(field_get:network.GDUpdateHorseNamePacket.horse_name)
  return _internal_horse_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GDUpdateHorseNamePacket::set_horse_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.horse_name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GDUpdateHorseNamePacket.horse_name)
}
inline std::string* GDUpdateHorseNamePacket::mutable_horse_name() {
  std::string* _s = _internal_mutable_horse_name();
  // @@protoc_insertion_point(field_mutable:network.GDUpdateHorseNamePacket.horse_name)
  return _s;
}
inline const std::string& GDUpdateHorseNamePacket::_internal_horse_name() const {
  return _impl_.horse_name_.Get();
}
inline void GDUpdateHorseNamePacket::_internal_set_horse_name(const std::string& value) {
  
  _impl_.horse_name_.Set(value, GetArenaForAllocation());
}
inline std::string* GDUpdateHorseNamePacket::_internal_mutable_horse_name() {
  
  return _impl_.horse_name_.Mutable(GetArenaForAllocation());
}
inline std::string* GDUpdateHorseNamePacket::release_horse_name() {
  // @@protoc_insertion_point(field_release:network.GDUpdateHorseNamePacket.horse_name)
  return _impl_.horse_name_.Release();
}
inline void GDUpdateHorseNamePacket::set_allocated_horse_name(std::string* horse_name) {
  if (horse_name != nullptr) {
    
  } else {
    
  }
  _impl_.horse_name_.SetAllocated(horse_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.horse_name_.IsDefault()) {
    _impl_.horse_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GDUpdateHorseNamePacket.horse_name)
}

// -------------------------------------------------------------------

// GDRequestChargeCashPacket

// uint32 account_id = 1;
inline void GDRequestChargeCashPacket::clear_account_id() {
  _impl_.account_id_ = 0u;
}
inline uint32_t GDRequestChargeCashPacket::_internal_account_id() const {
  return _impl_.account_id_;
}
inline uint32_t GDRequestChargeCashPacket::account_id() const {
  // @@protoc_insertion_point(field_get:network.GDRequestChargeCashPacket.account_id)
  return _internal_account_id();
}
inline void GDRequestChargeCashPacket::_internal_set_account_id(uint32_t value) {
  
  _impl_.account_id_ = value;
}
inline void GDRequestChargeCashPacket::set_account_id(uint32_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:network.GDRequestChargeCashPacket.account_id)
}

// uint32 amount = 2;
inline void GDRequestChargeCashPacket::clear_amount() {
  _impl_.amount_ = 0u;
}
inline uint32_t GDRequestChargeCashPacket::_internal_amount() const {
  return _impl_.amount_;
}
inline uint32_t GDRequestChargeCashPacket::amount() const {
  // @@protoc_insertion_point(field_get:network.GDRequestChargeCashPacket.amount)
  return _internal_amount();
}
inline void GDRequestChargeCashPacket::_internal_set_amount(uint32_t value) {
  
  _impl_.amount_ = value;
}
inline void GDRequestChargeCashPacket::set_amount(uint32_t value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:network.GDRequestChargeCashPacket.amount)
}

// uint32 charge_type = 3;
inline void GDRequestChargeCashPacket::clear_charge_type() {
  _impl_.charge_type_ = 0u;
}
inline uint32_t GDRequestChargeCashPacket::_internal_charge_type() const {
  return _impl_.charge_type_;
}
inline uint32_t GDRequestChargeCashPacket::charge_type() const {
  // @@protoc_insertion_point(field_get:network.GDRequestChargeCashPacket.charge_type)
  return _internal_charge_type();
}
inline void GDRequestChargeCashPacket::_internal_set_charge_type(uint32_t value) {
  
  _impl_.charge_type_ = value;
}
inline void GDRequestChargeCashPacket::set_charge_type(uint32_t value) {
  _internal_set_charge_type(value);
  // @@protoc_insertion_point(field_set:network.GDRequestChargeCashPacket.charge_type)
}

// -------------------------------------------------------------------

// GDDeleteAwardIDPacket

// uint32 id = 1;
inline void GDDeleteAwardIDPacket::clear_id() {
  _impl_.id_ = 0u;
}
inline uint32_t GDDeleteAwardIDPacket::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t GDDeleteAwardIDPacket::id() const {
  // @@protoc_insertion_point(field_get:network.GDDeleteAwardIDPacket.id)
  return _internal_id();
}
inline void GDDeleteAwardIDPacket::_internal_set_id(uint32_t value) {
  
  _impl_.id_ = value;
}
inline void GDDeleteAwardIDPacket::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:network.GDDeleteAwardIDPacket.id)
}

// -------------------------------------------------------------------

// GDChannelSwitchPacket

// uint32 channel = 1;
inline void GDChannelSwitchPacket::clear_channel() {
  _impl_.channel_ = 0u;
}
inline uint32_t GDChannelSwitchPacket::_internal_channel() const {
  return _impl_.channel_;
}
inline uint32_t GDChannelSwitchPacket::channel() const {
  // @@protoc_insertion_point(field_get:network.GDChannelSwitchPacket.channel)
  return _internal_channel();
}
inline void GDChannelSwitchPacket::_internal_set_channel(uint32_t value) {
  
  _impl_.channel_ = value;
}
inline void GDChannelSwitchPacket::set_channel(uint32_t value) {
  _internal_set_channel(value);
  // @@protoc_insertion_point(field_set:network.GDChannelSwitchPacket.channel)
}

// uint32 map_index = 2;
inline void GDChannelSwitchPacket::clear_map_index() {
  _impl_.map_index_ = 0u;
}
inline uint32_t GDChannelSwitchPacket::_internal_map_index() const {
  return _impl_.map_index_;
}
inline uint32_t GDChannelSwitchPacket::map_index() const {
  // @@protoc_insertion_point(field_get:network.GDChannelSwitchPacket.map_index)
  return _internal_map_index();
}
inline void GDChannelSwitchPacket::_internal_set_map_index(uint32_t value) {
  
  _impl_.map_index_ = value;
}
inline void GDChannelSwitchPacket::set_map_index(uint32_t value) {
  _internal_set_map_index(value);
  // @@protoc_insertion_point(field_set:network.GDChannelSwitchPacket.map_index)
}

// -------------------------------------------------------------------

// GDSpawnMobTimedPacket

// uint32 mob_vnum = 1;
inline void GDSpawnMobTimedPacket::clear_mob_vnum() {
  _impl_.mob_vnum_ = 0u;
}
inline uint32_t GDSpawnMobTimedPacket::_internal_mob_vnum() const {
  return _impl_.mob_vnum_;
}
inline uint32_t GDSpawnMobTimedPacket::mob_vnum() const {
  // @@protoc_insertion_point(field_get:network.GDSpawnMobTimedPacket.mob_vnum)
  return _internal_mob_vnum();
}
inline void GDSpawnMobTimedPacket::_internal_set_mob_vnum(uint32_t value) {
  
  _impl_.mob_vnum_ = value;
}
inline void GDSpawnMobTimedPacket::set_mob_vnum(uint32_t value) {
  _internal_set_mob_vnum(value);
  // @@protoc_insertion_point(field_set:network.GDSpawnMobTimedPacket.mob_vnum)
}

// uint32 map_index = 2;
inline void GDSpawnMobTimedPacket::clear_map_index() {
  _impl_.map_index_ = 0u;
}
inline uint32_t GDSpawnMobTimedPacket::_internal_map_index() const {
  return _impl_.map_index_;
}
inline uint32_t GDSpawnMobTimedPacket::map_index() const {
  // @@protoc_insertion_point(field_get:network.GDSpawnMobTimedPacket.map_index)
  return _internal_map_index();
}
inline void GDSpawnMobTimedPacket::_internal_set_map_index(uint32_t value) {
  
  _impl_.map_index_ = value;
}
inline void GDSpawnMobTimedPacket::set_map_index(uint32_t value) {
  _internal_set_map_index(value);
  // @@protoc_insertion_point(field_set:network.GDSpawnMobTimedPacket.map_index)
}

// int32 x = 3;
inline void GDSpawnMobTimedPacket::clear_x() {
  _impl_.x_ = 0;
}
inline int32_t GDSpawnMobTimedPacket::_internal_x() const {
  return _impl_.x_;
}
inline int32_t GDSpawnMobTimedPacket::x() const {
  // @@protoc_insertion_point(field_get:network.GDSpawnMobTimedPacket.x)
  return _internal_x();
}
inline void GDSpawnMobTimedPacket::_internal_set_x(int32_t value) {
  
  _impl_.x_ = value;
}
inline void GDSpawnMobTimedPacket::set_x(int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:network.GDSpawnMobTimedPacket.x)
}

// int32 y = 4;
inline void GDSpawnMobTimedPacket::clear_y() {
  _impl_.y_ = 0;
}
inline int32_t GDSpawnMobTimedPacket::_internal_y() const {
  return _impl_.y_;
}
inline int32_t GDSpawnMobTimedPacket::y() const {
  // @@protoc_insertion_point(field_get:network.GDSpawnMobTimedPacket.y)
  return _internal_y();
}
inline void GDSpawnMobTimedPacket::_internal_set_y(int32_t value) {
  
  _impl_.y_ = value;
}
inline void GDSpawnMobTimedPacket::set_y(int32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:network.GDSpawnMobTimedPacket.y)
}

// uint32 channel = 5;
inline void GDSpawnMobTimedPacket::clear_channel() {
  _impl_.channel_ = 0u;
}
inline uint32_t GDSpawnMobTimedPacket::_internal_channel() const {
  return _impl_.channel_;
}
inline uint32_t GDSpawnMobTimedPacket::channel() const {
  // @@protoc_insertion_point(field_get:network.GDSpawnMobTimedPacket.channel)
  return _internal_channel();
}
inline void GDSpawnMobTimedPacket::_internal_set_channel(uint32_t value) {
  
  _impl_.channel_ = value;
}
inline void GDSpawnMobTimedPacket::set_channel(uint32_t value) {
  _internal_set_channel(value);
  // @@protoc_insertion_point(field_set:network.GDSpawnMobTimedPacket.channel)
}

// int32 target_time = 6;
inline void GDSpawnMobTimedPacket::clear_target_time() {
  _impl_.target_time_ = 0;
}
inline int32_t GDSpawnMobTimedPacket::_internal_target_time() const {
  return _impl_.target_time_;
}
inline int32_t GDSpawnMobTimedPacket::target_time() const {
  // @@protoc_insertion_point(field_get:network.GDSpawnMobTimedPacket.target_time)
  return _internal_target_time();
}
inline void GDSpawnMobTimedPacket::_internal_set_target_time(int32_t value) {
  
  _impl_.target_time_ = value;
}
inline void GDSpawnMobTimedPacket::set_target_time(int32_t value) {
  _internal_set_target_time(value);
  // @@protoc_insertion_point(field_set:network.GDSpawnMobTimedPacket.target_time)
}

// int32 despawn_time = 7;
inline void GDSpawnMobTimedPacket::clear_despawn_time() {
  _impl_.despawn_time_ = 0;
}
inline int32_t GDSpawnMobTimedPacket::_internal_despawn_time() const {
  return _impl_.despawn_time_;
}
inline int32_t GDSpawnMobTimedPacket::despawn_time() const {
  // @@protoc_insertion_point(field_get:network.GDSpawnMobTimedPacket.despawn_time)
  return _internal_despawn_time();
}
inline void GDSpawnMobTimedPacket::_internal_set_despawn_time(int32_t value) {
  
  _impl_.despawn_time_ = value;
}
inline void GDSpawnMobTimedPacket::set_despawn_time(int32_t value) {
  _internal_set_despawn_time(value);
  // @@protoc_insertion_point(field_set:network.GDSpawnMobTimedPacket.despawn_time)
}

// -------------------------------------------------------------------

// GDForceItemDeletePacket

// uint32 id = 1;
inline void GDForceItemDeletePacket::clear_id() {
  _impl_.id_ = 0u;
}
inline uint32_t GDForceItemDeletePacket::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t GDForceItemDeletePacket::id() const {
  // @@protoc_insertion_point(field_get:network.GDForceItemDeletePacket.id)
  return _internal_id();
}
inline void GDForceItemDeletePacket::_internal_set_id(uint32_t value) {
  
  _impl_.id_ = value;
}
inline void GDForceItemDeletePacket::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:network.GDForceItemDeletePacket.id)
}

// -------------------------------------------------------------------

// GDCombatZoneSkillsCachePacket

// uint32 pid = 1;
inline void GDCombatZoneSkillsCachePacket::clear_pid() {
  _impl_.pid_ = 0u;
}
inline uint32_t GDCombatZoneSkillsCachePacket::_internal_pid() const {
  return _impl_.pid_;
}
inline uint32_t GDCombatZoneSkillsCachePacket::pid() const {
  // @@protoc_insertion_point(field_get:network.GDCombatZoneSkillsCachePacket.pid)
  return _internal_pid();
}
inline void GDCombatZoneSkillsCachePacket::_internal_set_pid(uint32_t value) {
  
  _impl_.pid_ = value;
}
inline void GDCombatZoneSkillsCachePacket::set_pid(uint32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:network.GDCombatZoneSkillsCachePacket.pid)
}

// uint32 skill_level1 = 2;
inline void GDCombatZoneSkillsCachePacket::clear_skill_level1() {
  _impl_.skill_level1_ = 0u;
}
inline uint32_t GDCombatZoneSkillsCachePacket::_internal_skill_level1() const {
  return _impl_.skill_level1_;
}
inline uint32_t GDCombatZoneSkillsCachePacket::skill_level1() const {
  // @@protoc_insertion_point(field_get:network.GDCombatZoneSkillsCachePacket.skill_level1)
  return _internal_skill_level1();
}
inline void GDCombatZoneSkillsCachePacket::_internal_set_skill_level1(uint32_t value) {
  
  _impl_.skill_level1_ = value;
}
inline void GDCombatZoneSkillsCachePacket::set_skill_level1(uint32_t value) {
  _internal_set_skill_level1(value);
  // @@protoc_insertion_point(field_set:network.GDCombatZoneSkillsCachePacket.skill_level1)
}

// uint32 skill_level2 = 3;
inline void GDCombatZoneSkillsCachePacket::clear_skill_level2() {
  _impl_.skill_level2_ = 0u;
}
inline uint32_t GDCombatZoneSkillsCachePacket::_internal_skill_level2() const {
  return _impl_.skill_level2_;
}
inline uint32_t GDCombatZoneSkillsCachePacket::skill_level2() const {
  // @@protoc_insertion_point(field_get:network.GDCombatZoneSkillsCachePacket.skill_level2)
  return _internal_skill_level2();
}
inline void GDCombatZoneSkillsCachePacket::_internal_set_skill_level2(uint32_t value) {
  
  _impl_.skill_level2_ = value;
}
inline void GDCombatZoneSkillsCachePacket::set_skill_level2(uint32_t value) {
  _internal_set_skill_level2(value);
  // @@protoc_insertion_point(field_set:network.GDCombatZoneSkillsCachePacket.skill_level2)
}

// uint32 skill_level3 = 4;
inline void GDCombatZoneSkillsCachePacket::clear_skill_level3() {
  _impl_.skill_level3_ = 0u;
}
inline uint32_t GDCombatZoneSkillsCachePacket::_internal_skill_level3() const {
  return _impl_.skill_level3_;
}
inline uint32_t GDCombatZoneSkillsCachePacket::skill_level3() const {
  // @@protoc_insertion_point(field_get:network.GDCombatZoneSkillsCachePacket.skill_level3)
  return _internal_skill_level3();
}
inline void GDCombatZoneSkillsCachePacket::_internal_set_skill_level3(uint32_t value) {
  
  _impl_.skill_level3_ = value;
}
inline void GDCombatZoneSkillsCachePacket::set_skill_level3(uint32_t value) {
  _internal_set_skill_level3(value);
  // @@protoc_insertion_point(field_set:network.GDCombatZoneSkillsCachePacket.skill_level3)
}

// uint32 skill_level4 = 5;
inline void GDCombatZoneSkillsCachePacket::clear_skill_level4() {
  _impl_.skill_level4_ = 0u;
}
inline uint32_t GDCombatZoneSkillsCachePacket::_internal_skill_level4() const {
  return _impl_.skill_level4_;
}
inline uint32_t GDCombatZoneSkillsCachePacket::skill_level4() const {
  // @@protoc_insertion_point(field_get:network.GDCombatZoneSkillsCachePacket.skill_level4)
  return _internal_skill_level4();
}
inline void GDCombatZoneSkillsCachePacket::_internal_set_skill_level4(uint32_t value) {
  
  _impl_.skill_level4_ = value;
}
inline void GDCombatZoneSkillsCachePacket::set_skill_level4(uint32_t value) {
  _internal_set_skill_level4(value);
  // @@protoc_insertion_point(field_set:network.GDCombatZoneSkillsCachePacket.skill_level4)
}

// uint32 skill_level5 = 6;
inline void GDCombatZoneSkillsCachePacket::clear_skill_level5() {
  _impl_.skill_level5_ = 0u;
}
inline uint32_t GDCombatZoneSkillsCachePacket::_internal_skill_level5() const {
  return _impl_.skill_level5_;
}
inline uint32_t GDCombatZoneSkillsCachePacket::skill_level5() const {
  // @@protoc_insertion_point(field_get:network.GDCombatZoneSkillsCachePacket.skill_level5)
  return _internal_skill_level5();
}
inline void GDCombatZoneSkillsCachePacket::_internal_set_skill_level5(uint32_t value) {
  
  _impl_.skill_level5_ = value;
}
inline void GDCombatZoneSkillsCachePacket::set_skill_level5(uint32_t value) {
  _internal_set_skill_level5(value);
  // @@protoc_insertion_point(field_set:network.GDCombatZoneSkillsCachePacket.skill_level5)
}

// uint32 skill_level6 = 7;
inline void GDCombatZoneSkillsCachePacket::clear_skill_level6() {
  _impl_.skill_level6_ = 0u;
}
inline uint32_t GDCombatZoneSkillsCachePacket::_internal_skill_level6() const {
  return _impl_.skill_level6_;
}
inline uint32_t GDCombatZoneSkillsCachePacket::skill_level6() const {
  // @@protoc_insertion_point(field_get:network.GDCombatZoneSkillsCachePacket.skill_level6)
  return _internal_skill_level6();
}
inline void GDCombatZoneSkillsCachePacket::_internal_set_skill_level6(uint32_t value) {
  
  _impl_.skill_level6_ = value;
}
inline void GDCombatZoneSkillsCachePacket::set_skill_level6(uint32_t value) {
  _internal_set_skill_level6(value);
  // @@protoc_insertion_point(field_set:network.GDCombatZoneSkillsCachePacket.skill_level6)
}

// -------------------------------------------------------------------

// GDWhisperPlayerExistCheckPacket

// uint32 pid = 1;
inline void GDWhisperPlayerExistCheckPacket::clear_pid() {
  _impl_.pid_ = 0u;
}
inline uint32_t GDWhisperPlayerExistCheckPacket::_internal_pid() const {
  return _impl_.pid_;
}
inline uint32_t GDWhisperPlayerExistCheckPacket::pid() const {
  // @@protoc_insertion_point(field_get:network.GDWhisperPlayerExistCheckPacket.pid)
  return _internal_pid();
}
inline void GDWhisperPlayerExistCheckPacket::_internal_set_pid(uint32_t value) {
  
  _impl_.pid_ = value;
}
inline void GDWhisperPlayerExistCheckPacket::set_pid(uint32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:network.GDWhisperPlayerExistCheckPacket.pid)
}

// bool is_gm = 2;
inline void GDWhisperPlayerExistCheckPacket::clear_is_gm() {
  _impl_.is_gm_ = false;
}
inline bool GDWhisperPlayerExistCheckPacket::_internal_is_gm() const {
  return _impl_.is_gm_;
}
inline bool GDWhisperPlayerExistCheckPacket::is_gm() const {
  // @@protoc_insertion_point(field_get:network.GDWhisperPlayerExistCheckPacket.is_gm)
  return _internal_is_gm();
}
inline void GDWhisperPlayerExistCheckPacket::_internal_set_is_gm(bool value) {
  
  _impl_.is_gm_ = value;
}
inline void GDWhisperPlayerExistCheckPacket::set_is_gm(bool value) {
  _internal_set_is_gm(value);
  // @@protoc_insertion_point(field_set:network.GDWhisperPlayerExistCheckPacket.is_gm)
}

// bytes target_name = 3;
inline void GDWhisperPlayerExistCheckPacket::clear_target_name() {
  _impl_.target_name_.ClearToEmpty();
}
inline const std::string& GDWhisperPlayerExistCheckPacket::target_name() const {
  // @@protoc_insertion_point(field_get:network.GDWhisperPlayerExistCheckPacket.target_name)
  return _internal_target_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GDWhisperPlayerExistCheckPacket::set_target_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.target_name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GDWhisperPlayerExistCheckPacket.target_name)
}
inline std::string* GDWhisperPlayerExistCheckPacket::mutable_target_name() {
  std::string* _s = _internal_mutable_target_name();
  // @@protoc_insertion_point(field_mutable:network.GDWhisperPlayerExistCheckPacket.target_name)
  return _s;
}
inline const std::string& GDWhisperPlayerExistCheckPacket::_internal_target_name() const {
  return _impl_.target_name_.Get();
}
inline void GDWhisperPlayerExistCheckPacket::_internal_set_target_name(const std::string& value) {
  
  _impl_.target_name_.Set(value, GetArenaForAllocation());
}
inline std::string* GDWhisperPlayerExistCheckPacket::_internal_mutable_target_name() {
  
  return _impl_.target_name_.Mutable(GetArenaForAllocation());
}
inline std::string* GDWhisperPlayerExistCheckPacket::release_target_name() {
  // @@protoc_insertion_point(field_release:network.GDWhisperPlayerExistCheckPacket.target_name)
  return _impl_.target_name_.Release();
}
inline void GDWhisperPlayerExistCheckPacket::set_allocated_target_name(std::string* target_name) {
  if (target_name != nullptr) {
    
  } else {
    
  }
  _impl_.target_name_.SetAllocated(target_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.target_name_.IsDefault()) {
    _impl_.target_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GDWhisperPlayerExistCheckPacket.target_name)
}

// bytes message = 4;
inline void GDWhisperPlayerExistCheckPacket::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& GDWhisperPlayerExistCheckPacket::message() const {
  // @@protoc_insertion_point(field_get:network.GDWhisperPlayerExistCheckPacket.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GDWhisperPlayerExistCheckPacket::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GDWhisperPlayerExistCheckPacket.message)
}
inline std::string* GDWhisperPlayerExistCheckPacket::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:network.GDWhisperPlayerExistCheckPacket.message)
  return _s;
}
inline const std::string& GDWhisperPlayerExistCheckPacket::_internal_message() const {
  return _impl_.message_.Get();
}
inline void GDWhisperPlayerExistCheckPacket::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* GDWhisperPlayerExistCheckPacket::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* GDWhisperPlayerExistCheckPacket::release_message() {
  // @@protoc_insertion_point(field_release:network.GDWhisperPlayerExistCheckPacket.message)
  return _impl_.message_.Release();
}
inline void GDWhisperPlayerExistCheckPacket::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GDWhisperPlayerExistCheckPacket.message)
}

// -------------------------------------------------------------------

// GDWhisperPlayerMessageOfflinePacket

// uint32 pid = 1;
inline void GDWhisperPlayerMessageOfflinePacket::clear_pid() {
  _impl_.pid_ = 0u;
}
inline uint32_t GDWhisperPlayerMessageOfflinePacket::_internal_pid() const {
  return _impl_.pid_;
}
inline uint32_t GDWhisperPlayerMessageOfflinePacket::pid() const {
  // @@protoc_insertion_point(field_get:network.GDWhisperPlayerMessageOfflinePacket.pid)
  return _internal_pid();
}
inline void GDWhisperPlayerMessageOfflinePacket::_internal_set_pid(uint32_t value) {
  
  _impl_.pid_ = value;
}
inline void GDWhisperPlayerMessageOfflinePacket::set_pid(uint32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:network.GDWhisperPlayerMessageOfflinePacket.pid)
}

// bool is_gm = 2;
inline void GDWhisperPlayerMessageOfflinePacket::clear_is_gm() {
  _impl_.is_gm_ = false;
}
inline bool GDWhisperPlayerMessageOfflinePacket::_internal_is_gm() const {
  return _impl_.is_gm_;
}
inline bool GDWhisperPlayerMessageOfflinePacket::is_gm() const {
  // @@protoc_insertion_point(field_get:network.GDWhisperPlayerMessageOfflinePacket.is_gm)
  return _internal_is_gm();
}
inline void GDWhisperPlayerMessageOfflinePacket::_internal_set_is_gm(bool value) {
  
  _impl_.is_gm_ = value;
}
inline void GDWhisperPlayerMessageOfflinePacket::set_is_gm(bool value) {
  _internal_set_is_gm(value);
  // @@protoc_insertion_point(field_set:network.GDWhisperPlayerMessageOfflinePacket.is_gm)
}

// bytes name = 3;
inline void GDWhisperPlayerMessageOfflinePacket::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GDWhisperPlayerMessageOfflinePacket::name() const {
  // @@protoc_insertion_point(field_get:network.GDWhisperPlayerMessageOfflinePacket.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GDWhisperPlayerMessageOfflinePacket::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GDWhisperPlayerMessageOfflinePacket.name)
}
inline std::string* GDWhisperPlayerMessageOfflinePacket::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:network.GDWhisperPlayerMessageOfflinePacket.name)
  return _s;
}
inline const std::string& GDWhisperPlayerMessageOfflinePacket::_internal_name() const {
  return _impl_.name_.Get();
}
inline void GDWhisperPlayerMessageOfflinePacket::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* GDWhisperPlayerMessageOfflinePacket::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* GDWhisperPlayerMessageOfflinePacket::release_name() {
  // @@protoc_insertion_point(field_release:network.GDWhisperPlayerMessageOfflinePacket.name)
  return _impl_.name_.Release();
}
inline void GDWhisperPlayerMessageOfflinePacket::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GDWhisperPlayerMessageOfflinePacket.name)
}

// bytes target_name = 4;
inline void GDWhisperPlayerMessageOfflinePacket::clear_target_name() {
  _impl_.target_name_.ClearToEmpty();
}
inline const std::string& GDWhisperPlayerMessageOfflinePacket::target_name() const {
  // @@protoc_insertion_point(field_get:network.GDWhisperPlayerMessageOfflinePacket.target_name)
  return _internal_target_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GDWhisperPlayerMessageOfflinePacket::set_target_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.target_name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GDWhisperPlayerMessageOfflinePacket.target_name)
}
inline std::string* GDWhisperPlayerMessageOfflinePacket::mutable_target_name() {
  std::string* _s = _internal_mutable_target_name();
  // @@protoc_insertion_point(field_mutable:network.GDWhisperPlayerMessageOfflinePacket.target_name)
  return _s;
}
inline const std::string& GDWhisperPlayerMessageOfflinePacket::_internal_target_name() const {
  return _impl_.target_name_.Get();
}
inline void GDWhisperPlayerMessageOfflinePacket::_internal_set_target_name(const std::string& value) {
  
  _impl_.target_name_.Set(value, GetArenaForAllocation());
}
inline std::string* GDWhisperPlayerMessageOfflinePacket::_internal_mutable_target_name() {
  
  return _impl_.target_name_.Mutable(GetArenaForAllocation());
}
inline std::string* GDWhisperPlayerMessageOfflinePacket::release_target_name() {
  // @@protoc_insertion_point(field_release:network.GDWhisperPlayerMessageOfflinePacket.target_name)
  return _impl_.target_name_.Release();
}
inline void GDWhisperPlayerMessageOfflinePacket::set_allocated_target_name(std::string* target_name) {
  if (target_name != nullptr) {
    
  } else {
    
  }
  _impl_.target_name_.SetAllocated(target_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.target_name_.IsDefault()) {
    _impl_.target_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GDWhisperPlayerMessageOfflinePacket.target_name)
}

// bytes message = 5;
inline void GDWhisperPlayerMessageOfflinePacket::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& GDWhisperPlayerMessageOfflinePacket::message() const {
  // @@protoc_insertion_point(field_get:network.GDWhisperPlayerMessageOfflinePacket.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GDWhisperPlayerMessageOfflinePacket::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GDWhisperPlayerMessageOfflinePacket.message)
}
inline std::string* GDWhisperPlayerMessageOfflinePacket::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:network.GDWhisperPlayerMessageOfflinePacket.message)
  return _s;
}
inline const std::string& GDWhisperPlayerMessageOfflinePacket::_internal_message() const {
  return _impl_.message_.Get();
}
inline void GDWhisperPlayerMessageOfflinePacket::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* GDWhisperPlayerMessageOfflinePacket::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* GDWhisperPlayerMessageOfflinePacket::release_message() {
  // @@protoc_insertion_point(field_release:network.GDWhisperPlayerMessageOfflinePacket.message)
  return _impl_.message_.Release();
}
inline void GDWhisperPlayerMessageOfflinePacket::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GDWhisperPlayerMessageOfflinePacket.message)
}

// -------------------------------------------------------------------

// GDLoadItemRefundPacket

// uint32 pid = 1;
inline void GDLoadItemRefundPacket::clear_pid() {
  _impl_.pid_ = 0u;
}
inline uint32_t GDLoadItemRefundPacket::_internal_pid() const {
  return _impl_.pid_;
}
inline uint32_t GDLoadItemRefundPacket::pid() const {
  // @@protoc_insertion_point(field_get:network.GDLoadItemRefundPacket.pid)
  return _internal_pid();
}
inline void GDLoadItemRefundPacket::_internal_set_pid(uint32_t value) {
  
  _impl_.pid_ = value;
}
inline void GDLoadItemRefundPacket::set_pid(uint32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:network.GDLoadItemRefundPacket.pid)
}

// -------------------------------------------------------------------

// GDItemDestroyLogPacket

// .network.TItemData item = 1;
inline bool GDItemDestroyLogPacket::_internal_has_item() const {
  return this != internal_default_instance() && _impl_.item_ != nullptr;
}
inline bool GDItemDestroyLogPacket::has_item() const {
  return _internal_has_item();
}
inline const ::network::TItemData& GDItemDestroyLogPacket::_internal_item() const {
  const ::network::TItemData* p = _impl_.item_;
  return p != nullptr ? *p : reinterpret_cast<const ::network::TItemData&>(
      ::network::_TItemData_default_instance_);
}
inline const ::network::TItemData& GDItemDestroyLogPacket::item() const {
  // @@protoc_insertion_point(field_get:network.GDItemDestroyLogPacket.item)
  return _internal_item();
}
inline void GDItemDestroyLogPacket::unsafe_arena_set_allocated_item(
    ::network::TItemData* item) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.item_);
  }
  _impl_.item_ = item;
  if (item) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:network.GDItemDestroyLogPacket.item)
}
inline ::network::TItemData* GDItemDestroyLogPacket::release_item() {
  
  ::network::TItemData* temp = _impl_.item_;
  _impl_.item_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::network::TItemData* GDItemDestroyLogPacket::unsafe_arena_release_item() {
  // @@protoc_insertion_point(field_release:network.GDItemDestroyLogPacket.item)
  
  ::network::TItemData* temp = _impl_.item_;
  _impl_.item_ = nullptr;
  return temp;
}
inline ::network::TItemData* GDItemDestroyLogPacket::_internal_mutable_item() {
  
  if (_impl_.item_ == nullptr) {
    auto* p = CreateMaybeMessage<::network::TItemData>(GetArenaForAllocation());
    _impl_.item_ = p;
  }
  return _impl_.item_;
}
inline ::network::TItemData* GDItemDestroyLogPacket::mutable_item() {
  ::network::TItemData* _msg = _internal_mutable_item();
  // @@protoc_insertion_point(field_mutable:network.GDItemDestroyLogPacket.item)
  return _msg;
}
inline void GDItemDestroyLogPacket::set_allocated_item(::network::TItemData* item) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.item_);
  }
  if (item) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(item));
    if (message_arena != submessage_arena) {
      item = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, item, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.item_ = item;
  // @@protoc_insertion_point(field_set_allocated:network.GDItemDestroyLogPacket.item)
}

// uint32 type = 2;
inline void GDItemDestroyLogPacket::clear_type() {
  _impl_.type_ = 0u;
}
inline uint32_t GDItemDestroyLogPacket::_internal_type() const {
  return _impl_.type_;
}
inline uint32_t GDItemDestroyLogPacket::type() const {
  // @@protoc_insertion_point(field_get:network.GDItemDestroyLogPacket.type)
  return _internal_type();
}
inline void GDItemDestroyLogPacket::_internal_set_type(uint32_t value) {
  
  _impl_.type_ = value;
}
inline void GDItemDestroyLogPacket::set_type(uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:network.GDItemDestroyLogPacket.type)
}

// -------------------------------------------------------------------

// GDItemTimedIgnorePacket

// uint32 item_id = 1;
inline void GDItemTimedIgnorePacket::clear_item_id() {
  _impl_.item_id_ = 0u;
}
inline uint32_t GDItemTimedIgnorePacket::_internal_item_id() const {
  return _impl_.item_id_;
}
inline uint32_t GDItemTimedIgnorePacket::item_id() const {
  // @@protoc_insertion_point(field_get:network.GDItemTimedIgnorePacket.item_id)
  return _internal_item_id();
}
inline void GDItemTimedIgnorePacket::_internal_set_item_id(uint32_t value) {
  
  _impl_.item_id_ = value;
}
inline void GDItemTimedIgnorePacket::set_item_id(uint32_t value) {
  _internal_set_item_id(value);
  // @@protoc_insertion_point(field_set:network.GDItemTimedIgnorePacket.item_id)
}

// uint32 ignore_duration = 2;
inline void GDItemTimedIgnorePacket::clear_ignore_duration() {
  _impl_.ignore_duration_ = 0u;
}
inline uint32_t GDItemTimedIgnorePacket::_internal_ignore_duration() const {
  return _impl_.ignore_duration_;
}
inline uint32_t GDItemTimedIgnorePacket::ignore_duration() const {
  // @@protoc_insertion_point(field_get:network.GDItemTimedIgnorePacket.ignore_duration)
  return _internal_ignore_duration();
}
inline void GDItemTimedIgnorePacket::_internal_set_ignore_duration(uint32_t value) {
  
  _impl_.ignore_duration_ = value;
}
inline void GDItemTimedIgnorePacket::set_ignore_duration(uint32_t value) {
  _internal_set_ignore_duration(value);
  // @@protoc_insertion_point(field_set:network.GDItemTimedIgnorePacket.ignore_duration)
}

// -------------------------------------------------------------------

// GDMarriageAddPacket

// uint32 pid1 = 1;
inline void GDMarriageAddPacket::clear_pid1() {
  _impl_.pid1_ = 0u;
}
inline uint32_t GDMarriageAddPacket::_internal_pid1() const {
  return _impl_.pid1_;
}
inline uint32_t GDMarriageAddPacket::pid1() const {
  // @@protoc_insertion_point(field_get:network.GDMarriageAddPacket.pid1)
  return _internal_pid1();
}
inline void GDMarriageAddPacket::_internal_set_pid1(uint32_t value) {
  
  _impl_.pid1_ = value;
}
inline void GDMarriageAddPacket::set_pid1(uint32_t value) {
  _internal_set_pid1(value);
  // @@protoc_insertion_point(field_set:network.GDMarriageAddPacket.pid1)
}

// uint32 pid2 = 2;
inline void GDMarriageAddPacket::clear_pid2() {
  _impl_.pid2_ = 0u;
}
inline uint32_t GDMarriageAddPacket::_internal_pid2() const {
  return _impl_.pid2_;
}
inline uint32_t GDMarriageAddPacket::pid2() const {
  // @@protoc_insertion_point(field_get:network.GDMarriageAddPacket.pid2)
  return _internal_pid2();
}
inline void GDMarriageAddPacket::_internal_set_pid2(uint32_t value) {
  
  _impl_.pid2_ = value;
}
inline void GDMarriageAddPacket::set_pid2(uint32_t value) {
  _internal_set_pid2(value);
  // @@protoc_insertion_point(field_set:network.GDMarriageAddPacket.pid2)
}

// uint32 marry_time = 3;
inline void GDMarriageAddPacket::clear_marry_time() {
  _impl_.marry_time_ = 0u;
}
inline uint32_t GDMarriageAddPacket::_internal_marry_time() const {
  return _impl_.marry_time_;
}
inline uint32_t GDMarriageAddPacket::marry_time() const {
  // @@protoc_insertion_point(field_get:network.GDMarriageAddPacket.marry_time)
  return _internal_marry_time();
}
inline void GDMarriageAddPacket::_internal_set_marry_time(uint32_t value) {
  
  _impl_.marry_time_ = value;
}
inline void GDMarriageAddPacket::set_marry_time(uint32_t value) {
  _internal_set_marry_time(value);
  // @@protoc_insertion_point(field_set:network.GDMarriageAddPacket.marry_time)
}

// bytes name1 = 4;
inline void GDMarriageAddPacket::clear_name1() {
  _impl_.name1_.ClearToEmpty();
}
inline const std::string& GDMarriageAddPacket::name1() const {
  // @@protoc_insertion_point(field_get:network.GDMarriageAddPacket.name1)
  return _internal_name1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GDMarriageAddPacket::set_name1(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name1_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GDMarriageAddPacket.name1)
}
inline std::string* GDMarriageAddPacket::mutable_name1() {
  std::string* _s = _internal_mutable_name1();
  // @@protoc_insertion_point(field_mutable:network.GDMarriageAddPacket.name1)
  return _s;
}
inline const std::string& GDMarriageAddPacket::_internal_name1() const {
  return _impl_.name1_.Get();
}
inline void GDMarriageAddPacket::_internal_set_name1(const std::string& value) {
  
  _impl_.name1_.Set(value, GetArenaForAllocation());
}
inline std::string* GDMarriageAddPacket::_internal_mutable_name1() {
  
  return _impl_.name1_.Mutable(GetArenaForAllocation());
}
inline std::string* GDMarriageAddPacket::release_name1() {
  // @@protoc_insertion_point(field_release:network.GDMarriageAddPacket.name1)
  return _impl_.name1_.Release();
}
inline void GDMarriageAddPacket::set_allocated_name1(std::string* name1) {
  if (name1 != nullptr) {
    
  } else {
    
  }
  _impl_.name1_.SetAllocated(name1, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name1_.IsDefault()) {
    _impl_.name1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GDMarriageAddPacket.name1)
}

// bytes name2 = 5;
inline void GDMarriageAddPacket::clear_name2() {
  _impl_.name2_.ClearToEmpty();
}
inline const std::string& GDMarriageAddPacket::name2() const {
  // @@protoc_insertion_point(field_get:network.GDMarriageAddPacket.name2)
  return _internal_name2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GDMarriageAddPacket::set_name2(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name2_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GDMarriageAddPacket.name2)
}
inline std::string* GDMarriageAddPacket::mutable_name2() {
  std::string* _s = _internal_mutable_name2();
  // @@protoc_insertion_point(field_mutable:network.GDMarriageAddPacket.name2)
  return _s;
}
inline const std::string& GDMarriageAddPacket::_internal_name2() const {
  return _impl_.name2_.Get();
}
inline void GDMarriageAddPacket::_internal_set_name2(const std::string& value) {
  
  _impl_.name2_.Set(value, GetArenaForAllocation());
}
inline std::string* GDMarriageAddPacket::_internal_mutable_name2() {
  
  return _impl_.name2_.Mutable(GetArenaForAllocation());
}
inline std::string* GDMarriageAddPacket::release_name2() {
  // @@protoc_insertion_point(field_release:network.GDMarriageAddPacket.name2)
  return _impl_.name2_.Release();
}
inline void GDMarriageAddPacket::set_allocated_name2(std::string* name2) {
  if (name2 != nullptr) {
    
  } else {
    
  }
  _impl_.name2_.SetAllocated(name2, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name2_.IsDefault()) {
    _impl_.name2_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GDMarriageAddPacket.name2)
}

// -------------------------------------------------------------------

// GDMarriageUpdatePacket

// uint32 pid1 = 1;
inline void GDMarriageUpdatePacket::clear_pid1() {
  _impl_.pid1_ = 0u;
}
inline uint32_t GDMarriageUpdatePacket::_internal_pid1() const {
  return _impl_.pid1_;
}
inline uint32_t GDMarriageUpdatePacket::pid1() const {
  // @@protoc_insertion_point(field_get:network.GDMarriageUpdatePacket.pid1)
  return _internal_pid1();
}
inline void GDMarriageUpdatePacket::_internal_set_pid1(uint32_t value) {
  
  _impl_.pid1_ = value;
}
inline void GDMarriageUpdatePacket::set_pid1(uint32_t value) {
  _internal_set_pid1(value);
  // @@protoc_insertion_point(field_set:network.GDMarriageUpdatePacket.pid1)
}

// uint32 pid2 = 2;
inline void GDMarriageUpdatePacket::clear_pid2() {
  _impl_.pid2_ = 0u;
}
inline uint32_t GDMarriageUpdatePacket::_internal_pid2() const {
  return _impl_.pid2_;
}
inline uint32_t GDMarriageUpdatePacket::pid2() const {
  // @@protoc_insertion_point(field_get:network.GDMarriageUpdatePacket.pid2)
  return _internal_pid2();
}
inline void GDMarriageUpdatePacket::_internal_set_pid2(uint32_t value) {
  
  _impl_.pid2_ = value;
}
inline void GDMarriageUpdatePacket::set_pid2(uint32_t value) {
  _internal_set_pid2(value);
  // @@protoc_insertion_point(field_set:network.GDMarriageUpdatePacket.pid2)
}

// int32 love_point = 3;
inline void GDMarriageUpdatePacket::clear_love_point() {
  _impl_.love_point_ = 0;
}
inline int32_t GDMarriageUpdatePacket::_internal_love_point() const {
  return _impl_.love_point_;
}
inline int32_t GDMarriageUpdatePacket::love_point() const {
  // @@protoc_insertion_point(field_get:network.GDMarriageUpdatePacket.love_point)
  return _internal_love_point();
}
inline void GDMarriageUpdatePacket::_internal_set_love_point(int32_t value) {
  
  _impl_.love_point_ = value;
}
inline void GDMarriageUpdatePacket::set_love_point(int32_t value) {
  _internal_set_love_point(value);
  // @@protoc_insertion_point(field_set:network.GDMarriageUpdatePacket.love_point)
}

// bool married = 4;
inline void GDMarriageUpdatePacket::clear_married() {
  _impl_.married_ = false;
}
inline bool GDMarriageUpdatePacket::_internal_married() const {
  return _impl_.married_;
}
inline bool GDMarriageUpdatePacket::married() const {
  // @@protoc_insertion_point(field_get:network.GDMarriageUpdatePacket.married)
  return _internal_married();
}
inline void GDMarriageUpdatePacket::_internal_set_married(bool value) {
  
  _impl_.married_ = value;
}
inline void GDMarriageUpdatePacket::set_married(bool value) {
  _internal_set_married(value);
  // @@protoc_insertion_point(field_set:network.GDMarriageUpdatePacket.married)
}

// -------------------------------------------------------------------

// GDMarriageRemovePacket

// uint32 pid1 = 1;
inline void GDMarriageRemovePacket::clear_pid1() {
  _impl_.pid1_ = 0u;
}
inline uint32_t GDMarriageRemovePacket::_internal_pid1() const {
  return _impl_.pid1_;
}
inline uint32_t GDMarriageRemovePacket::pid1() const {
  // @@protoc_insertion_point(field_get:network.GDMarriageRemovePacket.pid1)
  return _internal_pid1();
}
inline void GDMarriageRemovePacket::_internal_set_pid1(uint32_t value) {
  
  _impl_.pid1_ = value;
}
inline void GDMarriageRemovePacket::set_pid1(uint32_t value) {
  _internal_set_pid1(value);
  // @@protoc_insertion_point(field_set:network.GDMarriageRemovePacket.pid1)
}

// uint32 pid2 = 2;
inline void GDMarriageRemovePacket::clear_pid2() {
  _impl_.pid2_ = 0u;
}
inline uint32_t GDMarriageRemovePacket::_internal_pid2() const {
  return _impl_.pid2_;
}
inline uint32_t GDMarriageRemovePacket::pid2() const {
  // @@protoc_insertion_point(field_get:network.GDMarriageRemovePacket.pid2)
  return _internal_pid2();
}
inline void GDMarriageRemovePacket::_internal_set_pid2(uint32_t value) {
  
  _impl_.pid2_ = value;
}
inline void GDMarriageRemovePacket::set_pid2(uint32_t value) {
  _internal_set_pid2(value);
  // @@protoc_insertion_point(field_set:network.GDMarriageRemovePacket.pid2)
}

// -------------------------------------------------------------------

// GDMarriageBreakPacket

// uint32 pid1 = 1;
inline void GDMarriageBreakPacket::clear_pid1() {
  _impl_.pid1_ = 0u;
}
inline uint32_t GDMarriageBreakPacket::_internal_pid1() const {
  return _impl_.pid1_;
}
inline uint32_t GDMarriageBreakPacket::pid1() const {
  // @@protoc_insertion_point(field_get:network.GDMarriageBreakPacket.pid1)
  return _internal_pid1();
}
inline void GDMarriageBreakPacket::_internal_set_pid1(uint32_t value) {
  
  _impl_.pid1_ = value;
}
inline void GDMarriageBreakPacket::set_pid1(uint32_t value) {
  _internal_set_pid1(value);
  // @@protoc_insertion_point(field_set:network.GDMarriageBreakPacket.pid1)
}

// uint32 pid2 = 2;
inline void GDMarriageBreakPacket::clear_pid2() {
  _impl_.pid2_ = 0u;
}
inline uint32_t GDMarriageBreakPacket::_internal_pid2() const {
  return _impl_.pid2_;
}
inline uint32_t GDMarriageBreakPacket::pid2() const {
  // @@protoc_insertion_point(field_get:network.GDMarriageBreakPacket.pid2)
  return _internal_pid2();
}
inline void GDMarriageBreakPacket::_internal_set_pid2(uint32_t value) {
  
  _impl_.pid2_ = value;
}
inline void GDMarriageBreakPacket::set_pid2(uint32_t value) {
  _internal_set_pid2(value);
  // @@protoc_insertion_point(field_set:network.GDMarriageBreakPacket.pid2)
}

// -------------------------------------------------------------------

// GDWeddingRequestPacket

// uint32 pid1 = 1;
inline void GDWeddingRequestPacket::clear_pid1() {
  _impl_.pid1_ = 0u;
}
inline uint32_t GDWeddingRequestPacket::_internal_pid1() const {
  return _impl_.pid1_;
}
inline uint32_t GDWeddingRequestPacket::pid1() const {
  // @@protoc_insertion_point(field_get:network.GDWeddingRequestPacket.pid1)
  return _internal_pid1();
}
inline void GDWeddingRequestPacket::_internal_set_pid1(uint32_t value) {
  
  _impl_.pid1_ = value;
}
inline void GDWeddingRequestPacket::set_pid1(uint32_t value) {
  _internal_set_pid1(value);
  // @@protoc_insertion_point(field_set:network.GDWeddingRequestPacket.pid1)
}

// uint32 pid2 = 2;
inline void GDWeddingRequestPacket::clear_pid2() {
  _impl_.pid2_ = 0u;
}
inline uint32_t GDWeddingRequestPacket::_internal_pid2() const {
  return _impl_.pid2_;
}
inline uint32_t GDWeddingRequestPacket::pid2() const {
  // @@protoc_insertion_point(field_get:network.GDWeddingRequestPacket.pid2)
  return _internal_pid2();
}
inline void GDWeddingRequestPacket::_internal_set_pid2(uint32_t value) {
  
  _impl_.pid2_ = value;
}
inline void GDWeddingRequestPacket::set_pid2(uint32_t value) {
  _internal_set_pid2(value);
  // @@protoc_insertion_point(field_set:network.GDWeddingRequestPacket.pid2)
}

// -------------------------------------------------------------------

// GDWeddingReadyPacket

// uint32 pid1 = 1;
inline void GDWeddingReadyPacket::clear_pid1() {
  _impl_.pid1_ = 0u;
}
inline uint32_t GDWeddingReadyPacket::_internal_pid1() const {
  return _impl_.pid1_;
}
inline uint32_t GDWeddingReadyPacket::pid1() const {
  // @@protoc_insertion_point(field_get:network.GDWeddingReadyPacket.pid1)
  return _internal_pid1();
}
inline void GDWeddingReadyPacket::_internal_set_pid1(uint32_t value) {
  
  _impl_.pid1_ = value;
}
inline void GDWeddingReadyPacket::set_pid1(uint32_t value) {
  _internal_set_pid1(value);
  // @@protoc_insertion_point(field_set:network.GDWeddingReadyPacket.pid1)
}

// uint32 pid2 = 2;
inline void GDWeddingReadyPacket::clear_pid2() {
  _impl_.pid2_ = 0u;
}
inline uint32_t GDWeddingReadyPacket::_internal_pid2() const {
  return _impl_.pid2_;
}
inline uint32_t GDWeddingReadyPacket::pid2() const {
  // @@protoc_insertion_point(field_get:network.GDWeddingReadyPacket.pid2)
  return _internal_pid2();
}
inline void GDWeddingReadyPacket::_internal_set_pid2(uint32_t value) {
  
  _impl_.pid2_ = value;
}
inline void GDWeddingReadyPacket::set_pid2(uint32_t value) {
  _internal_set_pid2(value);
  // @@protoc_insertion_point(field_set:network.GDWeddingReadyPacket.pid2)
}

// uint32 map_index = 3;
inline void GDWeddingReadyPacket::clear_map_index() {
  _impl_.map_index_ = 0u;
}
inline uint32_t GDWeddingReadyPacket::_internal_map_index() const {
  return _impl_.map_index_;
}
inline uint32_t GDWeddingReadyPacket::map_index() const {
  // @@protoc_insertion_point(field_get:network.GDWeddingReadyPacket.map_index)
  return _internal_map_index();
}
inline void GDWeddingReadyPacket::_internal_set_map_index(uint32_t value) {
  
  _impl_.map_index_ = value;
}
inline void GDWeddingReadyPacket::set_map_index(uint32_t value) {
  _internal_set_map_index(value);
  // @@protoc_insertion_point(field_set:network.GDWeddingReadyPacket.map_index)
}

// -------------------------------------------------------------------

// GDWeddingEndPacket

// uint32 pid1 = 1;
inline void GDWeddingEndPacket::clear_pid1() {
  _impl_.pid1_ = 0u;
}
inline uint32_t GDWeddingEndPacket::_internal_pid1() const {
  return _impl_.pid1_;
}
inline uint32_t GDWeddingEndPacket::pid1() const {
  // @@protoc_insertion_point(field_get:network.GDWeddingEndPacket.pid1)
  return _internal_pid1();
}
inline void GDWeddingEndPacket::_internal_set_pid1(uint32_t value) {
  
  _impl_.pid1_ = value;
}
inline void GDWeddingEndPacket::set_pid1(uint32_t value) {
  _internal_set_pid1(value);
  // @@protoc_insertion_point(field_set:network.GDWeddingEndPacket.pid1)
}

// uint32 pid2 = 2;
inline void GDWeddingEndPacket::clear_pid2() {
  _impl_.pid2_ = 0u;
}
inline uint32_t GDWeddingEndPacket::_internal_pid2() const {
  return _impl_.pid2_;
}
inline uint32_t GDWeddingEndPacket::pid2() const {
  // @@protoc_insertion_point(field_get:network.GDWeddingEndPacket.pid2)
  return _internal_pid2();
}
inline void GDWeddingEndPacket::_internal_set_pid2(uint32_t value) {
  
  _impl_.pid2_ = value;
}
inline void GDWeddingEndPacket::set_pid2(uint32_t value) {
  _internal_set_pid2(value);
  // @@protoc_insertion_point(field_set:network.GDWeddingEndPacket.pid2)
}

// -------------------------------------------------------------------

// GDPartyCreatePacket

// uint32 leader_pid = 1;
inline void GDPartyCreatePacket::clear_leader_pid() {
  _impl_.leader_pid_ = 0u;
}
inline uint32_t GDPartyCreatePacket::_internal_leader_pid() const {
  return _impl_.leader_pid_;
}
inline uint32_t GDPartyCreatePacket::leader_pid() const {
  // @@protoc_insertion_point(field_get:network.GDPartyCreatePacket.leader_pid)
  return _internal_leader_pid();
}
inline void GDPartyCreatePacket::_internal_set_leader_pid(uint32_t value) {
  
  _impl_.leader_pid_ = value;
}
inline void GDPartyCreatePacket::set_leader_pid(uint32_t value) {
  _internal_set_leader_pid(value);
  // @@protoc_insertion_point(field_set:network.GDPartyCreatePacket.leader_pid)
}

// -------------------------------------------------------------------

// GDPartyDeletePacket

// uint32 leader_pid = 1;
inline void GDPartyDeletePacket::clear_leader_pid() {
  _impl_.leader_pid_ = 0u;
}
inline uint32_t GDPartyDeletePacket::_internal_leader_pid() const {
  return _impl_.leader_pid_;
}
inline uint32_t GDPartyDeletePacket::leader_pid() const {
  // @@protoc_insertion_point(field_get:network.GDPartyDeletePacket.leader_pid)
  return _internal_leader_pid();
}
inline void GDPartyDeletePacket::_internal_set_leader_pid(uint32_t value) {
  
  _impl_.leader_pid_ = value;
}
inline void GDPartyDeletePacket::set_leader_pid(uint32_t value) {
  _internal_set_leader_pid(value);
  // @@protoc_insertion_point(field_set:network.GDPartyDeletePacket.leader_pid)
}

// -------------------------------------------------------------------

// GDPartyAddPacket

// uint32 leader_pid = 1;
inline void GDPartyAddPacket::clear_leader_pid() {
  _impl_.leader_pid_ = 0u;
}
inline uint32_t GDPartyAddPacket::_internal_leader_pid() const {
  return _impl_.leader_pid_;
}
inline uint32_t GDPartyAddPacket::leader_pid() const {
  // @@protoc_insertion_point(field_get:network.GDPartyAddPacket.leader_pid)
  return _internal_leader_pid();
}
inline void GDPartyAddPacket::_internal_set_leader_pid(uint32_t value) {
  
  _impl_.leader_pid_ = value;
}
inline void GDPartyAddPacket::set_leader_pid(uint32_t value) {
  _internal_set_leader_pid(value);
  // @@protoc_insertion_point(field_set:network.GDPartyAddPacket.leader_pid)
}

// uint32 pid = 2;
inline void GDPartyAddPacket::clear_pid() {
  _impl_.pid_ = 0u;
}
inline uint32_t GDPartyAddPacket::_internal_pid() const {
  return _impl_.pid_;
}
inline uint32_t GDPartyAddPacket::pid() const {
  // @@protoc_insertion_point(field_get:network.GDPartyAddPacket.pid)
  return _internal_pid();
}
inline void GDPartyAddPacket::_internal_set_pid(uint32_t value) {
  
  _impl_.pid_ = value;
}
inline void GDPartyAddPacket::set_pid(uint32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:network.GDPartyAddPacket.pid)
}

// uint32 state = 3;
inline void GDPartyAddPacket::clear_state() {
  _impl_.state_ = 0u;
}
inline uint32_t GDPartyAddPacket::_internal_state() const {
  return _impl_.state_;
}
inline uint32_t GDPartyAddPacket::state() const {
  // @@protoc_insertion_point(field_get:network.GDPartyAddPacket.state)
  return _internal_state();
}
inline void GDPartyAddPacket::_internal_set_state(uint32_t value) {
  
  _impl_.state_ = value;
}
inline void GDPartyAddPacket::set_state(uint32_t value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:network.GDPartyAddPacket.state)
}

// -------------------------------------------------------------------

// GDPartyRemovePacket

// uint32 leader_pid = 1;
inline void GDPartyRemovePacket::clear_leader_pid() {
  _impl_.leader_pid_ = 0u;
}
inline uint32_t GDPartyRemovePacket::_internal_leader_pid() const {
  return _impl_.leader_pid_;
}
inline uint32_t GDPartyRemovePacket::leader_pid() const {
  // @@protoc_insertion_point(field_get:network.GDPartyRemovePacket.leader_pid)
  return _internal_leader_pid();
}
inline void GDPartyRemovePacket::_internal_set_leader_pid(uint32_t value) {
  
  _impl_.leader_pid_ = value;
}
inline void GDPartyRemovePacket::set_leader_pid(uint32_t value) {
  _internal_set_leader_pid(value);
  // @@protoc_insertion_point(field_set:network.GDPartyRemovePacket.leader_pid)
}

// uint32 pid = 2;
inline void GDPartyRemovePacket::clear_pid() {
  _impl_.pid_ = 0u;
}
inline uint32_t GDPartyRemovePacket::_internal_pid() const {
  return _impl_.pid_;
}
inline uint32_t GDPartyRemovePacket::pid() const {
  // @@protoc_insertion_point(field_get:network.GDPartyRemovePacket.pid)
  return _internal_pid();
}
inline void GDPartyRemovePacket::_internal_set_pid(uint32_t value) {
  
  _impl_.pid_ = value;
}
inline void GDPartyRemovePacket::set_pid(uint32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:network.GDPartyRemovePacket.pid)
}

// -------------------------------------------------------------------

// GDPartyStateChangePacket

// uint32 leader_pid = 1;
inline void GDPartyStateChangePacket::clear_leader_pid() {
  _impl_.leader_pid_ = 0u;
}
inline uint32_t GDPartyStateChangePacket::_internal_leader_pid() const {
  return _impl_.leader_pid_;
}
inline uint32_t GDPartyStateChangePacket::leader_pid() const {
  // @@protoc_insertion_point(field_get:network.GDPartyStateChangePacket.leader_pid)
  return _internal_leader_pid();
}
inline void GDPartyStateChangePacket::_internal_set_leader_pid(uint32_t value) {
  
  _impl_.leader_pid_ = value;
}
inline void GDPartyStateChangePacket::set_leader_pid(uint32_t value) {
  _internal_set_leader_pid(value);
  // @@protoc_insertion_point(field_set:network.GDPartyStateChangePacket.leader_pid)
}

// uint32 pid = 2;
inline void GDPartyStateChangePacket::clear_pid() {
  _impl_.pid_ = 0u;
}
inline uint32_t GDPartyStateChangePacket::_internal_pid() const {
  return _impl_.pid_;
}
inline uint32_t GDPartyStateChangePacket::pid() const {
  // @@protoc_insertion_point(field_get:network.GDPartyStateChangePacket.pid)
  return _internal_pid();
}
inline void GDPartyStateChangePacket::_internal_set_pid(uint32_t value) {
  
  _impl_.pid_ = value;
}
inline void GDPartyStateChangePacket::set_pid(uint32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:network.GDPartyStateChangePacket.pid)
}

// uint32 role = 3;
inline void GDPartyStateChangePacket::clear_role() {
  _impl_.role_ = 0u;
}
inline uint32_t GDPartyStateChangePacket::_internal_role() const {
  return _impl_.role_;
}
inline uint32_t GDPartyStateChangePacket::role() const {
  // @@protoc_insertion_point(field_get:network.GDPartyStateChangePacket.role)
  return _internal_role();
}
inline void GDPartyStateChangePacket::_internal_set_role(uint32_t value) {
  
  _impl_.role_ = value;
}
inline void GDPartyStateChangePacket::set_role(uint32_t value) {
  _internal_set_role(value);
  // @@protoc_insertion_point(field_set:network.GDPartyStateChangePacket.role)
}

// bool flag = 4;
inline void GDPartyStateChangePacket::clear_flag() {
  _impl_.flag_ = false;
}
inline bool GDPartyStateChangePacket::_internal_flag() const {
  return _impl_.flag_;
}
inline bool GDPartyStateChangePacket::flag() const {
  // @@protoc_insertion_point(field_get:network.GDPartyStateChangePacket.flag)
  return _internal_flag();
}
inline void GDPartyStateChangePacket::_internal_set_flag(bool value) {
  
  _impl_.flag_ = value;
}
inline void GDPartyStateChangePacket::set_flag(bool value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:network.GDPartyStateChangePacket.flag)
}

// -------------------------------------------------------------------

// GDPartySetMemberLevelPacket

// uint32 leader_pid = 1;
inline void GDPartySetMemberLevelPacket::clear_leader_pid() {
  _impl_.leader_pid_ = 0u;
}
inline uint32_t GDPartySetMemberLevelPacket::_internal_leader_pid() const {
  return _impl_.leader_pid_;
}
inline uint32_t GDPartySetMemberLevelPacket::leader_pid() const {
  // @@protoc_insertion_point(field_get:network.GDPartySetMemberLevelPacket.leader_pid)
  return _internal_leader_pid();
}
inline void GDPartySetMemberLevelPacket::_internal_set_leader_pid(uint32_t value) {
  
  _impl_.leader_pid_ = value;
}
inline void GDPartySetMemberLevelPacket::set_leader_pid(uint32_t value) {
  _internal_set_leader_pid(value);
  // @@protoc_insertion_point(field_set:network.GDPartySetMemberLevelPacket.leader_pid)
}

// uint32 pid = 2;
inline void GDPartySetMemberLevelPacket::clear_pid() {
  _impl_.pid_ = 0u;
}
inline uint32_t GDPartySetMemberLevelPacket::_internal_pid() const {
  return _impl_.pid_;
}
inline uint32_t GDPartySetMemberLevelPacket::pid() const {
  // @@protoc_insertion_point(field_get:network.GDPartySetMemberLevelPacket.pid)
  return _internal_pid();
}
inline void GDPartySetMemberLevelPacket::_internal_set_pid(uint32_t value) {
  
  _impl_.pid_ = value;
}
inline void GDPartySetMemberLevelPacket::set_pid(uint32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:network.GDPartySetMemberLevelPacket.pid)
}

// uint32 level = 3;
inline void GDPartySetMemberLevelPacket::clear_level() {
  _impl_.level_ = 0u;
}
inline uint32_t GDPartySetMemberLevelPacket::_internal_level() const {
  return _impl_.level_;
}
inline uint32_t GDPartySetMemberLevelPacket::level() const {
  // @@protoc_insertion_point(field_get:network.GDPartySetMemberLevelPacket.level)
  return _internal_level();
}
inline void GDPartySetMemberLevelPacket::_internal_set_level(uint32_t value) {
  
  _impl_.level_ = value;
}
inline void GDPartySetMemberLevelPacket::set_level(uint32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:network.GDPartySetMemberLevelPacket.level)
}

// -------------------------------------------------------------------

// GDGuildCreatePacket

// uint32 guild_id = 1;
inline void GDGuildCreatePacket::clear_guild_id() {
  _impl_.guild_id_ = 0u;
}
inline uint32_t GDGuildCreatePacket::_internal_guild_id() const {
  return _impl_.guild_id_;
}
inline uint32_t GDGuildCreatePacket::guild_id() const {
  // @@protoc_insertion_point(field_get:network.GDGuildCreatePacket.guild_id)
  return _internal_guild_id();
}
inline void GDGuildCreatePacket::_internal_set_guild_id(uint32_t value) {
  
  _impl_.guild_id_ = value;
}
inline void GDGuildCreatePacket::set_guild_id(uint32_t value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:network.GDGuildCreatePacket.guild_id)
}

// -------------------------------------------------------------------

// GDGuildSkillUpdatePacket

// uint32 guild_id = 1;
inline void GDGuildSkillUpdatePacket::clear_guild_id() {
  _impl_.guild_id_ = 0u;
}
inline uint32_t GDGuildSkillUpdatePacket::_internal_guild_id() const {
  return _impl_.guild_id_;
}
inline uint32_t GDGuildSkillUpdatePacket::guild_id() const {
  // @@protoc_insertion_point(field_get:network.GDGuildSkillUpdatePacket.guild_id)
  return _internal_guild_id();
}
inline void GDGuildSkillUpdatePacket::_internal_set_guild_id(uint32_t value) {
  
  _impl_.guild_id_ = value;
}
inline void GDGuildSkillUpdatePacket::set_guild_id(uint32_t value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:network.GDGuildSkillUpdatePacket.guild_id)
}

// int32 amount = 2;
inline void GDGuildSkillUpdatePacket::clear_amount() {
  _impl_.amount_ = 0;
}
inline int32_t GDGuildSkillUpdatePacket::_internal_amount() const {
  return _impl_.amount_;
}
inline int32_t GDGuildSkillUpdatePacket::amount() const {
  // @@protoc_insertion_point(field_get:network.GDGuildSkillUpdatePacket.amount)
  return _internal_amount();
}
inline void GDGuildSkillUpdatePacket::_internal_set_amount(int32_t value) {
  
  _impl_.amount_ = value;
}
inline void GDGuildSkillUpdatePacket::set_amount(int32_t value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:network.GDGuildSkillUpdatePacket.amount)
}

// repeated uint32 skill_levels = 3;
inline int GDGuildSkillUpdatePacket::_internal_skill_levels_size() const {
  return _impl_.skill_levels_.size();
}
inline int GDGuildSkillUpdatePacket::skill_levels_size() const {
  return _internal_skill_levels_size();
}
inline void GDGuildSkillUpdatePacket::clear_skill_levels() {
  _impl_.skill_levels_.Clear();
}
inline uint32_t GDGuildSkillUpdatePacket::_internal_skill_levels(int index) const {
  return _impl_.skill_levels_.Get(index);
}
inline uint32_t GDGuildSkillUpdatePacket::skill_levels(int index) const {
  // @@protoc_insertion_point(field_get:network.GDGuildSkillUpdatePacket.skill_levels)
  return _internal_skill_levels(index);
}
inline void GDGuildSkillUpdatePacket::set_skill_levels(int index, uint32_t value) {
  _impl_.skill_levels_.Set(index, value);
  // @@protoc_insertion_point(field_set:network.GDGuildSkillUpdatePacket.skill_levels)
}
inline void GDGuildSkillUpdatePacket::_internal_add_skill_levels(uint32_t value) {
  _impl_.skill_levels_.Add(value);
}
inline void GDGuildSkillUpdatePacket::add_skill_levels(uint32_t value) {
  _internal_add_skill_levels(value);
  // @@protoc_insertion_point(field_add:network.GDGuildSkillUpdatePacket.skill_levels)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
GDGuildSkillUpdatePacket::_internal_skill_levels() const {
  return _impl_.skill_levels_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
GDGuildSkillUpdatePacket::skill_levels() const {
  // @@protoc_insertion_point(field_list:network.GDGuildSkillUpdatePacket.skill_levels)
  return _internal_skill_levels();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
GDGuildSkillUpdatePacket::_internal_mutable_skill_levels() {
  return &_impl_.skill_levels_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
GDGuildSkillUpdatePacket::mutable_skill_levels() {
  // @@protoc_insertion_point(field_mutable_list:network.GDGuildSkillUpdatePacket.skill_levels)
  return _internal_mutable_skill_levels();
}

// uint32 skill_point = 4;
inline void GDGuildSkillUpdatePacket::clear_skill_point() {
  _impl_.skill_point_ = 0u;
}
inline uint32_t GDGuildSkillUpdatePacket::_internal_skill_point() const {
  return _impl_.skill_point_;
}
inline uint32_t GDGuildSkillUpdatePacket::skill_point() const {
  // @@protoc_insertion_point(field_get:network.GDGuildSkillUpdatePacket.skill_point)
  return _internal_skill_point();
}
inline void GDGuildSkillUpdatePacket::_internal_set_skill_point(uint32_t value) {
  
  _impl_.skill_point_ = value;
}
inline void GDGuildSkillUpdatePacket::set_skill_point(uint32_t value) {
  _internal_set_skill_point(value);
  // @@protoc_insertion_point(field_set:network.GDGuildSkillUpdatePacket.skill_point)
}

// bool save = 5;
inline void GDGuildSkillUpdatePacket::clear_save() {
  _impl_.save_ = false;
}
inline bool GDGuildSkillUpdatePacket::_internal_save() const {
  return _impl_.save_;
}
inline bool GDGuildSkillUpdatePacket::save() const {
  // @@protoc_insertion_point(field_get:network.GDGuildSkillUpdatePacket.save)
  return _internal_save();
}
inline void GDGuildSkillUpdatePacket::_internal_set_save(bool value) {
  
  _impl_.save_ = value;
}
inline void GDGuildSkillUpdatePacket::set_save(bool value) {
  _internal_set_save(value);
  // @@protoc_insertion_point(field_set:network.GDGuildSkillUpdatePacket.save)
}

// -------------------------------------------------------------------

// GDGuildExpUpdatePacket

// uint32 guild_id = 1;
inline void GDGuildExpUpdatePacket::clear_guild_id() {
  _impl_.guild_id_ = 0u;
}
inline uint32_t GDGuildExpUpdatePacket::_internal_guild_id() const {
  return _impl_.guild_id_;
}
inline uint32_t GDGuildExpUpdatePacket::guild_id() const {
  // @@protoc_insertion_point(field_get:network.GDGuildExpUpdatePacket.guild_id)
  return _internal_guild_id();
}
inline void GDGuildExpUpdatePacket::_internal_set_guild_id(uint32_t value) {
  
  _impl_.guild_id_ = value;
}
inline void GDGuildExpUpdatePacket::set_guild_id(uint32_t value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:network.GDGuildExpUpdatePacket.guild_id)
}

// int32 amount = 2;
inline void GDGuildExpUpdatePacket::clear_amount() {
  _impl_.amount_ = 0;
}
inline int32_t GDGuildExpUpdatePacket::_internal_amount() const {
  return _impl_.amount_;
}
inline int32_t GDGuildExpUpdatePacket::amount() const {
  // @@protoc_insertion_point(field_get:network.GDGuildExpUpdatePacket.amount)
  return _internal_amount();
}
inline void GDGuildExpUpdatePacket::_internal_set_amount(int32_t value) {
  
  _impl_.amount_ = value;
}
inline void GDGuildExpUpdatePacket::set_amount(int32_t value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:network.GDGuildExpUpdatePacket.amount)
}

// -------------------------------------------------------------------

// GDGuildAddMemberPacket

// uint32 pid = 1;
inline void GDGuildAddMemberPacket::clear_pid() {
  _impl_.pid_ = 0u;
}
inline uint32_t GDGuildAddMemberPacket::_internal_pid() const {
  return _impl_.pid_;
}
inline uint32_t GDGuildAddMemberPacket::pid() const {
  // @@protoc_insertion_point(field_get:network.GDGuildAddMemberPacket.pid)
  return _internal_pid();
}
inline void GDGuildAddMemberPacket::_internal_set_pid(uint32_t value) {
  
  _impl_.pid_ = value;
}
inline void GDGuildAddMemberPacket::set_pid(uint32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:network.GDGuildAddMemberPacket.pid)
}

// uint32 guild_id = 2;
inline void GDGuildAddMemberPacket::clear_guild_id() {
  _impl_.guild_id_ = 0u;
}
inline uint32_t GDGuildAddMemberPacket::_internal_guild_id() const {
  return _impl_.guild_id_;
}
inline uint32_t GDGuildAddMemberPacket::guild_id() const {
  // @@protoc_insertion_point(field_get:network.GDGuildAddMemberPacket.guild_id)
  return _internal_guild_id();
}
inline void GDGuildAddMemberPacket::_internal_set_guild_id(uint32_t value) {
  
  _impl_.guild_id_ = value;
}
inline void GDGuildAddMemberPacket::set_guild_id(uint32_t value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:network.GDGuildAddMemberPacket.guild_id)
}

// uint32 grade = 3;
inline void GDGuildAddMemberPacket::clear_grade() {
  _impl_.grade_ = 0u;
}
inline uint32_t GDGuildAddMemberPacket::_internal_grade() const {
  return _impl_.grade_;
}
inline uint32_t GDGuildAddMemberPacket::grade() const {
  // @@protoc_insertion_point(field_get:network.GDGuildAddMemberPacket.grade)
  return _internal_grade();
}
inline void GDGuildAddMemberPacket::_internal_set_grade(uint32_t value) {
  
  _impl_.grade_ = value;
}
inline void GDGuildAddMemberPacket::set_grade(uint32_t value) {
  _internal_set_grade(value);
  // @@protoc_insertion_point(field_set:network.GDGuildAddMemberPacket.grade)
}

// -------------------------------------------------------------------

// GDGuildRemoveMemberPacket

// uint32 guild_id = 1;
inline void GDGuildRemoveMemberPacket::clear_guild_id() {
  _impl_.guild_id_ = 0u;
}
inline uint32_t GDGuildRemoveMemberPacket::_internal_guild_id() const {
  return _impl_.guild_id_;
}
inline uint32_t GDGuildRemoveMemberPacket::guild_id() const {
  // @@protoc_insertion_point(field_get:network.GDGuildRemoveMemberPacket.guild_id)
  return _internal_guild_id();
}
inline void GDGuildRemoveMemberPacket::_internal_set_guild_id(uint32_t value) {
  
  _impl_.guild_id_ = value;
}
inline void GDGuildRemoveMemberPacket::set_guild_id(uint32_t value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:network.GDGuildRemoveMemberPacket.guild_id)
}

// uint32 pid = 2;
inline void GDGuildRemoveMemberPacket::clear_pid() {
  _impl_.pid_ = 0u;
}
inline uint32_t GDGuildRemoveMemberPacket::_internal_pid() const {
  return _impl_.pid_;
}
inline uint32_t GDGuildRemoveMemberPacket::pid() const {
  // @@protoc_insertion_point(field_get:network.GDGuildRemoveMemberPacket.pid)
  return _internal_pid();
}
inline void GDGuildRemoveMemberPacket::_internal_set_pid(uint32_t value) {
  
  _impl_.pid_ = value;
}
inline void GDGuildRemoveMemberPacket::set_pid(uint32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:network.GDGuildRemoveMemberPacket.pid)
}

// -------------------------------------------------------------------

// GDGuildChangeGradePacket

// uint32 guild_id = 1;
inline void GDGuildChangeGradePacket::clear_guild_id() {
  _impl_.guild_id_ = 0u;
}
inline uint32_t GDGuildChangeGradePacket::_internal_guild_id() const {
  return _impl_.guild_id_;
}
inline uint32_t GDGuildChangeGradePacket::guild_id() const {
  // @@protoc_insertion_point(field_get:network.GDGuildChangeGradePacket.guild_id)
  return _internal_guild_id();
}
inline void GDGuildChangeGradePacket::_internal_set_guild_id(uint32_t value) {
  
  _impl_.guild_id_ = value;
}
inline void GDGuildChangeGradePacket::set_guild_id(uint32_t value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:network.GDGuildChangeGradePacket.guild_id)
}

// uint32 grade = 2;
inline void GDGuildChangeGradePacket::clear_grade() {
  _impl_.grade_ = 0u;
}
inline uint32_t GDGuildChangeGradePacket::_internal_grade() const {
  return _impl_.grade_;
}
inline uint32_t GDGuildChangeGradePacket::grade() const {
  // @@protoc_insertion_point(field_get:network.GDGuildChangeGradePacket.grade)
  return _internal_grade();
}
inline void GDGuildChangeGradePacket::_internal_set_grade(uint32_t value) {
  
  _impl_.grade_ = value;
}
inline void GDGuildChangeGradePacket::set_grade(uint32_t value) {
  _internal_set_grade(value);
  // @@protoc_insertion_point(field_set:network.GDGuildChangeGradePacket.grade)
}

// -------------------------------------------------------------------

// GDGuildChangeMemberDataPacket

// uint32 guild_id = 1;
inline void GDGuildChangeMemberDataPacket::clear_guild_id() {
  _impl_.guild_id_ = 0u;
}
inline uint32_t GDGuildChangeMemberDataPacket::_internal_guild_id() const {
  return _impl_.guild_id_;
}
inline uint32_t GDGuildChangeMemberDataPacket::guild_id() const {
  // @@protoc_insertion_point(field_get:network.GDGuildChangeMemberDataPacket.guild_id)
  return _internal_guild_id();
}
inline void GDGuildChangeMemberDataPacket::_internal_set_guild_id(uint32_t value) {
  
  _impl_.guild_id_ = value;
}
inline void GDGuildChangeMemberDataPacket::set_guild_id(uint32_t value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:network.GDGuildChangeMemberDataPacket.guild_id)
}

// uint32 pid = 2;
inline void GDGuildChangeMemberDataPacket::clear_pid() {
  _impl_.pid_ = 0u;
}
inline uint32_t GDGuildChangeMemberDataPacket::_internal_pid() const {
  return _impl_.pid_;
}
inline uint32_t GDGuildChangeMemberDataPacket::pid() const {
  // @@protoc_insertion_point(field_get:network.GDGuildChangeMemberDataPacket.pid)
  return _internal_pid();
}
inline void GDGuildChangeMemberDataPacket::_internal_set_pid(uint32_t value) {
  
  _impl_.pid_ = value;
}
inline void GDGuildChangeMemberDataPacket::set_pid(uint32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:network.GDGuildChangeMemberDataPacket.pid)
}

// uint32 offer = 3;
inline void GDGuildChangeMemberDataPacket::clear_offer() {
  _impl_.offer_ = 0u;
}
inline uint32_t GDGuildChangeMemberDataPacket::_internal_offer() const {
  return _impl_.offer_;
}
inline uint32_t GDGuildChangeMemberDataPacket::offer() const {
  // @@protoc_insertion_point(field_get:network.GDGuildChangeMemberDataPacket.offer)
  return _internal_offer();
}
inline void GDGuildChangeMemberDataPacket::_internal_set_offer(uint32_t value) {
  
  _impl_.offer_ = value;
}
inline void GDGuildChangeMemberDataPacket::set_offer(uint32_t value) {
  _internal_set_offer(value);
  // @@protoc_insertion_point(field_set:network.GDGuildChangeMemberDataPacket.offer)
}

// uint32 level = 4;
inline void GDGuildChangeMemberDataPacket::clear_level() {
  _impl_.level_ = 0u;
}
inline uint32_t GDGuildChangeMemberDataPacket::_internal_level() const {
  return _impl_.level_;
}
inline uint32_t GDGuildChangeMemberDataPacket::level() const {
  // @@protoc_insertion_point(field_get:network.GDGuildChangeMemberDataPacket.level)
  return _internal_level();
}
inline void GDGuildChangeMemberDataPacket::_internal_set_level(uint32_t value) {
  
  _impl_.level_ = value;
}
inline void GDGuildChangeMemberDataPacket::set_level(uint32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:network.GDGuildChangeMemberDataPacket.level)
}

// uint32 grade = 5;
inline void GDGuildChangeMemberDataPacket::clear_grade() {
  _impl_.grade_ = 0u;
}
inline uint32_t GDGuildChangeMemberDataPacket::_internal_grade() const {
  return _impl_.grade_;
}
inline uint32_t GDGuildChangeMemberDataPacket::grade() const {
  // @@protoc_insertion_point(field_get:network.GDGuildChangeMemberDataPacket.grade)
  return _internal_grade();
}
inline void GDGuildChangeMemberDataPacket::_internal_set_grade(uint32_t value) {
  
  _impl_.grade_ = value;
}
inline void GDGuildChangeMemberDataPacket::set_grade(uint32_t value) {
  _internal_set_grade(value);
  // @@protoc_insertion_point(field_set:network.GDGuildChangeMemberDataPacket.grade)
}

// -------------------------------------------------------------------

// GDGuildDisbandPacket

// uint32 guild_id = 1;
inline void GDGuildDisbandPacket::clear_guild_id() {
  _impl_.guild_id_ = 0u;
}
inline uint32_t GDGuildDisbandPacket::_internal_guild_id() const {
  return _impl_.guild_id_;
}
inline uint32_t GDGuildDisbandPacket::guild_id() const {
  // @@protoc_insertion_point(field_get:network.GDGuildDisbandPacket.guild_id)
  return _internal_guild_id();
}
inline void GDGuildDisbandPacket::_internal_set_guild_id(uint32_t value) {
  
  _impl_.guild_id_ = value;
}
inline void GDGuildDisbandPacket::set_guild_id(uint32_t value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:network.GDGuildDisbandPacket.guild_id)
}

// -------------------------------------------------------------------

// GDGuildDungeonPacket

// uint32 guild_id = 1;
inline void GDGuildDungeonPacket::clear_guild_id() {
  _impl_.guild_id_ = 0u;
}
inline uint32_t GDGuildDungeonPacket::_internal_guild_id() const {
  return _impl_.guild_id_;
}
inline uint32_t GDGuildDungeonPacket::guild_id() const {
  // @@protoc_insertion_point(field_get:network.GDGuildDungeonPacket.guild_id)
  return _internal_guild_id();
}
inline void GDGuildDungeonPacket::_internal_set_guild_id(uint32_t value) {
  
  _impl_.guild_id_ = value;
}
inline void GDGuildDungeonPacket::set_guild_id(uint32_t value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:network.GDGuildDungeonPacket.guild_id)
}

// uint32 channel = 2;
inline void GDGuildDungeonPacket::clear_channel() {
  _impl_.channel_ = 0u;
}
inline uint32_t GDGuildDungeonPacket::_internal_channel() const {
  return _impl_.channel_;
}
inline uint32_t GDGuildDungeonPacket::channel() const {
  // @@protoc_insertion_point(field_get:network.GDGuildDungeonPacket.channel)
  return _internal_channel();
}
inline void GDGuildDungeonPacket::_internal_set_channel(uint32_t value) {
  
  _impl_.channel_ = value;
}
inline void GDGuildDungeonPacket::set_channel(uint32_t value) {
  _internal_set_channel(value);
  // @@protoc_insertion_point(field_set:network.GDGuildDungeonPacket.channel)
}

// uint32 map_index = 3;
inline void GDGuildDungeonPacket::clear_map_index() {
  _impl_.map_index_ = 0u;
}
inline uint32_t GDGuildDungeonPacket::_internal_map_index() const {
  return _impl_.map_index_;
}
inline uint32_t GDGuildDungeonPacket::map_index() const {
  // @@protoc_insertion_point(field_get:network.GDGuildDungeonPacket.map_index)
  return _internal_map_index();
}
inline void GDGuildDungeonPacket::_internal_set_map_index(uint32_t value) {
  
  _impl_.map_index_ = value;
}
inline void GDGuildDungeonPacket::set_map_index(uint32_t value) {
  _internal_set_map_index(value);
  // @@protoc_insertion_point(field_set:network.GDGuildDungeonPacket.map_index)
}

// -------------------------------------------------------------------

// GDGuildDungeonCDPacket

// uint32 guild_id = 1;
inline void GDGuildDungeonCDPacket::clear_guild_id() {
  _impl_.guild_id_ = 0u;
}
inline uint32_t GDGuildDungeonCDPacket::_internal_guild_id() const {
  return _impl_.guild_id_;
}
inline uint32_t GDGuildDungeonCDPacket::guild_id() const {
  // @@protoc_insertion_point(field_get:network.GDGuildDungeonCDPacket.guild_id)
  return _internal_guild_id();
}
inline void GDGuildDungeonCDPacket::_internal_set_guild_id(uint32_t value) {
  
  _impl_.guild_id_ = value;
}
inline void GDGuildDungeonCDPacket::set_guild_id(uint32_t value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:network.GDGuildDungeonCDPacket.guild_id)
}

// uint32 time = 2;
inline void GDGuildDungeonCDPacket::clear_time() {
  _impl_.time_ = 0u;
}
inline uint32_t GDGuildDungeonCDPacket::_internal_time() const {
  return _impl_.time_;
}
inline uint32_t GDGuildDungeonCDPacket::time() const {
  // @@protoc_insertion_point(field_get:network.GDGuildDungeonCDPacket.time)
  return _internal_time();
}
inline void GDGuildDungeonCDPacket::_internal_set_time(uint32_t value) {
  
  _impl_.time_ = value;
}
inline void GDGuildDungeonCDPacket::set_time(uint32_t value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:network.GDGuildDungeonCDPacket.time)
}

// -------------------------------------------------------------------

// GDGuildWarPacket

// uint32 type = 1;
inline void GDGuildWarPacket::clear_type() {
  _impl_.type_ = 0u;
}
inline uint32_t GDGuildWarPacket::_internal_type() const {
  return _impl_.type_;
}
inline uint32_t GDGuildWarPacket::type() const {
  // @@protoc_insertion_point(field_get:network.GDGuildWarPacket.type)
  return _internal_type();
}
inline void GDGuildWarPacket::_internal_set_type(uint32_t value) {
  
  _impl_.type_ = value;
}
inline void GDGuildWarPacket::set_type(uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:network.GDGuildWarPacket.type)
}

// uint32 war = 2;
inline void GDGuildWarPacket::clear_war() {
  _impl_.war_ = 0u;
}
inline uint32_t GDGuildWarPacket::_internal_war() const {
  return _impl_.war_;
}
inline uint32_t GDGuildWarPacket::war() const {
  // @@protoc_insertion_point(field_get:network.GDGuildWarPacket.war)
  return _internal_war();
}
inline void GDGuildWarPacket::_internal_set_war(uint32_t value) {
  
  _impl_.war_ = value;
}
inline void GDGuildWarPacket::set_war(uint32_t value) {
  _internal_set_war(value);
  // @@protoc_insertion_point(field_set:network.GDGuildWarPacket.war)
}

// uint32 guild_from = 3;
inline void GDGuildWarPacket::clear_guild_from() {
  _impl_.guild_from_ = 0u;
}
inline uint32_t GDGuildWarPacket::_internal_guild_from() const {
  return _impl_.guild_from_;
}
inline uint32_t GDGuildWarPacket::guild_from() const {
  // @@protoc_insertion_point(field_get:network.GDGuildWarPacket.guild_from)
  return _internal_guild_from();
}
inline void GDGuildWarPacket::_internal_set_guild_from(uint32_t value) {
  
  _impl_.guild_from_ = value;
}
inline void GDGuildWarPacket::set_guild_from(uint32_t value) {
  _internal_set_guild_from(value);
  // @@protoc_insertion_point(field_set:network.GDGuildWarPacket.guild_from)
}

// uint32 guild_to = 4;
inline void GDGuildWarPacket::clear_guild_to() {
  _impl_.guild_to_ = 0u;
}
inline uint32_t GDGuildWarPacket::_internal_guild_to() const {
  return _impl_.guild_to_;
}
inline uint32_t GDGuildWarPacket::guild_to() const {
  // @@protoc_insertion_point(field_get:network.GDGuildWarPacket.guild_to)
  return _internal_guild_to();
}
inline void GDGuildWarPacket::_internal_set_guild_to(uint32_t value) {
  
  _impl_.guild_to_ = value;
}
inline void GDGuildWarPacket::set_guild_to(uint32_t value) {
  _internal_set_guild_to(value);
  // @@protoc_insertion_point(field_set:network.GDGuildWarPacket.guild_to)
}

// int32 war_price = 5;
inline void GDGuildWarPacket::clear_war_price() {
  _impl_.war_price_ = 0;
}
inline int32_t GDGuildWarPacket::_internal_war_price() const {
  return _impl_.war_price_;
}
inline int32_t GDGuildWarPacket::war_price() const {
  // @@protoc_insertion_point(field_get:network.GDGuildWarPacket.war_price)
  return _internal_war_price();
}
inline void GDGuildWarPacket::_internal_set_war_price(int32_t value) {
  
  _impl_.war_price_ = value;
}
inline void GDGuildWarPacket::set_war_price(int32_t value) {
  _internal_set_war_price(value);
  // @@protoc_insertion_point(field_set:network.GDGuildWarPacket.war_price)
}

// int32 initial_score = 6;
inline void GDGuildWarPacket::clear_initial_score() {
  _impl_.initial_score_ = 0;
}
inline int32_t GDGuildWarPacket::_internal_initial_score() const {
  return _impl_.initial_score_;
}
inline int32_t GDGuildWarPacket::initial_score() const {
  // @@protoc_insertion_point(field_get:network.GDGuildWarPacket.initial_score)
  return _internal_initial_score();
}
inline void GDGuildWarPacket::_internal_set_initial_score(int32_t value) {
  
  _impl_.initial_score_ = value;
}
inline void GDGuildWarPacket::set_initial_score(int32_t value) {
  _internal_set_initial_score(value);
  // @@protoc_insertion_point(field_set:network.GDGuildWarPacket.initial_score)
}

// -------------------------------------------------------------------

// GDGuildWarScorePacket

// uint32 guild_gain_point = 1;
inline void GDGuildWarScorePacket::clear_guild_gain_point() {
  _impl_.guild_gain_point_ = 0u;
}
inline uint32_t GDGuildWarScorePacket::_internal_guild_gain_point() const {
  return _impl_.guild_gain_point_;
}
inline uint32_t GDGuildWarScorePacket::guild_gain_point() const {
  // @@protoc_insertion_point(field_get:network.GDGuildWarScorePacket.guild_gain_point)
  return _internal_guild_gain_point();
}
inline void GDGuildWarScorePacket::_internal_set_guild_gain_point(uint32_t value) {
  
  _impl_.guild_gain_point_ = value;
}
inline void GDGuildWarScorePacket::set_guild_gain_point(uint32_t value) {
  _internal_set_guild_gain_point(value);
  // @@protoc_insertion_point(field_set:network.GDGuildWarScorePacket.guild_gain_point)
}

// uint32 guild_opponent = 2;
inline void GDGuildWarScorePacket::clear_guild_opponent() {
  _impl_.guild_opponent_ = 0u;
}
inline uint32_t GDGuildWarScorePacket::_internal_guild_opponent() const {
  return _impl_.guild_opponent_;
}
inline uint32_t GDGuildWarScorePacket::guild_opponent() const {
  // @@protoc_insertion_point(field_get:network.GDGuildWarScorePacket.guild_opponent)
  return _internal_guild_opponent();
}
inline void GDGuildWarScorePacket::_internal_set_guild_opponent(uint32_t value) {
  
  _impl_.guild_opponent_ = value;
}
inline void GDGuildWarScorePacket::set_guild_opponent(uint32_t value) {
  _internal_set_guild_opponent(value);
  // @@protoc_insertion_point(field_set:network.GDGuildWarScorePacket.guild_opponent)
}

// int32 score = 3;
inline void GDGuildWarScorePacket::clear_score() {
  _impl_.score_ = 0;
}
inline int32_t GDGuildWarScorePacket::_internal_score() const {
  return _impl_.score_;
}
inline int32_t GDGuildWarScorePacket::score() const {
  // @@protoc_insertion_point(field_get:network.GDGuildWarScorePacket.score)
  return _internal_score();
}
inline void GDGuildWarScorePacket::_internal_set_score(int32_t value) {
  
  _impl_.score_ = value;
}
inline void GDGuildWarScorePacket::set_score(int32_t value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:network.GDGuildWarScorePacket.score)
}

// int32 bet_score = 4;
inline void GDGuildWarScorePacket::clear_bet_score() {
  _impl_.bet_score_ = 0;
}
inline int32_t GDGuildWarScorePacket::_internal_bet_score() const {
  return _impl_.bet_score_;
}
inline int32_t GDGuildWarScorePacket::bet_score() const {
  // @@protoc_insertion_point(field_get:network.GDGuildWarScorePacket.bet_score)
  return _internal_bet_score();
}
inline void GDGuildWarScorePacket::_internal_set_bet_score(int32_t value) {
  
  _impl_.bet_score_ = value;
}
inline void GDGuildWarScorePacket::set_bet_score(int32_t value) {
  _internal_set_bet_score(value);
  // @@protoc_insertion_point(field_set:network.GDGuildWarScorePacket.bet_score)
}

// -------------------------------------------------------------------

// GDGuildChangeLadderPointPacket

// uint32 guild_id = 1;
inline void GDGuildChangeLadderPointPacket::clear_guild_id() {
  _impl_.guild_id_ = 0u;
}
inline uint32_t GDGuildChangeLadderPointPacket::_internal_guild_id() const {
  return _impl_.guild_id_;
}
inline uint32_t GDGuildChangeLadderPointPacket::guild_id() const {
  // @@protoc_insertion_point(field_get:network.GDGuildChangeLadderPointPacket.guild_id)
  return _internal_guild_id();
}
inline void GDGuildChangeLadderPointPacket::_internal_set_guild_id(uint32_t value) {
  
  _impl_.guild_id_ = value;
}
inline void GDGuildChangeLadderPointPacket::set_guild_id(uint32_t value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:network.GDGuildChangeLadderPointPacket.guild_id)
}

// int32 change = 2;
inline void GDGuildChangeLadderPointPacket::clear_change() {
  _impl_.change_ = 0;
}
inline int32_t GDGuildChangeLadderPointPacket::_internal_change() const {
  return _impl_.change_;
}
inline int32_t GDGuildChangeLadderPointPacket::change() const {
  // @@protoc_insertion_point(field_get:network.GDGuildChangeLadderPointPacket.change)
  return _internal_change();
}
inline void GDGuildChangeLadderPointPacket::_internal_set_change(int32_t value) {
  
  _impl_.change_ = value;
}
inline void GDGuildChangeLadderPointPacket::set_change(int32_t value) {
  _internal_set_change(value);
  // @@protoc_insertion_point(field_set:network.GDGuildChangeLadderPointPacket.change)
}

// -------------------------------------------------------------------

// GDGuildUseSkillPacket

// uint32 guild_id = 1;
inline void GDGuildUseSkillPacket::clear_guild_id() {
  _impl_.guild_id_ = 0u;
}
inline uint32_t GDGuildUseSkillPacket::_internal_guild_id() const {
  return _impl_.guild_id_;
}
inline uint32_t GDGuildUseSkillPacket::guild_id() const {
  // @@protoc_insertion_point(field_get:network.GDGuildUseSkillPacket.guild_id)
  return _internal_guild_id();
}
inline void GDGuildUseSkillPacket::_internal_set_guild_id(uint32_t value) {
  
  _impl_.guild_id_ = value;
}
inline void GDGuildUseSkillPacket::set_guild_id(uint32_t value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:network.GDGuildUseSkillPacket.guild_id)
}

// uint32 skill_vnum = 2;
inline void GDGuildUseSkillPacket::clear_skill_vnum() {
  _impl_.skill_vnum_ = 0u;
}
inline uint32_t GDGuildUseSkillPacket::_internal_skill_vnum() const {
  return _impl_.skill_vnum_;
}
inline uint32_t GDGuildUseSkillPacket::skill_vnum() const {
  // @@protoc_insertion_point(field_get:network.GDGuildUseSkillPacket.skill_vnum)
  return _internal_skill_vnum();
}
inline void GDGuildUseSkillPacket::_internal_set_skill_vnum(uint32_t value) {
  
  _impl_.skill_vnum_ = value;
}
inline void GDGuildUseSkillPacket::set_skill_vnum(uint32_t value) {
  _internal_set_skill_vnum(value);
  // @@protoc_insertion_point(field_set:network.GDGuildUseSkillPacket.skill_vnum)
}

// uint32 cooltime = 3;
inline void GDGuildUseSkillPacket::clear_cooltime() {
  _impl_.cooltime_ = 0u;
}
inline uint32_t GDGuildUseSkillPacket::_internal_cooltime() const {
  return _impl_.cooltime_;
}
inline uint32_t GDGuildUseSkillPacket::cooltime() const {
  // @@protoc_insertion_point(field_get:network.GDGuildUseSkillPacket.cooltime)
  return _internal_cooltime();
}
inline void GDGuildUseSkillPacket::_internal_set_cooltime(uint32_t value) {
  
  _impl_.cooltime_ = value;
}
inline void GDGuildUseSkillPacket::set_cooltime(uint32_t value) {
  _internal_set_cooltime(value);
  // @@protoc_insertion_point(field_set:network.GDGuildUseSkillPacket.cooltime)
}

// -------------------------------------------------------------------

// GDGuildDepositMoneyPacket

// uint32 guild_id = 1;
inline void GDGuildDepositMoneyPacket::clear_guild_id() {
  _impl_.guild_id_ = 0u;
}
inline uint32_t GDGuildDepositMoneyPacket::_internal_guild_id() const {
  return _impl_.guild_id_;
}
inline uint32_t GDGuildDepositMoneyPacket::guild_id() const {
  // @@protoc_insertion_point(field_get:network.GDGuildDepositMoneyPacket.guild_id)
  return _internal_guild_id();
}
inline void GDGuildDepositMoneyPacket::_internal_set_guild_id(uint32_t value) {
  
  _impl_.guild_id_ = value;
}
inline void GDGuildDepositMoneyPacket::set_guild_id(uint32_t value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:network.GDGuildDepositMoneyPacket.guild_id)
}

// int32 gold = 2;
inline void GDGuildDepositMoneyPacket::clear_gold() {
  _impl_.gold_ = 0;
}
inline int32_t GDGuildDepositMoneyPacket::_internal_gold() const {
  return _impl_.gold_;
}
inline int32_t GDGuildDepositMoneyPacket::gold() const {
  // @@protoc_insertion_point(field_get:network.GDGuildDepositMoneyPacket.gold)
  return _internal_gold();
}
inline void GDGuildDepositMoneyPacket::_internal_set_gold(int32_t value) {
  
  _impl_.gold_ = value;
}
inline void GDGuildDepositMoneyPacket::set_gold(int32_t value) {
  _internal_set_gold(value);
  // @@protoc_insertion_point(field_set:network.GDGuildDepositMoneyPacket.gold)
}

// -------------------------------------------------------------------

// GDGuildWithdrawMoneyPacket

// uint32 guild_id = 1;
inline void GDGuildWithdrawMoneyPacket::clear_guild_id() {
  _impl_.guild_id_ = 0u;
}
inline uint32_t GDGuildWithdrawMoneyPacket::_internal_guild_id() const {
  return _impl_.guild_id_;
}
inline uint32_t GDGuildWithdrawMoneyPacket::guild_id() const {
  // @@protoc_insertion_point(field_get:network.GDGuildWithdrawMoneyPacket.guild_id)
  return _internal_guild_id();
}
inline void GDGuildWithdrawMoneyPacket::_internal_set_guild_id(uint32_t value) {
  
  _impl_.guild_id_ = value;
}
inline void GDGuildWithdrawMoneyPacket::set_guild_id(uint32_t value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:network.GDGuildWithdrawMoneyPacket.guild_id)
}

// int32 gold = 2;
inline void GDGuildWithdrawMoneyPacket::clear_gold() {
  _impl_.gold_ = 0;
}
inline int32_t GDGuildWithdrawMoneyPacket::_internal_gold() const {
  return _impl_.gold_;
}
inline int32_t GDGuildWithdrawMoneyPacket::gold() const {
  // @@protoc_insertion_point(field_get:network.GDGuildWithdrawMoneyPacket.gold)
  return _internal_gold();
}
inline void GDGuildWithdrawMoneyPacket::_internal_set_gold(int32_t value) {
  
  _impl_.gold_ = value;
}
inline void GDGuildWithdrawMoneyPacket::set_gold(int32_t value) {
  _internal_set_gold(value);
  // @@protoc_insertion_point(field_set:network.GDGuildWithdrawMoneyPacket.gold)
}

// -------------------------------------------------------------------

// GDGuildWithdrawMoneyGiveReplyPacket

// uint32 guild_id = 1;
inline void GDGuildWithdrawMoneyGiveReplyPacket::clear_guild_id() {
  _impl_.guild_id_ = 0u;
}
inline uint32_t GDGuildWithdrawMoneyGiveReplyPacket::_internal_guild_id() const {
  return _impl_.guild_id_;
}
inline uint32_t GDGuildWithdrawMoneyGiveReplyPacket::guild_id() const {
  // @@protoc_insertion_point(field_get:network.GDGuildWithdrawMoneyGiveReplyPacket.guild_id)
  return _internal_guild_id();
}
inline void GDGuildWithdrawMoneyGiveReplyPacket::_internal_set_guild_id(uint32_t value) {
  
  _impl_.guild_id_ = value;
}
inline void GDGuildWithdrawMoneyGiveReplyPacket::set_guild_id(uint32_t value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:network.GDGuildWithdrawMoneyGiveReplyPacket.guild_id)
}

// int32 change_gold = 2;
inline void GDGuildWithdrawMoneyGiveReplyPacket::clear_change_gold() {
  _impl_.change_gold_ = 0;
}
inline int32_t GDGuildWithdrawMoneyGiveReplyPacket::_internal_change_gold() const {
  return _impl_.change_gold_;
}
inline int32_t GDGuildWithdrawMoneyGiveReplyPacket::change_gold() const {
  // @@protoc_insertion_point(field_get:network.GDGuildWithdrawMoneyGiveReplyPacket.change_gold)
  return _internal_change_gold();
}
inline void GDGuildWithdrawMoneyGiveReplyPacket::_internal_set_change_gold(int32_t value) {
  
  _impl_.change_gold_ = value;
}
inline void GDGuildWithdrawMoneyGiveReplyPacket::set_change_gold(int32_t value) {
  _internal_set_change_gold(value);
  // @@protoc_insertion_point(field_set:network.GDGuildWithdrawMoneyGiveReplyPacket.change_gold)
}

// bool give_success = 3;
inline void GDGuildWithdrawMoneyGiveReplyPacket::clear_give_success() {
  _impl_.give_success_ = false;
}
inline bool GDGuildWithdrawMoneyGiveReplyPacket::_internal_give_success() const {
  return _impl_.give_success_;
}
inline bool GDGuildWithdrawMoneyGiveReplyPacket::give_success() const {
  // @@protoc_insertion_point(field_get:network.GDGuildWithdrawMoneyGiveReplyPacket.give_success)
  return _internal_give_success();
}
inline void GDGuildWithdrawMoneyGiveReplyPacket::_internal_set_give_success(bool value) {
  
  _impl_.give_success_ = value;
}
inline void GDGuildWithdrawMoneyGiveReplyPacket::set_give_success(bool value) {
  _internal_set_give_success(value);
  // @@protoc_insertion_point(field_set:network.GDGuildWithdrawMoneyGiveReplyPacket.give_success)
}

// -------------------------------------------------------------------

// GDGuildWarBetPacket

// uint32 war_id = 1;
inline void GDGuildWarBetPacket::clear_war_id() {
  _impl_.war_id_ = 0u;
}
inline uint32_t GDGuildWarBetPacket::_internal_war_id() const {
  return _impl_.war_id_;
}
inline uint32_t GDGuildWarBetPacket::war_id() const {
  // @@protoc_insertion_point(field_get:network.GDGuildWarBetPacket.war_id)
  return _internal_war_id();
}
inline void GDGuildWarBetPacket::_internal_set_war_id(uint32_t value) {
  
  _impl_.war_id_ = value;
}
inline void GDGuildWarBetPacket::set_war_id(uint32_t value) {
  _internal_set_war_id(value);
  // @@protoc_insertion_point(field_set:network.GDGuildWarBetPacket.war_id)
}

// bytes login = 2;
inline void GDGuildWarBetPacket::clear_login() {
  _impl_.login_.ClearToEmpty();
}
inline const std::string& GDGuildWarBetPacket::login() const {
  // @@protoc_insertion_point(field_get:network.GDGuildWarBetPacket.login)
  return _internal_login();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GDGuildWarBetPacket::set_login(ArgT0&& arg0, ArgT... args) {
 
 _impl_.login_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GDGuildWarBetPacket.login)
}
inline std::string* GDGuildWarBetPacket::mutable_login() {
  std::string* _s = _internal_mutable_login();
  // @@protoc_insertion_point(field_mutable:network.GDGuildWarBetPacket.login)
  return _s;
}
inline const std::string& GDGuildWarBetPacket::_internal_login() const {
  return _impl_.login_.Get();
}
inline void GDGuildWarBetPacket::_internal_set_login(const std::string& value) {
  
  _impl_.login_.Set(value, GetArenaForAllocation());
}
inline std::string* GDGuildWarBetPacket::_internal_mutable_login() {
  
  return _impl_.login_.Mutable(GetArenaForAllocation());
}
inline std::string* GDGuildWarBetPacket::release_login() {
  // @@protoc_insertion_point(field_release:network.GDGuildWarBetPacket.login)
  return _impl_.login_.Release();
}
inline void GDGuildWarBetPacket::set_allocated_login(std::string* login) {
  if (login != nullptr) {
    
  } else {
    
  }
  _impl_.login_.SetAllocated(login, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.login_.IsDefault()) {
    _impl_.login_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GDGuildWarBetPacket.login)
}

// uint32 gold = 3;
inline void GDGuildWarBetPacket::clear_gold() {
  _impl_.gold_ = 0u;
}
inline uint32_t GDGuildWarBetPacket::_internal_gold() const {
  return _impl_.gold_;
}
inline uint32_t GDGuildWarBetPacket::gold() const {
  // @@protoc_insertion_point(field_get:network.GDGuildWarBetPacket.gold)
  return _internal_gold();
}
inline void GDGuildWarBetPacket::_internal_set_gold(uint32_t value) {
  
  _impl_.gold_ = value;
}
inline void GDGuildWarBetPacket::set_gold(uint32_t value) {
  _internal_set_gold(value);
  // @@protoc_insertion_point(field_set:network.GDGuildWarBetPacket.gold)
}

// uint32 guild_id = 4;
inline void GDGuildWarBetPacket::clear_guild_id() {
  _impl_.guild_id_ = 0u;
}
inline uint32_t GDGuildWarBetPacket::_internal_guild_id() const {
  return _impl_.guild_id_;
}
inline uint32_t GDGuildWarBetPacket::guild_id() const {
  // @@protoc_insertion_point(field_get:network.GDGuildWarBetPacket.guild_id)
  return _internal_guild_id();
}
inline void GDGuildWarBetPacket::_internal_set_guild_id(uint32_t value) {
  
  _impl_.guild_id_ = value;
}
inline void GDGuildWarBetPacket::set_guild_id(uint32_t value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:network.GDGuildWarBetPacket.guild_id)
}

// -------------------------------------------------------------------

// GDGuildReqChangeMasterPacket

// uint32 guild_id = 1;
inline void GDGuildReqChangeMasterPacket::clear_guild_id() {
  _impl_.guild_id_ = 0u;
}
inline uint32_t GDGuildReqChangeMasterPacket::_internal_guild_id() const {
  return _impl_.guild_id_;
}
inline uint32_t GDGuildReqChangeMasterPacket::guild_id() const {
  // @@protoc_insertion_point(field_get:network.GDGuildReqChangeMasterPacket.guild_id)
  return _internal_guild_id();
}
inline void GDGuildReqChangeMasterPacket::_internal_set_guild_id(uint32_t value) {
  
  _impl_.guild_id_ = value;
}
inline void GDGuildReqChangeMasterPacket::set_guild_id(uint32_t value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:network.GDGuildReqChangeMasterPacket.guild_id)
}

// uint32 id_from = 2;
inline void GDGuildReqChangeMasterPacket::clear_id_from() {
  _impl_.id_from_ = 0u;
}
inline uint32_t GDGuildReqChangeMasterPacket::_internal_id_from() const {
  return _impl_.id_from_;
}
inline uint32_t GDGuildReqChangeMasterPacket::id_from() const {
  // @@protoc_insertion_point(field_get:network.GDGuildReqChangeMasterPacket.id_from)
  return _internal_id_from();
}
inline void GDGuildReqChangeMasterPacket::_internal_set_id_from(uint32_t value) {
  
  _impl_.id_from_ = value;
}
inline void GDGuildReqChangeMasterPacket::set_id_from(uint32_t value) {
  _internal_set_id_from(value);
  // @@protoc_insertion_point(field_set:network.GDGuildReqChangeMasterPacket.id_from)
}

// uint32 id_to = 3;
inline void GDGuildReqChangeMasterPacket::clear_id_to() {
  _impl_.id_to_ = 0u;
}
inline uint32_t GDGuildReqChangeMasterPacket::_internal_id_to() const {
  return _impl_.id_to_;
}
inline uint32_t GDGuildReqChangeMasterPacket::id_to() const {
  // @@protoc_insertion_point(field_get:network.GDGuildReqChangeMasterPacket.id_to)
  return _internal_id_to();
}
inline void GDGuildReqChangeMasterPacket::_internal_set_id_to(uint32_t value) {
  
  _impl_.id_to_ = value;
}
inline void GDGuildReqChangeMasterPacket::set_id_to(uint32_t value) {
  _internal_set_id_to(value);
  // @@protoc_insertion_point(field_set:network.GDGuildReqChangeMasterPacket.id_to)
}

// -------------------------------------------------------------------

// GDGuildSafeboxLoadPacket

// uint32 guild_id = 1;
inline void GDGuildSafeboxLoadPacket::clear_guild_id() {
  _impl_.guild_id_ = 0u;
}
inline uint32_t GDGuildSafeboxLoadPacket::_internal_guild_id() const {
  return _impl_.guild_id_;
}
inline uint32_t GDGuildSafeboxLoadPacket::guild_id() const {
  // @@protoc_insertion_point(field_get:network.GDGuildSafeboxLoadPacket.guild_id)
  return _internal_guild_id();
}
inline void GDGuildSafeboxLoadPacket::_internal_set_guild_id(uint32_t value) {
  
  _impl_.guild_id_ = value;
}
inline void GDGuildSafeboxLoadPacket::set_guild_id(uint32_t value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:network.GDGuildSafeboxLoadPacket.guild_id)
}

// -------------------------------------------------------------------

// GDGuildSafeboxCreatePacket

// uint32 guild_id = 1;
inline void GDGuildSafeboxCreatePacket::clear_guild_id() {
  _impl_.guild_id_ = 0u;
}
inline uint32_t GDGuildSafeboxCreatePacket::_internal_guild_id() const {
  return _impl_.guild_id_;
}
inline uint32_t GDGuildSafeboxCreatePacket::guild_id() const {
  // @@protoc_insertion_point(field_get:network.GDGuildSafeboxCreatePacket.guild_id)
  return _internal_guild_id();
}
inline void GDGuildSafeboxCreatePacket::_internal_set_guild_id(uint32_t value) {
  
  _impl_.guild_id_ = value;
}
inline void GDGuildSafeboxCreatePacket::set_guild_id(uint32_t value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:network.GDGuildSafeboxCreatePacket.guild_id)
}

// uint32 pid = 2;
inline void GDGuildSafeboxCreatePacket::clear_pid() {
  _impl_.pid_ = 0u;
}
inline uint32_t GDGuildSafeboxCreatePacket::_internal_pid() const {
  return _impl_.pid_;
}
inline uint32_t GDGuildSafeboxCreatePacket::pid() const {
  // @@protoc_insertion_point(field_get:network.GDGuildSafeboxCreatePacket.pid)
  return _internal_pid();
}
inline void GDGuildSafeboxCreatePacket::_internal_set_pid(uint32_t value) {
  
  _impl_.pid_ = value;
}
inline void GDGuildSafeboxCreatePacket::set_pid(uint32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:network.GDGuildSafeboxCreatePacket.pid)
}

// bytes name = 3;
inline void GDGuildSafeboxCreatePacket::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GDGuildSafeboxCreatePacket::name() const {
  // @@protoc_insertion_point(field_get:network.GDGuildSafeboxCreatePacket.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GDGuildSafeboxCreatePacket::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GDGuildSafeboxCreatePacket.name)
}
inline std::string* GDGuildSafeboxCreatePacket::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:network.GDGuildSafeboxCreatePacket.name)
  return _s;
}
inline const std::string& GDGuildSafeboxCreatePacket::_internal_name() const {
  return _impl_.name_.Get();
}
inline void GDGuildSafeboxCreatePacket::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* GDGuildSafeboxCreatePacket::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* GDGuildSafeboxCreatePacket::release_name() {
  // @@protoc_insertion_point(field_release:network.GDGuildSafeboxCreatePacket.name)
  return _impl_.name_.Release();
}
inline void GDGuildSafeboxCreatePacket::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GDGuildSafeboxCreatePacket.name)
}

// uint32 size = 4;
inline void GDGuildSafeboxCreatePacket::clear_size() {
  _impl_.size_ = 0u;
}
inline uint32_t GDGuildSafeboxCreatePacket::_internal_size() const {
  return _impl_.size_;
}
inline uint32_t GDGuildSafeboxCreatePacket::size() const {
  // @@protoc_insertion_point(field_get:network.GDGuildSafeboxCreatePacket.size)
  return _internal_size();
}
inline void GDGuildSafeboxCreatePacket::_internal_set_size(uint32_t value) {
  
  _impl_.size_ = value;
}
inline void GDGuildSafeboxCreatePacket::set_size(uint32_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:network.GDGuildSafeboxCreatePacket.size)
}

// -------------------------------------------------------------------

// GDGuildSafeboxSizePacket

// uint32 guild_id = 1;
inline void GDGuildSafeboxSizePacket::clear_guild_id() {
  _impl_.guild_id_ = 0u;
}
inline uint32_t GDGuildSafeboxSizePacket::_internal_guild_id() const {
  return _impl_.guild_id_;
}
inline uint32_t GDGuildSafeboxSizePacket::guild_id() const {
  // @@protoc_insertion_point(field_get:network.GDGuildSafeboxSizePacket.guild_id)
  return _internal_guild_id();
}
inline void GDGuildSafeboxSizePacket::_internal_set_guild_id(uint32_t value) {
  
  _impl_.guild_id_ = value;
}
inline void GDGuildSafeboxSizePacket::set_guild_id(uint32_t value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:network.GDGuildSafeboxSizePacket.guild_id)
}

// uint32 pid = 2;
inline void GDGuildSafeboxSizePacket::clear_pid() {
  _impl_.pid_ = 0u;
}
inline uint32_t GDGuildSafeboxSizePacket::_internal_pid() const {
  return _impl_.pid_;
}
inline uint32_t GDGuildSafeboxSizePacket::pid() const {
  // @@protoc_insertion_point(field_get:network.GDGuildSafeboxSizePacket.pid)
  return _internal_pid();
}
inline void GDGuildSafeboxSizePacket::_internal_set_pid(uint32_t value) {
  
  _impl_.pid_ = value;
}
inline void GDGuildSafeboxSizePacket::set_pid(uint32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:network.GDGuildSafeboxSizePacket.pid)
}

// bytes name = 3;
inline void GDGuildSafeboxSizePacket::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GDGuildSafeboxSizePacket::name() const {
  // @@protoc_insertion_point(field_get:network.GDGuildSafeboxSizePacket.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GDGuildSafeboxSizePacket::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GDGuildSafeboxSizePacket.name)
}
inline std::string* GDGuildSafeboxSizePacket::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:network.GDGuildSafeboxSizePacket.name)
  return _s;
}
inline const std::string& GDGuildSafeboxSizePacket::_internal_name() const {
  return _impl_.name_.Get();
}
inline void GDGuildSafeboxSizePacket::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* GDGuildSafeboxSizePacket::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* GDGuildSafeboxSizePacket::release_name() {
  // @@protoc_insertion_point(field_release:network.GDGuildSafeboxSizePacket.name)
  return _impl_.name_.Release();
}
inline void GDGuildSafeboxSizePacket::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GDGuildSafeboxSizePacket.name)
}

// uint32 size = 4;
inline void GDGuildSafeboxSizePacket::clear_size() {
  _impl_.size_ = 0u;
}
inline uint32_t GDGuildSafeboxSizePacket::_internal_size() const {
  return _impl_.size_;
}
inline uint32_t GDGuildSafeboxSizePacket::size() const {
  // @@protoc_insertion_point(field_get:network.GDGuildSafeboxSizePacket.size)
  return _internal_size();
}
inline void GDGuildSafeboxSizePacket::_internal_set_size(uint32_t value) {
  
  _impl_.size_ = value;
}
inline void GDGuildSafeboxSizePacket::set_size(uint32_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:network.GDGuildSafeboxSizePacket.size)
}

// -------------------------------------------------------------------

// GDGuildSafeboxAddPacket

// uint32 pid = 1;
inline void GDGuildSafeboxAddPacket::clear_pid() {
  _impl_.pid_ = 0u;
}
inline uint32_t GDGuildSafeboxAddPacket::_internal_pid() const {
  return _impl_.pid_;
}
inline uint32_t GDGuildSafeboxAddPacket::pid() const {
  // @@protoc_insertion_point(field_get:network.GDGuildSafeboxAddPacket.pid)
  return _internal_pid();
}
inline void GDGuildSafeboxAddPacket::_internal_set_pid(uint32_t value) {
  
  _impl_.pid_ = value;
}
inline void GDGuildSafeboxAddPacket::set_pid(uint32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:network.GDGuildSafeboxAddPacket.pid)
}

// bytes name = 2;
inline void GDGuildSafeboxAddPacket::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GDGuildSafeboxAddPacket::name() const {
  // @@protoc_insertion_point(field_get:network.GDGuildSafeboxAddPacket.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GDGuildSafeboxAddPacket::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GDGuildSafeboxAddPacket.name)
}
inline std::string* GDGuildSafeboxAddPacket::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:network.GDGuildSafeboxAddPacket.name)
  return _s;
}
inline const std::string& GDGuildSafeboxAddPacket::_internal_name() const {
  return _impl_.name_.Get();
}
inline void GDGuildSafeboxAddPacket::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* GDGuildSafeboxAddPacket::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* GDGuildSafeboxAddPacket::release_name() {
  // @@protoc_insertion_point(field_release:network.GDGuildSafeboxAddPacket.name)
  return _impl_.name_.Release();
}
inline void GDGuildSafeboxAddPacket::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GDGuildSafeboxAddPacket.name)
}

// .network.TItemData item = 3;
inline bool GDGuildSafeboxAddPacket::_internal_has_item() const {
  return this != internal_default_instance() && _impl_.item_ != nullptr;
}
inline bool GDGuildSafeboxAddPacket::has_item() const {
  return _internal_has_item();
}
inline const ::network::TItemData& GDGuildSafeboxAddPacket::_internal_item() const {
  const ::network::TItemData* p = _impl_.item_;
  return p != nullptr ? *p : reinterpret_cast<const ::network::TItemData&>(
      ::network::_TItemData_default_instance_);
}
inline const ::network::TItemData& GDGuildSafeboxAddPacket::item() const {
  // @@protoc_insertion_point(field_get:network.GDGuildSafeboxAddPacket.item)
  return _internal_item();
}
inline void GDGuildSafeboxAddPacket::unsafe_arena_set_allocated_item(
    ::network::TItemData* item) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.item_);
  }
  _impl_.item_ = item;
  if (item) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:network.GDGuildSafeboxAddPacket.item)
}
inline ::network::TItemData* GDGuildSafeboxAddPacket::release_item() {
  
  ::network::TItemData* temp = _impl_.item_;
  _impl_.item_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::network::TItemData* GDGuildSafeboxAddPacket::unsafe_arena_release_item() {
  // @@protoc_insertion_point(field_release:network.GDGuildSafeboxAddPacket.item)
  
  ::network::TItemData* temp = _impl_.item_;
  _impl_.item_ = nullptr;
  return temp;
}
inline ::network::TItemData* GDGuildSafeboxAddPacket::_internal_mutable_item() {
  
  if (_impl_.item_ == nullptr) {
    auto* p = CreateMaybeMessage<::network::TItemData>(GetArenaForAllocation());
    _impl_.item_ = p;
  }
  return _impl_.item_;
}
inline ::network::TItemData* GDGuildSafeboxAddPacket::mutable_item() {
  ::network::TItemData* _msg = _internal_mutable_item();
  // @@protoc_insertion_point(field_mutable:network.GDGuildSafeboxAddPacket.item)
  return _msg;
}
inline void GDGuildSafeboxAddPacket::set_allocated_item(::network::TItemData* item) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.item_);
  }
  if (item) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(item));
    if (message_arena != submessage_arena) {
      item = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, item, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.item_ = item;
  // @@protoc_insertion_point(field_set_allocated:network.GDGuildSafeboxAddPacket.item)
}

// -------------------------------------------------------------------

// GDGuildSafeboxTakePacket

// uint32 guild_id = 1;
inline void GDGuildSafeboxTakePacket::clear_guild_id() {
  _impl_.guild_id_ = 0u;
}
inline uint32_t GDGuildSafeboxTakePacket::_internal_guild_id() const {
  return _impl_.guild_id_;
}
inline uint32_t GDGuildSafeboxTakePacket::guild_id() const {
  // @@protoc_insertion_point(field_get:network.GDGuildSafeboxTakePacket.guild_id)
  return _internal_guild_id();
}
inline void GDGuildSafeboxTakePacket::_internal_set_guild_id(uint32_t value) {
  
  _impl_.guild_id_ = value;
}
inline void GDGuildSafeboxTakePacket::set_guild_id(uint32_t value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:network.GDGuildSafeboxTakePacket.guild_id)
}

// uint32 pid = 2;
inline void GDGuildSafeboxTakePacket::clear_pid() {
  _impl_.pid_ = 0u;
}
inline uint32_t GDGuildSafeboxTakePacket::_internal_pid() const {
  return _impl_.pid_;
}
inline uint32_t GDGuildSafeboxTakePacket::pid() const {
  // @@protoc_insertion_point(field_get:network.GDGuildSafeboxTakePacket.pid)
  return _internal_pid();
}
inline void GDGuildSafeboxTakePacket::_internal_set_pid(uint32_t value) {
  
  _impl_.pid_ = value;
}
inline void GDGuildSafeboxTakePacket::set_pid(uint32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:network.GDGuildSafeboxTakePacket.pid)
}

// bytes player_name = 3;
inline void GDGuildSafeboxTakePacket::clear_player_name() {
  _impl_.player_name_.ClearToEmpty();
}
inline const std::string& GDGuildSafeboxTakePacket::player_name() const {
  // @@protoc_insertion_point(field_get:network.GDGuildSafeboxTakePacket.player_name)
  return _internal_player_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GDGuildSafeboxTakePacket::set_player_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.player_name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GDGuildSafeboxTakePacket.player_name)
}
inline std::string* GDGuildSafeboxTakePacket::mutable_player_name() {
  std::string* _s = _internal_mutable_player_name();
  // @@protoc_insertion_point(field_mutable:network.GDGuildSafeboxTakePacket.player_name)
  return _s;
}
inline const std::string& GDGuildSafeboxTakePacket::_internal_player_name() const {
  return _impl_.player_name_.Get();
}
inline void GDGuildSafeboxTakePacket::_internal_set_player_name(const std::string& value) {
  
  _impl_.player_name_.Set(value, GetArenaForAllocation());
}
inline std::string* GDGuildSafeboxTakePacket::_internal_mutable_player_name() {
  
  return _impl_.player_name_.Mutable(GetArenaForAllocation());
}
inline std::string* GDGuildSafeboxTakePacket::release_player_name() {
  // @@protoc_insertion_point(field_release:network.GDGuildSafeboxTakePacket.player_name)
  return _impl_.player_name_.Release();
}
inline void GDGuildSafeboxTakePacket::set_allocated_player_name(std::string* player_name) {
  if (player_name != nullptr) {
    
  } else {
    
  }
  _impl_.player_name_.SetAllocated(player_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.player_name_.IsDefault()) {
    _impl_.player_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GDGuildSafeboxTakePacket.player_name)
}

// uint32 source_pos = 4;
inline void GDGuildSafeboxTakePacket::clear_source_pos() {
  _impl_.source_pos_ = 0u;
}
inline uint32_t GDGuildSafeboxTakePacket::_internal_source_pos() const {
  return _impl_.source_pos_;
}
inline uint32_t GDGuildSafeboxTakePacket::source_pos() const {
  // @@protoc_insertion_point(field_get:network.GDGuildSafeboxTakePacket.source_pos)
  return _internal_source_pos();
}
inline void GDGuildSafeboxTakePacket::_internal_set_source_pos(uint32_t value) {
  
  _impl_.source_pos_ = value;
}
inline void GDGuildSafeboxTakePacket::set_source_pos(uint32_t value) {
  _internal_set_source_pos(value);
  // @@protoc_insertion_point(field_set:network.GDGuildSafeboxTakePacket.source_pos)
}

// .network.TItemPos target_pos = 5;
inline bool GDGuildSafeboxTakePacket::_internal_has_target_pos() const {
  return this != internal_default_instance() && _impl_.target_pos_ != nullptr;
}
inline bool GDGuildSafeboxTakePacket::has_target_pos() const {
  return _internal_has_target_pos();
}
inline const ::network::TItemPos& GDGuildSafeboxTakePacket::_internal_target_pos() const {
  const ::network::TItemPos* p = _impl_.target_pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::network::TItemPos&>(
      ::network::_TItemPos_default_instance_);
}
inline const ::network::TItemPos& GDGuildSafeboxTakePacket::target_pos() const {
  // @@protoc_insertion_point(field_get:network.GDGuildSafeboxTakePacket.target_pos)
  return _internal_target_pos();
}
inline void GDGuildSafeboxTakePacket::unsafe_arena_set_allocated_target_pos(
    ::network::TItemPos* target_pos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.target_pos_);
  }
  _impl_.target_pos_ = target_pos;
  if (target_pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:network.GDGuildSafeboxTakePacket.target_pos)
}
inline ::network::TItemPos* GDGuildSafeboxTakePacket::release_target_pos() {
  
  ::network::TItemPos* temp = _impl_.target_pos_;
  _impl_.target_pos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::network::TItemPos* GDGuildSafeboxTakePacket::unsafe_arena_release_target_pos() {
  // @@protoc_insertion_point(field_release:network.GDGuildSafeboxTakePacket.target_pos)
  
  ::network::TItemPos* temp = _impl_.target_pos_;
  _impl_.target_pos_ = nullptr;
  return temp;
}
inline ::network::TItemPos* GDGuildSafeboxTakePacket::_internal_mutable_target_pos() {
  
  if (_impl_.target_pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::network::TItemPos>(GetArenaForAllocation());
    _impl_.target_pos_ = p;
  }
  return _impl_.target_pos_;
}
inline ::network::TItemPos* GDGuildSafeboxTakePacket::mutable_target_pos() {
  ::network::TItemPos* _msg = _internal_mutable_target_pos();
  // @@protoc_insertion_point(field_mutable:network.GDGuildSafeboxTakePacket.target_pos)
  return _msg;
}
inline void GDGuildSafeboxTakePacket::set_allocated_target_pos(::network::TItemPos* target_pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.target_pos_);
  }
  if (target_pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_pos));
    if (message_arena != submessage_arena) {
      target_pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target_pos, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.target_pos_ = target_pos;
  // @@protoc_insertion_point(field_set_allocated:network.GDGuildSafeboxTakePacket.target_pos)
}

// -------------------------------------------------------------------

// GDGuildSafeboxMovePacket

// uint32 guild_id = 1;
inline void GDGuildSafeboxMovePacket::clear_guild_id() {
  _impl_.guild_id_ = 0u;
}
inline uint32_t GDGuildSafeboxMovePacket::_internal_guild_id() const {
  return _impl_.guild_id_;
}
inline uint32_t GDGuildSafeboxMovePacket::guild_id() const {
  // @@protoc_insertion_point(field_get:network.GDGuildSafeboxMovePacket.guild_id)
  return _internal_guild_id();
}
inline void GDGuildSafeboxMovePacket::_internal_set_guild_id(uint32_t value) {
  
  _impl_.guild_id_ = value;
}
inline void GDGuildSafeboxMovePacket::set_guild_id(uint32_t value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:network.GDGuildSafeboxMovePacket.guild_id)
}

// uint32 source_slot = 2;
inline void GDGuildSafeboxMovePacket::clear_source_slot() {
  _impl_.source_slot_ = 0u;
}
inline uint32_t GDGuildSafeboxMovePacket::_internal_source_slot() const {
  return _impl_.source_slot_;
}
inline uint32_t GDGuildSafeboxMovePacket::source_slot() const {
  // @@protoc_insertion_point(field_get:network.GDGuildSafeboxMovePacket.source_slot)
  return _internal_source_slot();
}
inline void GDGuildSafeboxMovePacket::_internal_set_source_slot(uint32_t value) {
  
  _impl_.source_slot_ = value;
}
inline void GDGuildSafeboxMovePacket::set_source_slot(uint32_t value) {
  _internal_set_source_slot(value);
  // @@protoc_insertion_point(field_set:network.GDGuildSafeboxMovePacket.source_slot)
}

// uint32 target_slot = 3;
inline void GDGuildSafeboxMovePacket::clear_target_slot() {
  _impl_.target_slot_ = 0u;
}
inline uint32_t GDGuildSafeboxMovePacket::_internal_target_slot() const {
  return _impl_.target_slot_;
}
inline uint32_t GDGuildSafeboxMovePacket::target_slot() const {
  // @@protoc_insertion_point(field_get:network.GDGuildSafeboxMovePacket.target_slot)
  return _internal_target_slot();
}
inline void GDGuildSafeboxMovePacket::_internal_set_target_slot(uint32_t value) {
  
  _impl_.target_slot_ = value;
}
inline void GDGuildSafeboxMovePacket::set_target_slot(uint32_t value) {
  _internal_set_target_slot(value);
  // @@protoc_insertion_point(field_set:network.GDGuildSafeboxMovePacket.target_slot)
}

// -------------------------------------------------------------------

// GDGuildSafeboxGiveGoldPacket

// uint32 pid = 1;
inline void GDGuildSafeboxGiveGoldPacket::clear_pid() {
  _impl_.pid_ = 0u;
}
inline uint32_t GDGuildSafeboxGiveGoldPacket::_internal_pid() const {
  return _impl_.pid_;
}
inline uint32_t GDGuildSafeboxGiveGoldPacket::pid() const {
  // @@protoc_insertion_point(field_get:network.GDGuildSafeboxGiveGoldPacket.pid)
  return _internal_pid();
}
inline void GDGuildSafeboxGiveGoldPacket::_internal_set_pid(uint32_t value) {
  
  _impl_.pid_ = value;
}
inline void GDGuildSafeboxGiveGoldPacket::set_pid(uint32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:network.GDGuildSafeboxGiveGoldPacket.pid)
}

// bytes name = 2;
inline void GDGuildSafeboxGiveGoldPacket::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GDGuildSafeboxGiveGoldPacket::name() const {
  // @@protoc_insertion_point(field_get:network.GDGuildSafeboxGiveGoldPacket.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GDGuildSafeboxGiveGoldPacket::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GDGuildSafeboxGiveGoldPacket.name)
}
inline std::string* GDGuildSafeboxGiveGoldPacket::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:network.GDGuildSafeboxGiveGoldPacket.name)
  return _s;
}
inline const std::string& GDGuildSafeboxGiveGoldPacket::_internal_name() const {
  return _impl_.name_.Get();
}
inline void GDGuildSafeboxGiveGoldPacket::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* GDGuildSafeboxGiveGoldPacket::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* GDGuildSafeboxGiveGoldPacket::release_name() {
  // @@protoc_insertion_point(field_release:network.GDGuildSafeboxGiveGoldPacket.name)
  return _impl_.name_.Release();
}
inline void GDGuildSafeboxGiveGoldPacket::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GDGuildSafeboxGiveGoldPacket.name)
}

// uint32 guild_id = 3;
inline void GDGuildSafeboxGiveGoldPacket::clear_guild_id() {
  _impl_.guild_id_ = 0u;
}
inline uint32_t GDGuildSafeboxGiveGoldPacket::_internal_guild_id() const {
  return _impl_.guild_id_;
}
inline uint32_t GDGuildSafeboxGiveGoldPacket::guild_id() const {
  // @@protoc_insertion_point(field_get:network.GDGuildSafeboxGiveGoldPacket.guild_id)
  return _internal_guild_id();
}
inline void GDGuildSafeboxGiveGoldPacket::_internal_set_guild_id(uint32_t value) {
  
  _impl_.guild_id_ = value;
}
inline void GDGuildSafeboxGiveGoldPacket::set_guild_id(uint32_t value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:network.GDGuildSafeboxGiveGoldPacket.guild_id)
}

// uint64 gold = 4;
inline void GDGuildSafeboxGiveGoldPacket::clear_gold() {
  _impl_.gold_ = uint64_t{0u};
}
inline uint64_t GDGuildSafeboxGiveGoldPacket::_internal_gold() const {
  return _impl_.gold_;
}
inline uint64_t GDGuildSafeboxGiveGoldPacket::gold() const {
  // @@protoc_insertion_point(field_get:network.GDGuildSafeboxGiveGoldPacket.gold)
  return _internal_gold();
}
inline void GDGuildSafeboxGiveGoldPacket::_internal_set_gold(uint64_t value) {
  
  _impl_.gold_ = value;
}
inline void GDGuildSafeboxGiveGoldPacket::set_gold(uint64_t value) {
  _internal_set_gold(value);
  // @@protoc_insertion_point(field_set:network.GDGuildSafeboxGiveGoldPacket.gold)
}

// -------------------------------------------------------------------

// GDGuildSafeboxGetGoldPacket

// uint32 pid = 1;
inline void GDGuildSafeboxGetGoldPacket::clear_pid() {
  _impl_.pid_ = 0u;
}
inline uint32_t GDGuildSafeboxGetGoldPacket::_internal_pid() const {
  return _impl_.pid_;
}
inline uint32_t GDGuildSafeboxGetGoldPacket::pid() const {
  // @@protoc_insertion_point(field_get:network.GDGuildSafeboxGetGoldPacket.pid)
  return _internal_pid();
}
inline void GDGuildSafeboxGetGoldPacket::_internal_set_pid(uint32_t value) {
  
  _impl_.pid_ = value;
}
inline void GDGuildSafeboxGetGoldPacket::set_pid(uint32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:network.GDGuildSafeboxGetGoldPacket.pid)
}

// bytes name = 2;
inline void GDGuildSafeboxGetGoldPacket::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GDGuildSafeboxGetGoldPacket::name() const {
  // @@protoc_insertion_point(field_get:network.GDGuildSafeboxGetGoldPacket.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GDGuildSafeboxGetGoldPacket::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:network.GDGuildSafeboxGetGoldPacket.name)
}
inline std::string* GDGuildSafeboxGetGoldPacket::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:network.GDGuildSafeboxGetGoldPacket.name)
  return _s;
}
inline const std::string& GDGuildSafeboxGetGoldPacket::_internal_name() const {
  return _impl_.name_.Get();
}
inline void GDGuildSafeboxGetGoldPacket::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* GDGuildSafeboxGetGoldPacket::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* GDGuildSafeboxGetGoldPacket::release_name() {
  // @@protoc_insertion_point(field_release:network.GDGuildSafeboxGetGoldPacket.name)
  return _impl_.name_.Release();
}
inline void GDGuildSafeboxGetGoldPacket::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:network.GDGuildSafeboxGetGoldPacket.name)
}

// uint32 guild_id = 3;
inline void GDGuildSafeboxGetGoldPacket::clear_guild_id() {
  _impl_.guild_id_ = 0u;
}
inline uint32_t GDGuildSafeboxGetGoldPacket::_internal_guild_id() const {
  return _impl_.guild_id_;
}
inline uint32_t GDGuildSafeboxGetGoldPacket::guild_id() const {
  // @@protoc_insertion_point(field_get:network.GDGuildSafeboxGetGoldPacket.guild_id)
  return _internal_guild_id();
}
inline void GDGuildSafeboxGetGoldPacket::_internal_set_guild_id(uint32_t value) {
  
  _impl_.guild_id_ = value;
}
inline void GDGuildSafeboxGetGoldPacket::set_guild_id(uint32_t value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:network.GDGuildSafeboxGetGoldPacket.guild_id)
}

// uint64 gold = 4;
inline void GDGuildSafeboxGetGoldPacket::clear_gold() {
  _impl_.gold_ = uint64_t{0u};
}
inline uint64_t GDGuildSafeboxGetGoldPacket::_internal_gold() const {
  return _impl_.gold_;
}
inline uint64_t GDGuildSafeboxGetGoldPacket::gold() const {
  // @@protoc_insertion_point(field_get:network.GDGuildSafeboxGetGoldPacket.gold)
  return _internal_gold();
}
inline void GDGuildSafeboxGetGoldPacket::_internal_set_gold(uint64_t value) {
  
  _impl_.gold_ = value;
}
inline void GDGuildSafeboxGetGoldPacket::set_gold(uint64_t value) {
  _internal_set_gold(value);
  // @@protoc_insertion_point(field_set:network.GDGuildSafeboxGetGoldPacket.gold)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace network

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_gd_5fpackets_2eproto
