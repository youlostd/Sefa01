// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gd_packets.proto

#include "protobuf_gd_packets.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace network {
PROTOBUF_CONSTEXPR GDBootPacket::GDBootPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ip_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.item_range_start_)*/0u
  , /*decltype(_impl_.item_range_end_)*/0u
  , /*decltype(_impl_.channel_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GDBootPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GDBootPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GDBootPacketDefaultTypeInternal() {}
  union {
    GDBootPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GDBootPacketDefaultTypeInternal _GDBootPacket_default_instance_;
PROTOBUF_CONSTEXPR GDSetupPacket::GDSetupPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.maps_)*/{}
  , /*decltype(_impl_._maps_cached_byte_size_)*/{0}
  , /*decltype(_impl_.logins_)*/{}
  , /*decltype(_impl_.public_ip_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.channel_)*/0u
  , /*decltype(_impl_.listen_port_)*/0u
  , /*decltype(_impl_.p2p_port_)*/0u
  , /*decltype(_impl_.auth_server_)*/false
  , /*decltype(_impl_.processor_core_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GDSetupPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GDSetupPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GDSetupPacketDefaultTypeInternal() {}
  union {
    GDSetupPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GDSetupPacketDefaultTypeInternal _GDSetupPacket_default_instance_;
PROTOBUF_CONSTEXPR GDUpdateChannelStatusPacket::GDUpdateChannelStatusPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.port_)*/0u
  , /*decltype(_impl_.status_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GDUpdateChannelStatusPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GDUpdateChannelStatusPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GDUpdateChannelStatusPacketDefaultTypeInternal() {}
  union {
    GDUpdateChannelStatusPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GDUpdateChannelStatusPacketDefaultTypeInternal _GDUpdateChannelStatusPacket_default_instance_;
PROTOBUF_CONSTEXPR GDBlockExceptionPacket::GDBlockExceptionPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.login_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.cmd_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GDBlockExceptionPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GDBlockExceptionPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GDBlockExceptionPacketDefaultTypeInternal() {}
  union {
    GDBlockExceptionPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GDBlockExceptionPacketDefaultTypeInternal _GDBlockExceptionPacket_default_instance_;
PROTOBUF_CONSTEXPR GDPlayerCountPacket::GDPlayerCountPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.count_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GDPlayerCountPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GDPlayerCountPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GDPlayerCountPacketDefaultTypeInternal() {}
  union {
    GDPlayerCountPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GDPlayerCountPacketDefaultTypeInternal _GDPlayerCountPacket_default_instance_;
PROTOBUF_CONSTEXPR GDReloadAdminPacket::GDReloadAdminPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ip_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GDReloadAdminPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GDReloadAdminPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GDReloadAdminPacketDefaultTypeInternal() {}
  union {
    GDReloadAdminPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GDReloadAdminPacketDefaultTypeInternal _GDReloadAdminPacket_default_instance_;
PROTOBUF_CONSTEXPR GDRecvShutdownPacket::GDRecvShutdownPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.start_sec_)*/0
  , /*decltype(_impl_.maintenance_)*/false
  , /*decltype(_impl_.maintenance_duration_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GDRecvShutdownPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GDRecvShutdownPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GDRecvShutdownPacketDefaultTypeInternal() {}
  union {
    GDRecvShutdownPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GDRecvShutdownPacketDefaultTypeInternal _GDRecvShutdownPacket_default_instance_;
PROTOBUF_CONSTEXPR GDAuthLoginPacket::GDAuthLoginPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.client_keys_)*/{}
  , /*decltype(_impl_._client_keys_cached_byte_size_)*/{0}
  , /*decltype(_impl_.premium_times_)*/{}
  , /*decltype(_impl_._premium_times_cached_byte_size_)*/{0}
  , /*decltype(_impl_.login_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.hwid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.social_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.hwid2_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.account_id_)*/0u
  , /*decltype(_impl_.login_key_)*/0u
  , /*decltype(_impl_.bill_type_)*/0u
  , /*decltype(_impl_.bill_id_)*/0u
  , /*decltype(_impl_.language_)*/0u
  , /*decltype(_impl_.tradeblock_)*/0u
  , /*decltype(_impl_.hwid2ban_)*/0u
  , /*decltype(_impl_.coins_)*/false
  , /*decltype(_impl_.temp_login_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GDAuthLoginPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GDAuthLoginPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GDAuthLoginPacketDefaultTypeInternal() {}
  union {
    GDAuthLoginPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GDAuthLoginPacketDefaultTypeInternal _GDAuthLoginPacket_default_instance_;
PROTOBUF_CONSTEXPR GDLoginByKeyPacket::GDLoginByKeyPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.client_key_)*/{}
  , /*decltype(_impl_._client_key_cached_byte_size_)*/{0}
  , /*decltype(_impl_.login_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ip_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.login_key_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GDLoginByKeyPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GDLoginByKeyPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GDLoginByKeyPacketDefaultTypeInternal() {}
  union {
    GDLoginByKeyPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GDLoginByKeyPacketDefaultTypeInternal _GDLoginByKeyPacket_default_instance_;
PROTOBUF_CONSTEXPR GDPlayerCreatePacket::GDPlayerCreatePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.login_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.passwd_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.player_table_)*/nullptr
  , /*decltype(_impl_.account_id_)*/0u
  , /*decltype(_impl_.account_index_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GDPlayerCreatePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GDPlayerCreatePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GDPlayerCreatePacketDefaultTypeInternal() {}
  union {
    GDPlayerCreatePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GDPlayerCreatePacketDefaultTypeInternal _GDPlayerCreatePacket_default_instance_;
PROTOBUF_CONSTEXPR GDPlayerDeletePacket::GDPlayerDeletePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.login_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.private_code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.player_id_)*/0u
  , /*decltype(_impl_.account_index_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GDPlayerDeletePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GDPlayerDeletePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GDPlayerDeletePacketDefaultTypeInternal() {}
  union {
    GDPlayerDeletePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GDPlayerDeletePacketDefaultTypeInternal _GDPlayerDeletePacket_default_instance_;
PROTOBUF_CONSTEXPR GDChangeNamePacket::GDChangeNamePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GDChangeNamePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GDChangeNamePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GDChangeNamePacketDefaultTypeInternal() {}
  union {
    GDChangeNamePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GDChangeNamePacketDefaultTypeInternal _GDChangeNamePacket_default_instance_;
PROTOBUF_CONSTEXPR GDEmpireSelectPacket::GDEmpireSelectPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.account_id_)*/0u
  , /*decltype(_impl_.empire_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GDEmpireSelectPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GDEmpireSelectPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GDEmpireSelectPacketDefaultTypeInternal() {}
  union {
    GDEmpireSelectPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GDEmpireSelectPacketDefaultTypeInternal _GDEmpireSelectPacket_default_instance_;
PROTOBUF_CONSTEXPR GDSelectUpdateHairPacket::GDSelectUpdateHairPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pid_)*/0u
  , /*decltype(_impl_.hair_part_)*/0u
  , /*decltype(_impl_.hair_base_part_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GDSelectUpdateHairPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GDSelectUpdateHairPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GDSelectUpdateHairPacketDefaultTypeInternal() {}
  union {
    GDSelectUpdateHairPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GDSelectUpdateHairPacketDefaultTypeInternal _GDSelectUpdateHairPacket_default_instance_;
PROTOBUF_CONSTEXPR GDBillingExpirePacket::GDBillingExpirePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.login_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.bill_type_)*/0u
  , /*decltype(_impl_.remain_seconds_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GDBillingExpirePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GDBillingExpirePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GDBillingExpirePacketDefaultTypeInternal() {}
  union {
    GDBillingExpirePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GDBillingExpirePacketDefaultTypeInternal _GDBillingExpirePacket_default_instance_;
PROTOBUF_CONSTEXPR GDBillingCheckPacket::GDBillingCheckPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.keys_)*/{}
  , /*decltype(_impl_._keys_cached_byte_size_)*/{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GDBillingCheckPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GDBillingCheckPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GDBillingCheckPacketDefaultTypeInternal() {}
  union {
    GDBillingCheckPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GDBillingCheckPacketDefaultTypeInternal _GDBillingCheckPacket_default_instance_;
PROTOBUF_CONSTEXPR GDDisconnectPacket::GDDisconnectPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.login_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GDDisconnectPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GDDisconnectPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GDDisconnectPacketDefaultTypeInternal() {}
  union {
    GDDisconnectPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GDDisconnectPacketDefaultTypeInternal _GDDisconnectPacket_default_instance_;
PROTOBUF_CONSTEXPR GDValidLogoutPacket::GDValidLogoutPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.account_id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GDValidLogoutPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GDValidLogoutPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GDValidLogoutPacketDefaultTypeInternal() {}
  union {
    GDValidLogoutPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GDValidLogoutPacketDefaultTypeInternal _GDValidLogoutPacket_default_instance_;
PROTOBUF_CONSTEXPR GDPlayerLoadPacket::GDPlayerLoadPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.account_id_)*/0u
  , /*decltype(_impl_.player_id_)*/0u
  , /*decltype(_impl_.account_index_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GDPlayerLoadPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GDPlayerLoadPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GDPlayerLoadPacketDefaultTypeInternal() {}
  union {
    GDPlayerLoadPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GDPlayerLoadPacketDefaultTypeInternal _GDPlayerLoadPacket_default_instance_;
PROTOBUF_CONSTEXPR GDSafeboxLoadPacket::GDSafeboxLoadPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.login_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.password_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.account_id_)*/0u
  , /*decltype(_impl_.is_mall_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GDSafeboxLoadPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GDSafeboxLoadPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GDSafeboxLoadPacketDefaultTypeInternal() {}
  union {
    GDSafeboxLoadPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GDSafeboxLoadPacketDefaultTypeInternal _GDSafeboxLoadPacket_default_instance_;
PROTOBUF_CONSTEXPR GDReqHorseNamePacket::GDReqHorseNamePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GDReqHorseNamePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GDReqHorseNamePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GDReqHorseNamePacketDefaultTypeInternal() {}
  union {
    GDReqHorseNamePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GDReqHorseNamePacketDefaultTypeInternal _GDReqHorseNamePacket_default_instance_;
PROTOBUF_CONSTEXPR GDPlayerSavePacket::GDPlayerSavePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GDPlayerSavePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GDPlayerSavePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GDPlayerSavePacketDefaultTypeInternal() {}
  union {
    GDPlayerSavePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GDPlayerSavePacketDefaultTypeInternal _GDPlayerSavePacket_default_instance_;
PROTOBUF_CONSTEXPR GDItemSavePacket::GDItemSavePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GDItemSavePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GDItemSavePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GDItemSavePacketDefaultTypeInternal() {}
  union {
    GDItemSavePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GDItemSavePacketDefaultTypeInternal _GDItemSavePacket_default_instance_;
PROTOBUF_CONSTEXPR GDQuestSavePacket::GDQuestSavePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.datas_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GDQuestSavePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GDQuestSavePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GDQuestSavePacketDefaultTypeInternal() {}
  union {
    GDQuestSavePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GDQuestSavePacketDefaultTypeInternal _GDQuestSavePacket_default_instance_;
PROTOBUF_CONSTEXPR GDPetSavePacket::GDPetSavePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GDPetSavePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GDPetSavePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GDPetSavePacketDefaultTypeInternal() {}
  union {
    GDPetSavePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GDPetSavePacketDefaultTypeInternal _GDPetSavePacket_default_instance_;
PROTOBUF_CONSTEXPR GDSafeboxSavePacket::GDSafeboxSavePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_.account_id_)*/0u
  , /*decltype(_impl_.size_)*/0u
  , /*decltype(_impl_.gold_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GDSafeboxSavePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GDSafeboxSavePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GDSafeboxSavePacketDefaultTypeInternal() {}
  union {
    GDSafeboxSavePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GDSafeboxSavePacketDefaultTypeInternal _GDSafeboxSavePacket_default_instance_;
PROTOBUF_CONSTEXPR GDItemDestroyPacket::GDItemDestroyPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.item_id_)*/0u
  , /*decltype(_impl_.pid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GDItemDestroyPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GDItemDestroyPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GDItemDestroyPacketDefaultTypeInternal() {}
  union {
    GDItemDestroyPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GDItemDestroyPacketDefaultTypeInternal _GDItemDestroyPacket_default_instance_;
PROTOBUF_CONSTEXPR GDSkillColorSavePacket::GDSkillColorSavePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.skill_colors_)*/{}
  , /*decltype(_impl_._skill_colors_cached_byte_size_)*/{0}
  , /*decltype(_impl_.player_id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GDSkillColorSavePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GDSkillColorSavePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GDSkillColorSavePacketDefaultTypeInternal() {}
  union {
    GDSkillColorSavePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GDSkillColorSavePacketDefaultTypeInternal _GDSkillColorSavePacket_default_instance_;
PROTOBUF_CONSTEXPR GDPlayerRuneSavePacket::GDPlayerRuneSavePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.runes_)*/{}
  , /*decltype(_impl_._runes_cached_byte_size_)*/{0}
  , /*decltype(_impl_.player_id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GDPlayerRuneSavePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GDPlayerRuneSavePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GDPlayerRuneSavePacketDefaultTypeInternal() {}
  union {
    GDPlayerRuneSavePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GDPlayerRuneSavePacketDefaultTypeInternal _GDPlayerRuneSavePacket_default_instance_;
PROTOBUF_CONSTEXPR GDEquipmentPageDeletePacket::GDEquipmentPageDeletePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GDEquipmentPageDeletePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GDEquipmentPageDeletePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GDEquipmentPageDeletePacketDefaultTypeInternal() {}
  union {
    GDEquipmentPageDeletePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GDEquipmentPageDeletePacketDefaultTypeInternal _GDEquipmentPageDeletePacket_default_instance_;
PROTOBUF_CONSTEXPR GDEquipmentPageSavePacket::GDEquipmentPageSavePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pages_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GDEquipmentPageSavePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GDEquipmentPageSavePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GDEquipmentPageSavePacketDefaultTypeInternal() {}
  union {
    GDEquipmentPageSavePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GDEquipmentPageSavePacketDefaultTypeInternal _GDEquipmentPageSavePacket_default_instance_;
PROTOBUF_CONSTEXPR GDFlushCachePacket::GDFlushCachePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GDFlushCachePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GDFlushCachePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GDFlushCachePacketDefaultTypeInternal() {}
  union {
    GDFlushCachePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GDFlushCachePacketDefaultTypeInternal _GDFlushCachePacket_default_instance_;
PROTOBUF_CONSTEXPR GDItemFlushPacket::GDItemFlushPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.item_id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GDItemFlushPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GDItemFlushPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GDItemFlushPacketDefaultTypeInternal() {}
  union {
    GDItemFlushPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GDItemFlushPacketDefaultTypeInternal _GDItemFlushPacket_default_instance_;
PROTOBUF_CONSTEXPR GDLogoutPacket::GDLogoutPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.login_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.passwd_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GDLogoutPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GDLogoutPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GDLogoutPacketDefaultTypeInternal() {}
  union {
    GDLogoutPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GDLogoutPacketDefaultTypeInternal _GDLogoutPacket_default_instance_;
PROTOBUF_CONSTEXPR GDSafeboxChangeSizePacket::GDSafeboxChangeSizePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.account_id_)*/0u
  , /*decltype(_impl_.size_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GDSafeboxChangeSizePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GDSafeboxChangeSizePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GDSafeboxChangeSizePacketDefaultTypeInternal() {}
  union {
    GDSafeboxChangeSizePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GDSafeboxChangeSizePacketDefaultTypeInternal _GDSafeboxChangeSizePacket_default_instance_;
PROTOBUF_CONSTEXPR GDSafeboxChangePasswordPacket::GDSafeboxChangePasswordPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.old_password_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.new_password_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.account_id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GDSafeboxChangePasswordPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GDSafeboxChangePasswordPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GDSafeboxChangePasswordPacketDefaultTypeInternal() {}
  union {
    GDSafeboxChangePasswordPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GDSafeboxChangePasswordPacketDefaultTypeInternal _GDSafeboxChangePasswordPacket_default_instance_;
PROTOBUF_CONSTEXPR GDAddAffectPacket::GDAddAffectPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.elem_)*/nullptr
  , /*decltype(_impl_.pid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GDAddAffectPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GDAddAffectPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GDAddAffectPacketDefaultTypeInternal() {}
  union {
    GDAddAffectPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GDAddAffectPacketDefaultTypeInternal _GDAddAffectPacket_default_instance_;
PROTOBUF_CONSTEXPR GDRemoveAffectPacket::GDRemoveAffectPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pid_)*/0u
  , /*decltype(_impl_.type_)*/0u
  , /*decltype(_impl_.apply_on_)*/0u
  , /*decltype(_impl_.apply_value_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GDRemoveAffectPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GDRemoveAffectPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GDRemoveAffectPacketDefaultTypeInternal() {}
  union {
    GDRemoveAffectPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GDRemoveAffectPacketDefaultTypeInternal _GDRemoveAffectPacket_default_instance_;
PROTOBUF_CONSTEXPR GDHighscoreRegisterPacket::GDHighscoreRegisterPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.board_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pid_)*/0u
  , /*decltype(_impl_.value_)*/0
  , /*decltype(_impl_.dir_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GDHighscoreRegisterPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GDHighscoreRegisterPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GDHighscoreRegisterPacketDefaultTypeInternal() {}
  union {
    GDHighscoreRegisterPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GDHighscoreRegisterPacketDefaultTypeInternal _GDHighscoreRegisterPacket_default_instance_;
PROTOBUF_CONSTEXPR GDSMSPacket::GDSMSPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.from_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.to_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mobile_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.msg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GDSMSPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GDSMSPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GDSMSPacketDefaultTypeInternal() {}
  union {
    GDSMSPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GDSMSPacketDefaultTypeInternal _GDSMSPacket_default_instance_;
PROTOBUF_CONSTEXPR GDRequestGuildPrivPacket::GDRequestGuildPrivPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_)*/0u
  , /*decltype(_impl_.value_)*/0
  , /*decltype(_impl_.guild_id_)*/0u
  , /*decltype(_impl_.duration_sec_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GDRequestGuildPrivPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GDRequestGuildPrivPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GDRequestGuildPrivPacketDefaultTypeInternal() {}
  union {
    GDRequestGuildPrivPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GDRequestGuildPrivPacketDefaultTypeInternal _GDRequestGuildPrivPacket_default_instance_;
PROTOBUF_CONSTEXPR GDRequestEmpirePrivPacket::GDRequestEmpirePrivPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_)*/0u
  , /*decltype(_impl_.value_)*/0
  , /*decltype(_impl_.empire_)*/0u
  , /*decltype(_impl_.duration_sec_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GDRequestEmpirePrivPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GDRequestEmpirePrivPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GDRequestEmpirePrivPacketDefaultTypeInternal() {}
  union {
    GDRequestEmpirePrivPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GDRequestEmpirePrivPacketDefaultTypeInternal _GDRequestEmpirePrivPacket_default_instance_;
PROTOBUF_CONSTEXPR GDRequestCharacterPrivPacket::GDRequestCharacterPrivPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_)*/0u
  , /*decltype(_impl_.value_)*/0
  , /*decltype(_impl_.pid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GDRequestCharacterPrivPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GDRequestCharacterPrivPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GDRequestCharacterPrivPacketDefaultTypeInternal() {}
  union {
    GDRequestCharacterPrivPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GDRequestCharacterPrivPacketDefaultTypeInternal _GDRequestCharacterPrivPacket_default_instance_;
PROTOBUF_CONSTEXPR GDMoneyLogPacket::GDMoneyLogPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_)*/0u
  , /*decltype(_impl_.vnum_)*/0u
  , /*decltype(_impl_.gold_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GDMoneyLogPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GDMoneyLogPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GDMoneyLogPacketDefaultTypeInternal() {}
  union {
    GDMoneyLogPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GDMoneyLogPacketDefaultTypeInternal _GDMoneyLogPacket_default_instance_;
PROTOBUF_CONSTEXPR GDSetEventFlagPacket::GDSetEventFlagPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.flag_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_)*/0
  , /*decltype(_impl_.is_add_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GDSetEventFlagPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GDSetEventFlagPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GDSetEventFlagPacketDefaultTypeInternal() {}
  union {
    GDSetEventFlagPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GDSetEventFlagPacketDefaultTypeInternal _GDSetEventFlagPacket_default_instance_;
PROTOBUF_CONSTEXPR GDCreateObjectPacket::GDCreateObjectPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.vnum_)*/0u
  , /*decltype(_impl_.land_id_)*/0u
  , /*decltype(_impl_.map_index_)*/0u
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.rot_x_)*/0
  , /*decltype(_impl_.rot_y_)*/0
  , /*decltype(_impl_.rot_z_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GDCreateObjectPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GDCreateObjectPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GDCreateObjectPacketDefaultTypeInternal() {}
  union {
    GDCreateObjectPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GDCreateObjectPacketDefaultTypeInternal _GDCreateObjectPacket_default_instance_;
PROTOBUF_CONSTEXPR GDDeleteObjectPacket::GDDeleteObjectPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GDDeleteObjectPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GDDeleteObjectPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GDDeleteObjectPacketDefaultTypeInternal() {}
  union {
    GDDeleteObjectPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GDDeleteObjectPacketDefaultTypeInternal _GDDeleteObjectPacket_default_instance_;
PROTOBUF_CONSTEXPR GDUpdateLandPacket::GDUpdateLandPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.guild_id_)*/0u
  , /*decltype(_impl_.land_id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GDUpdateLandPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GDUpdateLandPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GDUpdateLandPacketDefaultTypeInternal() {}
  union {
    GDUpdateLandPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GDUpdateLandPacketDefaultTypeInternal _GDUpdateLandPacket_default_instance_;
PROTOBUF_CONSTEXPR GDVCardPacket::GDVCardPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sell_character_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sell_account_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.buy_character_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.buy_account_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GDVCardPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GDVCardPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GDVCardPacketDefaultTypeInternal() {}
  union {
    GDVCardPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GDVCardPacketDefaultTypeInternal _GDVCardPacket_default_instance_;
PROTOBUF_CONSTEXPR GDBlockChatPacket::GDBlockChatPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.duration_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GDBlockChatPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GDBlockChatPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GDBlockChatPacketDefaultTypeInternal() {}
  union {
    GDBlockChatPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GDBlockChatPacketDefaultTypeInternal _GDBlockChatPacket_default_instance_;
PROTOBUF_CONSTEXPR GDMyShopPricelistUpdatePacket::GDMyShopPricelistUpdatePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.price_info_)*/{}
  , /*decltype(_impl_.owner_id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GDMyShopPricelistUpdatePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GDMyShopPricelistUpdatePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GDMyShopPricelistUpdatePacketDefaultTypeInternal() {}
  union {
    GDMyShopPricelistUpdatePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GDMyShopPricelistUpdatePacketDefaultTypeInternal _GDMyShopPricelistUpdatePacket_default_instance_;
PROTOBUF_CONSTEXPR GDMyShopPricelistRequestPacket::GDMyShopPricelistRequestPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GDMyShopPricelistRequestPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GDMyShopPricelistRequestPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GDMyShopPricelistRequestPacketDefaultTypeInternal() {}
  union {
    GDMyShopPricelistRequestPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GDMyShopPricelistRequestPacketDefaultTypeInternal _GDMyShopPricelistRequestPacket_default_instance_;
PROTOBUF_CONSTEXPR GDUpdateHorseNamePacket::GDUpdateHorseNamePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.horse_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GDUpdateHorseNamePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GDUpdateHorseNamePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GDUpdateHorseNamePacketDefaultTypeInternal() {}
  union {
    GDUpdateHorseNamePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GDUpdateHorseNamePacketDefaultTypeInternal _GDUpdateHorseNamePacket_default_instance_;
PROTOBUF_CONSTEXPR GDRequestChargeCashPacket::GDRequestChargeCashPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.account_id_)*/0u
  , /*decltype(_impl_.amount_)*/0u
  , /*decltype(_impl_.charge_type_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GDRequestChargeCashPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GDRequestChargeCashPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GDRequestChargeCashPacketDefaultTypeInternal() {}
  union {
    GDRequestChargeCashPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GDRequestChargeCashPacketDefaultTypeInternal _GDRequestChargeCashPacket_default_instance_;
PROTOBUF_CONSTEXPR GDDeleteAwardIDPacket::GDDeleteAwardIDPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GDDeleteAwardIDPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GDDeleteAwardIDPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GDDeleteAwardIDPacketDefaultTypeInternal() {}
  union {
    GDDeleteAwardIDPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GDDeleteAwardIDPacketDefaultTypeInternal _GDDeleteAwardIDPacket_default_instance_;
PROTOBUF_CONSTEXPR GDChannelSwitchPacket::GDChannelSwitchPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.channel_)*/0u
  , /*decltype(_impl_.map_index_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GDChannelSwitchPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GDChannelSwitchPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GDChannelSwitchPacketDefaultTypeInternal() {}
  union {
    GDChannelSwitchPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GDChannelSwitchPacketDefaultTypeInternal _GDChannelSwitchPacket_default_instance_;
PROTOBUF_CONSTEXPR GDSpawnMobTimedPacket::GDSpawnMobTimedPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.mob_vnum_)*/0u
  , /*decltype(_impl_.map_index_)*/0u
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.channel_)*/0u
  , /*decltype(_impl_.target_time_)*/0
  , /*decltype(_impl_.despawn_time_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GDSpawnMobTimedPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GDSpawnMobTimedPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GDSpawnMobTimedPacketDefaultTypeInternal() {}
  union {
    GDSpawnMobTimedPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GDSpawnMobTimedPacketDefaultTypeInternal _GDSpawnMobTimedPacket_default_instance_;
PROTOBUF_CONSTEXPR GDForceItemDeletePacket::GDForceItemDeletePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GDForceItemDeletePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GDForceItemDeletePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GDForceItemDeletePacketDefaultTypeInternal() {}
  union {
    GDForceItemDeletePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GDForceItemDeletePacketDefaultTypeInternal _GDForceItemDeletePacket_default_instance_;
PROTOBUF_CONSTEXPR GDCombatZoneSkillsCachePacket::GDCombatZoneSkillsCachePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pid_)*/0u
  , /*decltype(_impl_.skill_level1_)*/0u
  , /*decltype(_impl_.skill_level2_)*/0u
  , /*decltype(_impl_.skill_level3_)*/0u
  , /*decltype(_impl_.skill_level4_)*/0u
  , /*decltype(_impl_.skill_level5_)*/0u
  , /*decltype(_impl_.skill_level6_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GDCombatZoneSkillsCachePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GDCombatZoneSkillsCachePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GDCombatZoneSkillsCachePacketDefaultTypeInternal() {}
  union {
    GDCombatZoneSkillsCachePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GDCombatZoneSkillsCachePacketDefaultTypeInternal _GDCombatZoneSkillsCachePacket_default_instance_;
PROTOBUF_CONSTEXPR GDWhisperPlayerExistCheckPacket::GDWhisperPlayerExistCheckPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.target_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pid_)*/0u
  , /*decltype(_impl_.is_gm_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GDWhisperPlayerExistCheckPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GDWhisperPlayerExistCheckPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GDWhisperPlayerExistCheckPacketDefaultTypeInternal() {}
  union {
    GDWhisperPlayerExistCheckPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GDWhisperPlayerExistCheckPacketDefaultTypeInternal _GDWhisperPlayerExistCheckPacket_default_instance_;
PROTOBUF_CONSTEXPR GDWhisperPlayerMessageOfflinePacket::GDWhisperPlayerMessageOfflinePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.target_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pid_)*/0u
  , /*decltype(_impl_.is_gm_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GDWhisperPlayerMessageOfflinePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GDWhisperPlayerMessageOfflinePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GDWhisperPlayerMessageOfflinePacketDefaultTypeInternal() {}
  union {
    GDWhisperPlayerMessageOfflinePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GDWhisperPlayerMessageOfflinePacketDefaultTypeInternal _GDWhisperPlayerMessageOfflinePacket_default_instance_;
PROTOBUF_CONSTEXPR GDLoadItemRefundPacket::GDLoadItemRefundPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GDLoadItemRefundPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GDLoadItemRefundPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GDLoadItemRefundPacketDefaultTypeInternal() {}
  union {
    GDLoadItemRefundPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GDLoadItemRefundPacketDefaultTypeInternal _GDLoadItemRefundPacket_default_instance_;
PROTOBUF_CONSTEXPR GDItemDestroyLogPacket::GDItemDestroyLogPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.item_)*/nullptr
  , /*decltype(_impl_.type_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GDItemDestroyLogPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GDItemDestroyLogPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GDItemDestroyLogPacketDefaultTypeInternal() {}
  union {
    GDItemDestroyLogPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GDItemDestroyLogPacketDefaultTypeInternal _GDItemDestroyLogPacket_default_instance_;
PROTOBUF_CONSTEXPR GDItemTimedIgnorePacket::GDItemTimedIgnorePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.item_id_)*/0u
  , /*decltype(_impl_.ignore_duration_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GDItemTimedIgnorePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GDItemTimedIgnorePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GDItemTimedIgnorePacketDefaultTypeInternal() {}
  union {
    GDItemTimedIgnorePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GDItemTimedIgnorePacketDefaultTypeInternal _GDItemTimedIgnorePacket_default_instance_;
PROTOBUF_CONSTEXPR GDMarriageAddPacket::GDMarriageAddPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name1_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name2_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pid1_)*/0u
  , /*decltype(_impl_.pid2_)*/0u
  , /*decltype(_impl_.marry_time_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GDMarriageAddPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GDMarriageAddPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GDMarriageAddPacketDefaultTypeInternal() {}
  union {
    GDMarriageAddPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GDMarriageAddPacketDefaultTypeInternal _GDMarriageAddPacket_default_instance_;
PROTOBUF_CONSTEXPR GDMarriageUpdatePacket::GDMarriageUpdatePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pid1_)*/0u
  , /*decltype(_impl_.pid2_)*/0u
  , /*decltype(_impl_.love_point_)*/0
  , /*decltype(_impl_.married_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GDMarriageUpdatePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GDMarriageUpdatePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GDMarriageUpdatePacketDefaultTypeInternal() {}
  union {
    GDMarriageUpdatePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GDMarriageUpdatePacketDefaultTypeInternal _GDMarriageUpdatePacket_default_instance_;
PROTOBUF_CONSTEXPR GDMarriageRemovePacket::GDMarriageRemovePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pid1_)*/0u
  , /*decltype(_impl_.pid2_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GDMarriageRemovePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GDMarriageRemovePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GDMarriageRemovePacketDefaultTypeInternal() {}
  union {
    GDMarriageRemovePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GDMarriageRemovePacketDefaultTypeInternal _GDMarriageRemovePacket_default_instance_;
PROTOBUF_CONSTEXPR GDMarriageBreakPacket::GDMarriageBreakPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pid1_)*/0u
  , /*decltype(_impl_.pid2_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GDMarriageBreakPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GDMarriageBreakPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GDMarriageBreakPacketDefaultTypeInternal() {}
  union {
    GDMarriageBreakPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GDMarriageBreakPacketDefaultTypeInternal _GDMarriageBreakPacket_default_instance_;
PROTOBUF_CONSTEXPR GDWeddingRequestPacket::GDWeddingRequestPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pid1_)*/0u
  , /*decltype(_impl_.pid2_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GDWeddingRequestPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GDWeddingRequestPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GDWeddingRequestPacketDefaultTypeInternal() {}
  union {
    GDWeddingRequestPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GDWeddingRequestPacketDefaultTypeInternal _GDWeddingRequestPacket_default_instance_;
PROTOBUF_CONSTEXPR GDWeddingReadyPacket::GDWeddingReadyPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pid1_)*/0u
  , /*decltype(_impl_.pid2_)*/0u
  , /*decltype(_impl_.map_index_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GDWeddingReadyPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GDWeddingReadyPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GDWeddingReadyPacketDefaultTypeInternal() {}
  union {
    GDWeddingReadyPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GDWeddingReadyPacketDefaultTypeInternal _GDWeddingReadyPacket_default_instance_;
PROTOBUF_CONSTEXPR GDWeddingEndPacket::GDWeddingEndPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pid1_)*/0u
  , /*decltype(_impl_.pid2_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GDWeddingEndPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GDWeddingEndPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GDWeddingEndPacketDefaultTypeInternal() {}
  union {
    GDWeddingEndPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GDWeddingEndPacketDefaultTypeInternal _GDWeddingEndPacket_default_instance_;
PROTOBUF_CONSTEXPR GDPartyCreatePacket::GDPartyCreatePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.leader_pid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GDPartyCreatePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GDPartyCreatePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GDPartyCreatePacketDefaultTypeInternal() {}
  union {
    GDPartyCreatePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GDPartyCreatePacketDefaultTypeInternal _GDPartyCreatePacket_default_instance_;
PROTOBUF_CONSTEXPR GDPartyDeletePacket::GDPartyDeletePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.leader_pid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GDPartyDeletePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GDPartyDeletePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GDPartyDeletePacketDefaultTypeInternal() {}
  union {
    GDPartyDeletePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GDPartyDeletePacketDefaultTypeInternal _GDPartyDeletePacket_default_instance_;
PROTOBUF_CONSTEXPR GDPartyAddPacket::GDPartyAddPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.leader_pid_)*/0u
  , /*decltype(_impl_.pid_)*/0u
  , /*decltype(_impl_.state_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GDPartyAddPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GDPartyAddPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GDPartyAddPacketDefaultTypeInternal() {}
  union {
    GDPartyAddPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GDPartyAddPacketDefaultTypeInternal _GDPartyAddPacket_default_instance_;
PROTOBUF_CONSTEXPR GDPartyRemovePacket::GDPartyRemovePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.leader_pid_)*/0u
  , /*decltype(_impl_.pid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GDPartyRemovePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GDPartyRemovePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GDPartyRemovePacketDefaultTypeInternal() {}
  union {
    GDPartyRemovePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GDPartyRemovePacketDefaultTypeInternal _GDPartyRemovePacket_default_instance_;
PROTOBUF_CONSTEXPR GDPartyStateChangePacket::GDPartyStateChangePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.leader_pid_)*/0u
  , /*decltype(_impl_.pid_)*/0u
  , /*decltype(_impl_.role_)*/0u
  , /*decltype(_impl_.flag_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GDPartyStateChangePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GDPartyStateChangePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GDPartyStateChangePacketDefaultTypeInternal() {}
  union {
    GDPartyStateChangePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GDPartyStateChangePacketDefaultTypeInternal _GDPartyStateChangePacket_default_instance_;
PROTOBUF_CONSTEXPR GDPartySetMemberLevelPacket::GDPartySetMemberLevelPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.leader_pid_)*/0u
  , /*decltype(_impl_.pid_)*/0u
  , /*decltype(_impl_.level_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GDPartySetMemberLevelPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GDPartySetMemberLevelPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GDPartySetMemberLevelPacketDefaultTypeInternal() {}
  union {
    GDPartySetMemberLevelPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GDPartySetMemberLevelPacketDefaultTypeInternal _GDPartySetMemberLevelPacket_default_instance_;
PROTOBUF_CONSTEXPR GDGuildCreatePacket::GDGuildCreatePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.guild_id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GDGuildCreatePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GDGuildCreatePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GDGuildCreatePacketDefaultTypeInternal() {}
  union {
    GDGuildCreatePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GDGuildCreatePacketDefaultTypeInternal _GDGuildCreatePacket_default_instance_;
PROTOBUF_CONSTEXPR GDGuildSkillUpdatePacket::GDGuildSkillUpdatePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.skill_levels_)*/{}
  , /*decltype(_impl_._skill_levels_cached_byte_size_)*/{0}
  , /*decltype(_impl_.guild_id_)*/0u
  , /*decltype(_impl_.amount_)*/0
  , /*decltype(_impl_.skill_point_)*/0u
  , /*decltype(_impl_.save_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GDGuildSkillUpdatePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GDGuildSkillUpdatePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GDGuildSkillUpdatePacketDefaultTypeInternal() {}
  union {
    GDGuildSkillUpdatePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GDGuildSkillUpdatePacketDefaultTypeInternal _GDGuildSkillUpdatePacket_default_instance_;
PROTOBUF_CONSTEXPR GDGuildExpUpdatePacket::GDGuildExpUpdatePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.guild_id_)*/0u
  , /*decltype(_impl_.amount_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GDGuildExpUpdatePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GDGuildExpUpdatePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GDGuildExpUpdatePacketDefaultTypeInternal() {}
  union {
    GDGuildExpUpdatePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GDGuildExpUpdatePacketDefaultTypeInternal _GDGuildExpUpdatePacket_default_instance_;
PROTOBUF_CONSTEXPR GDGuildAddMemberPacket::GDGuildAddMemberPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pid_)*/0u
  , /*decltype(_impl_.guild_id_)*/0u
  , /*decltype(_impl_.grade_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GDGuildAddMemberPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GDGuildAddMemberPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GDGuildAddMemberPacketDefaultTypeInternal() {}
  union {
    GDGuildAddMemberPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GDGuildAddMemberPacketDefaultTypeInternal _GDGuildAddMemberPacket_default_instance_;
PROTOBUF_CONSTEXPR GDGuildRemoveMemberPacket::GDGuildRemoveMemberPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.guild_id_)*/0u
  , /*decltype(_impl_.pid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GDGuildRemoveMemberPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GDGuildRemoveMemberPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GDGuildRemoveMemberPacketDefaultTypeInternal() {}
  union {
    GDGuildRemoveMemberPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GDGuildRemoveMemberPacketDefaultTypeInternal _GDGuildRemoveMemberPacket_default_instance_;
PROTOBUF_CONSTEXPR GDGuildChangeGradePacket::GDGuildChangeGradePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.guild_id_)*/0u
  , /*decltype(_impl_.grade_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GDGuildChangeGradePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GDGuildChangeGradePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GDGuildChangeGradePacketDefaultTypeInternal() {}
  union {
    GDGuildChangeGradePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GDGuildChangeGradePacketDefaultTypeInternal _GDGuildChangeGradePacket_default_instance_;
PROTOBUF_CONSTEXPR GDGuildChangeMemberDataPacket::GDGuildChangeMemberDataPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.guild_id_)*/0u
  , /*decltype(_impl_.pid_)*/0u
  , /*decltype(_impl_.offer_)*/0u
  , /*decltype(_impl_.level_)*/0u
  , /*decltype(_impl_.grade_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GDGuildChangeMemberDataPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GDGuildChangeMemberDataPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GDGuildChangeMemberDataPacketDefaultTypeInternal() {}
  union {
    GDGuildChangeMemberDataPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GDGuildChangeMemberDataPacketDefaultTypeInternal _GDGuildChangeMemberDataPacket_default_instance_;
PROTOBUF_CONSTEXPR GDGuildDisbandPacket::GDGuildDisbandPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.guild_id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GDGuildDisbandPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GDGuildDisbandPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GDGuildDisbandPacketDefaultTypeInternal() {}
  union {
    GDGuildDisbandPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GDGuildDisbandPacketDefaultTypeInternal _GDGuildDisbandPacket_default_instance_;
PROTOBUF_CONSTEXPR GDGuildDungeonPacket::GDGuildDungeonPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.guild_id_)*/0u
  , /*decltype(_impl_.channel_)*/0u
  , /*decltype(_impl_.map_index_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GDGuildDungeonPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GDGuildDungeonPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GDGuildDungeonPacketDefaultTypeInternal() {}
  union {
    GDGuildDungeonPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GDGuildDungeonPacketDefaultTypeInternal _GDGuildDungeonPacket_default_instance_;
PROTOBUF_CONSTEXPR GDGuildDungeonCDPacket::GDGuildDungeonCDPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.guild_id_)*/0u
  , /*decltype(_impl_.time_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GDGuildDungeonCDPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GDGuildDungeonCDPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GDGuildDungeonCDPacketDefaultTypeInternal() {}
  union {
    GDGuildDungeonCDPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GDGuildDungeonCDPacketDefaultTypeInternal _GDGuildDungeonCDPacket_default_instance_;
PROTOBUF_CONSTEXPR GDGuildWarPacket::GDGuildWarPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_)*/0u
  , /*decltype(_impl_.war_)*/0u
  , /*decltype(_impl_.guild_from_)*/0u
  , /*decltype(_impl_.guild_to_)*/0u
  , /*decltype(_impl_.war_price_)*/0
  , /*decltype(_impl_.initial_score_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GDGuildWarPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GDGuildWarPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GDGuildWarPacketDefaultTypeInternal() {}
  union {
    GDGuildWarPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GDGuildWarPacketDefaultTypeInternal _GDGuildWarPacket_default_instance_;
PROTOBUF_CONSTEXPR GDGuildWarScorePacket::GDGuildWarScorePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.guild_gain_point_)*/0u
  , /*decltype(_impl_.guild_opponent_)*/0u
  , /*decltype(_impl_.score_)*/0
  , /*decltype(_impl_.bet_score_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GDGuildWarScorePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GDGuildWarScorePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GDGuildWarScorePacketDefaultTypeInternal() {}
  union {
    GDGuildWarScorePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GDGuildWarScorePacketDefaultTypeInternal _GDGuildWarScorePacket_default_instance_;
PROTOBUF_CONSTEXPR GDGuildChangeLadderPointPacket::GDGuildChangeLadderPointPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.guild_id_)*/0u
  , /*decltype(_impl_.change_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GDGuildChangeLadderPointPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GDGuildChangeLadderPointPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GDGuildChangeLadderPointPacketDefaultTypeInternal() {}
  union {
    GDGuildChangeLadderPointPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GDGuildChangeLadderPointPacketDefaultTypeInternal _GDGuildChangeLadderPointPacket_default_instance_;
PROTOBUF_CONSTEXPR GDGuildUseSkillPacket::GDGuildUseSkillPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.guild_id_)*/0u
  , /*decltype(_impl_.skill_vnum_)*/0u
  , /*decltype(_impl_.cooltime_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GDGuildUseSkillPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GDGuildUseSkillPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GDGuildUseSkillPacketDefaultTypeInternal() {}
  union {
    GDGuildUseSkillPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GDGuildUseSkillPacketDefaultTypeInternal _GDGuildUseSkillPacket_default_instance_;
PROTOBUF_CONSTEXPR GDGuildDepositMoneyPacket::GDGuildDepositMoneyPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.guild_id_)*/0u
  , /*decltype(_impl_.gold_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GDGuildDepositMoneyPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GDGuildDepositMoneyPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GDGuildDepositMoneyPacketDefaultTypeInternal() {}
  union {
    GDGuildDepositMoneyPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GDGuildDepositMoneyPacketDefaultTypeInternal _GDGuildDepositMoneyPacket_default_instance_;
PROTOBUF_CONSTEXPR GDGuildWithdrawMoneyPacket::GDGuildWithdrawMoneyPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.guild_id_)*/0u
  , /*decltype(_impl_.gold_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GDGuildWithdrawMoneyPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GDGuildWithdrawMoneyPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GDGuildWithdrawMoneyPacketDefaultTypeInternal() {}
  union {
    GDGuildWithdrawMoneyPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GDGuildWithdrawMoneyPacketDefaultTypeInternal _GDGuildWithdrawMoneyPacket_default_instance_;
PROTOBUF_CONSTEXPR GDGuildWithdrawMoneyGiveReplyPacket::GDGuildWithdrawMoneyGiveReplyPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.guild_id_)*/0u
  , /*decltype(_impl_.change_gold_)*/0
  , /*decltype(_impl_.give_success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GDGuildWithdrawMoneyGiveReplyPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GDGuildWithdrawMoneyGiveReplyPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GDGuildWithdrawMoneyGiveReplyPacketDefaultTypeInternal() {}
  union {
    GDGuildWithdrawMoneyGiveReplyPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GDGuildWithdrawMoneyGiveReplyPacketDefaultTypeInternal _GDGuildWithdrawMoneyGiveReplyPacket_default_instance_;
PROTOBUF_CONSTEXPR GDGuildWarBetPacket::GDGuildWarBetPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.login_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.war_id_)*/0u
  , /*decltype(_impl_.gold_)*/0u
  , /*decltype(_impl_.guild_id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GDGuildWarBetPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GDGuildWarBetPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GDGuildWarBetPacketDefaultTypeInternal() {}
  union {
    GDGuildWarBetPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GDGuildWarBetPacketDefaultTypeInternal _GDGuildWarBetPacket_default_instance_;
PROTOBUF_CONSTEXPR GDGuildReqChangeMasterPacket::GDGuildReqChangeMasterPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.guild_id_)*/0u
  , /*decltype(_impl_.id_from_)*/0u
  , /*decltype(_impl_.id_to_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GDGuildReqChangeMasterPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GDGuildReqChangeMasterPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GDGuildReqChangeMasterPacketDefaultTypeInternal() {}
  union {
    GDGuildReqChangeMasterPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GDGuildReqChangeMasterPacketDefaultTypeInternal _GDGuildReqChangeMasterPacket_default_instance_;
PROTOBUF_CONSTEXPR GDGuildSafeboxLoadPacket::GDGuildSafeboxLoadPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.guild_id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GDGuildSafeboxLoadPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GDGuildSafeboxLoadPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GDGuildSafeboxLoadPacketDefaultTypeInternal() {}
  union {
    GDGuildSafeboxLoadPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GDGuildSafeboxLoadPacketDefaultTypeInternal _GDGuildSafeboxLoadPacket_default_instance_;
PROTOBUF_CONSTEXPR GDGuildSafeboxCreatePacket::GDGuildSafeboxCreatePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.guild_id_)*/0u
  , /*decltype(_impl_.pid_)*/0u
  , /*decltype(_impl_.size_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GDGuildSafeboxCreatePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GDGuildSafeboxCreatePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GDGuildSafeboxCreatePacketDefaultTypeInternal() {}
  union {
    GDGuildSafeboxCreatePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GDGuildSafeboxCreatePacketDefaultTypeInternal _GDGuildSafeboxCreatePacket_default_instance_;
PROTOBUF_CONSTEXPR GDGuildSafeboxSizePacket::GDGuildSafeboxSizePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.guild_id_)*/0u
  , /*decltype(_impl_.pid_)*/0u
  , /*decltype(_impl_.size_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GDGuildSafeboxSizePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GDGuildSafeboxSizePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GDGuildSafeboxSizePacketDefaultTypeInternal() {}
  union {
    GDGuildSafeboxSizePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GDGuildSafeboxSizePacketDefaultTypeInternal _GDGuildSafeboxSizePacket_default_instance_;
PROTOBUF_CONSTEXPR GDGuildSafeboxAddPacket::GDGuildSafeboxAddPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.item_)*/nullptr
  , /*decltype(_impl_.pid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GDGuildSafeboxAddPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GDGuildSafeboxAddPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GDGuildSafeboxAddPacketDefaultTypeInternal() {}
  union {
    GDGuildSafeboxAddPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GDGuildSafeboxAddPacketDefaultTypeInternal _GDGuildSafeboxAddPacket_default_instance_;
PROTOBUF_CONSTEXPR GDGuildSafeboxTakePacket::GDGuildSafeboxTakePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.player_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.target_pos_)*/nullptr
  , /*decltype(_impl_.guild_id_)*/0u
  , /*decltype(_impl_.pid_)*/0u
  , /*decltype(_impl_.source_pos_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GDGuildSafeboxTakePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GDGuildSafeboxTakePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GDGuildSafeboxTakePacketDefaultTypeInternal() {}
  union {
    GDGuildSafeboxTakePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GDGuildSafeboxTakePacketDefaultTypeInternal _GDGuildSafeboxTakePacket_default_instance_;
PROTOBUF_CONSTEXPR GDGuildSafeboxMovePacket::GDGuildSafeboxMovePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.guild_id_)*/0u
  , /*decltype(_impl_.source_slot_)*/0u
  , /*decltype(_impl_.target_slot_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GDGuildSafeboxMovePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GDGuildSafeboxMovePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GDGuildSafeboxMovePacketDefaultTypeInternal() {}
  union {
    GDGuildSafeboxMovePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GDGuildSafeboxMovePacketDefaultTypeInternal _GDGuildSafeboxMovePacket_default_instance_;
PROTOBUF_CONSTEXPR GDGuildSafeboxGiveGoldPacket::GDGuildSafeboxGiveGoldPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pid_)*/0u
  , /*decltype(_impl_.guild_id_)*/0u
  , /*decltype(_impl_.gold_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GDGuildSafeboxGiveGoldPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GDGuildSafeboxGiveGoldPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GDGuildSafeboxGiveGoldPacketDefaultTypeInternal() {}
  union {
    GDGuildSafeboxGiveGoldPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GDGuildSafeboxGiveGoldPacketDefaultTypeInternal _GDGuildSafeboxGiveGoldPacket_default_instance_;
PROTOBUF_CONSTEXPR GDGuildSafeboxGetGoldPacket::GDGuildSafeboxGetGoldPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pid_)*/0u
  , /*decltype(_impl_.guild_id_)*/0u
  , /*decltype(_impl_.gold_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GDGuildSafeboxGetGoldPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GDGuildSafeboxGetGoldPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GDGuildSafeboxGetGoldPacketDefaultTypeInternal() {}
  union {
    GDGuildSafeboxGetGoldPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GDGuildSafeboxGetGoldPacketDefaultTypeInternal _GDGuildSafeboxGetGoldPacket_default_instance_;
}  // namespace network
static ::_pb::Metadata file_level_metadata_gd_5fpackets_2eproto[104];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_gd_5fpackets_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_gd_5fpackets_2eproto = nullptr;

const uint32_t TableStruct_gd_5fpackets_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GDBootPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GDBootPacket, _impl_.item_range_start_),
  PROTOBUF_FIELD_OFFSET(::network::GDBootPacket, _impl_.item_range_end_),
  PROTOBUF_FIELD_OFFSET(::network::GDBootPacket, _impl_.ip_),
  PROTOBUF_FIELD_OFFSET(::network::GDBootPacket, _impl_.channel_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GDSetupPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GDSetupPacket, _impl_.public_ip_),
  PROTOBUF_FIELD_OFFSET(::network::GDSetupPacket, _impl_.channel_),
  PROTOBUF_FIELD_OFFSET(::network::GDSetupPacket, _impl_.listen_port_),
  PROTOBUF_FIELD_OFFSET(::network::GDSetupPacket, _impl_.p2p_port_),
  PROTOBUF_FIELD_OFFSET(::network::GDSetupPacket, _impl_.maps_),
  PROTOBUF_FIELD_OFFSET(::network::GDSetupPacket, _impl_.logins_),
  PROTOBUF_FIELD_OFFSET(::network::GDSetupPacket, _impl_.auth_server_),
  PROTOBUF_FIELD_OFFSET(::network::GDSetupPacket, _impl_.processor_core_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GDUpdateChannelStatusPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GDUpdateChannelStatusPacket, _impl_.port_),
  PROTOBUF_FIELD_OFFSET(::network::GDUpdateChannelStatusPacket, _impl_.status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GDBlockExceptionPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GDBlockExceptionPacket, _impl_.cmd_),
  PROTOBUF_FIELD_OFFSET(::network::GDBlockExceptionPacket, _impl_.login_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GDPlayerCountPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GDPlayerCountPacket, _impl_.count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GDReloadAdminPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GDReloadAdminPacket, _impl_.ip_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GDRecvShutdownPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GDRecvShutdownPacket, _impl_.start_sec_),
  PROTOBUF_FIELD_OFFSET(::network::GDRecvShutdownPacket, _impl_.maintenance_),
  PROTOBUF_FIELD_OFFSET(::network::GDRecvShutdownPacket, _impl_.maintenance_duration_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GDAuthLoginPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GDAuthLoginPacket, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::network::GDAuthLoginPacket, _impl_.login_key_),
  PROTOBUF_FIELD_OFFSET(::network::GDAuthLoginPacket, _impl_.login_),
  PROTOBUF_FIELD_OFFSET(::network::GDAuthLoginPacket, _impl_.hwid_),
  PROTOBUF_FIELD_OFFSET(::network::GDAuthLoginPacket, _impl_.social_id_),
  PROTOBUF_FIELD_OFFSET(::network::GDAuthLoginPacket, _impl_.client_keys_),
  PROTOBUF_FIELD_OFFSET(::network::GDAuthLoginPacket, _impl_.bill_type_),
  PROTOBUF_FIELD_OFFSET(::network::GDAuthLoginPacket, _impl_.bill_id_),
  PROTOBUF_FIELD_OFFSET(::network::GDAuthLoginPacket, _impl_.premium_times_),
  PROTOBUF_FIELD_OFFSET(::network::GDAuthLoginPacket, _impl_.language_),
  PROTOBUF_FIELD_OFFSET(::network::GDAuthLoginPacket, _impl_.tradeblock_),
  PROTOBUF_FIELD_OFFSET(::network::GDAuthLoginPacket, _impl_.hwid2ban_),
  PROTOBUF_FIELD_OFFSET(::network::GDAuthLoginPacket, _impl_.hwid2_),
  PROTOBUF_FIELD_OFFSET(::network::GDAuthLoginPacket, _impl_.coins_),
  PROTOBUF_FIELD_OFFSET(::network::GDAuthLoginPacket, _impl_.temp_login_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GDLoginByKeyPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GDLoginByKeyPacket, _impl_.login_),
  PROTOBUF_FIELD_OFFSET(::network::GDLoginByKeyPacket, _impl_.login_key_),
  PROTOBUF_FIELD_OFFSET(::network::GDLoginByKeyPacket, _impl_.client_key_),
  PROTOBUF_FIELD_OFFSET(::network::GDLoginByKeyPacket, _impl_.ip_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GDPlayerCreatePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GDPlayerCreatePacket, _impl_.login_),
  PROTOBUF_FIELD_OFFSET(::network::GDPlayerCreatePacket, _impl_.passwd_),
  PROTOBUF_FIELD_OFFSET(::network::GDPlayerCreatePacket, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::network::GDPlayerCreatePacket, _impl_.account_index_),
  PROTOBUF_FIELD_OFFSET(::network::GDPlayerCreatePacket, _impl_.player_table_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GDPlayerDeletePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GDPlayerDeletePacket, _impl_.login_),
  PROTOBUF_FIELD_OFFSET(::network::GDPlayerDeletePacket, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::network::GDPlayerDeletePacket, _impl_.account_index_),
  PROTOBUF_FIELD_OFFSET(::network::GDPlayerDeletePacket, _impl_.private_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GDChangeNamePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GDChangeNamePacket, _impl_.pid_),
  PROTOBUF_FIELD_OFFSET(::network::GDChangeNamePacket, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GDEmpireSelectPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GDEmpireSelectPacket, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::network::GDEmpireSelectPacket, _impl_.empire_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GDSelectUpdateHairPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GDSelectUpdateHairPacket, _impl_.pid_),
  PROTOBUF_FIELD_OFFSET(::network::GDSelectUpdateHairPacket, _impl_.hair_part_),
  PROTOBUF_FIELD_OFFSET(::network::GDSelectUpdateHairPacket, _impl_.hair_base_part_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GDBillingExpirePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GDBillingExpirePacket, _impl_.login_),
  PROTOBUF_FIELD_OFFSET(::network::GDBillingExpirePacket, _impl_.bill_type_),
  PROTOBUF_FIELD_OFFSET(::network::GDBillingExpirePacket, _impl_.remain_seconds_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GDBillingCheckPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GDBillingCheckPacket, _impl_.keys_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GDDisconnectPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GDDisconnectPacket, _impl_.login_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GDValidLogoutPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GDValidLogoutPacket, _impl_.account_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GDPlayerLoadPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GDPlayerLoadPacket, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::network::GDPlayerLoadPacket, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::network::GDPlayerLoadPacket, _impl_.account_index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GDSafeboxLoadPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GDSafeboxLoadPacket, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::network::GDSafeboxLoadPacket, _impl_.login_),
  PROTOBUF_FIELD_OFFSET(::network::GDSafeboxLoadPacket, _impl_.password_),
  PROTOBUF_FIELD_OFFSET(::network::GDSafeboxLoadPacket, _impl_.is_mall_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GDReqHorseNamePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GDReqHorseNamePacket, _impl_.pid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GDPlayerSavePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GDPlayerSavePacket, _impl_.data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GDItemSavePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GDItemSavePacket, _impl_.data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GDQuestSavePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GDQuestSavePacket, _impl_.datas_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GDPetSavePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GDPetSavePacket, _impl_.data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GDSafeboxSavePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GDSafeboxSavePacket, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::network::GDSafeboxSavePacket, _impl_.size_),
  PROTOBUF_FIELD_OFFSET(::network::GDSafeboxSavePacket, _impl_.gold_),
  PROTOBUF_FIELD_OFFSET(::network::GDSafeboxSavePacket, _impl_.items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GDItemDestroyPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GDItemDestroyPacket, _impl_.item_id_),
  PROTOBUF_FIELD_OFFSET(::network::GDItemDestroyPacket, _impl_.pid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GDSkillColorSavePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GDSkillColorSavePacket, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::network::GDSkillColorSavePacket, _impl_.skill_colors_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GDPlayerRuneSavePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GDPlayerRuneSavePacket, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::network::GDPlayerRuneSavePacket, _impl_.runes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GDEquipmentPageDeletePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GDEquipmentPageDeletePacket, _impl_.pid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GDEquipmentPageSavePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GDEquipmentPageSavePacket, _impl_.pages_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GDFlushCachePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GDFlushCachePacket, _impl_.pid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GDItemFlushPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GDItemFlushPacket, _impl_.item_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GDLogoutPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GDLogoutPacket, _impl_.login_),
  PROTOBUF_FIELD_OFFSET(::network::GDLogoutPacket, _impl_.passwd_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GDSafeboxChangeSizePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GDSafeboxChangeSizePacket, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::network::GDSafeboxChangeSizePacket, _impl_.size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GDSafeboxChangePasswordPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GDSafeboxChangePasswordPacket, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::network::GDSafeboxChangePasswordPacket, _impl_.old_password_),
  PROTOBUF_FIELD_OFFSET(::network::GDSafeboxChangePasswordPacket, _impl_.new_password_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GDAddAffectPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GDAddAffectPacket, _impl_.pid_),
  PROTOBUF_FIELD_OFFSET(::network::GDAddAffectPacket, _impl_.elem_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GDRemoveAffectPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GDRemoveAffectPacket, _impl_.pid_),
  PROTOBUF_FIELD_OFFSET(::network::GDRemoveAffectPacket, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::network::GDRemoveAffectPacket, _impl_.apply_on_),
  PROTOBUF_FIELD_OFFSET(::network::GDRemoveAffectPacket, _impl_.apply_value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GDHighscoreRegisterPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GDHighscoreRegisterPacket, _impl_.pid_),
  PROTOBUF_FIELD_OFFSET(::network::GDHighscoreRegisterPacket, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::network::GDHighscoreRegisterPacket, _impl_.dir_),
  PROTOBUF_FIELD_OFFSET(::network::GDHighscoreRegisterPacket, _impl_.board_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GDSMSPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GDSMSPacket, _impl_.from_),
  PROTOBUF_FIELD_OFFSET(::network::GDSMSPacket, _impl_.to_),
  PROTOBUF_FIELD_OFFSET(::network::GDSMSPacket, _impl_.mobile_),
  PROTOBUF_FIELD_OFFSET(::network::GDSMSPacket, _impl_.msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GDRequestGuildPrivPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GDRequestGuildPrivPacket, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::network::GDRequestGuildPrivPacket, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::network::GDRequestGuildPrivPacket, _impl_.guild_id_),
  PROTOBUF_FIELD_OFFSET(::network::GDRequestGuildPrivPacket, _impl_.duration_sec_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GDRequestEmpirePrivPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GDRequestEmpirePrivPacket, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::network::GDRequestEmpirePrivPacket, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::network::GDRequestEmpirePrivPacket, _impl_.empire_),
  PROTOBUF_FIELD_OFFSET(::network::GDRequestEmpirePrivPacket, _impl_.duration_sec_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GDRequestCharacterPrivPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GDRequestCharacterPrivPacket, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::network::GDRequestCharacterPrivPacket, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::network::GDRequestCharacterPrivPacket, _impl_.pid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GDMoneyLogPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GDMoneyLogPacket, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::network::GDMoneyLogPacket, _impl_.vnum_),
  PROTOBUF_FIELD_OFFSET(::network::GDMoneyLogPacket, _impl_.gold_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GDSetEventFlagPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GDSetEventFlagPacket, _impl_.flag_name_),
  PROTOBUF_FIELD_OFFSET(::network::GDSetEventFlagPacket, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::network::GDSetEventFlagPacket, _impl_.is_add_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GDCreateObjectPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GDCreateObjectPacket, _impl_.vnum_),
  PROTOBUF_FIELD_OFFSET(::network::GDCreateObjectPacket, _impl_.land_id_),
  PROTOBUF_FIELD_OFFSET(::network::GDCreateObjectPacket, _impl_.map_index_),
  PROTOBUF_FIELD_OFFSET(::network::GDCreateObjectPacket, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::network::GDCreateObjectPacket, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::network::GDCreateObjectPacket, _impl_.rot_x_),
  PROTOBUF_FIELD_OFFSET(::network::GDCreateObjectPacket, _impl_.rot_y_),
  PROTOBUF_FIELD_OFFSET(::network::GDCreateObjectPacket, _impl_.rot_z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GDDeleteObjectPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GDDeleteObjectPacket, _impl_.id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GDUpdateLandPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GDUpdateLandPacket, _impl_.guild_id_),
  PROTOBUF_FIELD_OFFSET(::network::GDUpdateLandPacket, _impl_.land_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GDVCardPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GDVCardPacket, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::network::GDVCardPacket, _impl_.sell_character_),
  PROTOBUF_FIELD_OFFSET(::network::GDVCardPacket, _impl_.sell_account_),
  PROTOBUF_FIELD_OFFSET(::network::GDVCardPacket, _impl_.buy_character_),
  PROTOBUF_FIELD_OFFSET(::network::GDVCardPacket, _impl_.buy_account_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GDBlockChatPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GDBlockChatPacket, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::network::GDBlockChatPacket, _impl_.duration_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GDMyShopPricelistUpdatePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GDMyShopPricelistUpdatePacket, _impl_.owner_id_),
  PROTOBUF_FIELD_OFFSET(::network::GDMyShopPricelistUpdatePacket, _impl_.price_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GDMyShopPricelistRequestPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GDMyShopPricelistRequestPacket, _impl_.pid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GDUpdateHorseNamePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GDUpdateHorseNamePacket, _impl_.pid_),
  PROTOBUF_FIELD_OFFSET(::network::GDUpdateHorseNamePacket, _impl_.horse_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GDRequestChargeCashPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GDRequestChargeCashPacket, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::network::GDRequestChargeCashPacket, _impl_.amount_),
  PROTOBUF_FIELD_OFFSET(::network::GDRequestChargeCashPacket, _impl_.charge_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GDDeleteAwardIDPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GDDeleteAwardIDPacket, _impl_.id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GDChannelSwitchPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GDChannelSwitchPacket, _impl_.channel_),
  PROTOBUF_FIELD_OFFSET(::network::GDChannelSwitchPacket, _impl_.map_index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GDSpawnMobTimedPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GDSpawnMobTimedPacket, _impl_.mob_vnum_),
  PROTOBUF_FIELD_OFFSET(::network::GDSpawnMobTimedPacket, _impl_.map_index_),
  PROTOBUF_FIELD_OFFSET(::network::GDSpawnMobTimedPacket, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::network::GDSpawnMobTimedPacket, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::network::GDSpawnMobTimedPacket, _impl_.channel_),
  PROTOBUF_FIELD_OFFSET(::network::GDSpawnMobTimedPacket, _impl_.target_time_),
  PROTOBUF_FIELD_OFFSET(::network::GDSpawnMobTimedPacket, _impl_.despawn_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GDForceItemDeletePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GDForceItemDeletePacket, _impl_.id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GDCombatZoneSkillsCachePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GDCombatZoneSkillsCachePacket, _impl_.pid_),
  PROTOBUF_FIELD_OFFSET(::network::GDCombatZoneSkillsCachePacket, _impl_.skill_level1_),
  PROTOBUF_FIELD_OFFSET(::network::GDCombatZoneSkillsCachePacket, _impl_.skill_level2_),
  PROTOBUF_FIELD_OFFSET(::network::GDCombatZoneSkillsCachePacket, _impl_.skill_level3_),
  PROTOBUF_FIELD_OFFSET(::network::GDCombatZoneSkillsCachePacket, _impl_.skill_level4_),
  PROTOBUF_FIELD_OFFSET(::network::GDCombatZoneSkillsCachePacket, _impl_.skill_level5_),
  PROTOBUF_FIELD_OFFSET(::network::GDCombatZoneSkillsCachePacket, _impl_.skill_level6_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GDWhisperPlayerExistCheckPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GDWhisperPlayerExistCheckPacket, _impl_.pid_),
  PROTOBUF_FIELD_OFFSET(::network::GDWhisperPlayerExistCheckPacket, _impl_.is_gm_),
  PROTOBUF_FIELD_OFFSET(::network::GDWhisperPlayerExistCheckPacket, _impl_.target_name_),
  PROTOBUF_FIELD_OFFSET(::network::GDWhisperPlayerExistCheckPacket, _impl_.message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GDWhisperPlayerMessageOfflinePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GDWhisperPlayerMessageOfflinePacket, _impl_.pid_),
  PROTOBUF_FIELD_OFFSET(::network::GDWhisperPlayerMessageOfflinePacket, _impl_.is_gm_),
  PROTOBUF_FIELD_OFFSET(::network::GDWhisperPlayerMessageOfflinePacket, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::network::GDWhisperPlayerMessageOfflinePacket, _impl_.target_name_),
  PROTOBUF_FIELD_OFFSET(::network::GDWhisperPlayerMessageOfflinePacket, _impl_.message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GDLoadItemRefundPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GDLoadItemRefundPacket, _impl_.pid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GDItemDestroyLogPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GDItemDestroyLogPacket, _impl_.item_),
  PROTOBUF_FIELD_OFFSET(::network::GDItemDestroyLogPacket, _impl_.type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GDItemTimedIgnorePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GDItemTimedIgnorePacket, _impl_.item_id_),
  PROTOBUF_FIELD_OFFSET(::network::GDItemTimedIgnorePacket, _impl_.ignore_duration_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GDMarriageAddPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GDMarriageAddPacket, _impl_.pid1_),
  PROTOBUF_FIELD_OFFSET(::network::GDMarriageAddPacket, _impl_.pid2_),
  PROTOBUF_FIELD_OFFSET(::network::GDMarriageAddPacket, _impl_.marry_time_),
  PROTOBUF_FIELD_OFFSET(::network::GDMarriageAddPacket, _impl_.name1_),
  PROTOBUF_FIELD_OFFSET(::network::GDMarriageAddPacket, _impl_.name2_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GDMarriageUpdatePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GDMarriageUpdatePacket, _impl_.pid1_),
  PROTOBUF_FIELD_OFFSET(::network::GDMarriageUpdatePacket, _impl_.pid2_),
  PROTOBUF_FIELD_OFFSET(::network::GDMarriageUpdatePacket, _impl_.love_point_),
  PROTOBUF_FIELD_OFFSET(::network::GDMarriageUpdatePacket, _impl_.married_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GDMarriageRemovePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GDMarriageRemovePacket, _impl_.pid1_),
  PROTOBUF_FIELD_OFFSET(::network::GDMarriageRemovePacket, _impl_.pid2_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GDMarriageBreakPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GDMarriageBreakPacket, _impl_.pid1_),
  PROTOBUF_FIELD_OFFSET(::network::GDMarriageBreakPacket, _impl_.pid2_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GDWeddingRequestPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GDWeddingRequestPacket, _impl_.pid1_),
  PROTOBUF_FIELD_OFFSET(::network::GDWeddingRequestPacket, _impl_.pid2_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GDWeddingReadyPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GDWeddingReadyPacket, _impl_.pid1_),
  PROTOBUF_FIELD_OFFSET(::network::GDWeddingReadyPacket, _impl_.pid2_),
  PROTOBUF_FIELD_OFFSET(::network::GDWeddingReadyPacket, _impl_.map_index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GDWeddingEndPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GDWeddingEndPacket, _impl_.pid1_),
  PROTOBUF_FIELD_OFFSET(::network::GDWeddingEndPacket, _impl_.pid2_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GDPartyCreatePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GDPartyCreatePacket, _impl_.leader_pid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GDPartyDeletePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GDPartyDeletePacket, _impl_.leader_pid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GDPartyAddPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GDPartyAddPacket, _impl_.leader_pid_),
  PROTOBUF_FIELD_OFFSET(::network::GDPartyAddPacket, _impl_.pid_),
  PROTOBUF_FIELD_OFFSET(::network::GDPartyAddPacket, _impl_.state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GDPartyRemovePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GDPartyRemovePacket, _impl_.leader_pid_),
  PROTOBUF_FIELD_OFFSET(::network::GDPartyRemovePacket, _impl_.pid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GDPartyStateChangePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GDPartyStateChangePacket, _impl_.leader_pid_),
  PROTOBUF_FIELD_OFFSET(::network::GDPartyStateChangePacket, _impl_.pid_),
  PROTOBUF_FIELD_OFFSET(::network::GDPartyStateChangePacket, _impl_.role_),
  PROTOBUF_FIELD_OFFSET(::network::GDPartyStateChangePacket, _impl_.flag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GDPartySetMemberLevelPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GDPartySetMemberLevelPacket, _impl_.leader_pid_),
  PROTOBUF_FIELD_OFFSET(::network::GDPartySetMemberLevelPacket, _impl_.pid_),
  PROTOBUF_FIELD_OFFSET(::network::GDPartySetMemberLevelPacket, _impl_.level_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GDGuildCreatePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GDGuildCreatePacket, _impl_.guild_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GDGuildSkillUpdatePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GDGuildSkillUpdatePacket, _impl_.guild_id_),
  PROTOBUF_FIELD_OFFSET(::network::GDGuildSkillUpdatePacket, _impl_.amount_),
  PROTOBUF_FIELD_OFFSET(::network::GDGuildSkillUpdatePacket, _impl_.skill_levels_),
  PROTOBUF_FIELD_OFFSET(::network::GDGuildSkillUpdatePacket, _impl_.skill_point_),
  PROTOBUF_FIELD_OFFSET(::network::GDGuildSkillUpdatePacket, _impl_.save_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GDGuildExpUpdatePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GDGuildExpUpdatePacket, _impl_.guild_id_),
  PROTOBUF_FIELD_OFFSET(::network::GDGuildExpUpdatePacket, _impl_.amount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GDGuildAddMemberPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GDGuildAddMemberPacket, _impl_.pid_),
  PROTOBUF_FIELD_OFFSET(::network::GDGuildAddMemberPacket, _impl_.guild_id_),
  PROTOBUF_FIELD_OFFSET(::network::GDGuildAddMemberPacket, _impl_.grade_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GDGuildRemoveMemberPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GDGuildRemoveMemberPacket, _impl_.guild_id_),
  PROTOBUF_FIELD_OFFSET(::network::GDGuildRemoveMemberPacket, _impl_.pid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GDGuildChangeGradePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GDGuildChangeGradePacket, _impl_.guild_id_),
  PROTOBUF_FIELD_OFFSET(::network::GDGuildChangeGradePacket, _impl_.grade_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GDGuildChangeMemberDataPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GDGuildChangeMemberDataPacket, _impl_.guild_id_),
  PROTOBUF_FIELD_OFFSET(::network::GDGuildChangeMemberDataPacket, _impl_.pid_),
  PROTOBUF_FIELD_OFFSET(::network::GDGuildChangeMemberDataPacket, _impl_.offer_),
  PROTOBUF_FIELD_OFFSET(::network::GDGuildChangeMemberDataPacket, _impl_.level_),
  PROTOBUF_FIELD_OFFSET(::network::GDGuildChangeMemberDataPacket, _impl_.grade_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GDGuildDisbandPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GDGuildDisbandPacket, _impl_.guild_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GDGuildDungeonPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GDGuildDungeonPacket, _impl_.guild_id_),
  PROTOBUF_FIELD_OFFSET(::network::GDGuildDungeonPacket, _impl_.channel_),
  PROTOBUF_FIELD_OFFSET(::network::GDGuildDungeonPacket, _impl_.map_index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GDGuildDungeonCDPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GDGuildDungeonCDPacket, _impl_.guild_id_),
  PROTOBUF_FIELD_OFFSET(::network::GDGuildDungeonCDPacket, _impl_.time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GDGuildWarPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GDGuildWarPacket, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::network::GDGuildWarPacket, _impl_.war_),
  PROTOBUF_FIELD_OFFSET(::network::GDGuildWarPacket, _impl_.guild_from_),
  PROTOBUF_FIELD_OFFSET(::network::GDGuildWarPacket, _impl_.guild_to_),
  PROTOBUF_FIELD_OFFSET(::network::GDGuildWarPacket, _impl_.war_price_),
  PROTOBUF_FIELD_OFFSET(::network::GDGuildWarPacket, _impl_.initial_score_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GDGuildWarScorePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GDGuildWarScorePacket, _impl_.guild_gain_point_),
  PROTOBUF_FIELD_OFFSET(::network::GDGuildWarScorePacket, _impl_.guild_opponent_),
  PROTOBUF_FIELD_OFFSET(::network::GDGuildWarScorePacket, _impl_.score_),
  PROTOBUF_FIELD_OFFSET(::network::GDGuildWarScorePacket, _impl_.bet_score_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GDGuildChangeLadderPointPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GDGuildChangeLadderPointPacket, _impl_.guild_id_),
  PROTOBUF_FIELD_OFFSET(::network::GDGuildChangeLadderPointPacket, _impl_.change_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GDGuildUseSkillPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GDGuildUseSkillPacket, _impl_.guild_id_),
  PROTOBUF_FIELD_OFFSET(::network::GDGuildUseSkillPacket, _impl_.skill_vnum_),
  PROTOBUF_FIELD_OFFSET(::network::GDGuildUseSkillPacket, _impl_.cooltime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GDGuildDepositMoneyPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GDGuildDepositMoneyPacket, _impl_.guild_id_),
  PROTOBUF_FIELD_OFFSET(::network::GDGuildDepositMoneyPacket, _impl_.gold_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GDGuildWithdrawMoneyPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GDGuildWithdrawMoneyPacket, _impl_.guild_id_),
  PROTOBUF_FIELD_OFFSET(::network::GDGuildWithdrawMoneyPacket, _impl_.gold_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GDGuildWithdrawMoneyGiveReplyPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GDGuildWithdrawMoneyGiveReplyPacket, _impl_.guild_id_),
  PROTOBUF_FIELD_OFFSET(::network::GDGuildWithdrawMoneyGiveReplyPacket, _impl_.change_gold_),
  PROTOBUF_FIELD_OFFSET(::network::GDGuildWithdrawMoneyGiveReplyPacket, _impl_.give_success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GDGuildWarBetPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GDGuildWarBetPacket, _impl_.war_id_),
  PROTOBUF_FIELD_OFFSET(::network::GDGuildWarBetPacket, _impl_.login_),
  PROTOBUF_FIELD_OFFSET(::network::GDGuildWarBetPacket, _impl_.gold_),
  PROTOBUF_FIELD_OFFSET(::network::GDGuildWarBetPacket, _impl_.guild_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GDGuildReqChangeMasterPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GDGuildReqChangeMasterPacket, _impl_.guild_id_),
  PROTOBUF_FIELD_OFFSET(::network::GDGuildReqChangeMasterPacket, _impl_.id_from_),
  PROTOBUF_FIELD_OFFSET(::network::GDGuildReqChangeMasterPacket, _impl_.id_to_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GDGuildSafeboxLoadPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GDGuildSafeboxLoadPacket, _impl_.guild_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GDGuildSafeboxCreatePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GDGuildSafeboxCreatePacket, _impl_.guild_id_),
  PROTOBUF_FIELD_OFFSET(::network::GDGuildSafeboxCreatePacket, _impl_.pid_),
  PROTOBUF_FIELD_OFFSET(::network::GDGuildSafeboxCreatePacket, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::network::GDGuildSafeboxCreatePacket, _impl_.size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GDGuildSafeboxSizePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GDGuildSafeboxSizePacket, _impl_.guild_id_),
  PROTOBUF_FIELD_OFFSET(::network::GDGuildSafeboxSizePacket, _impl_.pid_),
  PROTOBUF_FIELD_OFFSET(::network::GDGuildSafeboxSizePacket, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::network::GDGuildSafeboxSizePacket, _impl_.size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GDGuildSafeboxAddPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GDGuildSafeboxAddPacket, _impl_.pid_),
  PROTOBUF_FIELD_OFFSET(::network::GDGuildSafeboxAddPacket, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::network::GDGuildSafeboxAddPacket, _impl_.item_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GDGuildSafeboxTakePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GDGuildSafeboxTakePacket, _impl_.guild_id_),
  PROTOBUF_FIELD_OFFSET(::network::GDGuildSafeboxTakePacket, _impl_.pid_),
  PROTOBUF_FIELD_OFFSET(::network::GDGuildSafeboxTakePacket, _impl_.player_name_),
  PROTOBUF_FIELD_OFFSET(::network::GDGuildSafeboxTakePacket, _impl_.source_pos_),
  PROTOBUF_FIELD_OFFSET(::network::GDGuildSafeboxTakePacket, _impl_.target_pos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GDGuildSafeboxMovePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GDGuildSafeboxMovePacket, _impl_.guild_id_),
  PROTOBUF_FIELD_OFFSET(::network::GDGuildSafeboxMovePacket, _impl_.source_slot_),
  PROTOBUF_FIELD_OFFSET(::network::GDGuildSafeboxMovePacket, _impl_.target_slot_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GDGuildSafeboxGiveGoldPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GDGuildSafeboxGiveGoldPacket, _impl_.pid_),
  PROTOBUF_FIELD_OFFSET(::network::GDGuildSafeboxGiveGoldPacket, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::network::GDGuildSafeboxGiveGoldPacket, _impl_.guild_id_),
  PROTOBUF_FIELD_OFFSET(::network::GDGuildSafeboxGiveGoldPacket, _impl_.gold_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GDGuildSafeboxGetGoldPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GDGuildSafeboxGetGoldPacket, _impl_.pid_),
  PROTOBUF_FIELD_OFFSET(::network::GDGuildSafeboxGetGoldPacket, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::network::GDGuildSafeboxGetGoldPacket, _impl_.guild_id_),
  PROTOBUF_FIELD_OFFSET(::network::GDGuildSafeboxGetGoldPacket, _impl_.gold_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::network::GDBootPacket)},
  { 10, -1, -1, sizeof(::network::GDSetupPacket)},
  { 24, -1, -1, sizeof(::network::GDUpdateChannelStatusPacket)},
  { 32, -1, -1, sizeof(::network::GDBlockExceptionPacket)},
  { 40, -1, -1, sizeof(::network::GDPlayerCountPacket)},
  { 47, -1, -1, sizeof(::network::GDReloadAdminPacket)},
  { 54, -1, -1, sizeof(::network::GDRecvShutdownPacket)},
  { 63, -1, -1, sizeof(::network::GDAuthLoginPacket)},
  { 84, -1, -1, sizeof(::network::GDLoginByKeyPacket)},
  { 94, -1, -1, sizeof(::network::GDPlayerCreatePacket)},
  { 105, -1, -1, sizeof(::network::GDPlayerDeletePacket)},
  { 115, -1, -1, sizeof(::network::GDChangeNamePacket)},
  { 123, -1, -1, sizeof(::network::GDEmpireSelectPacket)},
  { 131, -1, -1, sizeof(::network::GDSelectUpdateHairPacket)},
  { 140, -1, -1, sizeof(::network::GDBillingExpirePacket)},
  { 149, -1, -1, sizeof(::network::GDBillingCheckPacket)},
  { 156, -1, -1, sizeof(::network::GDDisconnectPacket)},
  { 163, -1, -1, sizeof(::network::GDValidLogoutPacket)},
  { 170, -1, -1, sizeof(::network::GDPlayerLoadPacket)},
  { 179, -1, -1, sizeof(::network::GDSafeboxLoadPacket)},
  { 189, -1, -1, sizeof(::network::GDReqHorseNamePacket)},
  { 196, -1, -1, sizeof(::network::GDPlayerSavePacket)},
  { 203, -1, -1, sizeof(::network::GDItemSavePacket)},
  { 210, -1, -1, sizeof(::network::GDQuestSavePacket)},
  { 217, -1, -1, sizeof(::network::GDPetSavePacket)},
  { 224, -1, -1, sizeof(::network::GDSafeboxSavePacket)},
  { 234, -1, -1, sizeof(::network::GDItemDestroyPacket)},
  { 242, -1, -1, sizeof(::network::GDSkillColorSavePacket)},
  { 250, -1, -1, sizeof(::network::GDPlayerRuneSavePacket)},
  { 258, -1, -1, sizeof(::network::GDEquipmentPageDeletePacket)},
  { 265, -1, -1, sizeof(::network::GDEquipmentPageSavePacket)},
  { 272, -1, -1, sizeof(::network::GDFlushCachePacket)},
  { 279, -1, -1, sizeof(::network::GDItemFlushPacket)},
  { 286, -1, -1, sizeof(::network::GDLogoutPacket)},
  { 294, -1, -1, sizeof(::network::GDSafeboxChangeSizePacket)},
  { 302, -1, -1, sizeof(::network::GDSafeboxChangePasswordPacket)},
  { 311, -1, -1, sizeof(::network::GDAddAffectPacket)},
  { 319, -1, -1, sizeof(::network::GDRemoveAffectPacket)},
  { 329, -1, -1, sizeof(::network::GDHighscoreRegisterPacket)},
  { 339, -1, -1, sizeof(::network::GDSMSPacket)},
  { 349, -1, -1, sizeof(::network::GDRequestGuildPrivPacket)},
  { 359, -1, -1, sizeof(::network::GDRequestEmpirePrivPacket)},
  { 369, -1, -1, sizeof(::network::GDRequestCharacterPrivPacket)},
  { 378, -1, -1, sizeof(::network::GDMoneyLogPacket)},
  { 387, -1, -1, sizeof(::network::GDSetEventFlagPacket)},
  { 396, -1, -1, sizeof(::network::GDCreateObjectPacket)},
  { 410, -1, -1, sizeof(::network::GDDeleteObjectPacket)},
  { 417, -1, -1, sizeof(::network::GDUpdateLandPacket)},
  { 425, -1, -1, sizeof(::network::GDVCardPacket)},
  { 436, -1, -1, sizeof(::network::GDBlockChatPacket)},
  { 444, -1, -1, sizeof(::network::GDMyShopPricelistUpdatePacket)},
  { 452, -1, -1, sizeof(::network::GDMyShopPricelistRequestPacket)},
  { 459, -1, -1, sizeof(::network::GDUpdateHorseNamePacket)},
  { 467, -1, -1, sizeof(::network::GDRequestChargeCashPacket)},
  { 476, -1, -1, sizeof(::network::GDDeleteAwardIDPacket)},
  { 483, -1, -1, sizeof(::network::GDChannelSwitchPacket)},
  { 491, -1, -1, sizeof(::network::GDSpawnMobTimedPacket)},
  { 504, -1, -1, sizeof(::network::GDForceItemDeletePacket)},
  { 511, -1, -1, sizeof(::network::GDCombatZoneSkillsCachePacket)},
  { 524, -1, -1, sizeof(::network::GDWhisperPlayerExistCheckPacket)},
  { 534, -1, -1, sizeof(::network::GDWhisperPlayerMessageOfflinePacket)},
  { 545, -1, -1, sizeof(::network::GDLoadItemRefundPacket)},
  { 552, -1, -1, sizeof(::network::GDItemDestroyLogPacket)},
  { 560, -1, -1, sizeof(::network::GDItemTimedIgnorePacket)},
  { 568, -1, -1, sizeof(::network::GDMarriageAddPacket)},
  { 579, -1, -1, sizeof(::network::GDMarriageUpdatePacket)},
  { 589, -1, -1, sizeof(::network::GDMarriageRemovePacket)},
  { 597, -1, -1, sizeof(::network::GDMarriageBreakPacket)},
  { 605, -1, -1, sizeof(::network::GDWeddingRequestPacket)},
  { 613, -1, -1, sizeof(::network::GDWeddingReadyPacket)},
  { 622, -1, -1, sizeof(::network::GDWeddingEndPacket)},
  { 630, -1, -1, sizeof(::network::GDPartyCreatePacket)},
  { 637, -1, -1, sizeof(::network::GDPartyDeletePacket)},
  { 644, -1, -1, sizeof(::network::GDPartyAddPacket)},
  { 653, -1, -1, sizeof(::network::GDPartyRemovePacket)},
  { 661, -1, -1, sizeof(::network::GDPartyStateChangePacket)},
  { 671, -1, -1, sizeof(::network::GDPartySetMemberLevelPacket)},
  { 680, -1, -1, sizeof(::network::GDGuildCreatePacket)},
  { 687, -1, -1, sizeof(::network::GDGuildSkillUpdatePacket)},
  { 698, -1, -1, sizeof(::network::GDGuildExpUpdatePacket)},
  { 706, -1, -1, sizeof(::network::GDGuildAddMemberPacket)},
  { 715, -1, -1, sizeof(::network::GDGuildRemoveMemberPacket)},
  { 723, -1, -1, sizeof(::network::GDGuildChangeGradePacket)},
  { 731, -1, -1, sizeof(::network::GDGuildChangeMemberDataPacket)},
  { 742, -1, -1, sizeof(::network::GDGuildDisbandPacket)},
  { 749, -1, -1, sizeof(::network::GDGuildDungeonPacket)},
  { 758, -1, -1, sizeof(::network::GDGuildDungeonCDPacket)},
  { 766, -1, -1, sizeof(::network::GDGuildWarPacket)},
  { 778, -1, -1, sizeof(::network::GDGuildWarScorePacket)},
  { 788, -1, -1, sizeof(::network::GDGuildChangeLadderPointPacket)},
  { 796, -1, -1, sizeof(::network::GDGuildUseSkillPacket)},
  { 805, -1, -1, sizeof(::network::GDGuildDepositMoneyPacket)},
  { 813, -1, -1, sizeof(::network::GDGuildWithdrawMoneyPacket)},
  { 821, -1, -1, sizeof(::network::GDGuildWithdrawMoneyGiveReplyPacket)},
  { 830, -1, -1, sizeof(::network::GDGuildWarBetPacket)},
  { 840, -1, -1, sizeof(::network::GDGuildReqChangeMasterPacket)},
  { 849, -1, -1, sizeof(::network::GDGuildSafeboxLoadPacket)},
  { 856, -1, -1, sizeof(::network::GDGuildSafeboxCreatePacket)},
  { 866, -1, -1, sizeof(::network::GDGuildSafeboxSizePacket)},
  { 876, -1, -1, sizeof(::network::GDGuildSafeboxAddPacket)},
  { 885, -1, -1, sizeof(::network::GDGuildSafeboxTakePacket)},
  { 896, -1, -1, sizeof(::network::GDGuildSafeboxMovePacket)},
  { 905, -1, -1, sizeof(::network::GDGuildSafeboxGiveGoldPacket)},
  { 915, -1, -1, sizeof(::network::GDGuildSafeboxGetGoldPacket)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::network::_GDBootPacket_default_instance_._instance,
  &::network::_GDSetupPacket_default_instance_._instance,
  &::network::_GDUpdateChannelStatusPacket_default_instance_._instance,
  &::network::_GDBlockExceptionPacket_default_instance_._instance,
  &::network::_GDPlayerCountPacket_default_instance_._instance,
  &::network::_GDReloadAdminPacket_default_instance_._instance,
  &::network::_GDRecvShutdownPacket_default_instance_._instance,
  &::network::_GDAuthLoginPacket_default_instance_._instance,
  &::network::_GDLoginByKeyPacket_default_instance_._instance,
  &::network::_GDPlayerCreatePacket_default_instance_._instance,
  &::network::_GDPlayerDeletePacket_default_instance_._instance,
  &::network::_GDChangeNamePacket_default_instance_._instance,
  &::network::_GDEmpireSelectPacket_default_instance_._instance,
  &::network::_GDSelectUpdateHairPacket_default_instance_._instance,
  &::network::_GDBillingExpirePacket_default_instance_._instance,
  &::network::_GDBillingCheckPacket_default_instance_._instance,
  &::network::_GDDisconnectPacket_default_instance_._instance,
  &::network::_GDValidLogoutPacket_default_instance_._instance,
  &::network::_GDPlayerLoadPacket_default_instance_._instance,
  &::network::_GDSafeboxLoadPacket_default_instance_._instance,
  &::network::_GDReqHorseNamePacket_default_instance_._instance,
  &::network::_GDPlayerSavePacket_default_instance_._instance,
  &::network::_GDItemSavePacket_default_instance_._instance,
  &::network::_GDQuestSavePacket_default_instance_._instance,
  &::network::_GDPetSavePacket_default_instance_._instance,
  &::network::_GDSafeboxSavePacket_default_instance_._instance,
  &::network::_GDItemDestroyPacket_default_instance_._instance,
  &::network::_GDSkillColorSavePacket_default_instance_._instance,
  &::network::_GDPlayerRuneSavePacket_default_instance_._instance,
  &::network::_GDEquipmentPageDeletePacket_default_instance_._instance,
  &::network::_GDEquipmentPageSavePacket_default_instance_._instance,
  &::network::_GDFlushCachePacket_default_instance_._instance,
  &::network::_GDItemFlushPacket_default_instance_._instance,
  &::network::_GDLogoutPacket_default_instance_._instance,
  &::network::_GDSafeboxChangeSizePacket_default_instance_._instance,
  &::network::_GDSafeboxChangePasswordPacket_default_instance_._instance,
  &::network::_GDAddAffectPacket_default_instance_._instance,
  &::network::_GDRemoveAffectPacket_default_instance_._instance,
  &::network::_GDHighscoreRegisterPacket_default_instance_._instance,
  &::network::_GDSMSPacket_default_instance_._instance,
  &::network::_GDRequestGuildPrivPacket_default_instance_._instance,
  &::network::_GDRequestEmpirePrivPacket_default_instance_._instance,
  &::network::_GDRequestCharacterPrivPacket_default_instance_._instance,
  &::network::_GDMoneyLogPacket_default_instance_._instance,
  &::network::_GDSetEventFlagPacket_default_instance_._instance,
  &::network::_GDCreateObjectPacket_default_instance_._instance,
  &::network::_GDDeleteObjectPacket_default_instance_._instance,
  &::network::_GDUpdateLandPacket_default_instance_._instance,
  &::network::_GDVCardPacket_default_instance_._instance,
  &::network::_GDBlockChatPacket_default_instance_._instance,
  &::network::_GDMyShopPricelistUpdatePacket_default_instance_._instance,
  &::network::_GDMyShopPricelistRequestPacket_default_instance_._instance,
  &::network::_GDUpdateHorseNamePacket_default_instance_._instance,
  &::network::_GDRequestChargeCashPacket_default_instance_._instance,
  &::network::_GDDeleteAwardIDPacket_default_instance_._instance,
  &::network::_GDChannelSwitchPacket_default_instance_._instance,
  &::network::_GDSpawnMobTimedPacket_default_instance_._instance,
  &::network::_GDForceItemDeletePacket_default_instance_._instance,
  &::network::_GDCombatZoneSkillsCachePacket_default_instance_._instance,
  &::network::_GDWhisperPlayerExistCheckPacket_default_instance_._instance,
  &::network::_GDWhisperPlayerMessageOfflinePacket_default_instance_._instance,
  &::network::_GDLoadItemRefundPacket_default_instance_._instance,
  &::network::_GDItemDestroyLogPacket_default_instance_._instance,
  &::network::_GDItemTimedIgnorePacket_default_instance_._instance,
  &::network::_GDMarriageAddPacket_default_instance_._instance,
  &::network::_GDMarriageUpdatePacket_default_instance_._instance,
  &::network::_GDMarriageRemovePacket_default_instance_._instance,
  &::network::_GDMarriageBreakPacket_default_instance_._instance,
  &::network::_GDWeddingRequestPacket_default_instance_._instance,
  &::network::_GDWeddingReadyPacket_default_instance_._instance,
  &::network::_GDWeddingEndPacket_default_instance_._instance,
  &::network::_GDPartyCreatePacket_default_instance_._instance,
  &::network::_GDPartyDeletePacket_default_instance_._instance,
  &::network::_GDPartyAddPacket_default_instance_._instance,
  &::network::_GDPartyRemovePacket_default_instance_._instance,
  &::network::_GDPartyStateChangePacket_default_instance_._instance,
  &::network::_GDPartySetMemberLevelPacket_default_instance_._instance,
  &::network::_GDGuildCreatePacket_default_instance_._instance,
  &::network::_GDGuildSkillUpdatePacket_default_instance_._instance,
  &::network::_GDGuildExpUpdatePacket_default_instance_._instance,
  &::network::_GDGuildAddMemberPacket_default_instance_._instance,
  &::network::_GDGuildRemoveMemberPacket_default_instance_._instance,
  &::network::_GDGuildChangeGradePacket_default_instance_._instance,
  &::network::_GDGuildChangeMemberDataPacket_default_instance_._instance,
  &::network::_GDGuildDisbandPacket_default_instance_._instance,
  &::network::_GDGuildDungeonPacket_default_instance_._instance,
  &::network::_GDGuildDungeonCDPacket_default_instance_._instance,
  &::network::_GDGuildWarPacket_default_instance_._instance,
  &::network::_GDGuildWarScorePacket_default_instance_._instance,
  &::network::_GDGuildChangeLadderPointPacket_default_instance_._instance,
  &::network::_GDGuildUseSkillPacket_default_instance_._instance,
  &::network::_GDGuildDepositMoneyPacket_default_instance_._instance,
  &::network::_GDGuildWithdrawMoneyPacket_default_instance_._instance,
  &::network::_GDGuildWithdrawMoneyGiveReplyPacket_default_instance_._instance,
  &::network::_GDGuildWarBetPacket_default_instance_._instance,
  &::network::_GDGuildReqChangeMasterPacket_default_instance_._instance,
  &::network::_GDGuildSafeboxLoadPacket_default_instance_._instance,
  &::network::_GDGuildSafeboxCreatePacket_default_instance_._instance,
  &::network::_GDGuildSafeboxSizePacket_default_instance_._instance,
  &::network::_GDGuildSafeboxAddPacket_default_instance_._instance,
  &::network::_GDGuildSafeboxTakePacket_default_instance_._instance,
  &::network::_GDGuildSafeboxMovePacket_default_instance_._instance,
  &::network::_GDGuildSafeboxGiveGoldPacket_default_instance_._instance,
  &::network::_GDGuildSafeboxGetGoldPacket_default_instance_._instance,
};

const char descriptor_table_protodef_gd_5fpackets_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020gd_packets.proto\022\007network\032\ndata.proto\032"
  "\017data_item.proto\032\021data_player.proto\032\016dat"
  "a_pet.proto\"]\n\014GDBootPacket\022\030\n\020item_rang"
  "e_start\030\001 \001(\r\022\026\n\016item_range_end\030\002 \001(\r\022\n\n"
  "\002ip\030\003 \001(\014\022\017\n\007channel\030\004 \001(\r\"\303\001\n\rGDSetupPa"
  "cket\022\021\n\tpublic_ip\030\001 \001(\014\022\017\n\007channel\030\002 \001(\r"
  "\022\023\n\013listen_port\030\003 \001(\r\022\020\n\010p2p_port\030\004 \001(\r\022"
  "\014\n\004maps\030\005 \003(\r\022,\n\006logins\030\006 \003(\0132\034.network."
  "TPacketLoginOnSetup\022\023\n\013auth_server\030\007 \001(\010"
  "\022\026\n\016processor_core\030\010 \001(\010\";\n\033GDUpdateChan"
  "nelStatusPacket\022\014\n\004port\030\001 \001(\r\022\016\n\006status\030"
  "\002 \001(\r\"4\n\026GDBlockExceptionPacket\022\013\n\003cmd\030\001"
  " \001(\r\022\r\n\005login\030\002 \001(\014\"$\n\023GDPlayerCountPack"
  "et\022\r\n\005count\030\001 \001(\r\"!\n\023GDReloadAdminPacket"
  "\022\n\n\002ip\030\001 \001(\014\"\\\n\024GDRecvShutdownPacket\022\021\n\t"
  "start_sec\030\001 \001(\005\022\023\n\013maintenance\030\002 \001(\010\022\034\n\024"
  "maintenance_duration\030\003 \001(\005\"\244\002\n\021GDAuthLog"
  "inPacket\022\022\n\naccount_id\030\001 \001(\r\022\021\n\tlogin_ke"
  "y\030\002 \001(\r\022\r\n\005login\030\003 \001(\014\022\014\n\004hwid\030\004 \001(\014\022\021\n\t"
  "social_id\030\005 \001(\014\022\023\n\013client_keys\030\006 \003(\r\022\021\n\t"
  "bill_type\030\007 \001(\r\022\017\n\007bill_id\030\010 \001(\r\022\025\n\rprem"
  "ium_times\030\t \003(\005\022\020\n\010language\030\n \001(\r\022\022\n\ntra"
  "deblock\030\013 \001(\r\022\020\n\010hwid2ban\030\014 \001(\r\022\r\n\005hwid2"
  "\030\r \001(\014\022\r\n\005coins\030\016 \001(\010\022\022\n\ntemp_login\030\017 \001("
  "\010\"V\n\022GDLoginByKeyPacket\022\r\n\005login\030\001 \001(\014\022\021"
  "\n\tlogin_key\030\002 \001(\r\022\022\n\nclient_key\030\003 \003(\r\022\n\n"
  "\002ip\030\004 \001(\014\"\205\001\n\024GDPlayerCreatePacket\022\r\n\005lo"
  "gin\030\001 \001(\014\022\016\n\006passwd\030\002 \001(\014\022\022\n\naccount_id\030"
  "\003 \001(\r\022\025\n\raccount_index\030\004 \001(\r\022#\n\014player_t"
  "able\030\005 \001(\0132\r.TPlayerTable\"e\n\024GDPlayerDel"
  "etePacket\022\r\n\005login\030\001 \001(\014\022\021\n\tplayer_id\030\002 "
  "\001(\r\022\025\n\raccount_index\030\003 \001(\r\022\024\n\014private_co"
  "de\030\004 \001(\014\"/\n\022GDChangeNamePacket\022\013\n\003pid\030\001 "
  "\001(\r\022\014\n\004name\030\002 \001(\014\":\n\024GDEmpireSelectPacke"
  "t\022\022\n\naccount_id\030\001 \001(\r\022\016\n\006empire\030\002 \001(\r\"R\n"
  "\030GDSelectUpdateHairPacket\022\013\n\003pid\030\001 \001(\r\022\021"
  "\n\thair_part\030\002 \001(\r\022\026\n\016hair_base_part\030\003 \001("
  "\r\"Q\n\025GDBillingExpirePacket\022\r\n\005login\030\001 \001("
  "\014\022\021\n\tbill_type\030\002 \001(\r\022\026\n\016remain_seconds\030\003"
  " \001(\r\"$\n\024GDBillingCheckPacket\022\014\n\004keys\030\001 \003"
  "(\r\"#\n\022GDDisconnectPacket\022\r\n\005login\030\001 \001(\014\""
  ")\n\023GDValidLogoutPacket\022\022\n\naccount_id\030\001 \001"
  "(\r\"R\n\022GDPlayerLoadPacket\022\022\n\naccount_id\030\001"
  " \001(\r\022\021\n\tplayer_id\030\002 \001(\r\022\025\n\raccount_index"
  "\030\003 \001(\r\"[\n\023GDSafeboxLoadPacket\022\022\n\naccount"
  "_id\030\001 \001(\r\022\r\n\005login\030\002 \001(\014\022\020\n\010password\030\003 \001"
  "(\014\022\017\n\007is_mall\030\004 \001(\010\"#\n\024GDReqHorseNamePac"
  "ket\022\013\n\003pid\030\001 \001(\r\"1\n\022GDPlayerSavePacket\022\033"
  "\n\004data\030\001 \001(\0132\r.TPlayerTable\"4\n\020GDItemSav"
  "ePacket\022 \n\004data\030\001 \001(\0132\022.network.TItemDat"
  "a\"0\n\021GDQuestSavePacket\022\033\n\005datas\030\001 \003(\0132\014."
  "TQuestTable\";\n\017GDPetSavePacket\022(\n\004data\030\001"
  " \001(\0132\032.network.TPetAdvancedTable\"h\n\023GDSa"
  "feboxSavePacket\022\022\n\naccount_id\030\001 \001(\r\022\014\n\004s"
  "ize\030\002 \001(\r\022\014\n\004gold\030\003 \001(\003\022!\n\005items\030\004 \003(\0132\022"
  ".network.TItemData\"3\n\023GDItemDestroyPacke"
  "t\022\017\n\007item_id\030\001 \001(\r\022\013\n\003pid\030\002 \001(\r\"A\n\026GDSki"
  "llColorSavePacket\022\021\n\tplayer_id\030\001 \001(\r\022\024\n\014"
  "skill_colors\030\002 \003(\r\":\n\026GDPlayerRuneSavePa"
  "cket\022\021\n\tplayer_id\030\001 \001(\r\022\r\n\005runes\030\002 \003(\r\"*"
  "\n\033GDEquipmentPageDeletePacket\022\013\n\003pid\030\001 \001"
  "(\r\"K\n\031GDEquipmentPageSavePacket\022.\n\005pages"
  "\030\001 \003(\0132\037.network.TEquipmentChangerTable\""
  "!\n\022GDFlushCachePacket\022\013\n\003pid\030\001 \001(\r\"$\n\021GD"
  "ItemFlushPacket\022\017\n\007item_id\030\001 \001(\r\"/\n\016GDLo"
  "goutPacket\022\r\n\005login\030\001 \001(\014\022\016\n\006passwd\030\002 \001("
  "\014\"=\n\031GDSafeboxChangeSizePacket\022\022\n\naccoun"
  "t_id\030\001 \001(\r\022\014\n\004size\030\002 \001(\r\"_\n\035GDSafeboxCha"
  "ngePasswordPacket\022\022\n\naccount_id\030\001 \001(\r\022\024\n"
  "\014old_password\030\002 \001(\014\022\024\n\014new_password\030\003 \001("
  "\014\"E\n\021GDAddAffectPacket\022\013\n\003pid\030\001 \001(\r\022#\n\004e"
  "lem\030\002 \001(\0132\025.TPacketAffectElement\"X\n\024GDRe"
  "moveAffectPacket\022\013\n\003pid\030\001 \001(\r\022\014\n\004type\030\002 "
  "\001(\r\022\020\n\010apply_on\030\003 \001(\r\022\023\n\013apply_value\030\004 \001"
  "(\005\"S\n\031GDHighscoreRegisterPacket\022\013\n\003pid\030\001"
  " \001(\r\022\r\n\005value\030\002 \001(\005\022\013\n\003dir\030\003 \001(\005\022\r\n\005boar"
  "d\030\004 \001(\014\"D\n\013GDSMSPacket\022\014\n\004from\030\001 \001(\014\022\n\n\002"
  "to\030\002 \001(\014\022\016\n\006mobile\030\003 \001(\014\022\013\n\003msg\030\004 \001(\014\"_\n"
  "\030GDRequestGuildPrivPacket\022\014\n\004type\030\001 \001(\r\022"
  "\r\n\005value\030\002 \001(\005\022\020\n\010guild_id\030\003 \001(\r\022\024\n\014dura"
  "tion_sec\030\004 \001(\r\"^\n\031GDRequestEmpirePrivPac"
  "ket\022\014\n\004type\030\001 \001(\r\022\r\n\005value\030\002 \001(\005\022\016\n\006empi"
  "re\030\003 \001(\r\022\024\n\014duration_sec\030\004 \001(\r\"H\n\034GDRequ"
  "estCharacterPrivPacket\022\014\n\004type\030\001 \001(\r\022\r\n\005"
  "value\030\002 \001(\005\022\013\n\003pid\030\003 \001(\r\"<\n\020GDMoneyLogPa"
  "cket\022\014\n\004type\030\001 \001(\r\022\014\n\004vnum\030\002 \001(\r\022\014\n\004gold"
  "\030\003 \001(\003\"H\n\024GDSetEventFlagPacket\022\021\n\tflag_n"
  "ame\030\001 \001(\014\022\r\n\005value\030\002 \001(\005\022\016\n\006is_add\030\003 \001(\010"
  "\"\213\001\n\024GDCreateObjectPacket\022\014\n\004vnum\030\001 \001(\r\022"
  "\017\n\007land_id\030\002 \001(\r\022\021\n\tmap_index\030\003 \001(\r\022\t\n\001x"
  "\030\004 \001(\005\022\t\n\001y\030\005 \001(\005\022\r\n\005rot_x\030\006 \001(\002\022\r\n\005rot_"
  "y\030\007 \001(\002\022\r\n\005rot_z\030\010 \001(\002\"\"\n\024GDDeleteObject"
  "Packet\022\n\n\002id\030\001 \001(\r\"7\n\022GDUpdateLandPacket"
  "\022\020\n\010guild_id\030\001 \001(\r\022\017\n\007land_id\030\002 \001(\r\"u\n\rG"
  "DVCardPacket\022\n\n\002id\030\001 \001(\r\022\026\n\016sell_charact"
  "er\030\002 \001(\014\022\024\n\014sell_account\030\003 \001(\014\022\025\n\rbuy_ch"
  "aracter\030\004 \001(\014\022\023\n\013buy_account\030\005 \001(\014\"3\n\021GD"
  "BlockChatPacket\022\014\n\004name\030\001 \001(\014\022\020\n\010duratio"
  "n\030\002 \001(\005\"^\n\035GDMyShopPricelistUpdatePacket"
  "\022\020\n\010owner_id\030\001 \001(\r\022+\n\nprice_info\030\002 \003(\0132\027"
  ".network.TItemPriceInfo\"-\n\036GDMyShopPrice"
  "listRequestPacket\022\013\n\003pid\030\001 \001(\r\":\n\027GDUpda"
  "teHorseNamePacket\022\013\n\003pid\030\001 \001(\r\022\022\n\nhorse_"
  "name\030\002 \001(\014\"T\n\031GDRequestChargeCashPacket\022"
  "\022\n\naccount_id\030\001 \001(\r\022\016\n\006amount\030\002 \001(\r\022\023\n\013c"
  "harge_type\030\003 \001(\r\"#\n\025GDDeleteAwardIDPacke"
  "t\022\n\n\002id\030\001 \001(\r\";\n\025GDChannelSwitchPacket\022\017"
  "\n\007channel\030\001 \001(\r\022\021\n\tmap_index\030\002 \001(\r\"\216\001\n\025G"
  "DSpawnMobTimedPacket\022\020\n\010mob_vnum\030\001 \001(\r\022\021"
  "\n\tmap_index\030\002 \001(\r\022\t\n\001x\030\003 \001(\005\022\t\n\001y\030\004 \001(\005\022"
  "\017\n\007channel\030\005 \001(\r\022\023\n\013target_time\030\006 \001(\005\022\024\n"
  "\014despawn_time\030\007 \001(\005\"%\n\027GDForceItemDelete"
  "Packet\022\n\n\002id\030\001 \001(\r\"\260\001\n\035GDCombatZoneSkill"
  "sCachePacket\022\013\n\003pid\030\001 \001(\r\022\024\n\014skill_level"
  "1\030\002 \001(\r\022\024\n\014skill_level2\030\003 \001(\r\022\024\n\014skill_l"
  "evel3\030\004 \001(\r\022\024\n\014skill_level4\030\005 \001(\r\022\024\n\014ski"
  "ll_level5\030\006 \001(\r\022\024\n\014skill_level6\030\007 \001(\r\"c\n"
  "\037GDWhisperPlayerExistCheckPacket\022\013\n\003pid\030"
  "\001 \001(\r\022\r\n\005is_gm\030\002 \001(\010\022\023\n\013target_name\030\003 \001("
  "\014\022\017\n\007message\030\004 \001(\014\"u\n#GDWhisperPlayerMes"
  "sageOfflinePacket\022\013\n\003pid\030\001 \001(\r\022\r\n\005is_gm\030"
  "\002 \001(\010\022\014\n\004name\030\003 \001(\014\022\023\n\013target_name\030\004 \001(\014"
  "\022\017\n\007message\030\005 \001(\014\"%\n\026GDLoadItemRefundPac"
  "ket\022\013\n\003pid\030\001 \001(\r\"H\n\026GDItemDestroyLogPack"
  "et\022 \n\004item\030\001 \001(\0132\022.network.TItemData\022\014\n\004"
  "type\030\002 \001(\r\"C\n\027GDItemTimedIgnorePacket\022\017\n"
  "\007item_id\030\001 \001(\r\022\027\n\017ignore_duration\030\002 \001(\r\""
  "c\n\023GDMarriageAddPacket\022\014\n\004pid1\030\001 \001(\r\022\014\n\004"
  "pid2\030\002 \001(\r\022\022\n\nmarry_time\030\003 \001(\r\022\r\n\005name1\030"
  "\004 \001(\014\022\r\n\005name2\030\005 \001(\014\"Y\n\026GDMarriageUpdate"
  "Packet\022\014\n\004pid1\030\001 \001(\r\022\014\n\004pid2\030\002 \001(\r\022\022\n\nlo"
  "ve_point\030\003 \001(\005\022\017\n\007married\030\004 \001(\010\"4\n\026GDMar"
  "riageRemovePacket\022\014\n\004pid1\030\001 \001(\r\022\014\n\004pid2\030"
  "\002 \001(\r\"3\n\025GDMarriageBreakPacket\022\014\n\004pid1\030\001"
  " \001(\r\022\014\n\004pid2\030\002 \001(\r\"4\n\026GDWeddingRequestPa"
  "cket\022\014\n\004pid1\030\001 \001(\r\022\014\n\004pid2\030\002 \001(\r\"E\n\024GDWe"
  "ddingReadyPacket\022\014\n\004pid1\030\001 \001(\r\022\014\n\004pid2\030\002"
  " \001(\r\022\021\n\tmap_index\030\003 \001(\r\"0\n\022GDWeddingEndP"
  "acket\022\014\n\004pid1\030\001 \001(\r\022\014\n\004pid2\030\002 \001(\r\")\n\023GDP"
  "artyCreatePacket\022\022\n\nleader_pid\030\001 \001(\r\")\n\023"
  "GDPartyDeletePacket\022\022\n\nleader_pid\030\001 \001(\r\""
  "B\n\020GDPartyAddPacket\022\022\n\nleader_pid\030\001 \001(\r\022"
  "\013\n\003pid\030\002 \001(\r\022\r\n\005state\030\003 \001(\r\"6\n\023GDPartyRe"
  "movePacket\022\022\n\nleader_pid\030\001 \001(\r\022\013\n\003pid\030\002 "
  "\001(\r\"W\n\030GDPartyStateChangePacket\022\022\n\nleade"
  "r_pid\030\001 \001(\r\022\013\n\003pid\030\002 \001(\r\022\014\n\004role\030\003 \001(\r\022\014"
  "\n\004flag\030\004 \001(\010\"M\n\033GDPartySetMemberLevelPac"
  "ket\022\022\n\nleader_pid\030\001 \001(\r\022\013\n\003pid\030\002 \001(\r\022\r\n\005"
  "level\030\003 \001(\r\"\'\n\023GDGuildCreatePacket\022\020\n\010gu"
  "ild_id\030\001 \001(\r\"u\n\030GDGuildSkillUpdatePacket"
  "\022\020\n\010guild_id\030\001 \001(\r\022\016\n\006amount\030\002 \001(\005\022\024\n\014sk"
  "ill_levels\030\003 \003(\r\022\023\n\013skill_point\030\004 \001(\r\022\014\n"
  "\004save\030\005 \001(\010\":\n\026GDGuildExpUpdatePacket\022\020\n"
  "\010guild_id\030\001 \001(\r\022\016\n\006amount\030\002 \001(\005\"F\n\026GDGui"
  "ldAddMemberPacket\022\013\n\003pid\030\001 \001(\r\022\020\n\010guild_"
  "id\030\002 \001(\r\022\r\n\005grade\030\003 \001(\r\":\n\031GDGuildRemove"
  "MemberPacket\022\020\n\010guild_id\030\001 \001(\r\022\013\n\003pid\030\002 "
  "\001(\r\";\n\030GDGuildChangeGradePacket\022\020\n\010guild"
  "_id\030\001 \001(\r\022\r\n\005grade\030\002 \001(\r\"k\n\035GDGuildChang"
  "eMemberDataPacket\022\020\n\010guild_id\030\001 \001(\r\022\013\n\003p"
  "id\030\002 \001(\r\022\r\n\005offer\030\003 \001(\r\022\r\n\005level\030\004 \001(\r\022\r"
  "\n\005grade\030\005 \001(\r\"(\n\024GDGuildDisbandPacket\022\020\n"
  "\010guild_id\030\001 \001(\r\"L\n\024GDGuildDungeonPacket\022"
  "\020\n\010guild_id\030\001 \001(\r\022\017\n\007channel\030\002 \001(\r\022\021\n\tma"
  "p_index\030\003 \001(\r\"8\n\026GDGuildDungeonCDPacket\022"
  "\020\n\010guild_id\030\001 \001(\r\022\014\n\004time\030\002 \001(\r\"}\n\020GDGui"
  "ldWarPacket\022\014\n\004type\030\001 \001(\r\022\013\n\003war\030\002 \001(\r\022\022"
  "\n\nguild_from\030\003 \001(\r\022\020\n\010guild_to\030\004 \001(\r\022\021\n\t"
  "war_price\030\005 \001(\005\022\025\n\rinitial_score\030\006 \001(\005\"k"
  "\n\025GDGuildWarScorePacket\022\030\n\020guild_gain_po"
  "int\030\001 \001(\r\022\026\n\016guild_opponent\030\002 \001(\r\022\r\n\005sco"
  "re\030\003 \001(\005\022\021\n\tbet_score\030\004 \001(\005\"B\n\036GDGuildCh"
  "angeLadderPointPacket\022\020\n\010guild_id\030\001 \001(\r\022"
  "\016\n\006change\030\002 \001(\005\"O\n\025GDGuildUseSkillPacket"
  "\022\020\n\010guild_id\030\001 \001(\r\022\022\n\nskill_vnum\030\002 \001(\r\022\020"
  "\n\010cooltime\030\003 \001(\r\";\n\031GDGuildDepositMoneyP"
  "acket\022\020\n\010guild_id\030\001 \001(\r\022\014\n\004gold\030\002 \001(\005\"<\n"
  "\032GDGuildWithdrawMoneyPacket\022\020\n\010guild_id\030"
  "\001 \001(\r\022\014\n\004gold\030\002 \001(\005\"b\n#GDGuildWithdrawMo"
  "neyGiveReplyPacket\022\020\n\010guild_id\030\001 \001(\r\022\023\n\013"
  "change_gold\030\002 \001(\005\022\024\n\014give_success\030\003 \001(\010\""
  "T\n\023GDGuildWarBetPacket\022\016\n\006war_id\030\001 \001(\r\022\r"
  "\n\005login\030\002 \001(\014\022\014\n\004gold\030\003 \001(\r\022\020\n\010guild_id\030"
  "\004 \001(\r\"P\n\034GDGuildReqChangeMasterPacket\022\020\n"
  "\010guild_id\030\001 \001(\r\022\017\n\007id_from\030\002 \001(\r\022\r\n\005id_t"
  "o\030\003 \001(\r\",\n\030GDGuildSafeboxLoadPacket\022\020\n\010g"
  "uild_id\030\001 \001(\r\"W\n\032GDGuildSafeboxCreatePac"
  "ket\022\020\n\010guild_id\030\001 \001(\r\022\013\n\003pid\030\002 \001(\r\022\014\n\004na"
  "me\030\003 \001(\014\022\014\n\004size\030\004 \001(\r\"U\n\030GDGuildSafebox"
  "SizePacket\022\020\n\010guild_id\030\001 \001(\r\022\013\n\003pid\030\002 \001("
  "\r\022\014\n\004name\030\003 \001(\014\022\014\n\004size\030\004 \001(\r\"V\n\027GDGuild"
  "SafeboxAddPacket\022\013\n\003pid\030\001 \001(\r\022\014\n\004name\030\002 "
  "\001(\014\022 \n\004item\030\003 \001(\0132\022.network.TItemData\"\211\001"
  "\n\030GDGuildSafeboxTakePacket\022\020\n\010guild_id\030\001"
  " \001(\r\022\013\n\003pid\030\002 \001(\r\022\023\n\013player_name\030\003 \001(\014\022\022"
  "\n\nsource_pos\030\004 \001(\r\022%\n\ntarget_pos\030\005 \001(\0132\021"
  ".network.TItemPos\"V\n\030GDGuildSafeboxMoveP"
  "acket\022\020\n\010guild_id\030\001 \001(\r\022\023\n\013source_slot\030\002"
  " \001(\r\022\023\n\013target_slot\030\003 \001(\r\"Y\n\034GDGuildSafe"
  "boxGiveGoldPacket\022\013\n\003pid\030\001 \001(\r\022\014\n\004name\030\002"
  " \001(\014\022\020\n\010guild_id\030\003 \001(\r\022\014\n\004gold\030\004 \001(\004\"X\n\033"
  "GDGuildSafeboxGetGoldPacket\022\013\n\003pid\030\001 \001(\r"
  "\022\014\n\004name\030\002 \001(\014\022\020\n\010guild_id\030\003 \001(\r\022\014\n\004gold"
  "\030\004 \001(\004b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_gd_5fpackets_2eproto_deps[4] = {
  &::descriptor_table_data_2eproto,
  &::descriptor_table_data_5fitem_2eproto,
  &::descriptor_table_data_5fpet_2eproto,
  &::descriptor_table_data_5fplayer_2eproto,
};
static ::_pbi::once_flag descriptor_table_gd_5fpackets_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_gd_5fpackets_2eproto = {
    false, false, 8134, descriptor_table_protodef_gd_5fpackets_2eproto,
    "gd_packets.proto",
    &descriptor_table_gd_5fpackets_2eproto_once, descriptor_table_gd_5fpackets_2eproto_deps, 4, 104,
    schemas, file_default_instances, TableStruct_gd_5fpackets_2eproto::offsets,
    file_level_metadata_gd_5fpackets_2eproto, file_level_enum_descriptors_gd_5fpackets_2eproto,
    file_level_service_descriptors_gd_5fpackets_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_gd_5fpackets_2eproto_getter() {
  return &descriptor_table_gd_5fpackets_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_gd_5fpackets_2eproto(&descriptor_table_gd_5fpackets_2eproto);
namespace network {

// ===================================================================

class GDBootPacket::_Internal {
 public:
};

GDBootPacket::GDBootPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GDBootPacket)
}
GDBootPacket::GDBootPacket(const GDBootPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GDBootPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ip_){}
    , decltype(_impl_.item_range_start_){}
    , decltype(_impl_.item_range_end_){}
    , decltype(_impl_.channel_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ip().empty()) {
    _this->_impl_.ip_.Set(from._internal_ip(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.item_range_start_, &from._impl_.item_range_start_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.channel_) -
    reinterpret_cast<char*>(&_impl_.item_range_start_)) + sizeof(_impl_.channel_));
  // @@protoc_insertion_point(copy_constructor:network.GDBootPacket)
}

inline void GDBootPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ip_){}
    , decltype(_impl_.item_range_start_){0u}
    , decltype(_impl_.item_range_end_){0u}
    , decltype(_impl_.channel_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GDBootPacket::~GDBootPacket() {
  // @@protoc_insertion_point(destructor:network.GDBootPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GDBootPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ip_.Destroy();
}

void GDBootPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GDBootPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GDBootPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ip_.ClearToEmpty();
  ::memset(&_impl_.item_range_start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.channel_) -
      reinterpret_cast<char*>(&_impl_.item_range_start_)) + sizeof(_impl_.channel_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GDBootPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 item_range_start = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.item_range_start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 item_range_end = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.item_range_end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes ip = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_ip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 channel = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GDBootPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GDBootPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 item_range_start = 1;
  if (this->_internal_item_range_start() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_item_range_start(), target);
  }

  // uint32 item_range_end = 2;
  if (this->_internal_item_range_end() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_item_range_end(), target);
  }

  // bytes ip = 3;
  if (!this->_internal_ip().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_ip(), target);
  }

  // uint32 channel = 4;
  if (this->_internal_channel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_channel(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GDBootPacket)
  return target;
}

size_t GDBootPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GDBootPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes ip = 3;
  if (!this->_internal_ip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_ip());
  }

  // uint32 item_range_start = 1;
  if (this->_internal_item_range_start() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_item_range_start());
  }

  // uint32 item_range_end = 2;
  if (this->_internal_item_range_end() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_item_range_end());
  }

  // uint32 channel = 4;
  if (this->_internal_channel() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GDBootPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GDBootPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GDBootPacket::GetClassData() const { return &_class_data_; }


void GDBootPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GDBootPacket*>(&to_msg);
  auto& from = static_cast<const GDBootPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GDBootPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ip().empty()) {
    _this->_internal_set_ip(from._internal_ip());
  }
  if (from._internal_item_range_start() != 0) {
    _this->_internal_set_item_range_start(from._internal_item_range_start());
  }
  if (from._internal_item_range_end() != 0) {
    _this->_internal_set_item_range_end(from._internal_item_range_end());
  }
  if (from._internal_channel() != 0) {
    _this->_internal_set_channel(from._internal_channel());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GDBootPacket::CopyFrom(const GDBootPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GDBootPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GDBootPacket::IsInitialized() const {
  return true;
}

void GDBootPacket::InternalSwap(GDBootPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ip_, lhs_arena,
      &other->_impl_.ip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GDBootPacket, _impl_.channel_)
      + sizeof(GDBootPacket::_impl_.channel_)
      - PROTOBUF_FIELD_OFFSET(GDBootPacket, _impl_.item_range_start_)>(
          reinterpret_cast<char*>(&_impl_.item_range_start_),
          reinterpret_cast<char*>(&other->_impl_.item_range_start_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GDBootPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gd_5fpackets_2eproto_getter, &descriptor_table_gd_5fpackets_2eproto_once,
      file_level_metadata_gd_5fpackets_2eproto[0]);
}

// ===================================================================

class GDSetupPacket::_Internal {
 public:
};

void GDSetupPacket::clear_logins() {
  _impl_.logins_.Clear();
}
GDSetupPacket::GDSetupPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GDSetupPacket)
}
GDSetupPacket::GDSetupPacket(const GDSetupPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GDSetupPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.maps_){from._impl_.maps_}
    , /*decltype(_impl_._maps_cached_byte_size_)*/{0}
    , decltype(_impl_.logins_){from._impl_.logins_}
    , decltype(_impl_.public_ip_){}
    , decltype(_impl_.channel_){}
    , decltype(_impl_.listen_port_){}
    , decltype(_impl_.p2p_port_){}
    , decltype(_impl_.auth_server_){}
    , decltype(_impl_.processor_core_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.public_ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.public_ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_public_ip().empty()) {
    _this->_impl_.public_ip_.Set(from._internal_public_ip(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.channel_, &from._impl_.channel_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.processor_core_) -
    reinterpret_cast<char*>(&_impl_.channel_)) + sizeof(_impl_.processor_core_));
  // @@protoc_insertion_point(copy_constructor:network.GDSetupPacket)
}

inline void GDSetupPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.maps_){arena}
    , /*decltype(_impl_._maps_cached_byte_size_)*/{0}
    , decltype(_impl_.logins_){arena}
    , decltype(_impl_.public_ip_){}
    , decltype(_impl_.channel_){0u}
    , decltype(_impl_.listen_port_){0u}
    , decltype(_impl_.p2p_port_){0u}
    , decltype(_impl_.auth_server_){false}
    , decltype(_impl_.processor_core_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.public_ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.public_ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GDSetupPacket::~GDSetupPacket() {
  // @@protoc_insertion_point(destructor:network.GDSetupPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GDSetupPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.maps_.~RepeatedField();
  _impl_.logins_.~RepeatedPtrField();
  _impl_.public_ip_.Destroy();
}

void GDSetupPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GDSetupPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GDSetupPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.maps_.Clear();
  _impl_.logins_.Clear();
  _impl_.public_ip_.ClearToEmpty();
  ::memset(&_impl_.channel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.processor_core_) -
      reinterpret_cast<char*>(&_impl_.channel_)) + sizeof(_impl_.processor_core_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GDSetupPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes public_ip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_public_ip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 channel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 listen_port = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.listen_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 p2p_port = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.p2p_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 maps = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_maps(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 40) {
          _internal_add_maps(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .network.TPacketLoginOnSetup logins = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_logins(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool auth_server = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.auth_server_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool processor_core = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.processor_core_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GDSetupPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GDSetupPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes public_ip = 1;
  if (!this->_internal_public_ip().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_public_ip(), target);
  }

  // uint32 channel = 2;
  if (this->_internal_channel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_channel(), target);
  }

  // uint32 listen_port = 3;
  if (this->_internal_listen_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_listen_port(), target);
  }

  // uint32 p2p_port = 4;
  if (this->_internal_p2p_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_p2p_port(), target);
  }

  // repeated uint32 maps = 5;
  {
    int byte_size = _impl_._maps_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          5, _internal_maps(), byte_size, target);
    }
  }

  // repeated .network.TPacketLoginOnSetup logins = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_logins_size()); i < n; i++) {
    const auto& repfield = this->_internal_logins(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bool auth_server = 7;
  if (this->_internal_auth_server() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_auth_server(), target);
  }

  // bool processor_core = 8;
  if (this->_internal_processor_core() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_processor_core(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GDSetupPacket)
  return target;
}

size_t GDSetupPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GDSetupPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 maps = 5;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.maps_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._maps_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .network.TPacketLoginOnSetup logins = 6;
  total_size += 1UL * this->_internal_logins_size();
  for (const auto& msg : this->_impl_.logins_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes public_ip = 1;
  if (!this->_internal_public_ip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_public_ip());
  }

  // uint32 channel = 2;
  if (this->_internal_channel() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel());
  }

  // uint32 listen_port = 3;
  if (this->_internal_listen_port() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_listen_port());
  }

  // uint32 p2p_port = 4;
  if (this->_internal_p2p_port() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_p2p_port());
  }

  // bool auth_server = 7;
  if (this->_internal_auth_server() != 0) {
    total_size += 1 + 1;
  }

  // bool processor_core = 8;
  if (this->_internal_processor_core() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GDSetupPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GDSetupPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GDSetupPacket::GetClassData() const { return &_class_data_; }


void GDSetupPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GDSetupPacket*>(&to_msg);
  auto& from = static_cast<const GDSetupPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GDSetupPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.maps_.MergeFrom(from._impl_.maps_);
  _this->_impl_.logins_.MergeFrom(from._impl_.logins_);
  if (!from._internal_public_ip().empty()) {
    _this->_internal_set_public_ip(from._internal_public_ip());
  }
  if (from._internal_channel() != 0) {
    _this->_internal_set_channel(from._internal_channel());
  }
  if (from._internal_listen_port() != 0) {
    _this->_internal_set_listen_port(from._internal_listen_port());
  }
  if (from._internal_p2p_port() != 0) {
    _this->_internal_set_p2p_port(from._internal_p2p_port());
  }
  if (from._internal_auth_server() != 0) {
    _this->_internal_set_auth_server(from._internal_auth_server());
  }
  if (from._internal_processor_core() != 0) {
    _this->_internal_set_processor_core(from._internal_processor_core());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GDSetupPacket::CopyFrom(const GDSetupPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GDSetupPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GDSetupPacket::IsInitialized() const {
  return true;
}

void GDSetupPacket::InternalSwap(GDSetupPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.maps_.InternalSwap(&other->_impl_.maps_);
  _impl_.logins_.InternalSwap(&other->_impl_.logins_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.public_ip_, lhs_arena,
      &other->_impl_.public_ip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GDSetupPacket, _impl_.processor_core_)
      + sizeof(GDSetupPacket::_impl_.processor_core_)
      - PROTOBUF_FIELD_OFFSET(GDSetupPacket, _impl_.channel_)>(
          reinterpret_cast<char*>(&_impl_.channel_),
          reinterpret_cast<char*>(&other->_impl_.channel_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GDSetupPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gd_5fpackets_2eproto_getter, &descriptor_table_gd_5fpackets_2eproto_once,
      file_level_metadata_gd_5fpackets_2eproto[1]);
}

// ===================================================================

class GDUpdateChannelStatusPacket::_Internal {
 public:
};

GDUpdateChannelStatusPacket::GDUpdateChannelStatusPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GDUpdateChannelStatusPacket)
}
GDUpdateChannelStatusPacket::GDUpdateChannelStatusPacket(const GDUpdateChannelStatusPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GDUpdateChannelStatusPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.port_){}
    , decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.port_, &from._impl_.port_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.status_) -
    reinterpret_cast<char*>(&_impl_.port_)) + sizeof(_impl_.status_));
  // @@protoc_insertion_point(copy_constructor:network.GDUpdateChannelStatusPacket)
}

inline void GDUpdateChannelStatusPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.port_){0u}
    , decltype(_impl_.status_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GDUpdateChannelStatusPacket::~GDUpdateChannelStatusPacket() {
  // @@protoc_insertion_point(destructor:network.GDUpdateChannelStatusPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GDUpdateChannelStatusPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GDUpdateChannelStatusPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GDUpdateChannelStatusPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GDUpdateChannelStatusPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.status_) -
      reinterpret_cast<char*>(&_impl_.port_)) + sizeof(_impl_.status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GDUpdateChannelStatusPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 port = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GDUpdateChannelStatusPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GDUpdateChannelStatusPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 port = 1;
  if (this->_internal_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_port(), target);
  }

  // uint32 status = 2;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GDUpdateChannelStatusPacket)
  return target;
}

size_t GDUpdateChannelStatusPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GDUpdateChannelStatusPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 port = 1;
  if (this->_internal_port() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_port());
  }

  // uint32 status = 2;
  if (this->_internal_status() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GDUpdateChannelStatusPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GDUpdateChannelStatusPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GDUpdateChannelStatusPacket::GetClassData() const { return &_class_data_; }


void GDUpdateChannelStatusPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GDUpdateChannelStatusPacket*>(&to_msg);
  auto& from = static_cast<const GDUpdateChannelStatusPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GDUpdateChannelStatusPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_port() != 0) {
    _this->_internal_set_port(from._internal_port());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GDUpdateChannelStatusPacket::CopyFrom(const GDUpdateChannelStatusPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GDUpdateChannelStatusPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GDUpdateChannelStatusPacket::IsInitialized() const {
  return true;
}

void GDUpdateChannelStatusPacket::InternalSwap(GDUpdateChannelStatusPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GDUpdateChannelStatusPacket, _impl_.status_)
      + sizeof(GDUpdateChannelStatusPacket::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(GDUpdateChannelStatusPacket, _impl_.port_)>(
          reinterpret_cast<char*>(&_impl_.port_),
          reinterpret_cast<char*>(&other->_impl_.port_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GDUpdateChannelStatusPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gd_5fpackets_2eproto_getter, &descriptor_table_gd_5fpackets_2eproto_once,
      file_level_metadata_gd_5fpackets_2eproto[2]);
}

// ===================================================================

class GDBlockExceptionPacket::_Internal {
 public:
};

GDBlockExceptionPacket::GDBlockExceptionPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GDBlockExceptionPacket)
}
GDBlockExceptionPacket::GDBlockExceptionPacket(const GDBlockExceptionPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GDBlockExceptionPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.login_){}
    , decltype(_impl_.cmd_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.login_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.login_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_login().empty()) {
    _this->_impl_.login_.Set(from._internal_login(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.cmd_ = from._impl_.cmd_;
  // @@protoc_insertion_point(copy_constructor:network.GDBlockExceptionPacket)
}

inline void GDBlockExceptionPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.login_){}
    , decltype(_impl_.cmd_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.login_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.login_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GDBlockExceptionPacket::~GDBlockExceptionPacket() {
  // @@protoc_insertion_point(destructor:network.GDBlockExceptionPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GDBlockExceptionPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.login_.Destroy();
}

void GDBlockExceptionPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GDBlockExceptionPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GDBlockExceptionPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.login_.ClearToEmpty();
  _impl_.cmd_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GDBlockExceptionPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 cmd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.cmd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes login = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_login();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GDBlockExceptionPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GDBlockExceptionPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 cmd = 1;
  if (this->_internal_cmd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_cmd(), target);
  }

  // bytes login = 2;
  if (!this->_internal_login().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_login(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GDBlockExceptionPacket)
  return target;
}

size_t GDBlockExceptionPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GDBlockExceptionPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes login = 2;
  if (!this->_internal_login().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_login());
  }

  // uint32 cmd = 1;
  if (this->_internal_cmd() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_cmd());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GDBlockExceptionPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GDBlockExceptionPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GDBlockExceptionPacket::GetClassData() const { return &_class_data_; }


void GDBlockExceptionPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GDBlockExceptionPacket*>(&to_msg);
  auto& from = static_cast<const GDBlockExceptionPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GDBlockExceptionPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_login().empty()) {
    _this->_internal_set_login(from._internal_login());
  }
  if (from._internal_cmd() != 0) {
    _this->_internal_set_cmd(from._internal_cmd());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GDBlockExceptionPacket::CopyFrom(const GDBlockExceptionPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GDBlockExceptionPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GDBlockExceptionPacket::IsInitialized() const {
  return true;
}

void GDBlockExceptionPacket::InternalSwap(GDBlockExceptionPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.login_, lhs_arena,
      &other->_impl_.login_, rhs_arena
  );
  swap(_impl_.cmd_, other->_impl_.cmd_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GDBlockExceptionPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gd_5fpackets_2eproto_getter, &descriptor_table_gd_5fpackets_2eproto_once,
      file_level_metadata_gd_5fpackets_2eproto[3]);
}

// ===================================================================

class GDPlayerCountPacket::_Internal {
 public:
};

GDPlayerCountPacket::GDPlayerCountPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GDPlayerCountPacket)
}
GDPlayerCountPacket::GDPlayerCountPacket(const GDPlayerCountPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GDPlayerCountPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.count_ = from._impl_.count_;
  // @@protoc_insertion_point(copy_constructor:network.GDPlayerCountPacket)
}

inline void GDPlayerCountPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.count_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GDPlayerCountPacket::~GDPlayerCountPacket() {
  // @@protoc_insertion_point(destructor:network.GDPlayerCountPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GDPlayerCountPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GDPlayerCountPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GDPlayerCountPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GDPlayerCountPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.count_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GDPlayerCountPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GDPlayerCountPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GDPlayerCountPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 count = 1;
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GDPlayerCountPacket)
  return target;
}

size_t GDPlayerCountPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GDPlayerCountPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 count = 1;
  if (this->_internal_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GDPlayerCountPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GDPlayerCountPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GDPlayerCountPacket::GetClassData() const { return &_class_data_; }


void GDPlayerCountPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GDPlayerCountPacket*>(&to_msg);
  auto& from = static_cast<const GDPlayerCountPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GDPlayerCountPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_count() != 0) {
    _this->_internal_set_count(from._internal_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GDPlayerCountPacket::CopyFrom(const GDPlayerCountPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GDPlayerCountPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GDPlayerCountPacket::IsInitialized() const {
  return true;
}

void GDPlayerCountPacket::InternalSwap(GDPlayerCountPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.count_, other->_impl_.count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GDPlayerCountPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gd_5fpackets_2eproto_getter, &descriptor_table_gd_5fpackets_2eproto_once,
      file_level_metadata_gd_5fpackets_2eproto[4]);
}

// ===================================================================

class GDReloadAdminPacket::_Internal {
 public:
};

GDReloadAdminPacket::GDReloadAdminPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GDReloadAdminPacket)
}
GDReloadAdminPacket::GDReloadAdminPacket(const GDReloadAdminPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GDReloadAdminPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ip_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ip().empty()) {
    _this->_impl_.ip_.Set(from._internal_ip(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:network.GDReloadAdminPacket)
}

inline void GDReloadAdminPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ip_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GDReloadAdminPacket::~GDReloadAdminPacket() {
  // @@protoc_insertion_point(destructor:network.GDReloadAdminPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GDReloadAdminPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ip_.Destroy();
}

void GDReloadAdminPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GDReloadAdminPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GDReloadAdminPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ip_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GDReloadAdminPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes ip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_ip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GDReloadAdminPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GDReloadAdminPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes ip = 1;
  if (!this->_internal_ip().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_ip(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GDReloadAdminPacket)
  return target;
}

size_t GDReloadAdminPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GDReloadAdminPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes ip = 1;
  if (!this->_internal_ip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_ip());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GDReloadAdminPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GDReloadAdminPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GDReloadAdminPacket::GetClassData() const { return &_class_data_; }


void GDReloadAdminPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GDReloadAdminPacket*>(&to_msg);
  auto& from = static_cast<const GDReloadAdminPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GDReloadAdminPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ip().empty()) {
    _this->_internal_set_ip(from._internal_ip());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GDReloadAdminPacket::CopyFrom(const GDReloadAdminPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GDReloadAdminPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GDReloadAdminPacket::IsInitialized() const {
  return true;
}

void GDReloadAdminPacket::InternalSwap(GDReloadAdminPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ip_, lhs_arena,
      &other->_impl_.ip_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GDReloadAdminPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gd_5fpackets_2eproto_getter, &descriptor_table_gd_5fpackets_2eproto_once,
      file_level_metadata_gd_5fpackets_2eproto[5]);
}

// ===================================================================

class GDRecvShutdownPacket::_Internal {
 public:
};

GDRecvShutdownPacket::GDRecvShutdownPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GDRecvShutdownPacket)
}
GDRecvShutdownPacket::GDRecvShutdownPacket(const GDRecvShutdownPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GDRecvShutdownPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.start_sec_){}
    , decltype(_impl_.maintenance_){}
    , decltype(_impl_.maintenance_duration_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.start_sec_, &from._impl_.start_sec_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.maintenance_duration_) -
    reinterpret_cast<char*>(&_impl_.start_sec_)) + sizeof(_impl_.maintenance_duration_));
  // @@protoc_insertion_point(copy_constructor:network.GDRecvShutdownPacket)
}

inline void GDRecvShutdownPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.start_sec_){0}
    , decltype(_impl_.maintenance_){false}
    , decltype(_impl_.maintenance_duration_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GDRecvShutdownPacket::~GDRecvShutdownPacket() {
  // @@protoc_insertion_point(destructor:network.GDRecvShutdownPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GDRecvShutdownPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GDRecvShutdownPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GDRecvShutdownPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GDRecvShutdownPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.start_sec_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.maintenance_duration_) -
      reinterpret_cast<char*>(&_impl_.start_sec_)) + sizeof(_impl_.maintenance_duration_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GDRecvShutdownPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 start_sec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.start_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool maintenance = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.maintenance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 maintenance_duration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.maintenance_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GDRecvShutdownPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GDRecvShutdownPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 start_sec = 1;
  if (this->_internal_start_sec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_start_sec(), target);
  }

  // bool maintenance = 2;
  if (this->_internal_maintenance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_maintenance(), target);
  }

  // int32 maintenance_duration = 3;
  if (this->_internal_maintenance_duration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_maintenance_duration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GDRecvShutdownPacket)
  return target;
}

size_t GDRecvShutdownPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GDRecvShutdownPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 start_sec = 1;
  if (this->_internal_start_sec() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_start_sec());
  }

  // bool maintenance = 2;
  if (this->_internal_maintenance() != 0) {
    total_size += 1 + 1;
  }

  // int32 maintenance_duration = 3;
  if (this->_internal_maintenance_duration() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_maintenance_duration());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GDRecvShutdownPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GDRecvShutdownPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GDRecvShutdownPacket::GetClassData() const { return &_class_data_; }


void GDRecvShutdownPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GDRecvShutdownPacket*>(&to_msg);
  auto& from = static_cast<const GDRecvShutdownPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GDRecvShutdownPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_start_sec() != 0) {
    _this->_internal_set_start_sec(from._internal_start_sec());
  }
  if (from._internal_maintenance() != 0) {
    _this->_internal_set_maintenance(from._internal_maintenance());
  }
  if (from._internal_maintenance_duration() != 0) {
    _this->_internal_set_maintenance_duration(from._internal_maintenance_duration());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GDRecvShutdownPacket::CopyFrom(const GDRecvShutdownPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GDRecvShutdownPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GDRecvShutdownPacket::IsInitialized() const {
  return true;
}

void GDRecvShutdownPacket::InternalSwap(GDRecvShutdownPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GDRecvShutdownPacket, _impl_.maintenance_duration_)
      + sizeof(GDRecvShutdownPacket::_impl_.maintenance_duration_)
      - PROTOBUF_FIELD_OFFSET(GDRecvShutdownPacket, _impl_.start_sec_)>(
          reinterpret_cast<char*>(&_impl_.start_sec_),
          reinterpret_cast<char*>(&other->_impl_.start_sec_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GDRecvShutdownPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gd_5fpackets_2eproto_getter, &descriptor_table_gd_5fpackets_2eproto_once,
      file_level_metadata_gd_5fpackets_2eproto[6]);
}

// ===================================================================

class GDAuthLoginPacket::_Internal {
 public:
};

GDAuthLoginPacket::GDAuthLoginPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GDAuthLoginPacket)
}
GDAuthLoginPacket::GDAuthLoginPacket(const GDAuthLoginPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GDAuthLoginPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.client_keys_){from._impl_.client_keys_}
    , /*decltype(_impl_._client_keys_cached_byte_size_)*/{0}
    , decltype(_impl_.premium_times_){from._impl_.premium_times_}
    , /*decltype(_impl_._premium_times_cached_byte_size_)*/{0}
    , decltype(_impl_.login_){}
    , decltype(_impl_.hwid_){}
    , decltype(_impl_.social_id_){}
    , decltype(_impl_.hwid2_){}
    , decltype(_impl_.account_id_){}
    , decltype(_impl_.login_key_){}
    , decltype(_impl_.bill_type_){}
    , decltype(_impl_.bill_id_){}
    , decltype(_impl_.language_){}
    , decltype(_impl_.tradeblock_){}
    , decltype(_impl_.hwid2ban_){}
    , decltype(_impl_.coins_){}
    , decltype(_impl_.temp_login_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.login_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.login_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_login().empty()) {
    _this->_impl_.login_.Set(from._internal_login(), 
      _this->GetArenaForAllocation());
  }
  _impl_.hwid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hwid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hwid().empty()) {
    _this->_impl_.hwid_.Set(from._internal_hwid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.social_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.social_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_social_id().empty()) {
    _this->_impl_.social_id_.Set(from._internal_social_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.hwid2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hwid2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hwid2().empty()) {
    _this->_impl_.hwid2_.Set(from._internal_hwid2(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.account_id_, &from._impl_.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.temp_login_) -
    reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.temp_login_));
  // @@protoc_insertion_point(copy_constructor:network.GDAuthLoginPacket)
}

inline void GDAuthLoginPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.client_keys_){arena}
    , /*decltype(_impl_._client_keys_cached_byte_size_)*/{0}
    , decltype(_impl_.premium_times_){arena}
    , /*decltype(_impl_._premium_times_cached_byte_size_)*/{0}
    , decltype(_impl_.login_){}
    , decltype(_impl_.hwid_){}
    , decltype(_impl_.social_id_){}
    , decltype(_impl_.hwid2_){}
    , decltype(_impl_.account_id_){0u}
    , decltype(_impl_.login_key_){0u}
    , decltype(_impl_.bill_type_){0u}
    , decltype(_impl_.bill_id_){0u}
    , decltype(_impl_.language_){0u}
    , decltype(_impl_.tradeblock_){0u}
    , decltype(_impl_.hwid2ban_){0u}
    , decltype(_impl_.coins_){false}
    , decltype(_impl_.temp_login_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.login_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.login_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.hwid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hwid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.social_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.social_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.hwid2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hwid2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GDAuthLoginPacket::~GDAuthLoginPacket() {
  // @@protoc_insertion_point(destructor:network.GDAuthLoginPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GDAuthLoginPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.client_keys_.~RepeatedField();
  _impl_.premium_times_.~RepeatedField();
  _impl_.login_.Destroy();
  _impl_.hwid_.Destroy();
  _impl_.social_id_.Destroy();
  _impl_.hwid2_.Destroy();
}

void GDAuthLoginPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GDAuthLoginPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GDAuthLoginPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.client_keys_.Clear();
  _impl_.premium_times_.Clear();
  _impl_.login_.ClearToEmpty();
  _impl_.hwid_.ClearToEmpty();
  _impl_.social_id_.ClearToEmpty();
  _impl_.hwid2_.ClearToEmpty();
  ::memset(&_impl_.account_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.temp_login_) -
      reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.temp_login_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GDAuthLoginPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 login_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.login_key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes login = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_login();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes hwid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_hwid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes social_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_social_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 client_keys = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_client_keys(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 48) {
          _internal_add_client_keys(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 bill_type = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.bill_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 bill_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.bill_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 premium_times = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_premium_times(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 72) {
          _internal_add_premium_times(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 language = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.language_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 tradeblock = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.tradeblock_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 hwid2ban = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.hwid2ban_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes hwid2 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_hwid2();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool coins = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.coins_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool temp_login = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.temp_login_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GDAuthLoginPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GDAuthLoginPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 account_id = 1;
  if (this->_internal_account_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // uint32 login_key = 2;
  if (this->_internal_login_key() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_login_key(), target);
  }

  // bytes login = 3;
  if (!this->_internal_login().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_login(), target);
  }

  // bytes hwid = 4;
  if (!this->_internal_hwid().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_hwid(), target);
  }

  // bytes social_id = 5;
  if (!this->_internal_social_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_social_id(), target);
  }

  // repeated uint32 client_keys = 6;
  {
    int byte_size = _impl_._client_keys_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          6, _internal_client_keys(), byte_size, target);
    }
  }

  // uint32 bill_type = 7;
  if (this->_internal_bill_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_bill_type(), target);
  }

  // uint32 bill_id = 8;
  if (this->_internal_bill_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_bill_id(), target);
  }

  // repeated int32 premium_times = 9;
  {
    int byte_size = _impl_._premium_times_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          9, _internal_premium_times(), byte_size, target);
    }
  }

  // uint32 language = 10;
  if (this->_internal_language() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_language(), target);
  }

  // uint32 tradeblock = 11;
  if (this->_internal_tradeblock() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_tradeblock(), target);
  }

  // uint32 hwid2ban = 12;
  if (this->_internal_hwid2ban() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(12, this->_internal_hwid2ban(), target);
  }

  // bytes hwid2 = 13;
  if (!this->_internal_hwid2().empty()) {
    target = stream->WriteBytesMaybeAliased(
        13, this->_internal_hwid2(), target);
  }

  // bool coins = 14;
  if (this->_internal_coins() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(14, this->_internal_coins(), target);
  }

  // bool temp_login = 15;
  if (this->_internal_temp_login() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(15, this->_internal_temp_login(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GDAuthLoginPacket)
  return target;
}

size_t GDAuthLoginPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GDAuthLoginPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 client_keys = 6;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.client_keys_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._client_keys_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 premium_times = 9;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.premium_times_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._premium_times_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // bytes login = 3;
  if (!this->_internal_login().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_login());
  }

  // bytes hwid = 4;
  if (!this->_internal_hwid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_hwid());
  }

  // bytes social_id = 5;
  if (!this->_internal_social_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_social_id());
  }

  // bytes hwid2 = 13;
  if (!this->_internal_hwid2().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_hwid2());
  }

  // uint32 account_id = 1;
  if (this->_internal_account_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
  }

  // uint32 login_key = 2;
  if (this->_internal_login_key() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_login_key());
  }

  // uint32 bill_type = 7;
  if (this->_internal_bill_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_bill_type());
  }

  // uint32 bill_id = 8;
  if (this->_internal_bill_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_bill_id());
  }

  // uint32 language = 10;
  if (this->_internal_language() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_language());
  }

  // uint32 tradeblock = 11;
  if (this->_internal_tradeblock() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tradeblock());
  }

  // uint32 hwid2ban = 12;
  if (this->_internal_hwid2ban() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_hwid2ban());
  }

  // bool coins = 14;
  if (this->_internal_coins() != 0) {
    total_size += 1 + 1;
  }

  // bool temp_login = 15;
  if (this->_internal_temp_login() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GDAuthLoginPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GDAuthLoginPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GDAuthLoginPacket::GetClassData() const { return &_class_data_; }


void GDAuthLoginPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GDAuthLoginPacket*>(&to_msg);
  auto& from = static_cast<const GDAuthLoginPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GDAuthLoginPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.client_keys_.MergeFrom(from._impl_.client_keys_);
  _this->_impl_.premium_times_.MergeFrom(from._impl_.premium_times_);
  if (!from._internal_login().empty()) {
    _this->_internal_set_login(from._internal_login());
  }
  if (!from._internal_hwid().empty()) {
    _this->_internal_set_hwid(from._internal_hwid());
  }
  if (!from._internal_social_id().empty()) {
    _this->_internal_set_social_id(from._internal_social_id());
  }
  if (!from._internal_hwid2().empty()) {
    _this->_internal_set_hwid2(from._internal_hwid2());
  }
  if (from._internal_account_id() != 0) {
    _this->_internal_set_account_id(from._internal_account_id());
  }
  if (from._internal_login_key() != 0) {
    _this->_internal_set_login_key(from._internal_login_key());
  }
  if (from._internal_bill_type() != 0) {
    _this->_internal_set_bill_type(from._internal_bill_type());
  }
  if (from._internal_bill_id() != 0) {
    _this->_internal_set_bill_id(from._internal_bill_id());
  }
  if (from._internal_language() != 0) {
    _this->_internal_set_language(from._internal_language());
  }
  if (from._internal_tradeblock() != 0) {
    _this->_internal_set_tradeblock(from._internal_tradeblock());
  }
  if (from._internal_hwid2ban() != 0) {
    _this->_internal_set_hwid2ban(from._internal_hwid2ban());
  }
  if (from._internal_coins() != 0) {
    _this->_internal_set_coins(from._internal_coins());
  }
  if (from._internal_temp_login() != 0) {
    _this->_internal_set_temp_login(from._internal_temp_login());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GDAuthLoginPacket::CopyFrom(const GDAuthLoginPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GDAuthLoginPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GDAuthLoginPacket::IsInitialized() const {
  return true;
}

void GDAuthLoginPacket::InternalSwap(GDAuthLoginPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.client_keys_.InternalSwap(&other->_impl_.client_keys_);
  _impl_.premium_times_.InternalSwap(&other->_impl_.premium_times_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.login_, lhs_arena,
      &other->_impl_.login_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.hwid_, lhs_arena,
      &other->_impl_.hwid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.social_id_, lhs_arena,
      &other->_impl_.social_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.hwid2_, lhs_arena,
      &other->_impl_.hwid2_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GDAuthLoginPacket, _impl_.temp_login_)
      + sizeof(GDAuthLoginPacket::_impl_.temp_login_)
      - PROTOBUF_FIELD_OFFSET(GDAuthLoginPacket, _impl_.account_id_)>(
          reinterpret_cast<char*>(&_impl_.account_id_),
          reinterpret_cast<char*>(&other->_impl_.account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GDAuthLoginPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gd_5fpackets_2eproto_getter, &descriptor_table_gd_5fpackets_2eproto_once,
      file_level_metadata_gd_5fpackets_2eproto[7]);
}

// ===================================================================

class GDLoginByKeyPacket::_Internal {
 public:
};

GDLoginByKeyPacket::GDLoginByKeyPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GDLoginByKeyPacket)
}
GDLoginByKeyPacket::GDLoginByKeyPacket(const GDLoginByKeyPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GDLoginByKeyPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.client_key_){from._impl_.client_key_}
    , /*decltype(_impl_._client_key_cached_byte_size_)*/{0}
    , decltype(_impl_.login_){}
    , decltype(_impl_.ip_){}
    , decltype(_impl_.login_key_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.login_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.login_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_login().empty()) {
    _this->_impl_.login_.Set(from._internal_login(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ip().empty()) {
    _this->_impl_.ip_.Set(from._internal_ip(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.login_key_ = from._impl_.login_key_;
  // @@protoc_insertion_point(copy_constructor:network.GDLoginByKeyPacket)
}

inline void GDLoginByKeyPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.client_key_){arena}
    , /*decltype(_impl_._client_key_cached_byte_size_)*/{0}
    , decltype(_impl_.login_){}
    , decltype(_impl_.ip_){}
    , decltype(_impl_.login_key_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.login_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.login_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GDLoginByKeyPacket::~GDLoginByKeyPacket() {
  // @@protoc_insertion_point(destructor:network.GDLoginByKeyPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GDLoginByKeyPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.client_key_.~RepeatedField();
  _impl_.login_.Destroy();
  _impl_.ip_.Destroy();
}

void GDLoginByKeyPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GDLoginByKeyPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GDLoginByKeyPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.client_key_.Clear();
  _impl_.login_.ClearToEmpty();
  _impl_.ip_.ClearToEmpty();
  _impl_.login_key_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GDLoginByKeyPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes login = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_login();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 login_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.login_key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 client_key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_client_key(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_client_key(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes ip = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_ip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GDLoginByKeyPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GDLoginByKeyPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes login = 1;
  if (!this->_internal_login().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_login(), target);
  }

  // uint32 login_key = 2;
  if (this->_internal_login_key() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_login_key(), target);
  }

  // repeated uint32 client_key = 3;
  {
    int byte_size = _impl_._client_key_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          3, _internal_client_key(), byte_size, target);
    }
  }

  // bytes ip = 4;
  if (!this->_internal_ip().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_ip(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GDLoginByKeyPacket)
  return target;
}

size_t GDLoginByKeyPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GDLoginByKeyPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 client_key = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.client_key_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._client_key_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // bytes login = 1;
  if (!this->_internal_login().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_login());
  }

  // bytes ip = 4;
  if (!this->_internal_ip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_ip());
  }

  // uint32 login_key = 2;
  if (this->_internal_login_key() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_login_key());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GDLoginByKeyPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GDLoginByKeyPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GDLoginByKeyPacket::GetClassData() const { return &_class_data_; }


void GDLoginByKeyPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GDLoginByKeyPacket*>(&to_msg);
  auto& from = static_cast<const GDLoginByKeyPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GDLoginByKeyPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.client_key_.MergeFrom(from._impl_.client_key_);
  if (!from._internal_login().empty()) {
    _this->_internal_set_login(from._internal_login());
  }
  if (!from._internal_ip().empty()) {
    _this->_internal_set_ip(from._internal_ip());
  }
  if (from._internal_login_key() != 0) {
    _this->_internal_set_login_key(from._internal_login_key());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GDLoginByKeyPacket::CopyFrom(const GDLoginByKeyPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GDLoginByKeyPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GDLoginByKeyPacket::IsInitialized() const {
  return true;
}

void GDLoginByKeyPacket::InternalSwap(GDLoginByKeyPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.client_key_.InternalSwap(&other->_impl_.client_key_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.login_, lhs_arena,
      &other->_impl_.login_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ip_, lhs_arena,
      &other->_impl_.ip_, rhs_arena
  );
  swap(_impl_.login_key_, other->_impl_.login_key_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GDLoginByKeyPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gd_5fpackets_2eproto_getter, &descriptor_table_gd_5fpackets_2eproto_once,
      file_level_metadata_gd_5fpackets_2eproto[8]);
}

// ===================================================================

class GDPlayerCreatePacket::_Internal {
 public:
  static const ::TPlayerTable& player_table(const GDPlayerCreatePacket* msg);
};

const ::TPlayerTable&
GDPlayerCreatePacket::_Internal::player_table(const GDPlayerCreatePacket* msg) {
  return *msg->_impl_.player_table_;
}
void GDPlayerCreatePacket::clear_player_table() {
  if (GetArenaForAllocation() == nullptr && _impl_.player_table_ != nullptr) {
    delete _impl_.player_table_;
  }
  _impl_.player_table_ = nullptr;
}
GDPlayerCreatePacket::GDPlayerCreatePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GDPlayerCreatePacket)
}
GDPlayerCreatePacket::GDPlayerCreatePacket(const GDPlayerCreatePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GDPlayerCreatePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.login_){}
    , decltype(_impl_.passwd_){}
    , decltype(_impl_.player_table_){nullptr}
    , decltype(_impl_.account_id_){}
    , decltype(_impl_.account_index_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.login_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.login_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_login().empty()) {
    _this->_impl_.login_.Set(from._internal_login(), 
      _this->GetArenaForAllocation());
  }
  _impl_.passwd_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.passwd_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_passwd().empty()) {
    _this->_impl_.passwd_.Set(from._internal_passwd(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_player_table()) {
    _this->_impl_.player_table_ = new ::TPlayerTable(*from._impl_.player_table_);
  }
  ::memcpy(&_impl_.account_id_, &from._impl_.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.account_index_) -
    reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.account_index_));
  // @@protoc_insertion_point(copy_constructor:network.GDPlayerCreatePacket)
}

inline void GDPlayerCreatePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.login_){}
    , decltype(_impl_.passwd_){}
    , decltype(_impl_.player_table_){nullptr}
    , decltype(_impl_.account_id_){0u}
    , decltype(_impl_.account_index_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.login_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.login_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.passwd_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.passwd_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GDPlayerCreatePacket::~GDPlayerCreatePacket() {
  // @@protoc_insertion_point(destructor:network.GDPlayerCreatePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GDPlayerCreatePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.login_.Destroy();
  _impl_.passwd_.Destroy();
  if (this != internal_default_instance()) delete _impl_.player_table_;
}

void GDPlayerCreatePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GDPlayerCreatePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GDPlayerCreatePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.login_.ClearToEmpty();
  _impl_.passwd_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.player_table_ != nullptr) {
    delete _impl_.player_table_;
  }
  _impl_.player_table_ = nullptr;
  ::memset(&_impl_.account_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.account_index_) -
      reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.account_index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GDPlayerCreatePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes login = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_login();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes passwd = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_passwd();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 account_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 account_index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.account_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TPlayerTable player_table = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_table(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GDPlayerCreatePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GDPlayerCreatePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes login = 1;
  if (!this->_internal_login().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_login(), target);
  }

  // bytes passwd = 2;
  if (!this->_internal_passwd().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_passwd(), target);
  }

  // uint32 account_id = 3;
  if (this->_internal_account_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_account_id(), target);
  }

  // uint32 account_index = 4;
  if (this->_internal_account_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_account_index(), target);
  }

  // .TPlayerTable player_table = 5;
  if (this->_internal_has_player_table()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::player_table(this),
        _Internal::player_table(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GDPlayerCreatePacket)
  return target;
}

size_t GDPlayerCreatePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GDPlayerCreatePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes login = 1;
  if (!this->_internal_login().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_login());
  }

  // bytes passwd = 2;
  if (!this->_internal_passwd().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_passwd());
  }

  // .TPlayerTable player_table = 5;
  if (this->_internal_has_player_table()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.player_table_);
  }

  // uint32 account_id = 3;
  if (this->_internal_account_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
  }

  // uint32 account_index = 4;
  if (this->_internal_account_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GDPlayerCreatePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GDPlayerCreatePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GDPlayerCreatePacket::GetClassData() const { return &_class_data_; }


void GDPlayerCreatePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GDPlayerCreatePacket*>(&to_msg);
  auto& from = static_cast<const GDPlayerCreatePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GDPlayerCreatePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_login().empty()) {
    _this->_internal_set_login(from._internal_login());
  }
  if (!from._internal_passwd().empty()) {
    _this->_internal_set_passwd(from._internal_passwd());
  }
  if (from._internal_has_player_table()) {
    _this->_internal_mutable_player_table()->::TPlayerTable::MergeFrom(
        from._internal_player_table());
  }
  if (from._internal_account_id() != 0) {
    _this->_internal_set_account_id(from._internal_account_id());
  }
  if (from._internal_account_index() != 0) {
    _this->_internal_set_account_index(from._internal_account_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GDPlayerCreatePacket::CopyFrom(const GDPlayerCreatePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GDPlayerCreatePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GDPlayerCreatePacket::IsInitialized() const {
  return true;
}

void GDPlayerCreatePacket::InternalSwap(GDPlayerCreatePacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.login_, lhs_arena,
      &other->_impl_.login_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.passwd_, lhs_arena,
      &other->_impl_.passwd_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GDPlayerCreatePacket, _impl_.account_index_)
      + sizeof(GDPlayerCreatePacket::_impl_.account_index_)
      - PROTOBUF_FIELD_OFFSET(GDPlayerCreatePacket, _impl_.player_table_)>(
          reinterpret_cast<char*>(&_impl_.player_table_),
          reinterpret_cast<char*>(&other->_impl_.player_table_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GDPlayerCreatePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gd_5fpackets_2eproto_getter, &descriptor_table_gd_5fpackets_2eproto_once,
      file_level_metadata_gd_5fpackets_2eproto[9]);
}

// ===================================================================

class GDPlayerDeletePacket::_Internal {
 public:
};

GDPlayerDeletePacket::GDPlayerDeletePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GDPlayerDeletePacket)
}
GDPlayerDeletePacket::GDPlayerDeletePacket(const GDPlayerDeletePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GDPlayerDeletePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.login_){}
    , decltype(_impl_.private_code_){}
    , decltype(_impl_.player_id_){}
    , decltype(_impl_.account_index_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.login_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.login_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_login().empty()) {
    _this->_impl_.login_.Set(from._internal_login(), 
      _this->GetArenaForAllocation());
  }
  _impl_.private_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.private_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_private_code().empty()) {
    _this->_impl_.private_code_.Set(from._internal_private_code(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.player_id_, &from._impl_.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.account_index_) -
    reinterpret_cast<char*>(&_impl_.player_id_)) + sizeof(_impl_.account_index_));
  // @@protoc_insertion_point(copy_constructor:network.GDPlayerDeletePacket)
}

inline void GDPlayerDeletePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.login_){}
    , decltype(_impl_.private_code_){}
    , decltype(_impl_.player_id_){0u}
    , decltype(_impl_.account_index_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.login_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.login_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.private_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.private_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GDPlayerDeletePacket::~GDPlayerDeletePacket() {
  // @@protoc_insertion_point(destructor:network.GDPlayerDeletePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GDPlayerDeletePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.login_.Destroy();
  _impl_.private_code_.Destroy();
}

void GDPlayerDeletePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GDPlayerDeletePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GDPlayerDeletePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.login_.ClearToEmpty();
  _impl_.private_code_.ClearToEmpty();
  ::memset(&_impl_.player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.account_index_) -
      reinterpret_cast<char*>(&_impl_.player_id_)) + sizeof(_impl_.account_index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GDPlayerDeletePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes login = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_login();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 player_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 account_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.account_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes private_code = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_private_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GDPlayerDeletePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GDPlayerDeletePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes login = 1;
  if (!this->_internal_login().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_login(), target);
  }

  // uint32 player_id = 2;
  if (this->_internal_player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_player_id(), target);
  }

  // uint32 account_index = 3;
  if (this->_internal_account_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_account_index(), target);
  }

  // bytes private_code = 4;
  if (!this->_internal_private_code().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_private_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GDPlayerDeletePacket)
  return target;
}

size_t GDPlayerDeletePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GDPlayerDeletePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes login = 1;
  if (!this->_internal_login().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_login());
  }

  // bytes private_code = 4;
  if (!this->_internal_private_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_private_code());
  }

  // uint32 player_id = 2;
  if (this->_internal_player_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_player_id());
  }

  // uint32 account_index = 3;
  if (this->_internal_account_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GDPlayerDeletePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GDPlayerDeletePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GDPlayerDeletePacket::GetClassData() const { return &_class_data_; }


void GDPlayerDeletePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GDPlayerDeletePacket*>(&to_msg);
  auto& from = static_cast<const GDPlayerDeletePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GDPlayerDeletePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_login().empty()) {
    _this->_internal_set_login(from._internal_login());
  }
  if (!from._internal_private_code().empty()) {
    _this->_internal_set_private_code(from._internal_private_code());
  }
  if (from._internal_player_id() != 0) {
    _this->_internal_set_player_id(from._internal_player_id());
  }
  if (from._internal_account_index() != 0) {
    _this->_internal_set_account_index(from._internal_account_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GDPlayerDeletePacket::CopyFrom(const GDPlayerDeletePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GDPlayerDeletePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GDPlayerDeletePacket::IsInitialized() const {
  return true;
}

void GDPlayerDeletePacket::InternalSwap(GDPlayerDeletePacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.login_, lhs_arena,
      &other->_impl_.login_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.private_code_, lhs_arena,
      &other->_impl_.private_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GDPlayerDeletePacket, _impl_.account_index_)
      + sizeof(GDPlayerDeletePacket::_impl_.account_index_)
      - PROTOBUF_FIELD_OFFSET(GDPlayerDeletePacket, _impl_.player_id_)>(
          reinterpret_cast<char*>(&_impl_.player_id_),
          reinterpret_cast<char*>(&other->_impl_.player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GDPlayerDeletePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gd_5fpackets_2eproto_getter, &descriptor_table_gd_5fpackets_2eproto_once,
      file_level_metadata_gd_5fpackets_2eproto[10]);
}

// ===================================================================

class GDChangeNamePacket::_Internal {
 public:
};

GDChangeNamePacket::GDChangeNamePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GDChangeNamePacket)
}
GDChangeNamePacket::GDChangeNamePacket(const GDChangeNamePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GDChangeNamePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.pid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.pid_ = from._impl_.pid_;
  // @@protoc_insertion_point(copy_constructor:network.GDChangeNamePacket)
}

inline void GDChangeNamePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.pid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GDChangeNamePacket::~GDChangeNamePacket() {
  // @@protoc_insertion_point(destructor:network.GDChangeNamePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GDChangeNamePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void GDChangeNamePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GDChangeNamePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GDChangeNamePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.pid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GDChangeNamePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GDChangeNamePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GDChangeNamePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pid(), target);
  }

  // bytes name = 2;
  if (!this->_internal_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GDChangeNamePacket)
  return target;
}

size_t GDChangeNamePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GDChangeNamePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GDChangeNamePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GDChangeNamePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GDChangeNamePacket::GetClassData() const { return &_class_data_; }


void GDChangeNamePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GDChangeNamePacket*>(&to_msg);
  auto& from = static_cast<const GDChangeNamePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GDChangeNamePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_pid() != 0) {
    _this->_internal_set_pid(from._internal_pid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GDChangeNamePacket::CopyFrom(const GDChangeNamePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GDChangeNamePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GDChangeNamePacket::IsInitialized() const {
  return true;
}

void GDChangeNamePacket::InternalSwap(GDChangeNamePacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.pid_, other->_impl_.pid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GDChangeNamePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gd_5fpackets_2eproto_getter, &descriptor_table_gd_5fpackets_2eproto_once,
      file_level_metadata_gd_5fpackets_2eproto[11]);
}

// ===================================================================

class GDEmpireSelectPacket::_Internal {
 public:
};

GDEmpireSelectPacket::GDEmpireSelectPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GDEmpireSelectPacket)
}
GDEmpireSelectPacket::GDEmpireSelectPacket(const GDEmpireSelectPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GDEmpireSelectPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.account_id_){}
    , decltype(_impl_.empire_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.account_id_, &from._impl_.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.empire_) -
    reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.empire_));
  // @@protoc_insertion_point(copy_constructor:network.GDEmpireSelectPacket)
}

inline void GDEmpireSelectPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.account_id_){0u}
    , decltype(_impl_.empire_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GDEmpireSelectPacket::~GDEmpireSelectPacket() {
  // @@protoc_insertion_point(destructor:network.GDEmpireSelectPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GDEmpireSelectPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GDEmpireSelectPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GDEmpireSelectPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GDEmpireSelectPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.account_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.empire_) -
      reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.empire_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GDEmpireSelectPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 empire = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.empire_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GDEmpireSelectPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GDEmpireSelectPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 account_id = 1;
  if (this->_internal_account_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // uint32 empire = 2;
  if (this->_internal_empire() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_empire(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GDEmpireSelectPacket)
  return target;
}

size_t GDEmpireSelectPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GDEmpireSelectPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 account_id = 1;
  if (this->_internal_account_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
  }

  // uint32 empire = 2;
  if (this->_internal_empire() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_empire());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GDEmpireSelectPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GDEmpireSelectPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GDEmpireSelectPacket::GetClassData() const { return &_class_data_; }


void GDEmpireSelectPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GDEmpireSelectPacket*>(&to_msg);
  auto& from = static_cast<const GDEmpireSelectPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GDEmpireSelectPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_account_id() != 0) {
    _this->_internal_set_account_id(from._internal_account_id());
  }
  if (from._internal_empire() != 0) {
    _this->_internal_set_empire(from._internal_empire());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GDEmpireSelectPacket::CopyFrom(const GDEmpireSelectPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GDEmpireSelectPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GDEmpireSelectPacket::IsInitialized() const {
  return true;
}

void GDEmpireSelectPacket::InternalSwap(GDEmpireSelectPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GDEmpireSelectPacket, _impl_.empire_)
      + sizeof(GDEmpireSelectPacket::_impl_.empire_)
      - PROTOBUF_FIELD_OFFSET(GDEmpireSelectPacket, _impl_.account_id_)>(
          reinterpret_cast<char*>(&_impl_.account_id_),
          reinterpret_cast<char*>(&other->_impl_.account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GDEmpireSelectPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gd_5fpackets_2eproto_getter, &descriptor_table_gd_5fpackets_2eproto_once,
      file_level_metadata_gd_5fpackets_2eproto[12]);
}

// ===================================================================

class GDSelectUpdateHairPacket::_Internal {
 public:
};

GDSelectUpdateHairPacket::GDSelectUpdateHairPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GDSelectUpdateHairPacket)
}
GDSelectUpdateHairPacket::GDSelectUpdateHairPacket(const GDSelectUpdateHairPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GDSelectUpdateHairPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pid_){}
    , decltype(_impl_.hair_part_){}
    , decltype(_impl_.hair_base_part_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.pid_, &from._impl_.pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.hair_base_part_) -
    reinterpret_cast<char*>(&_impl_.pid_)) + sizeof(_impl_.hair_base_part_));
  // @@protoc_insertion_point(copy_constructor:network.GDSelectUpdateHairPacket)
}

inline void GDSelectUpdateHairPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pid_){0u}
    , decltype(_impl_.hair_part_){0u}
    , decltype(_impl_.hair_base_part_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GDSelectUpdateHairPacket::~GDSelectUpdateHairPacket() {
  // @@protoc_insertion_point(destructor:network.GDSelectUpdateHairPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GDSelectUpdateHairPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GDSelectUpdateHairPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GDSelectUpdateHairPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GDSelectUpdateHairPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.pid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.hair_base_part_) -
      reinterpret_cast<char*>(&_impl_.pid_)) + sizeof(_impl_.hair_base_part_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GDSelectUpdateHairPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 hair_part = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.hair_part_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 hair_base_part = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.hair_base_part_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GDSelectUpdateHairPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GDSelectUpdateHairPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pid(), target);
  }

  // uint32 hair_part = 2;
  if (this->_internal_hair_part() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_hair_part(), target);
  }

  // uint32 hair_base_part = 3;
  if (this->_internal_hair_base_part() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_hair_base_part(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GDSelectUpdateHairPacket)
  return target;
}

size_t GDSelectUpdateHairPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GDSelectUpdateHairPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid());
  }

  // uint32 hair_part = 2;
  if (this->_internal_hair_part() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_hair_part());
  }

  // uint32 hair_base_part = 3;
  if (this->_internal_hair_base_part() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_hair_base_part());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GDSelectUpdateHairPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GDSelectUpdateHairPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GDSelectUpdateHairPacket::GetClassData() const { return &_class_data_; }


void GDSelectUpdateHairPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GDSelectUpdateHairPacket*>(&to_msg);
  auto& from = static_cast<const GDSelectUpdateHairPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GDSelectUpdateHairPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_pid() != 0) {
    _this->_internal_set_pid(from._internal_pid());
  }
  if (from._internal_hair_part() != 0) {
    _this->_internal_set_hair_part(from._internal_hair_part());
  }
  if (from._internal_hair_base_part() != 0) {
    _this->_internal_set_hair_base_part(from._internal_hair_base_part());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GDSelectUpdateHairPacket::CopyFrom(const GDSelectUpdateHairPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GDSelectUpdateHairPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GDSelectUpdateHairPacket::IsInitialized() const {
  return true;
}

void GDSelectUpdateHairPacket::InternalSwap(GDSelectUpdateHairPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GDSelectUpdateHairPacket, _impl_.hair_base_part_)
      + sizeof(GDSelectUpdateHairPacket::_impl_.hair_base_part_)
      - PROTOBUF_FIELD_OFFSET(GDSelectUpdateHairPacket, _impl_.pid_)>(
          reinterpret_cast<char*>(&_impl_.pid_),
          reinterpret_cast<char*>(&other->_impl_.pid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GDSelectUpdateHairPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gd_5fpackets_2eproto_getter, &descriptor_table_gd_5fpackets_2eproto_once,
      file_level_metadata_gd_5fpackets_2eproto[13]);
}

// ===================================================================

class GDBillingExpirePacket::_Internal {
 public:
};

GDBillingExpirePacket::GDBillingExpirePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GDBillingExpirePacket)
}
GDBillingExpirePacket::GDBillingExpirePacket(const GDBillingExpirePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GDBillingExpirePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.login_){}
    , decltype(_impl_.bill_type_){}
    , decltype(_impl_.remain_seconds_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.login_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.login_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_login().empty()) {
    _this->_impl_.login_.Set(from._internal_login(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.bill_type_, &from._impl_.bill_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.remain_seconds_) -
    reinterpret_cast<char*>(&_impl_.bill_type_)) + sizeof(_impl_.remain_seconds_));
  // @@protoc_insertion_point(copy_constructor:network.GDBillingExpirePacket)
}

inline void GDBillingExpirePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.login_){}
    , decltype(_impl_.bill_type_){0u}
    , decltype(_impl_.remain_seconds_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.login_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.login_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GDBillingExpirePacket::~GDBillingExpirePacket() {
  // @@protoc_insertion_point(destructor:network.GDBillingExpirePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GDBillingExpirePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.login_.Destroy();
}

void GDBillingExpirePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GDBillingExpirePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GDBillingExpirePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.login_.ClearToEmpty();
  ::memset(&_impl_.bill_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.remain_seconds_) -
      reinterpret_cast<char*>(&_impl_.bill_type_)) + sizeof(_impl_.remain_seconds_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GDBillingExpirePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes login = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_login();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 bill_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.bill_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 remain_seconds = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.remain_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GDBillingExpirePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GDBillingExpirePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes login = 1;
  if (!this->_internal_login().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_login(), target);
  }

  // uint32 bill_type = 2;
  if (this->_internal_bill_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_bill_type(), target);
  }

  // uint32 remain_seconds = 3;
  if (this->_internal_remain_seconds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_remain_seconds(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GDBillingExpirePacket)
  return target;
}

size_t GDBillingExpirePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GDBillingExpirePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes login = 1;
  if (!this->_internal_login().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_login());
  }

  // uint32 bill_type = 2;
  if (this->_internal_bill_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_bill_type());
  }

  // uint32 remain_seconds = 3;
  if (this->_internal_remain_seconds() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_remain_seconds());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GDBillingExpirePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GDBillingExpirePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GDBillingExpirePacket::GetClassData() const { return &_class_data_; }


void GDBillingExpirePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GDBillingExpirePacket*>(&to_msg);
  auto& from = static_cast<const GDBillingExpirePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GDBillingExpirePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_login().empty()) {
    _this->_internal_set_login(from._internal_login());
  }
  if (from._internal_bill_type() != 0) {
    _this->_internal_set_bill_type(from._internal_bill_type());
  }
  if (from._internal_remain_seconds() != 0) {
    _this->_internal_set_remain_seconds(from._internal_remain_seconds());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GDBillingExpirePacket::CopyFrom(const GDBillingExpirePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GDBillingExpirePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GDBillingExpirePacket::IsInitialized() const {
  return true;
}

void GDBillingExpirePacket::InternalSwap(GDBillingExpirePacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.login_, lhs_arena,
      &other->_impl_.login_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GDBillingExpirePacket, _impl_.remain_seconds_)
      + sizeof(GDBillingExpirePacket::_impl_.remain_seconds_)
      - PROTOBUF_FIELD_OFFSET(GDBillingExpirePacket, _impl_.bill_type_)>(
          reinterpret_cast<char*>(&_impl_.bill_type_),
          reinterpret_cast<char*>(&other->_impl_.bill_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GDBillingExpirePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gd_5fpackets_2eproto_getter, &descriptor_table_gd_5fpackets_2eproto_once,
      file_level_metadata_gd_5fpackets_2eproto[14]);
}

// ===================================================================

class GDBillingCheckPacket::_Internal {
 public:
};

GDBillingCheckPacket::GDBillingCheckPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GDBillingCheckPacket)
}
GDBillingCheckPacket::GDBillingCheckPacket(const GDBillingCheckPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GDBillingCheckPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.keys_){from._impl_.keys_}
    , /*decltype(_impl_._keys_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:network.GDBillingCheckPacket)
}

inline void GDBillingCheckPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.keys_){arena}
    , /*decltype(_impl_._keys_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GDBillingCheckPacket::~GDBillingCheckPacket() {
  // @@protoc_insertion_point(destructor:network.GDBillingCheckPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GDBillingCheckPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.keys_.~RepeatedField();
}

void GDBillingCheckPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GDBillingCheckPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GDBillingCheckPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.keys_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GDBillingCheckPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 keys = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_keys(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_keys(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GDBillingCheckPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GDBillingCheckPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 keys = 1;
  {
    int byte_size = _impl_._keys_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_keys(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GDBillingCheckPacket)
  return target;
}

size_t GDBillingCheckPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GDBillingCheckPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 keys = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.keys_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._keys_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GDBillingCheckPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GDBillingCheckPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GDBillingCheckPacket::GetClassData() const { return &_class_data_; }


void GDBillingCheckPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GDBillingCheckPacket*>(&to_msg);
  auto& from = static_cast<const GDBillingCheckPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GDBillingCheckPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.keys_.MergeFrom(from._impl_.keys_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GDBillingCheckPacket::CopyFrom(const GDBillingCheckPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GDBillingCheckPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GDBillingCheckPacket::IsInitialized() const {
  return true;
}

void GDBillingCheckPacket::InternalSwap(GDBillingCheckPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.keys_.InternalSwap(&other->_impl_.keys_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GDBillingCheckPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gd_5fpackets_2eproto_getter, &descriptor_table_gd_5fpackets_2eproto_once,
      file_level_metadata_gd_5fpackets_2eproto[15]);
}

// ===================================================================

class GDDisconnectPacket::_Internal {
 public:
};

GDDisconnectPacket::GDDisconnectPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GDDisconnectPacket)
}
GDDisconnectPacket::GDDisconnectPacket(const GDDisconnectPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GDDisconnectPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.login_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.login_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.login_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_login().empty()) {
    _this->_impl_.login_.Set(from._internal_login(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:network.GDDisconnectPacket)
}

inline void GDDisconnectPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.login_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.login_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.login_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GDDisconnectPacket::~GDDisconnectPacket() {
  // @@protoc_insertion_point(destructor:network.GDDisconnectPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GDDisconnectPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.login_.Destroy();
}

void GDDisconnectPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GDDisconnectPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GDDisconnectPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.login_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GDDisconnectPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes login = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_login();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GDDisconnectPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GDDisconnectPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes login = 1;
  if (!this->_internal_login().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_login(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GDDisconnectPacket)
  return target;
}

size_t GDDisconnectPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GDDisconnectPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes login = 1;
  if (!this->_internal_login().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_login());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GDDisconnectPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GDDisconnectPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GDDisconnectPacket::GetClassData() const { return &_class_data_; }


void GDDisconnectPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GDDisconnectPacket*>(&to_msg);
  auto& from = static_cast<const GDDisconnectPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GDDisconnectPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_login().empty()) {
    _this->_internal_set_login(from._internal_login());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GDDisconnectPacket::CopyFrom(const GDDisconnectPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GDDisconnectPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GDDisconnectPacket::IsInitialized() const {
  return true;
}

void GDDisconnectPacket::InternalSwap(GDDisconnectPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.login_, lhs_arena,
      &other->_impl_.login_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GDDisconnectPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gd_5fpackets_2eproto_getter, &descriptor_table_gd_5fpackets_2eproto_once,
      file_level_metadata_gd_5fpackets_2eproto[16]);
}

// ===================================================================

class GDValidLogoutPacket::_Internal {
 public:
};

GDValidLogoutPacket::GDValidLogoutPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GDValidLogoutPacket)
}
GDValidLogoutPacket::GDValidLogoutPacket(const GDValidLogoutPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GDValidLogoutPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.account_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.account_id_ = from._impl_.account_id_;
  // @@protoc_insertion_point(copy_constructor:network.GDValidLogoutPacket)
}

inline void GDValidLogoutPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.account_id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GDValidLogoutPacket::~GDValidLogoutPacket() {
  // @@protoc_insertion_point(destructor:network.GDValidLogoutPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GDValidLogoutPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GDValidLogoutPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GDValidLogoutPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GDValidLogoutPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.account_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GDValidLogoutPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GDValidLogoutPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GDValidLogoutPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 account_id = 1;
  if (this->_internal_account_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GDValidLogoutPacket)
  return target;
}

size_t GDValidLogoutPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GDValidLogoutPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 account_id = 1;
  if (this->_internal_account_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GDValidLogoutPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GDValidLogoutPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GDValidLogoutPacket::GetClassData() const { return &_class_data_; }


void GDValidLogoutPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GDValidLogoutPacket*>(&to_msg);
  auto& from = static_cast<const GDValidLogoutPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GDValidLogoutPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_account_id() != 0) {
    _this->_internal_set_account_id(from._internal_account_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GDValidLogoutPacket::CopyFrom(const GDValidLogoutPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GDValidLogoutPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GDValidLogoutPacket::IsInitialized() const {
  return true;
}

void GDValidLogoutPacket::InternalSwap(GDValidLogoutPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.account_id_, other->_impl_.account_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GDValidLogoutPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gd_5fpackets_2eproto_getter, &descriptor_table_gd_5fpackets_2eproto_once,
      file_level_metadata_gd_5fpackets_2eproto[17]);
}

// ===================================================================

class GDPlayerLoadPacket::_Internal {
 public:
};

GDPlayerLoadPacket::GDPlayerLoadPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GDPlayerLoadPacket)
}
GDPlayerLoadPacket::GDPlayerLoadPacket(const GDPlayerLoadPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GDPlayerLoadPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.account_id_){}
    , decltype(_impl_.player_id_){}
    , decltype(_impl_.account_index_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.account_id_, &from._impl_.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.account_index_) -
    reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.account_index_));
  // @@protoc_insertion_point(copy_constructor:network.GDPlayerLoadPacket)
}

inline void GDPlayerLoadPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.account_id_){0u}
    , decltype(_impl_.player_id_){0u}
    , decltype(_impl_.account_index_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GDPlayerLoadPacket::~GDPlayerLoadPacket() {
  // @@protoc_insertion_point(destructor:network.GDPlayerLoadPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GDPlayerLoadPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GDPlayerLoadPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GDPlayerLoadPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GDPlayerLoadPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.account_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.account_index_) -
      reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.account_index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GDPlayerLoadPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 player_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 account_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.account_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GDPlayerLoadPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GDPlayerLoadPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 account_id = 1;
  if (this->_internal_account_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // uint32 player_id = 2;
  if (this->_internal_player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_player_id(), target);
  }

  // uint32 account_index = 3;
  if (this->_internal_account_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_account_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GDPlayerLoadPacket)
  return target;
}

size_t GDPlayerLoadPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GDPlayerLoadPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 account_id = 1;
  if (this->_internal_account_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
  }

  // uint32 player_id = 2;
  if (this->_internal_player_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_player_id());
  }

  // uint32 account_index = 3;
  if (this->_internal_account_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GDPlayerLoadPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GDPlayerLoadPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GDPlayerLoadPacket::GetClassData() const { return &_class_data_; }


void GDPlayerLoadPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GDPlayerLoadPacket*>(&to_msg);
  auto& from = static_cast<const GDPlayerLoadPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GDPlayerLoadPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_account_id() != 0) {
    _this->_internal_set_account_id(from._internal_account_id());
  }
  if (from._internal_player_id() != 0) {
    _this->_internal_set_player_id(from._internal_player_id());
  }
  if (from._internal_account_index() != 0) {
    _this->_internal_set_account_index(from._internal_account_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GDPlayerLoadPacket::CopyFrom(const GDPlayerLoadPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GDPlayerLoadPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GDPlayerLoadPacket::IsInitialized() const {
  return true;
}

void GDPlayerLoadPacket::InternalSwap(GDPlayerLoadPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GDPlayerLoadPacket, _impl_.account_index_)
      + sizeof(GDPlayerLoadPacket::_impl_.account_index_)
      - PROTOBUF_FIELD_OFFSET(GDPlayerLoadPacket, _impl_.account_id_)>(
          reinterpret_cast<char*>(&_impl_.account_id_),
          reinterpret_cast<char*>(&other->_impl_.account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GDPlayerLoadPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gd_5fpackets_2eproto_getter, &descriptor_table_gd_5fpackets_2eproto_once,
      file_level_metadata_gd_5fpackets_2eproto[18]);
}

// ===================================================================

class GDSafeboxLoadPacket::_Internal {
 public:
};

GDSafeboxLoadPacket::GDSafeboxLoadPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GDSafeboxLoadPacket)
}
GDSafeboxLoadPacket::GDSafeboxLoadPacket(const GDSafeboxLoadPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GDSafeboxLoadPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.login_){}
    , decltype(_impl_.password_){}
    , decltype(_impl_.account_id_){}
    , decltype(_impl_.is_mall_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.login_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.login_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_login().empty()) {
    _this->_impl_.login_.Set(from._internal_login(), 
      _this->GetArenaForAllocation());
  }
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_password().empty()) {
    _this->_impl_.password_.Set(from._internal_password(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.account_id_, &from._impl_.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_mall_) -
    reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.is_mall_));
  // @@protoc_insertion_point(copy_constructor:network.GDSafeboxLoadPacket)
}

inline void GDSafeboxLoadPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.login_){}
    , decltype(_impl_.password_){}
    , decltype(_impl_.account_id_){0u}
    , decltype(_impl_.is_mall_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.login_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.login_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GDSafeboxLoadPacket::~GDSafeboxLoadPacket() {
  // @@protoc_insertion_point(destructor:network.GDSafeboxLoadPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GDSafeboxLoadPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.login_.Destroy();
  _impl_.password_.Destroy();
}

void GDSafeboxLoadPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GDSafeboxLoadPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GDSafeboxLoadPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.login_.ClearToEmpty();
  _impl_.password_.ClearToEmpty();
  ::memset(&_impl_.account_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.is_mall_) -
      reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.is_mall_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GDSafeboxLoadPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes login = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_login();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes password = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_password();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_mall = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.is_mall_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GDSafeboxLoadPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GDSafeboxLoadPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 account_id = 1;
  if (this->_internal_account_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // bytes login = 2;
  if (!this->_internal_login().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_login(), target);
  }

  // bytes password = 3;
  if (!this->_internal_password().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_password(), target);
  }

  // bool is_mall = 4;
  if (this->_internal_is_mall() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_is_mall(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GDSafeboxLoadPacket)
  return target;
}

size_t GDSafeboxLoadPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GDSafeboxLoadPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes login = 2;
  if (!this->_internal_login().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_login());
  }

  // bytes password = 3;
  if (!this->_internal_password().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_password());
  }

  // uint32 account_id = 1;
  if (this->_internal_account_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
  }

  // bool is_mall = 4;
  if (this->_internal_is_mall() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GDSafeboxLoadPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GDSafeboxLoadPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GDSafeboxLoadPacket::GetClassData() const { return &_class_data_; }


void GDSafeboxLoadPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GDSafeboxLoadPacket*>(&to_msg);
  auto& from = static_cast<const GDSafeboxLoadPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GDSafeboxLoadPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_login().empty()) {
    _this->_internal_set_login(from._internal_login());
  }
  if (!from._internal_password().empty()) {
    _this->_internal_set_password(from._internal_password());
  }
  if (from._internal_account_id() != 0) {
    _this->_internal_set_account_id(from._internal_account_id());
  }
  if (from._internal_is_mall() != 0) {
    _this->_internal_set_is_mall(from._internal_is_mall());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GDSafeboxLoadPacket::CopyFrom(const GDSafeboxLoadPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GDSafeboxLoadPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GDSafeboxLoadPacket::IsInitialized() const {
  return true;
}

void GDSafeboxLoadPacket::InternalSwap(GDSafeboxLoadPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.login_, lhs_arena,
      &other->_impl_.login_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.password_, lhs_arena,
      &other->_impl_.password_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GDSafeboxLoadPacket, _impl_.is_mall_)
      + sizeof(GDSafeboxLoadPacket::_impl_.is_mall_)
      - PROTOBUF_FIELD_OFFSET(GDSafeboxLoadPacket, _impl_.account_id_)>(
          reinterpret_cast<char*>(&_impl_.account_id_),
          reinterpret_cast<char*>(&other->_impl_.account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GDSafeboxLoadPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gd_5fpackets_2eproto_getter, &descriptor_table_gd_5fpackets_2eproto_once,
      file_level_metadata_gd_5fpackets_2eproto[19]);
}

// ===================================================================

class GDReqHorseNamePacket::_Internal {
 public:
};

GDReqHorseNamePacket::GDReqHorseNamePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GDReqHorseNamePacket)
}
GDReqHorseNamePacket::GDReqHorseNamePacket(const GDReqHorseNamePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GDReqHorseNamePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.pid_ = from._impl_.pid_;
  // @@protoc_insertion_point(copy_constructor:network.GDReqHorseNamePacket)
}

inline void GDReqHorseNamePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GDReqHorseNamePacket::~GDReqHorseNamePacket() {
  // @@protoc_insertion_point(destructor:network.GDReqHorseNamePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GDReqHorseNamePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GDReqHorseNamePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GDReqHorseNamePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GDReqHorseNamePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GDReqHorseNamePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GDReqHorseNamePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GDReqHorseNamePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GDReqHorseNamePacket)
  return target;
}

size_t GDReqHorseNamePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GDReqHorseNamePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GDReqHorseNamePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GDReqHorseNamePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GDReqHorseNamePacket::GetClassData() const { return &_class_data_; }


void GDReqHorseNamePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GDReqHorseNamePacket*>(&to_msg);
  auto& from = static_cast<const GDReqHorseNamePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GDReqHorseNamePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_pid() != 0) {
    _this->_internal_set_pid(from._internal_pid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GDReqHorseNamePacket::CopyFrom(const GDReqHorseNamePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GDReqHorseNamePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GDReqHorseNamePacket::IsInitialized() const {
  return true;
}

void GDReqHorseNamePacket::InternalSwap(GDReqHorseNamePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.pid_, other->_impl_.pid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GDReqHorseNamePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gd_5fpackets_2eproto_getter, &descriptor_table_gd_5fpackets_2eproto_once,
      file_level_metadata_gd_5fpackets_2eproto[20]);
}

// ===================================================================

class GDPlayerSavePacket::_Internal {
 public:
  static const ::TPlayerTable& data(const GDPlayerSavePacket* msg);
};

const ::TPlayerTable&
GDPlayerSavePacket::_Internal::data(const GDPlayerSavePacket* msg) {
  return *msg->_impl_.data_;
}
void GDPlayerSavePacket::clear_data() {
  if (GetArenaForAllocation() == nullptr && _impl_.data_ != nullptr) {
    delete _impl_.data_;
  }
  _impl_.data_ = nullptr;
}
GDPlayerSavePacket::GDPlayerSavePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GDPlayerSavePacket)
}
GDPlayerSavePacket::GDPlayerSavePacket(const GDPlayerSavePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GDPlayerSavePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data()) {
    _this->_impl_.data_ = new ::TPlayerTable(*from._impl_.data_);
  }
  // @@protoc_insertion_point(copy_constructor:network.GDPlayerSavePacket)
}

inline void GDPlayerSavePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GDPlayerSavePacket::~GDPlayerSavePacket() {
  // @@protoc_insertion_point(destructor:network.GDPlayerSavePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GDPlayerSavePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.data_;
}

void GDPlayerSavePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GDPlayerSavePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GDPlayerSavePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.data_ != nullptr) {
    delete _impl_.data_;
  }
  _impl_.data_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GDPlayerSavePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .TPlayerTable data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GDPlayerSavePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GDPlayerSavePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .TPlayerTable data = 1;
  if (this->_internal_has_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::data(this),
        _Internal::data(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GDPlayerSavePacket)
  return target;
}

size_t GDPlayerSavePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GDPlayerSavePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .TPlayerTable data = 1;
  if (this->_internal_has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.data_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GDPlayerSavePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GDPlayerSavePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GDPlayerSavePacket::GetClassData() const { return &_class_data_; }


void GDPlayerSavePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GDPlayerSavePacket*>(&to_msg);
  auto& from = static_cast<const GDPlayerSavePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GDPlayerSavePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_data()) {
    _this->_internal_mutable_data()->::TPlayerTable::MergeFrom(
        from._internal_data());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GDPlayerSavePacket::CopyFrom(const GDPlayerSavePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GDPlayerSavePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GDPlayerSavePacket::IsInitialized() const {
  return true;
}

void GDPlayerSavePacket::InternalSwap(GDPlayerSavePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.data_, other->_impl_.data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GDPlayerSavePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gd_5fpackets_2eproto_getter, &descriptor_table_gd_5fpackets_2eproto_once,
      file_level_metadata_gd_5fpackets_2eproto[21]);
}

// ===================================================================

class GDItemSavePacket::_Internal {
 public:
  static const ::network::TItemData& data(const GDItemSavePacket* msg);
};

const ::network::TItemData&
GDItemSavePacket::_Internal::data(const GDItemSavePacket* msg) {
  return *msg->_impl_.data_;
}
void GDItemSavePacket::clear_data() {
  if (GetArenaForAllocation() == nullptr && _impl_.data_ != nullptr) {
    delete _impl_.data_;
  }
  _impl_.data_ = nullptr;
}
GDItemSavePacket::GDItemSavePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GDItemSavePacket)
}
GDItemSavePacket::GDItemSavePacket(const GDItemSavePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GDItemSavePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data()) {
    _this->_impl_.data_ = new ::network::TItemData(*from._impl_.data_);
  }
  // @@protoc_insertion_point(copy_constructor:network.GDItemSavePacket)
}

inline void GDItemSavePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GDItemSavePacket::~GDItemSavePacket() {
  // @@protoc_insertion_point(destructor:network.GDItemSavePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GDItemSavePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.data_;
}

void GDItemSavePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GDItemSavePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GDItemSavePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.data_ != nullptr) {
    delete _impl_.data_;
  }
  _impl_.data_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GDItemSavePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .network.TItemData data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GDItemSavePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GDItemSavePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .network.TItemData data = 1;
  if (this->_internal_has_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::data(this),
        _Internal::data(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GDItemSavePacket)
  return target;
}

size_t GDItemSavePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GDItemSavePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .network.TItemData data = 1;
  if (this->_internal_has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.data_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GDItemSavePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GDItemSavePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GDItemSavePacket::GetClassData() const { return &_class_data_; }


void GDItemSavePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GDItemSavePacket*>(&to_msg);
  auto& from = static_cast<const GDItemSavePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GDItemSavePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_data()) {
    _this->_internal_mutable_data()->::network::TItemData::MergeFrom(
        from._internal_data());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GDItemSavePacket::CopyFrom(const GDItemSavePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GDItemSavePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GDItemSavePacket::IsInitialized() const {
  return true;
}

void GDItemSavePacket::InternalSwap(GDItemSavePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.data_, other->_impl_.data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GDItemSavePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gd_5fpackets_2eproto_getter, &descriptor_table_gd_5fpackets_2eproto_once,
      file_level_metadata_gd_5fpackets_2eproto[22]);
}

// ===================================================================

class GDQuestSavePacket::_Internal {
 public:
};

void GDQuestSavePacket::clear_datas() {
  _impl_.datas_.Clear();
}
GDQuestSavePacket::GDQuestSavePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GDQuestSavePacket)
}
GDQuestSavePacket::GDQuestSavePacket(const GDQuestSavePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GDQuestSavePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.datas_){from._impl_.datas_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:network.GDQuestSavePacket)
}

inline void GDQuestSavePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.datas_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GDQuestSavePacket::~GDQuestSavePacket() {
  // @@protoc_insertion_point(destructor:network.GDQuestSavePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GDQuestSavePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.datas_.~RepeatedPtrField();
}

void GDQuestSavePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GDQuestSavePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GDQuestSavePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.datas_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GDQuestSavePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TQuestTable datas = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_datas(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GDQuestSavePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GDQuestSavePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TQuestTable datas = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_datas_size()); i < n; i++) {
    const auto& repfield = this->_internal_datas(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GDQuestSavePacket)
  return target;
}

size_t GDQuestSavePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GDQuestSavePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TQuestTable datas = 1;
  total_size += 1UL * this->_internal_datas_size();
  for (const auto& msg : this->_impl_.datas_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GDQuestSavePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GDQuestSavePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GDQuestSavePacket::GetClassData() const { return &_class_data_; }


void GDQuestSavePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GDQuestSavePacket*>(&to_msg);
  auto& from = static_cast<const GDQuestSavePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GDQuestSavePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.datas_.MergeFrom(from._impl_.datas_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GDQuestSavePacket::CopyFrom(const GDQuestSavePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GDQuestSavePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GDQuestSavePacket::IsInitialized() const {
  return true;
}

void GDQuestSavePacket::InternalSwap(GDQuestSavePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.datas_.InternalSwap(&other->_impl_.datas_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GDQuestSavePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gd_5fpackets_2eproto_getter, &descriptor_table_gd_5fpackets_2eproto_once,
      file_level_metadata_gd_5fpackets_2eproto[23]);
}

// ===================================================================

class GDPetSavePacket::_Internal {
 public:
  static const ::network::TPetAdvancedTable& data(const GDPetSavePacket* msg);
};

const ::network::TPetAdvancedTable&
GDPetSavePacket::_Internal::data(const GDPetSavePacket* msg) {
  return *msg->_impl_.data_;
}
void GDPetSavePacket::clear_data() {
  if (GetArenaForAllocation() == nullptr && _impl_.data_ != nullptr) {
    delete _impl_.data_;
  }
  _impl_.data_ = nullptr;
}
GDPetSavePacket::GDPetSavePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GDPetSavePacket)
}
GDPetSavePacket::GDPetSavePacket(const GDPetSavePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GDPetSavePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data()) {
    _this->_impl_.data_ = new ::network::TPetAdvancedTable(*from._impl_.data_);
  }
  // @@protoc_insertion_point(copy_constructor:network.GDPetSavePacket)
}

inline void GDPetSavePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GDPetSavePacket::~GDPetSavePacket() {
  // @@protoc_insertion_point(destructor:network.GDPetSavePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GDPetSavePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.data_;
}

void GDPetSavePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GDPetSavePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GDPetSavePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.data_ != nullptr) {
    delete _impl_.data_;
  }
  _impl_.data_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GDPetSavePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .network.TPetAdvancedTable data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GDPetSavePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GDPetSavePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .network.TPetAdvancedTable data = 1;
  if (this->_internal_has_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::data(this),
        _Internal::data(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GDPetSavePacket)
  return target;
}

size_t GDPetSavePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GDPetSavePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .network.TPetAdvancedTable data = 1;
  if (this->_internal_has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.data_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GDPetSavePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GDPetSavePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GDPetSavePacket::GetClassData() const { return &_class_data_; }


void GDPetSavePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GDPetSavePacket*>(&to_msg);
  auto& from = static_cast<const GDPetSavePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GDPetSavePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_data()) {
    _this->_internal_mutable_data()->::network::TPetAdvancedTable::MergeFrom(
        from._internal_data());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GDPetSavePacket::CopyFrom(const GDPetSavePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GDPetSavePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GDPetSavePacket::IsInitialized() const {
  return true;
}

void GDPetSavePacket::InternalSwap(GDPetSavePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.data_, other->_impl_.data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GDPetSavePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gd_5fpackets_2eproto_getter, &descriptor_table_gd_5fpackets_2eproto_once,
      file_level_metadata_gd_5fpackets_2eproto[24]);
}

// ===================================================================

class GDSafeboxSavePacket::_Internal {
 public:
};

void GDSafeboxSavePacket::clear_items() {
  _impl_.items_.Clear();
}
GDSafeboxSavePacket::GDSafeboxSavePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GDSafeboxSavePacket)
}
GDSafeboxSavePacket::GDSafeboxSavePacket(const GDSafeboxSavePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GDSafeboxSavePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , decltype(_impl_.account_id_){}
    , decltype(_impl_.size_){}
    , decltype(_impl_.gold_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.account_id_, &from._impl_.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.gold_) -
    reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.gold_));
  // @@protoc_insertion_point(copy_constructor:network.GDSafeboxSavePacket)
}

inline void GDSafeboxSavePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , decltype(_impl_.account_id_){0u}
    , decltype(_impl_.size_){0u}
    , decltype(_impl_.gold_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GDSafeboxSavePacket::~GDSafeboxSavePacket() {
  // @@protoc_insertion_point(destructor:network.GDSafeboxSavePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GDSafeboxSavePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
}

void GDSafeboxSavePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GDSafeboxSavePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GDSafeboxSavePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  ::memset(&_impl_.account_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.gold_) -
      reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.gold_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GDSafeboxSavePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 gold = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .network.TItemData items = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GDSafeboxSavePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GDSafeboxSavePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 account_id = 1;
  if (this->_internal_account_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // uint32 size = 2;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_size(), target);
  }

  // int64 gold = 3;
  if (this->_internal_gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_gold(), target);
  }

  // repeated .network.TItemData items = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GDSafeboxSavePacket)
  return target;
}

size_t GDSafeboxSavePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GDSafeboxSavePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .network.TItemData items = 4;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 account_id = 1;
  if (this->_internal_account_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
  }

  // uint32 size = 2;
  if (this->_internal_size() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_size());
  }

  // int64 gold = 3;
  if (this->_internal_gold() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_gold());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GDSafeboxSavePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GDSafeboxSavePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GDSafeboxSavePacket::GetClassData() const { return &_class_data_; }


void GDSafeboxSavePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GDSafeboxSavePacket*>(&to_msg);
  auto& from = static_cast<const GDSafeboxSavePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GDSafeboxSavePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  if (from._internal_account_id() != 0) {
    _this->_internal_set_account_id(from._internal_account_id());
  }
  if (from._internal_size() != 0) {
    _this->_internal_set_size(from._internal_size());
  }
  if (from._internal_gold() != 0) {
    _this->_internal_set_gold(from._internal_gold());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GDSafeboxSavePacket::CopyFrom(const GDSafeboxSavePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GDSafeboxSavePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GDSafeboxSavePacket::IsInitialized() const {
  return true;
}

void GDSafeboxSavePacket::InternalSwap(GDSafeboxSavePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GDSafeboxSavePacket, _impl_.gold_)
      + sizeof(GDSafeboxSavePacket::_impl_.gold_)
      - PROTOBUF_FIELD_OFFSET(GDSafeboxSavePacket, _impl_.account_id_)>(
          reinterpret_cast<char*>(&_impl_.account_id_),
          reinterpret_cast<char*>(&other->_impl_.account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GDSafeboxSavePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gd_5fpackets_2eproto_getter, &descriptor_table_gd_5fpackets_2eproto_once,
      file_level_metadata_gd_5fpackets_2eproto[25]);
}

// ===================================================================

class GDItemDestroyPacket::_Internal {
 public:
};

GDItemDestroyPacket::GDItemDestroyPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GDItemDestroyPacket)
}
GDItemDestroyPacket::GDItemDestroyPacket(const GDItemDestroyPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GDItemDestroyPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.item_id_){}
    , decltype(_impl_.pid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.item_id_, &from._impl_.item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.pid_) -
    reinterpret_cast<char*>(&_impl_.item_id_)) + sizeof(_impl_.pid_));
  // @@protoc_insertion_point(copy_constructor:network.GDItemDestroyPacket)
}

inline void GDItemDestroyPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.item_id_){0u}
    , decltype(_impl_.pid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GDItemDestroyPacket::~GDItemDestroyPacket() {
  // @@protoc_insertion_point(destructor:network.GDItemDestroyPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GDItemDestroyPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GDItemDestroyPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GDItemDestroyPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GDItemDestroyPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.item_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.pid_) -
      reinterpret_cast<char*>(&_impl_.item_id_)) + sizeof(_impl_.pid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GDItemDestroyPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 pid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GDItemDestroyPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GDItemDestroyPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 item_id = 1;
  if (this->_internal_item_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_item_id(), target);
  }

  // uint32 pid = 2;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_pid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GDItemDestroyPacket)
  return target;
}

size_t GDItemDestroyPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GDItemDestroyPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 item_id = 1;
  if (this->_internal_item_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_item_id());
  }

  // uint32 pid = 2;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GDItemDestroyPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GDItemDestroyPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GDItemDestroyPacket::GetClassData() const { return &_class_data_; }


void GDItemDestroyPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GDItemDestroyPacket*>(&to_msg);
  auto& from = static_cast<const GDItemDestroyPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GDItemDestroyPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_item_id() != 0) {
    _this->_internal_set_item_id(from._internal_item_id());
  }
  if (from._internal_pid() != 0) {
    _this->_internal_set_pid(from._internal_pid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GDItemDestroyPacket::CopyFrom(const GDItemDestroyPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GDItemDestroyPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GDItemDestroyPacket::IsInitialized() const {
  return true;
}

void GDItemDestroyPacket::InternalSwap(GDItemDestroyPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GDItemDestroyPacket, _impl_.pid_)
      + sizeof(GDItemDestroyPacket::_impl_.pid_)
      - PROTOBUF_FIELD_OFFSET(GDItemDestroyPacket, _impl_.item_id_)>(
          reinterpret_cast<char*>(&_impl_.item_id_),
          reinterpret_cast<char*>(&other->_impl_.item_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GDItemDestroyPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gd_5fpackets_2eproto_getter, &descriptor_table_gd_5fpackets_2eproto_once,
      file_level_metadata_gd_5fpackets_2eproto[26]);
}

// ===================================================================

class GDSkillColorSavePacket::_Internal {
 public:
};

GDSkillColorSavePacket::GDSkillColorSavePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GDSkillColorSavePacket)
}
GDSkillColorSavePacket::GDSkillColorSavePacket(const GDSkillColorSavePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GDSkillColorSavePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.skill_colors_){from._impl_.skill_colors_}
    , /*decltype(_impl_._skill_colors_cached_byte_size_)*/{0}
    , decltype(_impl_.player_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.player_id_ = from._impl_.player_id_;
  // @@protoc_insertion_point(copy_constructor:network.GDSkillColorSavePacket)
}

inline void GDSkillColorSavePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.skill_colors_){arena}
    , /*decltype(_impl_._skill_colors_cached_byte_size_)*/{0}
    , decltype(_impl_.player_id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GDSkillColorSavePacket::~GDSkillColorSavePacket() {
  // @@protoc_insertion_point(destructor:network.GDSkillColorSavePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GDSkillColorSavePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.skill_colors_.~RepeatedField();
}

void GDSkillColorSavePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GDSkillColorSavePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GDSkillColorSavePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.skill_colors_.Clear();
  _impl_.player_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GDSkillColorSavePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 skill_colors = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_skill_colors(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_skill_colors(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GDSkillColorSavePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GDSkillColorSavePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 player_id = 1;
  if (this->_internal_player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_player_id(), target);
  }

  // repeated uint32 skill_colors = 2;
  {
    int byte_size = _impl_._skill_colors_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          2, _internal_skill_colors(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GDSkillColorSavePacket)
  return target;
}

size_t GDSkillColorSavePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GDSkillColorSavePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 skill_colors = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.skill_colors_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._skill_colors_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint32 player_id = 1;
  if (this->_internal_player_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_player_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GDSkillColorSavePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GDSkillColorSavePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GDSkillColorSavePacket::GetClassData() const { return &_class_data_; }


void GDSkillColorSavePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GDSkillColorSavePacket*>(&to_msg);
  auto& from = static_cast<const GDSkillColorSavePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GDSkillColorSavePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.skill_colors_.MergeFrom(from._impl_.skill_colors_);
  if (from._internal_player_id() != 0) {
    _this->_internal_set_player_id(from._internal_player_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GDSkillColorSavePacket::CopyFrom(const GDSkillColorSavePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GDSkillColorSavePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GDSkillColorSavePacket::IsInitialized() const {
  return true;
}

void GDSkillColorSavePacket::InternalSwap(GDSkillColorSavePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.skill_colors_.InternalSwap(&other->_impl_.skill_colors_);
  swap(_impl_.player_id_, other->_impl_.player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GDSkillColorSavePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gd_5fpackets_2eproto_getter, &descriptor_table_gd_5fpackets_2eproto_once,
      file_level_metadata_gd_5fpackets_2eproto[27]);
}

// ===================================================================

class GDPlayerRuneSavePacket::_Internal {
 public:
};

GDPlayerRuneSavePacket::GDPlayerRuneSavePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GDPlayerRuneSavePacket)
}
GDPlayerRuneSavePacket::GDPlayerRuneSavePacket(const GDPlayerRuneSavePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GDPlayerRuneSavePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.runes_){from._impl_.runes_}
    , /*decltype(_impl_._runes_cached_byte_size_)*/{0}
    , decltype(_impl_.player_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.player_id_ = from._impl_.player_id_;
  // @@protoc_insertion_point(copy_constructor:network.GDPlayerRuneSavePacket)
}

inline void GDPlayerRuneSavePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.runes_){arena}
    , /*decltype(_impl_._runes_cached_byte_size_)*/{0}
    , decltype(_impl_.player_id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GDPlayerRuneSavePacket::~GDPlayerRuneSavePacket() {
  // @@protoc_insertion_point(destructor:network.GDPlayerRuneSavePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GDPlayerRuneSavePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.runes_.~RepeatedField();
}

void GDPlayerRuneSavePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GDPlayerRuneSavePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GDPlayerRuneSavePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.runes_.Clear();
  _impl_.player_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GDPlayerRuneSavePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 runes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_runes(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_runes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GDPlayerRuneSavePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GDPlayerRuneSavePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 player_id = 1;
  if (this->_internal_player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_player_id(), target);
  }

  // repeated uint32 runes = 2;
  {
    int byte_size = _impl_._runes_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          2, _internal_runes(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GDPlayerRuneSavePacket)
  return target;
}

size_t GDPlayerRuneSavePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GDPlayerRuneSavePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 runes = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.runes_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._runes_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint32 player_id = 1;
  if (this->_internal_player_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_player_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GDPlayerRuneSavePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GDPlayerRuneSavePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GDPlayerRuneSavePacket::GetClassData() const { return &_class_data_; }


void GDPlayerRuneSavePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GDPlayerRuneSavePacket*>(&to_msg);
  auto& from = static_cast<const GDPlayerRuneSavePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GDPlayerRuneSavePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.runes_.MergeFrom(from._impl_.runes_);
  if (from._internal_player_id() != 0) {
    _this->_internal_set_player_id(from._internal_player_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GDPlayerRuneSavePacket::CopyFrom(const GDPlayerRuneSavePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GDPlayerRuneSavePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GDPlayerRuneSavePacket::IsInitialized() const {
  return true;
}

void GDPlayerRuneSavePacket::InternalSwap(GDPlayerRuneSavePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.runes_.InternalSwap(&other->_impl_.runes_);
  swap(_impl_.player_id_, other->_impl_.player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GDPlayerRuneSavePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gd_5fpackets_2eproto_getter, &descriptor_table_gd_5fpackets_2eproto_once,
      file_level_metadata_gd_5fpackets_2eproto[28]);
}

// ===================================================================

class GDEquipmentPageDeletePacket::_Internal {
 public:
};

GDEquipmentPageDeletePacket::GDEquipmentPageDeletePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GDEquipmentPageDeletePacket)
}
GDEquipmentPageDeletePacket::GDEquipmentPageDeletePacket(const GDEquipmentPageDeletePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GDEquipmentPageDeletePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.pid_ = from._impl_.pid_;
  // @@protoc_insertion_point(copy_constructor:network.GDEquipmentPageDeletePacket)
}

inline void GDEquipmentPageDeletePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GDEquipmentPageDeletePacket::~GDEquipmentPageDeletePacket() {
  // @@protoc_insertion_point(destructor:network.GDEquipmentPageDeletePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GDEquipmentPageDeletePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GDEquipmentPageDeletePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GDEquipmentPageDeletePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GDEquipmentPageDeletePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GDEquipmentPageDeletePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GDEquipmentPageDeletePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GDEquipmentPageDeletePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GDEquipmentPageDeletePacket)
  return target;
}

size_t GDEquipmentPageDeletePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GDEquipmentPageDeletePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GDEquipmentPageDeletePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GDEquipmentPageDeletePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GDEquipmentPageDeletePacket::GetClassData() const { return &_class_data_; }


void GDEquipmentPageDeletePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GDEquipmentPageDeletePacket*>(&to_msg);
  auto& from = static_cast<const GDEquipmentPageDeletePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GDEquipmentPageDeletePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_pid() != 0) {
    _this->_internal_set_pid(from._internal_pid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GDEquipmentPageDeletePacket::CopyFrom(const GDEquipmentPageDeletePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GDEquipmentPageDeletePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GDEquipmentPageDeletePacket::IsInitialized() const {
  return true;
}

void GDEquipmentPageDeletePacket::InternalSwap(GDEquipmentPageDeletePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.pid_, other->_impl_.pid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GDEquipmentPageDeletePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gd_5fpackets_2eproto_getter, &descriptor_table_gd_5fpackets_2eproto_once,
      file_level_metadata_gd_5fpackets_2eproto[29]);
}

// ===================================================================

class GDEquipmentPageSavePacket::_Internal {
 public:
};

void GDEquipmentPageSavePacket::clear_pages() {
  _impl_.pages_.Clear();
}
GDEquipmentPageSavePacket::GDEquipmentPageSavePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GDEquipmentPageSavePacket)
}
GDEquipmentPageSavePacket::GDEquipmentPageSavePacket(const GDEquipmentPageSavePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GDEquipmentPageSavePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pages_){from._impl_.pages_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:network.GDEquipmentPageSavePacket)
}

inline void GDEquipmentPageSavePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pages_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GDEquipmentPageSavePacket::~GDEquipmentPageSavePacket() {
  // @@protoc_insertion_point(destructor:network.GDEquipmentPageSavePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GDEquipmentPageSavePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.pages_.~RepeatedPtrField();
}

void GDEquipmentPageSavePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GDEquipmentPageSavePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GDEquipmentPageSavePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pages_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GDEquipmentPageSavePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .network.TEquipmentChangerTable pages = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GDEquipmentPageSavePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GDEquipmentPageSavePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .network.TEquipmentChangerTable pages = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_pages_size()); i < n; i++) {
    const auto& repfield = this->_internal_pages(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GDEquipmentPageSavePacket)
  return target;
}

size_t GDEquipmentPageSavePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GDEquipmentPageSavePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .network.TEquipmentChangerTable pages = 1;
  total_size += 1UL * this->_internal_pages_size();
  for (const auto& msg : this->_impl_.pages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GDEquipmentPageSavePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GDEquipmentPageSavePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GDEquipmentPageSavePacket::GetClassData() const { return &_class_data_; }


void GDEquipmentPageSavePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GDEquipmentPageSavePacket*>(&to_msg);
  auto& from = static_cast<const GDEquipmentPageSavePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GDEquipmentPageSavePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.pages_.MergeFrom(from._impl_.pages_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GDEquipmentPageSavePacket::CopyFrom(const GDEquipmentPageSavePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GDEquipmentPageSavePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GDEquipmentPageSavePacket::IsInitialized() const {
  return true;
}

void GDEquipmentPageSavePacket::InternalSwap(GDEquipmentPageSavePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.pages_.InternalSwap(&other->_impl_.pages_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GDEquipmentPageSavePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gd_5fpackets_2eproto_getter, &descriptor_table_gd_5fpackets_2eproto_once,
      file_level_metadata_gd_5fpackets_2eproto[30]);
}

// ===================================================================

class GDFlushCachePacket::_Internal {
 public:
};

GDFlushCachePacket::GDFlushCachePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GDFlushCachePacket)
}
GDFlushCachePacket::GDFlushCachePacket(const GDFlushCachePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GDFlushCachePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.pid_ = from._impl_.pid_;
  // @@protoc_insertion_point(copy_constructor:network.GDFlushCachePacket)
}

inline void GDFlushCachePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GDFlushCachePacket::~GDFlushCachePacket() {
  // @@protoc_insertion_point(destructor:network.GDFlushCachePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GDFlushCachePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GDFlushCachePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GDFlushCachePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GDFlushCachePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GDFlushCachePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GDFlushCachePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GDFlushCachePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GDFlushCachePacket)
  return target;
}

size_t GDFlushCachePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GDFlushCachePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GDFlushCachePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GDFlushCachePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GDFlushCachePacket::GetClassData() const { return &_class_data_; }


void GDFlushCachePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GDFlushCachePacket*>(&to_msg);
  auto& from = static_cast<const GDFlushCachePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GDFlushCachePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_pid() != 0) {
    _this->_internal_set_pid(from._internal_pid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GDFlushCachePacket::CopyFrom(const GDFlushCachePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GDFlushCachePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GDFlushCachePacket::IsInitialized() const {
  return true;
}

void GDFlushCachePacket::InternalSwap(GDFlushCachePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.pid_, other->_impl_.pid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GDFlushCachePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gd_5fpackets_2eproto_getter, &descriptor_table_gd_5fpackets_2eproto_once,
      file_level_metadata_gd_5fpackets_2eproto[31]);
}

// ===================================================================

class GDItemFlushPacket::_Internal {
 public:
};

GDItemFlushPacket::GDItemFlushPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GDItemFlushPacket)
}
GDItemFlushPacket::GDItemFlushPacket(const GDItemFlushPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GDItemFlushPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.item_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.item_id_ = from._impl_.item_id_;
  // @@protoc_insertion_point(copy_constructor:network.GDItemFlushPacket)
}

inline void GDItemFlushPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.item_id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GDItemFlushPacket::~GDItemFlushPacket() {
  // @@protoc_insertion_point(destructor:network.GDItemFlushPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GDItemFlushPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GDItemFlushPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GDItemFlushPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GDItemFlushPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.item_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GDItemFlushPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GDItemFlushPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GDItemFlushPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 item_id = 1;
  if (this->_internal_item_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_item_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GDItemFlushPacket)
  return target;
}

size_t GDItemFlushPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GDItemFlushPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 item_id = 1;
  if (this->_internal_item_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_item_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GDItemFlushPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GDItemFlushPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GDItemFlushPacket::GetClassData() const { return &_class_data_; }


void GDItemFlushPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GDItemFlushPacket*>(&to_msg);
  auto& from = static_cast<const GDItemFlushPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GDItemFlushPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_item_id() != 0) {
    _this->_internal_set_item_id(from._internal_item_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GDItemFlushPacket::CopyFrom(const GDItemFlushPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GDItemFlushPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GDItemFlushPacket::IsInitialized() const {
  return true;
}

void GDItemFlushPacket::InternalSwap(GDItemFlushPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.item_id_, other->_impl_.item_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GDItemFlushPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gd_5fpackets_2eproto_getter, &descriptor_table_gd_5fpackets_2eproto_once,
      file_level_metadata_gd_5fpackets_2eproto[32]);
}

// ===================================================================

class GDLogoutPacket::_Internal {
 public:
};

GDLogoutPacket::GDLogoutPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GDLogoutPacket)
}
GDLogoutPacket::GDLogoutPacket(const GDLogoutPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GDLogoutPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.login_){}
    , decltype(_impl_.passwd_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.login_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.login_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_login().empty()) {
    _this->_impl_.login_.Set(from._internal_login(), 
      _this->GetArenaForAllocation());
  }
  _impl_.passwd_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.passwd_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_passwd().empty()) {
    _this->_impl_.passwd_.Set(from._internal_passwd(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:network.GDLogoutPacket)
}

inline void GDLogoutPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.login_){}
    , decltype(_impl_.passwd_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.login_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.login_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.passwd_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.passwd_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GDLogoutPacket::~GDLogoutPacket() {
  // @@protoc_insertion_point(destructor:network.GDLogoutPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GDLogoutPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.login_.Destroy();
  _impl_.passwd_.Destroy();
}

void GDLogoutPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GDLogoutPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GDLogoutPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.login_.ClearToEmpty();
  _impl_.passwd_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GDLogoutPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes login = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_login();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes passwd = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_passwd();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GDLogoutPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GDLogoutPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes login = 1;
  if (!this->_internal_login().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_login(), target);
  }

  // bytes passwd = 2;
  if (!this->_internal_passwd().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_passwd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GDLogoutPacket)
  return target;
}

size_t GDLogoutPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GDLogoutPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes login = 1;
  if (!this->_internal_login().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_login());
  }

  // bytes passwd = 2;
  if (!this->_internal_passwd().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_passwd());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GDLogoutPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GDLogoutPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GDLogoutPacket::GetClassData() const { return &_class_data_; }


void GDLogoutPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GDLogoutPacket*>(&to_msg);
  auto& from = static_cast<const GDLogoutPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GDLogoutPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_login().empty()) {
    _this->_internal_set_login(from._internal_login());
  }
  if (!from._internal_passwd().empty()) {
    _this->_internal_set_passwd(from._internal_passwd());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GDLogoutPacket::CopyFrom(const GDLogoutPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GDLogoutPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GDLogoutPacket::IsInitialized() const {
  return true;
}

void GDLogoutPacket::InternalSwap(GDLogoutPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.login_, lhs_arena,
      &other->_impl_.login_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.passwd_, lhs_arena,
      &other->_impl_.passwd_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GDLogoutPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gd_5fpackets_2eproto_getter, &descriptor_table_gd_5fpackets_2eproto_once,
      file_level_metadata_gd_5fpackets_2eproto[33]);
}

// ===================================================================

class GDSafeboxChangeSizePacket::_Internal {
 public:
};

GDSafeboxChangeSizePacket::GDSafeboxChangeSizePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GDSafeboxChangeSizePacket)
}
GDSafeboxChangeSizePacket::GDSafeboxChangeSizePacket(const GDSafeboxChangeSizePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GDSafeboxChangeSizePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.account_id_){}
    , decltype(_impl_.size_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.account_id_, &from._impl_.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.size_) -
    reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.size_));
  // @@protoc_insertion_point(copy_constructor:network.GDSafeboxChangeSizePacket)
}

inline void GDSafeboxChangeSizePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.account_id_){0u}
    , decltype(_impl_.size_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GDSafeboxChangeSizePacket::~GDSafeboxChangeSizePacket() {
  // @@protoc_insertion_point(destructor:network.GDSafeboxChangeSizePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GDSafeboxChangeSizePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GDSafeboxChangeSizePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GDSafeboxChangeSizePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GDSafeboxChangeSizePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.account_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.size_) -
      reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GDSafeboxChangeSizePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GDSafeboxChangeSizePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GDSafeboxChangeSizePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 account_id = 1;
  if (this->_internal_account_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // uint32 size = 2;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GDSafeboxChangeSizePacket)
  return target;
}

size_t GDSafeboxChangeSizePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GDSafeboxChangeSizePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 account_id = 1;
  if (this->_internal_account_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
  }

  // uint32 size = 2;
  if (this->_internal_size() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GDSafeboxChangeSizePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GDSafeboxChangeSizePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GDSafeboxChangeSizePacket::GetClassData() const { return &_class_data_; }


void GDSafeboxChangeSizePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GDSafeboxChangeSizePacket*>(&to_msg);
  auto& from = static_cast<const GDSafeboxChangeSizePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GDSafeboxChangeSizePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_account_id() != 0) {
    _this->_internal_set_account_id(from._internal_account_id());
  }
  if (from._internal_size() != 0) {
    _this->_internal_set_size(from._internal_size());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GDSafeboxChangeSizePacket::CopyFrom(const GDSafeboxChangeSizePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GDSafeboxChangeSizePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GDSafeboxChangeSizePacket::IsInitialized() const {
  return true;
}

void GDSafeboxChangeSizePacket::InternalSwap(GDSafeboxChangeSizePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GDSafeboxChangeSizePacket, _impl_.size_)
      + sizeof(GDSafeboxChangeSizePacket::_impl_.size_)
      - PROTOBUF_FIELD_OFFSET(GDSafeboxChangeSizePacket, _impl_.account_id_)>(
          reinterpret_cast<char*>(&_impl_.account_id_),
          reinterpret_cast<char*>(&other->_impl_.account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GDSafeboxChangeSizePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gd_5fpackets_2eproto_getter, &descriptor_table_gd_5fpackets_2eproto_once,
      file_level_metadata_gd_5fpackets_2eproto[34]);
}

// ===================================================================

class GDSafeboxChangePasswordPacket::_Internal {
 public:
};

GDSafeboxChangePasswordPacket::GDSafeboxChangePasswordPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GDSafeboxChangePasswordPacket)
}
GDSafeboxChangePasswordPacket::GDSafeboxChangePasswordPacket(const GDSafeboxChangePasswordPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GDSafeboxChangePasswordPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.old_password_){}
    , decltype(_impl_.new_password_){}
    , decltype(_impl_.account_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.old_password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.old_password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_old_password().empty()) {
    _this->_impl_.old_password_.Set(from._internal_old_password(), 
      _this->GetArenaForAllocation());
  }
  _impl_.new_password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.new_password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_new_password().empty()) {
    _this->_impl_.new_password_.Set(from._internal_new_password(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.account_id_ = from._impl_.account_id_;
  // @@protoc_insertion_point(copy_constructor:network.GDSafeboxChangePasswordPacket)
}

inline void GDSafeboxChangePasswordPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.old_password_){}
    , decltype(_impl_.new_password_){}
    , decltype(_impl_.account_id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.old_password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.old_password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.new_password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.new_password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GDSafeboxChangePasswordPacket::~GDSafeboxChangePasswordPacket() {
  // @@protoc_insertion_point(destructor:network.GDSafeboxChangePasswordPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GDSafeboxChangePasswordPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.old_password_.Destroy();
  _impl_.new_password_.Destroy();
}

void GDSafeboxChangePasswordPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GDSafeboxChangePasswordPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GDSafeboxChangePasswordPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.old_password_.ClearToEmpty();
  _impl_.new_password_.ClearToEmpty();
  _impl_.account_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GDSafeboxChangePasswordPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes old_password = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_old_password();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes new_password = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_new_password();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GDSafeboxChangePasswordPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GDSafeboxChangePasswordPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 account_id = 1;
  if (this->_internal_account_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // bytes old_password = 2;
  if (!this->_internal_old_password().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_old_password(), target);
  }

  // bytes new_password = 3;
  if (!this->_internal_new_password().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_new_password(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GDSafeboxChangePasswordPacket)
  return target;
}

size_t GDSafeboxChangePasswordPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GDSafeboxChangePasswordPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes old_password = 2;
  if (!this->_internal_old_password().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_old_password());
  }

  // bytes new_password = 3;
  if (!this->_internal_new_password().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_new_password());
  }

  // uint32 account_id = 1;
  if (this->_internal_account_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GDSafeboxChangePasswordPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GDSafeboxChangePasswordPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GDSafeboxChangePasswordPacket::GetClassData() const { return &_class_data_; }


void GDSafeboxChangePasswordPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GDSafeboxChangePasswordPacket*>(&to_msg);
  auto& from = static_cast<const GDSafeboxChangePasswordPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GDSafeboxChangePasswordPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_old_password().empty()) {
    _this->_internal_set_old_password(from._internal_old_password());
  }
  if (!from._internal_new_password().empty()) {
    _this->_internal_set_new_password(from._internal_new_password());
  }
  if (from._internal_account_id() != 0) {
    _this->_internal_set_account_id(from._internal_account_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GDSafeboxChangePasswordPacket::CopyFrom(const GDSafeboxChangePasswordPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GDSafeboxChangePasswordPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GDSafeboxChangePasswordPacket::IsInitialized() const {
  return true;
}

void GDSafeboxChangePasswordPacket::InternalSwap(GDSafeboxChangePasswordPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.old_password_, lhs_arena,
      &other->_impl_.old_password_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.new_password_, lhs_arena,
      &other->_impl_.new_password_, rhs_arena
  );
  swap(_impl_.account_id_, other->_impl_.account_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GDSafeboxChangePasswordPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gd_5fpackets_2eproto_getter, &descriptor_table_gd_5fpackets_2eproto_once,
      file_level_metadata_gd_5fpackets_2eproto[35]);
}

// ===================================================================

class GDAddAffectPacket::_Internal {
 public:
  static const ::TPacketAffectElement& elem(const GDAddAffectPacket* msg);
};

const ::TPacketAffectElement&
GDAddAffectPacket::_Internal::elem(const GDAddAffectPacket* msg) {
  return *msg->_impl_.elem_;
}
void GDAddAffectPacket::clear_elem() {
  if (GetArenaForAllocation() == nullptr && _impl_.elem_ != nullptr) {
    delete _impl_.elem_;
  }
  _impl_.elem_ = nullptr;
}
GDAddAffectPacket::GDAddAffectPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GDAddAffectPacket)
}
GDAddAffectPacket::GDAddAffectPacket(const GDAddAffectPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GDAddAffectPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.elem_){nullptr}
    , decltype(_impl_.pid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_elem()) {
    _this->_impl_.elem_ = new ::TPacketAffectElement(*from._impl_.elem_);
  }
  _this->_impl_.pid_ = from._impl_.pid_;
  // @@protoc_insertion_point(copy_constructor:network.GDAddAffectPacket)
}

inline void GDAddAffectPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.elem_){nullptr}
    , decltype(_impl_.pid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GDAddAffectPacket::~GDAddAffectPacket() {
  // @@protoc_insertion_point(destructor:network.GDAddAffectPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GDAddAffectPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.elem_;
}

void GDAddAffectPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GDAddAffectPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GDAddAffectPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.elem_ != nullptr) {
    delete _impl_.elem_;
  }
  _impl_.elem_ = nullptr;
  _impl_.pid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GDAddAffectPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TPacketAffectElement elem = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_elem(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GDAddAffectPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GDAddAffectPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pid(), target);
  }

  // .TPacketAffectElement elem = 2;
  if (this->_internal_has_elem()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::elem(this),
        _Internal::elem(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GDAddAffectPacket)
  return target;
}

size_t GDAddAffectPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GDAddAffectPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .TPacketAffectElement elem = 2;
  if (this->_internal_has_elem()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.elem_);
  }

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GDAddAffectPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GDAddAffectPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GDAddAffectPacket::GetClassData() const { return &_class_data_; }


void GDAddAffectPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GDAddAffectPacket*>(&to_msg);
  auto& from = static_cast<const GDAddAffectPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GDAddAffectPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_elem()) {
    _this->_internal_mutable_elem()->::TPacketAffectElement::MergeFrom(
        from._internal_elem());
  }
  if (from._internal_pid() != 0) {
    _this->_internal_set_pid(from._internal_pid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GDAddAffectPacket::CopyFrom(const GDAddAffectPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GDAddAffectPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GDAddAffectPacket::IsInitialized() const {
  return true;
}

void GDAddAffectPacket::InternalSwap(GDAddAffectPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GDAddAffectPacket, _impl_.pid_)
      + sizeof(GDAddAffectPacket::_impl_.pid_)
      - PROTOBUF_FIELD_OFFSET(GDAddAffectPacket, _impl_.elem_)>(
          reinterpret_cast<char*>(&_impl_.elem_),
          reinterpret_cast<char*>(&other->_impl_.elem_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GDAddAffectPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gd_5fpackets_2eproto_getter, &descriptor_table_gd_5fpackets_2eproto_once,
      file_level_metadata_gd_5fpackets_2eproto[36]);
}

// ===================================================================

class GDRemoveAffectPacket::_Internal {
 public:
};

GDRemoveAffectPacket::GDRemoveAffectPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GDRemoveAffectPacket)
}
GDRemoveAffectPacket::GDRemoveAffectPacket(const GDRemoveAffectPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GDRemoveAffectPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pid_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.apply_on_){}
    , decltype(_impl_.apply_value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.pid_, &from._impl_.pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.apply_value_) -
    reinterpret_cast<char*>(&_impl_.pid_)) + sizeof(_impl_.apply_value_));
  // @@protoc_insertion_point(copy_constructor:network.GDRemoveAffectPacket)
}

inline void GDRemoveAffectPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pid_){0u}
    , decltype(_impl_.type_){0u}
    , decltype(_impl_.apply_on_){0u}
    , decltype(_impl_.apply_value_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GDRemoveAffectPacket::~GDRemoveAffectPacket() {
  // @@protoc_insertion_point(destructor:network.GDRemoveAffectPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GDRemoveAffectPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GDRemoveAffectPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GDRemoveAffectPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GDRemoveAffectPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.pid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.apply_value_) -
      reinterpret_cast<char*>(&_impl_.pid_)) + sizeof(_impl_.apply_value_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GDRemoveAffectPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 apply_on = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.apply_on_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 apply_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.apply_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GDRemoveAffectPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GDRemoveAffectPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pid(), target);
  }

  // uint32 type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_type(), target);
  }

  // uint32 apply_on = 3;
  if (this->_internal_apply_on() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_apply_on(), target);
  }

  // int32 apply_value = 4;
  if (this->_internal_apply_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_apply_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GDRemoveAffectPacket)
  return target;
}

size_t GDRemoveAffectPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GDRemoveAffectPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid());
  }

  // uint32 type = 2;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
  }

  // uint32 apply_on = 3;
  if (this->_internal_apply_on() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_apply_on());
  }

  // int32 apply_value = 4;
  if (this->_internal_apply_value() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_apply_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GDRemoveAffectPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GDRemoveAffectPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GDRemoveAffectPacket::GetClassData() const { return &_class_data_; }


void GDRemoveAffectPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GDRemoveAffectPacket*>(&to_msg);
  auto& from = static_cast<const GDRemoveAffectPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GDRemoveAffectPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_pid() != 0) {
    _this->_internal_set_pid(from._internal_pid());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_apply_on() != 0) {
    _this->_internal_set_apply_on(from._internal_apply_on());
  }
  if (from._internal_apply_value() != 0) {
    _this->_internal_set_apply_value(from._internal_apply_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GDRemoveAffectPacket::CopyFrom(const GDRemoveAffectPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GDRemoveAffectPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GDRemoveAffectPacket::IsInitialized() const {
  return true;
}

void GDRemoveAffectPacket::InternalSwap(GDRemoveAffectPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GDRemoveAffectPacket, _impl_.apply_value_)
      + sizeof(GDRemoveAffectPacket::_impl_.apply_value_)
      - PROTOBUF_FIELD_OFFSET(GDRemoveAffectPacket, _impl_.pid_)>(
          reinterpret_cast<char*>(&_impl_.pid_),
          reinterpret_cast<char*>(&other->_impl_.pid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GDRemoveAffectPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gd_5fpackets_2eproto_getter, &descriptor_table_gd_5fpackets_2eproto_once,
      file_level_metadata_gd_5fpackets_2eproto[37]);
}

// ===================================================================

class GDHighscoreRegisterPacket::_Internal {
 public:
};

GDHighscoreRegisterPacket::GDHighscoreRegisterPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GDHighscoreRegisterPacket)
}
GDHighscoreRegisterPacket::GDHighscoreRegisterPacket(const GDHighscoreRegisterPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GDHighscoreRegisterPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.board_){}
    , decltype(_impl_.pid_){}
    , decltype(_impl_.value_){}
    , decltype(_impl_.dir_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.board_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.board_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_board().empty()) {
    _this->_impl_.board_.Set(from._internal_board(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.pid_, &from._impl_.pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.dir_) -
    reinterpret_cast<char*>(&_impl_.pid_)) + sizeof(_impl_.dir_));
  // @@protoc_insertion_point(copy_constructor:network.GDHighscoreRegisterPacket)
}

inline void GDHighscoreRegisterPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.board_){}
    , decltype(_impl_.pid_){0u}
    , decltype(_impl_.value_){0}
    , decltype(_impl_.dir_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.board_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.board_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GDHighscoreRegisterPacket::~GDHighscoreRegisterPacket() {
  // @@protoc_insertion_point(destructor:network.GDHighscoreRegisterPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GDHighscoreRegisterPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.board_.Destroy();
}

void GDHighscoreRegisterPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GDHighscoreRegisterPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GDHighscoreRegisterPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.board_.ClearToEmpty();
  ::memset(&_impl_.pid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.dir_) -
      reinterpret_cast<char*>(&_impl_.pid_)) + sizeof(_impl_.dir_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GDHighscoreRegisterPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 dir = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.dir_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes board = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_board();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GDHighscoreRegisterPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GDHighscoreRegisterPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pid(), target);
  }

  // int32 value = 2;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_value(), target);
  }

  // int32 dir = 3;
  if (this->_internal_dir() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_dir(), target);
  }

  // bytes board = 4;
  if (!this->_internal_board().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_board(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GDHighscoreRegisterPacket)
  return target;
}

size_t GDHighscoreRegisterPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GDHighscoreRegisterPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes board = 4;
  if (!this->_internal_board().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_board());
  }

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid());
  }

  // int32 value = 2;
  if (this->_internal_value() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_value());
  }

  // int32 dir = 3;
  if (this->_internal_dir() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_dir());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GDHighscoreRegisterPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GDHighscoreRegisterPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GDHighscoreRegisterPacket::GetClassData() const { return &_class_data_; }


void GDHighscoreRegisterPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GDHighscoreRegisterPacket*>(&to_msg);
  auto& from = static_cast<const GDHighscoreRegisterPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GDHighscoreRegisterPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_board().empty()) {
    _this->_internal_set_board(from._internal_board());
  }
  if (from._internal_pid() != 0) {
    _this->_internal_set_pid(from._internal_pid());
  }
  if (from._internal_value() != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  if (from._internal_dir() != 0) {
    _this->_internal_set_dir(from._internal_dir());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GDHighscoreRegisterPacket::CopyFrom(const GDHighscoreRegisterPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GDHighscoreRegisterPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GDHighscoreRegisterPacket::IsInitialized() const {
  return true;
}

void GDHighscoreRegisterPacket::InternalSwap(GDHighscoreRegisterPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.board_, lhs_arena,
      &other->_impl_.board_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GDHighscoreRegisterPacket, _impl_.dir_)
      + sizeof(GDHighscoreRegisterPacket::_impl_.dir_)
      - PROTOBUF_FIELD_OFFSET(GDHighscoreRegisterPacket, _impl_.pid_)>(
          reinterpret_cast<char*>(&_impl_.pid_),
          reinterpret_cast<char*>(&other->_impl_.pid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GDHighscoreRegisterPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gd_5fpackets_2eproto_getter, &descriptor_table_gd_5fpackets_2eproto_once,
      file_level_metadata_gd_5fpackets_2eproto[38]);
}

// ===================================================================

class GDSMSPacket::_Internal {
 public:
};

GDSMSPacket::GDSMSPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GDSMSPacket)
}
GDSMSPacket::GDSMSPacket(const GDSMSPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GDSMSPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.from_){}
    , decltype(_impl_.to_){}
    , decltype(_impl_.mobile_){}
    , decltype(_impl_.msg_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.from_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.from_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_from().empty()) {
    _this->_impl_.from_.Set(from._internal_from(), 
      _this->GetArenaForAllocation());
  }
  _impl_.to_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.to_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_to().empty()) {
    _this->_impl_.to_.Set(from._internal_to(), 
      _this->GetArenaForAllocation());
  }
  _impl_.mobile_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mobile_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mobile().empty()) {
    _this->_impl_.mobile_.Set(from._internal_mobile(), 
      _this->GetArenaForAllocation());
  }
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg().empty()) {
    _this->_impl_.msg_.Set(from._internal_msg(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:network.GDSMSPacket)
}

inline void GDSMSPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.from_){}
    , decltype(_impl_.to_){}
    , decltype(_impl_.mobile_){}
    , decltype(_impl_.msg_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.from_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.from_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.to_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.to_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mobile_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mobile_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GDSMSPacket::~GDSMSPacket() {
  // @@protoc_insertion_point(destructor:network.GDSMSPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GDSMSPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.from_.Destroy();
  _impl_.to_.Destroy();
  _impl_.mobile_.Destroy();
  _impl_.msg_.Destroy();
}

void GDSMSPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GDSMSPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GDSMSPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.from_.ClearToEmpty();
  _impl_.to_.ClearToEmpty();
  _impl_.mobile_.ClearToEmpty();
  _impl_.msg_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GDSMSPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_from();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes to = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_to();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes mobile = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_mobile();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes msg = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_msg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GDSMSPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GDSMSPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes from = 1;
  if (!this->_internal_from().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_from(), target);
  }

  // bytes to = 2;
  if (!this->_internal_to().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_to(), target);
  }

  // bytes mobile = 3;
  if (!this->_internal_mobile().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_mobile(), target);
  }

  // bytes msg = 4;
  if (!this->_internal_msg().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GDSMSPacket)
  return target;
}

size_t GDSMSPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GDSMSPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes from = 1;
  if (!this->_internal_from().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_from());
  }

  // bytes to = 2;
  if (!this->_internal_to().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_to());
  }

  // bytes mobile = 3;
  if (!this->_internal_mobile().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_mobile());
  }

  // bytes msg = 4;
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_msg());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GDSMSPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GDSMSPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GDSMSPacket::GetClassData() const { return &_class_data_; }


void GDSMSPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GDSMSPacket*>(&to_msg);
  auto& from = static_cast<const GDSMSPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GDSMSPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_from().empty()) {
    _this->_internal_set_from(from._internal_from());
  }
  if (!from._internal_to().empty()) {
    _this->_internal_set_to(from._internal_to());
  }
  if (!from._internal_mobile().empty()) {
    _this->_internal_set_mobile(from._internal_mobile());
  }
  if (!from._internal_msg().empty()) {
    _this->_internal_set_msg(from._internal_msg());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GDSMSPacket::CopyFrom(const GDSMSPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GDSMSPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GDSMSPacket::IsInitialized() const {
  return true;
}

void GDSMSPacket::InternalSwap(GDSMSPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.from_, lhs_arena,
      &other->_impl_.from_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.to_, lhs_arena,
      &other->_impl_.to_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mobile_, lhs_arena,
      &other->_impl_.mobile_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.msg_, lhs_arena,
      &other->_impl_.msg_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GDSMSPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gd_5fpackets_2eproto_getter, &descriptor_table_gd_5fpackets_2eproto_once,
      file_level_metadata_gd_5fpackets_2eproto[39]);
}

// ===================================================================

class GDRequestGuildPrivPacket::_Internal {
 public:
};

GDRequestGuildPrivPacket::GDRequestGuildPrivPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GDRequestGuildPrivPacket)
}
GDRequestGuildPrivPacket::GDRequestGuildPrivPacket(const GDRequestGuildPrivPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GDRequestGuildPrivPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , decltype(_impl_.value_){}
    , decltype(_impl_.guild_id_){}
    , decltype(_impl_.duration_sec_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.duration_sec_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.duration_sec_));
  // @@protoc_insertion_point(copy_constructor:network.GDRequestGuildPrivPacket)
}

inline void GDRequestGuildPrivPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){0u}
    , decltype(_impl_.value_){0}
    , decltype(_impl_.guild_id_){0u}
    , decltype(_impl_.duration_sec_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GDRequestGuildPrivPacket::~GDRequestGuildPrivPacket() {
  // @@protoc_insertion_point(destructor:network.GDRequestGuildPrivPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GDRequestGuildPrivPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GDRequestGuildPrivPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GDRequestGuildPrivPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GDRequestGuildPrivPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.duration_sec_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.duration_sec_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GDRequestGuildPrivPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 guild_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 duration_sec = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.duration_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GDRequestGuildPrivPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GDRequestGuildPrivPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // int32 value = 2;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_value(), target);
  }

  // uint32 guild_id = 3;
  if (this->_internal_guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_guild_id(), target);
  }

  // uint32 duration_sec = 4;
  if (this->_internal_duration_sec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_duration_sec(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GDRequestGuildPrivPacket)
  return target;
}

size_t GDRequestGuildPrivPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GDRequestGuildPrivPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
  }

  // int32 value = 2;
  if (this->_internal_value() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_value());
  }

  // uint32 guild_id = 3;
  if (this->_internal_guild_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_guild_id());
  }

  // uint32 duration_sec = 4;
  if (this->_internal_duration_sec() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_duration_sec());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GDRequestGuildPrivPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GDRequestGuildPrivPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GDRequestGuildPrivPacket::GetClassData() const { return &_class_data_; }


void GDRequestGuildPrivPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GDRequestGuildPrivPacket*>(&to_msg);
  auto& from = static_cast<const GDRequestGuildPrivPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GDRequestGuildPrivPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_value() != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  if (from._internal_guild_id() != 0) {
    _this->_internal_set_guild_id(from._internal_guild_id());
  }
  if (from._internal_duration_sec() != 0) {
    _this->_internal_set_duration_sec(from._internal_duration_sec());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GDRequestGuildPrivPacket::CopyFrom(const GDRequestGuildPrivPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GDRequestGuildPrivPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GDRequestGuildPrivPacket::IsInitialized() const {
  return true;
}

void GDRequestGuildPrivPacket::InternalSwap(GDRequestGuildPrivPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GDRequestGuildPrivPacket, _impl_.duration_sec_)
      + sizeof(GDRequestGuildPrivPacket::_impl_.duration_sec_)
      - PROTOBUF_FIELD_OFFSET(GDRequestGuildPrivPacket, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GDRequestGuildPrivPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gd_5fpackets_2eproto_getter, &descriptor_table_gd_5fpackets_2eproto_once,
      file_level_metadata_gd_5fpackets_2eproto[40]);
}

// ===================================================================

class GDRequestEmpirePrivPacket::_Internal {
 public:
};

GDRequestEmpirePrivPacket::GDRequestEmpirePrivPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GDRequestEmpirePrivPacket)
}
GDRequestEmpirePrivPacket::GDRequestEmpirePrivPacket(const GDRequestEmpirePrivPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GDRequestEmpirePrivPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , decltype(_impl_.value_){}
    , decltype(_impl_.empire_){}
    , decltype(_impl_.duration_sec_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.duration_sec_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.duration_sec_));
  // @@protoc_insertion_point(copy_constructor:network.GDRequestEmpirePrivPacket)
}

inline void GDRequestEmpirePrivPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){0u}
    , decltype(_impl_.value_){0}
    , decltype(_impl_.empire_){0u}
    , decltype(_impl_.duration_sec_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GDRequestEmpirePrivPacket::~GDRequestEmpirePrivPacket() {
  // @@protoc_insertion_point(destructor:network.GDRequestEmpirePrivPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GDRequestEmpirePrivPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GDRequestEmpirePrivPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GDRequestEmpirePrivPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GDRequestEmpirePrivPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.duration_sec_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.duration_sec_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GDRequestEmpirePrivPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 empire = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.empire_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 duration_sec = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.duration_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GDRequestEmpirePrivPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GDRequestEmpirePrivPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // int32 value = 2;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_value(), target);
  }

  // uint32 empire = 3;
  if (this->_internal_empire() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_empire(), target);
  }

  // uint32 duration_sec = 4;
  if (this->_internal_duration_sec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_duration_sec(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GDRequestEmpirePrivPacket)
  return target;
}

size_t GDRequestEmpirePrivPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GDRequestEmpirePrivPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
  }

  // int32 value = 2;
  if (this->_internal_value() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_value());
  }

  // uint32 empire = 3;
  if (this->_internal_empire() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_empire());
  }

  // uint32 duration_sec = 4;
  if (this->_internal_duration_sec() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_duration_sec());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GDRequestEmpirePrivPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GDRequestEmpirePrivPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GDRequestEmpirePrivPacket::GetClassData() const { return &_class_data_; }


void GDRequestEmpirePrivPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GDRequestEmpirePrivPacket*>(&to_msg);
  auto& from = static_cast<const GDRequestEmpirePrivPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GDRequestEmpirePrivPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_value() != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  if (from._internal_empire() != 0) {
    _this->_internal_set_empire(from._internal_empire());
  }
  if (from._internal_duration_sec() != 0) {
    _this->_internal_set_duration_sec(from._internal_duration_sec());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GDRequestEmpirePrivPacket::CopyFrom(const GDRequestEmpirePrivPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GDRequestEmpirePrivPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GDRequestEmpirePrivPacket::IsInitialized() const {
  return true;
}

void GDRequestEmpirePrivPacket::InternalSwap(GDRequestEmpirePrivPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GDRequestEmpirePrivPacket, _impl_.duration_sec_)
      + sizeof(GDRequestEmpirePrivPacket::_impl_.duration_sec_)
      - PROTOBUF_FIELD_OFFSET(GDRequestEmpirePrivPacket, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GDRequestEmpirePrivPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gd_5fpackets_2eproto_getter, &descriptor_table_gd_5fpackets_2eproto_once,
      file_level_metadata_gd_5fpackets_2eproto[41]);
}

// ===================================================================

class GDRequestCharacterPrivPacket::_Internal {
 public:
};

GDRequestCharacterPrivPacket::GDRequestCharacterPrivPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GDRequestCharacterPrivPacket)
}
GDRequestCharacterPrivPacket::GDRequestCharacterPrivPacket(const GDRequestCharacterPrivPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GDRequestCharacterPrivPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , decltype(_impl_.value_){}
    , decltype(_impl_.pid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.pid_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.pid_));
  // @@protoc_insertion_point(copy_constructor:network.GDRequestCharacterPrivPacket)
}

inline void GDRequestCharacterPrivPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){0u}
    , decltype(_impl_.value_){0}
    , decltype(_impl_.pid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GDRequestCharacterPrivPacket::~GDRequestCharacterPrivPacket() {
  // @@protoc_insertion_point(destructor:network.GDRequestCharacterPrivPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GDRequestCharacterPrivPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GDRequestCharacterPrivPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GDRequestCharacterPrivPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GDRequestCharacterPrivPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.pid_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.pid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GDRequestCharacterPrivPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 pid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GDRequestCharacterPrivPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GDRequestCharacterPrivPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // int32 value = 2;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_value(), target);
  }

  // uint32 pid = 3;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_pid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GDRequestCharacterPrivPacket)
  return target;
}

size_t GDRequestCharacterPrivPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GDRequestCharacterPrivPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
  }

  // int32 value = 2;
  if (this->_internal_value() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_value());
  }

  // uint32 pid = 3;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GDRequestCharacterPrivPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GDRequestCharacterPrivPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GDRequestCharacterPrivPacket::GetClassData() const { return &_class_data_; }


void GDRequestCharacterPrivPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GDRequestCharacterPrivPacket*>(&to_msg);
  auto& from = static_cast<const GDRequestCharacterPrivPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GDRequestCharacterPrivPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_value() != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  if (from._internal_pid() != 0) {
    _this->_internal_set_pid(from._internal_pid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GDRequestCharacterPrivPacket::CopyFrom(const GDRequestCharacterPrivPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GDRequestCharacterPrivPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GDRequestCharacterPrivPacket::IsInitialized() const {
  return true;
}

void GDRequestCharacterPrivPacket::InternalSwap(GDRequestCharacterPrivPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GDRequestCharacterPrivPacket, _impl_.pid_)
      + sizeof(GDRequestCharacterPrivPacket::_impl_.pid_)
      - PROTOBUF_FIELD_OFFSET(GDRequestCharacterPrivPacket, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GDRequestCharacterPrivPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gd_5fpackets_2eproto_getter, &descriptor_table_gd_5fpackets_2eproto_once,
      file_level_metadata_gd_5fpackets_2eproto[42]);
}

// ===================================================================

class GDMoneyLogPacket::_Internal {
 public:
};

GDMoneyLogPacket::GDMoneyLogPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GDMoneyLogPacket)
}
GDMoneyLogPacket::GDMoneyLogPacket(const GDMoneyLogPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GDMoneyLogPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , decltype(_impl_.vnum_){}
    , decltype(_impl_.gold_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.gold_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.gold_));
  // @@protoc_insertion_point(copy_constructor:network.GDMoneyLogPacket)
}

inline void GDMoneyLogPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){0u}
    , decltype(_impl_.vnum_){0u}
    , decltype(_impl_.gold_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GDMoneyLogPacket::~GDMoneyLogPacket() {
  // @@protoc_insertion_point(destructor:network.GDMoneyLogPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GDMoneyLogPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GDMoneyLogPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GDMoneyLogPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GDMoneyLogPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.gold_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.gold_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GDMoneyLogPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 vnum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.vnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 gold = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GDMoneyLogPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GDMoneyLogPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // uint32 vnum = 2;
  if (this->_internal_vnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_vnum(), target);
  }

  // int64 gold = 3;
  if (this->_internal_gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_gold(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GDMoneyLogPacket)
  return target;
}

size_t GDMoneyLogPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GDMoneyLogPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
  }

  // uint32 vnum = 2;
  if (this->_internal_vnum() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_vnum());
  }

  // int64 gold = 3;
  if (this->_internal_gold() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_gold());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GDMoneyLogPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GDMoneyLogPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GDMoneyLogPacket::GetClassData() const { return &_class_data_; }


void GDMoneyLogPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GDMoneyLogPacket*>(&to_msg);
  auto& from = static_cast<const GDMoneyLogPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GDMoneyLogPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_vnum() != 0) {
    _this->_internal_set_vnum(from._internal_vnum());
  }
  if (from._internal_gold() != 0) {
    _this->_internal_set_gold(from._internal_gold());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GDMoneyLogPacket::CopyFrom(const GDMoneyLogPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GDMoneyLogPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GDMoneyLogPacket::IsInitialized() const {
  return true;
}

void GDMoneyLogPacket::InternalSwap(GDMoneyLogPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GDMoneyLogPacket, _impl_.gold_)
      + sizeof(GDMoneyLogPacket::_impl_.gold_)
      - PROTOBUF_FIELD_OFFSET(GDMoneyLogPacket, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GDMoneyLogPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gd_5fpackets_2eproto_getter, &descriptor_table_gd_5fpackets_2eproto_once,
      file_level_metadata_gd_5fpackets_2eproto[43]);
}

// ===================================================================

class GDSetEventFlagPacket::_Internal {
 public:
};

GDSetEventFlagPacket::GDSetEventFlagPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GDSetEventFlagPacket)
}
GDSetEventFlagPacket::GDSetEventFlagPacket(const GDSetEventFlagPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GDSetEventFlagPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.flag_name_){}
    , decltype(_impl_.value_){}
    , decltype(_impl_.is_add_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.flag_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.flag_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_flag_name().empty()) {
    _this->_impl_.flag_name_.Set(from._internal_flag_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.value_, &from._impl_.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_add_) -
    reinterpret_cast<char*>(&_impl_.value_)) + sizeof(_impl_.is_add_));
  // @@protoc_insertion_point(copy_constructor:network.GDSetEventFlagPacket)
}

inline void GDSetEventFlagPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.flag_name_){}
    , decltype(_impl_.value_){0}
    , decltype(_impl_.is_add_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.flag_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.flag_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GDSetEventFlagPacket::~GDSetEventFlagPacket() {
  // @@protoc_insertion_point(destructor:network.GDSetEventFlagPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GDSetEventFlagPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.flag_name_.Destroy();
}

void GDSetEventFlagPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GDSetEventFlagPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GDSetEventFlagPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.flag_name_.ClearToEmpty();
  ::memset(&_impl_.value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.is_add_) -
      reinterpret_cast<char*>(&_impl_.value_)) + sizeof(_impl_.is_add_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GDSetEventFlagPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes flag_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_flag_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_add = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.is_add_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GDSetEventFlagPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GDSetEventFlagPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes flag_name = 1;
  if (!this->_internal_flag_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_flag_name(), target);
  }

  // int32 value = 2;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_value(), target);
  }

  // bool is_add = 3;
  if (this->_internal_is_add() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_is_add(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GDSetEventFlagPacket)
  return target;
}

size_t GDSetEventFlagPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GDSetEventFlagPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes flag_name = 1;
  if (!this->_internal_flag_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_flag_name());
  }

  // int32 value = 2;
  if (this->_internal_value() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_value());
  }

  // bool is_add = 3;
  if (this->_internal_is_add() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GDSetEventFlagPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GDSetEventFlagPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GDSetEventFlagPacket::GetClassData() const { return &_class_data_; }


void GDSetEventFlagPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GDSetEventFlagPacket*>(&to_msg);
  auto& from = static_cast<const GDSetEventFlagPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GDSetEventFlagPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_flag_name().empty()) {
    _this->_internal_set_flag_name(from._internal_flag_name());
  }
  if (from._internal_value() != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  if (from._internal_is_add() != 0) {
    _this->_internal_set_is_add(from._internal_is_add());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GDSetEventFlagPacket::CopyFrom(const GDSetEventFlagPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GDSetEventFlagPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GDSetEventFlagPacket::IsInitialized() const {
  return true;
}

void GDSetEventFlagPacket::InternalSwap(GDSetEventFlagPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.flag_name_, lhs_arena,
      &other->_impl_.flag_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GDSetEventFlagPacket, _impl_.is_add_)
      + sizeof(GDSetEventFlagPacket::_impl_.is_add_)
      - PROTOBUF_FIELD_OFFSET(GDSetEventFlagPacket, _impl_.value_)>(
          reinterpret_cast<char*>(&_impl_.value_),
          reinterpret_cast<char*>(&other->_impl_.value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GDSetEventFlagPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gd_5fpackets_2eproto_getter, &descriptor_table_gd_5fpackets_2eproto_once,
      file_level_metadata_gd_5fpackets_2eproto[44]);
}

// ===================================================================

class GDCreateObjectPacket::_Internal {
 public:
};

GDCreateObjectPacket::GDCreateObjectPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GDCreateObjectPacket)
}
GDCreateObjectPacket::GDCreateObjectPacket(const GDCreateObjectPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GDCreateObjectPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.vnum_){}
    , decltype(_impl_.land_id_){}
    , decltype(_impl_.map_index_){}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.rot_x_){}
    , decltype(_impl_.rot_y_){}
    , decltype(_impl_.rot_z_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.vnum_, &from._impl_.vnum_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.rot_z_) -
    reinterpret_cast<char*>(&_impl_.vnum_)) + sizeof(_impl_.rot_z_));
  // @@protoc_insertion_point(copy_constructor:network.GDCreateObjectPacket)
}

inline void GDCreateObjectPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.vnum_){0u}
    , decltype(_impl_.land_id_){0u}
    , decltype(_impl_.map_index_){0u}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.rot_x_){0}
    , decltype(_impl_.rot_y_){0}
    , decltype(_impl_.rot_z_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GDCreateObjectPacket::~GDCreateObjectPacket() {
  // @@protoc_insertion_point(destructor:network.GDCreateObjectPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GDCreateObjectPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GDCreateObjectPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GDCreateObjectPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GDCreateObjectPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.vnum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.rot_z_) -
      reinterpret_cast<char*>(&_impl_.vnum_)) + sizeof(_impl_.rot_z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GDCreateObjectPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 vnum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.vnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 land_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.land_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 map_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.map_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 x = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 y = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float rot_x = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.rot_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float rot_y = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _impl_.rot_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float rot_z = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _impl_.rot_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GDCreateObjectPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GDCreateObjectPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 vnum = 1;
  if (this->_internal_vnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_vnum(), target);
  }

  // uint32 land_id = 2;
  if (this->_internal_land_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_land_id(), target);
  }

  // uint32 map_index = 3;
  if (this->_internal_map_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_map_index(), target);
  }

  // int32 x = 4;
  if (this->_internal_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_x(), target);
  }

  // int32 y = 5;
  if (this->_internal_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_y(), target);
  }

  // float rot_x = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rot_x = this->_internal_rot_x();
  uint32_t raw_rot_x;
  memcpy(&raw_rot_x, &tmp_rot_x, sizeof(tmp_rot_x));
  if (raw_rot_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_rot_x(), target);
  }

  // float rot_y = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rot_y = this->_internal_rot_y();
  uint32_t raw_rot_y;
  memcpy(&raw_rot_y, &tmp_rot_y, sizeof(tmp_rot_y));
  if (raw_rot_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_rot_y(), target);
  }

  // float rot_z = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rot_z = this->_internal_rot_z();
  uint32_t raw_rot_z;
  memcpy(&raw_rot_z, &tmp_rot_z, sizeof(tmp_rot_z));
  if (raw_rot_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_rot_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GDCreateObjectPacket)
  return target;
}

size_t GDCreateObjectPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GDCreateObjectPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 vnum = 1;
  if (this->_internal_vnum() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_vnum());
  }

  // uint32 land_id = 2;
  if (this->_internal_land_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_land_id());
  }

  // uint32 map_index = 3;
  if (this->_internal_map_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_map_index());
  }

  // int32 x = 4;
  if (this->_internal_x() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x());
  }

  // int32 y = 5;
  if (this->_internal_y() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y());
  }

  // float rot_x = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rot_x = this->_internal_rot_x();
  uint32_t raw_rot_x;
  memcpy(&raw_rot_x, &tmp_rot_x, sizeof(tmp_rot_x));
  if (raw_rot_x != 0) {
    total_size += 1 + 4;
  }

  // float rot_y = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rot_y = this->_internal_rot_y();
  uint32_t raw_rot_y;
  memcpy(&raw_rot_y, &tmp_rot_y, sizeof(tmp_rot_y));
  if (raw_rot_y != 0) {
    total_size += 1 + 4;
  }

  // float rot_z = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rot_z = this->_internal_rot_z();
  uint32_t raw_rot_z;
  memcpy(&raw_rot_z, &tmp_rot_z, sizeof(tmp_rot_z));
  if (raw_rot_z != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GDCreateObjectPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GDCreateObjectPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GDCreateObjectPacket::GetClassData() const { return &_class_data_; }


void GDCreateObjectPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GDCreateObjectPacket*>(&to_msg);
  auto& from = static_cast<const GDCreateObjectPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GDCreateObjectPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_vnum() != 0) {
    _this->_internal_set_vnum(from._internal_vnum());
  }
  if (from._internal_land_id() != 0) {
    _this->_internal_set_land_id(from._internal_land_id());
  }
  if (from._internal_map_index() != 0) {
    _this->_internal_set_map_index(from._internal_map_index());
  }
  if (from._internal_x() != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  if (from._internal_y() != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rot_x = from._internal_rot_x();
  uint32_t raw_rot_x;
  memcpy(&raw_rot_x, &tmp_rot_x, sizeof(tmp_rot_x));
  if (raw_rot_x != 0) {
    _this->_internal_set_rot_x(from._internal_rot_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rot_y = from._internal_rot_y();
  uint32_t raw_rot_y;
  memcpy(&raw_rot_y, &tmp_rot_y, sizeof(tmp_rot_y));
  if (raw_rot_y != 0) {
    _this->_internal_set_rot_y(from._internal_rot_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rot_z = from._internal_rot_z();
  uint32_t raw_rot_z;
  memcpy(&raw_rot_z, &tmp_rot_z, sizeof(tmp_rot_z));
  if (raw_rot_z != 0) {
    _this->_internal_set_rot_z(from._internal_rot_z());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GDCreateObjectPacket::CopyFrom(const GDCreateObjectPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GDCreateObjectPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GDCreateObjectPacket::IsInitialized() const {
  return true;
}

void GDCreateObjectPacket::InternalSwap(GDCreateObjectPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GDCreateObjectPacket, _impl_.rot_z_)
      + sizeof(GDCreateObjectPacket::_impl_.rot_z_)
      - PROTOBUF_FIELD_OFFSET(GDCreateObjectPacket, _impl_.vnum_)>(
          reinterpret_cast<char*>(&_impl_.vnum_),
          reinterpret_cast<char*>(&other->_impl_.vnum_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GDCreateObjectPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gd_5fpackets_2eproto_getter, &descriptor_table_gd_5fpackets_2eproto_once,
      file_level_metadata_gd_5fpackets_2eproto[45]);
}

// ===================================================================

class GDDeleteObjectPacket::_Internal {
 public:
};

GDDeleteObjectPacket::GDDeleteObjectPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GDDeleteObjectPacket)
}
GDDeleteObjectPacket::GDDeleteObjectPacket(const GDDeleteObjectPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GDDeleteObjectPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:network.GDDeleteObjectPacket)
}

inline void GDDeleteObjectPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GDDeleteObjectPacket::~GDDeleteObjectPacket() {
  // @@protoc_insertion_point(destructor:network.GDDeleteObjectPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GDDeleteObjectPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GDDeleteObjectPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GDDeleteObjectPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GDDeleteObjectPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GDDeleteObjectPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GDDeleteObjectPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GDDeleteObjectPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GDDeleteObjectPacket)
  return target;
}

size_t GDDeleteObjectPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GDDeleteObjectPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GDDeleteObjectPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GDDeleteObjectPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GDDeleteObjectPacket::GetClassData() const { return &_class_data_; }


void GDDeleteObjectPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GDDeleteObjectPacket*>(&to_msg);
  auto& from = static_cast<const GDDeleteObjectPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GDDeleteObjectPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GDDeleteObjectPacket::CopyFrom(const GDDeleteObjectPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GDDeleteObjectPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GDDeleteObjectPacket::IsInitialized() const {
  return true;
}

void GDDeleteObjectPacket::InternalSwap(GDDeleteObjectPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GDDeleteObjectPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gd_5fpackets_2eproto_getter, &descriptor_table_gd_5fpackets_2eproto_once,
      file_level_metadata_gd_5fpackets_2eproto[46]);
}

// ===================================================================

class GDUpdateLandPacket::_Internal {
 public:
};

GDUpdateLandPacket::GDUpdateLandPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GDUpdateLandPacket)
}
GDUpdateLandPacket::GDUpdateLandPacket(const GDUpdateLandPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GDUpdateLandPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.guild_id_){}
    , decltype(_impl_.land_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.guild_id_, &from._impl_.guild_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.land_id_) -
    reinterpret_cast<char*>(&_impl_.guild_id_)) + sizeof(_impl_.land_id_));
  // @@protoc_insertion_point(copy_constructor:network.GDUpdateLandPacket)
}

inline void GDUpdateLandPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.guild_id_){0u}
    , decltype(_impl_.land_id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GDUpdateLandPacket::~GDUpdateLandPacket() {
  // @@protoc_insertion_point(destructor:network.GDUpdateLandPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GDUpdateLandPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GDUpdateLandPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GDUpdateLandPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GDUpdateLandPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.guild_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.land_id_) -
      reinterpret_cast<char*>(&_impl_.guild_id_)) + sizeof(_impl_.land_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GDUpdateLandPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 guild_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 land_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.land_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GDUpdateLandPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GDUpdateLandPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 guild_id = 1;
  if (this->_internal_guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_guild_id(), target);
  }

  // uint32 land_id = 2;
  if (this->_internal_land_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_land_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GDUpdateLandPacket)
  return target;
}

size_t GDUpdateLandPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GDUpdateLandPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 guild_id = 1;
  if (this->_internal_guild_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_guild_id());
  }

  // uint32 land_id = 2;
  if (this->_internal_land_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_land_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GDUpdateLandPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GDUpdateLandPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GDUpdateLandPacket::GetClassData() const { return &_class_data_; }


void GDUpdateLandPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GDUpdateLandPacket*>(&to_msg);
  auto& from = static_cast<const GDUpdateLandPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GDUpdateLandPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_guild_id() != 0) {
    _this->_internal_set_guild_id(from._internal_guild_id());
  }
  if (from._internal_land_id() != 0) {
    _this->_internal_set_land_id(from._internal_land_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GDUpdateLandPacket::CopyFrom(const GDUpdateLandPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GDUpdateLandPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GDUpdateLandPacket::IsInitialized() const {
  return true;
}

void GDUpdateLandPacket::InternalSwap(GDUpdateLandPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GDUpdateLandPacket, _impl_.land_id_)
      + sizeof(GDUpdateLandPacket::_impl_.land_id_)
      - PROTOBUF_FIELD_OFFSET(GDUpdateLandPacket, _impl_.guild_id_)>(
          reinterpret_cast<char*>(&_impl_.guild_id_),
          reinterpret_cast<char*>(&other->_impl_.guild_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GDUpdateLandPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gd_5fpackets_2eproto_getter, &descriptor_table_gd_5fpackets_2eproto_once,
      file_level_metadata_gd_5fpackets_2eproto[47]);
}

// ===================================================================

class GDVCardPacket::_Internal {
 public:
};

GDVCardPacket::GDVCardPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GDVCardPacket)
}
GDVCardPacket::GDVCardPacket(const GDVCardPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GDVCardPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sell_character_){}
    , decltype(_impl_.sell_account_){}
    , decltype(_impl_.buy_character_){}
    , decltype(_impl_.buy_account_){}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sell_character_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sell_character_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sell_character().empty()) {
    _this->_impl_.sell_character_.Set(from._internal_sell_character(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sell_account_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sell_account_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sell_account().empty()) {
    _this->_impl_.sell_account_.Set(from._internal_sell_account(), 
      _this->GetArenaForAllocation());
  }
  _impl_.buy_character_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.buy_character_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_buy_character().empty()) {
    _this->_impl_.buy_character_.Set(from._internal_buy_character(), 
      _this->GetArenaForAllocation());
  }
  _impl_.buy_account_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.buy_account_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_buy_account().empty()) {
    _this->_impl_.buy_account_.Set(from._internal_buy_account(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:network.GDVCardPacket)
}

inline void GDVCardPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.sell_character_){}
    , decltype(_impl_.sell_account_){}
    , decltype(_impl_.buy_character_){}
    , decltype(_impl_.buy_account_){}
    , decltype(_impl_.id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.sell_character_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sell_character_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sell_account_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sell_account_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.buy_character_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.buy_character_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.buy_account_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.buy_account_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GDVCardPacket::~GDVCardPacket() {
  // @@protoc_insertion_point(destructor:network.GDVCardPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GDVCardPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sell_character_.Destroy();
  _impl_.sell_account_.Destroy();
  _impl_.buy_character_.Destroy();
  _impl_.buy_account_.Destroy();
}

void GDVCardPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GDVCardPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GDVCardPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sell_character_.ClearToEmpty();
  _impl_.sell_account_.ClearToEmpty();
  _impl_.buy_character_.ClearToEmpty();
  _impl_.buy_account_.ClearToEmpty();
  _impl_.id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GDVCardPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes sell_character = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_sell_character();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes sell_account = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_sell_account();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes buy_character = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_buy_character();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes buy_account = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_buy_account();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GDVCardPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GDVCardPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // bytes sell_character = 2;
  if (!this->_internal_sell_character().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_sell_character(), target);
  }

  // bytes sell_account = 3;
  if (!this->_internal_sell_account().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_sell_account(), target);
  }

  // bytes buy_character = 4;
  if (!this->_internal_buy_character().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_buy_character(), target);
  }

  // bytes buy_account = 5;
  if (!this->_internal_buy_account().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_buy_account(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GDVCardPacket)
  return target;
}

size_t GDVCardPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GDVCardPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes sell_character = 2;
  if (!this->_internal_sell_character().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sell_character());
  }

  // bytes sell_account = 3;
  if (!this->_internal_sell_account().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sell_account());
  }

  // bytes buy_character = 4;
  if (!this->_internal_buy_character().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_buy_character());
  }

  // bytes buy_account = 5;
  if (!this->_internal_buy_account().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_buy_account());
  }

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GDVCardPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GDVCardPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GDVCardPacket::GetClassData() const { return &_class_data_; }


void GDVCardPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GDVCardPacket*>(&to_msg);
  auto& from = static_cast<const GDVCardPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GDVCardPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sell_character().empty()) {
    _this->_internal_set_sell_character(from._internal_sell_character());
  }
  if (!from._internal_sell_account().empty()) {
    _this->_internal_set_sell_account(from._internal_sell_account());
  }
  if (!from._internal_buy_character().empty()) {
    _this->_internal_set_buy_character(from._internal_buy_character());
  }
  if (!from._internal_buy_account().empty()) {
    _this->_internal_set_buy_account(from._internal_buy_account());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GDVCardPacket::CopyFrom(const GDVCardPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GDVCardPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GDVCardPacket::IsInitialized() const {
  return true;
}

void GDVCardPacket::InternalSwap(GDVCardPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sell_character_, lhs_arena,
      &other->_impl_.sell_character_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sell_account_, lhs_arena,
      &other->_impl_.sell_account_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.buy_character_, lhs_arena,
      &other->_impl_.buy_character_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.buy_account_, lhs_arena,
      &other->_impl_.buy_account_, rhs_arena
  );
  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GDVCardPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gd_5fpackets_2eproto_getter, &descriptor_table_gd_5fpackets_2eproto_once,
      file_level_metadata_gd_5fpackets_2eproto[48]);
}

// ===================================================================

class GDBlockChatPacket::_Internal {
 public:
};

GDBlockChatPacket::GDBlockChatPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GDBlockChatPacket)
}
GDBlockChatPacket::GDBlockChatPacket(const GDBlockChatPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GDBlockChatPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.duration_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.duration_ = from._impl_.duration_;
  // @@protoc_insertion_point(copy_constructor:network.GDBlockChatPacket)
}

inline void GDBlockChatPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.duration_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GDBlockChatPacket::~GDBlockChatPacket() {
  // @@protoc_insertion_point(destructor:network.GDBlockChatPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GDBlockChatPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void GDBlockChatPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GDBlockChatPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GDBlockChatPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.duration_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GDBlockChatPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 duration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GDBlockChatPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GDBlockChatPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes name = 1;
  if (!this->_internal_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_name(), target);
  }

  // int32 duration = 2;
  if (this->_internal_duration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_duration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GDBlockChatPacket)
  return target;
}

size_t GDBlockChatPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GDBlockChatPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // int32 duration = 2;
  if (this->_internal_duration() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_duration());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GDBlockChatPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GDBlockChatPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GDBlockChatPacket::GetClassData() const { return &_class_data_; }


void GDBlockChatPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GDBlockChatPacket*>(&to_msg);
  auto& from = static_cast<const GDBlockChatPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GDBlockChatPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_duration() != 0) {
    _this->_internal_set_duration(from._internal_duration());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GDBlockChatPacket::CopyFrom(const GDBlockChatPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GDBlockChatPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GDBlockChatPacket::IsInitialized() const {
  return true;
}

void GDBlockChatPacket::InternalSwap(GDBlockChatPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.duration_, other->_impl_.duration_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GDBlockChatPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gd_5fpackets_2eproto_getter, &descriptor_table_gd_5fpackets_2eproto_once,
      file_level_metadata_gd_5fpackets_2eproto[49]);
}

// ===================================================================

class GDMyShopPricelistUpdatePacket::_Internal {
 public:
};

void GDMyShopPricelistUpdatePacket::clear_price_info() {
  _impl_.price_info_.Clear();
}
GDMyShopPricelistUpdatePacket::GDMyShopPricelistUpdatePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GDMyShopPricelistUpdatePacket)
}
GDMyShopPricelistUpdatePacket::GDMyShopPricelistUpdatePacket(const GDMyShopPricelistUpdatePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GDMyShopPricelistUpdatePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.price_info_){from._impl_.price_info_}
    , decltype(_impl_.owner_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.owner_id_ = from._impl_.owner_id_;
  // @@protoc_insertion_point(copy_constructor:network.GDMyShopPricelistUpdatePacket)
}

inline void GDMyShopPricelistUpdatePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.price_info_){arena}
    , decltype(_impl_.owner_id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GDMyShopPricelistUpdatePacket::~GDMyShopPricelistUpdatePacket() {
  // @@protoc_insertion_point(destructor:network.GDMyShopPricelistUpdatePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GDMyShopPricelistUpdatePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.price_info_.~RepeatedPtrField();
}

void GDMyShopPricelistUpdatePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GDMyShopPricelistUpdatePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GDMyShopPricelistUpdatePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.price_info_.Clear();
  _impl_.owner_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GDMyShopPricelistUpdatePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 owner_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.owner_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .network.TItemPriceInfo price_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_price_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GDMyShopPricelistUpdatePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GDMyShopPricelistUpdatePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 owner_id = 1;
  if (this->_internal_owner_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_owner_id(), target);
  }

  // repeated .network.TItemPriceInfo price_info = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_price_info_size()); i < n; i++) {
    const auto& repfield = this->_internal_price_info(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GDMyShopPricelistUpdatePacket)
  return target;
}

size_t GDMyShopPricelistUpdatePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GDMyShopPricelistUpdatePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .network.TItemPriceInfo price_info = 2;
  total_size += 1UL * this->_internal_price_info_size();
  for (const auto& msg : this->_impl_.price_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 owner_id = 1;
  if (this->_internal_owner_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_owner_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GDMyShopPricelistUpdatePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GDMyShopPricelistUpdatePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GDMyShopPricelistUpdatePacket::GetClassData() const { return &_class_data_; }


void GDMyShopPricelistUpdatePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GDMyShopPricelistUpdatePacket*>(&to_msg);
  auto& from = static_cast<const GDMyShopPricelistUpdatePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GDMyShopPricelistUpdatePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.price_info_.MergeFrom(from._impl_.price_info_);
  if (from._internal_owner_id() != 0) {
    _this->_internal_set_owner_id(from._internal_owner_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GDMyShopPricelistUpdatePacket::CopyFrom(const GDMyShopPricelistUpdatePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GDMyShopPricelistUpdatePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GDMyShopPricelistUpdatePacket::IsInitialized() const {
  return true;
}

void GDMyShopPricelistUpdatePacket::InternalSwap(GDMyShopPricelistUpdatePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.price_info_.InternalSwap(&other->_impl_.price_info_);
  swap(_impl_.owner_id_, other->_impl_.owner_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GDMyShopPricelistUpdatePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gd_5fpackets_2eproto_getter, &descriptor_table_gd_5fpackets_2eproto_once,
      file_level_metadata_gd_5fpackets_2eproto[50]);
}

// ===================================================================

class GDMyShopPricelistRequestPacket::_Internal {
 public:
};

GDMyShopPricelistRequestPacket::GDMyShopPricelistRequestPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GDMyShopPricelistRequestPacket)
}
GDMyShopPricelistRequestPacket::GDMyShopPricelistRequestPacket(const GDMyShopPricelistRequestPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GDMyShopPricelistRequestPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.pid_ = from._impl_.pid_;
  // @@protoc_insertion_point(copy_constructor:network.GDMyShopPricelistRequestPacket)
}

inline void GDMyShopPricelistRequestPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GDMyShopPricelistRequestPacket::~GDMyShopPricelistRequestPacket() {
  // @@protoc_insertion_point(destructor:network.GDMyShopPricelistRequestPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GDMyShopPricelistRequestPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GDMyShopPricelistRequestPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GDMyShopPricelistRequestPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GDMyShopPricelistRequestPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GDMyShopPricelistRequestPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GDMyShopPricelistRequestPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GDMyShopPricelistRequestPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GDMyShopPricelistRequestPacket)
  return target;
}

size_t GDMyShopPricelistRequestPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GDMyShopPricelistRequestPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GDMyShopPricelistRequestPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GDMyShopPricelistRequestPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GDMyShopPricelistRequestPacket::GetClassData() const { return &_class_data_; }


void GDMyShopPricelistRequestPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GDMyShopPricelistRequestPacket*>(&to_msg);
  auto& from = static_cast<const GDMyShopPricelistRequestPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GDMyShopPricelistRequestPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_pid() != 0) {
    _this->_internal_set_pid(from._internal_pid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GDMyShopPricelistRequestPacket::CopyFrom(const GDMyShopPricelistRequestPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GDMyShopPricelistRequestPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GDMyShopPricelistRequestPacket::IsInitialized() const {
  return true;
}

void GDMyShopPricelistRequestPacket::InternalSwap(GDMyShopPricelistRequestPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.pid_, other->_impl_.pid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GDMyShopPricelistRequestPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gd_5fpackets_2eproto_getter, &descriptor_table_gd_5fpackets_2eproto_once,
      file_level_metadata_gd_5fpackets_2eproto[51]);
}

// ===================================================================

class GDUpdateHorseNamePacket::_Internal {
 public:
};

GDUpdateHorseNamePacket::GDUpdateHorseNamePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GDUpdateHorseNamePacket)
}
GDUpdateHorseNamePacket::GDUpdateHorseNamePacket(const GDUpdateHorseNamePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GDUpdateHorseNamePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.horse_name_){}
    , decltype(_impl_.pid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.horse_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.horse_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_horse_name().empty()) {
    _this->_impl_.horse_name_.Set(from._internal_horse_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.pid_ = from._impl_.pid_;
  // @@protoc_insertion_point(copy_constructor:network.GDUpdateHorseNamePacket)
}

inline void GDUpdateHorseNamePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.horse_name_){}
    , decltype(_impl_.pid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.horse_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.horse_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GDUpdateHorseNamePacket::~GDUpdateHorseNamePacket() {
  // @@protoc_insertion_point(destructor:network.GDUpdateHorseNamePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GDUpdateHorseNamePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.horse_name_.Destroy();
}

void GDUpdateHorseNamePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GDUpdateHorseNamePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GDUpdateHorseNamePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.horse_name_.ClearToEmpty();
  _impl_.pid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GDUpdateHorseNamePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes horse_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_horse_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GDUpdateHorseNamePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GDUpdateHorseNamePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pid(), target);
  }

  // bytes horse_name = 2;
  if (!this->_internal_horse_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_horse_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GDUpdateHorseNamePacket)
  return target;
}

size_t GDUpdateHorseNamePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GDUpdateHorseNamePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes horse_name = 2;
  if (!this->_internal_horse_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_horse_name());
  }

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GDUpdateHorseNamePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GDUpdateHorseNamePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GDUpdateHorseNamePacket::GetClassData() const { return &_class_data_; }


void GDUpdateHorseNamePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GDUpdateHorseNamePacket*>(&to_msg);
  auto& from = static_cast<const GDUpdateHorseNamePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GDUpdateHorseNamePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_horse_name().empty()) {
    _this->_internal_set_horse_name(from._internal_horse_name());
  }
  if (from._internal_pid() != 0) {
    _this->_internal_set_pid(from._internal_pid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GDUpdateHorseNamePacket::CopyFrom(const GDUpdateHorseNamePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GDUpdateHorseNamePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GDUpdateHorseNamePacket::IsInitialized() const {
  return true;
}

void GDUpdateHorseNamePacket::InternalSwap(GDUpdateHorseNamePacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.horse_name_, lhs_arena,
      &other->_impl_.horse_name_, rhs_arena
  );
  swap(_impl_.pid_, other->_impl_.pid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GDUpdateHorseNamePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gd_5fpackets_2eproto_getter, &descriptor_table_gd_5fpackets_2eproto_once,
      file_level_metadata_gd_5fpackets_2eproto[52]);
}

// ===================================================================

class GDRequestChargeCashPacket::_Internal {
 public:
};

GDRequestChargeCashPacket::GDRequestChargeCashPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GDRequestChargeCashPacket)
}
GDRequestChargeCashPacket::GDRequestChargeCashPacket(const GDRequestChargeCashPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GDRequestChargeCashPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.account_id_){}
    , decltype(_impl_.amount_){}
    , decltype(_impl_.charge_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.account_id_, &from._impl_.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.charge_type_) -
    reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.charge_type_));
  // @@protoc_insertion_point(copy_constructor:network.GDRequestChargeCashPacket)
}

inline void GDRequestChargeCashPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.account_id_){0u}
    , decltype(_impl_.amount_){0u}
    , decltype(_impl_.charge_type_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GDRequestChargeCashPacket::~GDRequestChargeCashPacket() {
  // @@protoc_insertion_point(destructor:network.GDRequestChargeCashPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GDRequestChargeCashPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GDRequestChargeCashPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GDRequestChargeCashPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GDRequestChargeCashPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.account_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.charge_type_) -
      reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.charge_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GDRequestChargeCashPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 amount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 charge_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.charge_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GDRequestChargeCashPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GDRequestChargeCashPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 account_id = 1;
  if (this->_internal_account_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // uint32 amount = 2;
  if (this->_internal_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_amount(), target);
  }

  // uint32 charge_type = 3;
  if (this->_internal_charge_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_charge_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GDRequestChargeCashPacket)
  return target;
}

size_t GDRequestChargeCashPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GDRequestChargeCashPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 account_id = 1;
  if (this->_internal_account_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
  }

  // uint32 amount = 2;
  if (this->_internal_amount() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_amount());
  }

  // uint32 charge_type = 3;
  if (this->_internal_charge_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_charge_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GDRequestChargeCashPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GDRequestChargeCashPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GDRequestChargeCashPacket::GetClassData() const { return &_class_data_; }


void GDRequestChargeCashPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GDRequestChargeCashPacket*>(&to_msg);
  auto& from = static_cast<const GDRequestChargeCashPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GDRequestChargeCashPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_account_id() != 0) {
    _this->_internal_set_account_id(from._internal_account_id());
  }
  if (from._internal_amount() != 0) {
    _this->_internal_set_amount(from._internal_amount());
  }
  if (from._internal_charge_type() != 0) {
    _this->_internal_set_charge_type(from._internal_charge_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GDRequestChargeCashPacket::CopyFrom(const GDRequestChargeCashPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GDRequestChargeCashPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GDRequestChargeCashPacket::IsInitialized() const {
  return true;
}

void GDRequestChargeCashPacket::InternalSwap(GDRequestChargeCashPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GDRequestChargeCashPacket, _impl_.charge_type_)
      + sizeof(GDRequestChargeCashPacket::_impl_.charge_type_)
      - PROTOBUF_FIELD_OFFSET(GDRequestChargeCashPacket, _impl_.account_id_)>(
          reinterpret_cast<char*>(&_impl_.account_id_),
          reinterpret_cast<char*>(&other->_impl_.account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GDRequestChargeCashPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gd_5fpackets_2eproto_getter, &descriptor_table_gd_5fpackets_2eproto_once,
      file_level_metadata_gd_5fpackets_2eproto[53]);
}

// ===================================================================

class GDDeleteAwardIDPacket::_Internal {
 public:
};

GDDeleteAwardIDPacket::GDDeleteAwardIDPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GDDeleteAwardIDPacket)
}
GDDeleteAwardIDPacket::GDDeleteAwardIDPacket(const GDDeleteAwardIDPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GDDeleteAwardIDPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:network.GDDeleteAwardIDPacket)
}

inline void GDDeleteAwardIDPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GDDeleteAwardIDPacket::~GDDeleteAwardIDPacket() {
  // @@protoc_insertion_point(destructor:network.GDDeleteAwardIDPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GDDeleteAwardIDPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GDDeleteAwardIDPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GDDeleteAwardIDPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GDDeleteAwardIDPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GDDeleteAwardIDPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GDDeleteAwardIDPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GDDeleteAwardIDPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GDDeleteAwardIDPacket)
  return target;
}

size_t GDDeleteAwardIDPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GDDeleteAwardIDPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GDDeleteAwardIDPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GDDeleteAwardIDPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GDDeleteAwardIDPacket::GetClassData() const { return &_class_data_; }


void GDDeleteAwardIDPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GDDeleteAwardIDPacket*>(&to_msg);
  auto& from = static_cast<const GDDeleteAwardIDPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GDDeleteAwardIDPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GDDeleteAwardIDPacket::CopyFrom(const GDDeleteAwardIDPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GDDeleteAwardIDPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GDDeleteAwardIDPacket::IsInitialized() const {
  return true;
}

void GDDeleteAwardIDPacket::InternalSwap(GDDeleteAwardIDPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GDDeleteAwardIDPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gd_5fpackets_2eproto_getter, &descriptor_table_gd_5fpackets_2eproto_once,
      file_level_metadata_gd_5fpackets_2eproto[54]);
}

// ===================================================================

class GDChannelSwitchPacket::_Internal {
 public:
};

GDChannelSwitchPacket::GDChannelSwitchPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GDChannelSwitchPacket)
}
GDChannelSwitchPacket::GDChannelSwitchPacket(const GDChannelSwitchPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GDChannelSwitchPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.channel_){}
    , decltype(_impl_.map_index_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.channel_, &from._impl_.channel_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.map_index_) -
    reinterpret_cast<char*>(&_impl_.channel_)) + sizeof(_impl_.map_index_));
  // @@protoc_insertion_point(copy_constructor:network.GDChannelSwitchPacket)
}

inline void GDChannelSwitchPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.channel_){0u}
    , decltype(_impl_.map_index_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GDChannelSwitchPacket::~GDChannelSwitchPacket() {
  // @@protoc_insertion_point(destructor:network.GDChannelSwitchPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GDChannelSwitchPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GDChannelSwitchPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GDChannelSwitchPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GDChannelSwitchPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.channel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.map_index_) -
      reinterpret_cast<char*>(&_impl_.channel_)) + sizeof(_impl_.map_index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GDChannelSwitchPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 channel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 map_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.map_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GDChannelSwitchPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GDChannelSwitchPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 channel = 1;
  if (this->_internal_channel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_channel(), target);
  }

  // uint32 map_index = 2;
  if (this->_internal_map_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_map_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GDChannelSwitchPacket)
  return target;
}

size_t GDChannelSwitchPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GDChannelSwitchPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 channel = 1;
  if (this->_internal_channel() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel());
  }

  // uint32 map_index = 2;
  if (this->_internal_map_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_map_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GDChannelSwitchPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GDChannelSwitchPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GDChannelSwitchPacket::GetClassData() const { return &_class_data_; }


void GDChannelSwitchPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GDChannelSwitchPacket*>(&to_msg);
  auto& from = static_cast<const GDChannelSwitchPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GDChannelSwitchPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_channel() != 0) {
    _this->_internal_set_channel(from._internal_channel());
  }
  if (from._internal_map_index() != 0) {
    _this->_internal_set_map_index(from._internal_map_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GDChannelSwitchPacket::CopyFrom(const GDChannelSwitchPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GDChannelSwitchPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GDChannelSwitchPacket::IsInitialized() const {
  return true;
}

void GDChannelSwitchPacket::InternalSwap(GDChannelSwitchPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GDChannelSwitchPacket, _impl_.map_index_)
      + sizeof(GDChannelSwitchPacket::_impl_.map_index_)
      - PROTOBUF_FIELD_OFFSET(GDChannelSwitchPacket, _impl_.channel_)>(
          reinterpret_cast<char*>(&_impl_.channel_),
          reinterpret_cast<char*>(&other->_impl_.channel_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GDChannelSwitchPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gd_5fpackets_2eproto_getter, &descriptor_table_gd_5fpackets_2eproto_once,
      file_level_metadata_gd_5fpackets_2eproto[55]);
}

// ===================================================================

class GDSpawnMobTimedPacket::_Internal {
 public:
};

GDSpawnMobTimedPacket::GDSpawnMobTimedPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GDSpawnMobTimedPacket)
}
GDSpawnMobTimedPacket::GDSpawnMobTimedPacket(const GDSpawnMobTimedPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GDSpawnMobTimedPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.mob_vnum_){}
    , decltype(_impl_.map_index_){}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.channel_){}
    , decltype(_impl_.target_time_){}
    , decltype(_impl_.despawn_time_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.mob_vnum_, &from._impl_.mob_vnum_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.despawn_time_) -
    reinterpret_cast<char*>(&_impl_.mob_vnum_)) + sizeof(_impl_.despawn_time_));
  // @@protoc_insertion_point(copy_constructor:network.GDSpawnMobTimedPacket)
}

inline void GDSpawnMobTimedPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.mob_vnum_){0u}
    , decltype(_impl_.map_index_){0u}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.channel_){0u}
    , decltype(_impl_.target_time_){0}
    , decltype(_impl_.despawn_time_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GDSpawnMobTimedPacket::~GDSpawnMobTimedPacket() {
  // @@protoc_insertion_point(destructor:network.GDSpawnMobTimedPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GDSpawnMobTimedPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GDSpawnMobTimedPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GDSpawnMobTimedPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GDSpawnMobTimedPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.mob_vnum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.despawn_time_) -
      reinterpret_cast<char*>(&_impl_.mob_vnum_)) + sizeof(_impl_.despawn_time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GDSpawnMobTimedPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 mob_vnum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.mob_vnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 map_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.map_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 x = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 y = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 channel = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 target_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.target_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 despawn_time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.despawn_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GDSpawnMobTimedPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GDSpawnMobTimedPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 mob_vnum = 1;
  if (this->_internal_mob_vnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_mob_vnum(), target);
  }

  // uint32 map_index = 2;
  if (this->_internal_map_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_map_index(), target);
  }

  // int32 x = 3;
  if (this->_internal_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_x(), target);
  }

  // int32 y = 4;
  if (this->_internal_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_y(), target);
  }

  // uint32 channel = 5;
  if (this->_internal_channel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_channel(), target);
  }

  // int32 target_time = 6;
  if (this->_internal_target_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_target_time(), target);
  }

  // int32 despawn_time = 7;
  if (this->_internal_despawn_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_despawn_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GDSpawnMobTimedPacket)
  return target;
}

size_t GDSpawnMobTimedPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GDSpawnMobTimedPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 mob_vnum = 1;
  if (this->_internal_mob_vnum() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_mob_vnum());
  }

  // uint32 map_index = 2;
  if (this->_internal_map_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_map_index());
  }

  // int32 x = 3;
  if (this->_internal_x() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x());
  }

  // int32 y = 4;
  if (this->_internal_y() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y());
  }

  // uint32 channel = 5;
  if (this->_internal_channel() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel());
  }

  // int32 target_time = 6;
  if (this->_internal_target_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_target_time());
  }

  // int32 despawn_time = 7;
  if (this->_internal_despawn_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_despawn_time());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GDSpawnMobTimedPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GDSpawnMobTimedPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GDSpawnMobTimedPacket::GetClassData() const { return &_class_data_; }


void GDSpawnMobTimedPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GDSpawnMobTimedPacket*>(&to_msg);
  auto& from = static_cast<const GDSpawnMobTimedPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GDSpawnMobTimedPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_mob_vnum() != 0) {
    _this->_internal_set_mob_vnum(from._internal_mob_vnum());
  }
  if (from._internal_map_index() != 0) {
    _this->_internal_set_map_index(from._internal_map_index());
  }
  if (from._internal_x() != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  if (from._internal_y() != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  if (from._internal_channel() != 0) {
    _this->_internal_set_channel(from._internal_channel());
  }
  if (from._internal_target_time() != 0) {
    _this->_internal_set_target_time(from._internal_target_time());
  }
  if (from._internal_despawn_time() != 0) {
    _this->_internal_set_despawn_time(from._internal_despawn_time());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GDSpawnMobTimedPacket::CopyFrom(const GDSpawnMobTimedPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GDSpawnMobTimedPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GDSpawnMobTimedPacket::IsInitialized() const {
  return true;
}

void GDSpawnMobTimedPacket::InternalSwap(GDSpawnMobTimedPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GDSpawnMobTimedPacket, _impl_.despawn_time_)
      + sizeof(GDSpawnMobTimedPacket::_impl_.despawn_time_)
      - PROTOBUF_FIELD_OFFSET(GDSpawnMobTimedPacket, _impl_.mob_vnum_)>(
          reinterpret_cast<char*>(&_impl_.mob_vnum_),
          reinterpret_cast<char*>(&other->_impl_.mob_vnum_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GDSpawnMobTimedPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gd_5fpackets_2eproto_getter, &descriptor_table_gd_5fpackets_2eproto_once,
      file_level_metadata_gd_5fpackets_2eproto[56]);
}

// ===================================================================

class GDForceItemDeletePacket::_Internal {
 public:
};

GDForceItemDeletePacket::GDForceItemDeletePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GDForceItemDeletePacket)
}
GDForceItemDeletePacket::GDForceItemDeletePacket(const GDForceItemDeletePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GDForceItemDeletePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:network.GDForceItemDeletePacket)
}

inline void GDForceItemDeletePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GDForceItemDeletePacket::~GDForceItemDeletePacket() {
  // @@protoc_insertion_point(destructor:network.GDForceItemDeletePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GDForceItemDeletePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GDForceItemDeletePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GDForceItemDeletePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GDForceItemDeletePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GDForceItemDeletePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GDForceItemDeletePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GDForceItemDeletePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GDForceItemDeletePacket)
  return target;
}

size_t GDForceItemDeletePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GDForceItemDeletePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GDForceItemDeletePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GDForceItemDeletePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GDForceItemDeletePacket::GetClassData() const { return &_class_data_; }


void GDForceItemDeletePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GDForceItemDeletePacket*>(&to_msg);
  auto& from = static_cast<const GDForceItemDeletePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GDForceItemDeletePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GDForceItemDeletePacket::CopyFrom(const GDForceItemDeletePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GDForceItemDeletePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GDForceItemDeletePacket::IsInitialized() const {
  return true;
}

void GDForceItemDeletePacket::InternalSwap(GDForceItemDeletePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GDForceItemDeletePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gd_5fpackets_2eproto_getter, &descriptor_table_gd_5fpackets_2eproto_once,
      file_level_metadata_gd_5fpackets_2eproto[57]);
}

// ===================================================================

class GDCombatZoneSkillsCachePacket::_Internal {
 public:
};

GDCombatZoneSkillsCachePacket::GDCombatZoneSkillsCachePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GDCombatZoneSkillsCachePacket)
}
GDCombatZoneSkillsCachePacket::GDCombatZoneSkillsCachePacket(const GDCombatZoneSkillsCachePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GDCombatZoneSkillsCachePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pid_){}
    , decltype(_impl_.skill_level1_){}
    , decltype(_impl_.skill_level2_){}
    , decltype(_impl_.skill_level3_){}
    , decltype(_impl_.skill_level4_){}
    , decltype(_impl_.skill_level5_){}
    , decltype(_impl_.skill_level6_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.pid_, &from._impl_.pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.skill_level6_) -
    reinterpret_cast<char*>(&_impl_.pid_)) + sizeof(_impl_.skill_level6_));
  // @@protoc_insertion_point(copy_constructor:network.GDCombatZoneSkillsCachePacket)
}

inline void GDCombatZoneSkillsCachePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pid_){0u}
    , decltype(_impl_.skill_level1_){0u}
    , decltype(_impl_.skill_level2_){0u}
    , decltype(_impl_.skill_level3_){0u}
    , decltype(_impl_.skill_level4_){0u}
    , decltype(_impl_.skill_level5_){0u}
    , decltype(_impl_.skill_level6_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GDCombatZoneSkillsCachePacket::~GDCombatZoneSkillsCachePacket() {
  // @@protoc_insertion_point(destructor:network.GDCombatZoneSkillsCachePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GDCombatZoneSkillsCachePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GDCombatZoneSkillsCachePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GDCombatZoneSkillsCachePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GDCombatZoneSkillsCachePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.pid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.skill_level6_) -
      reinterpret_cast<char*>(&_impl_.pid_)) + sizeof(_impl_.skill_level6_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GDCombatZoneSkillsCachePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 skill_level1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.skill_level1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 skill_level2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.skill_level2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 skill_level3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.skill_level3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 skill_level4 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.skill_level4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 skill_level5 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.skill_level5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 skill_level6 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.skill_level6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GDCombatZoneSkillsCachePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GDCombatZoneSkillsCachePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pid(), target);
  }

  // uint32 skill_level1 = 2;
  if (this->_internal_skill_level1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_skill_level1(), target);
  }

  // uint32 skill_level2 = 3;
  if (this->_internal_skill_level2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_skill_level2(), target);
  }

  // uint32 skill_level3 = 4;
  if (this->_internal_skill_level3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_skill_level3(), target);
  }

  // uint32 skill_level4 = 5;
  if (this->_internal_skill_level4() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_skill_level4(), target);
  }

  // uint32 skill_level5 = 6;
  if (this->_internal_skill_level5() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_skill_level5(), target);
  }

  // uint32 skill_level6 = 7;
  if (this->_internal_skill_level6() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_skill_level6(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GDCombatZoneSkillsCachePacket)
  return target;
}

size_t GDCombatZoneSkillsCachePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GDCombatZoneSkillsCachePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid());
  }

  // uint32 skill_level1 = 2;
  if (this->_internal_skill_level1() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_skill_level1());
  }

  // uint32 skill_level2 = 3;
  if (this->_internal_skill_level2() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_skill_level2());
  }

  // uint32 skill_level3 = 4;
  if (this->_internal_skill_level3() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_skill_level3());
  }

  // uint32 skill_level4 = 5;
  if (this->_internal_skill_level4() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_skill_level4());
  }

  // uint32 skill_level5 = 6;
  if (this->_internal_skill_level5() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_skill_level5());
  }

  // uint32 skill_level6 = 7;
  if (this->_internal_skill_level6() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_skill_level6());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GDCombatZoneSkillsCachePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GDCombatZoneSkillsCachePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GDCombatZoneSkillsCachePacket::GetClassData() const { return &_class_data_; }


void GDCombatZoneSkillsCachePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GDCombatZoneSkillsCachePacket*>(&to_msg);
  auto& from = static_cast<const GDCombatZoneSkillsCachePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GDCombatZoneSkillsCachePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_pid() != 0) {
    _this->_internal_set_pid(from._internal_pid());
  }
  if (from._internal_skill_level1() != 0) {
    _this->_internal_set_skill_level1(from._internal_skill_level1());
  }
  if (from._internal_skill_level2() != 0) {
    _this->_internal_set_skill_level2(from._internal_skill_level2());
  }
  if (from._internal_skill_level3() != 0) {
    _this->_internal_set_skill_level3(from._internal_skill_level3());
  }
  if (from._internal_skill_level4() != 0) {
    _this->_internal_set_skill_level4(from._internal_skill_level4());
  }
  if (from._internal_skill_level5() != 0) {
    _this->_internal_set_skill_level5(from._internal_skill_level5());
  }
  if (from._internal_skill_level6() != 0) {
    _this->_internal_set_skill_level6(from._internal_skill_level6());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GDCombatZoneSkillsCachePacket::CopyFrom(const GDCombatZoneSkillsCachePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GDCombatZoneSkillsCachePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GDCombatZoneSkillsCachePacket::IsInitialized() const {
  return true;
}

void GDCombatZoneSkillsCachePacket::InternalSwap(GDCombatZoneSkillsCachePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GDCombatZoneSkillsCachePacket, _impl_.skill_level6_)
      + sizeof(GDCombatZoneSkillsCachePacket::_impl_.skill_level6_)
      - PROTOBUF_FIELD_OFFSET(GDCombatZoneSkillsCachePacket, _impl_.pid_)>(
          reinterpret_cast<char*>(&_impl_.pid_),
          reinterpret_cast<char*>(&other->_impl_.pid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GDCombatZoneSkillsCachePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gd_5fpackets_2eproto_getter, &descriptor_table_gd_5fpackets_2eproto_once,
      file_level_metadata_gd_5fpackets_2eproto[58]);
}

// ===================================================================

class GDWhisperPlayerExistCheckPacket::_Internal {
 public:
};

GDWhisperPlayerExistCheckPacket::GDWhisperPlayerExistCheckPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GDWhisperPlayerExistCheckPacket)
}
GDWhisperPlayerExistCheckPacket::GDWhisperPlayerExistCheckPacket(const GDWhisperPlayerExistCheckPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GDWhisperPlayerExistCheckPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.target_name_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.pid_){}
    , decltype(_impl_.is_gm_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.target_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.target_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_target_name().empty()) {
    _this->_impl_.target_name_.Set(from._internal_target_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.pid_, &from._impl_.pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_gm_) -
    reinterpret_cast<char*>(&_impl_.pid_)) + sizeof(_impl_.is_gm_));
  // @@protoc_insertion_point(copy_constructor:network.GDWhisperPlayerExistCheckPacket)
}

inline void GDWhisperPlayerExistCheckPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.target_name_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.pid_){0u}
    , decltype(_impl_.is_gm_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.target_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.target_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GDWhisperPlayerExistCheckPacket::~GDWhisperPlayerExistCheckPacket() {
  // @@protoc_insertion_point(destructor:network.GDWhisperPlayerExistCheckPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GDWhisperPlayerExistCheckPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.target_name_.Destroy();
  _impl_.message_.Destroy();
}

void GDWhisperPlayerExistCheckPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GDWhisperPlayerExistCheckPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GDWhisperPlayerExistCheckPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.target_name_.ClearToEmpty();
  _impl_.message_.ClearToEmpty();
  ::memset(&_impl_.pid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.is_gm_) -
      reinterpret_cast<char*>(&_impl_.pid_)) + sizeof(_impl_.is_gm_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GDWhisperPlayerExistCheckPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_gm = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.is_gm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes target_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_target_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes message = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GDWhisperPlayerExistCheckPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GDWhisperPlayerExistCheckPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pid(), target);
  }

  // bool is_gm = 2;
  if (this->_internal_is_gm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_is_gm(), target);
  }

  // bytes target_name = 3;
  if (!this->_internal_target_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_target_name(), target);
  }

  // bytes message = 4;
  if (!this->_internal_message().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GDWhisperPlayerExistCheckPacket)
  return target;
}

size_t GDWhisperPlayerExistCheckPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GDWhisperPlayerExistCheckPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes target_name = 3;
  if (!this->_internal_target_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_target_name());
  }

  // bytes message = 4;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_message());
  }

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid());
  }

  // bool is_gm = 2;
  if (this->_internal_is_gm() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GDWhisperPlayerExistCheckPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GDWhisperPlayerExistCheckPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GDWhisperPlayerExistCheckPacket::GetClassData() const { return &_class_data_; }


void GDWhisperPlayerExistCheckPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GDWhisperPlayerExistCheckPacket*>(&to_msg);
  auto& from = static_cast<const GDWhisperPlayerExistCheckPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GDWhisperPlayerExistCheckPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_target_name().empty()) {
    _this->_internal_set_target_name(from._internal_target_name());
  }
  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_pid() != 0) {
    _this->_internal_set_pid(from._internal_pid());
  }
  if (from._internal_is_gm() != 0) {
    _this->_internal_set_is_gm(from._internal_is_gm());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GDWhisperPlayerExistCheckPacket::CopyFrom(const GDWhisperPlayerExistCheckPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GDWhisperPlayerExistCheckPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GDWhisperPlayerExistCheckPacket::IsInitialized() const {
  return true;
}

void GDWhisperPlayerExistCheckPacket::InternalSwap(GDWhisperPlayerExistCheckPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.target_name_, lhs_arena,
      &other->_impl_.target_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GDWhisperPlayerExistCheckPacket, _impl_.is_gm_)
      + sizeof(GDWhisperPlayerExistCheckPacket::_impl_.is_gm_)
      - PROTOBUF_FIELD_OFFSET(GDWhisperPlayerExistCheckPacket, _impl_.pid_)>(
          reinterpret_cast<char*>(&_impl_.pid_),
          reinterpret_cast<char*>(&other->_impl_.pid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GDWhisperPlayerExistCheckPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gd_5fpackets_2eproto_getter, &descriptor_table_gd_5fpackets_2eproto_once,
      file_level_metadata_gd_5fpackets_2eproto[59]);
}

// ===================================================================

class GDWhisperPlayerMessageOfflinePacket::_Internal {
 public:
};

GDWhisperPlayerMessageOfflinePacket::GDWhisperPlayerMessageOfflinePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GDWhisperPlayerMessageOfflinePacket)
}
GDWhisperPlayerMessageOfflinePacket::GDWhisperPlayerMessageOfflinePacket(const GDWhisperPlayerMessageOfflinePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GDWhisperPlayerMessageOfflinePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.target_name_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.pid_){}
    , decltype(_impl_.is_gm_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.target_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.target_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_target_name().empty()) {
    _this->_impl_.target_name_.Set(from._internal_target_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.pid_, &from._impl_.pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_gm_) -
    reinterpret_cast<char*>(&_impl_.pid_)) + sizeof(_impl_.is_gm_));
  // @@protoc_insertion_point(copy_constructor:network.GDWhisperPlayerMessageOfflinePacket)
}

inline void GDWhisperPlayerMessageOfflinePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.target_name_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.pid_){0u}
    , decltype(_impl_.is_gm_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.target_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.target_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GDWhisperPlayerMessageOfflinePacket::~GDWhisperPlayerMessageOfflinePacket() {
  // @@protoc_insertion_point(destructor:network.GDWhisperPlayerMessageOfflinePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GDWhisperPlayerMessageOfflinePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.target_name_.Destroy();
  _impl_.message_.Destroy();
}

void GDWhisperPlayerMessageOfflinePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GDWhisperPlayerMessageOfflinePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GDWhisperPlayerMessageOfflinePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.target_name_.ClearToEmpty();
  _impl_.message_.ClearToEmpty();
  ::memset(&_impl_.pid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.is_gm_) -
      reinterpret_cast<char*>(&_impl_.pid_)) + sizeof(_impl_.is_gm_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GDWhisperPlayerMessageOfflinePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_gm = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.is_gm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes target_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_target_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes message = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GDWhisperPlayerMessageOfflinePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GDWhisperPlayerMessageOfflinePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pid(), target);
  }

  // bool is_gm = 2;
  if (this->_internal_is_gm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_is_gm(), target);
  }

  // bytes name = 3;
  if (!this->_internal_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_name(), target);
  }

  // bytes target_name = 4;
  if (!this->_internal_target_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_target_name(), target);
  }

  // bytes message = 5;
  if (!this->_internal_message().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GDWhisperPlayerMessageOfflinePacket)
  return target;
}

size_t GDWhisperPlayerMessageOfflinePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GDWhisperPlayerMessageOfflinePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 3;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // bytes target_name = 4;
  if (!this->_internal_target_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_target_name());
  }

  // bytes message = 5;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_message());
  }

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid());
  }

  // bool is_gm = 2;
  if (this->_internal_is_gm() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GDWhisperPlayerMessageOfflinePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GDWhisperPlayerMessageOfflinePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GDWhisperPlayerMessageOfflinePacket::GetClassData() const { return &_class_data_; }


void GDWhisperPlayerMessageOfflinePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GDWhisperPlayerMessageOfflinePacket*>(&to_msg);
  auto& from = static_cast<const GDWhisperPlayerMessageOfflinePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GDWhisperPlayerMessageOfflinePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_target_name().empty()) {
    _this->_internal_set_target_name(from._internal_target_name());
  }
  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_pid() != 0) {
    _this->_internal_set_pid(from._internal_pid());
  }
  if (from._internal_is_gm() != 0) {
    _this->_internal_set_is_gm(from._internal_is_gm());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GDWhisperPlayerMessageOfflinePacket::CopyFrom(const GDWhisperPlayerMessageOfflinePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GDWhisperPlayerMessageOfflinePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GDWhisperPlayerMessageOfflinePacket::IsInitialized() const {
  return true;
}

void GDWhisperPlayerMessageOfflinePacket::InternalSwap(GDWhisperPlayerMessageOfflinePacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.target_name_, lhs_arena,
      &other->_impl_.target_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GDWhisperPlayerMessageOfflinePacket, _impl_.is_gm_)
      + sizeof(GDWhisperPlayerMessageOfflinePacket::_impl_.is_gm_)
      - PROTOBUF_FIELD_OFFSET(GDWhisperPlayerMessageOfflinePacket, _impl_.pid_)>(
          reinterpret_cast<char*>(&_impl_.pid_),
          reinterpret_cast<char*>(&other->_impl_.pid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GDWhisperPlayerMessageOfflinePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gd_5fpackets_2eproto_getter, &descriptor_table_gd_5fpackets_2eproto_once,
      file_level_metadata_gd_5fpackets_2eproto[60]);
}

// ===================================================================

class GDLoadItemRefundPacket::_Internal {
 public:
};

GDLoadItemRefundPacket::GDLoadItemRefundPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GDLoadItemRefundPacket)
}
GDLoadItemRefundPacket::GDLoadItemRefundPacket(const GDLoadItemRefundPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GDLoadItemRefundPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.pid_ = from._impl_.pid_;
  // @@protoc_insertion_point(copy_constructor:network.GDLoadItemRefundPacket)
}

inline void GDLoadItemRefundPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GDLoadItemRefundPacket::~GDLoadItemRefundPacket() {
  // @@protoc_insertion_point(destructor:network.GDLoadItemRefundPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GDLoadItemRefundPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GDLoadItemRefundPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GDLoadItemRefundPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GDLoadItemRefundPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GDLoadItemRefundPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GDLoadItemRefundPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GDLoadItemRefundPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GDLoadItemRefundPacket)
  return target;
}

size_t GDLoadItemRefundPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GDLoadItemRefundPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GDLoadItemRefundPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GDLoadItemRefundPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GDLoadItemRefundPacket::GetClassData() const { return &_class_data_; }


void GDLoadItemRefundPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GDLoadItemRefundPacket*>(&to_msg);
  auto& from = static_cast<const GDLoadItemRefundPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GDLoadItemRefundPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_pid() != 0) {
    _this->_internal_set_pid(from._internal_pid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GDLoadItemRefundPacket::CopyFrom(const GDLoadItemRefundPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GDLoadItemRefundPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GDLoadItemRefundPacket::IsInitialized() const {
  return true;
}

void GDLoadItemRefundPacket::InternalSwap(GDLoadItemRefundPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.pid_, other->_impl_.pid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GDLoadItemRefundPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gd_5fpackets_2eproto_getter, &descriptor_table_gd_5fpackets_2eproto_once,
      file_level_metadata_gd_5fpackets_2eproto[61]);
}

// ===================================================================

class GDItemDestroyLogPacket::_Internal {
 public:
  static const ::network::TItemData& item(const GDItemDestroyLogPacket* msg);
};

const ::network::TItemData&
GDItemDestroyLogPacket::_Internal::item(const GDItemDestroyLogPacket* msg) {
  return *msg->_impl_.item_;
}
void GDItemDestroyLogPacket::clear_item() {
  if (GetArenaForAllocation() == nullptr && _impl_.item_ != nullptr) {
    delete _impl_.item_;
  }
  _impl_.item_ = nullptr;
}
GDItemDestroyLogPacket::GDItemDestroyLogPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GDItemDestroyLogPacket)
}
GDItemDestroyLogPacket::GDItemDestroyLogPacket(const GDItemDestroyLogPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GDItemDestroyLogPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.item_){nullptr}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_item()) {
    _this->_impl_.item_ = new ::network::TItemData(*from._impl_.item_);
  }
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:network.GDItemDestroyLogPacket)
}

inline void GDItemDestroyLogPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.item_){nullptr}
    , decltype(_impl_.type_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GDItemDestroyLogPacket::~GDItemDestroyLogPacket() {
  // @@protoc_insertion_point(destructor:network.GDItemDestroyLogPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GDItemDestroyLogPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.item_;
}

void GDItemDestroyLogPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GDItemDestroyLogPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GDItemDestroyLogPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.item_ != nullptr) {
    delete _impl_.item_;
  }
  _impl_.item_ = nullptr;
  _impl_.type_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GDItemDestroyLogPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .network.TItemData item = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_item(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GDItemDestroyLogPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GDItemDestroyLogPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .network.TItemData item = 1;
  if (this->_internal_has_item()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::item(this),
        _Internal::item(this).GetCachedSize(), target, stream);
  }

  // uint32 type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GDItemDestroyLogPacket)
  return target;
}

size_t GDItemDestroyLogPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GDItemDestroyLogPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .network.TItemData item = 1;
  if (this->_internal_has_item()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.item_);
  }

  // uint32 type = 2;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GDItemDestroyLogPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GDItemDestroyLogPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GDItemDestroyLogPacket::GetClassData() const { return &_class_data_; }


void GDItemDestroyLogPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GDItemDestroyLogPacket*>(&to_msg);
  auto& from = static_cast<const GDItemDestroyLogPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GDItemDestroyLogPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_item()) {
    _this->_internal_mutable_item()->::network::TItemData::MergeFrom(
        from._internal_item());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GDItemDestroyLogPacket::CopyFrom(const GDItemDestroyLogPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GDItemDestroyLogPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GDItemDestroyLogPacket::IsInitialized() const {
  return true;
}

void GDItemDestroyLogPacket::InternalSwap(GDItemDestroyLogPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GDItemDestroyLogPacket, _impl_.type_)
      + sizeof(GDItemDestroyLogPacket::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(GDItemDestroyLogPacket, _impl_.item_)>(
          reinterpret_cast<char*>(&_impl_.item_),
          reinterpret_cast<char*>(&other->_impl_.item_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GDItemDestroyLogPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gd_5fpackets_2eproto_getter, &descriptor_table_gd_5fpackets_2eproto_once,
      file_level_metadata_gd_5fpackets_2eproto[62]);
}

// ===================================================================

class GDItemTimedIgnorePacket::_Internal {
 public:
};

GDItemTimedIgnorePacket::GDItemTimedIgnorePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GDItemTimedIgnorePacket)
}
GDItemTimedIgnorePacket::GDItemTimedIgnorePacket(const GDItemTimedIgnorePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GDItemTimedIgnorePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.item_id_){}
    , decltype(_impl_.ignore_duration_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.item_id_, &from._impl_.item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ignore_duration_) -
    reinterpret_cast<char*>(&_impl_.item_id_)) + sizeof(_impl_.ignore_duration_));
  // @@protoc_insertion_point(copy_constructor:network.GDItemTimedIgnorePacket)
}

inline void GDItemTimedIgnorePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.item_id_){0u}
    , decltype(_impl_.ignore_duration_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GDItemTimedIgnorePacket::~GDItemTimedIgnorePacket() {
  // @@protoc_insertion_point(destructor:network.GDItemTimedIgnorePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GDItemTimedIgnorePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GDItemTimedIgnorePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GDItemTimedIgnorePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GDItemTimedIgnorePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.item_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.ignore_duration_) -
      reinterpret_cast<char*>(&_impl_.item_id_)) + sizeof(_impl_.ignore_duration_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GDItemTimedIgnorePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 ignore_duration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.ignore_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GDItemTimedIgnorePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GDItemTimedIgnorePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 item_id = 1;
  if (this->_internal_item_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_item_id(), target);
  }

  // uint32 ignore_duration = 2;
  if (this->_internal_ignore_duration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_ignore_duration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GDItemTimedIgnorePacket)
  return target;
}

size_t GDItemTimedIgnorePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GDItemTimedIgnorePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 item_id = 1;
  if (this->_internal_item_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_item_id());
  }

  // uint32 ignore_duration = 2;
  if (this->_internal_ignore_duration() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ignore_duration());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GDItemTimedIgnorePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GDItemTimedIgnorePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GDItemTimedIgnorePacket::GetClassData() const { return &_class_data_; }


void GDItemTimedIgnorePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GDItemTimedIgnorePacket*>(&to_msg);
  auto& from = static_cast<const GDItemTimedIgnorePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GDItemTimedIgnorePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_item_id() != 0) {
    _this->_internal_set_item_id(from._internal_item_id());
  }
  if (from._internal_ignore_duration() != 0) {
    _this->_internal_set_ignore_duration(from._internal_ignore_duration());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GDItemTimedIgnorePacket::CopyFrom(const GDItemTimedIgnorePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GDItemTimedIgnorePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GDItemTimedIgnorePacket::IsInitialized() const {
  return true;
}

void GDItemTimedIgnorePacket::InternalSwap(GDItemTimedIgnorePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GDItemTimedIgnorePacket, _impl_.ignore_duration_)
      + sizeof(GDItemTimedIgnorePacket::_impl_.ignore_duration_)
      - PROTOBUF_FIELD_OFFSET(GDItemTimedIgnorePacket, _impl_.item_id_)>(
          reinterpret_cast<char*>(&_impl_.item_id_),
          reinterpret_cast<char*>(&other->_impl_.item_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GDItemTimedIgnorePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gd_5fpackets_2eproto_getter, &descriptor_table_gd_5fpackets_2eproto_once,
      file_level_metadata_gd_5fpackets_2eproto[63]);
}

// ===================================================================

class GDMarriageAddPacket::_Internal {
 public:
};

GDMarriageAddPacket::GDMarriageAddPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GDMarriageAddPacket)
}
GDMarriageAddPacket::GDMarriageAddPacket(const GDMarriageAddPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GDMarriageAddPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name1_){}
    , decltype(_impl_.name2_){}
    , decltype(_impl_.pid1_){}
    , decltype(_impl_.pid2_){}
    , decltype(_impl_.marry_time_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name1().empty()) {
    _this->_impl_.name1_.Set(from._internal_name1(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name2().empty()) {
    _this->_impl_.name2_.Set(from._internal_name2(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.pid1_, &from._impl_.pid1_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.marry_time_) -
    reinterpret_cast<char*>(&_impl_.pid1_)) + sizeof(_impl_.marry_time_));
  // @@protoc_insertion_point(copy_constructor:network.GDMarriageAddPacket)
}

inline void GDMarriageAddPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name1_){}
    , decltype(_impl_.name2_){}
    , decltype(_impl_.pid1_){0u}
    , decltype(_impl_.pid2_){0u}
    , decltype(_impl_.marry_time_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GDMarriageAddPacket::~GDMarriageAddPacket() {
  // @@protoc_insertion_point(destructor:network.GDMarriageAddPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GDMarriageAddPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name1_.Destroy();
  _impl_.name2_.Destroy();
}

void GDMarriageAddPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GDMarriageAddPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GDMarriageAddPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name1_.ClearToEmpty();
  _impl_.name2_.ClearToEmpty();
  ::memset(&_impl_.pid1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.marry_time_) -
      reinterpret_cast<char*>(&_impl_.pid1_)) + sizeof(_impl_.marry_time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GDMarriageAddPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 pid1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pid1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 pid2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.pid2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 marry_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.marry_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes name1 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_name1();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes name2 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_name2();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GDMarriageAddPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GDMarriageAddPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pid1 = 1;
  if (this->_internal_pid1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pid1(), target);
  }

  // uint32 pid2 = 2;
  if (this->_internal_pid2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_pid2(), target);
  }

  // uint32 marry_time = 3;
  if (this->_internal_marry_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_marry_time(), target);
  }

  // bytes name1 = 4;
  if (!this->_internal_name1().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_name1(), target);
  }

  // bytes name2 = 5;
  if (!this->_internal_name2().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_name2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GDMarriageAddPacket)
  return target;
}

size_t GDMarriageAddPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GDMarriageAddPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name1 = 4;
  if (!this->_internal_name1().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name1());
  }

  // bytes name2 = 5;
  if (!this->_internal_name2().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name2());
  }

  // uint32 pid1 = 1;
  if (this->_internal_pid1() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid1());
  }

  // uint32 pid2 = 2;
  if (this->_internal_pid2() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid2());
  }

  // uint32 marry_time = 3;
  if (this->_internal_marry_time() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_marry_time());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GDMarriageAddPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GDMarriageAddPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GDMarriageAddPacket::GetClassData() const { return &_class_data_; }


void GDMarriageAddPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GDMarriageAddPacket*>(&to_msg);
  auto& from = static_cast<const GDMarriageAddPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GDMarriageAddPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name1().empty()) {
    _this->_internal_set_name1(from._internal_name1());
  }
  if (!from._internal_name2().empty()) {
    _this->_internal_set_name2(from._internal_name2());
  }
  if (from._internal_pid1() != 0) {
    _this->_internal_set_pid1(from._internal_pid1());
  }
  if (from._internal_pid2() != 0) {
    _this->_internal_set_pid2(from._internal_pid2());
  }
  if (from._internal_marry_time() != 0) {
    _this->_internal_set_marry_time(from._internal_marry_time());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GDMarriageAddPacket::CopyFrom(const GDMarriageAddPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GDMarriageAddPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GDMarriageAddPacket::IsInitialized() const {
  return true;
}

void GDMarriageAddPacket::InternalSwap(GDMarriageAddPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name1_, lhs_arena,
      &other->_impl_.name1_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name2_, lhs_arena,
      &other->_impl_.name2_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GDMarriageAddPacket, _impl_.marry_time_)
      + sizeof(GDMarriageAddPacket::_impl_.marry_time_)
      - PROTOBUF_FIELD_OFFSET(GDMarriageAddPacket, _impl_.pid1_)>(
          reinterpret_cast<char*>(&_impl_.pid1_),
          reinterpret_cast<char*>(&other->_impl_.pid1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GDMarriageAddPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gd_5fpackets_2eproto_getter, &descriptor_table_gd_5fpackets_2eproto_once,
      file_level_metadata_gd_5fpackets_2eproto[64]);
}

// ===================================================================

class GDMarriageUpdatePacket::_Internal {
 public:
};

GDMarriageUpdatePacket::GDMarriageUpdatePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GDMarriageUpdatePacket)
}
GDMarriageUpdatePacket::GDMarriageUpdatePacket(const GDMarriageUpdatePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GDMarriageUpdatePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pid1_){}
    , decltype(_impl_.pid2_){}
    , decltype(_impl_.love_point_){}
    , decltype(_impl_.married_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.pid1_, &from._impl_.pid1_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.married_) -
    reinterpret_cast<char*>(&_impl_.pid1_)) + sizeof(_impl_.married_));
  // @@protoc_insertion_point(copy_constructor:network.GDMarriageUpdatePacket)
}

inline void GDMarriageUpdatePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pid1_){0u}
    , decltype(_impl_.pid2_){0u}
    , decltype(_impl_.love_point_){0}
    , decltype(_impl_.married_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GDMarriageUpdatePacket::~GDMarriageUpdatePacket() {
  // @@protoc_insertion_point(destructor:network.GDMarriageUpdatePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GDMarriageUpdatePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GDMarriageUpdatePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GDMarriageUpdatePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GDMarriageUpdatePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.pid1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.married_) -
      reinterpret_cast<char*>(&_impl_.pid1_)) + sizeof(_impl_.married_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GDMarriageUpdatePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 pid1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pid1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 pid2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.pid2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 love_point = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.love_point_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool married = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.married_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GDMarriageUpdatePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GDMarriageUpdatePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pid1 = 1;
  if (this->_internal_pid1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pid1(), target);
  }

  // uint32 pid2 = 2;
  if (this->_internal_pid2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_pid2(), target);
  }

  // int32 love_point = 3;
  if (this->_internal_love_point() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_love_point(), target);
  }

  // bool married = 4;
  if (this->_internal_married() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_married(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GDMarriageUpdatePacket)
  return target;
}

size_t GDMarriageUpdatePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GDMarriageUpdatePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 pid1 = 1;
  if (this->_internal_pid1() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid1());
  }

  // uint32 pid2 = 2;
  if (this->_internal_pid2() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid2());
  }

  // int32 love_point = 3;
  if (this->_internal_love_point() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_love_point());
  }

  // bool married = 4;
  if (this->_internal_married() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GDMarriageUpdatePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GDMarriageUpdatePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GDMarriageUpdatePacket::GetClassData() const { return &_class_data_; }


void GDMarriageUpdatePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GDMarriageUpdatePacket*>(&to_msg);
  auto& from = static_cast<const GDMarriageUpdatePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GDMarriageUpdatePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_pid1() != 0) {
    _this->_internal_set_pid1(from._internal_pid1());
  }
  if (from._internal_pid2() != 0) {
    _this->_internal_set_pid2(from._internal_pid2());
  }
  if (from._internal_love_point() != 0) {
    _this->_internal_set_love_point(from._internal_love_point());
  }
  if (from._internal_married() != 0) {
    _this->_internal_set_married(from._internal_married());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GDMarriageUpdatePacket::CopyFrom(const GDMarriageUpdatePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GDMarriageUpdatePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GDMarriageUpdatePacket::IsInitialized() const {
  return true;
}

void GDMarriageUpdatePacket::InternalSwap(GDMarriageUpdatePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GDMarriageUpdatePacket, _impl_.married_)
      + sizeof(GDMarriageUpdatePacket::_impl_.married_)
      - PROTOBUF_FIELD_OFFSET(GDMarriageUpdatePacket, _impl_.pid1_)>(
          reinterpret_cast<char*>(&_impl_.pid1_),
          reinterpret_cast<char*>(&other->_impl_.pid1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GDMarriageUpdatePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gd_5fpackets_2eproto_getter, &descriptor_table_gd_5fpackets_2eproto_once,
      file_level_metadata_gd_5fpackets_2eproto[65]);
}

// ===================================================================

class GDMarriageRemovePacket::_Internal {
 public:
};

GDMarriageRemovePacket::GDMarriageRemovePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GDMarriageRemovePacket)
}
GDMarriageRemovePacket::GDMarriageRemovePacket(const GDMarriageRemovePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GDMarriageRemovePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pid1_){}
    , decltype(_impl_.pid2_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.pid1_, &from._impl_.pid1_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.pid2_) -
    reinterpret_cast<char*>(&_impl_.pid1_)) + sizeof(_impl_.pid2_));
  // @@protoc_insertion_point(copy_constructor:network.GDMarriageRemovePacket)
}

inline void GDMarriageRemovePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pid1_){0u}
    , decltype(_impl_.pid2_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GDMarriageRemovePacket::~GDMarriageRemovePacket() {
  // @@protoc_insertion_point(destructor:network.GDMarriageRemovePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GDMarriageRemovePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GDMarriageRemovePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GDMarriageRemovePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GDMarriageRemovePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.pid1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.pid2_) -
      reinterpret_cast<char*>(&_impl_.pid1_)) + sizeof(_impl_.pid2_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GDMarriageRemovePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 pid1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pid1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 pid2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.pid2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GDMarriageRemovePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GDMarriageRemovePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pid1 = 1;
  if (this->_internal_pid1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pid1(), target);
  }

  // uint32 pid2 = 2;
  if (this->_internal_pid2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_pid2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GDMarriageRemovePacket)
  return target;
}

size_t GDMarriageRemovePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GDMarriageRemovePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 pid1 = 1;
  if (this->_internal_pid1() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid1());
  }

  // uint32 pid2 = 2;
  if (this->_internal_pid2() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid2());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GDMarriageRemovePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GDMarriageRemovePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GDMarriageRemovePacket::GetClassData() const { return &_class_data_; }


void GDMarriageRemovePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GDMarriageRemovePacket*>(&to_msg);
  auto& from = static_cast<const GDMarriageRemovePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GDMarriageRemovePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_pid1() != 0) {
    _this->_internal_set_pid1(from._internal_pid1());
  }
  if (from._internal_pid2() != 0) {
    _this->_internal_set_pid2(from._internal_pid2());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GDMarriageRemovePacket::CopyFrom(const GDMarriageRemovePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GDMarriageRemovePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GDMarriageRemovePacket::IsInitialized() const {
  return true;
}

void GDMarriageRemovePacket::InternalSwap(GDMarriageRemovePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GDMarriageRemovePacket, _impl_.pid2_)
      + sizeof(GDMarriageRemovePacket::_impl_.pid2_)
      - PROTOBUF_FIELD_OFFSET(GDMarriageRemovePacket, _impl_.pid1_)>(
          reinterpret_cast<char*>(&_impl_.pid1_),
          reinterpret_cast<char*>(&other->_impl_.pid1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GDMarriageRemovePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gd_5fpackets_2eproto_getter, &descriptor_table_gd_5fpackets_2eproto_once,
      file_level_metadata_gd_5fpackets_2eproto[66]);
}

// ===================================================================

class GDMarriageBreakPacket::_Internal {
 public:
};

GDMarriageBreakPacket::GDMarriageBreakPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GDMarriageBreakPacket)
}
GDMarriageBreakPacket::GDMarriageBreakPacket(const GDMarriageBreakPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GDMarriageBreakPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pid1_){}
    , decltype(_impl_.pid2_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.pid1_, &from._impl_.pid1_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.pid2_) -
    reinterpret_cast<char*>(&_impl_.pid1_)) + sizeof(_impl_.pid2_));
  // @@protoc_insertion_point(copy_constructor:network.GDMarriageBreakPacket)
}

inline void GDMarriageBreakPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pid1_){0u}
    , decltype(_impl_.pid2_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GDMarriageBreakPacket::~GDMarriageBreakPacket() {
  // @@protoc_insertion_point(destructor:network.GDMarriageBreakPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GDMarriageBreakPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GDMarriageBreakPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GDMarriageBreakPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GDMarriageBreakPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.pid1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.pid2_) -
      reinterpret_cast<char*>(&_impl_.pid1_)) + sizeof(_impl_.pid2_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GDMarriageBreakPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 pid1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pid1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 pid2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.pid2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GDMarriageBreakPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GDMarriageBreakPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pid1 = 1;
  if (this->_internal_pid1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pid1(), target);
  }

  // uint32 pid2 = 2;
  if (this->_internal_pid2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_pid2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GDMarriageBreakPacket)
  return target;
}

size_t GDMarriageBreakPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GDMarriageBreakPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 pid1 = 1;
  if (this->_internal_pid1() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid1());
  }

  // uint32 pid2 = 2;
  if (this->_internal_pid2() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid2());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GDMarriageBreakPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GDMarriageBreakPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GDMarriageBreakPacket::GetClassData() const { return &_class_data_; }


void GDMarriageBreakPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GDMarriageBreakPacket*>(&to_msg);
  auto& from = static_cast<const GDMarriageBreakPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GDMarriageBreakPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_pid1() != 0) {
    _this->_internal_set_pid1(from._internal_pid1());
  }
  if (from._internal_pid2() != 0) {
    _this->_internal_set_pid2(from._internal_pid2());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GDMarriageBreakPacket::CopyFrom(const GDMarriageBreakPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GDMarriageBreakPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GDMarriageBreakPacket::IsInitialized() const {
  return true;
}

void GDMarriageBreakPacket::InternalSwap(GDMarriageBreakPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GDMarriageBreakPacket, _impl_.pid2_)
      + sizeof(GDMarriageBreakPacket::_impl_.pid2_)
      - PROTOBUF_FIELD_OFFSET(GDMarriageBreakPacket, _impl_.pid1_)>(
          reinterpret_cast<char*>(&_impl_.pid1_),
          reinterpret_cast<char*>(&other->_impl_.pid1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GDMarriageBreakPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gd_5fpackets_2eproto_getter, &descriptor_table_gd_5fpackets_2eproto_once,
      file_level_metadata_gd_5fpackets_2eproto[67]);
}

// ===================================================================

class GDWeddingRequestPacket::_Internal {
 public:
};

GDWeddingRequestPacket::GDWeddingRequestPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GDWeddingRequestPacket)
}
GDWeddingRequestPacket::GDWeddingRequestPacket(const GDWeddingRequestPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GDWeddingRequestPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pid1_){}
    , decltype(_impl_.pid2_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.pid1_, &from._impl_.pid1_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.pid2_) -
    reinterpret_cast<char*>(&_impl_.pid1_)) + sizeof(_impl_.pid2_));
  // @@protoc_insertion_point(copy_constructor:network.GDWeddingRequestPacket)
}

inline void GDWeddingRequestPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pid1_){0u}
    , decltype(_impl_.pid2_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GDWeddingRequestPacket::~GDWeddingRequestPacket() {
  // @@protoc_insertion_point(destructor:network.GDWeddingRequestPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GDWeddingRequestPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GDWeddingRequestPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GDWeddingRequestPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GDWeddingRequestPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.pid1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.pid2_) -
      reinterpret_cast<char*>(&_impl_.pid1_)) + sizeof(_impl_.pid2_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GDWeddingRequestPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 pid1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pid1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 pid2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.pid2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GDWeddingRequestPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GDWeddingRequestPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pid1 = 1;
  if (this->_internal_pid1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pid1(), target);
  }

  // uint32 pid2 = 2;
  if (this->_internal_pid2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_pid2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GDWeddingRequestPacket)
  return target;
}

size_t GDWeddingRequestPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GDWeddingRequestPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 pid1 = 1;
  if (this->_internal_pid1() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid1());
  }

  // uint32 pid2 = 2;
  if (this->_internal_pid2() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid2());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GDWeddingRequestPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GDWeddingRequestPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GDWeddingRequestPacket::GetClassData() const { return &_class_data_; }


void GDWeddingRequestPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GDWeddingRequestPacket*>(&to_msg);
  auto& from = static_cast<const GDWeddingRequestPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GDWeddingRequestPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_pid1() != 0) {
    _this->_internal_set_pid1(from._internal_pid1());
  }
  if (from._internal_pid2() != 0) {
    _this->_internal_set_pid2(from._internal_pid2());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GDWeddingRequestPacket::CopyFrom(const GDWeddingRequestPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GDWeddingRequestPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GDWeddingRequestPacket::IsInitialized() const {
  return true;
}

void GDWeddingRequestPacket::InternalSwap(GDWeddingRequestPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GDWeddingRequestPacket, _impl_.pid2_)
      + sizeof(GDWeddingRequestPacket::_impl_.pid2_)
      - PROTOBUF_FIELD_OFFSET(GDWeddingRequestPacket, _impl_.pid1_)>(
          reinterpret_cast<char*>(&_impl_.pid1_),
          reinterpret_cast<char*>(&other->_impl_.pid1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GDWeddingRequestPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gd_5fpackets_2eproto_getter, &descriptor_table_gd_5fpackets_2eproto_once,
      file_level_metadata_gd_5fpackets_2eproto[68]);
}

// ===================================================================

class GDWeddingReadyPacket::_Internal {
 public:
};

GDWeddingReadyPacket::GDWeddingReadyPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GDWeddingReadyPacket)
}
GDWeddingReadyPacket::GDWeddingReadyPacket(const GDWeddingReadyPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GDWeddingReadyPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pid1_){}
    , decltype(_impl_.pid2_){}
    , decltype(_impl_.map_index_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.pid1_, &from._impl_.pid1_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.map_index_) -
    reinterpret_cast<char*>(&_impl_.pid1_)) + sizeof(_impl_.map_index_));
  // @@protoc_insertion_point(copy_constructor:network.GDWeddingReadyPacket)
}

inline void GDWeddingReadyPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pid1_){0u}
    , decltype(_impl_.pid2_){0u}
    , decltype(_impl_.map_index_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GDWeddingReadyPacket::~GDWeddingReadyPacket() {
  // @@protoc_insertion_point(destructor:network.GDWeddingReadyPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GDWeddingReadyPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GDWeddingReadyPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GDWeddingReadyPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GDWeddingReadyPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.pid1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.map_index_) -
      reinterpret_cast<char*>(&_impl_.pid1_)) + sizeof(_impl_.map_index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GDWeddingReadyPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 pid1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pid1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 pid2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.pid2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 map_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.map_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GDWeddingReadyPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GDWeddingReadyPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pid1 = 1;
  if (this->_internal_pid1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pid1(), target);
  }

  // uint32 pid2 = 2;
  if (this->_internal_pid2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_pid2(), target);
  }

  // uint32 map_index = 3;
  if (this->_internal_map_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_map_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GDWeddingReadyPacket)
  return target;
}

size_t GDWeddingReadyPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GDWeddingReadyPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 pid1 = 1;
  if (this->_internal_pid1() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid1());
  }

  // uint32 pid2 = 2;
  if (this->_internal_pid2() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid2());
  }

  // uint32 map_index = 3;
  if (this->_internal_map_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_map_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GDWeddingReadyPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GDWeddingReadyPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GDWeddingReadyPacket::GetClassData() const { return &_class_data_; }


void GDWeddingReadyPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GDWeddingReadyPacket*>(&to_msg);
  auto& from = static_cast<const GDWeddingReadyPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GDWeddingReadyPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_pid1() != 0) {
    _this->_internal_set_pid1(from._internal_pid1());
  }
  if (from._internal_pid2() != 0) {
    _this->_internal_set_pid2(from._internal_pid2());
  }
  if (from._internal_map_index() != 0) {
    _this->_internal_set_map_index(from._internal_map_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GDWeddingReadyPacket::CopyFrom(const GDWeddingReadyPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GDWeddingReadyPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GDWeddingReadyPacket::IsInitialized() const {
  return true;
}

void GDWeddingReadyPacket::InternalSwap(GDWeddingReadyPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GDWeddingReadyPacket, _impl_.map_index_)
      + sizeof(GDWeddingReadyPacket::_impl_.map_index_)
      - PROTOBUF_FIELD_OFFSET(GDWeddingReadyPacket, _impl_.pid1_)>(
          reinterpret_cast<char*>(&_impl_.pid1_),
          reinterpret_cast<char*>(&other->_impl_.pid1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GDWeddingReadyPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gd_5fpackets_2eproto_getter, &descriptor_table_gd_5fpackets_2eproto_once,
      file_level_metadata_gd_5fpackets_2eproto[69]);
}

// ===================================================================

class GDWeddingEndPacket::_Internal {
 public:
};

GDWeddingEndPacket::GDWeddingEndPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GDWeddingEndPacket)
}
GDWeddingEndPacket::GDWeddingEndPacket(const GDWeddingEndPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GDWeddingEndPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pid1_){}
    , decltype(_impl_.pid2_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.pid1_, &from._impl_.pid1_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.pid2_) -
    reinterpret_cast<char*>(&_impl_.pid1_)) + sizeof(_impl_.pid2_));
  // @@protoc_insertion_point(copy_constructor:network.GDWeddingEndPacket)
}

inline void GDWeddingEndPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pid1_){0u}
    , decltype(_impl_.pid2_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GDWeddingEndPacket::~GDWeddingEndPacket() {
  // @@protoc_insertion_point(destructor:network.GDWeddingEndPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GDWeddingEndPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GDWeddingEndPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GDWeddingEndPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GDWeddingEndPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.pid1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.pid2_) -
      reinterpret_cast<char*>(&_impl_.pid1_)) + sizeof(_impl_.pid2_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GDWeddingEndPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 pid1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pid1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 pid2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.pid2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GDWeddingEndPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GDWeddingEndPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pid1 = 1;
  if (this->_internal_pid1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pid1(), target);
  }

  // uint32 pid2 = 2;
  if (this->_internal_pid2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_pid2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GDWeddingEndPacket)
  return target;
}

size_t GDWeddingEndPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GDWeddingEndPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 pid1 = 1;
  if (this->_internal_pid1() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid1());
  }

  // uint32 pid2 = 2;
  if (this->_internal_pid2() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid2());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GDWeddingEndPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GDWeddingEndPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GDWeddingEndPacket::GetClassData() const { return &_class_data_; }


void GDWeddingEndPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GDWeddingEndPacket*>(&to_msg);
  auto& from = static_cast<const GDWeddingEndPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GDWeddingEndPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_pid1() != 0) {
    _this->_internal_set_pid1(from._internal_pid1());
  }
  if (from._internal_pid2() != 0) {
    _this->_internal_set_pid2(from._internal_pid2());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GDWeddingEndPacket::CopyFrom(const GDWeddingEndPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GDWeddingEndPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GDWeddingEndPacket::IsInitialized() const {
  return true;
}

void GDWeddingEndPacket::InternalSwap(GDWeddingEndPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GDWeddingEndPacket, _impl_.pid2_)
      + sizeof(GDWeddingEndPacket::_impl_.pid2_)
      - PROTOBUF_FIELD_OFFSET(GDWeddingEndPacket, _impl_.pid1_)>(
          reinterpret_cast<char*>(&_impl_.pid1_),
          reinterpret_cast<char*>(&other->_impl_.pid1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GDWeddingEndPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gd_5fpackets_2eproto_getter, &descriptor_table_gd_5fpackets_2eproto_once,
      file_level_metadata_gd_5fpackets_2eproto[70]);
}

// ===================================================================

class GDPartyCreatePacket::_Internal {
 public:
};

GDPartyCreatePacket::GDPartyCreatePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GDPartyCreatePacket)
}
GDPartyCreatePacket::GDPartyCreatePacket(const GDPartyCreatePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GDPartyCreatePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.leader_pid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.leader_pid_ = from._impl_.leader_pid_;
  // @@protoc_insertion_point(copy_constructor:network.GDPartyCreatePacket)
}

inline void GDPartyCreatePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.leader_pid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GDPartyCreatePacket::~GDPartyCreatePacket() {
  // @@protoc_insertion_point(destructor:network.GDPartyCreatePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GDPartyCreatePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GDPartyCreatePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GDPartyCreatePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GDPartyCreatePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.leader_pid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GDPartyCreatePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 leader_pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.leader_pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GDPartyCreatePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GDPartyCreatePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 leader_pid = 1;
  if (this->_internal_leader_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_leader_pid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GDPartyCreatePacket)
  return target;
}

size_t GDPartyCreatePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GDPartyCreatePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 leader_pid = 1;
  if (this->_internal_leader_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_leader_pid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GDPartyCreatePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GDPartyCreatePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GDPartyCreatePacket::GetClassData() const { return &_class_data_; }


void GDPartyCreatePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GDPartyCreatePacket*>(&to_msg);
  auto& from = static_cast<const GDPartyCreatePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GDPartyCreatePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_leader_pid() != 0) {
    _this->_internal_set_leader_pid(from._internal_leader_pid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GDPartyCreatePacket::CopyFrom(const GDPartyCreatePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GDPartyCreatePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GDPartyCreatePacket::IsInitialized() const {
  return true;
}

void GDPartyCreatePacket::InternalSwap(GDPartyCreatePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.leader_pid_, other->_impl_.leader_pid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GDPartyCreatePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gd_5fpackets_2eproto_getter, &descriptor_table_gd_5fpackets_2eproto_once,
      file_level_metadata_gd_5fpackets_2eproto[71]);
}

// ===================================================================

class GDPartyDeletePacket::_Internal {
 public:
};

GDPartyDeletePacket::GDPartyDeletePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GDPartyDeletePacket)
}
GDPartyDeletePacket::GDPartyDeletePacket(const GDPartyDeletePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GDPartyDeletePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.leader_pid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.leader_pid_ = from._impl_.leader_pid_;
  // @@protoc_insertion_point(copy_constructor:network.GDPartyDeletePacket)
}

inline void GDPartyDeletePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.leader_pid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GDPartyDeletePacket::~GDPartyDeletePacket() {
  // @@protoc_insertion_point(destructor:network.GDPartyDeletePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GDPartyDeletePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GDPartyDeletePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GDPartyDeletePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GDPartyDeletePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.leader_pid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GDPartyDeletePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 leader_pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.leader_pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GDPartyDeletePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GDPartyDeletePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 leader_pid = 1;
  if (this->_internal_leader_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_leader_pid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GDPartyDeletePacket)
  return target;
}

size_t GDPartyDeletePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GDPartyDeletePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 leader_pid = 1;
  if (this->_internal_leader_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_leader_pid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GDPartyDeletePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GDPartyDeletePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GDPartyDeletePacket::GetClassData() const { return &_class_data_; }


void GDPartyDeletePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GDPartyDeletePacket*>(&to_msg);
  auto& from = static_cast<const GDPartyDeletePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GDPartyDeletePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_leader_pid() != 0) {
    _this->_internal_set_leader_pid(from._internal_leader_pid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GDPartyDeletePacket::CopyFrom(const GDPartyDeletePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GDPartyDeletePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GDPartyDeletePacket::IsInitialized() const {
  return true;
}

void GDPartyDeletePacket::InternalSwap(GDPartyDeletePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.leader_pid_, other->_impl_.leader_pid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GDPartyDeletePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gd_5fpackets_2eproto_getter, &descriptor_table_gd_5fpackets_2eproto_once,
      file_level_metadata_gd_5fpackets_2eproto[72]);
}

// ===================================================================

class GDPartyAddPacket::_Internal {
 public:
};

GDPartyAddPacket::GDPartyAddPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GDPartyAddPacket)
}
GDPartyAddPacket::GDPartyAddPacket(const GDPartyAddPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GDPartyAddPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.leader_pid_){}
    , decltype(_impl_.pid_){}
    , decltype(_impl_.state_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.leader_pid_, &from._impl_.leader_pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.state_) -
    reinterpret_cast<char*>(&_impl_.leader_pid_)) + sizeof(_impl_.state_));
  // @@protoc_insertion_point(copy_constructor:network.GDPartyAddPacket)
}

inline void GDPartyAddPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.leader_pid_){0u}
    , decltype(_impl_.pid_){0u}
    , decltype(_impl_.state_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GDPartyAddPacket::~GDPartyAddPacket() {
  // @@protoc_insertion_point(destructor:network.GDPartyAddPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GDPartyAddPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GDPartyAddPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GDPartyAddPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GDPartyAddPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.leader_pid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.state_) -
      reinterpret_cast<char*>(&_impl_.leader_pid_)) + sizeof(_impl_.state_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GDPartyAddPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 leader_pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.leader_pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 pid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GDPartyAddPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GDPartyAddPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 leader_pid = 1;
  if (this->_internal_leader_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_leader_pid(), target);
  }

  // uint32 pid = 2;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_pid(), target);
  }

  // uint32 state = 3;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GDPartyAddPacket)
  return target;
}

size_t GDPartyAddPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GDPartyAddPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 leader_pid = 1;
  if (this->_internal_leader_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_leader_pid());
  }

  // uint32 pid = 2;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid());
  }

  // uint32 state = 3;
  if (this->_internal_state() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GDPartyAddPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GDPartyAddPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GDPartyAddPacket::GetClassData() const { return &_class_data_; }


void GDPartyAddPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GDPartyAddPacket*>(&to_msg);
  auto& from = static_cast<const GDPartyAddPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GDPartyAddPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_leader_pid() != 0) {
    _this->_internal_set_leader_pid(from._internal_leader_pid());
  }
  if (from._internal_pid() != 0) {
    _this->_internal_set_pid(from._internal_pid());
  }
  if (from._internal_state() != 0) {
    _this->_internal_set_state(from._internal_state());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GDPartyAddPacket::CopyFrom(const GDPartyAddPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GDPartyAddPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GDPartyAddPacket::IsInitialized() const {
  return true;
}

void GDPartyAddPacket::InternalSwap(GDPartyAddPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GDPartyAddPacket, _impl_.state_)
      + sizeof(GDPartyAddPacket::_impl_.state_)
      - PROTOBUF_FIELD_OFFSET(GDPartyAddPacket, _impl_.leader_pid_)>(
          reinterpret_cast<char*>(&_impl_.leader_pid_),
          reinterpret_cast<char*>(&other->_impl_.leader_pid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GDPartyAddPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gd_5fpackets_2eproto_getter, &descriptor_table_gd_5fpackets_2eproto_once,
      file_level_metadata_gd_5fpackets_2eproto[73]);
}

// ===================================================================

class GDPartyRemovePacket::_Internal {
 public:
};

GDPartyRemovePacket::GDPartyRemovePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GDPartyRemovePacket)
}
GDPartyRemovePacket::GDPartyRemovePacket(const GDPartyRemovePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GDPartyRemovePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.leader_pid_){}
    , decltype(_impl_.pid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.leader_pid_, &from._impl_.leader_pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.pid_) -
    reinterpret_cast<char*>(&_impl_.leader_pid_)) + sizeof(_impl_.pid_));
  // @@protoc_insertion_point(copy_constructor:network.GDPartyRemovePacket)
}

inline void GDPartyRemovePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.leader_pid_){0u}
    , decltype(_impl_.pid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GDPartyRemovePacket::~GDPartyRemovePacket() {
  // @@protoc_insertion_point(destructor:network.GDPartyRemovePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GDPartyRemovePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GDPartyRemovePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GDPartyRemovePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GDPartyRemovePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.leader_pid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.pid_) -
      reinterpret_cast<char*>(&_impl_.leader_pid_)) + sizeof(_impl_.pid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GDPartyRemovePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 leader_pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.leader_pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 pid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GDPartyRemovePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GDPartyRemovePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 leader_pid = 1;
  if (this->_internal_leader_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_leader_pid(), target);
  }

  // uint32 pid = 2;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_pid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GDPartyRemovePacket)
  return target;
}

size_t GDPartyRemovePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GDPartyRemovePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 leader_pid = 1;
  if (this->_internal_leader_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_leader_pid());
  }

  // uint32 pid = 2;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GDPartyRemovePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GDPartyRemovePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GDPartyRemovePacket::GetClassData() const { return &_class_data_; }


void GDPartyRemovePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GDPartyRemovePacket*>(&to_msg);
  auto& from = static_cast<const GDPartyRemovePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GDPartyRemovePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_leader_pid() != 0) {
    _this->_internal_set_leader_pid(from._internal_leader_pid());
  }
  if (from._internal_pid() != 0) {
    _this->_internal_set_pid(from._internal_pid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GDPartyRemovePacket::CopyFrom(const GDPartyRemovePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GDPartyRemovePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GDPartyRemovePacket::IsInitialized() const {
  return true;
}

void GDPartyRemovePacket::InternalSwap(GDPartyRemovePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GDPartyRemovePacket, _impl_.pid_)
      + sizeof(GDPartyRemovePacket::_impl_.pid_)
      - PROTOBUF_FIELD_OFFSET(GDPartyRemovePacket, _impl_.leader_pid_)>(
          reinterpret_cast<char*>(&_impl_.leader_pid_),
          reinterpret_cast<char*>(&other->_impl_.leader_pid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GDPartyRemovePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gd_5fpackets_2eproto_getter, &descriptor_table_gd_5fpackets_2eproto_once,
      file_level_metadata_gd_5fpackets_2eproto[74]);
}

// ===================================================================

class GDPartyStateChangePacket::_Internal {
 public:
};

GDPartyStateChangePacket::GDPartyStateChangePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GDPartyStateChangePacket)
}
GDPartyStateChangePacket::GDPartyStateChangePacket(const GDPartyStateChangePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GDPartyStateChangePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.leader_pid_){}
    , decltype(_impl_.pid_){}
    , decltype(_impl_.role_){}
    , decltype(_impl_.flag_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.leader_pid_, &from._impl_.leader_pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.flag_) -
    reinterpret_cast<char*>(&_impl_.leader_pid_)) + sizeof(_impl_.flag_));
  // @@protoc_insertion_point(copy_constructor:network.GDPartyStateChangePacket)
}

inline void GDPartyStateChangePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.leader_pid_){0u}
    , decltype(_impl_.pid_){0u}
    , decltype(_impl_.role_){0u}
    , decltype(_impl_.flag_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GDPartyStateChangePacket::~GDPartyStateChangePacket() {
  // @@protoc_insertion_point(destructor:network.GDPartyStateChangePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GDPartyStateChangePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GDPartyStateChangePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GDPartyStateChangePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GDPartyStateChangePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.leader_pid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.flag_) -
      reinterpret_cast<char*>(&_impl_.leader_pid_)) + sizeof(_impl_.flag_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GDPartyStateChangePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 leader_pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.leader_pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 pid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 role = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.role_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool flag = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GDPartyStateChangePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GDPartyStateChangePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 leader_pid = 1;
  if (this->_internal_leader_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_leader_pid(), target);
  }

  // uint32 pid = 2;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_pid(), target);
  }

  // uint32 role = 3;
  if (this->_internal_role() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_role(), target);
  }

  // bool flag = 4;
  if (this->_internal_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_flag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GDPartyStateChangePacket)
  return target;
}

size_t GDPartyStateChangePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GDPartyStateChangePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 leader_pid = 1;
  if (this->_internal_leader_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_leader_pid());
  }

  // uint32 pid = 2;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid());
  }

  // uint32 role = 3;
  if (this->_internal_role() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_role());
  }

  // bool flag = 4;
  if (this->_internal_flag() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GDPartyStateChangePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GDPartyStateChangePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GDPartyStateChangePacket::GetClassData() const { return &_class_data_; }


void GDPartyStateChangePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GDPartyStateChangePacket*>(&to_msg);
  auto& from = static_cast<const GDPartyStateChangePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GDPartyStateChangePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_leader_pid() != 0) {
    _this->_internal_set_leader_pid(from._internal_leader_pid());
  }
  if (from._internal_pid() != 0) {
    _this->_internal_set_pid(from._internal_pid());
  }
  if (from._internal_role() != 0) {
    _this->_internal_set_role(from._internal_role());
  }
  if (from._internal_flag() != 0) {
    _this->_internal_set_flag(from._internal_flag());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GDPartyStateChangePacket::CopyFrom(const GDPartyStateChangePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GDPartyStateChangePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GDPartyStateChangePacket::IsInitialized() const {
  return true;
}

void GDPartyStateChangePacket::InternalSwap(GDPartyStateChangePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GDPartyStateChangePacket, _impl_.flag_)
      + sizeof(GDPartyStateChangePacket::_impl_.flag_)
      - PROTOBUF_FIELD_OFFSET(GDPartyStateChangePacket, _impl_.leader_pid_)>(
          reinterpret_cast<char*>(&_impl_.leader_pid_),
          reinterpret_cast<char*>(&other->_impl_.leader_pid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GDPartyStateChangePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gd_5fpackets_2eproto_getter, &descriptor_table_gd_5fpackets_2eproto_once,
      file_level_metadata_gd_5fpackets_2eproto[75]);
}

// ===================================================================

class GDPartySetMemberLevelPacket::_Internal {
 public:
};

GDPartySetMemberLevelPacket::GDPartySetMemberLevelPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GDPartySetMemberLevelPacket)
}
GDPartySetMemberLevelPacket::GDPartySetMemberLevelPacket(const GDPartySetMemberLevelPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GDPartySetMemberLevelPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.leader_pid_){}
    , decltype(_impl_.pid_){}
    , decltype(_impl_.level_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.leader_pid_, &from._impl_.leader_pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.level_) -
    reinterpret_cast<char*>(&_impl_.leader_pid_)) + sizeof(_impl_.level_));
  // @@protoc_insertion_point(copy_constructor:network.GDPartySetMemberLevelPacket)
}

inline void GDPartySetMemberLevelPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.leader_pid_){0u}
    , decltype(_impl_.pid_){0u}
    , decltype(_impl_.level_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GDPartySetMemberLevelPacket::~GDPartySetMemberLevelPacket() {
  // @@protoc_insertion_point(destructor:network.GDPartySetMemberLevelPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GDPartySetMemberLevelPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GDPartySetMemberLevelPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GDPartySetMemberLevelPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GDPartySetMemberLevelPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.leader_pid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.level_) -
      reinterpret_cast<char*>(&_impl_.leader_pid_)) + sizeof(_impl_.level_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GDPartySetMemberLevelPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 leader_pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.leader_pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 pid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 level = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GDPartySetMemberLevelPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GDPartySetMemberLevelPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 leader_pid = 1;
  if (this->_internal_leader_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_leader_pid(), target);
  }

  // uint32 pid = 2;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_pid(), target);
  }

  // uint32 level = 3;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GDPartySetMemberLevelPacket)
  return target;
}

size_t GDPartySetMemberLevelPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GDPartySetMemberLevelPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 leader_pid = 1;
  if (this->_internal_leader_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_leader_pid());
  }

  // uint32 pid = 2;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid());
  }

  // uint32 level = 3;
  if (this->_internal_level() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_level());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GDPartySetMemberLevelPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GDPartySetMemberLevelPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GDPartySetMemberLevelPacket::GetClassData() const { return &_class_data_; }


void GDPartySetMemberLevelPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GDPartySetMemberLevelPacket*>(&to_msg);
  auto& from = static_cast<const GDPartySetMemberLevelPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GDPartySetMemberLevelPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_leader_pid() != 0) {
    _this->_internal_set_leader_pid(from._internal_leader_pid());
  }
  if (from._internal_pid() != 0) {
    _this->_internal_set_pid(from._internal_pid());
  }
  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GDPartySetMemberLevelPacket::CopyFrom(const GDPartySetMemberLevelPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GDPartySetMemberLevelPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GDPartySetMemberLevelPacket::IsInitialized() const {
  return true;
}

void GDPartySetMemberLevelPacket::InternalSwap(GDPartySetMemberLevelPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GDPartySetMemberLevelPacket, _impl_.level_)
      + sizeof(GDPartySetMemberLevelPacket::_impl_.level_)
      - PROTOBUF_FIELD_OFFSET(GDPartySetMemberLevelPacket, _impl_.leader_pid_)>(
          reinterpret_cast<char*>(&_impl_.leader_pid_),
          reinterpret_cast<char*>(&other->_impl_.leader_pid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GDPartySetMemberLevelPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gd_5fpackets_2eproto_getter, &descriptor_table_gd_5fpackets_2eproto_once,
      file_level_metadata_gd_5fpackets_2eproto[76]);
}

// ===================================================================

class GDGuildCreatePacket::_Internal {
 public:
};

GDGuildCreatePacket::GDGuildCreatePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GDGuildCreatePacket)
}
GDGuildCreatePacket::GDGuildCreatePacket(const GDGuildCreatePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GDGuildCreatePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.guild_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.guild_id_ = from._impl_.guild_id_;
  // @@protoc_insertion_point(copy_constructor:network.GDGuildCreatePacket)
}

inline void GDGuildCreatePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.guild_id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GDGuildCreatePacket::~GDGuildCreatePacket() {
  // @@protoc_insertion_point(destructor:network.GDGuildCreatePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GDGuildCreatePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GDGuildCreatePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GDGuildCreatePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GDGuildCreatePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.guild_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GDGuildCreatePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 guild_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GDGuildCreatePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GDGuildCreatePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 guild_id = 1;
  if (this->_internal_guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_guild_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GDGuildCreatePacket)
  return target;
}

size_t GDGuildCreatePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GDGuildCreatePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 guild_id = 1;
  if (this->_internal_guild_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_guild_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GDGuildCreatePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GDGuildCreatePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GDGuildCreatePacket::GetClassData() const { return &_class_data_; }


void GDGuildCreatePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GDGuildCreatePacket*>(&to_msg);
  auto& from = static_cast<const GDGuildCreatePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GDGuildCreatePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_guild_id() != 0) {
    _this->_internal_set_guild_id(from._internal_guild_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GDGuildCreatePacket::CopyFrom(const GDGuildCreatePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GDGuildCreatePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GDGuildCreatePacket::IsInitialized() const {
  return true;
}

void GDGuildCreatePacket::InternalSwap(GDGuildCreatePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.guild_id_, other->_impl_.guild_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GDGuildCreatePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gd_5fpackets_2eproto_getter, &descriptor_table_gd_5fpackets_2eproto_once,
      file_level_metadata_gd_5fpackets_2eproto[77]);
}

// ===================================================================

class GDGuildSkillUpdatePacket::_Internal {
 public:
};

GDGuildSkillUpdatePacket::GDGuildSkillUpdatePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GDGuildSkillUpdatePacket)
}
GDGuildSkillUpdatePacket::GDGuildSkillUpdatePacket(const GDGuildSkillUpdatePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GDGuildSkillUpdatePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.skill_levels_){from._impl_.skill_levels_}
    , /*decltype(_impl_._skill_levels_cached_byte_size_)*/{0}
    , decltype(_impl_.guild_id_){}
    , decltype(_impl_.amount_){}
    , decltype(_impl_.skill_point_){}
    , decltype(_impl_.save_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.guild_id_, &from._impl_.guild_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.save_) -
    reinterpret_cast<char*>(&_impl_.guild_id_)) + sizeof(_impl_.save_));
  // @@protoc_insertion_point(copy_constructor:network.GDGuildSkillUpdatePacket)
}

inline void GDGuildSkillUpdatePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.skill_levels_){arena}
    , /*decltype(_impl_._skill_levels_cached_byte_size_)*/{0}
    , decltype(_impl_.guild_id_){0u}
    , decltype(_impl_.amount_){0}
    , decltype(_impl_.skill_point_){0u}
    , decltype(_impl_.save_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GDGuildSkillUpdatePacket::~GDGuildSkillUpdatePacket() {
  // @@protoc_insertion_point(destructor:network.GDGuildSkillUpdatePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GDGuildSkillUpdatePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.skill_levels_.~RepeatedField();
}

void GDGuildSkillUpdatePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GDGuildSkillUpdatePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GDGuildSkillUpdatePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.skill_levels_.Clear();
  ::memset(&_impl_.guild_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.save_) -
      reinterpret_cast<char*>(&_impl_.guild_id_)) + sizeof(_impl_.save_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GDGuildSkillUpdatePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 guild_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 amount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 skill_levels = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_skill_levels(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_skill_levels(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 skill_point = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.skill_point_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool save = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.save_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GDGuildSkillUpdatePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GDGuildSkillUpdatePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 guild_id = 1;
  if (this->_internal_guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_guild_id(), target);
  }

  // int32 amount = 2;
  if (this->_internal_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_amount(), target);
  }

  // repeated uint32 skill_levels = 3;
  {
    int byte_size = _impl_._skill_levels_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          3, _internal_skill_levels(), byte_size, target);
    }
  }

  // uint32 skill_point = 4;
  if (this->_internal_skill_point() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_skill_point(), target);
  }

  // bool save = 5;
  if (this->_internal_save() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_save(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GDGuildSkillUpdatePacket)
  return target;
}

size_t GDGuildSkillUpdatePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GDGuildSkillUpdatePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 skill_levels = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.skill_levels_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._skill_levels_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint32 guild_id = 1;
  if (this->_internal_guild_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_guild_id());
  }

  // int32 amount = 2;
  if (this->_internal_amount() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_amount());
  }

  // uint32 skill_point = 4;
  if (this->_internal_skill_point() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_skill_point());
  }

  // bool save = 5;
  if (this->_internal_save() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GDGuildSkillUpdatePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GDGuildSkillUpdatePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GDGuildSkillUpdatePacket::GetClassData() const { return &_class_data_; }


void GDGuildSkillUpdatePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GDGuildSkillUpdatePacket*>(&to_msg);
  auto& from = static_cast<const GDGuildSkillUpdatePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GDGuildSkillUpdatePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.skill_levels_.MergeFrom(from._impl_.skill_levels_);
  if (from._internal_guild_id() != 0) {
    _this->_internal_set_guild_id(from._internal_guild_id());
  }
  if (from._internal_amount() != 0) {
    _this->_internal_set_amount(from._internal_amount());
  }
  if (from._internal_skill_point() != 0) {
    _this->_internal_set_skill_point(from._internal_skill_point());
  }
  if (from._internal_save() != 0) {
    _this->_internal_set_save(from._internal_save());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GDGuildSkillUpdatePacket::CopyFrom(const GDGuildSkillUpdatePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GDGuildSkillUpdatePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GDGuildSkillUpdatePacket::IsInitialized() const {
  return true;
}

void GDGuildSkillUpdatePacket::InternalSwap(GDGuildSkillUpdatePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.skill_levels_.InternalSwap(&other->_impl_.skill_levels_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GDGuildSkillUpdatePacket, _impl_.save_)
      + sizeof(GDGuildSkillUpdatePacket::_impl_.save_)
      - PROTOBUF_FIELD_OFFSET(GDGuildSkillUpdatePacket, _impl_.guild_id_)>(
          reinterpret_cast<char*>(&_impl_.guild_id_),
          reinterpret_cast<char*>(&other->_impl_.guild_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GDGuildSkillUpdatePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gd_5fpackets_2eproto_getter, &descriptor_table_gd_5fpackets_2eproto_once,
      file_level_metadata_gd_5fpackets_2eproto[78]);
}

// ===================================================================

class GDGuildExpUpdatePacket::_Internal {
 public:
};

GDGuildExpUpdatePacket::GDGuildExpUpdatePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GDGuildExpUpdatePacket)
}
GDGuildExpUpdatePacket::GDGuildExpUpdatePacket(const GDGuildExpUpdatePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GDGuildExpUpdatePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.guild_id_){}
    , decltype(_impl_.amount_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.guild_id_, &from._impl_.guild_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.amount_) -
    reinterpret_cast<char*>(&_impl_.guild_id_)) + sizeof(_impl_.amount_));
  // @@protoc_insertion_point(copy_constructor:network.GDGuildExpUpdatePacket)
}

inline void GDGuildExpUpdatePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.guild_id_){0u}
    , decltype(_impl_.amount_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GDGuildExpUpdatePacket::~GDGuildExpUpdatePacket() {
  // @@protoc_insertion_point(destructor:network.GDGuildExpUpdatePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GDGuildExpUpdatePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GDGuildExpUpdatePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GDGuildExpUpdatePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GDGuildExpUpdatePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.guild_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.amount_) -
      reinterpret_cast<char*>(&_impl_.guild_id_)) + sizeof(_impl_.amount_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GDGuildExpUpdatePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 guild_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 amount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GDGuildExpUpdatePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GDGuildExpUpdatePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 guild_id = 1;
  if (this->_internal_guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_guild_id(), target);
  }

  // int32 amount = 2;
  if (this->_internal_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GDGuildExpUpdatePacket)
  return target;
}

size_t GDGuildExpUpdatePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GDGuildExpUpdatePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 guild_id = 1;
  if (this->_internal_guild_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_guild_id());
  }

  // int32 amount = 2;
  if (this->_internal_amount() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_amount());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GDGuildExpUpdatePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GDGuildExpUpdatePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GDGuildExpUpdatePacket::GetClassData() const { return &_class_data_; }


void GDGuildExpUpdatePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GDGuildExpUpdatePacket*>(&to_msg);
  auto& from = static_cast<const GDGuildExpUpdatePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GDGuildExpUpdatePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_guild_id() != 0) {
    _this->_internal_set_guild_id(from._internal_guild_id());
  }
  if (from._internal_amount() != 0) {
    _this->_internal_set_amount(from._internal_amount());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GDGuildExpUpdatePacket::CopyFrom(const GDGuildExpUpdatePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GDGuildExpUpdatePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GDGuildExpUpdatePacket::IsInitialized() const {
  return true;
}

void GDGuildExpUpdatePacket::InternalSwap(GDGuildExpUpdatePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GDGuildExpUpdatePacket, _impl_.amount_)
      + sizeof(GDGuildExpUpdatePacket::_impl_.amount_)
      - PROTOBUF_FIELD_OFFSET(GDGuildExpUpdatePacket, _impl_.guild_id_)>(
          reinterpret_cast<char*>(&_impl_.guild_id_),
          reinterpret_cast<char*>(&other->_impl_.guild_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GDGuildExpUpdatePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gd_5fpackets_2eproto_getter, &descriptor_table_gd_5fpackets_2eproto_once,
      file_level_metadata_gd_5fpackets_2eproto[79]);
}

// ===================================================================

class GDGuildAddMemberPacket::_Internal {
 public:
};

GDGuildAddMemberPacket::GDGuildAddMemberPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GDGuildAddMemberPacket)
}
GDGuildAddMemberPacket::GDGuildAddMemberPacket(const GDGuildAddMemberPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GDGuildAddMemberPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pid_){}
    , decltype(_impl_.guild_id_){}
    , decltype(_impl_.grade_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.pid_, &from._impl_.pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.grade_) -
    reinterpret_cast<char*>(&_impl_.pid_)) + sizeof(_impl_.grade_));
  // @@protoc_insertion_point(copy_constructor:network.GDGuildAddMemberPacket)
}

inline void GDGuildAddMemberPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pid_){0u}
    , decltype(_impl_.guild_id_){0u}
    , decltype(_impl_.grade_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GDGuildAddMemberPacket::~GDGuildAddMemberPacket() {
  // @@protoc_insertion_point(destructor:network.GDGuildAddMemberPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GDGuildAddMemberPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GDGuildAddMemberPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GDGuildAddMemberPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GDGuildAddMemberPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.pid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.grade_) -
      reinterpret_cast<char*>(&_impl_.pid_)) + sizeof(_impl_.grade_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GDGuildAddMemberPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 guild_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 grade = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.grade_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GDGuildAddMemberPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GDGuildAddMemberPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pid(), target);
  }

  // uint32 guild_id = 2;
  if (this->_internal_guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_guild_id(), target);
  }

  // uint32 grade = 3;
  if (this->_internal_grade() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_grade(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GDGuildAddMemberPacket)
  return target;
}

size_t GDGuildAddMemberPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GDGuildAddMemberPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid());
  }

  // uint32 guild_id = 2;
  if (this->_internal_guild_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_guild_id());
  }

  // uint32 grade = 3;
  if (this->_internal_grade() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_grade());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GDGuildAddMemberPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GDGuildAddMemberPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GDGuildAddMemberPacket::GetClassData() const { return &_class_data_; }


void GDGuildAddMemberPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GDGuildAddMemberPacket*>(&to_msg);
  auto& from = static_cast<const GDGuildAddMemberPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GDGuildAddMemberPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_pid() != 0) {
    _this->_internal_set_pid(from._internal_pid());
  }
  if (from._internal_guild_id() != 0) {
    _this->_internal_set_guild_id(from._internal_guild_id());
  }
  if (from._internal_grade() != 0) {
    _this->_internal_set_grade(from._internal_grade());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GDGuildAddMemberPacket::CopyFrom(const GDGuildAddMemberPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GDGuildAddMemberPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GDGuildAddMemberPacket::IsInitialized() const {
  return true;
}

void GDGuildAddMemberPacket::InternalSwap(GDGuildAddMemberPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GDGuildAddMemberPacket, _impl_.grade_)
      + sizeof(GDGuildAddMemberPacket::_impl_.grade_)
      - PROTOBUF_FIELD_OFFSET(GDGuildAddMemberPacket, _impl_.pid_)>(
          reinterpret_cast<char*>(&_impl_.pid_),
          reinterpret_cast<char*>(&other->_impl_.pid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GDGuildAddMemberPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gd_5fpackets_2eproto_getter, &descriptor_table_gd_5fpackets_2eproto_once,
      file_level_metadata_gd_5fpackets_2eproto[80]);
}

// ===================================================================

class GDGuildRemoveMemberPacket::_Internal {
 public:
};

GDGuildRemoveMemberPacket::GDGuildRemoveMemberPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GDGuildRemoveMemberPacket)
}
GDGuildRemoveMemberPacket::GDGuildRemoveMemberPacket(const GDGuildRemoveMemberPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GDGuildRemoveMemberPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.guild_id_){}
    , decltype(_impl_.pid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.guild_id_, &from._impl_.guild_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.pid_) -
    reinterpret_cast<char*>(&_impl_.guild_id_)) + sizeof(_impl_.pid_));
  // @@protoc_insertion_point(copy_constructor:network.GDGuildRemoveMemberPacket)
}

inline void GDGuildRemoveMemberPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.guild_id_){0u}
    , decltype(_impl_.pid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GDGuildRemoveMemberPacket::~GDGuildRemoveMemberPacket() {
  // @@protoc_insertion_point(destructor:network.GDGuildRemoveMemberPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GDGuildRemoveMemberPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GDGuildRemoveMemberPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GDGuildRemoveMemberPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GDGuildRemoveMemberPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.guild_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.pid_) -
      reinterpret_cast<char*>(&_impl_.guild_id_)) + sizeof(_impl_.pid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GDGuildRemoveMemberPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 guild_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 pid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GDGuildRemoveMemberPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GDGuildRemoveMemberPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 guild_id = 1;
  if (this->_internal_guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_guild_id(), target);
  }

  // uint32 pid = 2;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_pid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GDGuildRemoveMemberPacket)
  return target;
}

size_t GDGuildRemoveMemberPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GDGuildRemoveMemberPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 guild_id = 1;
  if (this->_internal_guild_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_guild_id());
  }

  // uint32 pid = 2;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GDGuildRemoveMemberPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GDGuildRemoveMemberPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GDGuildRemoveMemberPacket::GetClassData() const { return &_class_data_; }


void GDGuildRemoveMemberPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GDGuildRemoveMemberPacket*>(&to_msg);
  auto& from = static_cast<const GDGuildRemoveMemberPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GDGuildRemoveMemberPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_guild_id() != 0) {
    _this->_internal_set_guild_id(from._internal_guild_id());
  }
  if (from._internal_pid() != 0) {
    _this->_internal_set_pid(from._internal_pid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GDGuildRemoveMemberPacket::CopyFrom(const GDGuildRemoveMemberPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GDGuildRemoveMemberPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GDGuildRemoveMemberPacket::IsInitialized() const {
  return true;
}

void GDGuildRemoveMemberPacket::InternalSwap(GDGuildRemoveMemberPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GDGuildRemoveMemberPacket, _impl_.pid_)
      + sizeof(GDGuildRemoveMemberPacket::_impl_.pid_)
      - PROTOBUF_FIELD_OFFSET(GDGuildRemoveMemberPacket, _impl_.guild_id_)>(
          reinterpret_cast<char*>(&_impl_.guild_id_),
          reinterpret_cast<char*>(&other->_impl_.guild_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GDGuildRemoveMemberPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gd_5fpackets_2eproto_getter, &descriptor_table_gd_5fpackets_2eproto_once,
      file_level_metadata_gd_5fpackets_2eproto[81]);
}

// ===================================================================

class GDGuildChangeGradePacket::_Internal {
 public:
};

GDGuildChangeGradePacket::GDGuildChangeGradePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GDGuildChangeGradePacket)
}
GDGuildChangeGradePacket::GDGuildChangeGradePacket(const GDGuildChangeGradePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GDGuildChangeGradePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.guild_id_){}
    , decltype(_impl_.grade_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.guild_id_, &from._impl_.guild_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.grade_) -
    reinterpret_cast<char*>(&_impl_.guild_id_)) + sizeof(_impl_.grade_));
  // @@protoc_insertion_point(copy_constructor:network.GDGuildChangeGradePacket)
}

inline void GDGuildChangeGradePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.guild_id_){0u}
    , decltype(_impl_.grade_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GDGuildChangeGradePacket::~GDGuildChangeGradePacket() {
  // @@protoc_insertion_point(destructor:network.GDGuildChangeGradePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GDGuildChangeGradePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GDGuildChangeGradePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GDGuildChangeGradePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GDGuildChangeGradePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.guild_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.grade_) -
      reinterpret_cast<char*>(&_impl_.guild_id_)) + sizeof(_impl_.grade_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GDGuildChangeGradePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 guild_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 grade = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.grade_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GDGuildChangeGradePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GDGuildChangeGradePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 guild_id = 1;
  if (this->_internal_guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_guild_id(), target);
  }

  // uint32 grade = 2;
  if (this->_internal_grade() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_grade(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GDGuildChangeGradePacket)
  return target;
}

size_t GDGuildChangeGradePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GDGuildChangeGradePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 guild_id = 1;
  if (this->_internal_guild_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_guild_id());
  }

  // uint32 grade = 2;
  if (this->_internal_grade() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_grade());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GDGuildChangeGradePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GDGuildChangeGradePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GDGuildChangeGradePacket::GetClassData() const { return &_class_data_; }


void GDGuildChangeGradePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GDGuildChangeGradePacket*>(&to_msg);
  auto& from = static_cast<const GDGuildChangeGradePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GDGuildChangeGradePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_guild_id() != 0) {
    _this->_internal_set_guild_id(from._internal_guild_id());
  }
  if (from._internal_grade() != 0) {
    _this->_internal_set_grade(from._internal_grade());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GDGuildChangeGradePacket::CopyFrom(const GDGuildChangeGradePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GDGuildChangeGradePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GDGuildChangeGradePacket::IsInitialized() const {
  return true;
}

void GDGuildChangeGradePacket::InternalSwap(GDGuildChangeGradePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GDGuildChangeGradePacket, _impl_.grade_)
      + sizeof(GDGuildChangeGradePacket::_impl_.grade_)
      - PROTOBUF_FIELD_OFFSET(GDGuildChangeGradePacket, _impl_.guild_id_)>(
          reinterpret_cast<char*>(&_impl_.guild_id_),
          reinterpret_cast<char*>(&other->_impl_.guild_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GDGuildChangeGradePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gd_5fpackets_2eproto_getter, &descriptor_table_gd_5fpackets_2eproto_once,
      file_level_metadata_gd_5fpackets_2eproto[82]);
}

// ===================================================================

class GDGuildChangeMemberDataPacket::_Internal {
 public:
};

GDGuildChangeMemberDataPacket::GDGuildChangeMemberDataPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GDGuildChangeMemberDataPacket)
}
GDGuildChangeMemberDataPacket::GDGuildChangeMemberDataPacket(const GDGuildChangeMemberDataPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GDGuildChangeMemberDataPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.guild_id_){}
    , decltype(_impl_.pid_){}
    , decltype(_impl_.offer_){}
    , decltype(_impl_.level_){}
    , decltype(_impl_.grade_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.guild_id_, &from._impl_.guild_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.grade_) -
    reinterpret_cast<char*>(&_impl_.guild_id_)) + sizeof(_impl_.grade_));
  // @@protoc_insertion_point(copy_constructor:network.GDGuildChangeMemberDataPacket)
}

inline void GDGuildChangeMemberDataPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.guild_id_){0u}
    , decltype(_impl_.pid_){0u}
    , decltype(_impl_.offer_){0u}
    , decltype(_impl_.level_){0u}
    , decltype(_impl_.grade_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GDGuildChangeMemberDataPacket::~GDGuildChangeMemberDataPacket() {
  // @@protoc_insertion_point(destructor:network.GDGuildChangeMemberDataPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GDGuildChangeMemberDataPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GDGuildChangeMemberDataPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GDGuildChangeMemberDataPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GDGuildChangeMemberDataPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.guild_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.grade_) -
      reinterpret_cast<char*>(&_impl_.guild_id_)) + sizeof(_impl_.grade_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GDGuildChangeMemberDataPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 guild_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 pid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 offer = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.offer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 level = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 grade = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.grade_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GDGuildChangeMemberDataPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GDGuildChangeMemberDataPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 guild_id = 1;
  if (this->_internal_guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_guild_id(), target);
  }

  // uint32 pid = 2;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_pid(), target);
  }

  // uint32 offer = 3;
  if (this->_internal_offer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_offer(), target);
  }

  // uint32 level = 4;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_level(), target);
  }

  // uint32 grade = 5;
  if (this->_internal_grade() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_grade(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GDGuildChangeMemberDataPacket)
  return target;
}

size_t GDGuildChangeMemberDataPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GDGuildChangeMemberDataPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 guild_id = 1;
  if (this->_internal_guild_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_guild_id());
  }

  // uint32 pid = 2;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid());
  }

  // uint32 offer = 3;
  if (this->_internal_offer() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_offer());
  }

  // uint32 level = 4;
  if (this->_internal_level() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_level());
  }

  // uint32 grade = 5;
  if (this->_internal_grade() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_grade());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GDGuildChangeMemberDataPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GDGuildChangeMemberDataPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GDGuildChangeMemberDataPacket::GetClassData() const { return &_class_data_; }


void GDGuildChangeMemberDataPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GDGuildChangeMemberDataPacket*>(&to_msg);
  auto& from = static_cast<const GDGuildChangeMemberDataPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GDGuildChangeMemberDataPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_guild_id() != 0) {
    _this->_internal_set_guild_id(from._internal_guild_id());
  }
  if (from._internal_pid() != 0) {
    _this->_internal_set_pid(from._internal_pid());
  }
  if (from._internal_offer() != 0) {
    _this->_internal_set_offer(from._internal_offer());
  }
  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  if (from._internal_grade() != 0) {
    _this->_internal_set_grade(from._internal_grade());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GDGuildChangeMemberDataPacket::CopyFrom(const GDGuildChangeMemberDataPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GDGuildChangeMemberDataPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GDGuildChangeMemberDataPacket::IsInitialized() const {
  return true;
}

void GDGuildChangeMemberDataPacket::InternalSwap(GDGuildChangeMemberDataPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GDGuildChangeMemberDataPacket, _impl_.grade_)
      + sizeof(GDGuildChangeMemberDataPacket::_impl_.grade_)
      - PROTOBUF_FIELD_OFFSET(GDGuildChangeMemberDataPacket, _impl_.guild_id_)>(
          reinterpret_cast<char*>(&_impl_.guild_id_),
          reinterpret_cast<char*>(&other->_impl_.guild_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GDGuildChangeMemberDataPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gd_5fpackets_2eproto_getter, &descriptor_table_gd_5fpackets_2eproto_once,
      file_level_metadata_gd_5fpackets_2eproto[83]);
}

// ===================================================================

class GDGuildDisbandPacket::_Internal {
 public:
};

GDGuildDisbandPacket::GDGuildDisbandPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GDGuildDisbandPacket)
}
GDGuildDisbandPacket::GDGuildDisbandPacket(const GDGuildDisbandPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GDGuildDisbandPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.guild_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.guild_id_ = from._impl_.guild_id_;
  // @@protoc_insertion_point(copy_constructor:network.GDGuildDisbandPacket)
}

inline void GDGuildDisbandPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.guild_id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GDGuildDisbandPacket::~GDGuildDisbandPacket() {
  // @@protoc_insertion_point(destructor:network.GDGuildDisbandPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GDGuildDisbandPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GDGuildDisbandPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GDGuildDisbandPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GDGuildDisbandPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.guild_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GDGuildDisbandPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 guild_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GDGuildDisbandPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GDGuildDisbandPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 guild_id = 1;
  if (this->_internal_guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_guild_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GDGuildDisbandPacket)
  return target;
}

size_t GDGuildDisbandPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GDGuildDisbandPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 guild_id = 1;
  if (this->_internal_guild_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_guild_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GDGuildDisbandPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GDGuildDisbandPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GDGuildDisbandPacket::GetClassData() const { return &_class_data_; }


void GDGuildDisbandPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GDGuildDisbandPacket*>(&to_msg);
  auto& from = static_cast<const GDGuildDisbandPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GDGuildDisbandPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_guild_id() != 0) {
    _this->_internal_set_guild_id(from._internal_guild_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GDGuildDisbandPacket::CopyFrom(const GDGuildDisbandPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GDGuildDisbandPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GDGuildDisbandPacket::IsInitialized() const {
  return true;
}

void GDGuildDisbandPacket::InternalSwap(GDGuildDisbandPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.guild_id_, other->_impl_.guild_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GDGuildDisbandPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gd_5fpackets_2eproto_getter, &descriptor_table_gd_5fpackets_2eproto_once,
      file_level_metadata_gd_5fpackets_2eproto[84]);
}

// ===================================================================

class GDGuildDungeonPacket::_Internal {
 public:
};

GDGuildDungeonPacket::GDGuildDungeonPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GDGuildDungeonPacket)
}
GDGuildDungeonPacket::GDGuildDungeonPacket(const GDGuildDungeonPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GDGuildDungeonPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.guild_id_){}
    , decltype(_impl_.channel_){}
    , decltype(_impl_.map_index_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.guild_id_, &from._impl_.guild_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.map_index_) -
    reinterpret_cast<char*>(&_impl_.guild_id_)) + sizeof(_impl_.map_index_));
  // @@protoc_insertion_point(copy_constructor:network.GDGuildDungeonPacket)
}

inline void GDGuildDungeonPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.guild_id_){0u}
    , decltype(_impl_.channel_){0u}
    , decltype(_impl_.map_index_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GDGuildDungeonPacket::~GDGuildDungeonPacket() {
  // @@protoc_insertion_point(destructor:network.GDGuildDungeonPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GDGuildDungeonPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GDGuildDungeonPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GDGuildDungeonPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GDGuildDungeonPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.guild_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.map_index_) -
      reinterpret_cast<char*>(&_impl_.guild_id_)) + sizeof(_impl_.map_index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GDGuildDungeonPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 guild_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 channel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 map_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.map_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GDGuildDungeonPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GDGuildDungeonPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 guild_id = 1;
  if (this->_internal_guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_guild_id(), target);
  }

  // uint32 channel = 2;
  if (this->_internal_channel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_channel(), target);
  }

  // uint32 map_index = 3;
  if (this->_internal_map_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_map_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GDGuildDungeonPacket)
  return target;
}

size_t GDGuildDungeonPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GDGuildDungeonPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 guild_id = 1;
  if (this->_internal_guild_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_guild_id());
  }

  // uint32 channel = 2;
  if (this->_internal_channel() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel());
  }

  // uint32 map_index = 3;
  if (this->_internal_map_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_map_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GDGuildDungeonPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GDGuildDungeonPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GDGuildDungeonPacket::GetClassData() const { return &_class_data_; }


void GDGuildDungeonPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GDGuildDungeonPacket*>(&to_msg);
  auto& from = static_cast<const GDGuildDungeonPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GDGuildDungeonPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_guild_id() != 0) {
    _this->_internal_set_guild_id(from._internal_guild_id());
  }
  if (from._internal_channel() != 0) {
    _this->_internal_set_channel(from._internal_channel());
  }
  if (from._internal_map_index() != 0) {
    _this->_internal_set_map_index(from._internal_map_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GDGuildDungeonPacket::CopyFrom(const GDGuildDungeonPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GDGuildDungeonPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GDGuildDungeonPacket::IsInitialized() const {
  return true;
}

void GDGuildDungeonPacket::InternalSwap(GDGuildDungeonPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GDGuildDungeonPacket, _impl_.map_index_)
      + sizeof(GDGuildDungeonPacket::_impl_.map_index_)
      - PROTOBUF_FIELD_OFFSET(GDGuildDungeonPacket, _impl_.guild_id_)>(
          reinterpret_cast<char*>(&_impl_.guild_id_),
          reinterpret_cast<char*>(&other->_impl_.guild_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GDGuildDungeonPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gd_5fpackets_2eproto_getter, &descriptor_table_gd_5fpackets_2eproto_once,
      file_level_metadata_gd_5fpackets_2eproto[85]);
}

// ===================================================================

class GDGuildDungeonCDPacket::_Internal {
 public:
};

GDGuildDungeonCDPacket::GDGuildDungeonCDPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GDGuildDungeonCDPacket)
}
GDGuildDungeonCDPacket::GDGuildDungeonCDPacket(const GDGuildDungeonCDPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GDGuildDungeonCDPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.guild_id_){}
    , decltype(_impl_.time_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.guild_id_, &from._impl_.guild_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.time_) -
    reinterpret_cast<char*>(&_impl_.guild_id_)) + sizeof(_impl_.time_));
  // @@protoc_insertion_point(copy_constructor:network.GDGuildDungeonCDPacket)
}

inline void GDGuildDungeonCDPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.guild_id_){0u}
    , decltype(_impl_.time_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GDGuildDungeonCDPacket::~GDGuildDungeonCDPacket() {
  // @@protoc_insertion_point(destructor:network.GDGuildDungeonCDPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GDGuildDungeonCDPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GDGuildDungeonCDPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GDGuildDungeonCDPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GDGuildDungeonCDPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.guild_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.time_) -
      reinterpret_cast<char*>(&_impl_.guild_id_)) + sizeof(_impl_.time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GDGuildDungeonCDPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 guild_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GDGuildDungeonCDPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GDGuildDungeonCDPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 guild_id = 1;
  if (this->_internal_guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_guild_id(), target);
  }

  // uint32 time = 2;
  if (this->_internal_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GDGuildDungeonCDPacket)
  return target;
}

size_t GDGuildDungeonCDPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GDGuildDungeonCDPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 guild_id = 1;
  if (this->_internal_guild_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_guild_id());
  }

  // uint32 time = 2;
  if (this->_internal_time() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_time());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GDGuildDungeonCDPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GDGuildDungeonCDPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GDGuildDungeonCDPacket::GetClassData() const { return &_class_data_; }


void GDGuildDungeonCDPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GDGuildDungeonCDPacket*>(&to_msg);
  auto& from = static_cast<const GDGuildDungeonCDPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GDGuildDungeonCDPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_guild_id() != 0) {
    _this->_internal_set_guild_id(from._internal_guild_id());
  }
  if (from._internal_time() != 0) {
    _this->_internal_set_time(from._internal_time());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GDGuildDungeonCDPacket::CopyFrom(const GDGuildDungeonCDPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GDGuildDungeonCDPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GDGuildDungeonCDPacket::IsInitialized() const {
  return true;
}

void GDGuildDungeonCDPacket::InternalSwap(GDGuildDungeonCDPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GDGuildDungeonCDPacket, _impl_.time_)
      + sizeof(GDGuildDungeonCDPacket::_impl_.time_)
      - PROTOBUF_FIELD_OFFSET(GDGuildDungeonCDPacket, _impl_.guild_id_)>(
          reinterpret_cast<char*>(&_impl_.guild_id_),
          reinterpret_cast<char*>(&other->_impl_.guild_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GDGuildDungeonCDPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gd_5fpackets_2eproto_getter, &descriptor_table_gd_5fpackets_2eproto_once,
      file_level_metadata_gd_5fpackets_2eproto[86]);
}

// ===================================================================

class GDGuildWarPacket::_Internal {
 public:
};

GDGuildWarPacket::GDGuildWarPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GDGuildWarPacket)
}
GDGuildWarPacket::GDGuildWarPacket(const GDGuildWarPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GDGuildWarPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , decltype(_impl_.war_){}
    , decltype(_impl_.guild_from_){}
    , decltype(_impl_.guild_to_){}
    , decltype(_impl_.war_price_){}
    , decltype(_impl_.initial_score_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.initial_score_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.initial_score_));
  // @@protoc_insertion_point(copy_constructor:network.GDGuildWarPacket)
}

inline void GDGuildWarPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){0u}
    , decltype(_impl_.war_){0u}
    , decltype(_impl_.guild_from_){0u}
    , decltype(_impl_.guild_to_){0u}
    , decltype(_impl_.war_price_){0}
    , decltype(_impl_.initial_score_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GDGuildWarPacket::~GDGuildWarPacket() {
  // @@protoc_insertion_point(destructor:network.GDGuildWarPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GDGuildWarPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GDGuildWarPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GDGuildWarPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GDGuildWarPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.initial_score_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.initial_score_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GDGuildWarPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 war = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.war_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 guild_from = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.guild_from_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 guild_to = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.guild_to_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 war_price = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.war_price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 initial_score = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.initial_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GDGuildWarPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GDGuildWarPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // uint32 war = 2;
  if (this->_internal_war() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_war(), target);
  }

  // uint32 guild_from = 3;
  if (this->_internal_guild_from() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_guild_from(), target);
  }

  // uint32 guild_to = 4;
  if (this->_internal_guild_to() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_guild_to(), target);
  }

  // int32 war_price = 5;
  if (this->_internal_war_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_war_price(), target);
  }

  // int32 initial_score = 6;
  if (this->_internal_initial_score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_initial_score(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GDGuildWarPacket)
  return target;
}

size_t GDGuildWarPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GDGuildWarPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
  }

  // uint32 war = 2;
  if (this->_internal_war() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_war());
  }

  // uint32 guild_from = 3;
  if (this->_internal_guild_from() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_guild_from());
  }

  // uint32 guild_to = 4;
  if (this->_internal_guild_to() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_guild_to());
  }

  // int32 war_price = 5;
  if (this->_internal_war_price() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_war_price());
  }

  // int32 initial_score = 6;
  if (this->_internal_initial_score() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_initial_score());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GDGuildWarPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GDGuildWarPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GDGuildWarPacket::GetClassData() const { return &_class_data_; }


void GDGuildWarPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GDGuildWarPacket*>(&to_msg);
  auto& from = static_cast<const GDGuildWarPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GDGuildWarPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_war() != 0) {
    _this->_internal_set_war(from._internal_war());
  }
  if (from._internal_guild_from() != 0) {
    _this->_internal_set_guild_from(from._internal_guild_from());
  }
  if (from._internal_guild_to() != 0) {
    _this->_internal_set_guild_to(from._internal_guild_to());
  }
  if (from._internal_war_price() != 0) {
    _this->_internal_set_war_price(from._internal_war_price());
  }
  if (from._internal_initial_score() != 0) {
    _this->_internal_set_initial_score(from._internal_initial_score());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GDGuildWarPacket::CopyFrom(const GDGuildWarPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GDGuildWarPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GDGuildWarPacket::IsInitialized() const {
  return true;
}

void GDGuildWarPacket::InternalSwap(GDGuildWarPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GDGuildWarPacket, _impl_.initial_score_)
      + sizeof(GDGuildWarPacket::_impl_.initial_score_)
      - PROTOBUF_FIELD_OFFSET(GDGuildWarPacket, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GDGuildWarPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gd_5fpackets_2eproto_getter, &descriptor_table_gd_5fpackets_2eproto_once,
      file_level_metadata_gd_5fpackets_2eproto[87]);
}

// ===================================================================

class GDGuildWarScorePacket::_Internal {
 public:
};

GDGuildWarScorePacket::GDGuildWarScorePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GDGuildWarScorePacket)
}
GDGuildWarScorePacket::GDGuildWarScorePacket(const GDGuildWarScorePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GDGuildWarScorePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.guild_gain_point_){}
    , decltype(_impl_.guild_opponent_){}
    , decltype(_impl_.score_){}
    , decltype(_impl_.bet_score_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.guild_gain_point_, &from._impl_.guild_gain_point_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.bet_score_) -
    reinterpret_cast<char*>(&_impl_.guild_gain_point_)) + sizeof(_impl_.bet_score_));
  // @@protoc_insertion_point(copy_constructor:network.GDGuildWarScorePacket)
}

inline void GDGuildWarScorePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.guild_gain_point_){0u}
    , decltype(_impl_.guild_opponent_){0u}
    , decltype(_impl_.score_){0}
    , decltype(_impl_.bet_score_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GDGuildWarScorePacket::~GDGuildWarScorePacket() {
  // @@protoc_insertion_point(destructor:network.GDGuildWarScorePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GDGuildWarScorePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GDGuildWarScorePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GDGuildWarScorePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GDGuildWarScorePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.guild_gain_point_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.bet_score_) -
      reinterpret_cast<char*>(&_impl_.guild_gain_point_)) + sizeof(_impl_.bet_score_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GDGuildWarScorePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 guild_gain_point = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.guild_gain_point_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 guild_opponent = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.guild_opponent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 score = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 bet_score = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.bet_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GDGuildWarScorePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GDGuildWarScorePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 guild_gain_point = 1;
  if (this->_internal_guild_gain_point() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_guild_gain_point(), target);
  }

  // uint32 guild_opponent = 2;
  if (this->_internal_guild_opponent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_guild_opponent(), target);
  }

  // int32 score = 3;
  if (this->_internal_score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_score(), target);
  }

  // int32 bet_score = 4;
  if (this->_internal_bet_score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_bet_score(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GDGuildWarScorePacket)
  return target;
}

size_t GDGuildWarScorePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GDGuildWarScorePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 guild_gain_point = 1;
  if (this->_internal_guild_gain_point() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_guild_gain_point());
  }

  // uint32 guild_opponent = 2;
  if (this->_internal_guild_opponent() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_guild_opponent());
  }

  // int32 score = 3;
  if (this->_internal_score() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_score());
  }

  // int32 bet_score = 4;
  if (this->_internal_bet_score() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_bet_score());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GDGuildWarScorePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GDGuildWarScorePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GDGuildWarScorePacket::GetClassData() const { return &_class_data_; }


void GDGuildWarScorePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GDGuildWarScorePacket*>(&to_msg);
  auto& from = static_cast<const GDGuildWarScorePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GDGuildWarScorePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_guild_gain_point() != 0) {
    _this->_internal_set_guild_gain_point(from._internal_guild_gain_point());
  }
  if (from._internal_guild_opponent() != 0) {
    _this->_internal_set_guild_opponent(from._internal_guild_opponent());
  }
  if (from._internal_score() != 0) {
    _this->_internal_set_score(from._internal_score());
  }
  if (from._internal_bet_score() != 0) {
    _this->_internal_set_bet_score(from._internal_bet_score());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GDGuildWarScorePacket::CopyFrom(const GDGuildWarScorePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GDGuildWarScorePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GDGuildWarScorePacket::IsInitialized() const {
  return true;
}

void GDGuildWarScorePacket::InternalSwap(GDGuildWarScorePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GDGuildWarScorePacket, _impl_.bet_score_)
      + sizeof(GDGuildWarScorePacket::_impl_.bet_score_)
      - PROTOBUF_FIELD_OFFSET(GDGuildWarScorePacket, _impl_.guild_gain_point_)>(
          reinterpret_cast<char*>(&_impl_.guild_gain_point_),
          reinterpret_cast<char*>(&other->_impl_.guild_gain_point_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GDGuildWarScorePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gd_5fpackets_2eproto_getter, &descriptor_table_gd_5fpackets_2eproto_once,
      file_level_metadata_gd_5fpackets_2eproto[88]);
}

// ===================================================================

class GDGuildChangeLadderPointPacket::_Internal {
 public:
};

GDGuildChangeLadderPointPacket::GDGuildChangeLadderPointPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GDGuildChangeLadderPointPacket)
}
GDGuildChangeLadderPointPacket::GDGuildChangeLadderPointPacket(const GDGuildChangeLadderPointPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GDGuildChangeLadderPointPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.guild_id_){}
    , decltype(_impl_.change_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.guild_id_, &from._impl_.guild_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.change_) -
    reinterpret_cast<char*>(&_impl_.guild_id_)) + sizeof(_impl_.change_));
  // @@protoc_insertion_point(copy_constructor:network.GDGuildChangeLadderPointPacket)
}

inline void GDGuildChangeLadderPointPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.guild_id_){0u}
    , decltype(_impl_.change_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GDGuildChangeLadderPointPacket::~GDGuildChangeLadderPointPacket() {
  // @@protoc_insertion_point(destructor:network.GDGuildChangeLadderPointPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GDGuildChangeLadderPointPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GDGuildChangeLadderPointPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GDGuildChangeLadderPointPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GDGuildChangeLadderPointPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.guild_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.change_) -
      reinterpret_cast<char*>(&_impl_.guild_id_)) + sizeof(_impl_.change_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GDGuildChangeLadderPointPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 guild_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 change = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.change_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GDGuildChangeLadderPointPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GDGuildChangeLadderPointPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 guild_id = 1;
  if (this->_internal_guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_guild_id(), target);
  }

  // int32 change = 2;
  if (this->_internal_change() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_change(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GDGuildChangeLadderPointPacket)
  return target;
}

size_t GDGuildChangeLadderPointPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GDGuildChangeLadderPointPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 guild_id = 1;
  if (this->_internal_guild_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_guild_id());
  }

  // int32 change = 2;
  if (this->_internal_change() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_change());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GDGuildChangeLadderPointPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GDGuildChangeLadderPointPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GDGuildChangeLadderPointPacket::GetClassData() const { return &_class_data_; }


void GDGuildChangeLadderPointPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GDGuildChangeLadderPointPacket*>(&to_msg);
  auto& from = static_cast<const GDGuildChangeLadderPointPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GDGuildChangeLadderPointPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_guild_id() != 0) {
    _this->_internal_set_guild_id(from._internal_guild_id());
  }
  if (from._internal_change() != 0) {
    _this->_internal_set_change(from._internal_change());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GDGuildChangeLadderPointPacket::CopyFrom(const GDGuildChangeLadderPointPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GDGuildChangeLadderPointPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GDGuildChangeLadderPointPacket::IsInitialized() const {
  return true;
}

void GDGuildChangeLadderPointPacket::InternalSwap(GDGuildChangeLadderPointPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GDGuildChangeLadderPointPacket, _impl_.change_)
      + sizeof(GDGuildChangeLadderPointPacket::_impl_.change_)
      - PROTOBUF_FIELD_OFFSET(GDGuildChangeLadderPointPacket, _impl_.guild_id_)>(
          reinterpret_cast<char*>(&_impl_.guild_id_),
          reinterpret_cast<char*>(&other->_impl_.guild_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GDGuildChangeLadderPointPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gd_5fpackets_2eproto_getter, &descriptor_table_gd_5fpackets_2eproto_once,
      file_level_metadata_gd_5fpackets_2eproto[89]);
}

// ===================================================================

class GDGuildUseSkillPacket::_Internal {
 public:
};

GDGuildUseSkillPacket::GDGuildUseSkillPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GDGuildUseSkillPacket)
}
GDGuildUseSkillPacket::GDGuildUseSkillPacket(const GDGuildUseSkillPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GDGuildUseSkillPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.guild_id_){}
    , decltype(_impl_.skill_vnum_){}
    , decltype(_impl_.cooltime_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.guild_id_, &from._impl_.guild_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.cooltime_) -
    reinterpret_cast<char*>(&_impl_.guild_id_)) + sizeof(_impl_.cooltime_));
  // @@protoc_insertion_point(copy_constructor:network.GDGuildUseSkillPacket)
}

inline void GDGuildUseSkillPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.guild_id_){0u}
    , decltype(_impl_.skill_vnum_){0u}
    , decltype(_impl_.cooltime_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GDGuildUseSkillPacket::~GDGuildUseSkillPacket() {
  // @@protoc_insertion_point(destructor:network.GDGuildUseSkillPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GDGuildUseSkillPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GDGuildUseSkillPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GDGuildUseSkillPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GDGuildUseSkillPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.guild_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.cooltime_) -
      reinterpret_cast<char*>(&_impl_.guild_id_)) + sizeof(_impl_.cooltime_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GDGuildUseSkillPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 guild_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 skill_vnum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.skill_vnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 cooltime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.cooltime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GDGuildUseSkillPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GDGuildUseSkillPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 guild_id = 1;
  if (this->_internal_guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_guild_id(), target);
  }

  // uint32 skill_vnum = 2;
  if (this->_internal_skill_vnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_skill_vnum(), target);
  }

  // uint32 cooltime = 3;
  if (this->_internal_cooltime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_cooltime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GDGuildUseSkillPacket)
  return target;
}

size_t GDGuildUseSkillPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GDGuildUseSkillPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 guild_id = 1;
  if (this->_internal_guild_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_guild_id());
  }

  // uint32 skill_vnum = 2;
  if (this->_internal_skill_vnum() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_skill_vnum());
  }

  // uint32 cooltime = 3;
  if (this->_internal_cooltime() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_cooltime());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GDGuildUseSkillPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GDGuildUseSkillPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GDGuildUseSkillPacket::GetClassData() const { return &_class_data_; }


void GDGuildUseSkillPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GDGuildUseSkillPacket*>(&to_msg);
  auto& from = static_cast<const GDGuildUseSkillPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GDGuildUseSkillPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_guild_id() != 0) {
    _this->_internal_set_guild_id(from._internal_guild_id());
  }
  if (from._internal_skill_vnum() != 0) {
    _this->_internal_set_skill_vnum(from._internal_skill_vnum());
  }
  if (from._internal_cooltime() != 0) {
    _this->_internal_set_cooltime(from._internal_cooltime());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GDGuildUseSkillPacket::CopyFrom(const GDGuildUseSkillPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GDGuildUseSkillPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GDGuildUseSkillPacket::IsInitialized() const {
  return true;
}

void GDGuildUseSkillPacket::InternalSwap(GDGuildUseSkillPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GDGuildUseSkillPacket, _impl_.cooltime_)
      + sizeof(GDGuildUseSkillPacket::_impl_.cooltime_)
      - PROTOBUF_FIELD_OFFSET(GDGuildUseSkillPacket, _impl_.guild_id_)>(
          reinterpret_cast<char*>(&_impl_.guild_id_),
          reinterpret_cast<char*>(&other->_impl_.guild_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GDGuildUseSkillPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gd_5fpackets_2eproto_getter, &descriptor_table_gd_5fpackets_2eproto_once,
      file_level_metadata_gd_5fpackets_2eproto[90]);
}

// ===================================================================

class GDGuildDepositMoneyPacket::_Internal {
 public:
};

GDGuildDepositMoneyPacket::GDGuildDepositMoneyPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GDGuildDepositMoneyPacket)
}
GDGuildDepositMoneyPacket::GDGuildDepositMoneyPacket(const GDGuildDepositMoneyPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GDGuildDepositMoneyPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.guild_id_){}
    , decltype(_impl_.gold_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.guild_id_, &from._impl_.guild_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.gold_) -
    reinterpret_cast<char*>(&_impl_.guild_id_)) + sizeof(_impl_.gold_));
  // @@protoc_insertion_point(copy_constructor:network.GDGuildDepositMoneyPacket)
}

inline void GDGuildDepositMoneyPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.guild_id_){0u}
    , decltype(_impl_.gold_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GDGuildDepositMoneyPacket::~GDGuildDepositMoneyPacket() {
  // @@protoc_insertion_point(destructor:network.GDGuildDepositMoneyPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GDGuildDepositMoneyPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GDGuildDepositMoneyPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GDGuildDepositMoneyPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GDGuildDepositMoneyPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.guild_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.gold_) -
      reinterpret_cast<char*>(&_impl_.guild_id_)) + sizeof(_impl_.gold_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GDGuildDepositMoneyPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 guild_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 gold = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GDGuildDepositMoneyPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GDGuildDepositMoneyPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 guild_id = 1;
  if (this->_internal_guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_guild_id(), target);
  }

  // int32 gold = 2;
  if (this->_internal_gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_gold(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GDGuildDepositMoneyPacket)
  return target;
}

size_t GDGuildDepositMoneyPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GDGuildDepositMoneyPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 guild_id = 1;
  if (this->_internal_guild_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_guild_id());
  }

  // int32 gold = 2;
  if (this->_internal_gold() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_gold());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GDGuildDepositMoneyPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GDGuildDepositMoneyPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GDGuildDepositMoneyPacket::GetClassData() const { return &_class_data_; }


void GDGuildDepositMoneyPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GDGuildDepositMoneyPacket*>(&to_msg);
  auto& from = static_cast<const GDGuildDepositMoneyPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GDGuildDepositMoneyPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_guild_id() != 0) {
    _this->_internal_set_guild_id(from._internal_guild_id());
  }
  if (from._internal_gold() != 0) {
    _this->_internal_set_gold(from._internal_gold());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GDGuildDepositMoneyPacket::CopyFrom(const GDGuildDepositMoneyPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GDGuildDepositMoneyPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GDGuildDepositMoneyPacket::IsInitialized() const {
  return true;
}

void GDGuildDepositMoneyPacket::InternalSwap(GDGuildDepositMoneyPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GDGuildDepositMoneyPacket, _impl_.gold_)
      + sizeof(GDGuildDepositMoneyPacket::_impl_.gold_)
      - PROTOBUF_FIELD_OFFSET(GDGuildDepositMoneyPacket, _impl_.guild_id_)>(
          reinterpret_cast<char*>(&_impl_.guild_id_),
          reinterpret_cast<char*>(&other->_impl_.guild_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GDGuildDepositMoneyPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gd_5fpackets_2eproto_getter, &descriptor_table_gd_5fpackets_2eproto_once,
      file_level_metadata_gd_5fpackets_2eproto[91]);
}

// ===================================================================

class GDGuildWithdrawMoneyPacket::_Internal {
 public:
};

GDGuildWithdrawMoneyPacket::GDGuildWithdrawMoneyPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GDGuildWithdrawMoneyPacket)
}
GDGuildWithdrawMoneyPacket::GDGuildWithdrawMoneyPacket(const GDGuildWithdrawMoneyPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GDGuildWithdrawMoneyPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.guild_id_){}
    , decltype(_impl_.gold_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.guild_id_, &from._impl_.guild_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.gold_) -
    reinterpret_cast<char*>(&_impl_.guild_id_)) + sizeof(_impl_.gold_));
  // @@protoc_insertion_point(copy_constructor:network.GDGuildWithdrawMoneyPacket)
}

inline void GDGuildWithdrawMoneyPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.guild_id_){0u}
    , decltype(_impl_.gold_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GDGuildWithdrawMoneyPacket::~GDGuildWithdrawMoneyPacket() {
  // @@protoc_insertion_point(destructor:network.GDGuildWithdrawMoneyPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GDGuildWithdrawMoneyPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GDGuildWithdrawMoneyPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GDGuildWithdrawMoneyPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GDGuildWithdrawMoneyPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.guild_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.gold_) -
      reinterpret_cast<char*>(&_impl_.guild_id_)) + sizeof(_impl_.gold_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GDGuildWithdrawMoneyPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 guild_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 gold = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GDGuildWithdrawMoneyPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GDGuildWithdrawMoneyPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 guild_id = 1;
  if (this->_internal_guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_guild_id(), target);
  }

  // int32 gold = 2;
  if (this->_internal_gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_gold(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GDGuildWithdrawMoneyPacket)
  return target;
}

size_t GDGuildWithdrawMoneyPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GDGuildWithdrawMoneyPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 guild_id = 1;
  if (this->_internal_guild_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_guild_id());
  }

  // int32 gold = 2;
  if (this->_internal_gold() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_gold());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GDGuildWithdrawMoneyPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GDGuildWithdrawMoneyPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GDGuildWithdrawMoneyPacket::GetClassData() const { return &_class_data_; }


void GDGuildWithdrawMoneyPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GDGuildWithdrawMoneyPacket*>(&to_msg);
  auto& from = static_cast<const GDGuildWithdrawMoneyPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GDGuildWithdrawMoneyPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_guild_id() != 0) {
    _this->_internal_set_guild_id(from._internal_guild_id());
  }
  if (from._internal_gold() != 0) {
    _this->_internal_set_gold(from._internal_gold());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GDGuildWithdrawMoneyPacket::CopyFrom(const GDGuildWithdrawMoneyPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GDGuildWithdrawMoneyPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GDGuildWithdrawMoneyPacket::IsInitialized() const {
  return true;
}

void GDGuildWithdrawMoneyPacket::InternalSwap(GDGuildWithdrawMoneyPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GDGuildWithdrawMoneyPacket, _impl_.gold_)
      + sizeof(GDGuildWithdrawMoneyPacket::_impl_.gold_)
      - PROTOBUF_FIELD_OFFSET(GDGuildWithdrawMoneyPacket, _impl_.guild_id_)>(
          reinterpret_cast<char*>(&_impl_.guild_id_),
          reinterpret_cast<char*>(&other->_impl_.guild_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GDGuildWithdrawMoneyPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gd_5fpackets_2eproto_getter, &descriptor_table_gd_5fpackets_2eproto_once,
      file_level_metadata_gd_5fpackets_2eproto[92]);
}

// ===================================================================

class GDGuildWithdrawMoneyGiveReplyPacket::_Internal {
 public:
};

GDGuildWithdrawMoneyGiveReplyPacket::GDGuildWithdrawMoneyGiveReplyPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GDGuildWithdrawMoneyGiveReplyPacket)
}
GDGuildWithdrawMoneyGiveReplyPacket::GDGuildWithdrawMoneyGiveReplyPacket(const GDGuildWithdrawMoneyGiveReplyPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GDGuildWithdrawMoneyGiveReplyPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.guild_id_){}
    , decltype(_impl_.change_gold_){}
    , decltype(_impl_.give_success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.guild_id_, &from._impl_.guild_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.give_success_) -
    reinterpret_cast<char*>(&_impl_.guild_id_)) + sizeof(_impl_.give_success_));
  // @@protoc_insertion_point(copy_constructor:network.GDGuildWithdrawMoneyGiveReplyPacket)
}

inline void GDGuildWithdrawMoneyGiveReplyPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.guild_id_){0u}
    , decltype(_impl_.change_gold_){0}
    , decltype(_impl_.give_success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GDGuildWithdrawMoneyGiveReplyPacket::~GDGuildWithdrawMoneyGiveReplyPacket() {
  // @@protoc_insertion_point(destructor:network.GDGuildWithdrawMoneyGiveReplyPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GDGuildWithdrawMoneyGiveReplyPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GDGuildWithdrawMoneyGiveReplyPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GDGuildWithdrawMoneyGiveReplyPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GDGuildWithdrawMoneyGiveReplyPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.guild_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.give_success_) -
      reinterpret_cast<char*>(&_impl_.guild_id_)) + sizeof(_impl_.give_success_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GDGuildWithdrawMoneyGiveReplyPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 guild_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 change_gold = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.change_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool give_success = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.give_success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GDGuildWithdrawMoneyGiveReplyPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GDGuildWithdrawMoneyGiveReplyPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 guild_id = 1;
  if (this->_internal_guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_guild_id(), target);
  }

  // int32 change_gold = 2;
  if (this->_internal_change_gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_change_gold(), target);
  }

  // bool give_success = 3;
  if (this->_internal_give_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_give_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GDGuildWithdrawMoneyGiveReplyPacket)
  return target;
}

size_t GDGuildWithdrawMoneyGiveReplyPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GDGuildWithdrawMoneyGiveReplyPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 guild_id = 1;
  if (this->_internal_guild_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_guild_id());
  }

  // int32 change_gold = 2;
  if (this->_internal_change_gold() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_change_gold());
  }

  // bool give_success = 3;
  if (this->_internal_give_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GDGuildWithdrawMoneyGiveReplyPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GDGuildWithdrawMoneyGiveReplyPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GDGuildWithdrawMoneyGiveReplyPacket::GetClassData() const { return &_class_data_; }


void GDGuildWithdrawMoneyGiveReplyPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GDGuildWithdrawMoneyGiveReplyPacket*>(&to_msg);
  auto& from = static_cast<const GDGuildWithdrawMoneyGiveReplyPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GDGuildWithdrawMoneyGiveReplyPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_guild_id() != 0) {
    _this->_internal_set_guild_id(from._internal_guild_id());
  }
  if (from._internal_change_gold() != 0) {
    _this->_internal_set_change_gold(from._internal_change_gold());
  }
  if (from._internal_give_success() != 0) {
    _this->_internal_set_give_success(from._internal_give_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GDGuildWithdrawMoneyGiveReplyPacket::CopyFrom(const GDGuildWithdrawMoneyGiveReplyPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GDGuildWithdrawMoneyGiveReplyPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GDGuildWithdrawMoneyGiveReplyPacket::IsInitialized() const {
  return true;
}

void GDGuildWithdrawMoneyGiveReplyPacket::InternalSwap(GDGuildWithdrawMoneyGiveReplyPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GDGuildWithdrawMoneyGiveReplyPacket, _impl_.give_success_)
      + sizeof(GDGuildWithdrawMoneyGiveReplyPacket::_impl_.give_success_)
      - PROTOBUF_FIELD_OFFSET(GDGuildWithdrawMoneyGiveReplyPacket, _impl_.guild_id_)>(
          reinterpret_cast<char*>(&_impl_.guild_id_),
          reinterpret_cast<char*>(&other->_impl_.guild_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GDGuildWithdrawMoneyGiveReplyPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gd_5fpackets_2eproto_getter, &descriptor_table_gd_5fpackets_2eproto_once,
      file_level_metadata_gd_5fpackets_2eproto[93]);
}

// ===================================================================

class GDGuildWarBetPacket::_Internal {
 public:
};

GDGuildWarBetPacket::GDGuildWarBetPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GDGuildWarBetPacket)
}
GDGuildWarBetPacket::GDGuildWarBetPacket(const GDGuildWarBetPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GDGuildWarBetPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.login_){}
    , decltype(_impl_.war_id_){}
    , decltype(_impl_.gold_){}
    , decltype(_impl_.guild_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.login_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.login_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_login().empty()) {
    _this->_impl_.login_.Set(from._internal_login(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.war_id_, &from._impl_.war_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.guild_id_) -
    reinterpret_cast<char*>(&_impl_.war_id_)) + sizeof(_impl_.guild_id_));
  // @@protoc_insertion_point(copy_constructor:network.GDGuildWarBetPacket)
}

inline void GDGuildWarBetPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.login_){}
    , decltype(_impl_.war_id_){0u}
    , decltype(_impl_.gold_){0u}
    , decltype(_impl_.guild_id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.login_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.login_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GDGuildWarBetPacket::~GDGuildWarBetPacket() {
  // @@protoc_insertion_point(destructor:network.GDGuildWarBetPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GDGuildWarBetPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.login_.Destroy();
}

void GDGuildWarBetPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GDGuildWarBetPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GDGuildWarBetPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.login_.ClearToEmpty();
  ::memset(&_impl_.war_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.guild_id_) -
      reinterpret_cast<char*>(&_impl_.war_id_)) + sizeof(_impl_.guild_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GDGuildWarBetPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 war_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.war_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes login = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_login();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 gold = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 guild_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GDGuildWarBetPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GDGuildWarBetPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 war_id = 1;
  if (this->_internal_war_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_war_id(), target);
  }

  // bytes login = 2;
  if (!this->_internal_login().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_login(), target);
  }

  // uint32 gold = 3;
  if (this->_internal_gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_gold(), target);
  }

  // uint32 guild_id = 4;
  if (this->_internal_guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_guild_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GDGuildWarBetPacket)
  return target;
}

size_t GDGuildWarBetPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GDGuildWarBetPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes login = 2;
  if (!this->_internal_login().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_login());
  }

  // uint32 war_id = 1;
  if (this->_internal_war_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_war_id());
  }

  // uint32 gold = 3;
  if (this->_internal_gold() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_gold());
  }

  // uint32 guild_id = 4;
  if (this->_internal_guild_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_guild_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GDGuildWarBetPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GDGuildWarBetPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GDGuildWarBetPacket::GetClassData() const { return &_class_data_; }


void GDGuildWarBetPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GDGuildWarBetPacket*>(&to_msg);
  auto& from = static_cast<const GDGuildWarBetPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GDGuildWarBetPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_login().empty()) {
    _this->_internal_set_login(from._internal_login());
  }
  if (from._internal_war_id() != 0) {
    _this->_internal_set_war_id(from._internal_war_id());
  }
  if (from._internal_gold() != 0) {
    _this->_internal_set_gold(from._internal_gold());
  }
  if (from._internal_guild_id() != 0) {
    _this->_internal_set_guild_id(from._internal_guild_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GDGuildWarBetPacket::CopyFrom(const GDGuildWarBetPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GDGuildWarBetPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GDGuildWarBetPacket::IsInitialized() const {
  return true;
}

void GDGuildWarBetPacket::InternalSwap(GDGuildWarBetPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.login_, lhs_arena,
      &other->_impl_.login_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GDGuildWarBetPacket, _impl_.guild_id_)
      + sizeof(GDGuildWarBetPacket::_impl_.guild_id_)
      - PROTOBUF_FIELD_OFFSET(GDGuildWarBetPacket, _impl_.war_id_)>(
          reinterpret_cast<char*>(&_impl_.war_id_),
          reinterpret_cast<char*>(&other->_impl_.war_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GDGuildWarBetPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gd_5fpackets_2eproto_getter, &descriptor_table_gd_5fpackets_2eproto_once,
      file_level_metadata_gd_5fpackets_2eproto[94]);
}

// ===================================================================

class GDGuildReqChangeMasterPacket::_Internal {
 public:
};

GDGuildReqChangeMasterPacket::GDGuildReqChangeMasterPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GDGuildReqChangeMasterPacket)
}
GDGuildReqChangeMasterPacket::GDGuildReqChangeMasterPacket(const GDGuildReqChangeMasterPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GDGuildReqChangeMasterPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.guild_id_){}
    , decltype(_impl_.id_from_){}
    , decltype(_impl_.id_to_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.guild_id_, &from._impl_.guild_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.id_to_) -
    reinterpret_cast<char*>(&_impl_.guild_id_)) + sizeof(_impl_.id_to_));
  // @@protoc_insertion_point(copy_constructor:network.GDGuildReqChangeMasterPacket)
}

inline void GDGuildReqChangeMasterPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.guild_id_){0u}
    , decltype(_impl_.id_from_){0u}
    , decltype(_impl_.id_to_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GDGuildReqChangeMasterPacket::~GDGuildReqChangeMasterPacket() {
  // @@protoc_insertion_point(destructor:network.GDGuildReqChangeMasterPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GDGuildReqChangeMasterPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GDGuildReqChangeMasterPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GDGuildReqChangeMasterPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GDGuildReqChangeMasterPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.guild_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.id_to_) -
      reinterpret_cast<char*>(&_impl_.guild_id_)) + sizeof(_impl_.id_to_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GDGuildReqChangeMasterPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 guild_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 id_from = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.id_from_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 id_to = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.id_to_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GDGuildReqChangeMasterPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GDGuildReqChangeMasterPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 guild_id = 1;
  if (this->_internal_guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_guild_id(), target);
  }

  // uint32 id_from = 2;
  if (this->_internal_id_from() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_id_from(), target);
  }

  // uint32 id_to = 3;
  if (this->_internal_id_to() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_id_to(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GDGuildReqChangeMasterPacket)
  return target;
}

size_t GDGuildReqChangeMasterPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GDGuildReqChangeMasterPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 guild_id = 1;
  if (this->_internal_guild_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_guild_id());
  }

  // uint32 id_from = 2;
  if (this->_internal_id_from() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id_from());
  }

  // uint32 id_to = 3;
  if (this->_internal_id_to() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id_to());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GDGuildReqChangeMasterPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GDGuildReqChangeMasterPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GDGuildReqChangeMasterPacket::GetClassData() const { return &_class_data_; }


void GDGuildReqChangeMasterPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GDGuildReqChangeMasterPacket*>(&to_msg);
  auto& from = static_cast<const GDGuildReqChangeMasterPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GDGuildReqChangeMasterPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_guild_id() != 0) {
    _this->_internal_set_guild_id(from._internal_guild_id());
  }
  if (from._internal_id_from() != 0) {
    _this->_internal_set_id_from(from._internal_id_from());
  }
  if (from._internal_id_to() != 0) {
    _this->_internal_set_id_to(from._internal_id_to());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GDGuildReqChangeMasterPacket::CopyFrom(const GDGuildReqChangeMasterPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GDGuildReqChangeMasterPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GDGuildReqChangeMasterPacket::IsInitialized() const {
  return true;
}

void GDGuildReqChangeMasterPacket::InternalSwap(GDGuildReqChangeMasterPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GDGuildReqChangeMasterPacket, _impl_.id_to_)
      + sizeof(GDGuildReqChangeMasterPacket::_impl_.id_to_)
      - PROTOBUF_FIELD_OFFSET(GDGuildReqChangeMasterPacket, _impl_.guild_id_)>(
          reinterpret_cast<char*>(&_impl_.guild_id_),
          reinterpret_cast<char*>(&other->_impl_.guild_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GDGuildReqChangeMasterPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gd_5fpackets_2eproto_getter, &descriptor_table_gd_5fpackets_2eproto_once,
      file_level_metadata_gd_5fpackets_2eproto[95]);
}

// ===================================================================

class GDGuildSafeboxLoadPacket::_Internal {
 public:
};

GDGuildSafeboxLoadPacket::GDGuildSafeboxLoadPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GDGuildSafeboxLoadPacket)
}
GDGuildSafeboxLoadPacket::GDGuildSafeboxLoadPacket(const GDGuildSafeboxLoadPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GDGuildSafeboxLoadPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.guild_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.guild_id_ = from._impl_.guild_id_;
  // @@protoc_insertion_point(copy_constructor:network.GDGuildSafeboxLoadPacket)
}

inline void GDGuildSafeboxLoadPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.guild_id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GDGuildSafeboxLoadPacket::~GDGuildSafeboxLoadPacket() {
  // @@protoc_insertion_point(destructor:network.GDGuildSafeboxLoadPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GDGuildSafeboxLoadPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GDGuildSafeboxLoadPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GDGuildSafeboxLoadPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GDGuildSafeboxLoadPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.guild_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GDGuildSafeboxLoadPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 guild_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GDGuildSafeboxLoadPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GDGuildSafeboxLoadPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 guild_id = 1;
  if (this->_internal_guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_guild_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GDGuildSafeboxLoadPacket)
  return target;
}

size_t GDGuildSafeboxLoadPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GDGuildSafeboxLoadPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 guild_id = 1;
  if (this->_internal_guild_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_guild_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GDGuildSafeboxLoadPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GDGuildSafeboxLoadPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GDGuildSafeboxLoadPacket::GetClassData() const { return &_class_data_; }


void GDGuildSafeboxLoadPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GDGuildSafeboxLoadPacket*>(&to_msg);
  auto& from = static_cast<const GDGuildSafeboxLoadPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GDGuildSafeboxLoadPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_guild_id() != 0) {
    _this->_internal_set_guild_id(from._internal_guild_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GDGuildSafeboxLoadPacket::CopyFrom(const GDGuildSafeboxLoadPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GDGuildSafeboxLoadPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GDGuildSafeboxLoadPacket::IsInitialized() const {
  return true;
}

void GDGuildSafeboxLoadPacket::InternalSwap(GDGuildSafeboxLoadPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.guild_id_, other->_impl_.guild_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GDGuildSafeboxLoadPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gd_5fpackets_2eproto_getter, &descriptor_table_gd_5fpackets_2eproto_once,
      file_level_metadata_gd_5fpackets_2eproto[96]);
}

// ===================================================================

class GDGuildSafeboxCreatePacket::_Internal {
 public:
};

GDGuildSafeboxCreatePacket::GDGuildSafeboxCreatePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GDGuildSafeboxCreatePacket)
}
GDGuildSafeboxCreatePacket::GDGuildSafeboxCreatePacket(const GDGuildSafeboxCreatePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GDGuildSafeboxCreatePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.guild_id_){}
    , decltype(_impl_.pid_){}
    , decltype(_impl_.size_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.guild_id_, &from._impl_.guild_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.size_) -
    reinterpret_cast<char*>(&_impl_.guild_id_)) + sizeof(_impl_.size_));
  // @@protoc_insertion_point(copy_constructor:network.GDGuildSafeboxCreatePacket)
}

inline void GDGuildSafeboxCreatePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.guild_id_){0u}
    , decltype(_impl_.pid_){0u}
    , decltype(_impl_.size_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GDGuildSafeboxCreatePacket::~GDGuildSafeboxCreatePacket() {
  // @@protoc_insertion_point(destructor:network.GDGuildSafeboxCreatePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GDGuildSafeboxCreatePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void GDGuildSafeboxCreatePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GDGuildSafeboxCreatePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GDGuildSafeboxCreatePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  ::memset(&_impl_.guild_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.size_) -
      reinterpret_cast<char*>(&_impl_.guild_id_)) + sizeof(_impl_.size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GDGuildSafeboxCreatePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 guild_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 pid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GDGuildSafeboxCreatePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GDGuildSafeboxCreatePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 guild_id = 1;
  if (this->_internal_guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_guild_id(), target);
  }

  // uint32 pid = 2;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_pid(), target);
  }

  // bytes name = 3;
  if (!this->_internal_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_name(), target);
  }

  // uint32 size = 4;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GDGuildSafeboxCreatePacket)
  return target;
}

size_t GDGuildSafeboxCreatePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GDGuildSafeboxCreatePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 3;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // uint32 guild_id = 1;
  if (this->_internal_guild_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_guild_id());
  }

  // uint32 pid = 2;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid());
  }

  // uint32 size = 4;
  if (this->_internal_size() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GDGuildSafeboxCreatePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GDGuildSafeboxCreatePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GDGuildSafeboxCreatePacket::GetClassData() const { return &_class_data_; }


void GDGuildSafeboxCreatePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GDGuildSafeboxCreatePacket*>(&to_msg);
  auto& from = static_cast<const GDGuildSafeboxCreatePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GDGuildSafeboxCreatePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_guild_id() != 0) {
    _this->_internal_set_guild_id(from._internal_guild_id());
  }
  if (from._internal_pid() != 0) {
    _this->_internal_set_pid(from._internal_pid());
  }
  if (from._internal_size() != 0) {
    _this->_internal_set_size(from._internal_size());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GDGuildSafeboxCreatePacket::CopyFrom(const GDGuildSafeboxCreatePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GDGuildSafeboxCreatePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GDGuildSafeboxCreatePacket::IsInitialized() const {
  return true;
}

void GDGuildSafeboxCreatePacket::InternalSwap(GDGuildSafeboxCreatePacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GDGuildSafeboxCreatePacket, _impl_.size_)
      + sizeof(GDGuildSafeboxCreatePacket::_impl_.size_)
      - PROTOBUF_FIELD_OFFSET(GDGuildSafeboxCreatePacket, _impl_.guild_id_)>(
          reinterpret_cast<char*>(&_impl_.guild_id_),
          reinterpret_cast<char*>(&other->_impl_.guild_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GDGuildSafeboxCreatePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gd_5fpackets_2eproto_getter, &descriptor_table_gd_5fpackets_2eproto_once,
      file_level_metadata_gd_5fpackets_2eproto[97]);
}

// ===================================================================

class GDGuildSafeboxSizePacket::_Internal {
 public:
};

GDGuildSafeboxSizePacket::GDGuildSafeboxSizePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GDGuildSafeboxSizePacket)
}
GDGuildSafeboxSizePacket::GDGuildSafeboxSizePacket(const GDGuildSafeboxSizePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GDGuildSafeboxSizePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.guild_id_){}
    , decltype(_impl_.pid_){}
    , decltype(_impl_.size_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.guild_id_, &from._impl_.guild_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.size_) -
    reinterpret_cast<char*>(&_impl_.guild_id_)) + sizeof(_impl_.size_));
  // @@protoc_insertion_point(copy_constructor:network.GDGuildSafeboxSizePacket)
}

inline void GDGuildSafeboxSizePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.guild_id_){0u}
    , decltype(_impl_.pid_){0u}
    , decltype(_impl_.size_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GDGuildSafeboxSizePacket::~GDGuildSafeboxSizePacket() {
  // @@protoc_insertion_point(destructor:network.GDGuildSafeboxSizePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GDGuildSafeboxSizePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void GDGuildSafeboxSizePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GDGuildSafeboxSizePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GDGuildSafeboxSizePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  ::memset(&_impl_.guild_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.size_) -
      reinterpret_cast<char*>(&_impl_.guild_id_)) + sizeof(_impl_.size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GDGuildSafeboxSizePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 guild_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 pid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GDGuildSafeboxSizePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GDGuildSafeboxSizePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 guild_id = 1;
  if (this->_internal_guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_guild_id(), target);
  }

  // uint32 pid = 2;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_pid(), target);
  }

  // bytes name = 3;
  if (!this->_internal_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_name(), target);
  }

  // uint32 size = 4;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GDGuildSafeboxSizePacket)
  return target;
}

size_t GDGuildSafeboxSizePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GDGuildSafeboxSizePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 3;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // uint32 guild_id = 1;
  if (this->_internal_guild_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_guild_id());
  }

  // uint32 pid = 2;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid());
  }

  // uint32 size = 4;
  if (this->_internal_size() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GDGuildSafeboxSizePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GDGuildSafeboxSizePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GDGuildSafeboxSizePacket::GetClassData() const { return &_class_data_; }


void GDGuildSafeboxSizePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GDGuildSafeboxSizePacket*>(&to_msg);
  auto& from = static_cast<const GDGuildSafeboxSizePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GDGuildSafeboxSizePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_guild_id() != 0) {
    _this->_internal_set_guild_id(from._internal_guild_id());
  }
  if (from._internal_pid() != 0) {
    _this->_internal_set_pid(from._internal_pid());
  }
  if (from._internal_size() != 0) {
    _this->_internal_set_size(from._internal_size());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GDGuildSafeboxSizePacket::CopyFrom(const GDGuildSafeboxSizePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GDGuildSafeboxSizePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GDGuildSafeboxSizePacket::IsInitialized() const {
  return true;
}

void GDGuildSafeboxSizePacket::InternalSwap(GDGuildSafeboxSizePacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GDGuildSafeboxSizePacket, _impl_.size_)
      + sizeof(GDGuildSafeboxSizePacket::_impl_.size_)
      - PROTOBUF_FIELD_OFFSET(GDGuildSafeboxSizePacket, _impl_.guild_id_)>(
          reinterpret_cast<char*>(&_impl_.guild_id_),
          reinterpret_cast<char*>(&other->_impl_.guild_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GDGuildSafeboxSizePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gd_5fpackets_2eproto_getter, &descriptor_table_gd_5fpackets_2eproto_once,
      file_level_metadata_gd_5fpackets_2eproto[98]);
}

// ===================================================================

class GDGuildSafeboxAddPacket::_Internal {
 public:
  static const ::network::TItemData& item(const GDGuildSafeboxAddPacket* msg);
};

const ::network::TItemData&
GDGuildSafeboxAddPacket::_Internal::item(const GDGuildSafeboxAddPacket* msg) {
  return *msg->_impl_.item_;
}
void GDGuildSafeboxAddPacket::clear_item() {
  if (GetArenaForAllocation() == nullptr && _impl_.item_ != nullptr) {
    delete _impl_.item_;
  }
  _impl_.item_ = nullptr;
}
GDGuildSafeboxAddPacket::GDGuildSafeboxAddPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GDGuildSafeboxAddPacket)
}
GDGuildSafeboxAddPacket::GDGuildSafeboxAddPacket(const GDGuildSafeboxAddPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GDGuildSafeboxAddPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.item_){nullptr}
    , decltype(_impl_.pid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_item()) {
    _this->_impl_.item_ = new ::network::TItemData(*from._impl_.item_);
  }
  _this->_impl_.pid_ = from._impl_.pid_;
  // @@protoc_insertion_point(copy_constructor:network.GDGuildSafeboxAddPacket)
}

inline void GDGuildSafeboxAddPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.item_){nullptr}
    , decltype(_impl_.pid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GDGuildSafeboxAddPacket::~GDGuildSafeboxAddPacket() {
  // @@protoc_insertion_point(destructor:network.GDGuildSafeboxAddPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GDGuildSafeboxAddPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.item_;
}

void GDGuildSafeboxAddPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GDGuildSafeboxAddPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GDGuildSafeboxAddPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.item_ != nullptr) {
    delete _impl_.item_;
  }
  _impl_.item_ = nullptr;
  _impl_.pid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GDGuildSafeboxAddPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .network.TItemData item = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_item(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GDGuildSafeboxAddPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GDGuildSafeboxAddPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pid(), target);
  }

  // bytes name = 2;
  if (!this->_internal_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_name(), target);
  }

  // .network.TItemData item = 3;
  if (this->_internal_has_item()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::item(this),
        _Internal::item(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GDGuildSafeboxAddPacket)
  return target;
}

size_t GDGuildSafeboxAddPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GDGuildSafeboxAddPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // .network.TItemData item = 3;
  if (this->_internal_has_item()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.item_);
  }

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GDGuildSafeboxAddPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GDGuildSafeboxAddPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GDGuildSafeboxAddPacket::GetClassData() const { return &_class_data_; }


void GDGuildSafeboxAddPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GDGuildSafeboxAddPacket*>(&to_msg);
  auto& from = static_cast<const GDGuildSafeboxAddPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GDGuildSafeboxAddPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_has_item()) {
    _this->_internal_mutable_item()->::network::TItemData::MergeFrom(
        from._internal_item());
  }
  if (from._internal_pid() != 0) {
    _this->_internal_set_pid(from._internal_pid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GDGuildSafeboxAddPacket::CopyFrom(const GDGuildSafeboxAddPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GDGuildSafeboxAddPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GDGuildSafeboxAddPacket::IsInitialized() const {
  return true;
}

void GDGuildSafeboxAddPacket::InternalSwap(GDGuildSafeboxAddPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GDGuildSafeboxAddPacket, _impl_.pid_)
      + sizeof(GDGuildSafeboxAddPacket::_impl_.pid_)
      - PROTOBUF_FIELD_OFFSET(GDGuildSafeboxAddPacket, _impl_.item_)>(
          reinterpret_cast<char*>(&_impl_.item_),
          reinterpret_cast<char*>(&other->_impl_.item_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GDGuildSafeboxAddPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gd_5fpackets_2eproto_getter, &descriptor_table_gd_5fpackets_2eproto_once,
      file_level_metadata_gd_5fpackets_2eproto[99]);
}

// ===================================================================

class GDGuildSafeboxTakePacket::_Internal {
 public:
  static const ::network::TItemPos& target_pos(const GDGuildSafeboxTakePacket* msg);
};

const ::network::TItemPos&
GDGuildSafeboxTakePacket::_Internal::target_pos(const GDGuildSafeboxTakePacket* msg) {
  return *msg->_impl_.target_pos_;
}
void GDGuildSafeboxTakePacket::clear_target_pos() {
  if (GetArenaForAllocation() == nullptr && _impl_.target_pos_ != nullptr) {
    delete _impl_.target_pos_;
  }
  _impl_.target_pos_ = nullptr;
}
GDGuildSafeboxTakePacket::GDGuildSafeboxTakePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GDGuildSafeboxTakePacket)
}
GDGuildSafeboxTakePacket::GDGuildSafeboxTakePacket(const GDGuildSafeboxTakePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GDGuildSafeboxTakePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.player_name_){}
    , decltype(_impl_.target_pos_){nullptr}
    , decltype(_impl_.guild_id_){}
    , decltype(_impl_.pid_){}
    , decltype(_impl_.source_pos_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.player_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.player_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_player_name().empty()) {
    _this->_impl_.player_name_.Set(from._internal_player_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_target_pos()) {
    _this->_impl_.target_pos_ = new ::network::TItemPos(*from._impl_.target_pos_);
  }
  ::memcpy(&_impl_.guild_id_, &from._impl_.guild_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.source_pos_) -
    reinterpret_cast<char*>(&_impl_.guild_id_)) + sizeof(_impl_.source_pos_));
  // @@protoc_insertion_point(copy_constructor:network.GDGuildSafeboxTakePacket)
}

inline void GDGuildSafeboxTakePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.player_name_){}
    , decltype(_impl_.target_pos_){nullptr}
    , decltype(_impl_.guild_id_){0u}
    , decltype(_impl_.pid_){0u}
    , decltype(_impl_.source_pos_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.player_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.player_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GDGuildSafeboxTakePacket::~GDGuildSafeboxTakePacket() {
  // @@protoc_insertion_point(destructor:network.GDGuildSafeboxTakePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GDGuildSafeboxTakePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.player_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.target_pos_;
}

void GDGuildSafeboxTakePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GDGuildSafeboxTakePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GDGuildSafeboxTakePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.player_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.target_pos_ != nullptr) {
    delete _impl_.target_pos_;
  }
  _impl_.target_pos_ = nullptr;
  ::memset(&_impl_.guild_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.source_pos_) -
      reinterpret_cast<char*>(&_impl_.guild_id_)) + sizeof(_impl_.source_pos_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GDGuildSafeboxTakePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 guild_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 pid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes player_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_player_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 source_pos = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.source_pos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .network.TItemPos target_pos = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_target_pos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GDGuildSafeboxTakePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GDGuildSafeboxTakePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 guild_id = 1;
  if (this->_internal_guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_guild_id(), target);
  }

  // uint32 pid = 2;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_pid(), target);
  }

  // bytes player_name = 3;
  if (!this->_internal_player_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_player_name(), target);
  }

  // uint32 source_pos = 4;
  if (this->_internal_source_pos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_source_pos(), target);
  }

  // .network.TItemPos target_pos = 5;
  if (this->_internal_has_target_pos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::target_pos(this),
        _Internal::target_pos(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GDGuildSafeboxTakePacket)
  return target;
}

size_t GDGuildSafeboxTakePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GDGuildSafeboxTakePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes player_name = 3;
  if (!this->_internal_player_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_player_name());
  }

  // .network.TItemPos target_pos = 5;
  if (this->_internal_has_target_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.target_pos_);
  }

  // uint32 guild_id = 1;
  if (this->_internal_guild_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_guild_id());
  }

  // uint32 pid = 2;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid());
  }

  // uint32 source_pos = 4;
  if (this->_internal_source_pos() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_source_pos());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GDGuildSafeboxTakePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GDGuildSafeboxTakePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GDGuildSafeboxTakePacket::GetClassData() const { return &_class_data_; }


void GDGuildSafeboxTakePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GDGuildSafeboxTakePacket*>(&to_msg);
  auto& from = static_cast<const GDGuildSafeboxTakePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GDGuildSafeboxTakePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_player_name().empty()) {
    _this->_internal_set_player_name(from._internal_player_name());
  }
  if (from._internal_has_target_pos()) {
    _this->_internal_mutable_target_pos()->::network::TItemPos::MergeFrom(
        from._internal_target_pos());
  }
  if (from._internal_guild_id() != 0) {
    _this->_internal_set_guild_id(from._internal_guild_id());
  }
  if (from._internal_pid() != 0) {
    _this->_internal_set_pid(from._internal_pid());
  }
  if (from._internal_source_pos() != 0) {
    _this->_internal_set_source_pos(from._internal_source_pos());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GDGuildSafeboxTakePacket::CopyFrom(const GDGuildSafeboxTakePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GDGuildSafeboxTakePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GDGuildSafeboxTakePacket::IsInitialized() const {
  return true;
}

void GDGuildSafeboxTakePacket::InternalSwap(GDGuildSafeboxTakePacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.player_name_, lhs_arena,
      &other->_impl_.player_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GDGuildSafeboxTakePacket, _impl_.source_pos_)
      + sizeof(GDGuildSafeboxTakePacket::_impl_.source_pos_)
      - PROTOBUF_FIELD_OFFSET(GDGuildSafeboxTakePacket, _impl_.target_pos_)>(
          reinterpret_cast<char*>(&_impl_.target_pos_),
          reinterpret_cast<char*>(&other->_impl_.target_pos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GDGuildSafeboxTakePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gd_5fpackets_2eproto_getter, &descriptor_table_gd_5fpackets_2eproto_once,
      file_level_metadata_gd_5fpackets_2eproto[100]);
}

// ===================================================================

class GDGuildSafeboxMovePacket::_Internal {
 public:
};

GDGuildSafeboxMovePacket::GDGuildSafeboxMovePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GDGuildSafeboxMovePacket)
}
GDGuildSafeboxMovePacket::GDGuildSafeboxMovePacket(const GDGuildSafeboxMovePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GDGuildSafeboxMovePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.guild_id_){}
    , decltype(_impl_.source_slot_){}
    , decltype(_impl_.target_slot_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.guild_id_, &from._impl_.guild_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.target_slot_) -
    reinterpret_cast<char*>(&_impl_.guild_id_)) + sizeof(_impl_.target_slot_));
  // @@protoc_insertion_point(copy_constructor:network.GDGuildSafeboxMovePacket)
}

inline void GDGuildSafeboxMovePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.guild_id_){0u}
    , decltype(_impl_.source_slot_){0u}
    , decltype(_impl_.target_slot_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GDGuildSafeboxMovePacket::~GDGuildSafeboxMovePacket() {
  // @@protoc_insertion_point(destructor:network.GDGuildSafeboxMovePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GDGuildSafeboxMovePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GDGuildSafeboxMovePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GDGuildSafeboxMovePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GDGuildSafeboxMovePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.guild_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.target_slot_) -
      reinterpret_cast<char*>(&_impl_.guild_id_)) + sizeof(_impl_.target_slot_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GDGuildSafeboxMovePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 guild_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 source_slot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.source_slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 target_slot = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.target_slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GDGuildSafeboxMovePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GDGuildSafeboxMovePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 guild_id = 1;
  if (this->_internal_guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_guild_id(), target);
  }

  // uint32 source_slot = 2;
  if (this->_internal_source_slot() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_source_slot(), target);
  }

  // uint32 target_slot = 3;
  if (this->_internal_target_slot() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_target_slot(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GDGuildSafeboxMovePacket)
  return target;
}

size_t GDGuildSafeboxMovePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GDGuildSafeboxMovePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 guild_id = 1;
  if (this->_internal_guild_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_guild_id());
  }

  // uint32 source_slot = 2;
  if (this->_internal_source_slot() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_source_slot());
  }

  // uint32 target_slot = 3;
  if (this->_internal_target_slot() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_target_slot());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GDGuildSafeboxMovePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GDGuildSafeboxMovePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GDGuildSafeboxMovePacket::GetClassData() const { return &_class_data_; }


void GDGuildSafeboxMovePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GDGuildSafeboxMovePacket*>(&to_msg);
  auto& from = static_cast<const GDGuildSafeboxMovePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GDGuildSafeboxMovePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_guild_id() != 0) {
    _this->_internal_set_guild_id(from._internal_guild_id());
  }
  if (from._internal_source_slot() != 0) {
    _this->_internal_set_source_slot(from._internal_source_slot());
  }
  if (from._internal_target_slot() != 0) {
    _this->_internal_set_target_slot(from._internal_target_slot());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GDGuildSafeboxMovePacket::CopyFrom(const GDGuildSafeboxMovePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GDGuildSafeboxMovePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GDGuildSafeboxMovePacket::IsInitialized() const {
  return true;
}

void GDGuildSafeboxMovePacket::InternalSwap(GDGuildSafeboxMovePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GDGuildSafeboxMovePacket, _impl_.target_slot_)
      + sizeof(GDGuildSafeboxMovePacket::_impl_.target_slot_)
      - PROTOBUF_FIELD_OFFSET(GDGuildSafeboxMovePacket, _impl_.guild_id_)>(
          reinterpret_cast<char*>(&_impl_.guild_id_),
          reinterpret_cast<char*>(&other->_impl_.guild_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GDGuildSafeboxMovePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gd_5fpackets_2eproto_getter, &descriptor_table_gd_5fpackets_2eproto_once,
      file_level_metadata_gd_5fpackets_2eproto[101]);
}

// ===================================================================

class GDGuildSafeboxGiveGoldPacket::_Internal {
 public:
};

GDGuildSafeboxGiveGoldPacket::GDGuildSafeboxGiveGoldPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GDGuildSafeboxGiveGoldPacket)
}
GDGuildSafeboxGiveGoldPacket::GDGuildSafeboxGiveGoldPacket(const GDGuildSafeboxGiveGoldPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GDGuildSafeboxGiveGoldPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.pid_){}
    , decltype(_impl_.guild_id_){}
    , decltype(_impl_.gold_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.pid_, &from._impl_.pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.gold_) -
    reinterpret_cast<char*>(&_impl_.pid_)) + sizeof(_impl_.gold_));
  // @@protoc_insertion_point(copy_constructor:network.GDGuildSafeboxGiveGoldPacket)
}

inline void GDGuildSafeboxGiveGoldPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.pid_){0u}
    , decltype(_impl_.guild_id_){0u}
    , decltype(_impl_.gold_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GDGuildSafeboxGiveGoldPacket::~GDGuildSafeboxGiveGoldPacket() {
  // @@protoc_insertion_point(destructor:network.GDGuildSafeboxGiveGoldPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GDGuildSafeboxGiveGoldPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void GDGuildSafeboxGiveGoldPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GDGuildSafeboxGiveGoldPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GDGuildSafeboxGiveGoldPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  ::memset(&_impl_.pid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.gold_) -
      reinterpret_cast<char*>(&_impl_.pid_)) + sizeof(_impl_.gold_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GDGuildSafeboxGiveGoldPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 guild_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 gold = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GDGuildSafeboxGiveGoldPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GDGuildSafeboxGiveGoldPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pid(), target);
  }

  // bytes name = 2;
  if (!this->_internal_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_name(), target);
  }

  // uint32 guild_id = 3;
  if (this->_internal_guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_guild_id(), target);
  }

  // uint64 gold = 4;
  if (this->_internal_gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_gold(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GDGuildSafeboxGiveGoldPacket)
  return target;
}

size_t GDGuildSafeboxGiveGoldPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GDGuildSafeboxGiveGoldPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid());
  }

  // uint32 guild_id = 3;
  if (this->_internal_guild_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_guild_id());
  }

  // uint64 gold = 4;
  if (this->_internal_gold() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_gold());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GDGuildSafeboxGiveGoldPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GDGuildSafeboxGiveGoldPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GDGuildSafeboxGiveGoldPacket::GetClassData() const { return &_class_data_; }


void GDGuildSafeboxGiveGoldPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GDGuildSafeboxGiveGoldPacket*>(&to_msg);
  auto& from = static_cast<const GDGuildSafeboxGiveGoldPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GDGuildSafeboxGiveGoldPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_pid() != 0) {
    _this->_internal_set_pid(from._internal_pid());
  }
  if (from._internal_guild_id() != 0) {
    _this->_internal_set_guild_id(from._internal_guild_id());
  }
  if (from._internal_gold() != 0) {
    _this->_internal_set_gold(from._internal_gold());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GDGuildSafeboxGiveGoldPacket::CopyFrom(const GDGuildSafeboxGiveGoldPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GDGuildSafeboxGiveGoldPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GDGuildSafeboxGiveGoldPacket::IsInitialized() const {
  return true;
}

void GDGuildSafeboxGiveGoldPacket::InternalSwap(GDGuildSafeboxGiveGoldPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GDGuildSafeboxGiveGoldPacket, _impl_.gold_)
      + sizeof(GDGuildSafeboxGiveGoldPacket::_impl_.gold_)
      - PROTOBUF_FIELD_OFFSET(GDGuildSafeboxGiveGoldPacket, _impl_.pid_)>(
          reinterpret_cast<char*>(&_impl_.pid_),
          reinterpret_cast<char*>(&other->_impl_.pid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GDGuildSafeboxGiveGoldPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gd_5fpackets_2eproto_getter, &descriptor_table_gd_5fpackets_2eproto_once,
      file_level_metadata_gd_5fpackets_2eproto[102]);
}

// ===================================================================

class GDGuildSafeboxGetGoldPacket::_Internal {
 public:
};

GDGuildSafeboxGetGoldPacket::GDGuildSafeboxGetGoldPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GDGuildSafeboxGetGoldPacket)
}
GDGuildSafeboxGetGoldPacket::GDGuildSafeboxGetGoldPacket(const GDGuildSafeboxGetGoldPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GDGuildSafeboxGetGoldPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.pid_){}
    , decltype(_impl_.guild_id_){}
    , decltype(_impl_.gold_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.pid_, &from._impl_.pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.gold_) -
    reinterpret_cast<char*>(&_impl_.pid_)) + sizeof(_impl_.gold_));
  // @@protoc_insertion_point(copy_constructor:network.GDGuildSafeboxGetGoldPacket)
}

inline void GDGuildSafeboxGetGoldPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.pid_){0u}
    , decltype(_impl_.guild_id_){0u}
    , decltype(_impl_.gold_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GDGuildSafeboxGetGoldPacket::~GDGuildSafeboxGetGoldPacket() {
  // @@protoc_insertion_point(destructor:network.GDGuildSafeboxGetGoldPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GDGuildSafeboxGetGoldPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void GDGuildSafeboxGetGoldPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GDGuildSafeboxGetGoldPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GDGuildSafeboxGetGoldPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  ::memset(&_impl_.pid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.gold_) -
      reinterpret_cast<char*>(&_impl_.pid_)) + sizeof(_impl_.gold_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GDGuildSafeboxGetGoldPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 guild_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 gold = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GDGuildSafeboxGetGoldPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GDGuildSafeboxGetGoldPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pid(), target);
  }

  // bytes name = 2;
  if (!this->_internal_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_name(), target);
  }

  // uint32 guild_id = 3;
  if (this->_internal_guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_guild_id(), target);
  }

  // uint64 gold = 4;
  if (this->_internal_gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_gold(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GDGuildSafeboxGetGoldPacket)
  return target;
}

size_t GDGuildSafeboxGetGoldPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GDGuildSafeboxGetGoldPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid());
  }

  // uint32 guild_id = 3;
  if (this->_internal_guild_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_guild_id());
  }

  // uint64 gold = 4;
  if (this->_internal_gold() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_gold());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GDGuildSafeboxGetGoldPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GDGuildSafeboxGetGoldPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GDGuildSafeboxGetGoldPacket::GetClassData() const { return &_class_data_; }


void GDGuildSafeboxGetGoldPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GDGuildSafeboxGetGoldPacket*>(&to_msg);
  auto& from = static_cast<const GDGuildSafeboxGetGoldPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GDGuildSafeboxGetGoldPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_pid() != 0) {
    _this->_internal_set_pid(from._internal_pid());
  }
  if (from._internal_guild_id() != 0) {
    _this->_internal_set_guild_id(from._internal_guild_id());
  }
  if (from._internal_gold() != 0) {
    _this->_internal_set_gold(from._internal_gold());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GDGuildSafeboxGetGoldPacket::CopyFrom(const GDGuildSafeboxGetGoldPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GDGuildSafeboxGetGoldPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GDGuildSafeboxGetGoldPacket::IsInitialized() const {
  return true;
}

void GDGuildSafeboxGetGoldPacket::InternalSwap(GDGuildSafeboxGetGoldPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GDGuildSafeboxGetGoldPacket, _impl_.gold_)
      + sizeof(GDGuildSafeboxGetGoldPacket::_impl_.gold_)
      - PROTOBUF_FIELD_OFFSET(GDGuildSafeboxGetGoldPacket, _impl_.pid_)>(
          reinterpret_cast<char*>(&_impl_.pid_),
          reinterpret_cast<char*>(&other->_impl_.pid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GDGuildSafeboxGetGoldPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gd_5fpackets_2eproto_getter, &descriptor_table_gd_5fpackets_2eproto_once,
      file_level_metadata_gd_5fpackets_2eproto[103]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace network
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::network::GDBootPacket*
Arena::CreateMaybeMessage< ::network::GDBootPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GDBootPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GDSetupPacket*
Arena::CreateMaybeMessage< ::network::GDSetupPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GDSetupPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GDUpdateChannelStatusPacket*
Arena::CreateMaybeMessage< ::network::GDUpdateChannelStatusPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GDUpdateChannelStatusPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GDBlockExceptionPacket*
Arena::CreateMaybeMessage< ::network::GDBlockExceptionPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GDBlockExceptionPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GDPlayerCountPacket*
Arena::CreateMaybeMessage< ::network::GDPlayerCountPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GDPlayerCountPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GDReloadAdminPacket*
Arena::CreateMaybeMessage< ::network::GDReloadAdminPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GDReloadAdminPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GDRecvShutdownPacket*
Arena::CreateMaybeMessage< ::network::GDRecvShutdownPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GDRecvShutdownPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GDAuthLoginPacket*
Arena::CreateMaybeMessage< ::network::GDAuthLoginPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GDAuthLoginPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GDLoginByKeyPacket*
Arena::CreateMaybeMessage< ::network::GDLoginByKeyPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GDLoginByKeyPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GDPlayerCreatePacket*
Arena::CreateMaybeMessage< ::network::GDPlayerCreatePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GDPlayerCreatePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GDPlayerDeletePacket*
Arena::CreateMaybeMessage< ::network::GDPlayerDeletePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GDPlayerDeletePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GDChangeNamePacket*
Arena::CreateMaybeMessage< ::network::GDChangeNamePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GDChangeNamePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GDEmpireSelectPacket*
Arena::CreateMaybeMessage< ::network::GDEmpireSelectPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GDEmpireSelectPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GDSelectUpdateHairPacket*
Arena::CreateMaybeMessage< ::network::GDSelectUpdateHairPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GDSelectUpdateHairPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GDBillingExpirePacket*
Arena::CreateMaybeMessage< ::network::GDBillingExpirePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GDBillingExpirePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GDBillingCheckPacket*
Arena::CreateMaybeMessage< ::network::GDBillingCheckPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GDBillingCheckPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GDDisconnectPacket*
Arena::CreateMaybeMessage< ::network::GDDisconnectPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GDDisconnectPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GDValidLogoutPacket*
Arena::CreateMaybeMessage< ::network::GDValidLogoutPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GDValidLogoutPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GDPlayerLoadPacket*
Arena::CreateMaybeMessage< ::network::GDPlayerLoadPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GDPlayerLoadPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GDSafeboxLoadPacket*
Arena::CreateMaybeMessage< ::network::GDSafeboxLoadPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GDSafeboxLoadPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GDReqHorseNamePacket*
Arena::CreateMaybeMessage< ::network::GDReqHorseNamePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GDReqHorseNamePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GDPlayerSavePacket*
Arena::CreateMaybeMessage< ::network::GDPlayerSavePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GDPlayerSavePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GDItemSavePacket*
Arena::CreateMaybeMessage< ::network::GDItemSavePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GDItemSavePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GDQuestSavePacket*
Arena::CreateMaybeMessage< ::network::GDQuestSavePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GDQuestSavePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GDPetSavePacket*
Arena::CreateMaybeMessage< ::network::GDPetSavePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GDPetSavePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GDSafeboxSavePacket*
Arena::CreateMaybeMessage< ::network::GDSafeboxSavePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GDSafeboxSavePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GDItemDestroyPacket*
Arena::CreateMaybeMessage< ::network::GDItemDestroyPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GDItemDestroyPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GDSkillColorSavePacket*
Arena::CreateMaybeMessage< ::network::GDSkillColorSavePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GDSkillColorSavePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GDPlayerRuneSavePacket*
Arena::CreateMaybeMessage< ::network::GDPlayerRuneSavePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GDPlayerRuneSavePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GDEquipmentPageDeletePacket*
Arena::CreateMaybeMessage< ::network::GDEquipmentPageDeletePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GDEquipmentPageDeletePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GDEquipmentPageSavePacket*
Arena::CreateMaybeMessage< ::network::GDEquipmentPageSavePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GDEquipmentPageSavePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GDFlushCachePacket*
Arena::CreateMaybeMessage< ::network::GDFlushCachePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GDFlushCachePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GDItemFlushPacket*
Arena::CreateMaybeMessage< ::network::GDItemFlushPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GDItemFlushPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GDLogoutPacket*
Arena::CreateMaybeMessage< ::network::GDLogoutPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GDLogoutPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GDSafeboxChangeSizePacket*
Arena::CreateMaybeMessage< ::network::GDSafeboxChangeSizePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GDSafeboxChangeSizePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GDSafeboxChangePasswordPacket*
Arena::CreateMaybeMessage< ::network::GDSafeboxChangePasswordPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GDSafeboxChangePasswordPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GDAddAffectPacket*
Arena::CreateMaybeMessage< ::network::GDAddAffectPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GDAddAffectPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GDRemoveAffectPacket*
Arena::CreateMaybeMessage< ::network::GDRemoveAffectPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GDRemoveAffectPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GDHighscoreRegisterPacket*
Arena::CreateMaybeMessage< ::network::GDHighscoreRegisterPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GDHighscoreRegisterPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GDSMSPacket*
Arena::CreateMaybeMessage< ::network::GDSMSPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GDSMSPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GDRequestGuildPrivPacket*
Arena::CreateMaybeMessage< ::network::GDRequestGuildPrivPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GDRequestGuildPrivPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GDRequestEmpirePrivPacket*
Arena::CreateMaybeMessage< ::network::GDRequestEmpirePrivPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GDRequestEmpirePrivPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GDRequestCharacterPrivPacket*
Arena::CreateMaybeMessage< ::network::GDRequestCharacterPrivPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GDRequestCharacterPrivPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GDMoneyLogPacket*
Arena::CreateMaybeMessage< ::network::GDMoneyLogPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GDMoneyLogPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GDSetEventFlagPacket*
Arena::CreateMaybeMessage< ::network::GDSetEventFlagPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GDSetEventFlagPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GDCreateObjectPacket*
Arena::CreateMaybeMessage< ::network::GDCreateObjectPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GDCreateObjectPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GDDeleteObjectPacket*
Arena::CreateMaybeMessage< ::network::GDDeleteObjectPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GDDeleteObjectPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GDUpdateLandPacket*
Arena::CreateMaybeMessage< ::network::GDUpdateLandPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GDUpdateLandPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GDVCardPacket*
Arena::CreateMaybeMessage< ::network::GDVCardPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GDVCardPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GDBlockChatPacket*
Arena::CreateMaybeMessage< ::network::GDBlockChatPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GDBlockChatPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GDMyShopPricelistUpdatePacket*
Arena::CreateMaybeMessage< ::network::GDMyShopPricelistUpdatePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GDMyShopPricelistUpdatePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GDMyShopPricelistRequestPacket*
Arena::CreateMaybeMessage< ::network::GDMyShopPricelistRequestPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GDMyShopPricelistRequestPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GDUpdateHorseNamePacket*
Arena::CreateMaybeMessage< ::network::GDUpdateHorseNamePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GDUpdateHorseNamePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GDRequestChargeCashPacket*
Arena::CreateMaybeMessage< ::network::GDRequestChargeCashPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GDRequestChargeCashPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GDDeleteAwardIDPacket*
Arena::CreateMaybeMessage< ::network::GDDeleteAwardIDPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GDDeleteAwardIDPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GDChannelSwitchPacket*
Arena::CreateMaybeMessage< ::network::GDChannelSwitchPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GDChannelSwitchPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GDSpawnMobTimedPacket*
Arena::CreateMaybeMessage< ::network::GDSpawnMobTimedPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GDSpawnMobTimedPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GDForceItemDeletePacket*
Arena::CreateMaybeMessage< ::network::GDForceItemDeletePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GDForceItemDeletePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GDCombatZoneSkillsCachePacket*
Arena::CreateMaybeMessage< ::network::GDCombatZoneSkillsCachePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GDCombatZoneSkillsCachePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GDWhisperPlayerExistCheckPacket*
Arena::CreateMaybeMessage< ::network::GDWhisperPlayerExistCheckPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GDWhisperPlayerExistCheckPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GDWhisperPlayerMessageOfflinePacket*
Arena::CreateMaybeMessage< ::network::GDWhisperPlayerMessageOfflinePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GDWhisperPlayerMessageOfflinePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GDLoadItemRefundPacket*
Arena::CreateMaybeMessage< ::network::GDLoadItemRefundPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GDLoadItemRefundPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GDItemDestroyLogPacket*
Arena::CreateMaybeMessage< ::network::GDItemDestroyLogPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GDItemDestroyLogPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GDItemTimedIgnorePacket*
Arena::CreateMaybeMessage< ::network::GDItemTimedIgnorePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GDItemTimedIgnorePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GDMarriageAddPacket*
Arena::CreateMaybeMessage< ::network::GDMarriageAddPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GDMarriageAddPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GDMarriageUpdatePacket*
Arena::CreateMaybeMessage< ::network::GDMarriageUpdatePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GDMarriageUpdatePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GDMarriageRemovePacket*
Arena::CreateMaybeMessage< ::network::GDMarriageRemovePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GDMarriageRemovePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GDMarriageBreakPacket*
Arena::CreateMaybeMessage< ::network::GDMarriageBreakPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GDMarriageBreakPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GDWeddingRequestPacket*
Arena::CreateMaybeMessage< ::network::GDWeddingRequestPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GDWeddingRequestPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GDWeddingReadyPacket*
Arena::CreateMaybeMessage< ::network::GDWeddingReadyPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GDWeddingReadyPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GDWeddingEndPacket*
Arena::CreateMaybeMessage< ::network::GDWeddingEndPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GDWeddingEndPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GDPartyCreatePacket*
Arena::CreateMaybeMessage< ::network::GDPartyCreatePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GDPartyCreatePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GDPartyDeletePacket*
Arena::CreateMaybeMessage< ::network::GDPartyDeletePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GDPartyDeletePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GDPartyAddPacket*
Arena::CreateMaybeMessage< ::network::GDPartyAddPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GDPartyAddPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GDPartyRemovePacket*
Arena::CreateMaybeMessage< ::network::GDPartyRemovePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GDPartyRemovePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GDPartyStateChangePacket*
Arena::CreateMaybeMessage< ::network::GDPartyStateChangePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GDPartyStateChangePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GDPartySetMemberLevelPacket*
Arena::CreateMaybeMessage< ::network::GDPartySetMemberLevelPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GDPartySetMemberLevelPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GDGuildCreatePacket*
Arena::CreateMaybeMessage< ::network::GDGuildCreatePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GDGuildCreatePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GDGuildSkillUpdatePacket*
Arena::CreateMaybeMessage< ::network::GDGuildSkillUpdatePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GDGuildSkillUpdatePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GDGuildExpUpdatePacket*
Arena::CreateMaybeMessage< ::network::GDGuildExpUpdatePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GDGuildExpUpdatePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GDGuildAddMemberPacket*
Arena::CreateMaybeMessage< ::network::GDGuildAddMemberPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GDGuildAddMemberPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GDGuildRemoveMemberPacket*
Arena::CreateMaybeMessage< ::network::GDGuildRemoveMemberPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GDGuildRemoveMemberPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GDGuildChangeGradePacket*
Arena::CreateMaybeMessage< ::network::GDGuildChangeGradePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GDGuildChangeGradePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GDGuildChangeMemberDataPacket*
Arena::CreateMaybeMessage< ::network::GDGuildChangeMemberDataPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GDGuildChangeMemberDataPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GDGuildDisbandPacket*
Arena::CreateMaybeMessage< ::network::GDGuildDisbandPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GDGuildDisbandPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GDGuildDungeonPacket*
Arena::CreateMaybeMessage< ::network::GDGuildDungeonPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GDGuildDungeonPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GDGuildDungeonCDPacket*
Arena::CreateMaybeMessage< ::network::GDGuildDungeonCDPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GDGuildDungeonCDPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GDGuildWarPacket*
Arena::CreateMaybeMessage< ::network::GDGuildWarPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GDGuildWarPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GDGuildWarScorePacket*
Arena::CreateMaybeMessage< ::network::GDGuildWarScorePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GDGuildWarScorePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GDGuildChangeLadderPointPacket*
Arena::CreateMaybeMessage< ::network::GDGuildChangeLadderPointPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GDGuildChangeLadderPointPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GDGuildUseSkillPacket*
Arena::CreateMaybeMessage< ::network::GDGuildUseSkillPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GDGuildUseSkillPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GDGuildDepositMoneyPacket*
Arena::CreateMaybeMessage< ::network::GDGuildDepositMoneyPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GDGuildDepositMoneyPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GDGuildWithdrawMoneyPacket*
Arena::CreateMaybeMessage< ::network::GDGuildWithdrawMoneyPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GDGuildWithdrawMoneyPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GDGuildWithdrawMoneyGiveReplyPacket*
Arena::CreateMaybeMessage< ::network::GDGuildWithdrawMoneyGiveReplyPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GDGuildWithdrawMoneyGiveReplyPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GDGuildWarBetPacket*
Arena::CreateMaybeMessage< ::network::GDGuildWarBetPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GDGuildWarBetPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GDGuildReqChangeMasterPacket*
Arena::CreateMaybeMessage< ::network::GDGuildReqChangeMasterPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GDGuildReqChangeMasterPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GDGuildSafeboxLoadPacket*
Arena::CreateMaybeMessage< ::network::GDGuildSafeboxLoadPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GDGuildSafeboxLoadPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GDGuildSafeboxCreatePacket*
Arena::CreateMaybeMessage< ::network::GDGuildSafeboxCreatePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GDGuildSafeboxCreatePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GDGuildSafeboxSizePacket*
Arena::CreateMaybeMessage< ::network::GDGuildSafeboxSizePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GDGuildSafeboxSizePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GDGuildSafeboxAddPacket*
Arena::CreateMaybeMessage< ::network::GDGuildSafeboxAddPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GDGuildSafeboxAddPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GDGuildSafeboxTakePacket*
Arena::CreateMaybeMessage< ::network::GDGuildSafeboxTakePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GDGuildSafeboxTakePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GDGuildSafeboxMovePacket*
Arena::CreateMaybeMessage< ::network::GDGuildSafeboxMovePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GDGuildSafeboxMovePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GDGuildSafeboxGiveGoldPacket*
Arena::CreateMaybeMessage< ::network::GDGuildSafeboxGiveGoldPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GDGuildSafeboxGiveGoldPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GDGuildSafeboxGetGoldPacket*
Arena::CreateMaybeMessage< ::network::GDGuildSafeboxGetGoldPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GDGuildSafeboxGetGoldPacket >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
