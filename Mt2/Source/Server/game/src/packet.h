#pragma once

#include "stdafx.h"
#include "../../common/length.h"
#include "../../common/tables.h"

constexpr auto PACK_CLIENT_KEY_COUNT = 4;

#ifdef AHMET_FISH_EVENT_SYSTEM
enum
{
	FISH_EVENT_SUBHEADER_TEST,
	FISH_EVENT_SUBHEADER_BOX_USE,
	FISH_EVENT_SUBHEADER_SHAPE_ADD,
	FISH_EVENT_SUBHEADER_GC_REWARD,
	FISH_EVENT_SUBHEADER_GC_ENABLE,
};
#endif

enum eInvSizeTypes
{
	INVENTORY_SIZE_TYPE_NORMAL,
	INVENTORY_SIZE_TYPE_UPPITEM,
	INVENTORY_SIZE_TYPE_SKILLBOOK,
	INVENTORY_SIZE_TYPE_STONE,
	INVENTORY_SIZE_TYPE_ENCHANT,
};

enum EP2PDungeonWarpTypes {
	P2P_DUNGEON_WARP_PLAYER,
	P2P_DUNGEON_WARP_GROUP,
	P2P_DUNGEON_WARP_MAP,
};

enum EQuestTriggerIndex
{
	QUEST_TRIGGER_GAYA = 1,
	QUEST_TRIGGER_SOULS = 2,
	QUEST_TRIGGER_SOCKS = 3,
};

enum ECostumeBonusTransferSubHeader
{
	CBT_SUBHEADER_CHECKIN,
	CBT_SUBHEADER_CHECKOUT,
	CBT_SUBHEADER_ACCEPT,
	CBT_SUBHEADER_CANCEL,
};

enum EMoveFuncType
{
	FUNC_WAIT,
	FUNC_MOVE,
	FUNC_ATTACK,
	FUNC_COMBO,
	FUNC_MOB_SKILL,
	_FUNC_SKILL,
	FUNC_MAX_NUM,
	FUNC_SKILL = 0x80,
};

enum EPhase
{
	PHASE_CLOSE,
	PHASE_HANDSHAKE,
	PHASE_LOGIN,
	PHASE_SELECT,
	PHASE_LOADING,
	PHASE_GAME,
	PHASE_DEAD,

	PHASE_CLIENT_CONNECTING,
	PHASE_DBCLIENT,
	PHASE_P2P,
	PHASE_AUTH,
	PHASE_PASSPOD,
};

enum
{
	LOGIN_FAILURE_ALREADY = 1,
	LOGIN_FAILURE_ID_NOT_EXIST = 2,
	LOGIN_FAILURE_WRONG_PASS = 3,
	LOGIN_FAILURE_FALSE = 4,
	LOGIN_FAILURE_NOT_TESTOR = 5,
	LOGIN_FAILURE_NOT_TEST_TIME = 6,
	LOGIN_FAILURE_FULL = 7
};

enum
{
	ADD_CHARACTER_STATE_DEAD = (1 << 0),
	ADD_CHARACTER_STATE_SPAWN = (1 << 1),
	ADD_CHARACTER_STATE_GUNGON = (1 << 2),
	ADD_CHARACTER_STATE_KILLER = (1 << 3),
	ADD_CHARACTER_STATE_PARTY = (1 << 4),
};

enum ECharacterEquipmentPart
{
	CHR_EQUIPPART_ARMOR,
	CHR_EQUIPPART_WEAPON,
	CHR_EQUIPPART_HEAD,
	CHR_EQUIPPART_HAIR,
#ifdef __ACCE_COSTUME__
	CHR_EQUIPPART_ACCE,
#endif
	CHR_EQUIPPART_NUM,
};

enum EPVPModes
{
	PVP_MODE_NONE,
	PVP_MODE_AGREE,
	PVP_MODE_FIGHT,
	PVP_MODE_REVENGE
};

enum
{
	PARTY_SKILL_HEAL = 1,
	PARTY_SKILL_WARP = 2
};

enum
{
	SAFEBOX_MONEY_STATE_SAVE,
	SAFEBOX_MONEY_STATE_WITHDRAW,
};

enum
{
	WALKMODE_RUN,
	WALKMODE_WALK,
};

// ¿ëÈ¥¼®
enum EDragonSoulRefineWindowRefineType
{
	DragonSoulRefineWindow_UPGRADE,
	DragonSoulRefineWindow_IMPROVEMENT,
	DragonSoulRefineWindow_REFINE,
};

enum EPacketCGDragonSoulSubHeaderType
{
	DS_SUB_HEADER_OPEN,
	DS_SUB_HEADER_CLOSE,
	DS_SUB_HEADER_DO_REFINE_GRADE,
	DS_SUB_HEADER_DO_REFINE_STEP,
	DS_SUB_HEADER_DO_REFINE_STRENGTH,
	DS_SUB_HEADER_REFINE_FAIL,
	DS_SUB_HEADER_REFINE_FAIL_MAX_REFINE,
	DS_SUB_HEADER_REFINE_FAIL_INVALID_MATERIAL,
	DS_SUB_HEADER_REFINE_FAIL_NOT_ENOUGH_MONEY,
	DS_SUB_HEADER_REFINE_FAIL_NOT_ENOUGH_MATERIAL,
	DS_SUB_HEADER_REFINE_FAIL_TOO_MUCH_MATERIAL,
	DS_SUB_HEADER_REFINE_SUCCEED,
};
