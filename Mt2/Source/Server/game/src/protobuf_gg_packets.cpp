// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gg_packets.proto

#include "protobuf_gg_packets.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace network {
PROTOBUF_CONSTEXPR GGSetupPacket::GGSetupPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.port_)*/0u
  , /*decltype(_impl_.listen_port_)*/0u
  , /*decltype(_impl_.channel_)*/0u
  , /*decltype(_impl_.processor_core_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GGSetupPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GGSetupPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GGSetupPacketDefaultTypeInternal() {}
  union {
    GGSetupPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GGSetupPacketDefaultTypeInternal _GGSetupPacket_default_instance_;
PROTOBUF_CONSTEXPR GGLoginPacket::GGLoginPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pid_)*/0u
  , /*decltype(_impl_.empire_)*/0u
  , /*decltype(_impl_.map_index_)*/0u
  , /*decltype(_impl_.channel_)*/0u
  , /*decltype(_impl_.language_)*/0u
  , /*decltype(_impl_.race_)*/0u
  , /*decltype(_impl_.is_in_dungeon_)*/false
  , /*decltype(_impl_.temp_login_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GGLoginPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GGLoginPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GGLoginPacketDefaultTypeInternal() {}
  union {
    GGLoginPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GGLoginPacketDefaultTypeInternal _GGLoginPacket_default_instance_;
PROTOBUF_CONSTEXPR GGLogoutPacket::GGLogoutPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GGLogoutPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GGLogoutPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GGLogoutPacketDefaultTypeInternal() {}
  union {
    GGLogoutPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GGLogoutPacketDefaultTypeInternal _GGLogoutPacket_default_instance_;
PROTOBUF_CONSTEXPR GGRelayPacket::GGRelayPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.relay_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pid_)*/0u
  , /*decltype(_impl_.relay_header_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GGRelayPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GGRelayPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GGRelayPacketDefaultTypeInternal() {}
  union {
    GGRelayPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GGRelayPacketDefaultTypeInternal _GGRelayPacket_default_instance_;
PROTOBUF_CONSTEXPR GGPlayerPacket::GGPlayerPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.relay_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.language_)*/0
  , /*decltype(_impl_.empire_)*/0u
  , /*decltype(_impl_.pid_)*/0u
  , /*decltype(_impl_.relay_header_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GGPlayerPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GGPlayerPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GGPlayerPacketDefaultTypeInternal() {}
  union {
    GGPlayerPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GGPlayerPacketDefaultTypeInternal _GGPlayerPacket_default_instance_;
PROTOBUF_CONSTEXPR GGDisconnectPacket::GGDisconnectPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.login_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GGDisconnectPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GGDisconnectPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GGDisconnectPacketDefaultTypeInternal() {}
  union {
    GGDisconnectPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GGDisconnectPacketDefaultTypeInternal _GGDisconnectPacket_default_instance_;
PROTOBUF_CONSTEXPR GGLoginPingPacket::GGLoginPingPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.login_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GGLoginPingPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GGLoginPingPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GGLoginPingPacketDefaultTypeInternal() {}
  union {
    GGLoginPingPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GGLoginPingPacketDefaultTypeInternal _GGLoginPingPacket_default_instance_;
PROTOBUF_CONSTEXPR GGGiveItemPacket::GGGiveItemPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.item_)*/nullptr
  , /*decltype(_impl_.no_refund_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GGGiveItemPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GGGiveItemPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GGGiveItemPacketDefaultTypeInternal() {}
  union {
    GGGiveItemPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GGGiveItemPacketDefaultTypeInternal _GGGiveItemPacket_default_instance_;
PROTOBUF_CONSTEXPR GGGiveGoldPacket::GGGiveGoldPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.gold_)*/int64_t{0}
  , /*decltype(_impl_.pid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GGGiveGoldPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GGGiveGoldPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GGGiveGoldPacketDefaultTypeInternal() {}
  union {
    GGGiveGoldPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GGGiveGoldPacketDefaultTypeInternal _GGGiveGoldPacket_default_instance_;
PROTOBUF_CONSTEXPR GGShoutPacket::GGShoutPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.text_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.empire_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GGShoutPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GGShoutPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GGShoutPacketDefaultTypeInternal() {}
  union {
    GGShoutPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GGShoutPacketDefaultTypeInternal _GGShoutPacket_default_instance_;
PROTOBUF_CONSTEXPR GGNoticePacket::GGNoticePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.big_font_)*/false
  , /*decltype(_impl_.lang_id_)*/0
  , /*decltype(_impl_.channel_)*/0u
  , /*decltype(_impl_.empire_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GGNoticePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GGNoticePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GGNoticePacketDefaultTypeInternal() {}
  union {
    GGNoticePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GGNoticePacketDefaultTypeInternal _GGNoticePacket_default_instance_;
PROTOBUF_CONSTEXPR GGSuccessNoticePacket::GGSuccessNoticePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.lang_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GGSuccessNoticePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GGSuccessNoticePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GGSuccessNoticePacketDefaultTypeInternal() {}
  union {
    GGSuccessNoticePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GGSuccessNoticePacketDefaultTypeInternal _GGSuccessNoticePacket_default_instance_;
PROTOBUF_CONSTEXPR GGMessengerRequestPacket::GGMessengerRequestPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.requestor_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.target_pid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GGMessengerRequestPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GGMessengerRequestPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GGMessengerRequestPacketDefaultTypeInternal() {}
  union {
    GGMessengerRequestPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GGMessengerRequestPacketDefaultTypeInternal _GGMessengerRequestPacket_default_instance_;
PROTOBUF_CONSTEXPR GGMessengerRequestFailPacket::GGMessengerRequestFailPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.requestor_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.target_pid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GGMessengerRequestFailPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GGMessengerRequestFailPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GGMessengerRequestFailPacketDefaultTypeInternal() {}
  union {
    GGMessengerRequestFailPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GGMessengerRequestFailPacketDefaultTypeInternal _GGMessengerRequestFailPacket_default_instance_;
PROTOBUF_CONSTEXPR GGMessengerAddPacket::GGMessengerAddPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.account_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.companion_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GGMessengerAddPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GGMessengerAddPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GGMessengerAddPacketDefaultTypeInternal() {}
  union {
    GGMessengerAddPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GGMessengerAddPacketDefaultTypeInternal _GGMessengerAddPacket_default_instance_;
PROTOBUF_CONSTEXPR GGMessengerRemovePacket::GGMessengerRemovePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.account_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.companion_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GGMessengerRemovePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GGMessengerRemovePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GGMessengerRemovePacketDefaultTypeInternal() {}
  union {
    GGMessengerRemovePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GGMessengerRemovePacketDefaultTypeInternal _GGMessengerRemovePacket_default_instance_;
PROTOBUF_CONSTEXPR GGMessengerBlockAddPacket::GGMessengerBlockAddPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.account_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.companion_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GGMessengerBlockAddPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GGMessengerBlockAddPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GGMessengerBlockAddPacketDefaultTypeInternal() {}
  union {
    GGMessengerBlockAddPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GGMessengerBlockAddPacketDefaultTypeInternal _GGMessengerBlockAddPacket_default_instance_;
PROTOBUF_CONSTEXPR GGMessengerBlockRemovePacket::GGMessengerBlockRemovePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.account_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.companion_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GGMessengerBlockRemovePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GGMessengerBlockRemovePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GGMessengerBlockRemovePacketDefaultTypeInternal() {}
  union {
    GGMessengerBlockRemovePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GGMessengerBlockRemovePacketDefaultTypeInternal _GGMessengerBlockRemovePacket_default_instance_;
PROTOBUF_CONSTEXPR GGFindPositionPacket::GGFindPositionPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.from_pid_)*/0u
  , /*decltype(_impl_.target_pid_)*/0u
  , /*decltype(_impl_.is_gm_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GGFindPositionPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GGFindPositionPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GGFindPositionPacketDefaultTypeInternal() {}
  union {
    GGFindPositionPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GGFindPositionPacketDefaultTypeInternal _GGFindPositionPacket_default_instance_;
PROTOBUF_CONSTEXPR GGWarpCharacterPacket::GGWarpCharacterPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pid_)*/0u
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.map_index_)*/0u
  , /*decltype(_impl_.target_pid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GGWarpCharacterPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GGWarpCharacterPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GGWarpCharacterPacketDefaultTypeInternal() {}
  union {
    GGWarpCharacterPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GGWarpCharacterPacketDefaultTypeInternal _GGWarpCharacterPacket_default_instance_;
PROTOBUF_CONSTEXPR GGXmasWarpSantaPacket::GGXmasWarpSantaPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.channel_)*/0u
  , /*decltype(_impl_.map_index_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GGXmasWarpSantaPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GGXmasWarpSantaPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GGXmasWarpSantaPacketDefaultTypeInternal() {}
  union {
    GGXmasWarpSantaPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GGXmasWarpSantaPacketDefaultTypeInternal _GGXmasWarpSantaPacket_default_instance_;
PROTOBUF_CONSTEXPR GGXmasWarpSantaReplyPacket::GGXmasWarpSantaReplyPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.channel_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GGXmasWarpSantaReplyPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GGXmasWarpSantaReplyPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GGXmasWarpSantaReplyPacketDefaultTypeInternal() {}
  union {
    GGXmasWarpSantaReplyPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GGXmasWarpSantaReplyPacketDefaultTypeInternal _GGXmasWarpSantaReplyPacket_default_instance_;
PROTOBUF_CONSTEXPR GGBlockChatPacket::GGBlockChatPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.block_duration_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GGBlockChatPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GGBlockChatPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GGBlockChatPacketDefaultTypeInternal() {}
  union {
    GGBlockChatPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GGBlockChatPacketDefaultTypeInternal _GGBlockChatPacket_default_instance_;
PROTOBUF_CONSTEXPR GGCastleSiegePacket::GGCastleSiegePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.empire_)*/0u
  , /*decltype(_impl_.tower_count_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GGCastleSiegePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GGCastleSiegePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GGCastleSiegePacketDefaultTypeInternal() {}
  union {
    GGCastleSiegePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GGCastleSiegePacketDefaultTypeInternal _GGCastleSiegePacket_default_instance_;
PROTOBUF_CONSTEXPR GGPCBangUpdatePacket::GGPCBangUpdatePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pc_bang_id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GGPCBangUpdatePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GGPCBangUpdatePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GGPCBangUpdatePacketDefaultTypeInternal() {}
  union {
    GGPCBangUpdatePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GGPCBangUpdatePacketDefaultTypeInternal _GGPCBangUpdatePacket_default_instance_;
PROTOBUF_CONSTEXPR GGWhisperManagerAddPacket::GGWhisperManagerAddPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sender_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.receiver_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sender_pid_)*/0u
  , /*decltype(_impl_.receiver_pid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GGWhisperManagerAddPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GGWhisperManagerAddPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GGWhisperManagerAddPacketDefaultTypeInternal() {}
  union {
    GGWhisperManagerAddPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GGWhisperManagerAddPacketDefaultTypeInternal _GGWhisperManagerAddPacket_default_instance_;
PROTOBUF_CONSTEXPR GGTeamlerStatusPacket::GGTeamlerStatusPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.is_online_)*/false
  , /*decltype(_impl_.language_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GGTeamlerStatusPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GGTeamlerStatusPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GGTeamlerStatusPacketDefaultTypeInternal() {}
  union {
    GGTeamlerStatusPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GGTeamlerStatusPacketDefaultTypeInternal _GGTeamlerStatusPacket_default_instance_;
PROTOBUF_CONSTEXPR GGRequestDungeonWarpPacket::GGRequestDungeonWarpPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_)*/0u
  , /*decltype(_impl_.player_id_)*/0u
  , /*decltype(_impl_.map_index_)*/0u
  , /*decltype(_impl_.dest_x_)*/0u
  , /*decltype(_impl_.dest_y_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GGRequestDungeonWarpPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GGRequestDungeonWarpPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GGRequestDungeonWarpPacketDefaultTypeInternal() {}
  union {
    GGRequestDungeonWarpPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GGRequestDungeonWarpPacketDefaultTypeInternal _GGRequestDungeonWarpPacket_default_instance_;
PROTOBUF_CONSTEXPR GGAnswerDungeonWarpPacket::GGAnswerDungeonWarpPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_)*/0u
  , /*decltype(_impl_.player_id_)*/0u
  , /*decltype(_impl_.map_index_)*/0u
  , /*decltype(_impl_.dest_x_)*/0u
  , /*decltype(_impl_.dest_y_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GGAnswerDungeonWarpPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GGAnswerDungeonWarpPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GGAnswerDungeonWarpPacketDefaultTypeInternal() {}
  union {
    GGAnswerDungeonWarpPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GGAnswerDungeonWarpPacketDefaultTypeInternal _GGAnswerDungeonWarpPacket_default_instance_;
PROTOBUF_CONSTEXPR GGDungeonSetFlagPacket::GGDungeonSetFlagPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.flag_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pid_)*/0u
  , /*decltype(_impl_.flag_value_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GGDungeonSetFlagPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GGDungeonSetFlagPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GGDungeonSetFlagPacketDefaultTypeInternal() {}
  union {
    GGDungeonSetFlagPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GGDungeonSetFlagPacketDefaultTypeInternal _GGDungeonSetFlagPacket_default_instance_;
PROTOBUF_CONSTEXPR GGExecReloadCommandPacket::GGExecReloadCommandPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.argument_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GGExecReloadCommandPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GGExecReloadCommandPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GGExecReloadCommandPacketDefaultTypeInternal() {}
  union {
    GGExecReloadCommandPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GGExecReloadCommandPacketDefaultTypeInternal _GGExecReloadCommandPacket_default_instance_;
PROTOBUF_CONSTEXPR GGRecvShutdownPacket::GGRecvShutdownPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.start_sec_)*/0
  , /*decltype(_impl_.maintenance_)*/false
  , /*decltype(_impl_.maintenance_duration_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GGRecvShutdownPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GGRecvShutdownPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GGRecvShutdownPacketDefaultTypeInternal() {}
  union {
    GGRecvShutdownPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GGRecvShutdownPacketDefaultTypeInternal _GGRecvShutdownPacket_default_instance_;
PROTOBUF_CONSTEXPR GGTransferPacket::GGTransferPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GGTransferPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GGTransferPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GGTransferPacketDefaultTypeInternal() {}
  union {
    GGTransferPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GGTransferPacketDefaultTypeInternal _GGTransferPacket_default_instance_;
PROTOBUF_CONSTEXPR GGForceItemDeletePacket::GGForceItemDeletePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.item_id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GGForceItemDeletePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GGForceItemDeletePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GGForceItemDeletePacketDefaultTypeInternal() {}
  union {
    GGForceItemDeletePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GGForceItemDeletePacketDefaultTypeInternal _GGForceItemDeletePacket_default_instance_;
PROTOBUF_CONSTEXPR GGTeamChatPacket::GGTeamChatPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.text_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GGTeamChatPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GGTeamChatPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GGTeamChatPacketDefaultTypeInternal() {}
  union {
    GGTeamChatPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GGTeamChatPacketDefaultTypeInternal _GGTeamChatPacket_default_instance_;
PROTOBUF_CONSTEXPR GGCombatZoneRankingPacket::GGCombatZoneRankingPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.weekly_)*/{}
  , /*decltype(_impl_.general_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GGCombatZoneRankingPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GGCombatZoneRankingPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GGCombatZoneRankingPacketDefaultTypeInternal() {}
  union {
    GGCombatZoneRankingPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GGCombatZoneRankingPacketDefaultTypeInternal _GGCombatZoneRankingPacket_default_instance_;
PROTOBUF_CONSTEXPR GGUpdateRightsPacket::GGUpdateRightsPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.gm_level_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GGUpdateRightsPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GGUpdateRightsPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GGUpdateRightsPacketDefaultTypeInternal() {}
  union {
    GGUpdateRightsPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GGUpdateRightsPacketDefaultTypeInternal _GGUpdateRightsPacket_default_instance_;
PROTOBUF_CONSTEXPR GGFlushPlayerPacket::GGFlushPlayerPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GGFlushPlayerPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GGFlushPlayerPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GGFlushPlayerPacketDefaultTypeInternal() {}
  union {
    GGFlushPlayerPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GGFlushPlayerPacketDefaultTypeInternal _GGFlushPlayerPacket_default_instance_;
PROTOBUF_CONSTEXPR GGHomepageCommandPacket::GGHomepageCommandPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.command_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GGHomepageCommandPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GGHomepageCommandPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GGHomepageCommandPacketDefaultTypeInternal() {}
  union {
    GGHomepageCommandPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GGHomepageCommandPacketDefaultTypeInternal _GGHomepageCommandPacket_default_instance_;
PROTOBUF_CONSTEXPR GGPullOfflineMessagesPacket::GGPullOfflineMessagesPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GGPullOfflineMessagesPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GGPullOfflineMessagesPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GGPullOfflineMessagesPacketDefaultTypeInternal() {}
  union {
    GGPullOfflineMessagesPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GGPullOfflineMessagesPacketDefaultTypeInternal _GGPullOfflineMessagesPacket_default_instance_;
PROTOBUF_CONSTEXPR GGDmgRankingUpdatePacket_Entry::GGDmgRankingUpdatePacket_Entry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.dmg_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GGDmgRankingUpdatePacket_EntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GGDmgRankingUpdatePacket_EntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GGDmgRankingUpdatePacket_EntryDefaultTypeInternal() {}
  union {
    GGDmgRankingUpdatePacket_Entry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GGDmgRankingUpdatePacket_EntryDefaultTypeInternal _GGDmgRankingUpdatePacket_Entry_default_instance_;
PROTOBUF_CONSTEXPR GGDmgRankingUpdatePacket::GGDmgRankingUpdatePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/nullptr
  , /*decltype(_impl_.type_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GGDmgRankingUpdatePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GGDmgRankingUpdatePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GGDmgRankingUpdatePacketDefaultTypeInternal() {}
  union {
    GGDmgRankingUpdatePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GGDmgRankingUpdatePacketDefaultTypeInternal _GGDmgRankingUpdatePacket_default_instance_;
PROTOBUF_CONSTEXPR GGLocaleUpdateLastUsagePacket::GGLocaleUpdateLastUsagePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.lang_base_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GGLocaleUpdateLastUsagePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GGLocaleUpdateLastUsagePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GGLocaleUpdateLastUsagePacketDefaultTypeInternal() {}
  union {
    GGLocaleUpdateLastUsagePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GGLocaleUpdateLastUsagePacketDefaultTypeInternal _GGLocaleUpdateLastUsagePacket_default_instance_;
PROTOBUF_CONSTEXPR GGReloadCommandPacket::GGReloadCommandPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.argument_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GGReloadCommandPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GGReloadCommandPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GGReloadCommandPacketDefaultTypeInternal() {}
  union {
    GGReloadCommandPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GGReloadCommandPacketDefaultTypeInternal _GGReloadCommandPacket_default_instance_;
PROTOBUF_CONSTEXPR GGAuctionInsertItemPacket::GGAuctionInsertItemPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.item_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GGAuctionInsertItemPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GGAuctionInsertItemPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GGAuctionInsertItemPacketDefaultTypeInternal() {}
  union {
    GGAuctionInsertItemPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GGAuctionInsertItemPacketDefaultTypeInternal _GGAuctionInsertItemPacket_default_instance_;
PROTOBUF_CONSTEXPR GGAuctionTakeItemPacket::GGAuctionTakeItemPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.owner_id_)*/0u
  , /*decltype(_impl_.item_id_)*/0u
  , /*decltype(_impl_.inventory_pos_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GGAuctionTakeItemPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GGAuctionTakeItemPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GGAuctionTakeItemPacketDefaultTypeInternal() {}
  union {
    GGAuctionTakeItemPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GGAuctionTakeItemPacketDefaultTypeInternal _GGAuctionTakeItemPacket_default_instance_;
PROTOBUF_CONSTEXPR GGAuctionBuyItemPacket::GGAuctionBuyItemPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.player_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pid_)*/0u
  , /*decltype(_impl_.item_id_)*/0u
  , /*decltype(_impl_.paid_gold_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GGAuctionBuyItemPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GGAuctionBuyItemPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GGAuctionBuyItemPacketDefaultTypeInternal() {}
  union {
    GGAuctionBuyItemPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GGAuctionBuyItemPacketDefaultTypeInternal _GGAuctionBuyItemPacket_default_instance_;
PROTOBUF_CONSTEXPR GGAuctionTakeGoldPacket::GGAuctionTakeGoldPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.gold_)*/uint64_t{0u}
  , /*decltype(_impl_.owner_id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GGAuctionTakeGoldPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GGAuctionTakeGoldPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GGAuctionTakeGoldPacketDefaultTypeInternal() {}
  union {
    GGAuctionTakeGoldPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GGAuctionTakeGoldPacketDefaultTypeInternal _GGAuctionTakeGoldPacket_default_instance_;
PROTOBUF_CONSTEXPR GGAuctionSearchItemsPacket::GGAuctionSearchItemsPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.options_)*/nullptr
  , /*decltype(_impl_.pid_)*/0u
  , /*decltype(_impl_.page_)*/0u
  , /*decltype(_impl_.language_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GGAuctionSearchItemsPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GGAuctionSearchItemsPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GGAuctionSearchItemsPacketDefaultTypeInternal() {}
  union {
    GGAuctionSearchItemsPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GGAuctionSearchItemsPacketDefaultTypeInternal _GGAuctionSearchItemsPacket_default_instance_;
PROTOBUF_CONSTEXPR GGAuctionExtendedSearchItemsPacket::GGAuctionExtendedSearchItemsPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.options_)*/nullptr
  , /*decltype(_impl_.pid_)*/0u
  , /*decltype(_impl_.page_)*/0u
  , /*decltype(_impl_.language_)*/0u
  , /*decltype(_impl_.map_index_)*/0u
  , /*decltype(_impl_.channel_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GGAuctionExtendedSearchItemsPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GGAuctionExtendedSearchItemsPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GGAuctionExtendedSearchItemsPacketDefaultTypeInternal() {}
  union {
    GGAuctionExtendedSearchItemsPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GGAuctionExtendedSearchItemsPacketDefaultTypeInternal _GGAuctionExtendedSearchItemsPacket_default_instance_;
PROTOBUF_CONSTEXPR GGAuctionMarkShopPacket::GGAuctionMarkShopPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pid_)*/0u
  , /*decltype(_impl_.item_id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GGAuctionMarkShopPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GGAuctionMarkShopPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GGAuctionMarkShopPacketDefaultTypeInternal() {}
  union {
    GGAuctionMarkShopPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GGAuctionMarkShopPacketDefaultTypeInternal _GGAuctionMarkShopPacket_default_instance_;
PROTOBUF_CONSTEXPR GGAuctionAnswerMarkShopPacket::GGAuctionAnswerMarkShopPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pid_)*/0u
  , /*decltype(_impl_.owner_id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GGAuctionAnswerMarkShopPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GGAuctionAnswerMarkShopPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GGAuctionAnswerMarkShopPacketDefaultTypeInternal() {}
  union {
    GGAuctionAnswerMarkShopPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GGAuctionAnswerMarkShopPacketDefaultTypeInternal _GGAuctionAnswerMarkShopPacket_default_instance_;
PROTOBUF_CONSTEXPR GGAuctionShopRequestShowPacket::GGAuctionShopRequestShowPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GGAuctionShopRequestShowPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GGAuctionShopRequestShowPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GGAuctionShopRequestShowPacketDefaultTypeInternal() {}
  union {
    GGAuctionShopRequestShowPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GGAuctionShopRequestShowPacketDefaultTypeInternal _GGAuctionShopRequestShowPacket_default_instance_;
PROTOBUF_CONSTEXPR GGAuctionShopOpenPacket::GGAuctionShopOpenPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_.owner_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.owner_id_)*/0u
  , /*decltype(_impl_.style_)*/0u
  , /*decltype(_impl_.vnum_)*/0u
  , /*decltype(_impl_.color_red_)*/0
  , /*decltype(_impl_.color_green_)*/0
  , /*decltype(_impl_.color_blue_)*/0
  , /*decltype(_impl_.channel_)*/0u
  , /*decltype(_impl_.map_index_)*/0u
  , /*decltype(_impl_.x_)*/0u
  , /*decltype(_impl_.y_)*/0u
  , /*decltype(_impl_.timeout_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GGAuctionShopOpenPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GGAuctionShopOpenPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GGAuctionShopOpenPacketDefaultTypeInternal() {}
  union {
    GGAuctionShopOpenPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GGAuctionShopOpenPacketDefaultTypeInternal _GGAuctionShopOpenPacket_default_instance_;
PROTOBUF_CONSTEXPR GGAuctionShopTakeGoldPacket::GGAuctionShopTakeGoldPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.gold_)*/uint64_t{0u}
  , /*decltype(_impl_.owner_id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GGAuctionShopTakeGoldPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GGAuctionShopTakeGoldPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GGAuctionShopTakeGoldPacketDefaultTypeInternal() {}
  union {
    GGAuctionShopTakeGoldPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GGAuctionShopTakeGoldPacketDefaultTypeInternal _GGAuctionShopTakeGoldPacket_default_instance_;
PROTOBUF_CONSTEXPR GGAuctionShopSpawnPacket::GGAuctionShopSpawnPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.owner_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.owner_id_)*/0u
  , /*decltype(_impl_.vnum_)*/0u
  , /*decltype(_impl_.style_)*/0u
  , /*decltype(_impl_.color_red_)*/0
  , /*decltype(_impl_.color_green_)*/0
  , /*decltype(_impl_.color_blue_)*/0
  , /*decltype(_impl_.map_index_)*/0u
  , /*decltype(_impl_.x_)*/0u
  , /*decltype(_impl_.y_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GGAuctionShopSpawnPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GGAuctionShopSpawnPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GGAuctionShopSpawnPacketDefaultTypeInternal() {}
  union {
    GGAuctionShopSpawnPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GGAuctionShopSpawnPacketDefaultTypeInternal _GGAuctionShopSpawnPacket_default_instance_;
PROTOBUF_CONSTEXPR GGAuctionShopDespawnPacket::GGAuctionShopDespawnPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.owner_id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GGAuctionShopDespawnPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GGAuctionShopDespawnPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GGAuctionShopDespawnPacketDefaultTypeInternal() {}
  union {
    GGAuctionShopDespawnPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GGAuctionShopDespawnPacketDefaultTypeInternal _GGAuctionShopDespawnPacket_default_instance_;
PROTOBUF_CONSTEXPR GGAuctionShopViewPacket::GGAuctionShopViewPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.player_id_)*/0u
  , /*decltype(_impl_.owner_id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GGAuctionShopViewPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GGAuctionShopViewPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GGAuctionShopViewPacketDefaultTypeInternal() {}
  union {
    GGAuctionShopViewPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GGAuctionShopViewPacketDefaultTypeInternal _GGAuctionShopViewPacket_default_instance_;
PROTOBUF_CONSTEXPR GGAuctionShopViewCancelPacket::GGAuctionShopViewCancelPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.player_id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GGAuctionShopViewCancelPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GGAuctionShopViewCancelPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GGAuctionShopViewCancelPacketDefaultTypeInternal() {}
  union {
    GGAuctionShopViewCancelPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GGAuctionShopViewCancelPacketDefaultTypeInternal _GGAuctionShopViewCancelPacket_default_instance_;
PROTOBUF_CONSTEXPR GGAuctionShopRequestHistoryPacket::GGAuctionShopRequestHistoryPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.player_id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GGAuctionShopRequestHistoryPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GGAuctionShopRequestHistoryPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GGAuctionShopRequestHistoryPacketDefaultTypeInternal() {}
  union {
    GGAuctionShopRequestHistoryPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GGAuctionShopRequestHistoryPacketDefaultTypeInternal _GGAuctionShopRequestHistoryPacket_default_instance_;
PROTOBUF_CONSTEXPR GGAuctionShopRenewPacket::GGAuctionShopRenewPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.player_id_)*/0u
  , /*decltype(_impl_.timeout_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GGAuctionShopRenewPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GGAuctionShopRenewPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GGAuctionShopRenewPacketDefaultTypeInternal() {}
  union {
    GGAuctionShopRenewPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GGAuctionShopRenewPacketDefaultTypeInternal _GGAuctionShopRenewPacket_default_instance_;
PROTOBUF_CONSTEXPR GGAuctionShopClosePacket::GGAuctionShopClosePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.player_id_)*/0u
  , /*decltype(_impl_.map_index_)*/0u
  , /*decltype(_impl_.channel_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GGAuctionShopClosePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GGAuctionShopClosePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GGAuctionShopClosePacketDefaultTypeInternal() {}
  union {
    GGAuctionShopClosePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GGAuctionShopClosePacketDefaultTypeInternal _GGAuctionShopClosePacket_default_instance_;
PROTOBUF_CONSTEXPR GGAuctionRequestAveragePricePacket::GGAuctionRequestAveragePricePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.player_id_)*/0u
  , /*decltype(_impl_.requestor_)*/0u
  , /*decltype(_impl_.vnum_)*/0u
  , /*decltype(_impl_.count_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GGAuctionRequestAveragePricePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GGAuctionRequestAveragePricePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GGAuctionRequestAveragePricePacketDefaultTypeInternal() {}
  union {
    GGAuctionRequestAveragePricePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GGAuctionRequestAveragePricePacketDefaultTypeInternal _GGAuctionRequestAveragePricePacket_default_instance_;
PROTOBUF_CONSTEXPR GGEventManagerOpenRegistrationPacket::GGEventManagerOpenRegistrationPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.event_index_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GGEventManagerOpenRegistrationPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GGEventManagerOpenRegistrationPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GGEventManagerOpenRegistrationPacketDefaultTypeInternal() {}
  union {
    GGEventManagerOpenRegistrationPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GGEventManagerOpenRegistrationPacketDefaultTypeInternal _GGEventManagerOpenRegistrationPacket_default_instance_;
PROTOBUF_CONSTEXPR GGEventManagerCloseRegistrationPacket::GGEventManagerCloseRegistrationPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.clear_event_index_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GGEventManagerCloseRegistrationPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GGEventManagerCloseRegistrationPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GGEventManagerCloseRegistrationPacketDefaultTypeInternal() {}
  union {
    GGEventManagerCloseRegistrationPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GGEventManagerCloseRegistrationPacketDefaultTypeInternal _GGEventManagerCloseRegistrationPacket_default_instance_;
PROTOBUF_CONSTEXPR GGEventManagerIgnorePlayerPacket::GGEventManagerIgnorePlayerPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GGEventManagerIgnorePlayerPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GGEventManagerIgnorePlayerPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GGEventManagerIgnorePlayerPacketDefaultTypeInternal() {}
  union {
    GGEventManagerIgnorePlayerPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GGEventManagerIgnorePlayerPacketDefaultTypeInternal _GGEventManagerIgnorePlayerPacket_default_instance_;
PROTOBUF_CONSTEXPR GGEventManagerOpenAnnouncementPacket::GGEventManagerOpenAnnouncementPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_)*/0u
  , /*decltype(_impl_.tm_stamp_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GGEventManagerOpenAnnouncementPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GGEventManagerOpenAnnouncementPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GGEventManagerOpenAnnouncementPacketDefaultTypeInternal() {}
  union {
    GGEventManagerOpenAnnouncementPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GGEventManagerOpenAnnouncementPacketDefaultTypeInternal _GGEventManagerOpenAnnouncementPacket_default_instance_;
PROTOBUF_CONSTEXPR GGEventManagerTagTeamRegisterPacket::GGEventManagerTagTeamRegisterPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pid1_)*/0u
  , /*decltype(_impl_.pid2_)*/0u
  , /*decltype(_impl_.groupidx_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GGEventManagerTagTeamRegisterPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GGEventManagerTagTeamRegisterPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GGEventManagerTagTeamRegisterPacketDefaultTypeInternal() {}
  union {
    GGEventManagerTagTeamRegisterPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GGEventManagerTagTeamRegisterPacketDefaultTypeInternal _GGEventManagerTagTeamRegisterPacket_default_instance_;
PROTOBUF_CONSTEXPR GGEventManagerTagTeamUnregisterPacket::GGEventManagerTagTeamUnregisterPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pid1_)*/0u
  , /*decltype(_impl_.pid2_)*/0u
  , /*decltype(_impl_.groupidx_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GGEventManagerTagTeamUnregisterPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GGEventManagerTagTeamUnregisterPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GGEventManagerTagTeamUnregisterPacketDefaultTypeInternal() {}
  union {
    GGEventManagerTagTeamUnregisterPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GGEventManagerTagTeamUnregisterPacketDefaultTypeInternal _GGEventManagerTagTeamUnregisterPacket_default_instance_;
PROTOBUF_CONSTEXPR GGEventManagerTagTeamCreatePacket::GGEventManagerTagTeamCreatePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.teams_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GGEventManagerTagTeamCreatePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GGEventManagerTagTeamCreatePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GGEventManagerTagTeamCreatePacketDefaultTypeInternal() {}
  union {
    GGEventManagerTagTeamCreatePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GGEventManagerTagTeamCreatePacketDefaultTypeInternal _GGEventManagerTagTeamCreatePacket_default_instance_;
PROTOBUF_CONSTEXPR GGGuildChatPacket::GGGuildChatPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.guild_id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GGGuildChatPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GGGuildChatPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GGGuildChatPacketDefaultTypeInternal() {}
  union {
    GGGuildChatPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GGGuildChatPacketDefaultTypeInternal _GGGuildChatPacket_default_instance_;
PROTOBUF_CONSTEXPR GGGuildSetMemberCountBonusPacket::GGGuildSetMemberCountBonusPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.guild_id_)*/0u
  , /*decltype(_impl_.bonus_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GGGuildSetMemberCountBonusPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GGGuildSetMemberCountBonusPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GGGuildSetMemberCountBonusPacketDefaultTypeInternal() {}
  union {
    GGGuildSetMemberCountBonusPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GGGuildSetMemberCountBonusPacketDefaultTypeInternal _GGGuildSetMemberCountBonusPacket_default_instance_;
PROTOBUF_CONSTEXPR GGGuildWarZoneMapIndexPacket::GGGuildWarZoneMapIndexPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.guild_id1_)*/0u
  , /*decltype(_impl_.guild_id2_)*/0u
  , /*decltype(_impl_.map_index_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GGGuildWarZoneMapIndexPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GGGuildWarZoneMapIndexPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GGGuildWarZoneMapIndexPacketDefaultTypeInternal() {}
  union {
    GGGuildWarZoneMapIndexPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GGGuildWarZoneMapIndexPacketDefaultTypeInternal _GGGuildWarZoneMapIndexPacket_default_instance_;
PROTOBUF_CONSTEXPR GGGuildChangeNamePacket::GGGuildChangeNamePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.guild_id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GGGuildChangeNamePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GGGuildChangeNamePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GGGuildChangeNamePacketDefaultTypeInternal() {}
  union {
    GGGuildChangeNamePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GGGuildChangeNamePacketDefaultTypeInternal _GGGuildChangeNamePacket_default_instance_;
}  // namespace network
static ::_pb::Metadata file_level_metadata_gg_5fpackets_2eproto[74];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_gg_5fpackets_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_gg_5fpackets_2eproto = nullptr;

const uint32_t TableStruct_gg_5fpackets_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GGSetupPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GGSetupPacket, _impl_.port_),
  PROTOBUF_FIELD_OFFSET(::network::GGSetupPacket, _impl_.listen_port_),
  PROTOBUF_FIELD_OFFSET(::network::GGSetupPacket, _impl_.channel_),
  PROTOBUF_FIELD_OFFSET(::network::GGSetupPacket, _impl_.processor_core_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GGLoginPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GGLoginPacket, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::network::GGLoginPacket, _impl_.pid_),
  PROTOBUF_FIELD_OFFSET(::network::GGLoginPacket, _impl_.empire_),
  PROTOBUF_FIELD_OFFSET(::network::GGLoginPacket, _impl_.map_index_),
  PROTOBUF_FIELD_OFFSET(::network::GGLoginPacket, _impl_.channel_),
  PROTOBUF_FIELD_OFFSET(::network::GGLoginPacket, _impl_.language_),
  PROTOBUF_FIELD_OFFSET(::network::GGLoginPacket, _impl_.is_in_dungeon_),
  PROTOBUF_FIELD_OFFSET(::network::GGLoginPacket, _impl_.race_),
  PROTOBUF_FIELD_OFFSET(::network::GGLoginPacket, _impl_.temp_login_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GGLogoutPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GGLogoutPacket, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::network::GGLogoutPacket, _impl_.pid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GGRelayPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GGRelayPacket, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::network::GGRelayPacket, _impl_.pid_),
  PROTOBUF_FIELD_OFFSET(::network::GGRelayPacket, _impl_.relay_header_),
  PROTOBUF_FIELD_OFFSET(::network::GGRelayPacket, _impl_.relay_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GGPlayerPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GGPlayerPacket, _impl_.language_),
  PROTOBUF_FIELD_OFFSET(::network::GGPlayerPacket, _impl_.empire_),
  PROTOBUF_FIELD_OFFSET(::network::GGPlayerPacket, _impl_.pid_),
  PROTOBUF_FIELD_OFFSET(::network::GGPlayerPacket, _impl_.relay_header_),
  PROTOBUF_FIELD_OFFSET(::network::GGPlayerPacket, _impl_.relay_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GGDisconnectPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GGDisconnectPacket, _impl_.login_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GGLoginPingPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GGLoginPingPacket, _impl_.login_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GGGiveItemPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GGGiveItemPacket, _impl_.item_),
  PROTOBUF_FIELD_OFFSET(::network::GGGiveItemPacket, _impl_.no_refund_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GGGiveGoldPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GGGiveGoldPacket, _impl_.pid_),
  PROTOBUF_FIELD_OFFSET(::network::GGGiveGoldPacket, _impl_.gold_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GGShoutPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GGShoutPacket, _impl_.empire_),
  PROTOBUF_FIELD_OFFSET(::network::GGShoutPacket, _impl_.text_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GGNoticePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GGNoticePacket, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::network::GGNoticePacket, _impl_.big_font_),
  PROTOBUF_FIELD_OFFSET(::network::GGNoticePacket, _impl_.lang_id_),
  PROTOBUF_FIELD_OFFSET(::network::GGNoticePacket, _impl_.channel_),
  PROTOBUF_FIELD_OFFSET(::network::GGNoticePacket, _impl_.empire_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GGSuccessNoticePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GGSuccessNoticePacket, _impl_.lang_id_),
  PROTOBUF_FIELD_OFFSET(::network::GGSuccessNoticePacket, _impl_.message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GGMessengerRequestPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GGMessengerRequestPacket, _impl_.requestor_),
  PROTOBUF_FIELD_OFFSET(::network::GGMessengerRequestPacket, _impl_.target_pid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GGMessengerRequestFailPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GGMessengerRequestFailPacket, _impl_.requestor_),
  PROTOBUF_FIELD_OFFSET(::network::GGMessengerRequestFailPacket, _impl_.target_pid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GGMessengerAddPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GGMessengerAddPacket, _impl_.account_),
  PROTOBUF_FIELD_OFFSET(::network::GGMessengerAddPacket, _impl_.companion_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GGMessengerRemovePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GGMessengerRemovePacket, _impl_.account_),
  PROTOBUF_FIELD_OFFSET(::network::GGMessengerRemovePacket, _impl_.companion_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GGMessengerBlockAddPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GGMessengerBlockAddPacket, _impl_.account_),
  PROTOBUF_FIELD_OFFSET(::network::GGMessengerBlockAddPacket, _impl_.companion_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GGMessengerBlockRemovePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GGMessengerBlockRemovePacket, _impl_.account_),
  PROTOBUF_FIELD_OFFSET(::network::GGMessengerBlockRemovePacket, _impl_.companion_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GGFindPositionPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GGFindPositionPacket, _impl_.from_pid_),
  PROTOBUF_FIELD_OFFSET(::network::GGFindPositionPacket, _impl_.target_pid_),
  PROTOBUF_FIELD_OFFSET(::network::GGFindPositionPacket, _impl_.is_gm_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GGWarpCharacterPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GGWarpCharacterPacket, _impl_.pid_),
  PROTOBUF_FIELD_OFFSET(::network::GGWarpCharacterPacket, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::network::GGWarpCharacterPacket, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::network::GGWarpCharacterPacket, _impl_.map_index_),
  PROTOBUF_FIELD_OFFSET(::network::GGWarpCharacterPacket, _impl_.target_pid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GGXmasWarpSantaPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GGXmasWarpSantaPacket, _impl_.channel_),
  PROTOBUF_FIELD_OFFSET(::network::GGXmasWarpSantaPacket, _impl_.map_index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GGXmasWarpSantaReplyPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GGXmasWarpSantaReplyPacket, _impl_.channel_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GGBlockChatPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GGBlockChatPacket, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::network::GGBlockChatPacket, _impl_.block_duration_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GGCastleSiegePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GGCastleSiegePacket, _impl_.empire_),
  PROTOBUF_FIELD_OFFSET(::network::GGCastleSiegePacket, _impl_.tower_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GGPCBangUpdatePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GGPCBangUpdatePacket, _impl_.pc_bang_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GGWhisperManagerAddPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GGWhisperManagerAddPacket, _impl_.sender_name_),
  PROTOBUF_FIELD_OFFSET(::network::GGWhisperManagerAddPacket, _impl_.sender_pid_),
  PROTOBUF_FIELD_OFFSET(::network::GGWhisperManagerAddPacket, _impl_.receiver_name_),
  PROTOBUF_FIELD_OFFSET(::network::GGWhisperManagerAddPacket, _impl_.receiver_pid_),
  PROTOBUF_FIELD_OFFSET(::network::GGWhisperManagerAddPacket, _impl_.message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GGTeamlerStatusPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GGTeamlerStatusPacket, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::network::GGTeamlerStatusPacket, _impl_.is_online_),
  PROTOBUF_FIELD_OFFSET(::network::GGTeamlerStatusPacket, _impl_.language_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GGRequestDungeonWarpPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GGRequestDungeonWarpPacket, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::network::GGRequestDungeonWarpPacket, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::network::GGRequestDungeonWarpPacket, _impl_.map_index_),
  PROTOBUF_FIELD_OFFSET(::network::GGRequestDungeonWarpPacket, _impl_.dest_x_),
  PROTOBUF_FIELD_OFFSET(::network::GGRequestDungeonWarpPacket, _impl_.dest_y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GGAnswerDungeonWarpPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GGAnswerDungeonWarpPacket, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::network::GGAnswerDungeonWarpPacket, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::network::GGAnswerDungeonWarpPacket, _impl_.map_index_),
  PROTOBUF_FIELD_OFFSET(::network::GGAnswerDungeonWarpPacket, _impl_.dest_x_),
  PROTOBUF_FIELD_OFFSET(::network::GGAnswerDungeonWarpPacket, _impl_.dest_y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GGDungeonSetFlagPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GGDungeonSetFlagPacket, _impl_.pid_),
  PROTOBUF_FIELD_OFFSET(::network::GGDungeonSetFlagPacket, _impl_.flag_name_),
  PROTOBUF_FIELD_OFFSET(::network::GGDungeonSetFlagPacket, _impl_.flag_value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GGExecReloadCommandPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GGExecReloadCommandPacket, _impl_.argument_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GGRecvShutdownPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GGRecvShutdownPacket, _impl_.start_sec_),
  PROTOBUF_FIELD_OFFSET(::network::GGRecvShutdownPacket, _impl_.maintenance_),
  PROTOBUF_FIELD_OFFSET(::network::GGRecvShutdownPacket, _impl_.maintenance_duration_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GGTransferPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GGTransferPacket, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::network::GGTransferPacket, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::network::GGTransferPacket, _impl_.y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GGForceItemDeletePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GGForceItemDeletePacket, _impl_.item_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GGTeamChatPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GGTeamChatPacket, _impl_.text_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GGCombatZoneRankingPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GGCombatZoneRankingPacket, _impl_.weekly_),
  PROTOBUF_FIELD_OFFSET(::network::GGCombatZoneRankingPacket, _impl_.general_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GGUpdateRightsPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GGUpdateRightsPacket, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::network::GGUpdateRightsPacket, _impl_.gm_level_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GGFlushPlayerPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GGFlushPlayerPacket, _impl_.pid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GGHomepageCommandPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GGHomepageCommandPacket, _impl_.command_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GGPullOfflineMessagesPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GGPullOfflineMessagesPacket, _impl_.pid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GGDmgRankingUpdatePacket_Entry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GGDmgRankingUpdatePacket_Entry, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::network::GGDmgRankingUpdatePacket_Entry, _impl_.dmg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GGDmgRankingUpdatePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GGDmgRankingUpdatePacket, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::network::GGDmgRankingUpdatePacket, _impl_.data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GGLocaleUpdateLastUsagePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GGLocaleUpdateLastUsagePacket, _impl_.lang_base_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GGReloadCommandPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GGReloadCommandPacket, _impl_.argument_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GGAuctionInsertItemPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GGAuctionInsertItemPacket, _impl_.item_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GGAuctionTakeItemPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GGAuctionTakeItemPacket, _impl_.owner_id_),
  PROTOBUF_FIELD_OFFSET(::network::GGAuctionTakeItemPacket, _impl_.item_id_),
  PROTOBUF_FIELD_OFFSET(::network::GGAuctionTakeItemPacket, _impl_.inventory_pos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GGAuctionBuyItemPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GGAuctionBuyItemPacket, _impl_.pid_),
  PROTOBUF_FIELD_OFFSET(::network::GGAuctionBuyItemPacket, _impl_.player_name_),
  PROTOBUF_FIELD_OFFSET(::network::GGAuctionBuyItemPacket, _impl_.item_id_),
  PROTOBUF_FIELD_OFFSET(::network::GGAuctionBuyItemPacket, _impl_.paid_gold_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GGAuctionTakeGoldPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GGAuctionTakeGoldPacket, _impl_.owner_id_),
  PROTOBUF_FIELD_OFFSET(::network::GGAuctionTakeGoldPacket, _impl_.gold_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GGAuctionSearchItemsPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GGAuctionSearchItemsPacket, _impl_.pid_),
  PROTOBUF_FIELD_OFFSET(::network::GGAuctionSearchItemsPacket, _impl_.page_),
  PROTOBUF_FIELD_OFFSET(::network::GGAuctionSearchItemsPacket, _impl_.language_),
  PROTOBUF_FIELD_OFFSET(::network::GGAuctionSearchItemsPacket, _impl_.options_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GGAuctionExtendedSearchItemsPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GGAuctionExtendedSearchItemsPacket, _impl_.pid_),
  PROTOBUF_FIELD_OFFSET(::network::GGAuctionExtendedSearchItemsPacket, _impl_.page_),
  PROTOBUF_FIELD_OFFSET(::network::GGAuctionExtendedSearchItemsPacket, _impl_.language_),
  PROTOBUF_FIELD_OFFSET(::network::GGAuctionExtendedSearchItemsPacket, _impl_.options_),
  PROTOBUF_FIELD_OFFSET(::network::GGAuctionExtendedSearchItemsPacket, _impl_.map_index_),
  PROTOBUF_FIELD_OFFSET(::network::GGAuctionExtendedSearchItemsPacket, _impl_.channel_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GGAuctionMarkShopPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GGAuctionMarkShopPacket, _impl_.pid_),
  PROTOBUF_FIELD_OFFSET(::network::GGAuctionMarkShopPacket, _impl_.item_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GGAuctionAnswerMarkShopPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GGAuctionAnswerMarkShopPacket, _impl_.pid_),
  PROTOBUF_FIELD_OFFSET(::network::GGAuctionAnswerMarkShopPacket, _impl_.owner_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GGAuctionShopRequestShowPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GGAuctionShopRequestShowPacket, _impl_.pid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GGAuctionShopOpenPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GGAuctionShopOpenPacket, _impl_.owner_id_),
  PROTOBUF_FIELD_OFFSET(::network::GGAuctionShopOpenPacket, _impl_.owner_name_),
  PROTOBUF_FIELD_OFFSET(::network::GGAuctionShopOpenPacket, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::network::GGAuctionShopOpenPacket, _impl_.style_),
  PROTOBUF_FIELD_OFFSET(::network::GGAuctionShopOpenPacket, _impl_.vnum_),
  PROTOBUF_FIELD_OFFSET(::network::GGAuctionShopOpenPacket, _impl_.color_red_),
  PROTOBUF_FIELD_OFFSET(::network::GGAuctionShopOpenPacket, _impl_.color_green_),
  PROTOBUF_FIELD_OFFSET(::network::GGAuctionShopOpenPacket, _impl_.color_blue_),
  PROTOBUF_FIELD_OFFSET(::network::GGAuctionShopOpenPacket, _impl_.channel_),
  PROTOBUF_FIELD_OFFSET(::network::GGAuctionShopOpenPacket, _impl_.map_index_),
  PROTOBUF_FIELD_OFFSET(::network::GGAuctionShopOpenPacket, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::network::GGAuctionShopOpenPacket, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::network::GGAuctionShopOpenPacket, _impl_.timeout_),
  PROTOBUF_FIELD_OFFSET(::network::GGAuctionShopOpenPacket, _impl_.items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GGAuctionShopTakeGoldPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GGAuctionShopTakeGoldPacket, _impl_.owner_id_),
  PROTOBUF_FIELD_OFFSET(::network::GGAuctionShopTakeGoldPacket, _impl_.gold_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GGAuctionShopSpawnPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GGAuctionShopSpawnPacket, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::network::GGAuctionShopSpawnPacket, _impl_.owner_name_),
  PROTOBUF_FIELD_OFFSET(::network::GGAuctionShopSpawnPacket, _impl_.owner_id_),
  PROTOBUF_FIELD_OFFSET(::network::GGAuctionShopSpawnPacket, _impl_.vnum_),
  PROTOBUF_FIELD_OFFSET(::network::GGAuctionShopSpawnPacket, _impl_.style_),
  PROTOBUF_FIELD_OFFSET(::network::GGAuctionShopSpawnPacket, _impl_.color_red_),
  PROTOBUF_FIELD_OFFSET(::network::GGAuctionShopSpawnPacket, _impl_.color_green_),
  PROTOBUF_FIELD_OFFSET(::network::GGAuctionShopSpawnPacket, _impl_.color_blue_),
  PROTOBUF_FIELD_OFFSET(::network::GGAuctionShopSpawnPacket, _impl_.map_index_),
  PROTOBUF_FIELD_OFFSET(::network::GGAuctionShopSpawnPacket, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::network::GGAuctionShopSpawnPacket, _impl_.y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GGAuctionShopDespawnPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GGAuctionShopDespawnPacket, _impl_.owner_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GGAuctionShopViewPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GGAuctionShopViewPacket, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::network::GGAuctionShopViewPacket, _impl_.owner_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GGAuctionShopViewCancelPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GGAuctionShopViewCancelPacket, _impl_.player_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GGAuctionShopRequestHistoryPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GGAuctionShopRequestHistoryPacket, _impl_.player_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GGAuctionShopRenewPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GGAuctionShopRenewPacket, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::network::GGAuctionShopRenewPacket, _impl_.timeout_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GGAuctionShopClosePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GGAuctionShopClosePacket, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::network::GGAuctionShopClosePacket, _impl_.map_index_),
  PROTOBUF_FIELD_OFFSET(::network::GGAuctionShopClosePacket, _impl_.channel_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GGAuctionRequestAveragePricePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GGAuctionRequestAveragePricePacket, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::network::GGAuctionRequestAveragePricePacket, _impl_.requestor_),
  PROTOBUF_FIELD_OFFSET(::network::GGAuctionRequestAveragePricePacket, _impl_.vnum_),
  PROTOBUF_FIELD_OFFSET(::network::GGAuctionRequestAveragePricePacket, _impl_.count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GGEventManagerOpenRegistrationPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GGEventManagerOpenRegistrationPacket, _impl_.event_index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GGEventManagerCloseRegistrationPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GGEventManagerCloseRegistrationPacket, _impl_.clear_event_index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GGEventManagerIgnorePlayerPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GGEventManagerIgnorePlayerPacket, _impl_.pid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GGEventManagerOpenAnnouncementPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GGEventManagerOpenAnnouncementPacket, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::network::GGEventManagerOpenAnnouncementPacket, _impl_.tm_stamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GGEventManagerTagTeamRegisterPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GGEventManagerTagTeamRegisterPacket, _impl_.pid1_),
  PROTOBUF_FIELD_OFFSET(::network::GGEventManagerTagTeamRegisterPacket, _impl_.pid2_),
  PROTOBUF_FIELD_OFFSET(::network::GGEventManagerTagTeamRegisterPacket, _impl_.groupidx_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GGEventManagerTagTeamUnregisterPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GGEventManagerTagTeamUnregisterPacket, _impl_.pid1_),
  PROTOBUF_FIELD_OFFSET(::network::GGEventManagerTagTeamUnregisterPacket, _impl_.pid2_),
  PROTOBUF_FIELD_OFFSET(::network::GGEventManagerTagTeamUnregisterPacket, _impl_.groupidx_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GGEventManagerTagTeamCreatePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GGEventManagerTagTeamCreatePacket, _impl_.teams_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GGGuildChatPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GGGuildChatPacket, _impl_.guild_id_),
  PROTOBUF_FIELD_OFFSET(::network::GGGuildChatPacket, _impl_.message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GGGuildSetMemberCountBonusPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GGGuildSetMemberCountBonusPacket, _impl_.guild_id_),
  PROTOBUF_FIELD_OFFSET(::network::GGGuildSetMemberCountBonusPacket, _impl_.bonus_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GGGuildWarZoneMapIndexPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GGGuildWarZoneMapIndexPacket, _impl_.guild_id1_),
  PROTOBUF_FIELD_OFFSET(::network::GGGuildWarZoneMapIndexPacket, _impl_.guild_id2_),
  PROTOBUF_FIELD_OFFSET(::network::GGGuildWarZoneMapIndexPacket, _impl_.map_index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GGGuildChangeNamePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GGGuildChangeNamePacket, _impl_.guild_id_),
  PROTOBUF_FIELD_OFFSET(::network::GGGuildChangeNamePacket, _impl_.name_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::network::GGSetupPacket)},
  { 10, -1, -1, sizeof(::network::GGLoginPacket)},
  { 25, -1, -1, sizeof(::network::GGLogoutPacket)},
  { 33, -1, -1, sizeof(::network::GGRelayPacket)},
  { 43, -1, -1, sizeof(::network::GGPlayerPacket)},
  { 54, -1, -1, sizeof(::network::GGDisconnectPacket)},
  { 61, -1, -1, sizeof(::network::GGLoginPingPacket)},
  { 68, -1, -1, sizeof(::network::GGGiveItemPacket)},
  { 76, -1, -1, sizeof(::network::GGGiveGoldPacket)},
  { 84, -1, -1, sizeof(::network::GGShoutPacket)},
  { 92, -1, -1, sizeof(::network::GGNoticePacket)},
  { 103, -1, -1, sizeof(::network::GGSuccessNoticePacket)},
  { 111, -1, -1, sizeof(::network::GGMessengerRequestPacket)},
  { 119, -1, -1, sizeof(::network::GGMessengerRequestFailPacket)},
  { 127, -1, -1, sizeof(::network::GGMessengerAddPacket)},
  { 135, -1, -1, sizeof(::network::GGMessengerRemovePacket)},
  { 143, -1, -1, sizeof(::network::GGMessengerBlockAddPacket)},
  { 151, -1, -1, sizeof(::network::GGMessengerBlockRemovePacket)},
  { 159, -1, -1, sizeof(::network::GGFindPositionPacket)},
  { 168, -1, -1, sizeof(::network::GGWarpCharacterPacket)},
  { 179, -1, -1, sizeof(::network::GGXmasWarpSantaPacket)},
  { 187, -1, -1, sizeof(::network::GGXmasWarpSantaReplyPacket)},
  { 194, -1, -1, sizeof(::network::GGBlockChatPacket)},
  { 202, -1, -1, sizeof(::network::GGCastleSiegePacket)},
  { 210, -1, -1, sizeof(::network::GGPCBangUpdatePacket)},
  { 217, -1, -1, sizeof(::network::GGWhisperManagerAddPacket)},
  { 228, -1, -1, sizeof(::network::GGTeamlerStatusPacket)},
  { 237, -1, -1, sizeof(::network::GGRequestDungeonWarpPacket)},
  { 248, -1, -1, sizeof(::network::GGAnswerDungeonWarpPacket)},
  { 259, -1, -1, sizeof(::network::GGDungeonSetFlagPacket)},
  { 268, -1, -1, sizeof(::network::GGExecReloadCommandPacket)},
  { 275, -1, -1, sizeof(::network::GGRecvShutdownPacket)},
  { 284, -1, -1, sizeof(::network::GGTransferPacket)},
  { 293, -1, -1, sizeof(::network::GGForceItemDeletePacket)},
  { 300, -1, -1, sizeof(::network::GGTeamChatPacket)},
  { 307, -1, -1, sizeof(::network::GGCombatZoneRankingPacket)},
  { 315, -1, -1, sizeof(::network::GGUpdateRightsPacket)},
  { 323, -1, -1, sizeof(::network::GGFlushPlayerPacket)},
  { 330, -1, -1, sizeof(::network::GGHomepageCommandPacket)},
  { 337, -1, -1, sizeof(::network::GGPullOfflineMessagesPacket)},
  { 344, -1, -1, sizeof(::network::GGDmgRankingUpdatePacket_Entry)},
  { 352, -1, -1, sizeof(::network::GGDmgRankingUpdatePacket)},
  { 360, -1, -1, sizeof(::network::GGLocaleUpdateLastUsagePacket)},
  { 367, -1, -1, sizeof(::network::GGReloadCommandPacket)},
  { 374, -1, -1, sizeof(::network::GGAuctionInsertItemPacket)},
  { 381, -1, -1, sizeof(::network::GGAuctionTakeItemPacket)},
  { 390, -1, -1, sizeof(::network::GGAuctionBuyItemPacket)},
  { 400, -1, -1, sizeof(::network::GGAuctionTakeGoldPacket)},
  { 408, -1, -1, sizeof(::network::GGAuctionSearchItemsPacket)},
  { 418, -1, -1, sizeof(::network::GGAuctionExtendedSearchItemsPacket)},
  { 430, -1, -1, sizeof(::network::GGAuctionMarkShopPacket)},
  { 438, -1, -1, sizeof(::network::GGAuctionAnswerMarkShopPacket)},
  { 446, -1, -1, sizeof(::network::GGAuctionShopRequestShowPacket)},
  { 453, -1, -1, sizeof(::network::GGAuctionShopOpenPacket)},
  { 473, -1, -1, sizeof(::network::GGAuctionShopTakeGoldPacket)},
  { 481, -1, -1, sizeof(::network::GGAuctionShopSpawnPacket)},
  { 498, -1, -1, sizeof(::network::GGAuctionShopDespawnPacket)},
  { 505, -1, -1, sizeof(::network::GGAuctionShopViewPacket)},
  { 513, -1, -1, sizeof(::network::GGAuctionShopViewCancelPacket)},
  { 520, -1, -1, sizeof(::network::GGAuctionShopRequestHistoryPacket)},
  { 527, -1, -1, sizeof(::network::GGAuctionShopRenewPacket)},
  { 535, -1, -1, sizeof(::network::GGAuctionShopClosePacket)},
  { 544, -1, -1, sizeof(::network::GGAuctionRequestAveragePricePacket)},
  { 554, -1, -1, sizeof(::network::GGEventManagerOpenRegistrationPacket)},
  { 561, -1, -1, sizeof(::network::GGEventManagerCloseRegistrationPacket)},
  { 568, -1, -1, sizeof(::network::GGEventManagerIgnorePlayerPacket)},
  { 575, -1, -1, sizeof(::network::GGEventManagerOpenAnnouncementPacket)},
  { 583, -1, -1, sizeof(::network::GGEventManagerTagTeamRegisterPacket)},
  { 592, -1, -1, sizeof(::network::GGEventManagerTagTeamUnregisterPacket)},
  { 601, -1, -1, sizeof(::network::GGEventManagerTagTeamCreatePacket)},
  { 608, -1, -1, sizeof(::network::GGGuildChatPacket)},
  { 616, -1, -1, sizeof(::network::GGGuildSetMemberCountBonusPacket)},
  { 624, -1, -1, sizeof(::network::GGGuildWarZoneMapIndexPacket)},
  { 633, -1, -1, sizeof(::network::GGGuildChangeNamePacket)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::network::_GGSetupPacket_default_instance_._instance,
  &::network::_GGLoginPacket_default_instance_._instance,
  &::network::_GGLogoutPacket_default_instance_._instance,
  &::network::_GGRelayPacket_default_instance_._instance,
  &::network::_GGPlayerPacket_default_instance_._instance,
  &::network::_GGDisconnectPacket_default_instance_._instance,
  &::network::_GGLoginPingPacket_default_instance_._instance,
  &::network::_GGGiveItemPacket_default_instance_._instance,
  &::network::_GGGiveGoldPacket_default_instance_._instance,
  &::network::_GGShoutPacket_default_instance_._instance,
  &::network::_GGNoticePacket_default_instance_._instance,
  &::network::_GGSuccessNoticePacket_default_instance_._instance,
  &::network::_GGMessengerRequestPacket_default_instance_._instance,
  &::network::_GGMessengerRequestFailPacket_default_instance_._instance,
  &::network::_GGMessengerAddPacket_default_instance_._instance,
  &::network::_GGMessengerRemovePacket_default_instance_._instance,
  &::network::_GGMessengerBlockAddPacket_default_instance_._instance,
  &::network::_GGMessengerBlockRemovePacket_default_instance_._instance,
  &::network::_GGFindPositionPacket_default_instance_._instance,
  &::network::_GGWarpCharacterPacket_default_instance_._instance,
  &::network::_GGXmasWarpSantaPacket_default_instance_._instance,
  &::network::_GGXmasWarpSantaReplyPacket_default_instance_._instance,
  &::network::_GGBlockChatPacket_default_instance_._instance,
  &::network::_GGCastleSiegePacket_default_instance_._instance,
  &::network::_GGPCBangUpdatePacket_default_instance_._instance,
  &::network::_GGWhisperManagerAddPacket_default_instance_._instance,
  &::network::_GGTeamlerStatusPacket_default_instance_._instance,
  &::network::_GGRequestDungeonWarpPacket_default_instance_._instance,
  &::network::_GGAnswerDungeonWarpPacket_default_instance_._instance,
  &::network::_GGDungeonSetFlagPacket_default_instance_._instance,
  &::network::_GGExecReloadCommandPacket_default_instance_._instance,
  &::network::_GGRecvShutdownPacket_default_instance_._instance,
  &::network::_GGTransferPacket_default_instance_._instance,
  &::network::_GGForceItemDeletePacket_default_instance_._instance,
  &::network::_GGTeamChatPacket_default_instance_._instance,
  &::network::_GGCombatZoneRankingPacket_default_instance_._instance,
  &::network::_GGUpdateRightsPacket_default_instance_._instance,
  &::network::_GGFlushPlayerPacket_default_instance_._instance,
  &::network::_GGHomepageCommandPacket_default_instance_._instance,
  &::network::_GGPullOfflineMessagesPacket_default_instance_._instance,
  &::network::_GGDmgRankingUpdatePacket_Entry_default_instance_._instance,
  &::network::_GGDmgRankingUpdatePacket_default_instance_._instance,
  &::network::_GGLocaleUpdateLastUsagePacket_default_instance_._instance,
  &::network::_GGReloadCommandPacket_default_instance_._instance,
  &::network::_GGAuctionInsertItemPacket_default_instance_._instance,
  &::network::_GGAuctionTakeItemPacket_default_instance_._instance,
  &::network::_GGAuctionBuyItemPacket_default_instance_._instance,
  &::network::_GGAuctionTakeGoldPacket_default_instance_._instance,
  &::network::_GGAuctionSearchItemsPacket_default_instance_._instance,
  &::network::_GGAuctionExtendedSearchItemsPacket_default_instance_._instance,
  &::network::_GGAuctionMarkShopPacket_default_instance_._instance,
  &::network::_GGAuctionAnswerMarkShopPacket_default_instance_._instance,
  &::network::_GGAuctionShopRequestShowPacket_default_instance_._instance,
  &::network::_GGAuctionShopOpenPacket_default_instance_._instance,
  &::network::_GGAuctionShopTakeGoldPacket_default_instance_._instance,
  &::network::_GGAuctionShopSpawnPacket_default_instance_._instance,
  &::network::_GGAuctionShopDespawnPacket_default_instance_._instance,
  &::network::_GGAuctionShopViewPacket_default_instance_._instance,
  &::network::_GGAuctionShopViewCancelPacket_default_instance_._instance,
  &::network::_GGAuctionShopRequestHistoryPacket_default_instance_._instance,
  &::network::_GGAuctionShopRenewPacket_default_instance_._instance,
  &::network::_GGAuctionShopClosePacket_default_instance_._instance,
  &::network::_GGAuctionRequestAveragePricePacket_default_instance_._instance,
  &::network::_GGEventManagerOpenRegistrationPacket_default_instance_._instance,
  &::network::_GGEventManagerCloseRegistrationPacket_default_instance_._instance,
  &::network::_GGEventManagerIgnorePlayerPacket_default_instance_._instance,
  &::network::_GGEventManagerOpenAnnouncementPacket_default_instance_._instance,
  &::network::_GGEventManagerTagTeamRegisterPacket_default_instance_._instance,
  &::network::_GGEventManagerTagTeamUnregisterPacket_default_instance_._instance,
  &::network::_GGEventManagerTagTeamCreatePacket_default_instance_._instance,
  &::network::_GGGuildChatPacket_default_instance_._instance,
  &::network::_GGGuildSetMemberCountBonusPacket_default_instance_._instance,
  &::network::_GGGuildWarZoneMapIndexPacket_default_instance_._instance,
  &::network::_GGGuildChangeNamePacket_default_instance_._instance,
};

const char descriptor_table_protodef_gg_5fpackets_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020gg_packets.proto\022\007network\032\ndata.proto\032"
  "\017data_item.proto\"[\n\rGGSetupPacket\022\014\n\004por"
  "t\030\001 \001(\r\022\023\n\013listen_port\030\002 \001(\r\022\017\n\007channel\030"
  "\003 \001(\r\022\026\n\016processor_core\030\004 \001(\010\"\251\001\n\rGGLogi"
  "nPacket\022\014\n\004name\030\001 \001(\014\022\013\n\003pid\030\002 \001(\r\022\016\n\006em"
  "pire\030\003 \001(\r\022\021\n\tmap_index\030\004 \001(\r\022\017\n\007channel"
  "\030\005 \001(\r\022\020\n\010language\030\006 \001(\r\022\025\n\ris_in_dungeo"
  "n\030\007 \001(\010\022\014\n\004race\030\010 \001(\r\022\022\n\ntemp_login\030\t \001("
  "\010\"+\n\016GGLogoutPacket\022\014\n\004name\030\001 \001(\014\022\013\n\003pid"
  "\030\002 \001(\r\"O\n\rGGRelayPacket\022\014\n\004name\030\001 \001(\014\022\013\n"
  "\003pid\030\002 \001(\r\022\024\n\014relay_header\030\003 \001(\r\022\r\n\005rela"
  "y\030\004 \001(\014\"d\n\016GGPlayerPacket\022\020\n\010language\030\001 "
  "\001(\021\022\016\n\006empire\030\002 \001(\r\022\013\n\003pid\030\003 \001(\r\022\024\n\014rela"
  "y_header\030\004 \001(\r\022\r\n\005relay\030\005 \001(\014\"#\n\022GGDisco"
  "nnectPacket\022\r\n\005login\030\001 \001(\014\"\"\n\021GGLoginPin"
  "gPacket\022\r\n\005login\030\001 \001(\014\"G\n\020GGGiveItemPack"
  "et\022 \n\004item\030\001 \001(\0132\022.network.TItemData\022\021\n\t"
  "no_refund\030\002 \001(\010\"-\n\020GGGiveGoldPacket\022\013\n\003p"
  "id\030\001 \001(\r\022\014\n\004gold\030\002 \001(\003\"-\n\rGGShoutPacket\022"
  "\016\n\006empire\030\001 \001(\r\022\014\n\004text\030\002 \001(\014\"e\n\016GGNotic"
  "ePacket\022\017\n\007message\030\001 \001(\014\022\020\n\010big_font\030\002 \001"
  "(\010\022\017\n\007lang_id\030\003 \001(\005\022\017\n\007channel\030\004 \001(\r\022\016\n\006"
  "empire\030\005 \001(\r\"9\n\025GGSuccessNoticePacket\022\017\n"
  "\007lang_id\030\001 \001(\005\022\017\n\007message\030\002 \001(\014\"A\n\030GGMes"
  "sengerRequestPacket\022\021\n\trequestor\030\001 \001(\014\022\022"
  "\n\ntarget_pid\030\002 \001(\r\"E\n\034GGMessengerRequest"
  "FailPacket\022\021\n\trequestor\030\001 \001(\014\022\022\n\ntarget_"
  "pid\030\002 \001(\r\":\n\024GGMessengerAddPacket\022\017\n\007acc"
  "ount\030\001 \001(\014\022\021\n\tcompanion\030\002 \001(\014\"=\n\027GGMesse"
  "ngerRemovePacket\022\017\n\007account\030\001 \001(\014\022\021\n\tcom"
  "panion\030\002 \001(\014\"\?\n\031GGMessengerBlockAddPacke"
  "t\022\017\n\007account\030\001 \001(\014\022\021\n\tcompanion\030\002 \001(\014\"B\n"
  "\034GGMessengerBlockRemovePacket\022\017\n\007account"
  "\030\001 \001(\014\022\021\n\tcompanion\030\002 \001(\014\"K\n\024GGFindPosit"
  "ionPacket\022\020\n\010from_pid\030\001 \001(\r\022\022\n\ntarget_pi"
  "d\030\002 \001(\r\022\r\n\005is_gm\030\003 \001(\010\"a\n\025GGWarpCharacte"
  "rPacket\022\013\n\003pid\030\001 \001(\r\022\t\n\001x\030\002 \001(\005\022\t\n\001y\030\003 \001"
  "(\005\022\021\n\tmap_index\030\004 \001(\r\022\022\n\ntarget_pid\030\005 \001("
  "\r\";\n\025GGXmasWarpSantaPacket\022\017\n\007channel\030\001 "
  "\001(\r\022\021\n\tmap_index\030\002 \001(\r\"-\n\032GGXmasWarpSant"
  "aReplyPacket\022\017\n\007channel\030\001 \001(\r\"9\n\021GGBlock"
  "ChatPacket\022\014\n\004name\030\001 \001(\014\022\026\n\016block_durati"
  "on\030\002 \001(\005\":\n\023GGCastleSiegePacket\022\016\n\006empir"
  "e\030\001 \001(\r\022\023\n\013tower_count\030\002 \001(\r\"*\n\024GGPCBang"
  "UpdatePacket\022\022\n\npc_bang_id\030\001 \001(\r\"\202\001\n\031GGW"
  "hisperManagerAddPacket\022\023\n\013sender_name\030\001 "
  "\001(\014\022\022\n\nsender_pid\030\002 \001(\r\022\025\n\rreceiver_name"
  "\030\003 \001(\014\022\024\n\014receiver_pid\030\004 \001(\r\022\017\n\007message\030"
  "\005 \001(\014\"J\n\025GGTeamlerStatusPacket\022\014\n\004name\030\001"
  " \001(\014\022\021\n\tis_online\030\002 \001(\010\022\020\n\010language\030\003 \001("
  "\005\"p\n\032GGRequestDungeonWarpPacket\022\014\n\004type\030"
  "\001 \001(\r\022\021\n\tplayer_id\030\002 \001(\r\022\021\n\tmap_index\030\003 "
  "\001(\r\022\016\n\006dest_x\030\004 \001(\r\022\016\n\006dest_y\030\005 \001(\r\"o\n\031G"
  "GAnswerDungeonWarpPacket\022\014\n\004type\030\001 \001(\r\022\021"
  "\n\tplayer_id\030\002 \001(\r\022\021\n\tmap_index\030\003 \001(\r\022\016\n\006"
  "dest_x\030\004 \001(\r\022\016\n\006dest_y\030\005 \001(\r\"L\n\026GGDungeo"
  "nSetFlagPacket\022\013\n\003pid\030\001 \001(\r\022\021\n\tflag_name"
  "\030\002 \001(\014\022\022\n\nflag_value\030\003 \001(\005\"-\n\031GGExecRelo"
  "adCommandPacket\022\020\n\010argument\030\001 \001(\014\"\\\n\024GGR"
  "ecvShutdownPacket\022\021\n\tstart_sec\030\001 \001(\005\022\023\n\013"
  "maintenance\030\002 \001(\010\022\034\n\024maintenance_duratio"
  "n\030\003 \001(\005\"6\n\020GGTransferPacket\022\014\n\004name\030\001 \001("
  "\014\022\t\n\001x\030\002 \001(\005\022\t\n\001y\030\003 \001(\005\"*\n\027GGForceItemDe"
  "letePacket\022\017\n\007item_id\030\001 \001(\r\" \n\020GGTeamCha"
  "tPacket\022\014\n\004text\030\001 \001(\014\"\202\001\n\031GGCombatZoneRa"
  "nkingPacket\0221\n\006weekly\030\001 \003(\0132!.network.TC"
  "ombatZoneRankingPlayer\0222\n\007general\030\002 \003(\0132"
  "!.network.TCombatZoneRankingPlayer\"6\n\024GG"
  "UpdateRightsPacket\022\014\n\004name\030\001 \001(\014\022\020\n\010gm_l"
  "evel\030\002 \001(\r\"\"\n\023GGFlushPlayerPacket\022\013\n\003pid"
  "\030\001 \001(\r\"*\n\027GGHomepageCommandPacket\022\017\n\007com"
  "mand\030\001 \001(\014\"*\n\033GGPullOfflineMessagesPacke"
  "t\022\013\n\003pid\030\001 \001(\r\"\203\001\n\030GGDmgRankingUpdatePac"
  "ket\022\014\n\004type\030\001 \001(\r\0225\n\004data\030\002 \001(\0132\'.networ"
  "k.GGDmgRankingUpdatePacket.Entry\032\"\n\005Entr"
  "y\022\014\n\004name\030\001 \001(\014\022\013\n\003dmg\030\002 \001(\005\"2\n\035GGLocale"
  "UpdateLastUsagePacket\022\021\n\tlang_base\030\001 \001(\014"
  "\")\n\025GGReloadCommandPacket\022\020\n\010argument\030\001 "
  "\001(\014\"B\n\031GGAuctionInsertItemPacket\022%\n\004item"
  "\030\001 \001(\0132\027.network.TShopItemTable\"S\n\027GGAuc"
  "tionTakeItemPacket\022\020\n\010owner_id\030\001 \001(\r\022\017\n\007"
  "item_id\030\002 \001(\r\022\025\n\rinventory_pos\030\003 \001(\r\"^\n\026"
  "GGAuctionBuyItemPacket\022\013\n\003pid\030\001 \001(\r\022\023\n\013p"
  "layer_name\030\002 \001(\t\022\017\n\007item_id\030\003 \001(\r\022\021\n\tpai"
  "d_gold\030\004 \001(\004\"9\n\027GGAuctionTakeGoldPacket\022"
  "\020\n\010owner_id\030\001 \001(\r\022\014\n\004gold\030\002 \001(\004\"w\n\032GGAuc"
  "tionSearchItemsPacket\022\013\n\003pid\030\001 \001(\r\022\014\n\004pa"
  "ge\030\002 \001(\r\022\020\n\010language\030\003 \001(\r\022,\n\007options\030\004 "
  "\001(\0132\033.network.TDataAuctionSearch\"\253\001\n\"GGA"
  "uctionExtendedSearchItemsPacket\022\013\n\003pid\030\001"
  " \001(\r\022\014\n\004page\030\002 \001(\r\022\020\n\010language\030\003 \001(\r\0224\n\007"
  "options\030\004 \001(\0132#.network.TExtendedDataAuc"
  "tionSearch\022\021\n\tmap_index\030\005 \001(\r\022\017\n\007channel"
  "\030\006 \001(\r\"7\n\027GGAuctionMarkShopPacket\022\013\n\003pid"
  "\030\001 \001(\r\022\017\n\007item_id\030\002 \001(\r\">\n\035GGAuctionAnsw"
  "erMarkShopPacket\022\013\n\003pid\030\001 \001(\r\022\020\n\010owner_i"
  "d\030\002 \001(\r\"-\n\036GGAuctionShopRequestShowPacke"
  "t\022\013\n\003pid\030\001 \001(\r\"\224\002\n\027GGAuctionShopOpenPack"
  "et\022\020\n\010owner_id\030\001 \001(\r\022\022\n\nowner_name\030\002 \001(\t"
  "\022\014\n\004name\030\003 \001(\014\022\r\n\005style\030\004 \001(\r\022\014\n\004vnum\030\005 "
  "\001(\r\022\021\n\tcolor_red\030\006 \001(\002\022\023\n\013color_green\030\007 "
  "\001(\002\022\022\n\ncolor_blue\030\010 \001(\002\022\017\n\007channel\030\t \001(\r"
  "\022\021\n\tmap_index\030\n \001(\r\022\t\n\001x\030\013 \001(\r\022\t\n\001y\030\014 \001("
  "\r\022\017\n\007timeout\030\r \001(\r\022!\n\005items\030\016 \003(\0132\022.netw"
  "ork.TItemData\"=\n\033GGAuctionShopTakeGoldPa"
  "cket\022\020\n\010owner_id\030\001 \001(\r\022\014\n\004gold\030\002 \001(\004\"\320\001\n"
  "\030GGAuctionShopSpawnPacket\022\014\n\004name\030\001 \001(\014\022"
  "\022\n\nowner_name\030\002 \001(\014\022\020\n\010owner_id\030\003 \001(\r\022\014\n"
  "\004vnum\030\004 \001(\r\022\r\n\005style\030\005 \001(\r\022\021\n\tcolor_red\030"
  "\006 \001(\002\022\023\n\013color_green\030\007 \001(\002\022\022\n\ncolor_blue"
  "\030\010 \001(\002\022\021\n\tmap_index\030\t \001(\r\022\t\n\001x\030\n \001(\r\022\t\n\001"
  "y\030\013 \001(\r\".\n\032GGAuctionShopDespawnPacket\022\020\n"
  "\010owner_id\030\001 \001(\r\">\n\027GGAuctionShopViewPack"
  "et\022\021\n\tplayer_id\030\001 \001(\r\022\020\n\010owner_id\030\002 \001(\r\""
  "2\n\035GGAuctionShopViewCancelPacket\022\021\n\tplay"
  "er_id\030\001 \001(\r\"6\n!GGAuctionShopRequestHisto"
  "ryPacket\022\021\n\tplayer_id\030\001 \001(\r\">\n\030GGAuction"
  "ShopRenewPacket\022\021\n\tplayer_id\030\001 \001(\r\022\017\n\007ti"
  "meout\030\002 \001(\r\"Q\n\030GGAuctionShopClosePacket\022"
  "\021\n\tplayer_id\030\001 \001(\r\022\021\n\tmap_index\030\002 \001(\r\022\017\n"
  "\007channel\030\003 \001(\r\"g\n\"GGAuctionRequestAverag"
  "ePricePacket\022\021\n\tplayer_id\030\001 \001(\r\022\021\n\treque"
  "stor\030\002 \001(\r\022\014\n\004vnum\030\003 \001(\r\022\r\n\005count\030\004 \001(\r\""
  ";\n$GGEventManagerOpenRegistrationPacket\022"
  "\023\n\013event_index\030\001 \001(\r\"B\n%GGEventManagerCl"
  "oseRegistrationPacket\022\031\n\021clear_event_ind"
  "ex\030\001 \001(\010\"/\n GGEventManagerIgnorePlayerPa"
  "cket\022\013\n\003pid\030\001 \001(\r\"F\n$GGEventManagerOpenA"
  "nnouncementPacket\022\014\n\004type\030\001 \001(\r\022\020\n\010tm_st"
  "amp\030\002 \001(\r\"S\n#GGEventManagerTagTeamRegist"
  "erPacket\022\014\n\004pid1\030\001 \001(\r\022\014\n\004pid2\030\002 \001(\r\022\020\n\010"
  "groupidx\030\003 \001(\r\"U\n%GGEventManagerTagTeamU"
  "nregisterPacket\022\014\n\004pid1\030\001 \001(\r\022\014\n\004pid2\030\002 "
  "\001(\r\022\020\n\010groupidx\030\003 \001(\r\"Q\n!GGEventManagerT"
  "agTeamCreatePacket\022,\n\005teams\030\001 \003(\0132\035.netw"
  "ork.TEventManagerTagTeam\"6\n\021GGGuildChatP"
  "acket\022\020\n\010guild_id\030\001 \001(\r\022\017\n\007message\030\002 \001(\014"
  "\"C\n GGGuildSetMemberCountBonusPacket\022\020\n\010"
  "guild_id\030\001 \001(\r\022\r\n\005bonus\030\002 \001(\005\"W\n\034GGGuild"
  "WarZoneMapIndexPacket\022\021\n\tguild_id1\030\001 \001(\r"
  "\022\021\n\tguild_id2\030\002 \001(\r\022\021\n\tmap_index\030\003 \001(\r\"9"
  "\n\027GGGuildChangeNamePacket\022\020\n\010guild_id\030\001 "
  "\001(\r\022\014\n\004name\030\002 \001(\014b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_gg_5fpackets_2eproto_deps[2] = {
  &::descriptor_table_data_2eproto,
  &::descriptor_table_data_5fitem_2eproto,
};
static ::_pbi::once_flag descriptor_table_gg_5fpackets_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_gg_5fpackets_2eproto = {
    false, false, 5705, descriptor_table_protodef_gg_5fpackets_2eproto,
    "gg_packets.proto",
    &descriptor_table_gg_5fpackets_2eproto_once, descriptor_table_gg_5fpackets_2eproto_deps, 2, 74,
    schemas, file_default_instances, TableStruct_gg_5fpackets_2eproto::offsets,
    file_level_metadata_gg_5fpackets_2eproto, file_level_enum_descriptors_gg_5fpackets_2eproto,
    file_level_service_descriptors_gg_5fpackets_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_gg_5fpackets_2eproto_getter() {
  return &descriptor_table_gg_5fpackets_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_gg_5fpackets_2eproto(&descriptor_table_gg_5fpackets_2eproto);
namespace network {

// ===================================================================

class GGSetupPacket::_Internal {
 public:
};

GGSetupPacket::GGSetupPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GGSetupPacket)
}
GGSetupPacket::GGSetupPacket(const GGSetupPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GGSetupPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.port_){}
    , decltype(_impl_.listen_port_){}
    , decltype(_impl_.channel_){}
    , decltype(_impl_.processor_core_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.port_, &from._impl_.port_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.processor_core_) -
    reinterpret_cast<char*>(&_impl_.port_)) + sizeof(_impl_.processor_core_));
  // @@protoc_insertion_point(copy_constructor:network.GGSetupPacket)
}

inline void GGSetupPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.port_){0u}
    , decltype(_impl_.listen_port_){0u}
    , decltype(_impl_.channel_){0u}
    , decltype(_impl_.processor_core_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GGSetupPacket::~GGSetupPacket() {
  // @@protoc_insertion_point(destructor:network.GGSetupPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GGSetupPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GGSetupPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GGSetupPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GGSetupPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.processor_core_) -
      reinterpret_cast<char*>(&_impl_.port_)) + sizeof(_impl_.processor_core_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GGSetupPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 port = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 listen_port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.listen_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 channel = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool processor_core = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.processor_core_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GGSetupPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GGSetupPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 port = 1;
  if (this->_internal_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_port(), target);
  }

  // uint32 listen_port = 2;
  if (this->_internal_listen_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_listen_port(), target);
  }

  // uint32 channel = 3;
  if (this->_internal_channel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_channel(), target);
  }

  // bool processor_core = 4;
  if (this->_internal_processor_core() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_processor_core(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GGSetupPacket)
  return target;
}

size_t GGSetupPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GGSetupPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 port = 1;
  if (this->_internal_port() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_port());
  }

  // uint32 listen_port = 2;
  if (this->_internal_listen_port() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_listen_port());
  }

  // uint32 channel = 3;
  if (this->_internal_channel() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel());
  }

  // bool processor_core = 4;
  if (this->_internal_processor_core() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GGSetupPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GGSetupPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GGSetupPacket::GetClassData() const { return &_class_data_; }


void GGSetupPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GGSetupPacket*>(&to_msg);
  auto& from = static_cast<const GGSetupPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GGSetupPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_port() != 0) {
    _this->_internal_set_port(from._internal_port());
  }
  if (from._internal_listen_port() != 0) {
    _this->_internal_set_listen_port(from._internal_listen_port());
  }
  if (from._internal_channel() != 0) {
    _this->_internal_set_channel(from._internal_channel());
  }
  if (from._internal_processor_core() != 0) {
    _this->_internal_set_processor_core(from._internal_processor_core());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GGSetupPacket::CopyFrom(const GGSetupPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GGSetupPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GGSetupPacket::IsInitialized() const {
  return true;
}

void GGSetupPacket::InternalSwap(GGSetupPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GGSetupPacket, _impl_.processor_core_)
      + sizeof(GGSetupPacket::_impl_.processor_core_)
      - PROTOBUF_FIELD_OFFSET(GGSetupPacket, _impl_.port_)>(
          reinterpret_cast<char*>(&_impl_.port_),
          reinterpret_cast<char*>(&other->_impl_.port_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GGSetupPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gg_5fpackets_2eproto_getter, &descriptor_table_gg_5fpackets_2eproto_once,
      file_level_metadata_gg_5fpackets_2eproto[0]);
}

// ===================================================================

class GGLoginPacket::_Internal {
 public:
};

GGLoginPacket::GGLoginPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GGLoginPacket)
}
GGLoginPacket::GGLoginPacket(const GGLoginPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GGLoginPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.pid_){}
    , decltype(_impl_.empire_){}
    , decltype(_impl_.map_index_){}
    , decltype(_impl_.channel_){}
    , decltype(_impl_.language_){}
    , decltype(_impl_.race_){}
    , decltype(_impl_.is_in_dungeon_){}
    , decltype(_impl_.temp_login_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.pid_, &from._impl_.pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.temp_login_) -
    reinterpret_cast<char*>(&_impl_.pid_)) + sizeof(_impl_.temp_login_));
  // @@protoc_insertion_point(copy_constructor:network.GGLoginPacket)
}

inline void GGLoginPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.pid_){0u}
    , decltype(_impl_.empire_){0u}
    , decltype(_impl_.map_index_){0u}
    , decltype(_impl_.channel_){0u}
    , decltype(_impl_.language_){0u}
    , decltype(_impl_.race_){0u}
    , decltype(_impl_.is_in_dungeon_){false}
    , decltype(_impl_.temp_login_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GGLoginPacket::~GGLoginPacket() {
  // @@protoc_insertion_point(destructor:network.GGLoginPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GGLoginPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void GGLoginPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GGLoginPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GGLoginPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  ::memset(&_impl_.pid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.temp_login_) -
      reinterpret_cast<char*>(&_impl_.pid_)) + sizeof(_impl_.temp_login_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GGLoginPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 pid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 empire = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.empire_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 map_index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.map_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 channel = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 language = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.language_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_in_dungeon = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.is_in_dungeon_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 race = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.race_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool temp_login = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.temp_login_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GGLoginPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GGLoginPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes name = 1;
  if (!this->_internal_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_name(), target);
  }

  // uint32 pid = 2;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_pid(), target);
  }

  // uint32 empire = 3;
  if (this->_internal_empire() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_empire(), target);
  }

  // uint32 map_index = 4;
  if (this->_internal_map_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_map_index(), target);
  }

  // uint32 channel = 5;
  if (this->_internal_channel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_channel(), target);
  }

  // uint32 language = 6;
  if (this->_internal_language() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_language(), target);
  }

  // bool is_in_dungeon = 7;
  if (this->_internal_is_in_dungeon() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_is_in_dungeon(), target);
  }

  // uint32 race = 8;
  if (this->_internal_race() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_race(), target);
  }

  // bool temp_login = 9;
  if (this->_internal_temp_login() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_temp_login(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GGLoginPacket)
  return target;
}

size_t GGLoginPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GGLoginPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // uint32 pid = 2;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid());
  }

  // uint32 empire = 3;
  if (this->_internal_empire() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_empire());
  }

  // uint32 map_index = 4;
  if (this->_internal_map_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_map_index());
  }

  // uint32 channel = 5;
  if (this->_internal_channel() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel());
  }

  // uint32 language = 6;
  if (this->_internal_language() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_language());
  }

  // uint32 race = 8;
  if (this->_internal_race() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_race());
  }

  // bool is_in_dungeon = 7;
  if (this->_internal_is_in_dungeon() != 0) {
    total_size += 1 + 1;
  }

  // bool temp_login = 9;
  if (this->_internal_temp_login() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GGLoginPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GGLoginPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GGLoginPacket::GetClassData() const { return &_class_data_; }


void GGLoginPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GGLoginPacket*>(&to_msg);
  auto& from = static_cast<const GGLoginPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GGLoginPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_pid() != 0) {
    _this->_internal_set_pid(from._internal_pid());
  }
  if (from._internal_empire() != 0) {
    _this->_internal_set_empire(from._internal_empire());
  }
  if (from._internal_map_index() != 0) {
    _this->_internal_set_map_index(from._internal_map_index());
  }
  if (from._internal_channel() != 0) {
    _this->_internal_set_channel(from._internal_channel());
  }
  if (from._internal_language() != 0) {
    _this->_internal_set_language(from._internal_language());
  }
  if (from._internal_race() != 0) {
    _this->_internal_set_race(from._internal_race());
  }
  if (from._internal_is_in_dungeon() != 0) {
    _this->_internal_set_is_in_dungeon(from._internal_is_in_dungeon());
  }
  if (from._internal_temp_login() != 0) {
    _this->_internal_set_temp_login(from._internal_temp_login());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GGLoginPacket::CopyFrom(const GGLoginPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GGLoginPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GGLoginPacket::IsInitialized() const {
  return true;
}

void GGLoginPacket::InternalSwap(GGLoginPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GGLoginPacket, _impl_.temp_login_)
      + sizeof(GGLoginPacket::_impl_.temp_login_)
      - PROTOBUF_FIELD_OFFSET(GGLoginPacket, _impl_.pid_)>(
          reinterpret_cast<char*>(&_impl_.pid_),
          reinterpret_cast<char*>(&other->_impl_.pid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GGLoginPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gg_5fpackets_2eproto_getter, &descriptor_table_gg_5fpackets_2eproto_once,
      file_level_metadata_gg_5fpackets_2eproto[1]);
}

// ===================================================================

class GGLogoutPacket::_Internal {
 public:
};

GGLogoutPacket::GGLogoutPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GGLogoutPacket)
}
GGLogoutPacket::GGLogoutPacket(const GGLogoutPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GGLogoutPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.pid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.pid_ = from._impl_.pid_;
  // @@protoc_insertion_point(copy_constructor:network.GGLogoutPacket)
}

inline void GGLogoutPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.pid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GGLogoutPacket::~GGLogoutPacket() {
  // @@protoc_insertion_point(destructor:network.GGLogoutPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GGLogoutPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void GGLogoutPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GGLogoutPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GGLogoutPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.pid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GGLogoutPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 pid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GGLogoutPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GGLogoutPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes name = 1;
  if (!this->_internal_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_name(), target);
  }

  // uint32 pid = 2;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_pid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GGLogoutPacket)
  return target;
}

size_t GGLogoutPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GGLogoutPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // uint32 pid = 2;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GGLogoutPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GGLogoutPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GGLogoutPacket::GetClassData() const { return &_class_data_; }


void GGLogoutPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GGLogoutPacket*>(&to_msg);
  auto& from = static_cast<const GGLogoutPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GGLogoutPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_pid() != 0) {
    _this->_internal_set_pid(from._internal_pid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GGLogoutPacket::CopyFrom(const GGLogoutPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GGLogoutPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GGLogoutPacket::IsInitialized() const {
  return true;
}

void GGLogoutPacket::InternalSwap(GGLogoutPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.pid_, other->_impl_.pid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GGLogoutPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gg_5fpackets_2eproto_getter, &descriptor_table_gg_5fpackets_2eproto_once,
      file_level_metadata_gg_5fpackets_2eproto[2]);
}

// ===================================================================

class GGRelayPacket::_Internal {
 public:
};

GGRelayPacket::GGRelayPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GGRelayPacket)
}
GGRelayPacket::GGRelayPacket(const GGRelayPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GGRelayPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.relay_){}
    , decltype(_impl_.pid_){}
    , decltype(_impl_.relay_header_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.relay_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.relay_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_relay().empty()) {
    _this->_impl_.relay_.Set(from._internal_relay(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.pid_, &from._impl_.pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.relay_header_) -
    reinterpret_cast<char*>(&_impl_.pid_)) + sizeof(_impl_.relay_header_));
  // @@protoc_insertion_point(copy_constructor:network.GGRelayPacket)
}

inline void GGRelayPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.relay_){}
    , decltype(_impl_.pid_){0u}
    , decltype(_impl_.relay_header_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.relay_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.relay_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GGRelayPacket::~GGRelayPacket() {
  // @@protoc_insertion_point(destructor:network.GGRelayPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GGRelayPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.relay_.Destroy();
}

void GGRelayPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GGRelayPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GGRelayPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.relay_.ClearToEmpty();
  ::memset(&_impl_.pid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.relay_header_) -
      reinterpret_cast<char*>(&_impl_.pid_)) + sizeof(_impl_.relay_header_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GGRelayPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 pid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 relay_header = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.relay_header_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes relay = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_relay();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GGRelayPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GGRelayPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes name = 1;
  if (!this->_internal_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_name(), target);
  }

  // uint32 pid = 2;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_pid(), target);
  }

  // uint32 relay_header = 3;
  if (this->_internal_relay_header() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_relay_header(), target);
  }

  // bytes relay = 4;
  if (!this->_internal_relay().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_relay(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GGRelayPacket)
  return target;
}

size_t GGRelayPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GGRelayPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // bytes relay = 4;
  if (!this->_internal_relay().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_relay());
  }

  // uint32 pid = 2;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid());
  }

  // uint32 relay_header = 3;
  if (this->_internal_relay_header() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_relay_header());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GGRelayPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GGRelayPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GGRelayPacket::GetClassData() const { return &_class_data_; }


void GGRelayPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GGRelayPacket*>(&to_msg);
  auto& from = static_cast<const GGRelayPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GGRelayPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_relay().empty()) {
    _this->_internal_set_relay(from._internal_relay());
  }
  if (from._internal_pid() != 0) {
    _this->_internal_set_pid(from._internal_pid());
  }
  if (from._internal_relay_header() != 0) {
    _this->_internal_set_relay_header(from._internal_relay_header());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GGRelayPacket::CopyFrom(const GGRelayPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GGRelayPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GGRelayPacket::IsInitialized() const {
  return true;
}

void GGRelayPacket::InternalSwap(GGRelayPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.relay_, lhs_arena,
      &other->_impl_.relay_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GGRelayPacket, _impl_.relay_header_)
      + sizeof(GGRelayPacket::_impl_.relay_header_)
      - PROTOBUF_FIELD_OFFSET(GGRelayPacket, _impl_.pid_)>(
          reinterpret_cast<char*>(&_impl_.pid_),
          reinterpret_cast<char*>(&other->_impl_.pid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GGRelayPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gg_5fpackets_2eproto_getter, &descriptor_table_gg_5fpackets_2eproto_once,
      file_level_metadata_gg_5fpackets_2eproto[3]);
}

// ===================================================================

class GGPlayerPacket::_Internal {
 public:
};

GGPlayerPacket::GGPlayerPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GGPlayerPacket)
}
GGPlayerPacket::GGPlayerPacket(const GGPlayerPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GGPlayerPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.relay_){}
    , decltype(_impl_.language_){}
    , decltype(_impl_.empire_){}
    , decltype(_impl_.pid_){}
    , decltype(_impl_.relay_header_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.relay_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.relay_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_relay().empty()) {
    _this->_impl_.relay_.Set(from._internal_relay(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.language_, &from._impl_.language_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.relay_header_) -
    reinterpret_cast<char*>(&_impl_.language_)) + sizeof(_impl_.relay_header_));
  // @@protoc_insertion_point(copy_constructor:network.GGPlayerPacket)
}

inline void GGPlayerPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.relay_){}
    , decltype(_impl_.language_){0}
    , decltype(_impl_.empire_){0u}
    , decltype(_impl_.pid_){0u}
    , decltype(_impl_.relay_header_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.relay_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.relay_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GGPlayerPacket::~GGPlayerPacket() {
  // @@protoc_insertion_point(destructor:network.GGPlayerPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GGPlayerPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.relay_.Destroy();
}

void GGPlayerPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GGPlayerPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GGPlayerPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.relay_.ClearToEmpty();
  ::memset(&_impl_.language_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.relay_header_) -
      reinterpret_cast<char*>(&_impl_.language_)) + sizeof(_impl_.relay_header_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GGPlayerPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // sint32 language = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.language_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 empire = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.empire_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 pid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 relay_header = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.relay_header_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes relay = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_relay();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GGPlayerPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GGPlayerPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 language = 1;
  if (this->_internal_language() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(1, this->_internal_language(), target);
  }

  // uint32 empire = 2;
  if (this->_internal_empire() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_empire(), target);
  }

  // uint32 pid = 3;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_pid(), target);
  }

  // uint32 relay_header = 4;
  if (this->_internal_relay_header() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_relay_header(), target);
  }

  // bytes relay = 5;
  if (!this->_internal_relay().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_relay(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GGPlayerPacket)
  return target;
}

size_t GGPlayerPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GGPlayerPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes relay = 5;
  if (!this->_internal_relay().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_relay());
  }

  // sint32 language = 1;
  if (this->_internal_language() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_language());
  }

  // uint32 empire = 2;
  if (this->_internal_empire() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_empire());
  }

  // uint32 pid = 3;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid());
  }

  // uint32 relay_header = 4;
  if (this->_internal_relay_header() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_relay_header());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GGPlayerPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GGPlayerPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GGPlayerPacket::GetClassData() const { return &_class_data_; }


void GGPlayerPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GGPlayerPacket*>(&to_msg);
  auto& from = static_cast<const GGPlayerPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GGPlayerPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_relay().empty()) {
    _this->_internal_set_relay(from._internal_relay());
  }
  if (from._internal_language() != 0) {
    _this->_internal_set_language(from._internal_language());
  }
  if (from._internal_empire() != 0) {
    _this->_internal_set_empire(from._internal_empire());
  }
  if (from._internal_pid() != 0) {
    _this->_internal_set_pid(from._internal_pid());
  }
  if (from._internal_relay_header() != 0) {
    _this->_internal_set_relay_header(from._internal_relay_header());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GGPlayerPacket::CopyFrom(const GGPlayerPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GGPlayerPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GGPlayerPacket::IsInitialized() const {
  return true;
}

void GGPlayerPacket::InternalSwap(GGPlayerPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.relay_, lhs_arena,
      &other->_impl_.relay_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GGPlayerPacket, _impl_.relay_header_)
      + sizeof(GGPlayerPacket::_impl_.relay_header_)
      - PROTOBUF_FIELD_OFFSET(GGPlayerPacket, _impl_.language_)>(
          reinterpret_cast<char*>(&_impl_.language_),
          reinterpret_cast<char*>(&other->_impl_.language_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GGPlayerPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gg_5fpackets_2eproto_getter, &descriptor_table_gg_5fpackets_2eproto_once,
      file_level_metadata_gg_5fpackets_2eproto[4]);
}

// ===================================================================

class GGDisconnectPacket::_Internal {
 public:
};

GGDisconnectPacket::GGDisconnectPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GGDisconnectPacket)
}
GGDisconnectPacket::GGDisconnectPacket(const GGDisconnectPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GGDisconnectPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.login_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.login_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.login_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_login().empty()) {
    _this->_impl_.login_.Set(from._internal_login(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:network.GGDisconnectPacket)
}

inline void GGDisconnectPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.login_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.login_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.login_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GGDisconnectPacket::~GGDisconnectPacket() {
  // @@protoc_insertion_point(destructor:network.GGDisconnectPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GGDisconnectPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.login_.Destroy();
}

void GGDisconnectPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GGDisconnectPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GGDisconnectPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.login_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GGDisconnectPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes login = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_login();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GGDisconnectPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GGDisconnectPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes login = 1;
  if (!this->_internal_login().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_login(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GGDisconnectPacket)
  return target;
}

size_t GGDisconnectPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GGDisconnectPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes login = 1;
  if (!this->_internal_login().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_login());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GGDisconnectPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GGDisconnectPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GGDisconnectPacket::GetClassData() const { return &_class_data_; }


void GGDisconnectPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GGDisconnectPacket*>(&to_msg);
  auto& from = static_cast<const GGDisconnectPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GGDisconnectPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_login().empty()) {
    _this->_internal_set_login(from._internal_login());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GGDisconnectPacket::CopyFrom(const GGDisconnectPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GGDisconnectPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GGDisconnectPacket::IsInitialized() const {
  return true;
}

void GGDisconnectPacket::InternalSwap(GGDisconnectPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.login_, lhs_arena,
      &other->_impl_.login_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GGDisconnectPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gg_5fpackets_2eproto_getter, &descriptor_table_gg_5fpackets_2eproto_once,
      file_level_metadata_gg_5fpackets_2eproto[5]);
}

// ===================================================================

class GGLoginPingPacket::_Internal {
 public:
};

GGLoginPingPacket::GGLoginPingPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GGLoginPingPacket)
}
GGLoginPingPacket::GGLoginPingPacket(const GGLoginPingPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GGLoginPingPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.login_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.login_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.login_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_login().empty()) {
    _this->_impl_.login_.Set(from._internal_login(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:network.GGLoginPingPacket)
}

inline void GGLoginPingPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.login_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.login_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.login_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GGLoginPingPacket::~GGLoginPingPacket() {
  // @@protoc_insertion_point(destructor:network.GGLoginPingPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GGLoginPingPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.login_.Destroy();
}

void GGLoginPingPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GGLoginPingPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GGLoginPingPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.login_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GGLoginPingPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes login = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_login();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GGLoginPingPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GGLoginPingPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes login = 1;
  if (!this->_internal_login().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_login(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GGLoginPingPacket)
  return target;
}

size_t GGLoginPingPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GGLoginPingPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes login = 1;
  if (!this->_internal_login().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_login());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GGLoginPingPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GGLoginPingPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GGLoginPingPacket::GetClassData() const { return &_class_data_; }


void GGLoginPingPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GGLoginPingPacket*>(&to_msg);
  auto& from = static_cast<const GGLoginPingPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GGLoginPingPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_login().empty()) {
    _this->_internal_set_login(from._internal_login());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GGLoginPingPacket::CopyFrom(const GGLoginPingPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GGLoginPingPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GGLoginPingPacket::IsInitialized() const {
  return true;
}

void GGLoginPingPacket::InternalSwap(GGLoginPingPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.login_, lhs_arena,
      &other->_impl_.login_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GGLoginPingPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gg_5fpackets_2eproto_getter, &descriptor_table_gg_5fpackets_2eproto_once,
      file_level_metadata_gg_5fpackets_2eproto[6]);
}

// ===================================================================

class GGGiveItemPacket::_Internal {
 public:
  static const ::network::TItemData& item(const GGGiveItemPacket* msg);
};

const ::network::TItemData&
GGGiveItemPacket::_Internal::item(const GGGiveItemPacket* msg) {
  return *msg->_impl_.item_;
}
void GGGiveItemPacket::clear_item() {
  if (GetArenaForAllocation() == nullptr && _impl_.item_ != nullptr) {
    delete _impl_.item_;
  }
  _impl_.item_ = nullptr;
}
GGGiveItemPacket::GGGiveItemPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GGGiveItemPacket)
}
GGGiveItemPacket::GGGiveItemPacket(const GGGiveItemPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GGGiveItemPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.item_){nullptr}
    , decltype(_impl_.no_refund_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_item()) {
    _this->_impl_.item_ = new ::network::TItemData(*from._impl_.item_);
  }
  _this->_impl_.no_refund_ = from._impl_.no_refund_;
  // @@protoc_insertion_point(copy_constructor:network.GGGiveItemPacket)
}

inline void GGGiveItemPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.item_){nullptr}
    , decltype(_impl_.no_refund_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GGGiveItemPacket::~GGGiveItemPacket() {
  // @@protoc_insertion_point(destructor:network.GGGiveItemPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GGGiveItemPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.item_;
}

void GGGiveItemPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GGGiveItemPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GGGiveItemPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.item_ != nullptr) {
    delete _impl_.item_;
  }
  _impl_.item_ = nullptr;
  _impl_.no_refund_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GGGiveItemPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .network.TItemData item = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_item(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool no_refund = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.no_refund_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GGGiveItemPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GGGiveItemPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .network.TItemData item = 1;
  if (this->_internal_has_item()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::item(this),
        _Internal::item(this).GetCachedSize(), target, stream);
  }

  // bool no_refund = 2;
  if (this->_internal_no_refund() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_no_refund(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GGGiveItemPacket)
  return target;
}

size_t GGGiveItemPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GGGiveItemPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .network.TItemData item = 1;
  if (this->_internal_has_item()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.item_);
  }

  // bool no_refund = 2;
  if (this->_internal_no_refund() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GGGiveItemPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GGGiveItemPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GGGiveItemPacket::GetClassData() const { return &_class_data_; }


void GGGiveItemPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GGGiveItemPacket*>(&to_msg);
  auto& from = static_cast<const GGGiveItemPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GGGiveItemPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_item()) {
    _this->_internal_mutable_item()->::network::TItemData::MergeFrom(
        from._internal_item());
  }
  if (from._internal_no_refund() != 0) {
    _this->_internal_set_no_refund(from._internal_no_refund());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GGGiveItemPacket::CopyFrom(const GGGiveItemPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GGGiveItemPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GGGiveItemPacket::IsInitialized() const {
  return true;
}

void GGGiveItemPacket::InternalSwap(GGGiveItemPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GGGiveItemPacket, _impl_.no_refund_)
      + sizeof(GGGiveItemPacket::_impl_.no_refund_)
      - PROTOBUF_FIELD_OFFSET(GGGiveItemPacket, _impl_.item_)>(
          reinterpret_cast<char*>(&_impl_.item_),
          reinterpret_cast<char*>(&other->_impl_.item_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GGGiveItemPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gg_5fpackets_2eproto_getter, &descriptor_table_gg_5fpackets_2eproto_once,
      file_level_metadata_gg_5fpackets_2eproto[7]);
}

// ===================================================================

class GGGiveGoldPacket::_Internal {
 public:
};

GGGiveGoldPacket::GGGiveGoldPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GGGiveGoldPacket)
}
GGGiveGoldPacket::GGGiveGoldPacket(const GGGiveGoldPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GGGiveGoldPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.gold_){}
    , decltype(_impl_.pid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.gold_, &from._impl_.gold_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.pid_) -
    reinterpret_cast<char*>(&_impl_.gold_)) + sizeof(_impl_.pid_));
  // @@protoc_insertion_point(copy_constructor:network.GGGiveGoldPacket)
}

inline void GGGiveGoldPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.gold_){int64_t{0}}
    , decltype(_impl_.pid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GGGiveGoldPacket::~GGGiveGoldPacket() {
  // @@protoc_insertion_point(destructor:network.GGGiveGoldPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GGGiveGoldPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GGGiveGoldPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GGGiveGoldPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GGGiveGoldPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.gold_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.pid_) -
      reinterpret_cast<char*>(&_impl_.gold_)) + sizeof(_impl_.pid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GGGiveGoldPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 gold = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GGGiveGoldPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GGGiveGoldPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pid(), target);
  }

  // int64 gold = 2;
  if (this->_internal_gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_gold(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GGGiveGoldPacket)
  return target;
}

size_t GGGiveGoldPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GGGiveGoldPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 gold = 2;
  if (this->_internal_gold() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_gold());
  }

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GGGiveGoldPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GGGiveGoldPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GGGiveGoldPacket::GetClassData() const { return &_class_data_; }


void GGGiveGoldPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GGGiveGoldPacket*>(&to_msg);
  auto& from = static_cast<const GGGiveGoldPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GGGiveGoldPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_gold() != 0) {
    _this->_internal_set_gold(from._internal_gold());
  }
  if (from._internal_pid() != 0) {
    _this->_internal_set_pid(from._internal_pid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GGGiveGoldPacket::CopyFrom(const GGGiveGoldPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GGGiveGoldPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GGGiveGoldPacket::IsInitialized() const {
  return true;
}

void GGGiveGoldPacket::InternalSwap(GGGiveGoldPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GGGiveGoldPacket, _impl_.pid_)
      + sizeof(GGGiveGoldPacket::_impl_.pid_)
      - PROTOBUF_FIELD_OFFSET(GGGiveGoldPacket, _impl_.gold_)>(
          reinterpret_cast<char*>(&_impl_.gold_),
          reinterpret_cast<char*>(&other->_impl_.gold_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GGGiveGoldPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gg_5fpackets_2eproto_getter, &descriptor_table_gg_5fpackets_2eproto_once,
      file_level_metadata_gg_5fpackets_2eproto[8]);
}

// ===================================================================

class GGShoutPacket::_Internal {
 public:
};

GGShoutPacket::GGShoutPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GGShoutPacket)
}
GGShoutPacket::GGShoutPacket(const GGShoutPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GGShoutPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.text_){}
    , decltype(_impl_.empire_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_text().empty()) {
    _this->_impl_.text_.Set(from._internal_text(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.empire_ = from._impl_.empire_;
  // @@protoc_insertion_point(copy_constructor:network.GGShoutPacket)
}

inline void GGShoutPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.text_){}
    , decltype(_impl_.empire_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GGShoutPacket::~GGShoutPacket() {
  // @@protoc_insertion_point(destructor:network.GGShoutPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GGShoutPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.text_.Destroy();
}

void GGShoutPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GGShoutPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GGShoutPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.text_.ClearToEmpty();
  _impl_.empire_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GGShoutPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 empire = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.empire_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes text = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GGShoutPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GGShoutPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 empire = 1;
  if (this->_internal_empire() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_empire(), target);
  }

  // bytes text = 2;
  if (!this->_internal_text().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GGShoutPacket)
  return target;
}

size_t GGShoutPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GGShoutPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes text = 2;
  if (!this->_internal_text().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_text());
  }

  // uint32 empire = 1;
  if (this->_internal_empire() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_empire());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GGShoutPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GGShoutPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GGShoutPacket::GetClassData() const { return &_class_data_; }


void GGShoutPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GGShoutPacket*>(&to_msg);
  auto& from = static_cast<const GGShoutPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GGShoutPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_text().empty()) {
    _this->_internal_set_text(from._internal_text());
  }
  if (from._internal_empire() != 0) {
    _this->_internal_set_empire(from._internal_empire());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GGShoutPacket::CopyFrom(const GGShoutPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GGShoutPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GGShoutPacket::IsInitialized() const {
  return true;
}

void GGShoutPacket::InternalSwap(GGShoutPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.text_, lhs_arena,
      &other->_impl_.text_, rhs_arena
  );
  swap(_impl_.empire_, other->_impl_.empire_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GGShoutPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gg_5fpackets_2eproto_getter, &descriptor_table_gg_5fpackets_2eproto_once,
      file_level_metadata_gg_5fpackets_2eproto[9]);
}

// ===================================================================

class GGNoticePacket::_Internal {
 public:
};

GGNoticePacket::GGNoticePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GGNoticePacket)
}
GGNoticePacket::GGNoticePacket(const GGNoticePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GGNoticePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.big_font_){}
    , decltype(_impl_.lang_id_){}
    , decltype(_impl_.channel_){}
    , decltype(_impl_.empire_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.big_font_, &from._impl_.big_font_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.empire_) -
    reinterpret_cast<char*>(&_impl_.big_font_)) + sizeof(_impl_.empire_));
  // @@protoc_insertion_point(copy_constructor:network.GGNoticePacket)
}

inline void GGNoticePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.big_font_){false}
    , decltype(_impl_.lang_id_){0}
    , decltype(_impl_.channel_){0u}
    , decltype(_impl_.empire_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GGNoticePacket::~GGNoticePacket() {
  // @@protoc_insertion_point(destructor:network.GGNoticePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GGNoticePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
}

void GGNoticePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GGNoticePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GGNoticePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  ::memset(&_impl_.big_font_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.empire_) -
      reinterpret_cast<char*>(&_impl_.big_font_)) + sizeof(_impl_.empire_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GGNoticePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool big_font = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.big_font_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 lang_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.lang_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 channel = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 empire = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.empire_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GGNoticePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GGNoticePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes message = 1;
  if (!this->_internal_message().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_message(), target);
  }

  // bool big_font = 2;
  if (this->_internal_big_font() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_big_font(), target);
  }

  // int32 lang_id = 3;
  if (this->_internal_lang_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_lang_id(), target);
  }

  // uint32 channel = 4;
  if (this->_internal_channel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_channel(), target);
  }

  // uint32 empire = 5;
  if (this->_internal_empire() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_empire(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GGNoticePacket)
  return target;
}

size_t GGNoticePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GGNoticePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes message = 1;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_message());
  }

  // bool big_font = 2;
  if (this->_internal_big_font() != 0) {
    total_size += 1 + 1;
  }

  // int32 lang_id = 3;
  if (this->_internal_lang_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_lang_id());
  }

  // uint32 channel = 4;
  if (this->_internal_channel() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel());
  }

  // uint32 empire = 5;
  if (this->_internal_empire() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_empire());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GGNoticePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GGNoticePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GGNoticePacket::GetClassData() const { return &_class_data_; }


void GGNoticePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GGNoticePacket*>(&to_msg);
  auto& from = static_cast<const GGNoticePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GGNoticePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_big_font() != 0) {
    _this->_internal_set_big_font(from._internal_big_font());
  }
  if (from._internal_lang_id() != 0) {
    _this->_internal_set_lang_id(from._internal_lang_id());
  }
  if (from._internal_channel() != 0) {
    _this->_internal_set_channel(from._internal_channel());
  }
  if (from._internal_empire() != 0) {
    _this->_internal_set_empire(from._internal_empire());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GGNoticePacket::CopyFrom(const GGNoticePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GGNoticePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GGNoticePacket::IsInitialized() const {
  return true;
}

void GGNoticePacket::InternalSwap(GGNoticePacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GGNoticePacket, _impl_.empire_)
      + sizeof(GGNoticePacket::_impl_.empire_)
      - PROTOBUF_FIELD_OFFSET(GGNoticePacket, _impl_.big_font_)>(
          reinterpret_cast<char*>(&_impl_.big_font_),
          reinterpret_cast<char*>(&other->_impl_.big_font_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GGNoticePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gg_5fpackets_2eproto_getter, &descriptor_table_gg_5fpackets_2eproto_once,
      file_level_metadata_gg_5fpackets_2eproto[10]);
}

// ===================================================================

class GGSuccessNoticePacket::_Internal {
 public:
};

GGSuccessNoticePacket::GGSuccessNoticePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GGSuccessNoticePacket)
}
GGSuccessNoticePacket::GGSuccessNoticePacket(const GGSuccessNoticePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GGSuccessNoticePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.lang_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.lang_id_ = from._impl_.lang_id_;
  // @@protoc_insertion_point(copy_constructor:network.GGSuccessNoticePacket)
}

inline void GGSuccessNoticePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.lang_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GGSuccessNoticePacket::~GGSuccessNoticePacket() {
  // @@protoc_insertion_point(destructor:network.GGSuccessNoticePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GGSuccessNoticePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
}

void GGSuccessNoticePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GGSuccessNoticePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GGSuccessNoticePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  _impl_.lang_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GGSuccessNoticePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 lang_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.lang_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GGSuccessNoticePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GGSuccessNoticePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 lang_id = 1;
  if (this->_internal_lang_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_lang_id(), target);
  }

  // bytes message = 2;
  if (!this->_internal_message().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GGSuccessNoticePacket)
  return target;
}

size_t GGSuccessNoticePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GGSuccessNoticePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_message());
  }

  // int32 lang_id = 1;
  if (this->_internal_lang_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_lang_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GGSuccessNoticePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GGSuccessNoticePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GGSuccessNoticePacket::GetClassData() const { return &_class_data_; }


void GGSuccessNoticePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GGSuccessNoticePacket*>(&to_msg);
  auto& from = static_cast<const GGSuccessNoticePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GGSuccessNoticePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_lang_id() != 0) {
    _this->_internal_set_lang_id(from._internal_lang_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GGSuccessNoticePacket::CopyFrom(const GGSuccessNoticePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GGSuccessNoticePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GGSuccessNoticePacket::IsInitialized() const {
  return true;
}

void GGSuccessNoticePacket::InternalSwap(GGSuccessNoticePacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  swap(_impl_.lang_id_, other->_impl_.lang_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GGSuccessNoticePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gg_5fpackets_2eproto_getter, &descriptor_table_gg_5fpackets_2eproto_once,
      file_level_metadata_gg_5fpackets_2eproto[11]);
}

// ===================================================================

class GGMessengerRequestPacket::_Internal {
 public:
};

GGMessengerRequestPacket::GGMessengerRequestPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GGMessengerRequestPacket)
}
GGMessengerRequestPacket::GGMessengerRequestPacket(const GGMessengerRequestPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GGMessengerRequestPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.requestor_){}
    , decltype(_impl_.target_pid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.requestor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.requestor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_requestor().empty()) {
    _this->_impl_.requestor_.Set(from._internal_requestor(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.target_pid_ = from._impl_.target_pid_;
  // @@protoc_insertion_point(copy_constructor:network.GGMessengerRequestPacket)
}

inline void GGMessengerRequestPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.requestor_){}
    , decltype(_impl_.target_pid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.requestor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.requestor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GGMessengerRequestPacket::~GGMessengerRequestPacket() {
  // @@protoc_insertion_point(destructor:network.GGMessengerRequestPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GGMessengerRequestPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.requestor_.Destroy();
}

void GGMessengerRequestPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GGMessengerRequestPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GGMessengerRequestPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.requestor_.ClearToEmpty();
  _impl_.target_pid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GGMessengerRequestPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes requestor = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_requestor();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 target_pid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.target_pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GGMessengerRequestPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GGMessengerRequestPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes requestor = 1;
  if (!this->_internal_requestor().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_requestor(), target);
  }

  // uint32 target_pid = 2;
  if (this->_internal_target_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_target_pid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GGMessengerRequestPacket)
  return target;
}

size_t GGMessengerRequestPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GGMessengerRequestPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes requestor = 1;
  if (!this->_internal_requestor().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_requestor());
  }

  // uint32 target_pid = 2;
  if (this->_internal_target_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_target_pid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GGMessengerRequestPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GGMessengerRequestPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GGMessengerRequestPacket::GetClassData() const { return &_class_data_; }


void GGMessengerRequestPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GGMessengerRequestPacket*>(&to_msg);
  auto& from = static_cast<const GGMessengerRequestPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GGMessengerRequestPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_requestor().empty()) {
    _this->_internal_set_requestor(from._internal_requestor());
  }
  if (from._internal_target_pid() != 0) {
    _this->_internal_set_target_pid(from._internal_target_pid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GGMessengerRequestPacket::CopyFrom(const GGMessengerRequestPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GGMessengerRequestPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GGMessengerRequestPacket::IsInitialized() const {
  return true;
}

void GGMessengerRequestPacket::InternalSwap(GGMessengerRequestPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.requestor_, lhs_arena,
      &other->_impl_.requestor_, rhs_arena
  );
  swap(_impl_.target_pid_, other->_impl_.target_pid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GGMessengerRequestPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gg_5fpackets_2eproto_getter, &descriptor_table_gg_5fpackets_2eproto_once,
      file_level_metadata_gg_5fpackets_2eproto[12]);
}

// ===================================================================

class GGMessengerRequestFailPacket::_Internal {
 public:
};

GGMessengerRequestFailPacket::GGMessengerRequestFailPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GGMessengerRequestFailPacket)
}
GGMessengerRequestFailPacket::GGMessengerRequestFailPacket(const GGMessengerRequestFailPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GGMessengerRequestFailPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.requestor_){}
    , decltype(_impl_.target_pid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.requestor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.requestor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_requestor().empty()) {
    _this->_impl_.requestor_.Set(from._internal_requestor(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.target_pid_ = from._impl_.target_pid_;
  // @@protoc_insertion_point(copy_constructor:network.GGMessengerRequestFailPacket)
}

inline void GGMessengerRequestFailPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.requestor_){}
    , decltype(_impl_.target_pid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.requestor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.requestor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GGMessengerRequestFailPacket::~GGMessengerRequestFailPacket() {
  // @@protoc_insertion_point(destructor:network.GGMessengerRequestFailPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GGMessengerRequestFailPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.requestor_.Destroy();
}

void GGMessengerRequestFailPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GGMessengerRequestFailPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GGMessengerRequestFailPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.requestor_.ClearToEmpty();
  _impl_.target_pid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GGMessengerRequestFailPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes requestor = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_requestor();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 target_pid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.target_pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GGMessengerRequestFailPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GGMessengerRequestFailPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes requestor = 1;
  if (!this->_internal_requestor().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_requestor(), target);
  }

  // uint32 target_pid = 2;
  if (this->_internal_target_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_target_pid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GGMessengerRequestFailPacket)
  return target;
}

size_t GGMessengerRequestFailPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GGMessengerRequestFailPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes requestor = 1;
  if (!this->_internal_requestor().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_requestor());
  }

  // uint32 target_pid = 2;
  if (this->_internal_target_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_target_pid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GGMessengerRequestFailPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GGMessengerRequestFailPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GGMessengerRequestFailPacket::GetClassData() const { return &_class_data_; }


void GGMessengerRequestFailPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GGMessengerRequestFailPacket*>(&to_msg);
  auto& from = static_cast<const GGMessengerRequestFailPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GGMessengerRequestFailPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_requestor().empty()) {
    _this->_internal_set_requestor(from._internal_requestor());
  }
  if (from._internal_target_pid() != 0) {
    _this->_internal_set_target_pid(from._internal_target_pid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GGMessengerRequestFailPacket::CopyFrom(const GGMessengerRequestFailPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GGMessengerRequestFailPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GGMessengerRequestFailPacket::IsInitialized() const {
  return true;
}

void GGMessengerRequestFailPacket::InternalSwap(GGMessengerRequestFailPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.requestor_, lhs_arena,
      &other->_impl_.requestor_, rhs_arena
  );
  swap(_impl_.target_pid_, other->_impl_.target_pid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GGMessengerRequestFailPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gg_5fpackets_2eproto_getter, &descriptor_table_gg_5fpackets_2eproto_once,
      file_level_metadata_gg_5fpackets_2eproto[13]);
}

// ===================================================================

class GGMessengerAddPacket::_Internal {
 public:
};

GGMessengerAddPacket::GGMessengerAddPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GGMessengerAddPacket)
}
GGMessengerAddPacket::GGMessengerAddPacket(const GGMessengerAddPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GGMessengerAddPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.account_){}
    , decltype(_impl_.companion_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.account_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.account_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_account().empty()) {
    _this->_impl_.account_.Set(from._internal_account(), 
      _this->GetArenaForAllocation());
  }
  _impl_.companion_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.companion_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_companion().empty()) {
    _this->_impl_.companion_.Set(from._internal_companion(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:network.GGMessengerAddPacket)
}

inline void GGMessengerAddPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.account_){}
    , decltype(_impl_.companion_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.account_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.account_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.companion_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.companion_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GGMessengerAddPacket::~GGMessengerAddPacket() {
  // @@protoc_insertion_point(destructor:network.GGMessengerAddPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GGMessengerAddPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.account_.Destroy();
  _impl_.companion_.Destroy();
}

void GGMessengerAddPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GGMessengerAddPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GGMessengerAddPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.account_.ClearToEmpty();
  _impl_.companion_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GGMessengerAddPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_account();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes companion = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_companion();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GGMessengerAddPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GGMessengerAddPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes account = 1;
  if (!this->_internal_account().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_account(), target);
  }

  // bytes companion = 2;
  if (!this->_internal_companion().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_companion(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GGMessengerAddPacket)
  return target;
}

size_t GGMessengerAddPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GGMessengerAddPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes account = 1;
  if (!this->_internal_account().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_account());
  }

  // bytes companion = 2;
  if (!this->_internal_companion().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_companion());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GGMessengerAddPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GGMessengerAddPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GGMessengerAddPacket::GetClassData() const { return &_class_data_; }


void GGMessengerAddPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GGMessengerAddPacket*>(&to_msg);
  auto& from = static_cast<const GGMessengerAddPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GGMessengerAddPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_account().empty()) {
    _this->_internal_set_account(from._internal_account());
  }
  if (!from._internal_companion().empty()) {
    _this->_internal_set_companion(from._internal_companion());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GGMessengerAddPacket::CopyFrom(const GGMessengerAddPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GGMessengerAddPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GGMessengerAddPacket::IsInitialized() const {
  return true;
}

void GGMessengerAddPacket::InternalSwap(GGMessengerAddPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.account_, lhs_arena,
      &other->_impl_.account_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.companion_, lhs_arena,
      &other->_impl_.companion_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GGMessengerAddPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gg_5fpackets_2eproto_getter, &descriptor_table_gg_5fpackets_2eproto_once,
      file_level_metadata_gg_5fpackets_2eproto[14]);
}

// ===================================================================

class GGMessengerRemovePacket::_Internal {
 public:
};

GGMessengerRemovePacket::GGMessengerRemovePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GGMessengerRemovePacket)
}
GGMessengerRemovePacket::GGMessengerRemovePacket(const GGMessengerRemovePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GGMessengerRemovePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.account_){}
    , decltype(_impl_.companion_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.account_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.account_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_account().empty()) {
    _this->_impl_.account_.Set(from._internal_account(), 
      _this->GetArenaForAllocation());
  }
  _impl_.companion_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.companion_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_companion().empty()) {
    _this->_impl_.companion_.Set(from._internal_companion(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:network.GGMessengerRemovePacket)
}

inline void GGMessengerRemovePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.account_){}
    , decltype(_impl_.companion_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.account_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.account_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.companion_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.companion_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GGMessengerRemovePacket::~GGMessengerRemovePacket() {
  // @@protoc_insertion_point(destructor:network.GGMessengerRemovePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GGMessengerRemovePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.account_.Destroy();
  _impl_.companion_.Destroy();
}

void GGMessengerRemovePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GGMessengerRemovePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GGMessengerRemovePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.account_.ClearToEmpty();
  _impl_.companion_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GGMessengerRemovePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_account();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes companion = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_companion();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GGMessengerRemovePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GGMessengerRemovePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes account = 1;
  if (!this->_internal_account().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_account(), target);
  }

  // bytes companion = 2;
  if (!this->_internal_companion().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_companion(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GGMessengerRemovePacket)
  return target;
}

size_t GGMessengerRemovePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GGMessengerRemovePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes account = 1;
  if (!this->_internal_account().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_account());
  }

  // bytes companion = 2;
  if (!this->_internal_companion().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_companion());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GGMessengerRemovePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GGMessengerRemovePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GGMessengerRemovePacket::GetClassData() const { return &_class_data_; }


void GGMessengerRemovePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GGMessengerRemovePacket*>(&to_msg);
  auto& from = static_cast<const GGMessengerRemovePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GGMessengerRemovePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_account().empty()) {
    _this->_internal_set_account(from._internal_account());
  }
  if (!from._internal_companion().empty()) {
    _this->_internal_set_companion(from._internal_companion());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GGMessengerRemovePacket::CopyFrom(const GGMessengerRemovePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GGMessengerRemovePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GGMessengerRemovePacket::IsInitialized() const {
  return true;
}

void GGMessengerRemovePacket::InternalSwap(GGMessengerRemovePacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.account_, lhs_arena,
      &other->_impl_.account_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.companion_, lhs_arena,
      &other->_impl_.companion_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GGMessengerRemovePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gg_5fpackets_2eproto_getter, &descriptor_table_gg_5fpackets_2eproto_once,
      file_level_metadata_gg_5fpackets_2eproto[15]);
}

// ===================================================================

class GGMessengerBlockAddPacket::_Internal {
 public:
};

GGMessengerBlockAddPacket::GGMessengerBlockAddPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GGMessengerBlockAddPacket)
}
GGMessengerBlockAddPacket::GGMessengerBlockAddPacket(const GGMessengerBlockAddPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GGMessengerBlockAddPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.account_){}
    , decltype(_impl_.companion_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.account_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.account_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_account().empty()) {
    _this->_impl_.account_.Set(from._internal_account(), 
      _this->GetArenaForAllocation());
  }
  _impl_.companion_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.companion_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_companion().empty()) {
    _this->_impl_.companion_.Set(from._internal_companion(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:network.GGMessengerBlockAddPacket)
}

inline void GGMessengerBlockAddPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.account_){}
    , decltype(_impl_.companion_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.account_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.account_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.companion_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.companion_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GGMessengerBlockAddPacket::~GGMessengerBlockAddPacket() {
  // @@protoc_insertion_point(destructor:network.GGMessengerBlockAddPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GGMessengerBlockAddPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.account_.Destroy();
  _impl_.companion_.Destroy();
}

void GGMessengerBlockAddPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GGMessengerBlockAddPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GGMessengerBlockAddPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.account_.ClearToEmpty();
  _impl_.companion_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GGMessengerBlockAddPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_account();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes companion = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_companion();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GGMessengerBlockAddPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GGMessengerBlockAddPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes account = 1;
  if (!this->_internal_account().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_account(), target);
  }

  // bytes companion = 2;
  if (!this->_internal_companion().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_companion(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GGMessengerBlockAddPacket)
  return target;
}

size_t GGMessengerBlockAddPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GGMessengerBlockAddPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes account = 1;
  if (!this->_internal_account().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_account());
  }

  // bytes companion = 2;
  if (!this->_internal_companion().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_companion());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GGMessengerBlockAddPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GGMessengerBlockAddPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GGMessengerBlockAddPacket::GetClassData() const { return &_class_data_; }


void GGMessengerBlockAddPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GGMessengerBlockAddPacket*>(&to_msg);
  auto& from = static_cast<const GGMessengerBlockAddPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GGMessengerBlockAddPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_account().empty()) {
    _this->_internal_set_account(from._internal_account());
  }
  if (!from._internal_companion().empty()) {
    _this->_internal_set_companion(from._internal_companion());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GGMessengerBlockAddPacket::CopyFrom(const GGMessengerBlockAddPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GGMessengerBlockAddPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GGMessengerBlockAddPacket::IsInitialized() const {
  return true;
}

void GGMessengerBlockAddPacket::InternalSwap(GGMessengerBlockAddPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.account_, lhs_arena,
      &other->_impl_.account_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.companion_, lhs_arena,
      &other->_impl_.companion_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GGMessengerBlockAddPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gg_5fpackets_2eproto_getter, &descriptor_table_gg_5fpackets_2eproto_once,
      file_level_metadata_gg_5fpackets_2eproto[16]);
}

// ===================================================================

class GGMessengerBlockRemovePacket::_Internal {
 public:
};

GGMessengerBlockRemovePacket::GGMessengerBlockRemovePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GGMessengerBlockRemovePacket)
}
GGMessengerBlockRemovePacket::GGMessengerBlockRemovePacket(const GGMessengerBlockRemovePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GGMessengerBlockRemovePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.account_){}
    , decltype(_impl_.companion_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.account_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.account_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_account().empty()) {
    _this->_impl_.account_.Set(from._internal_account(), 
      _this->GetArenaForAllocation());
  }
  _impl_.companion_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.companion_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_companion().empty()) {
    _this->_impl_.companion_.Set(from._internal_companion(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:network.GGMessengerBlockRemovePacket)
}

inline void GGMessengerBlockRemovePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.account_){}
    , decltype(_impl_.companion_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.account_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.account_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.companion_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.companion_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GGMessengerBlockRemovePacket::~GGMessengerBlockRemovePacket() {
  // @@protoc_insertion_point(destructor:network.GGMessengerBlockRemovePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GGMessengerBlockRemovePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.account_.Destroy();
  _impl_.companion_.Destroy();
}

void GGMessengerBlockRemovePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GGMessengerBlockRemovePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GGMessengerBlockRemovePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.account_.ClearToEmpty();
  _impl_.companion_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GGMessengerBlockRemovePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_account();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes companion = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_companion();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GGMessengerBlockRemovePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GGMessengerBlockRemovePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes account = 1;
  if (!this->_internal_account().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_account(), target);
  }

  // bytes companion = 2;
  if (!this->_internal_companion().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_companion(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GGMessengerBlockRemovePacket)
  return target;
}

size_t GGMessengerBlockRemovePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GGMessengerBlockRemovePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes account = 1;
  if (!this->_internal_account().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_account());
  }

  // bytes companion = 2;
  if (!this->_internal_companion().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_companion());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GGMessengerBlockRemovePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GGMessengerBlockRemovePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GGMessengerBlockRemovePacket::GetClassData() const { return &_class_data_; }


void GGMessengerBlockRemovePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GGMessengerBlockRemovePacket*>(&to_msg);
  auto& from = static_cast<const GGMessengerBlockRemovePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GGMessengerBlockRemovePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_account().empty()) {
    _this->_internal_set_account(from._internal_account());
  }
  if (!from._internal_companion().empty()) {
    _this->_internal_set_companion(from._internal_companion());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GGMessengerBlockRemovePacket::CopyFrom(const GGMessengerBlockRemovePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GGMessengerBlockRemovePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GGMessengerBlockRemovePacket::IsInitialized() const {
  return true;
}

void GGMessengerBlockRemovePacket::InternalSwap(GGMessengerBlockRemovePacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.account_, lhs_arena,
      &other->_impl_.account_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.companion_, lhs_arena,
      &other->_impl_.companion_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GGMessengerBlockRemovePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gg_5fpackets_2eproto_getter, &descriptor_table_gg_5fpackets_2eproto_once,
      file_level_metadata_gg_5fpackets_2eproto[17]);
}

// ===================================================================

class GGFindPositionPacket::_Internal {
 public:
};

GGFindPositionPacket::GGFindPositionPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GGFindPositionPacket)
}
GGFindPositionPacket::GGFindPositionPacket(const GGFindPositionPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GGFindPositionPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.from_pid_){}
    , decltype(_impl_.target_pid_){}
    , decltype(_impl_.is_gm_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.from_pid_, &from._impl_.from_pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_gm_) -
    reinterpret_cast<char*>(&_impl_.from_pid_)) + sizeof(_impl_.is_gm_));
  // @@protoc_insertion_point(copy_constructor:network.GGFindPositionPacket)
}

inline void GGFindPositionPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.from_pid_){0u}
    , decltype(_impl_.target_pid_){0u}
    , decltype(_impl_.is_gm_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GGFindPositionPacket::~GGFindPositionPacket() {
  // @@protoc_insertion_point(destructor:network.GGFindPositionPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GGFindPositionPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GGFindPositionPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GGFindPositionPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GGFindPositionPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.from_pid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.is_gm_) -
      reinterpret_cast<char*>(&_impl_.from_pid_)) + sizeof(_impl_.is_gm_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GGFindPositionPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 from_pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.from_pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 target_pid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.target_pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_gm = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.is_gm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GGFindPositionPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GGFindPositionPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 from_pid = 1;
  if (this->_internal_from_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_from_pid(), target);
  }

  // uint32 target_pid = 2;
  if (this->_internal_target_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_target_pid(), target);
  }

  // bool is_gm = 3;
  if (this->_internal_is_gm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_is_gm(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GGFindPositionPacket)
  return target;
}

size_t GGFindPositionPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GGFindPositionPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 from_pid = 1;
  if (this->_internal_from_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_from_pid());
  }

  // uint32 target_pid = 2;
  if (this->_internal_target_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_target_pid());
  }

  // bool is_gm = 3;
  if (this->_internal_is_gm() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GGFindPositionPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GGFindPositionPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GGFindPositionPacket::GetClassData() const { return &_class_data_; }


void GGFindPositionPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GGFindPositionPacket*>(&to_msg);
  auto& from = static_cast<const GGFindPositionPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GGFindPositionPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_from_pid() != 0) {
    _this->_internal_set_from_pid(from._internal_from_pid());
  }
  if (from._internal_target_pid() != 0) {
    _this->_internal_set_target_pid(from._internal_target_pid());
  }
  if (from._internal_is_gm() != 0) {
    _this->_internal_set_is_gm(from._internal_is_gm());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GGFindPositionPacket::CopyFrom(const GGFindPositionPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GGFindPositionPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GGFindPositionPacket::IsInitialized() const {
  return true;
}

void GGFindPositionPacket::InternalSwap(GGFindPositionPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GGFindPositionPacket, _impl_.is_gm_)
      + sizeof(GGFindPositionPacket::_impl_.is_gm_)
      - PROTOBUF_FIELD_OFFSET(GGFindPositionPacket, _impl_.from_pid_)>(
          reinterpret_cast<char*>(&_impl_.from_pid_),
          reinterpret_cast<char*>(&other->_impl_.from_pid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GGFindPositionPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gg_5fpackets_2eproto_getter, &descriptor_table_gg_5fpackets_2eproto_once,
      file_level_metadata_gg_5fpackets_2eproto[18]);
}

// ===================================================================

class GGWarpCharacterPacket::_Internal {
 public:
};

GGWarpCharacterPacket::GGWarpCharacterPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GGWarpCharacterPacket)
}
GGWarpCharacterPacket::GGWarpCharacterPacket(const GGWarpCharacterPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GGWarpCharacterPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pid_){}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.map_index_){}
    , decltype(_impl_.target_pid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.pid_, &from._impl_.pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.target_pid_) -
    reinterpret_cast<char*>(&_impl_.pid_)) + sizeof(_impl_.target_pid_));
  // @@protoc_insertion_point(copy_constructor:network.GGWarpCharacterPacket)
}

inline void GGWarpCharacterPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pid_){0u}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.map_index_){0u}
    , decltype(_impl_.target_pid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GGWarpCharacterPacket::~GGWarpCharacterPacket() {
  // @@protoc_insertion_point(destructor:network.GGWarpCharacterPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GGWarpCharacterPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GGWarpCharacterPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GGWarpCharacterPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GGWarpCharacterPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.pid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.target_pid_) -
      reinterpret_cast<char*>(&_impl_.pid_)) + sizeof(_impl_.target_pid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GGWarpCharacterPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 map_index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.map_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 target_pid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.target_pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GGWarpCharacterPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GGWarpCharacterPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pid(), target);
  }

  // int32 x = 2;
  if (this->_internal_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_x(), target);
  }

  // int32 y = 3;
  if (this->_internal_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_y(), target);
  }

  // uint32 map_index = 4;
  if (this->_internal_map_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_map_index(), target);
  }

  // uint32 target_pid = 5;
  if (this->_internal_target_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_target_pid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GGWarpCharacterPacket)
  return target;
}

size_t GGWarpCharacterPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GGWarpCharacterPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid());
  }

  // int32 x = 2;
  if (this->_internal_x() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x());
  }

  // int32 y = 3;
  if (this->_internal_y() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y());
  }

  // uint32 map_index = 4;
  if (this->_internal_map_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_map_index());
  }

  // uint32 target_pid = 5;
  if (this->_internal_target_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_target_pid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GGWarpCharacterPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GGWarpCharacterPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GGWarpCharacterPacket::GetClassData() const { return &_class_data_; }


void GGWarpCharacterPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GGWarpCharacterPacket*>(&to_msg);
  auto& from = static_cast<const GGWarpCharacterPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GGWarpCharacterPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_pid() != 0) {
    _this->_internal_set_pid(from._internal_pid());
  }
  if (from._internal_x() != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  if (from._internal_y() != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  if (from._internal_map_index() != 0) {
    _this->_internal_set_map_index(from._internal_map_index());
  }
  if (from._internal_target_pid() != 0) {
    _this->_internal_set_target_pid(from._internal_target_pid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GGWarpCharacterPacket::CopyFrom(const GGWarpCharacterPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GGWarpCharacterPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GGWarpCharacterPacket::IsInitialized() const {
  return true;
}

void GGWarpCharacterPacket::InternalSwap(GGWarpCharacterPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GGWarpCharacterPacket, _impl_.target_pid_)
      + sizeof(GGWarpCharacterPacket::_impl_.target_pid_)
      - PROTOBUF_FIELD_OFFSET(GGWarpCharacterPacket, _impl_.pid_)>(
          reinterpret_cast<char*>(&_impl_.pid_),
          reinterpret_cast<char*>(&other->_impl_.pid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GGWarpCharacterPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gg_5fpackets_2eproto_getter, &descriptor_table_gg_5fpackets_2eproto_once,
      file_level_metadata_gg_5fpackets_2eproto[19]);
}

// ===================================================================

class GGXmasWarpSantaPacket::_Internal {
 public:
};

GGXmasWarpSantaPacket::GGXmasWarpSantaPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GGXmasWarpSantaPacket)
}
GGXmasWarpSantaPacket::GGXmasWarpSantaPacket(const GGXmasWarpSantaPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GGXmasWarpSantaPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.channel_){}
    , decltype(_impl_.map_index_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.channel_, &from._impl_.channel_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.map_index_) -
    reinterpret_cast<char*>(&_impl_.channel_)) + sizeof(_impl_.map_index_));
  // @@protoc_insertion_point(copy_constructor:network.GGXmasWarpSantaPacket)
}

inline void GGXmasWarpSantaPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.channel_){0u}
    , decltype(_impl_.map_index_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GGXmasWarpSantaPacket::~GGXmasWarpSantaPacket() {
  // @@protoc_insertion_point(destructor:network.GGXmasWarpSantaPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GGXmasWarpSantaPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GGXmasWarpSantaPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GGXmasWarpSantaPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GGXmasWarpSantaPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.channel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.map_index_) -
      reinterpret_cast<char*>(&_impl_.channel_)) + sizeof(_impl_.map_index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GGXmasWarpSantaPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 channel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 map_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.map_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GGXmasWarpSantaPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GGXmasWarpSantaPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 channel = 1;
  if (this->_internal_channel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_channel(), target);
  }

  // uint32 map_index = 2;
  if (this->_internal_map_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_map_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GGXmasWarpSantaPacket)
  return target;
}

size_t GGXmasWarpSantaPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GGXmasWarpSantaPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 channel = 1;
  if (this->_internal_channel() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel());
  }

  // uint32 map_index = 2;
  if (this->_internal_map_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_map_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GGXmasWarpSantaPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GGXmasWarpSantaPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GGXmasWarpSantaPacket::GetClassData() const { return &_class_data_; }


void GGXmasWarpSantaPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GGXmasWarpSantaPacket*>(&to_msg);
  auto& from = static_cast<const GGXmasWarpSantaPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GGXmasWarpSantaPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_channel() != 0) {
    _this->_internal_set_channel(from._internal_channel());
  }
  if (from._internal_map_index() != 0) {
    _this->_internal_set_map_index(from._internal_map_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GGXmasWarpSantaPacket::CopyFrom(const GGXmasWarpSantaPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GGXmasWarpSantaPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GGXmasWarpSantaPacket::IsInitialized() const {
  return true;
}

void GGXmasWarpSantaPacket::InternalSwap(GGXmasWarpSantaPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GGXmasWarpSantaPacket, _impl_.map_index_)
      + sizeof(GGXmasWarpSantaPacket::_impl_.map_index_)
      - PROTOBUF_FIELD_OFFSET(GGXmasWarpSantaPacket, _impl_.channel_)>(
          reinterpret_cast<char*>(&_impl_.channel_),
          reinterpret_cast<char*>(&other->_impl_.channel_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GGXmasWarpSantaPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gg_5fpackets_2eproto_getter, &descriptor_table_gg_5fpackets_2eproto_once,
      file_level_metadata_gg_5fpackets_2eproto[20]);
}

// ===================================================================

class GGXmasWarpSantaReplyPacket::_Internal {
 public:
};

GGXmasWarpSantaReplyPacket::GGXmasWarpSantaReplyPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GGXmasWarpSantaReplyPacket)
}
GGXmasWarpSantaReplyPacket::GGXmasWarpSantaReplyPacket(const GGXmasWarpSantaReplyPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GGXmasWarpSantaReplyPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.channel_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.channel_ = from._impl_.channel_;
  // @@protoc_insertion_point(copy_constructor:network.GGXmasWarpSantaReplyPacket)
}

inline void GGXmasWarpSantaReplyPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.channel_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GGXmasWarpSantaReplyPacket::~GGXmasWarpSantaReplyPacket() {
  // @@protoc_insertion_point(destructor:network.GGXmasWarpSantaReplyPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GGXmasWarpSantaReplyPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GGXmasWarpSantaReplyPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GGXmasWarpSantaReplyPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GGXmasWarpSantaReplyPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.channel_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GGXmasWarpSantaReplyPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 channel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GGXmasWarpSantaReplyPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GGXmasWarpSantaReplyPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 channel = 1;
  if (this->_internal_channel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_channel(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GGXmasWarpSantaReplyPacket)
  return target;
}

size_t GGXmasWarpSantaReplyPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GGXmasWarpSantaReplyPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 channel = 1;
  if (this->_internal_channel() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GGXmasWarpSantaReplyPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GGXmasWarpSantaReplyPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GGXmasWarpSantaReplyPacket::GetClassData() const { return &_class_data_; }


void GGXmasWarpSantaReplyPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GGXmasWarpSantaReplyPacket*>(&to_msg);
  auto& from = static_cast<const GGXmasWarpSantaReplyPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GGXmasWarpSantaReplyPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_channel() != 0) {
    _this->_internal_set_channel(from._internal_channel());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GGXmasWarpSantaReplyPacket::CopyFrom(const GGXmasWarpSantaReplyPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GGXmasWarpSantaReplyPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GGXmasWarpSantaReplyPacket::IsInitialized() const {
  return true;
}

void GGXmasWarpSantaReplyPacket::InternalSwap(GGXmasWarpSantaReplyPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.channel_, other->_impl_.channel_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GGXmasWarpSantaReplyPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gg_5fpackets_2eproto_getter, &descriptor_table_gg_5fpackets_2eproto_once,
      file_level_metadata_gg_5fpackets_2eproto[21]);
}

// ===================================================================

class GGBlockChatPacket::_Internal {
 public:
};

GGBlockChatPacket::GGBlockChatPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GGBlockChatPacket)
}
GGBlockChatPacket::GGBlockChatPacket(const GGBlockChatPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GGBlockChatPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.block_duration_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.block_duration_ = from._impl_.block_duration_;
  // @@protoc_insertion_point(copy_constructor:network.GGBlockChatPacket)
}

inline void GGBlockChatPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.block_duration_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GGBlockChatPacket::~GGBlockChatPacket() {
  // @@protoc_insertion_point(destructor:network.GGBlockChatPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GGBlockChatPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void GGBlockChatPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GGBlockChatPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GGBlockChatPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.block_duration_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GGBlockChatPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 block_duration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.block_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GGBlockChatPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GGBlockChatPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes name = 1;
  if (!this->_internal_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_name(), target);
  }

  // int32 block_duration = 2;
  if (this->_internal_block_duration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_block_duration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GGBlockChatPacket)
  return target;
}

size_t GGBlockChatPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GGBlockChatPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // int32 block_duration = 2;
  if (this->_internal_block_duration() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_block_duration());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GGBlockChatPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GGBlockChatPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GGBlockChatPacket::GetClassData() const { return &_class_data_; }


void GGBlockChatPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GGBlockChatPacket*>(&to_msg);
  auto& from = static_cast<const GGBlockChatPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GGBlockChatPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_block_duration() != 0) {
    _this->_internal_set_block_duration(from._internal_block_duration());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GGBlockChatPacket::CopyFrom(const GGBlockChatPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GGBlockChatPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GGBlockChatPacket::IsInitialized() const {
  return true;
}

void GGBlockChatPacket::InternalSwap(GGBlockChatPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.block_duration_, other->_impl_.block_duration_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GGBlockChatPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gg_5fpackets_2eproto_getter, &descriptor_table_gg_5fpackets_2eproto_once,
      file_level_metadata_gg_5fpackets_2eproto[22]);
}

// ===================================================================

class GGCastleSiegePacket::_Internal {
 public:
};

GGCastleSiegePacket::GGCastleSiegePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GGCastleSiegePacket)
}
GGCastleSiegePacket::GGCastleSiegePacket(const GGCastleSiegePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GGCastleSiegePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.empire_){}
    , decltype(_impl_.tower_count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.empire_, &from._impl_.empire_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.tower_count_) -
    reinterpret_cast<char*>(&_impl_.empire_)) + sizeof(_impl_.tower_count_));
  // @@protoc_insertion_point(copy_constructor:network.GGCastleSiegePacket)
}

inline void GGCastleSiegePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.empire_){0u}
    , decltype(_impl_.tower_count_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GGCastleSiegePacket::~GGCastleSiegePacket() {
  // @@protoc_insertion_point(destructor:network.GGCastleSiegePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GGCastleSiegePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GGCastleSiegePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GGCastleSiegePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GGCastleSiegePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.empire_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.tower_count_) -
      reinterpret_cast<char*>(&_impl_.empire_)) + sizeof(_impl_.tower_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GGCastleSiegePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 empire = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.empire_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 tower_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.tower_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GGCastleSiegePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GGCastleSiegePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 empire = 1;
  if (this->_internal_empire() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_empire(), target);
  }

  // uint32 tower_count = 2;
  if (this->_internal_tower_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_tower_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GGCastleSiegePacket)
  return target;
}

size_t GGCastleSiegePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GGCastleSiegePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 empire = 1;
  if (this->_internal_empire() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_empire());
  }

  // uint32 tower_count = 2;
  if (this->_internal_tower_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tower_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GGCastleSiegePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GGCastleSiegePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GGCastleSiegePacket::GetClassData() const { return &_class_data_; }


void GGCastleSiegePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GGCastleSiegePacket*>(&to_msg);
  auto& from = static_cast<const GGCastleSiegePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GGCastleSiegePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_empire() != 0) {
    _this->_internal_set_empire(from._internal_empire());
  }
  if (from._internal_tower_count() != 0) {
    _this->_internal_set_tower_count(from._internal_tower_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GGCastleSiegePacket::CopyFrom(const GGCastleSiegePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GGCastleSiegePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GGCastleSiegePacket::IsInitialized() const {
  return true;
}

void GGCastleSiegePacket::InternalSwap(GGCastleSiegePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GGCastleSiegePacket, _impl_.tower_count_)
      + sizeof(GGCastleSiegePacket::_impl_.tower_count_)
      - PROTOBUF_FIELD_OFFSET(GGCastleSiegePacket, _impl_.empire_)>(
          reinterpret_cast<char*>(&_impl_.empire_),
          reinterpret_cast<char*>(&other->_impl_.empire_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GGCastleSiegePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gg_5fpackets_2eproto_getter, &descriptor_table_gg_5fpackets_2eproto_once,
      file_level_metadata_gg_5fpackets_2eproto[23]);
}

// ===================================================================

class GGPCBangUpdatePacket::_Internal {
 public:
};

GGPCBangUpdatePacket::GGPCBangUpdatePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GGPCBangUpdatePacket)
}
GGPCBangUpdatePacket::GGPCBangUpdatePacket(const GGPCBangUpdatePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GGPCBangUpdatePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pc_bang_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.pc_bang_id_ = from._impl_.pc_bang_id_;
  // @@protoc_insertion_point(copy_constructor:network.GGPCBangUpdatePacket)
}

inline void GGPCBangUpdatePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pc_bang_id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GGPCBangUpdatePacket::~GGPCBangUpdatePacket() {
  // @@protoc_insertion_point(destructor:network.GGPCBangUpdatePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GGPCBangUpdatePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GGPCBangUpdatePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GGPCBangUpdatePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GGPCBangUpdatePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pc_bang_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GGPCBangUpdatePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 pc_bang_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pc_bang_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GGPCBangUpdatePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GGPCBangUpdatePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pc_bang_id = 1;
  if (this->_internal_pc_bang_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pc_bang_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GGPCBangUpdatePacket)
  return target;
}

size_t GGPCBangUpdatePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GGPCBangUpdatePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 pc_bang_id = 1;
  if (this->_internal_pc_bang_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pc_bang_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GGPCBangUpdatePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GGPCBangUpdatePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GGPCBangUpdatePacket::GetClassData() const { return &_class_data_; }


void GGPCBangUpdatePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GGPCBangUpdatePacket*>(&to_msg);
  auto& from = static_cast<const GGPCBangUpdatePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GGPCBangUpdatePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_pc_bang_id() != 0) {
    _this->_internal_set_pc_bang_id(from._internal_pc_bang_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GGPCBangUpdatePacket::CopyFrom(const GGPCBangUpdatePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GGPCBangUpdatePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GGPCBangUpdatePacket::IsInitialized() const {
  return true;
}

void GGPCBangUpdatePacket::InternalSwap(GGPCBangUpdatePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.pc_bang_id_, other->_impl_.pc_bang_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GGPCBangUpdatePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gg_5fpackets_2eproto_getter, &descriptor_table_gg_5fpackets_2eproto_once,
      file_level_metadata_gg_5fpackets_2eproto[24]);
}

// ===================================================================

class GGWhisperManagerAddPacket::_Internal {
 public:
};

GGWhisperManagerAddPacket::GGWhisperManagerAddPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GGWhisperManagerAddPacket)
}
GGWhisperManagerAddPacket::GGWhisperManagerAddPacket(const GGWhisperManagerAddPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GGWhisperManagerAddPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sender_name_){}
    , decltype(_impl_.receiver_name_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.sender_pid_){}
    , decltype(_impl_.receiver_pid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sender_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sender_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sender_name().empty()) {
    _this->_impl_.sender_name_.Set(from._internal_sender_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.receiver_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.receiver_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_receiver_name().empty()) {
    _this->_impl_.receiver_name_.Set(from._internal_receiver_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.sender_pid_, &from._impl_.sender_pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.receiver_pid_) -
    reinterpret_cast<char*>(&_impl_.sender_pid_)) + sizeof(_impl_.receiver_pid_));
  // @@protoc_insertion_point(copy_constructor:network.GGWhisperManagerAddPacket)
}

inline void GGWhisperManagerAddPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.sender_name_){}
    , decltype(_impl_.receiver_name_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.sender_pid_){0u}
    , decltype(_impl_.receiver_pid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.sender_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sender_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.receiver_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.receiver_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GGWhisperManagerAddPacket::~GGWhisperManagerAddPacket() {
  // @@protoc_insertion_point(destructor:network.GGWhisperManagerAddPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GGWhisperManagerAddPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sender_name_.Destroy();
  _impl_.receiver_name_.Destroy();
  _impl_.message_.Destroy();
}

void GGWhisperManagerAddPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GGWhisperManagerAddPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GGWhisperManagerAddPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sender_name_.ClearToEmpty();
  _impl_.receiver_name_.ClearToEmpty();
  _impl_.message_.ClearToEmpty();
  ::memset(&_impl_.sender_pid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.receiver_pid_) -
      reinterpret_cast<char*>(&_impl_.sender_pid_)) + sizeof(_impl_.receiver_pid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GGWhisperManagerAddPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes sender_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sender_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 sender_pid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.sender_pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes receiver_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_receiver_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 receiver_pid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.receiver_pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes message = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GGWhisperManagerAddPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GGWhisperManagerAddPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes sender_name = 1;
  if (!this->_internal_sender_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_sender_name(), target);
  }

  // uint32 sender_pid = 2;
  if (this->_internal_sender_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_sender_pid(), target);
  }

  // bytes receiver_name = 3;
  if (!this->_internal_receiver_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_receiver_name(), target);
  }

  // uint32 receiver_pid = 4;
  if (this->_internal_receiver_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_receiver_pid(), target);
  }

  // bytes message = 5;
  if (!this->_internal_message().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GGWhisperManagerAddPacket)
  return target;
}

size_t GGWhisperManagerAddPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GGWhisperManagerAddPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes sender_name = 1;
  if (!this->_internal_sender_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sender_name());
  }

  // bytes receiver_name = 3;
  if (!this->_internal_receiver_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_receiver_name());
  }

  // bytes message = 5;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_message());
  }

  // uint32 sender_pid = 2;
  if (this->_internal_sender_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_sender_pid());
  }

  // uint32 receiver_pid = 4;
  if (this->_internal_receiver_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_receiver_pid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GGWhisperManagerAddPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GGWhisperManagerAddPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GGWhisperManagerAddPacket::GetClassData() const { return &_class_data_; }


void GGWhisperManagerAddPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GGWhisperManagerAddPacket*>(&to_msg);
  auto& from = static_cast<const GGWhisperManagerAddPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GGWhisperManagerAddPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sender_name().empty()) {
    _this->_internal_set_sender_name(from._internal_sender_name());
  }
  if (!from._internal_receiver_name().empty()) {
    _this->_internal_set_receiver_name(from._internal_receiver_name());
  }
  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_sender_pid() != 0) {
    _this->_internal_set_sender_pid(from._internal_sender_pid());
  }
  if (from._internal_receiver_pid() != 0) {
    _this->_internal_set_receiver_pid(from._internal_receiver_pid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GGWhisperManagerAddPacket::CopyFrom(const GGWhisperManagerAddPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GGWhisperManagerAddPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GGWhisperManagerAddPacket::IsInitialized() const {
  return true;
}

void GGWhisperManagerAddPacket::InternalSwap(GGWhisperManagerAddPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sender_name_, lhs_arena,
      &other->_impl_.sender_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.receiver_name_, lhs_arena,
      &other->_impl_.receiver_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GGWhisperManagerAddPacket, _impl_.receiver_pid_)
      + sizeof(GGWhisperManagerAddPacket::_impl_.receiver_pid_)
      - PROTOBUF_FIELD_OFFSET(GGWhisperManagerAddPacket, _impl_.sender_pid_)>(
          reinterpret_cast<char*>(&_impl_.sender_pid_),
          reinterpret_cast<char*>(&other->_impl_.sender_pid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GGWhisperManagerAddPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gg_5fpackets_2eproto_getter, &descriptor_table_gg_5fpackets_2eproto_once,
      file_level_metadata_gg_5fpackets_2eproto[25]);
}

// ===================================================================

class GGTeamlerStatusPacket::_Internal {
 public:
};

GGTeamlerStatusPacket::GGTeamlerStatusPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GGTeamlerStatusPacket)
}
GGTeamlerStatusPacket::GGTeamlerStatusPacket(const GGTeamlerStatusPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GGTeamlerStatusPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.is_online_){}
    , decltype(_impl_.language_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.is_online_, &from._impl_.is_online_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.language_) -
    reinterpret_cast<char*>(&_impl_.is_online_)) + sizeof(_impl_.language_));
  // @@protoc_insertion_point(copy_constructor:network.GGTeamlerStatusPacket)
}

inline void GGTeamlerStatusPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.is_online_){false}
    , decltype(_impl_.language_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GGTeamlerStatusPacket::~GGTeamlerStatusPacket() {
  // @@protoc_insertion_point(destructor:network.GGTeamlerStatusPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GGTeamlerStatusPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void GGTeamlerStatusPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GGTeamlerStatusPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GGTeamlerStatusPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  ::memset(&_impl_.is_online_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.language_) -
      reinterpret_cast<char*>(&_impl_.is_online_)) + sizeof(_impl_.language_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GGTeamlerStatusPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_online = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.is_online_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 language = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.language_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GGTeamlerStatusPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GGTeamlerStatusPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes name = 1;
  if (!this->_internal_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_name(), target);
  }

  // bool is_online = 2;
  if (this->_internal_is_online() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_is_online(), target);
  }

  // int32 language = 3;
  if (this->_internal_language() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_language(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GGTeamlerStatusPacket)
  return target;
}

size_t GGTeamlerStatusPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GGTeamlerStatusPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // bool is_online = 2;
  if (this->_internal_is_online() != 0) {
    total_size += 1 + 1;
  }

  // int32 language = 3;
  if (this->_internal_language() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_language());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GGTeamlerStatusPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GGTeamlerStatusPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GGTeamlerStatusPacket::GetClassData() const { return &_class_data_; }


void GGTeamlerStatusPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GGTeamlerStatusPacket*>(&to_msg);
  auto& from = static_cast<const GGTeamlerStatusPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GGTeamlerStatusPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_is_online() != 0) {
    _this->_internal_set_is_online(from._internal_is_online());
  }
  if (from._internal_language() != 0) {
    _this->_internal_set_language(from._internal_language());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GGTeamlerStatusPacket::CopyFrom(const GGTeamlerStatusPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GGTeamlerStatusPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GGTeamlerStatusPacket::IsInitialized() const {
  return true;
}

void GGTeamlerStatusPacket::InternalSwap(GGTeamlerStatusPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GGTeamlerStatusPacket, _impl_.language_)
      + sizeof(GGTeamlerStatusPacket::_impl_.language_)
      - PROTOBUF_FIELD_OFFSET(GGTeamlerStatusPacket, _impl_.is_online_)>(
          reinterpret_cast<char*>(&_impl_.is_online_),
          reinterpret_cast<char*>(&other->_impl_.is_online_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GGTeamlerStatusPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gg_5fpackets_2eproto_getter, &descriptor_table_gg_5fpackets_2eproto_once,
      file_level_metadata_gg_5fpackets_2eproto[26]);
}

// ===================================================================

class GGRequestDungeonWarpPacket::_Internal {
 public:
};

GGRequestDungeonWarpPacket::GGRequestDungeonWarpPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GGRequestDungeonWarpPacket)
}
GGRequestDungeonWarpPacket::GGRequestDungeonWarpPacket(const GGRequestDungeonWarpPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GGRequestDungeonWarpPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , decltype(_impl_.player_id_){}
    , decltype(_impl_.map_index_){}
    , decltype(_impl_.dest_x_){}
    , decltype(_impl_.dest_y_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.dest_y_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.dest_y_));
  // @@protoc_insertion_point(copy_constructor:network.GGRequestDungeonWarpPacket)
}

inline void GGRequestDungeonWarpPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){0u}
    , decltype(_impl_.player_id_){0u}
    , decltype(_impl_.map_index_){0u}
    , decltype(_impl_.dest_x_){0u}
    , decltype(_impl_.dest_y_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GGRequestDungeonWarpPacket::~GGRequestDungeonWarpPacket() {
  // @@protoc_insertion_point(destructor:network.GGRequestDungeonWarpPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GGRequestDungeonWarpPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GGRequestDungeonWarpPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GGRequestDungeonWarpPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GGRequestDungeonWarpPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.dest_y_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.dest_y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GGRequestDungeonWarpPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 player_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 map_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.map_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 dest_x = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.dest_x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 dest_y = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.dest_y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GGRequestDungeonWarpPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GGRequestDungeonWarpPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // uint32 player_id = 2;
  if (this->_internal_player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_player_id(), target);
  }

  // uint32 map_index = 3;
  if (this->_internal_map_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_map_index(), target);
  }

  // uint32 dest_x = 4;
  if (this->_internal_dest_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_dest_x(), target);
  }

  // uint32 dest_y = 5;
  if (this->_internal_dest_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_dest_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GGRequestDungeonWarpPacket)
  return target;
}

size_t GGRequestDungeonWarpPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GGRequestDungeonWarpPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
  }

  // uint32 player_id = 2;
  if (this->_internal_player_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_player_id());
  }

  // uint32 map_index = 3;
  if (this->_internal_map_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_map_index());
  }

  // uint32 dest_x = 4;
  if (this->_internal_dest_x() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_dest_x());
  }

  // uint32 dest_y = 5;
  if (this->_internal_dest_y() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_dest_y());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GGRequestDungeonWarpPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GGRequestDungeonWarpPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GGRequestDungeonWarpPacket::GetClassData() const { return &_class_data_; }


void GGRequestDungeonWarpPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GGRequestDungeonWarpPacket*>(&to_msg);
  auto& from = static_cast<const GGRequestDungeonWarpPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GGRequestDungeonWarpPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_player_id() != 0) {
    _this->_internal_set_player_id(from._internal_player_id());
  }
  if (from._internal_map_index() != 0) {
    _this->_internal_set_map_index(from._internal_map_index());
  }
  if (from._internal_dest_x() != 0) {
    _this->_internal_set_dest_x(from._internal_dest_x());
  }
  if (from._internal_dest_y() != 0) {
    _this->_internal_set_dest_y(from._internal_dest_y());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GGRequestDungeonWarpPacket::CopyFrom(const GGRequestDungeonWarpPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GGRequestDungeonWarpPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GGRequestDungeonWarpPacket::IsInitialized() const {
  return true;
}

void GGRequestDungeonWarpPacket::InternalSwap(GGRequestDungeonWarpPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GGRequestDungeonWarpPacket, _impl_.dest_y_)
      + sizeof(GGRequestDungeonWarpPacket::_impl_.dest_y_)
      - PROTOBUF_FIELD_OFFSET(GGRequestDungeonWarpPacket, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GGRequestDungeonWarpPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gg_5fpackets_2eproto_getter, &descriptor_table_gg_5fpackets_2eproto_once,
      file_level_metadata_gg_5fpackets_2eproto[27]);
}

// ===================================================================

class GGAnswerDungeonWarpPacket::_Internal {
 public:
};

GGAnswerDungeonWarpPacket::GGAnswerDungeonWarpPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GGAnswerDungeonWarpPacket)
}
GGAnswerDungeonWarpPacket::GGAnswerDungeonWarpPacket(const GGAnswerDungeonWarpPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GGAnswerDungeonWarpPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , decltype(_impl_.player_id_){}
    , decltype(_impl_.map_index_){}
    , decltype(_impl_.dest_x_){}
    , decltype(_impl_.dest_y_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.dest_y_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.dest_y_));
  // @@protoc_insertion_point(copy_constructor:network.GGAnswerDungeonWarpPacket)
}

inline void GGAnswerDungeonWarpPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){0u}
    , decltype(_impl_.player_id_){0u}
    , decltype(_impl_.map_index_){0u}
    , decltype(_impl_.dest_x_){0u}
    , decltype(_impl_.dest_y_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GGAnswerDungeonWarpPacket::~GGAnswerDungeonWarpPacket() {
  // @@protoc_insertion_point(destructor:network.GGAnswerDungeonWarpPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GGAnswerDungeonWarpPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GGAnswerDungeonWarpPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GGAnswerDungeonWarpPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GGAnswerDungeonWarpPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.dest_y_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.dest_y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GGAnswerDungeonWarpPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 player_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 map_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.map_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 dest_x = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.dest_x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 dest_y = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.dest_y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GGAnswerDungeonWarpPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GGAnswerDungeonWarpPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // uint32 player_id = 2;
  if (this->_internal_player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_player_id(), target);
  }

  // uint32 map_index = 3;
  if (this->_internal_map_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_map_index(), target);
  }

  // uint32 dest_x = 4;
  if (this->_internal_dest_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_dest_x(), target);
  }

  // uint32 dest_y = 5;
  if (this->_internal_dest_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_dest_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GGAnswerDungeonWarpPacket)
  return target;
}

size_t GGAnswerDungeonWarpPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GGAnswerDungeonWarpPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
  }

  // uint32 player_id = 2;
  if (this->_internal_player_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_player_id());
  }

  // uint32 map_index = 3;
  if (this->_internal_map_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_map_index());
  }

  // uint32 dest_x = 4;
  if (this->_internal_dest_x() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_dest_x());
  }

  // uint32 dest_y = 5;
  if (this->_internal_dest_y() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_dest_y());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GGAnswerDungeonWarpPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GGAnswerDungeonWarpPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GGAnswerDungeonWarpPacket::GetClassData() const { return &_class_data_; }


void GGAnswerDungeonWarpPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GGAnswerDungeonWarpPacket*>(&to_msg);
  auto& from = static_cast<const GGAnswerDungeonWarpPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GGAnswerDungeonWarpPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_player_id() != 0) {
    _this->_internal_set_player_id(from._internal_player_id());
  }
  if (from._internal_map_index() != 0) {
    _this->_internal_set_map_index(from._internal_map_index());
  }
  if (from._internal_dest_x() != 0) {
    _this->_internal_set_dest_x(from._internal_dest_x());
  }
  if (from._internal_dest_y() != 0) {
    _this->_internal_set_dest_y(from._internal_dest_y());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GGAnswerDungeonWarpPacket::CopyFrom(const GGAnswerDungeonWarpPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GGAnswerDungeonWarpPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GGAnswerDungeonWarpPacket::IsInitialized() const {
  return true;
}

void GGAnswerDungeonWarpPacket::InternalSwap(GGAnswerDungeonWarpPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GGAnswerDungeonWarpPacket, _impl_.dest_y_)
      + sizeof(GGAnswerDungeonWarpPacket::_impl_.dest_y_)
      - PROTOBUF_FIELD_OFFSET(GGAnswerDungeonWarpPacket, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GGAnswerDungeonWarpPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gg_5fpackets_2eproto_getter, &descriptor_table_gg_5fpackets_2eproto_once,
      file_level_metadata_gg_5fpackets_2eproto[28]);
}

// ===================================================================

class GGDungeonSetFlagPacket::_Internal {
 public:
};

GGDungeonSetFlagPacket::GGDungeonSetFlagPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GGDungeonSetFlagPacket)
}
GGDungeonSetFlagPacket::GGDungeonSetFlagPacket(const GGDungeonSetFlagPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GGDungeonSetFlagPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.flag_name_){}
    , decltype(_impl_.pid_){}
    , decltype(_impl_.flag_value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.flag_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.flag_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_flag_name().empty()) {
    _this->_impl_.flag_name_.Set(from._internal_flag_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.pid_, &from._impl_.pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.flag_value_) -
    reinterpret_cast<char*>(&_impl_.pid_)) + sizeof(_impl_.flag_value_));
  // @@protoc_insertion_point(copy_constructor:network.GGDungeonSetFlagPacket)
}

inline void GGDungeonSetFlagPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.flag_name_){}
    , decltype(_impl_.pid_){0u}
    , decltype(_impl_.flag_value_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.flag_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.flag_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GGDungeonSetFlagPacket::~GGDungeonSetFlagPacket() {
  // @@protoc_insertion_point(destructor:network.GGDungeonSetFlagPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GGDungeonSetFlagPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.flag_name_.Destroy();
}

void GGDungeonSetFlagPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GGDungeonSetFlagPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GGDungeonSetFlagPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.flag_name_.ClearToEmpty();
  ::memset(&_impl_.pid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.flag_value_) -
      reinterpret_cast<char*>(&_impl_.pid_)) + sizeof(_impl_.flag_value_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GGDungeonSetFlagPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes flag_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_flag_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 flag_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.flag_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GGDungeonSetFlagPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GGDungeonSetFlagPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pid(), target);
  }

  // bytes flag_name = 2;
  if (!this->_internal_flag_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_flag_name(), target);
  }

  // int32 flag_value = 3;
  if (this->_internal_flag_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_flag_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GGDungeonSetFlagPacket)
  return target;
}

size_t GGDungeonSetFlagPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GGDungeonSetFlagPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes flag_name = 2;
  if (!this->_internal_flag_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_flag_name());
  }

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid());
  }

  // int32 flag_value = 3;
  if (this->_internal_flag_value() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_flag_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GGDungeonSetFlagPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GGDungeonSetFlagPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GGDungeonSetFlagPacket::GetClassData() const { return &_class_data_; }


void GGDungeonSetFlagPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GGDungeonSetFlagPacket*>(&to_msg);
  auto& from = static_cast<const GGDungeonSetFlagPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GGDungeonSetFlagPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_flag_name().empty()) {
    _this->_internal_set_flag_name(from._internal_flag_name());
  }
  if (from._internal_pid() != 0) {
    _this->_internal_set_pid(from._internal_pid());
  }
  if (from._internal_flag_value() != 0) {
    _this->_internal_set_flag_value(from._internal_flag_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GGDungeonSetFlagPacket::CopyFrom(const GGDungeonSetFlagPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GGDungeonSetFlagPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GGDungeonSetFlagPacket::IsInitialized() const {
  return true;
}

void GGDungeonSetFlagPacket::InternalSwap(GGDungeonSetFlagPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.flag_name_, lhs_arena,
      &other->_impl_.flag_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GGDungeonSetFlagPacket, _impl_.flag_value_)
      + sizeof(GGDungeonSetFlagPacket::_impl_.flag_value_)
      - PROTOBUF_FIELD_OFFSET(GGDungeonSetFlagPacket, _impl_.pid_)>(
          reinterpret_cast<char*>(&_impl_.pid_),
          reinterpret_cast<char*>(&other->_impl_.pid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GGDungeonSetFlagPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gg_5fpackets_2eproto_getter, &descriptor_table_gg_5fpackets_2eproto_once,
      file_level_metadata_gg_5fpackets_2eproto[29]);
}

// ===================================================================

class GGExecReloadCommandPacket::_Internal {
 public:
};

GGExecReloadCommandPacket::GGExecReloadCommandPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GGExecReloadCommandPacket)
}
GGExecReloadCommandPacket::GGExecReloadCommandPacket(const GGExecReloadCommandPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GGExecReloadCommandPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.argument_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.argument_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.argument_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_argument().empty()) {
    _this->_impl_.argument_.Set(from._internal_argument(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:network.GGExecReloadCommandPacket)
}

inline void GGExecReloadCommandPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.argument_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.argument_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.argument_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GGExecReloadCommandPacket::~GGExecReloadCommandPacket() {
  // @@protoc_insertion_point(destructor:network.GGExecReloadCommandPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GGExecReloadCommandPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.argument_.Destroy();
}

void GGExecReloadCommandPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GGExecReloadCommandPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GGExecReloadCommandPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.argument_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GGExecReloadCommandPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes argument = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_argument();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GGExecReloadCommandPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GGExecReloadCommandPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes argument = 1;
  if (!this->_internal_argument().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_argument(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GGExecReloadCommandPacket)
  return target;
}

size_t GGExecReloadCommandPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GGExecReloadCommandPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes argument = 1;
  if (!this->_internal_argument().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_argument());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GGExecReloadCommandPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GGExecReloadCommandPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GGExecReloadCommandPacket::GetClassData() const { return &_class_data_; }


void GGExecReloadCommandPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GGExecReloadCommandPacket*>(&to_msg);
  auto& from = static_cast<const GGExecReloadCommandPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GGExecReloadCommandPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_argument().empty()) {
    _this->_internal_set_argument(from._internal_argument());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GGExecReloadCommandPacket::CopyFrom(const GGExecReloadCommandPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GGExecReloadCommandPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GGExecReloadCommandPacket::IsInitialized() const {
  return true;
}

void GGExecReloadCommandPacket::InternalSwap(GGExecReloadCommandPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.argument_, lhs_arena,
      &other->_impl_.argument_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GGExecReloadCommandPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gg_5fpackets_2eproto_getter, &descriptor_table_gg_5fpackets_2eproto_once,
      file_level_metadata_gg_5fpackets_2eproto[30]);
}

// ===================================================================

class GGRecvShutdownPacket::_Internal {
 public:
};

GGRecvShutdownPacket::GGRecvShutdownPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GGRecvShutdownPacket)
}
GGRecvShutdownPacket::GGRecvShutdownPacket(const GGRecvShutdownPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GGRecvShutdownPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.start_sec_){}
    , decltype(_impl_.maintenance_){}
    , decltype(_impl_.maintenance_duration_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.start_sec_, &from._impl_.start_sec_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.maintenance_duration_) -
    reinterpret_cast<char*>(&_impl_.start_sec_)) + sizeof(_impl_.maintenance_duration_));
  // @@protoc_insertion_point(copy_constructor:network.GGRecvShutdownPacket)
}

inline void GGRecvShutdownPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.start_sec_){0}
    , decltype(_impl_.maintenance_){false}
    , decltype(_impl_.maintenance_duration_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GGRecvShutdownPacket::~GGRecvShutdownPacket() {
  // @@protoc_insertion_point(destructor:network.GGRecvShutdownPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GGRecvShutdownPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GGRecvShutdownPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GGRecvShutdownPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GGRecvShutdownPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.start_sec_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.maintenance_duration_) -
      reinterpret_cast<char*>(&_impl_.start_sec_)) + sizeof(_impl_.maintenance_duration_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GGRecvShutdownPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 start_sec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.start_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool maintenance = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.maintenance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 maintenance_duration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.maintenance_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GGRecvShutdownPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GGRecvShutdownPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 start_sec = 1;
  if (this->_internal_start_sec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_start_sec(), target);
  }

  // bool maintenance = 2;
  if (this->_internal_maintenance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_maintenance(), target);
  }

  // int32 maintenance_duration = 3;
  if (this->_internal_maintenance_duration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_maintenance_duration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GGRecvShutdownPacket)
  return target;
}

size_t GGRecvShutdownPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GGRecvShutdownPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 start_sec = 1;
  if (this->_internal_start_sec() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_start_sec());
  }

  // bool maintenance = 2;
  if (this->_internal_maintenance() != 0) {
    total_size += 1 + 1;
  }

  // int32 maintenance_duration = 3;
  if (this->_internal_maintenance_duration() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_maintenance_duration());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GGRecvShutdownPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GGRecvShutdownPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GGRecvShutdownPacket::GetClassData() const { return &_class_data_; }


void GGRecvShutdownPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GGRecvShutdownPacket*>(&to_msg);
  auto& from = static_cast<const GGRecvShutdownPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GGRecvShutdownPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_start_sec() != 0) {
    _this->_internal_set_start_sec(from._internal_start_sec());
  }
  if (from._internal_maintenance() != 0) {
    _this->_internal_set_maintenance(from._internal_maintenance());
  }
  if (from._internal_maintenance_duration() != 0) {
    _this->_internal_set_maintenance_duration(from._internal_maintenance_duration());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GGRecvShutdownPacket::CopyFrom(const GGRecvShutdownPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GGRecvShutdownPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GGRecvShutdownPacket::IsInitialized() const {
  return true;
}

void GGRecvShutdownPacket::InternalSwap(GGRecvShutdownPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GGRecvShutdownPacket, _impl_.maintenance_duration_)
      + sizeof(GGRecvShutdownPacket::_impl_.maintenance_duration_)
      - PROTOBUF_FIELD_OFFSET(GGRecvShutdownPacket, _impl_.start_sec_)>(
          reinterpret_cast<char*>(&_impl_.start_sec_),
          reinterpret_cast<char*>(&other->_impl_.start_sec_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GGRecvShutdownPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gg_5fpackets_2eproto_getter, &descriptor_table_gg_5fpackets_2eproto_once,
      file_level_metadata_gg_5fpackets_2eproto[31]);
}

// ===================================================================

class GGTransferPacket::_Internal {
 public:
};

GGTransferPacket::GGTransferPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GGTransferPacket)
}
GGTransferPacket::GGTransferPacket(const GGTransferPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GGTransferPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.y_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  // @@protoc_insertion_point(copy_constructor:network.GGTransferPacket)
}

inline void GGTransferPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GGTransferPacket::~GGTransferPacket() {
  // @@protoc_insertion_point(destructor:network.GGTransferPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GGTransferPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void GGTransferPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GGTransferPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GGTransferPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  ::memset(&_impl_.x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.y_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GGTransferPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GGTransferPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GGTransferPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes name = 1;
  if (!this->_internal_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_name(), target);
  }

  // int32 x = 2;
  if (this->_internal_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_x(), target);
  }

  // int32 y = 3;
  if (this->_internal_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GGTransferPacket)
  return target;
}

size_t GGTransferPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GGTransferPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // int32 x = 2;
  if (this->_internal_x() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x());
  }

  // int32 y = 3;
  if (this->_internal_y() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GGTransferPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GGTransferPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GGTransferPacket::GetClassData() const { return &_class_data_; }


void GGTransferPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GGTransferPacket*>(&to_msg);
  auto& from = static_cast<const GGTransferPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GGTransferPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_x() != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  if (from._internal_y() != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GGTransferPacket::CopyFrom(const GGTransferPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GGTransferPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GGTransferPacket::IsInitialized() const {
  return true;
}

void GGTransferPacket::InternalSwap(GGTransferPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GGTransferPacket, _impl_.y_)
      + sizeof(GGTransferPacket::_impl_.y_)
      - PROTOBUF_FIELD_OFFSET(GGTransferPacket, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GGTransferPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gg_5fpackets_2eproto_getter, &descriptor_table_gg_5fpackets_2eproto_once,
      file_level_metadata_gg_5fpackets_2eproto[32]);
}

// ===================================================================

class GGForceItemDeletePacket::_Internal {
 public:
};

GGForceItemDeletePacket::GGForceItemDeletePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GGForceItemDeletePacket)
}
GGForceItemDeletePacket::GGForceItemDeletePacket(const GGForceItemDeletePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GGForceItemDeletePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.item_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.item_id_ = from._impl_.item_id_;
  // @@protoc_insertion_point(copy_constructor:network.GGForceItemDeletePacket)
}

inline void GGForceItemDeletePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.item_id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GGForceItemDeletePacket::~GGForceItemDeletePacket() {
  // @@protoc_insertion_point(destructor:network.GGForceItemDeletePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GGForceItemDeletePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GGForceItemDeletePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GGForceItemDeletePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GGForceItemDeletePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.item_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GGForceItemDeletePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GGForceItemDeletePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GGForceItemDeletePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 item_id = 1;
  if (this->_internal_item_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_item_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GGForceItemDeletePacket)
  return target;
}

size_t GGForceItemDeletePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GGForceItemDeletePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 item_id = 1;
  if (this->_internal_item_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_item_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GGForceItemDeletePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GGForceItemDeletePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GGForceItemDeletePacket::GetClassData() const { return &_class_data_; }


void GGForceItemDeletePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GGForceItemDeletePacket*>(&to_msg);
  auto& from = static_cast<const GGForceItemDeletePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GGForceItemDeletePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_item_id() != 0) {
    _this->_internal_set_item_id(from._internal_item_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GGForceItemDeletePacket::CopyFrom(const GGForceItemDeletePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GGForceItemDeletePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GGForceItemDeletePacket::IsInitialized() const {
  return true;
}

void GGForceItemDeletePacket::InternalSwap(GGForceItemDeletePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.item_id_, other->_impl_.item_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GGForceItemDeletePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gg_5fpackets_2eproto_getter, &descriptor_table_gg_5fpackets_2eproto_once,
      file_level_metadata_gg_5fpackets_2eproto[33]);
}

// ===================================================================

class GGTeamChatPacket::_Internal {
 public:
};

GGTeamChatPacket::GGTeamChatPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GGTeamChatPacket)
}
GGTeamChatPacket::GGTeamChatPacket(const GGTeamChatPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GGTeamChatPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.text_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_text().empty()) {
    _this->_impl_.text_.Set(from._internal_text(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:network.GGTeamChatPacket)
}

inline void GGTeamChatPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.text_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GGTeamChatPacket::~GGTeamChatPacket() {
  // @@protoc_insertion_point(destructor:network.GGTeamChatPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GGTeamChatPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.text_.Destroy();
}

void GGTeamChatPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GGTeamChatPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GGTeamChatPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.text_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GGTeamChatPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes text = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GGTeamChatPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GGTeamChatPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes text = 1;
  if (!this->_internal_text().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GGTeamChatPacket)
  return target;
}

size_t GGTeamChatPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GGTeamChatPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes text = 1;
  if (!this->_internal_text().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_text());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GGTeamChatPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GGTeamChatPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GGTeamChatPacket::GetClassData() const { return &_class_data_; }


void GGTeamChatPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GGTeamChatPacket*>(&to_msg);
  auto& from = static_cast<const GGTeamChatPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GGTeamChatPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_text().empty()) {
    _this->_internal_set_text(from._internal_text());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GGTeamChatPacket::CopyFrom(const GGTeamChatPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GGTeamChatPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GGTeamChatPacket::IsInitialized() const {
  return true;
}

void GGTeamChatPacket::InternalSwap(GGTeamChatPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.text_, lhs_arena,
      &other->_impl_.text_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GGTeamChatPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gg_5fpackets_2eproto_getter, &descriptor_table_gg_5fpackets_2eproto_once,
      file_level_metadata_gg_5fpackets_2eproto[34]);
}

// ===================================================================

class GGCombatZoneRankingPacket::_Internal {
 public:
};

void GGCombatZoneRankingPacket::clear_weekly() {
  _impl_.weekly_.Clear();
}
void GGCombatZoneRankingPacket::clear_general() {
  _impl_.general_.Clear();
}
GGCombatZoneRankingPacket::GGCombatZoneRankingPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GGCombatZoneRankingPacket)
}
GGCombatZoneRankingPacket::GGCombatZoneRankingPacket(const GGCombatZoneRankingPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GGCombatZoneRankingPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.weekly_){from._impl_.weekly_}
    , decltype(_impl_.general_){from._impl_.general_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:network.GGCombatZoneRankingPacket)
}

inline void GGCombatZoneRankingPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.weekly_){arena}
    , decltype(_impl_.general_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GGCombatZoneRankingPacket::~GGCombatZoneRankingPacket() {
  // @@protoc_insertion_point(destructor:network.GGCombatZoneRankingPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GGCombatZoneRankingPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.weekly_.~RepeatedPtrField();
  _impl_.general_.~RepeatedPtrField();
}

void GGCombatZoneRankingPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GGCombatZoneRankingPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GGCombatZoneRankingPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.weekly_.Clear();
  _impl_.general_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GGCombatZoneRankingPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .network.TCombatZoneRankingPlayer weekly = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_weekly(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .network.TCombatZoneRankingPlayer general = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_general(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GGCombatZoneRankingPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GGCombatZoneRankingPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .network.TCombatZoneRankingPlayer weekly = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_weekly_size()); i < n; i++) {
    const auto& repfield = this->_internal_weekly(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .network.TCombatZoneRankingPlayer general = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_general_size()); i < n; i++) {
    const auto& repfield = this->_internal_general(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GGCombatZoneRankingPacket)
  return target;
}

size_t GGCombatZoneRankingPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GGCombatZoneRankingPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .network.TCombatZoneRankingPlayer weekly = 1;
  total_size += 1UL * this->_internal_weekly_size();
  for (const auto& msg : this->_impl_.weekly_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .network.TCombatZoneRankingPlayer general = 2;
  total_size += 1UL * this->_internal_general_size();
  for (const auto& msg : this->_impl_.general_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GGCombatZoneRankingPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GGCombatZoneRankingPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GGCombatZoneRankingPacket::GetClassData() const { return &_class_data_; }


void GGCombatZoneRankingPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GGCombatZoneRankingPacket*>(&to_msg);
  auto& from = static_cast<const GGCombatZoneRankingPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GGCombatZoneRankingPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.weekly_.MergeFrom(from._impl_.weekly_);
  _this->_impl_.general_.MergeFrom(from._impl_.general_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GGCombatZoneRankingPacket::CopyFrom(const GGCombatZoneRankingPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GGCombatZoneRankingPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GGCombatZoneRankingPacket::IsInitialized() const {
  return true;
}

void GGCombatZoneRankingPacket::InternalSwap(GGCombatZoneRankingPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.weekly_.InternalSwap(&other->_impl_.weekly_);
  _impl_.general_.InternalSwap(&other->_impl_.general_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GGCombatZoneRankingPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gg_5fpackets_2eproto_getter, &descriptor_table_gg_5fpackets_2eproto_once,
      file_level_metadata_gg_5fpackets_2eproto[35]);
}

// ===================================================================

class GGUpdateRightsPacket::_Internal {
 public:
};

GGUpdateRightsPacket::GGUpdateRightsPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GGUpdateRightsPacket)
}
GGUpdateRightsPacket::GGUpdateRightsPacket(const GGUpdateRightsPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GGUpdateRightsPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.gm_level_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.gm_level_ = from._impl_.gm_level_;
  // @@protoc_insertion_point(copy_constructor:network.GGUpdateRightsPacket)
}

inline void GGUpdateRightsPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.gm_level_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GGUpdateRightsPacket::~GGUpdateRightsPacket() {
  // @@protoc_insertion_point(destructor:network.GGUpdateRightsPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GGUpdateRightsPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void GGUpdateRightsPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GGUpdateRightsPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GGUpdateRightsPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.gm_level_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GGUpdateRightsPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 gm_level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.gm_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GGUpdateRightsPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GGUpdateRightsPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes name = 1;
  if (!this->_internal_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_name(), target);
  }

  // uint32 gm_level = 2;
  if (this->_internal_gm_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_gm_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GGUpdateRightsPacket)
  return target;
}

size_t GGUpdateRightsPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GGUpdateRightsPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // uint32 gm_level = 2;
  if (this->_internal_gm_level() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_gm_level());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GGUpdateRightsPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GGUpdateRightsPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GGUpdateRightsPacket::GetClassData() const { return &_class_data_; }


void GGUpdateRightsPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GGUpdateRightsPacket*>(&to_msg);
  auto& from = static_cast<const GGUpdateRightsPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GGUpdateRightsPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_gm_level() != 0) {
    _this->_internal_set_gm_level(from._internal_gm_level());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GGUpdateRightsPacket::CopyFrom(const GGUpdateRightsPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GGUpdateRightsPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GGUpdateRightsPacket::IsInitialized() const {
  return true;
}

void GGUpdateRightsPacket::InternalSwap(GGUpdateRightsPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.gm_level_, other->_impl_.gm_level_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GGUpdateRightsPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gg_5fpackets_2eproto_getter, &descriptor_table_gg_5fpackets_2eproto_once,
      file_level_metadata_gg_5fpackets_2eproto[36]);
}

// ===================================================================

class GGFlushPlayerPacket::_Internal {
 public:
};

GGFlushPlayerPacket::GGFlushPlayerPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GGFlushPlayerPacket)
}
GGFlushPlayerPacket::GGFlushPlayerPacket(const GGFlushPlayerPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GGFlushPlayerPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.pid_ = from._impl_.pid_;
  // @@protoc_insertion_point(copy_constructor:network.GGFlushPlayerPacket)
}

inline void GGFlushPlayerPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GGFlushPlayerPacket::~GGFlushPlayerPacket() {
  // @@protoc_insertion_point(destructor:network.GGFlushPlayerPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GGFlushPlayerPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GGFlushPlayerPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GGFlushPlayerPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GGFlushPlayerPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GGFlushPlayerPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GGFlushPlayerPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GGFlushPlayerPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GGFlushPlayerPacket)
  return target;
}

size_t GGFlushPlayerPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GGFlushPlayerPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GGFlushPlayerPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GGFlushPlayerPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GGFlushPlayerPacket::GetClassData() const { return &_class_data_; }


void GGFlushPlayerPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GGFlushPlayerPacket*>(&to_msg);
  auto& from = static_cast<const GGFlushPlayerPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GGFlushPlayerPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_pid() != 0) {
    _this->_internal_set_pid(from._internal_pid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GGFlushPlayerPacket::CopyFrom(const GGFlushPlayerPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GGFlushPlayerPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GGFlushPlayerPacket::IsInitialized() const {
  return true;
}

void GGFlushPlayerPacket::InternalSwap(GGFlushPlayerPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.pid_, other->_impl_.pid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GGFlushPlayerPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gg_5fpackets_2eproto_getter, &descriptor_table_gg_5fpackets_2eproto_once,
      file_level_metadata_gg_5fpackets_2eproto[37]);
}

// ===================================================================

class GGHomepageCommandPacket::_Internal {
 public:
};

GGHomepageCommandPacket::GGHomepageCommandPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GGHomepageCommandPacket)
}
GGHomepageCommandPacket::GGHomepageCommandPacket(const GGHomepageCommandPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GGHomepageCommandPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.command_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.command_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.command_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_command().empty()) {
    _this->_impl_.command_.Set(from._internal_command(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:network.GGHomepageCommandPacket)
}

inline void GGHomepageCommandPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.command_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.command_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.command_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GGHomepageCommandPacket::~GGHomepageCommandPacket() {
  // @@protoc_insertion_point(destructor:network.GGHomepageCommandPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GGHomepageCommandPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.command_.Destroy();
}

void GGHomepageCommandPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GGHomepageCommandPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GGHomepageCommandPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.command_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GGHomepageCommandPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes command = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_command();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GGHomepageCommandPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GGHomepageCommandPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes command = 1;
  if (!this->_internal_command().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_command(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GGHomepageCommandPacket)
  return target;
}

size_t GGHomepageCommandPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GGHomepageCommandPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes command = 1;
  if (!this->_internal_command().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_command());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GGHomepageCommandPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GGHomepageCommandPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GGHomepageCommandPacket::GetClassData() const { return &_class_data_; }


void GGHomepageCommandPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GGHomepageCommandPacket*>(&to_msg);
  auto& from = static_cast<const GGHomepageCommandPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GGHomepageCommandPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_command().empty()) {
    _this->_internal_set_command(from._internal_command());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GGHomepageCommandPacket::CopyFrom(const GGHomepageCommandPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GGHomepageCommandPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GGHomepageCommandPacket::IsInitialized() const {
  return true;
}

void GGHomepageCommandPacket::InternalSwap(GGHomepageCommandPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.command_, lhs_arena,
      &other->_impl_.command_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GGHomepageCommandPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gg_5fpackets_2eproto_getter, &descriptor_table_gg_5fpackets_2eproto_once,
      file_level_metadata_gg_5fpackets_2eproto[38]);
}

// ===================================================================

class GGPullOfflineMessagesPacket::_Internal {
 public:
};

GGPullOfflineMessagesPacket::GGPullOfflineMessagesPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GGPullOfflineMessagesPacket)
}
GGPullOfflineMessagesPacket::GGPullOfflineMessagesPacket(const GGPullOfflineMessagesPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GGPullOfflineMessagesPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.pid_ = from._impl_.pid_;
  // @@protoc_insertion_point(copy_constructor:network.GGPullOfflineMessagesPacket)
}

inline void GGPullOfflineMessagesPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GGPullOfflineMessagesPacket::~GGPullOfflineMessagesPacket() {
  // @@protoc_insertion_point(destructor:network.GGPullOfflineMessagesPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GGPullOfflineMessagesPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GGPullOfflineMessagesPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GGPullOfflineMessagesPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GGPullOfflineMessagesPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GGPullOfflineMessagesPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GGPullOfflineMessagesPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GGPullOfflineMessagesPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GGPullOfflineMessagesPacket)
  return target;
}

size_t GGPullOfflineMessagesPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GGPullOfflineMessagesPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GGPullOfflineMessagesPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GGPullOfflineMessagesPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GGPullOfflineMessagesPacket::GetClassData() const { return &_class_data_; }


void GGPullOfflineMessagesPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GGPullOfflineMessagesPacket*>(&to_msg);
  auto& from = static_cast<const GGPullOfflineMessagesPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GGPullOfflineMessagesPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_pid() != 0) {
    _this->_internal_set_pid(from._internal_pid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GGPullOfflineMessagesPacket::CopyFrom(const GGPullOfflineMessagesPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GGPullOfflineMessagesPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GGPullOfflineMessagesPacket::IsInitialized() const {
  return true;
}

void GGPullOfflineMessagesPacket::InternalSwap(GGPullOfflineMessagesPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.pid_, other->_impl_.pid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GGPullOfflineMessagesPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gg_5fpackets_2eproto_getter, &descriptor_table_gg_5fpackets_2eproto_once,
      file_level_metadata_gg_5fpackets_2eproto[39]);
}

// ===================================================================

class GGDmgRankingUpdatePacket_Entry::_Internal {
 public:
};

GGDmgRankingUpdatePacket_Entry::GGDmgRankingUpdatePacket_Entry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GGDmgRankingUpdatePacket.Entry)
}
GGDmgRankingUpdatePacket_Entry::GGDmgRankingUpdatePacket_Entry(const GGDmgRankingUpdatePacket_Entry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GGDmgRankingUpdatePacket_Entry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.dmg_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.dmg_ = from._impl_.dmg_;
  // @@protoc_insertion_point(copy_constructor:network.GGDmgRankingUpdatePacket.Entry)
}

inline void GGDmgRankingUpdatePacket_Entry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.dmg_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GGDmgRankingUpdatePacket_Entry::~GGDmgRankingUpdatePacket_Entry() {
  // @@protoc_insertion_point(destructor:network.GGDmgRankingUpdatePacket.Entry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GGDmgRankingUpdatePacket_Entry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void GGDmgRankingUpdatePacket_Entry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GGDmgRankingUpdatePacket_Entry::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GGDmgRankingUpdatePacket.Entry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.dmg_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GGDmgRankingUpdatePacket_Entry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 dmg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.dmg_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GGDmgRankingUpdatePacket_Entry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GGDmgRankingUpdatePacket.Entry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes name = 1;
  if (!this->_internal_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_name(), target);
  }

  // int32 dmg = 2;
  if (this->_internal_dmg() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_dmg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GGDmgRankingUpdatePacket.Entry)
  return target;
}

size_t GGDmgRankingUpdatePacket_Entry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GGDmgRankingUpdatePacket.Entry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // int32 dmg = 2;
  if (this->_internal_dmg() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_dmg());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GGDmgRankingUpdatePacket_Entry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GGDmgRankingUpdatePacket_Entry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GGDmgRankingUpdatePacket_Entry::GetClassData() const { return &_class_data_; }


void GGDmgRankingUpdatePacket_Entry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GGDmgRankingUpdatePacket_Entry*>(&to_msg);
  auto& from = static_cast<const GGDmgRankingUpdatePacket_Entry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GGDmgRankingUpdatePacket.Entry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_dmg() != 0) {
    _this->_internal_set_dmg(from._internal_dmg());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GGDmgRankingUpdatePacket_Entry::CopyFrom(const GGDmgRankingUpdatePacket_Entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GGDmgRankingUpdatePacket.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GGDmgRankingUpdatePacket_Entry::IsInitialized() const {
  return true;
}

void GGDmgRankingUpdatePacket_Entry::InternalSwap(GGDmgRankingUpdatePacket_Entry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.dmg_, other->_impl_.dmg_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GGDmgRankingUpdatePacket_Entry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gg_5fpackets_2eproto_getter, &descriptor_table_gg_5fpackets_2eproto_once,
      file_level_metadata_gg_5fpackets_2eproto[40]);
}

// ===================================================================

class GGDmgRankingUpdatePacket::_Internal {
 public:
  static const ::network::GGDmgRankingUpdatePacket_Entry& data(const GGDmgRankingUpdatePacket* msg);
};

const ::network::GGDmgRankingUpdatePacket_Entry&
GGDmgRankingUpdatePacket::_Internal::data(const GGDmgRankingUpdatePacket* msg) {
  return *msg->_impl_.data_;
}
GGDmgRankingUpdatePacket::GGDmgRankingUpdatePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GGDmgRankingUpdatePacket)
}
GGDmgRankingUpdatePacket::GGDmgRankingUpdatePacket(const GGDmgRankingUpdatePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GGDmgRankingUpdatePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){nullptr}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data()) {
    _this->_impl_.data_ = new ::network::GGDmgRankingUpdatePacket_Entry(*from._impl_.data_);
  }
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:network.GGDmgRankingUpdatePacket)
}

inline void GGDmgRankingUpdatePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){nullptr}
    , decltype(_impl_.type_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GGDmgRankingUpdatePacket::~GGDmgRankingUpdatePacket() {
  // @@protoc_insertion_point(destructor:network.GGDmgRankingUpdatePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GGDmgRankingUpdatePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.data_;
}

void GGDmgRankingUpdatePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GGDmgRankingUpdatePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GGDmgRankingUpdatePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.data_ != nullptr) {
    delete _impl_.data_;
  }
  _impl_.data_ = nullptr;
  _impl_.type_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GGDmgRankingUpdatePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .network.GGDmgRankingUpdatePacket.Entry data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GGDmgRankingUpdatePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GGDmgRankingUpdatePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // .network.GGDmgRankingUpdatePacket.Entry data = 2;
  if (this->_internal_has_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::data(this),
        _Internal::data(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GGDmgRankingUpdatePacket)
  return target;
}

size_t GGDmgRankingUpdatePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GGDmgRankingUpdatePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .network.GGDmgRankingUpdatePacket.Entry data = 2;
  if (this->_internal_has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.data_);
  }

  // uint32 type = 1;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GGDmgRankingUpdatePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GGDmgRankingUpdatePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GGDmgRankingUpdatePacket::GetClassData() const { return &_class_data_; }


void GGDmgRankingUpdatePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GGDmgRankingUpdatePacket*>(&to_msg);
  auto& from = static_cast<const GGDmgRankingUpdatePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GGDmgRankingUpdatePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_data()) {
    _this->_internal_mutable_data()->::network::GGDmgRankingUpdatePacket_Entry::MergeFrom(
        from._internal_data());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GGDmgRankingUpdatePacket::CopyFrom(const GGDmgRankingUpdatePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GGDmgRankingUpdatePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GGDmgRankingUpdatePacket::IsInitialized() const {
  return true;
}

void GGDmgRankingUpdatePacket::InternalSwap(GGDmgRankingUpdatePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GGDmgRankingUpdatePacket, _impl_.type_)
      + sizeof(GGDmgRankingUpdatePacket::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(GGDmgRankingUpdatePacket, _impl_.data_)>(
          reinterpret_cast<char*>(&_impl_.data_),
          reinterpret_cast<char*>(&other->_impl_.data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GGDmgRankingUpdatePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gg_5fpackets_2eproto_getter, &descriptor_table_gg_5fpackets_2eproto_once,
      file_level_metadata_gg_5fpackets_2eproto[41]);
}

// ===================================================================

class GGLocaleUpdateLastUsagePacket::_Internal {
 public:
};

GGLocaleUpdateLastUsagePacket::GGLocaleUpdateLastUsagePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GGLocaleUpdateLastUsagePacket)
}
GGLocaleUpdateLastUsagePacket::GGLocaleUpdateLastUsagePacket(const GGLocaleUpdateLastUsagePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GGLocaleUpdateLastUsagePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.lang_base_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.lang_base_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lang_base_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_lang_base().empty()) {
    _this->_impl_.lang_base_.Set(from._internal_lang_base(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:network.GGLocaleUpdateLastUsagePacket)
}

inline void GGLocaleUpdateLastUsagePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.lang_base_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.lang_base_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lang_base_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GGLocaleUpdateLastUsagePacket::~GGLocaleUpdateLastUsagePacket() {
  // @@protoc_insertion_point(destructor:network.GGLocaleUpdateLastUsagePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GGLocaleUpdateLastUsagePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.lang_base_.Destroy();
}

void GGLocaleUpdateLastUsagePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GGLocaleUpdateLastUsagePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GGLocaleUpdateLastUsagePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.lang_base_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GGLocaleUpdateLastUsagePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes lang_base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_lang_base();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GGLocaleUpdateLastUsagePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GGLocaleUpdateLastUsagePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes lang_base = 1;
  if (!this->_internal_lang_base().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_lang_base(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GGLocaleUpdateLastUsagePacket)
  return target;
}

size_t GGLocaleUpdateLastUsagePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GGLocaleUpdateLastUsagePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes lang_base = 1;
  if (!this->_internal_lang_base().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_lang_base());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GGLocaleUpdateLastUsagePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GGLocaleUpdateLastUsagePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GGLocaleUpdateLastUsagePacket::GetClassData() const { return &_class_data_; }


void GGLocaleUpdateLastUsagePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GGLocaleUpdateLastUsagePacket*>(&to_msg);
  auto& from = static_cast<const GGLocaleUpdateLastUsagePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GGLocaleUpdateLastUsagePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_lang_base().empty()) {
    _this->_internal_set_lang_base(from._internal_lang_base());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GGLocaleUpdateLastUsagePacket::CopyFrom(const GGLocaleUpdateLastUsagePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GGLocaleUpdateLastUsagePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GGLocaleUpdateLastUsagePacket::IsInitialized() const {
  return true;
}

void GGLocaleUpdateLastUsagePacket::InternalSwap(GGLocaleUpdateLastUsagePacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.lang_base_, lhs_arena,
      &other->_impl_.lang_base_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GGLocaleUpdateLastUsagePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gg_5fpackets_2eproto_getter, &descriptor_table_gg_5fpackets_2eproto_once,
      file_level_metadata_gg_5fpackets_2eproto[42]);
}

// ===================================================================

class GGReloadCommandPacket::_Internal {
 public:
};

GGReloadCommandPacket::GGReloadCommandPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GGReloadCommandPacket)
}
GGReloadCommandPacket::GGReloadCommandPacket(const GGReloadCommandPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GGReloadCommandPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.argument_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.argument_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.argument_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_argument().empty()) {
    _this->_impl_.argument_.Set(from._internal_argument(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:network.GGReloadCommandPacket)
}

inline void GGReloadCommandPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.argument_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.argument_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.argument_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GGReloadCommandPacket::~GGReloadCommandPacket() {
  // @@protoc_insertion_point(destructor:network.GGReloadCommandPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GGReloadCommandPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.argument_.Destroy();
}

void GGReloadCommandPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GGReloadCommandPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GGReloadCommandPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.argument_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GGReloadCommandPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes argument = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_argument();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GGReloadCommandPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GGReloadCommandPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes argument = 1;
  if (!this->_internal_argument().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_argument(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GGReloadCommandPacket)
  return target;
}

size_t GGReloadCommandPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GGReloadCommandPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes argument = 1;
  if (!this->_internal_argument().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_argument());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GGReloadCommandPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GGReloadCommandPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GGReloadCommandPacket::GetClassData() const { return &_class_data_; }


void GGReloadCommandPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GGReloadCommandPacket*>(&to_msg);
  auto& from = static_cast<const GGReloadCommandPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GGReloadCommandPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_argument().empty()) {
    _this->_internal_set_argument(from._internal_argument());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GGReloadCommandPacket::CopyFrom(const GGReloadCommandPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GGReloadCommandPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GGReloadCommandPacket::IsInitialized() const {
  return true;
}

void GGReloadCommandPacket::InternalSwap(GGReloadCommandPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.argument_, lhs_arena,
      &other->_impl_.argument_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GGReloadCommandPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gg_5fpackets_2eproto_getter, &descriptor_table_gg_5fpackets_2eproto_once,
      file_level_metadata_gg_5fpackets_2eproto[43]);
}

// ===================================================================

class GGAuctionInsertItemPacket::_Internal {
 public:
  static const ::network::TShopItemTable& item(const GGAuctionInsertItemPacket* msg);
};

const ::network::TShopItemTable&
GGAuctionInsertItemPacket::_Internal::item(const GGAuctionInsertItemPacket* msg) {
  return *msg->_impl_.item_;
}
void GGAuctionInsertItemPacket::clear_item() {
  if (GetArenaForAllocation() == nullptr && _impl_.item_ != nullptr) {
    delete _impl_.item_;
  }
  _impl_.item_ = nullptr;
}
GGAuctionInsertItemPacket::GGAuctionInsertItemPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GGAuctionInsertItemPacket)
}
GGAuctionInsertItemPacket::GGAuctionInsertItemPacket(const GGAuctionInsertItemPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GGAuctionInsertItemPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.item_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_item()) {
    _this->_impl_.item_ = new ::network::TShopItemTable(*from._impl_.item_);
  }
  // @@protoc_insertion_point(copy_constructor:network.GGAuctionInsertItemPacket)
}

inline void GGAuctionInsertItemPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.item_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GGAuctionInsertItemPacket::~GGAuctionInsertItemPacket() {
  // @@protoc_insertion_point(destructor:network.GGAuctionInsertItemPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GGAuctionInsertItemPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.item_;
}

void GGAuctionInsertItemPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GGAuctionInsertItemPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GGAuctionInsertItemPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.item_ != nullptr) {
    delete _impl_.item_;
  }
  _impl_.item_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GGAuctionInsertItemPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .network.TShopItemTable item = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_item(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GGAuctionInsertItemPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GGAuctionInsertItemPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .network.TShopItemTable item = 1;
  if (this->_internal_has_item()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::item(this),
        _Internal::item(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GGAuctionInsertItemPacket)
  return target;
}

size_t GGAuctionInsertItemPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GGAuctionInsertItemPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .network.TShopItemTable item = 1;
  if (this->_internal_has_item()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.item_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GGAuctionInsertItemPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GGAuctionInsertItemPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GGAuctionInsertItemPacket::GetClassData() const { return &_class_data_; }


void GGAuctionInsertItemPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GGAuctionInsertItemPacket*>(&to_msg);
  auto& from = static_cast<const GGAuctionInsertItemPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GGAuctionInsertItemPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_item()) {
    _this->_internal_mutable_item()->::network::TShopItemTable::MergeFrom(
        from._internal_item());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GGAuctionInsertItemPacket::CopyFrom(const GGAuctionInsertItemPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GGAuctionInsertItemPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GGAuctionInsertItemPacket::IsInitialized() const {
  return true;
}

void GGAuctionInsertItemPacket::InternalSwap(GGAuctionInsertItemPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.item_, other->_impl_.item_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GGAuctionInsertItemPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gg_5fpackets_2eproto_getter, &descriptor_table_gg_5fpackets_2eproto_once,
      file_level_metadata_gg_5fpackets_2eproto[44]);
}

// ===================================================================

class GGAuctionTakeItemPacket::_Internal {
 public:
};

GGAuctionTakeItemPacket::GGAuctionTakeItemPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GGAuctionTakeItemPacket)
}
GGAuctionTakeItemPacket::GGAuctionTakeItemPacket(const GGAuctionTakeItemPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GGAuctionTakeItemPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.owner_id_){}
    , decltype(_impl_.item_id_){}
    , decltype(_impl_.inventory_pos_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.owner_id_, &from._impl_.owner_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.inventory_pos_) -
    reinterpret_cast<char*>(&_impl_.owner_id_)) + sizeof(_impl_.inventory_pos_));
  // @@protoc_insertion_point(copy_constructor:network.GGAuctionTakeItemPacket)
}

inline void GGAuctionTakeItemPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.owner_id_){0u}
    , decltype(_impl_.item_id_){0u}
    , decltype(_impl_.inventory_pos_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GGAuctionTakeItemPacket::~GGAuctionTakeItemPacket() {
  // @@protoc_insertion_point(destructor:network.GGAuctionTakeItemPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GGAuctionTakeItemPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GGAuctionTakeItemPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GGAuctionTakeItemPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GGAuctionTakeItemPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.owner_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.inventory_pos_) -
      reinterpret_cast<char*>(&_impl_.owner_id_)) + sizeof(_impl_.inventory_pos_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GGAuctionTakeItemPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 owner_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.owner_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 item_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 inventory_pos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.inventory_pos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GGAuctionTakeItemPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GGAuctionTakeItemPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 owner_id = 1;
  if (this->_internal_owner_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_owner_id(), target);
  }

  // uint32 item_id = 2;
  if (this->_internal_item_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_item_id(), target);
  }

  // uint32 inventory_pos = 3;
  if (this->_internal_inventory_pos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_inventory_pos(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GGAuctionTakeItemPacket)
  return target;
}

size_t GGAuctionTakeItemPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GGAuctionTakeItemPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 owner_id = 1;
  if (this->_internal_owner_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_owner_id());
  }

  // uint32 item_id = 2;
  if (this->_internal_item_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_item_id());
  }

  // uint32 inventory_pos = 3;
  if (this->_internal_inventory_pos() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_inventory_pos());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GGAuctionTakeItemPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GGAuctionTakeItemPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GGAuctionTakeItemPacket::GetClassData() const { return &_class_data_; }


void GGAuctionTakeItemPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GGAuctionTakeItemPacket*>(&to_msg);
  auto& from = static_cast<const GGAuctionTakeItemPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GGAuctionTakeItemPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_owner_id() != 0) {
    _this->_internal_set_owner_id(from._internal_owner_id());
  }
  if (from._internal_item_id() != 0) {
    _this->_internal_set_item_id(from._internal_item_id());
  }
  if (from._internal_inventory_pos() != 0) {
    _this->_internal_set_inventory_pos(from._internal_inventory_pos());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GGAuctionTakeItemPacket::CopyFrom(const GGAuctionTakeItemPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GGAuctionTakeItemPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GGAuctionTakeItemPacket::IsInitialized() const {
  return true;
}

void GGAuctionTakeItemPacket::InternalSwap(GGAuctionTakeItemPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GGAuctionTakeItemPacket, _impl_.inventory_pos_)
      + sizeof(GGAuctionTakeItemPacket::_impl_.inventory_pos_)
      - PROTOBUF_FIELD_OFFSET(GGAuctionTakeItemPacket, _impl_.owner_id_)>(
          reinterpret_cast<char*>(&_impl_.owner_id_),
          reinterpret_cast<char*>(&other->_impl_.owner_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GGAuctionTakeItemPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gg_5fpackets_2eproto_getter, &descriptor_table_gg_5fpackets_2eproto_once,
      file_level_metadata_gg_5fpackets_2eproto[45]);
}

// ===================================================================

class GGAuctionBuyItemPacket::_Internal {
 public:
};

GGAuctionBuyItemPacket::GGAuctionBuyItemPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GGAuctionBuyItemPacket)
}
GGAuctionBuyItemPacket::GGAuctionBuyItemPacket(const GGAuctionBuyItemPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GGAuctionBuyItemPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.player_name_){}
    , decltype(_impl_.pid_){}
    , decltype(_impl_.item_id_){}
    , decltype(_impl_.paid_gold_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.player_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.player_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_player_name().empty()) {
    _this->_impl_.player_name_.Set(from._internal_player_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.pid_, &from._impl_.pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.paid_gold_) -
    reinterpret_cast<char*>(&_impl_.pid_)) + sizeof(_impl_.paid_gold_));
  // @@protoc_insertion_point(copy_constructor:network.GGAuctionBuyItemPacket)
}

inline void GGAuctionBuyItemPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.player_name_){}
    , decltype(_impl_.pid_){0u}
    , decltype(_impl_.item_id_){0u}
    , decltype(_impl_.paid_gold_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.player_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.player_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GGAuctionBuyItemPacket::~GGAuctionBuyItemPacket() {
  // @@protoc_insertion_point(destructor:network.GGAuctionBuyItemPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GGAuctionBuyItemPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.player_name_.Destroy();
}

void GGAuctionBuyItemPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GGAuctionBuyItemPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GGAuctionBuyItemPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.player_name_.ClearToEmpty();
  ::memset(&_impl_.pid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.paid_gold_) -
      reinterpret_cast<char*>(&_impl_.pid_)) + sizeof(_impl_.paid_gold_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GGAuctionBuyItemPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string player_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_player_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "network.GGAuctionBuyItemPacket.player_name"));
        } else
          goto handle_unusual;
        continue;
      // uint32 item_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 paid_gold = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.paid_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GGAuctionBuyItemPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GGAuctionBuyItemPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pid(), target);
  }

  // string player_name = 2;
  if (!this->_internal_player_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_player_name().data(), static_cast<int>(this->_internal_player_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "network.GGAuctionBuyItemPacket.player_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_player_name(), target);
  }

  // uint32 item_id = 3;
  if (this->_internal_item_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_item_id(), target);
  }

  // uint64 paid_gold = 4;
  if (this->_internal_paid_gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_paid_gold(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GGAuctionBuyItemPacket)
  return target;
}

size_t GGAuctionBuyItemPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GGAuctionBuyItemPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string player_name = 2;
  if (!this->_internal_player_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_player_name());
  }

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid());
  }

  // uint32 item_id = 3;
  if (this->_internal_item_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_item_id());
  }

  // uint64 paid_gold = 4;
  if (this->_internal_paid_gold() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_paid_gold());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GGAuctionBuyItemPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GGAuctionBuyItemPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GGAuctionBuyItemPacket::GetClassData() const { return &_class_data_; }


void GGAuctionBuyItemPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GGAuctionBuyItemPacket*>(&to_msg);
  auto& from = static_cast<const GGAuctionBuyItemPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GGAuctionBuyItemPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_player_name().empty()) {
    _this->_internal_set_player_name(from._internal_player_name());
  }
  if (from._internal_pid() != 0) {
    _this->_internal_set_pid(from._internal_pid());
  }
  if (from._internal_item_id() != 0) {
    _this->_internal_set_item_id(from._internal_item_id());
  }
  if (from._internal_paid_gold() != 0) {
    _this->_internal_set_paid_gold(from._internal_paid_gold());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GGAuctionBuyItemPacket::CopyFrom(const GGAuctionBuyItemPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GGAuctionBuyItemPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GGAuctionBuyItemPacket::IsInitialized() const {
  return true;
}

void GGAuctionBuyItemPacket::InternalSwap(GGAuctionBuyItemPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.player_name_, lhs_arena,
      &other->_impl_.player_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GGAuctionBuyItemPacket, _impl_.paid_gold_)
      + sizeof(GGAuctionBuyItemPacket::_impl_.paid_gold_)
      - PROTOBUF_FIELD_OFFSET(GGAuctionBuyItemPacket, _impl_.pid_)>(
          reinterpret_cast<char*>(&_impl_.pid_),
          reinterpret_cast<char*>(&other->_impl_.pid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GGAuctionBuyItemPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gg_5fpackets_2eproto_getter, &descriptor_table_gg_5fpackets_2eproto_once,
      file_level_metadata_gg_5fpackets_2eproto[46]);
}

// ===================================================================

class GGAuctionTakeGoldPacket::_Internal {
 public:
};

GGAuctionTakeGoldPacket::GGAuctionTakeGoldPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GGAuctionTakeGoldPacket)
}
GGAuctionTakeGoldPacket::GGAuctionTakeGoldPacket(const GGAuctionTakeGoldPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GGAuctionTakeGoldPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.gold_){}
    , decltype(_impl_.owner_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.gold_, &from._impl_.gold_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.owner_id_) -
    reinterpret_cast<char*>(&_impl_.gold_)) + sizeof(_impl_.owner_id_));
  // @@protoc_insertion_point(copy_constructor:network.GGAuctionTakeGoldPacket)
}

inline void GGAuctionTakeGoldPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.gold_){uint64_t{0u}}
    , decltype(_impl_.owner_id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GGAuctionTakeGoldPacket::~GGAuctionTakeGoldPacket() {
  // @@protoc_insertion_point(destructor:network.GGAuctionTakeGoldPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GGAuctionTakeGoldPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GGAuctionTakeGoldPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GGAuctionTakeGoldPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GGAuctionTakeGoldPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.gold_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.owner_id_) -
      reinterpret_cast<char*>(&_impl_.gold_)) + sizeof(_impl_.owner_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GGAuctionTakeGoldPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 owner_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.owner_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 gold = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GGAuctionTakeGoldPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GGAuctionTakeGoldPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 owner_id = 1;
  if (this->_internal_owner_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_owner_id(), target);
  }

  // uint64 gold = 2;
  if (this->_internal_gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_gold(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GGAuctionTakeGoldPacket)
  return target;
}

size_t GGAuctionTakeGoldPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GGAuctionTakeGoldPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 gold = 2;
  if (this->_internal_gold() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_gold());
  }

  // uint32 owner_id = 1;
  if (this->_internal_owner_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_owner_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GGAuctionTakeGoldPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GGAuctionTakeGoldPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GGAuctionTakeGoldPacket::GetClassData() const { return &_class_data_; }


void GGAuctionTakeGoldPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GGAuctionTakeGoldPacket*>(&to_msg);
  auto& from = static_cast<const GGAuctionTakeGoldPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GGAuctionTakeGoldPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_gold() != 0) {
    _this->_internal_set_gold(from._internal_gold());
  }
  if (from._internal_owner_id() != 0) {
    _this->_internal_set_owner_id(from._internal_owner_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GGAuctionTakeGoldPacket::CopyFrom(const GGAuctionTakeGoldPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GGAuctionTakeGoldPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GGAuctionTakeGoldPacket::IsInitialized() const {
  return true;
}

void GGAuctionTakeGoldPacket::InternalSwap(GGAuctionTakeGoldPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GGAuctionTakeGoldPacket, _impl_.owner_id_)
      + sizeof(GGAuctionTakeGoldPacket::_impl_.owner_id_)
      - PROTOBUF_FIELD_OFFSET(GGAuctionTakeGoldPacket, _impl_.gold_)>(
          reinterpret_cast<char*>(&_impl_.gold_),
          reinterpret_cast<char*>(&other->_impl_.gold_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GGAuctionTakeGoldPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gg_5fpackets_2eproto_getter, &descriptor_table_gg_5fpackets_2eproto_once,
      file_level_metadata_gg_5fpackets_2eproto[47]);
}

// ===================================================================

class GGAuctionSearchItemsPacket::_Internal {
 public:
  static const ::network::TDataAuctionSearch& options(const GGAuctionSearchItemsPacket* msg);
};

const ::network::TDataAuctionSearch&
GGAuctionSearchItemsPacket::_Internal::options(const GGAuctionSearchItemsPacket* msg) {
  return *msg->_impl_.options_;
}
void GGAuctionSearchItemsPacket::clear_options() {
  if (GetArenaForAllocation() == nullptr && _impl_.options_ != nullptr) {
    delete _impl_.options_;
  }
  _impl_.options_ = nullptr;
}
GGAuctionSearchItemsPacket::GGAuctionSearchItemsPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GGAuctionSearchItemsPacket)
}
GGAuctionSearchItemsPacket::GGAuctionSearchItemsPacket(const GGAuctionSearchItemsPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GGAuctionSearchItemsPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.options_){nullptr}
    , decltype(_impl_.pid_){}
    , decltype(_impl_.page_){}
    , decltype(_impl_.language_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_options()) {
    _this->_impl_.options_ = new ::network::TDataAuctionSearch(*from._impl_.options_);
  }
  ::memcpy(&_impl_.pid_, &from._impl_.pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.language_) -
    reinterpret_cast<char*>(&_impl_.pid_)) + sizeof(_impl_.language_));
  // @@protoc_insertion_point(copy_constructor:network.GGAuctionSearchItemsPacket)
}

inline void GGAuctionSearchItemsPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.options_){nullptr}
    , decltype(_impl_.pid_){0u}
    , decltype(_impl_.page_){0u}
    , decltype(_impl_.language_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GGAuctionSearchItemsPacket::~GGAuctionSearchItemsPacket() {
  // @@protoc_insertion_point(destructor:network.GGAuctionSearchItemsPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GGAuctionSearchItemsPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.options_;
}

void GGAuctionSearchItemsPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GGAuctionSearchItemsPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GGAuctionSearchItemsPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.options_ != nullptr) {
    delete _impl_.options_;
  }
  _impl_.options_ = nullptr;
  ::memset(&_impl_.pid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.language_) -
      reinterpret_cast<char*>(&_impl_.pid_)) + sizeof(_impl_.language_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GGAuctionSearchItemsPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 page = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 language = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.language_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .network.TDataAuctionSearch options = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_options(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GGAuctionSearchItemsPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GGAuctionSearchItemsPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pid(), target);
  }

  // uint32 page = 2;
  if (this->_internal_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_page(), target);
  }

  // uint32 language = 3;
  if (this->_internal_language() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_language(), target);
  }

  // .network.TDataAuctionSearch options = 4;
  if (this->_internal_has_options()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::options(this),
        _Internal::options(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GGAuctionSearchItemsPacket)
  return target;
}

size_t GGAuctionSearchItemsPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GGAuctionSearchItemsPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .network.TDataAuctionSearch options = 4;
  if (this->_internal_has_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.options_);
  }

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid());
  }

  // uint32 page = 2;
  if (this->_internal_page() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_page());
  }

  // uint32 language = 3;
  if (this->_internal_language() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_language());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GGAuctionSearchItemsPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GGAuctionSearchItemsPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GGAuctionSearchItemsPacket::GetClassData() const { return &_class_data_; }


void GGAuctionSearchItemsPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GGAuctionSearchItemsPacket*>(&to_msg);
  auto& from = static_cast<const GGAuctionSearchItemsPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GGAuctionSearchItemsPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_options()) {
    _this->_internal_mutable_options()->::network::TDataAuctionSearch::MergeFrom(
        from._internal_options());
  }
  if (from._internal_pid() != 0) {
    _this->_internal_set_pid(from._internal_pid());
  }
  if (from._internal_page() != 0) {
    _this->_internal_set_page(from._internal_page());
  }
  if (from._internal_language() != 0) {
    _this->_internal_set_language(from._internal_language());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GGAuctionSearchItemsPacket::CopyFrom(const GGAuctionSearchItemsPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GGAuctionSearchItemsPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GGAuctionSearchItemsPacket::IsInitialized() const {
  return true;
}

void GGAuctionSearchItemsPacket::InternalSwap(GGAuctionSearchItemsPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GGAuctionSearchItemsPacket, _impl_.language_)
      + sizeof(GGAuctionSearchItemsPacket::_impl_.language_)
      - PROTOBUF_FIELD_OFFSET(GGAuctionSearchItemsPacket, _impl_.options_)>(
          reinterpret_cast<char*>(&_impl_.options_),
          reinterpret_cast<char*>(&other->_impl_.options_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GGAuctionSearchItemsPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gg_5fpackets_2eproto_getter, &descriptor_table_gg_5fpackets_2eproto_once,
      file_level_metadata_gg_5fpackets_2eproto[48]);
}

// ===================================================================

class GGAuctionExtendedSearchItemsPacket::_Internal {
 public:
  static const ::network::TExtendedDataAuctionSearch& options(const GGAuctionExtendedSearchItemsPacket* msg);
};

const ::network::TExtendedDataAuctionSearch&
GGAuctionExtendedSearchItemsPacket::_Internal::options(const GGAuctionExtendedSearchItemsPacket* msg) {
  return *msg->_impl_.options_;
}
void GGAuctionExtendedSearchItemsPacket::clear_options() {
  if (GetArenaForAllocation() == nullptr && _impl_.options_ != nullptr) {
    delete _impl_.options_;
  }
  _impl_.options_ = nullptr;
}
GGAuctionExtendedSearchItemsPacket::GGAuctionExtendedSearchItemsPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GGAuctionExtendedSearchItemsPacket)
}
GGAuctionExtendedSearchItemsPacket::GGAuctionExtendedSearchItemsPacket(const GGAuctionExtendedSearchItemsPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GGAuctionExtendedSearchItemsPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.options_){nullptr}
    , decltype(_impl_.pid_){}
    , decltype(_impl_.page_){}
    , decltype(_impl_.language_){}
    , decltype(_impl_.map_index_){}
    , decltype(_impl_.channel_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_options()) {
    _this->_impl_.options_ = new ::network::TExtendedDataAuctionSearch(*from._impl_.options_);
  }
  ::memcpy(&_impl_.pid_, &from._impl_.pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.channel_) -
    reinterpret_cast<char*>(&_impl_.pid_)) + sizeof(_impl_.channel_));
  // @@protoc_insertion_point(copy_constructor:network.GGAuctionExtendedSearchItemsPacket)
}

inline void GGAuctionExtendedSearchItemsPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.options_){nullptr}
    , decltype(_impl_.pid_){0u}
    , decltype(_impl_.page_){0u}
    , decltype(_impl_.language_){0u}
    , decltype(_impl_.map_index_){0u}
    , decltype(_impl_.channel_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GGAuctionExtendedSearchItemsPacket::~GGAuctionExtendedSearchItemsPacket() {
  // @@protoc_insertion_point(destructor:network.GGAuctionExtendedSearchItemsPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GGAuctionExtendedSearchItemsPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.options_;
}

void GGAuctionExtendedSearchItemsPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GGAuctionExtendedSearchItemsPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GGAuctionExtendedSearchItemsPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.options_ != nullptr) {
    delete _impl_.options_;
  }
  _impl_.options_ = nullptr;
  ::memset(&_impl_.pid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.channel_) -
      reinterpret_cast<char*>(&_impl_.pid_)) + sizeof(_impl_.channel_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GGAuctionExtendedSearchItemsPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 page = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 language = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.language_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .network.TExtendedDataAuctionSearch options = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_options(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 map_index = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.map_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 channel = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GGAuctionExtendedSearchItemsPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GGAuctionExtendedSearchItemsPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pid(), target);
  }

  // uint32 page = 2;
  if (this->_internal_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_page(), target);
  }

  // uint32 language = 3;
  if (this->_internal_language() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_language(), target);
  }

  // .network.TExtendedDataAuctionSearch options = 4;
  if (this->_internal_has_options()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::options(this),
        _Internal::options(this).GetCachedSize(), target, stream);
  }

  // uint32 map_index = 5;
  if (this->_internal_map_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_map_index(), target);
  }

  // uint32 channel = 6;
  if (this->_internal_channel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_channel(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GGAuctionExtendedSearchItemsPacket)
  return target;
}

size_t GGAuctionExtendedSearchItemsPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GGAuctionExtendedSearchItemsPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .network.TExtendedDataAuctionSearch options = 4;
  if (this->_internal_has_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.options_);
  }

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid());
  }

  // uint32 page = 2;
  if (this->_internal_page() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_page());
  }

  // uint32 language = 3;
  if (this->_internal_language() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_language());
  }

  // uint32 map_index = 5;
  if (this->_internal_map_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_map_index());
  }

  // uint32 channel = 6;
  if (this->_internal_channel() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GGAuctionExtendedSearchItemsPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GGAuctionExtendedSearchItemsPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GGAuctionExtendedSearchItemsPacket::GetClassData() const { return &_class_data_; }


void GGAuctionExtendedSearchItemsPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GGAuctionExtendedSearchItemsPacket*>(&to_msg);
  auto& from = static_cast<const GGAuctionExtendedSearchItemsPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GGAuctionExtendedSearchItemsPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_options()) {
    _this->_internal_mutable_options()->::network::TExtendedDataAuctionSearch::MergeFrom(
        from._internal_options());
  }
  if (from._internal_pid() != 0) {
    _this->_internal_set_pid(from._internal_pid());
  }
  if (from._internal_page() != 0) {
    _this->_internal_set_page(from._internal_page());
  }
  if (from._internal_language() != 0) {
    _this->_internal_set_language(from._internal_language());
  }
  if (from._internal_map_index() != 0) {
    _this->_internal_set_map_index(from._internal_map_index());
  }
  if (from._internal_channel() != 0) {
    _this->_internal_set_channel(from._internal_channel());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GGAuctionExtendedSearchItemsPacket::CopyFrom(const GGAuctionExtendedSearchItemsPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GGAuctionExtendedSearchItemsPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GGAuctionExtendedSearchItemsPacket::IsInitialized() const {
  return true;
}

void GGAuctionExtendedSearchItemsPacket::InternalSwap(GGAuctionExtendedSearchItemsPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GGAuctionExtendedSearchItemsPacket, _impl_.channel_)
      + sizeof(GGAuctionExtendedSearchItemsPacket::_impl_.channel_)
      - PROTOBUF_FIELD_OFFSET(GGAuctionExtendedSearchItemsPacket, _impl_.options_)>(
          reinterpret_cast<char*>(&_impl_.options_),
          reinterpret_cast<char*>(&other->_impl_.options_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GGAuctionExtendedSearchItemsPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gg_5fpackets_2eproto_getter, &descriptor_table_gg_5fpackets_2eproto_once,
      file_level_metadata_gg_5fpackets_2eproto[49]);
}

// ===================================================================

class GGAuctionMarkShopPacket::_Internal {
 public:
};

GGAuctionMarkShopPacket::GGAuctionMarkShopPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GGAuctionMarkShopPacket)
}
GGAuctionMarkShopPacket::GGAuctionMarkShopPacket(const GGAuctionMarkShopPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GGAuctionMarkShopPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pid_){}
    , decltype(_impl_.item_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.pid_, &from._impl_.pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.item_id_) -
    reinterpret_cast<char*>(&_impl_.pid_)) + sizeof(_impl_.item_id_));
  // @@protoc_insertion_point(copy_constructor:network.GGAuctionMarkShopPacket)
}

inline void GGAuctionMarkShopPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pid_){0u}
    , decltype(_impl_.item_id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GGAuctionMarkShopPacket::~GGAuctionMarkShopPacket() {
  // @@protoc_insertion_point(destructor:network.GGAuctionMarkShopPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GGAuctionMarkShopPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GGAuctionMarkShopPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GGAuctionMarkShopPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GGAuctionMarkShopPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.pid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.item_id_) -
      reinterpret_cast<char*>(&_impl_.pid_)) + sizeof(_impl_.item_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GGAuctionMarkShopPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 item_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GGAuctionMarkShopPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GGAuctionMarkShopPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pid(), target);
  }

  // uint32 item_id = 2;
  if (this->_internal_item_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_item_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GGAuctionMarkShopPacket)
  return target;
}

size_t GGAuctionMarkShopPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GGAuctionMarkShopPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid());
  }

  // uint32 item_id = 2;
  if (this->_internal_item_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_item_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GGAuctionMarkShopPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GGAuctionMarkShopPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GGAuctionMarkShopPacket::GetClassData() const { return &_class_data_; }


void GGAuctionMarkShopPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GGAuctionMarkShopPacket*>(&to_msg);
  auto& from = static_cast<const GGAuctionMarkShopPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GGAuctionMarkShopPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_pid() != 0) {
    _this->_internal_set_pid(from._internal_pid());
  }
  if (from._internal_item_id() != 0) {
    _this->_internal_set_item_id(from._internal_item_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GGAuctionMarkShopPacket::CopyFrom(const GGAuctionMarkShopPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GGAuctionMarkShopPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GGAuctionMarkShopPacket::IsInitialized() const {
  return true;
}

void GGAuctionMarkShopPacket::InternalSwap(GGAuctionMarkShopPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GGAuctionMarkShopPacket, _impl_.item_id_)
      + sizeof(GGAuctionMarkShopPacket::_impl_.item_id_)
      - PROTOBUF_FIELD_OFFSET(GGAuctionMarkShopPacket, _impl_.pid_)>(
          reinterpret_cast<char*>(&_impl_.pid_),
          reinterpret_cast<char*>(&other->_impl_.pid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GGAuctionMarkShopPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gg_5fpackets_2eproto_getter, &descriptor_table_gg_5fpackets_2eproto_once,
      file_level_metadata_gg_5fpackets_2eproto[50]);
}

// ===================================================================

class GGAuctionAnswerMarkShopPacket::_Internal {
 public:
};

GGAuctionAnswerMarkShopPacket::GGAuctionAnswerMarkShopPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GGAuctionAnswerMarkShopPacket)
}
GGAuctionAnswerMarkShopPacket::GGAuctionAnswerMarkShopPacket(const GGAuctionAnswerMarkShopPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GGAuctionAnswerMarkShopPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pid_){}
    , decltype(_impl_.owner_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.pid_, &from._impl_.pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.owner_id_) -
    reinterpret_cast<char*>(&_impl_.pid_)) + sizeof(_impl_.owner_id_));
  // @@protoc_insertion_point(copy_constructor:network.GGAuctionAnswerMarkShopPacket)
}

inline void GGAuctionAnswerMarkShopPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pid_){0u}
    , decltype(_impl_.owner_id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GGAuctionAnswerMarkShopPacket::~GGAuctionAnswerMarkShopPacket() {
  // @@protoc_insertion_point(destructor:network.GGAuctionAnswerMarkShopPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GGAuctionAnswerMarkShopPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GGAuctionAnswerMarkShopPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GGAuctionAnswerMarkShopPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GGAuctionAnswerMarkShopPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.pid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.owner_id_) -
      reinterpret_cast<char*>(&_impl_.pid_)) + sizeof(_impl_.owner_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GGAuctionAnswerMarkShopPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 owner_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.owner_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GGAuctionAnswerMarkShopPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GGAuctionAnswerMarkShopPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pid(), target);
  }

  // uint32 owner_id = 2;
  if (this->_internal_owner_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_owner_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GGAuctionAnswerMarkShopPacket)
  return target;
}

size_t GGAuctionAnswerMarkShopPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GGAuctionAnswerMarkShopPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid());
  }

  // uint32 owner_id = 2;
  if (this->_internal_owner_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_owner_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GGAuctionAnswerMarkShopPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GGAuctionAnswerMarkShopPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GGAuctionAnswerMarkShopPacket::GetClassData() const { return &_class_data_; }


void GGAuctionAnswerMarkShopPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GGAuctionAnswerMarkShopPacket*>(&to_msg);
  auto& from = static_cast<const GGAuctionAnswerMarkShopPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GGAuctionAnswerMarkShopPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_pid() != 0) {
    _this->_internal_set_pid(from._internal_pid());
  }
  if (from._internal_owner_id() != 0) {
    _this->_internal_set_owner_id(from._internal_owner_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GGAuctionAnswerMarkShopPacket::CopyFrom(const GGAuctionAnswerMarkShopPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GGAuctionAnswerMarkShopPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GGAuctionAnswerMarkShopPacket::IsInitialized() const {
  return true;
}

void GGAuctionAnswerMarkShopPacket::InternalSwap(GGAuctionAnswerMarkShopPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GGAuctionAnswerMarkShopPacket, _impl_.owner_id_)
      + sizeof(GGAuctionAnswerMarkShopPacket::_impl_.owner_id_)
      - PROTOBUF_FIELD_OFFSET(GGAuctionAnswerMarkShopPacket, _impl_.pid_)>(
          reinterpret_cast<char*>(&_impl_.pid_),
          reinterpret_cast<char*>(&other->_impl_.pid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GGAuctionAnswerMarkShopPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gg_5fpackets_2eproto_getter, &descriptor_table_gg_5fpackets_2eproto_once,
      file_level_metadata_gg_5fpackets_2eproto[51]);
}

// ===================================================================

class GGAuctionShopRequestShowPacket::_Internal {
 public:
};

GGAuctionShopRequestShowPacket::GGAuctionShopRequestShowPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GGAuctionShopRequestShowPacket)
}
GGAuctionShopRequestShowPacket::GGAuctionShopRequestShowPacket(const GGAuctionShopRequestShowPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GGAuctionShopRequestShowPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.pid_ = from._impl_.pid_;
  // @@protoc_insertion_point(copy_constructor:network.GGAuctionShopRequestShowPacket)
}

inline void GGAuctionShopRequestShowPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GGAuctionShopRequestShowPacket::~GGAuctionShopRequestShowPacket() {
  // @@protoc_insertion_point(destructor:network.GGAuctionShopRequestShowPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GGAuctionShopRequestShowPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GGAuctionShopRequestShowPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GGAuctionShopRequestShowPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GGAuctionShopRequestShowPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GGAuctionShopRequestShowPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GGAuctionShopRequestShowPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GGAuctionShopRequestShowPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GGAuctionShopRequestShowPacket)
  return target;
}

size_t GGAuctionShopRequestShowPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GGAuctionShopRequestShowPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GGAuctionShopRequestShowPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GGAuctionShopRequestShowPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GGAuctionShopRequestShowPacket::GetClassData() const { return &_class_data_; }


void GGAuctionShopRequestShowPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GGAuctionShopRequestShowPacket*>(&to_msg);
  auto& from = static_cast<const GGAuctionShopRequestShowPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GGAuctionShopRequestShowPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_pid() != 0) {
    _this->_internal_set_pid(from._internal_pid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GGAuctionShopRequestShowPacket::CopyFrom(const GGAuctionShopRequestShowPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GGAuctionShopRequestShowPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GGAuctionShopRequestShowPacket::IsInitialized() const {
  return true;
}

void GGAuctionShopRequestShowPacket::InternalSwap(GGAuctionShopRequestShowPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.pid_, other->_impl_.pid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GGAuctionShopRequestShowPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gg_5fpackets_2eproto_getter, &descriptor_table_gg_5fpackets_2eproto_once,
      file_level_metadata_gg_5fpackets_2eproto[52]);
}

// ===================================================================

class GGAuctionShopOpenPacket::_Internal {
 public:
};

void GGAuctionShopOpenPacket::clear_items() {
  _impl_.items_.Clear();
}
GGAuctionShopOpenPacket::GGAuctionShopOpenPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GGAuctionShopOpenPacket)
}
GGAuctionShopOpenPacket::GGAuctionShopOpenPacket(const GGAuctionShopOpenPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GGAuctionShopOpenPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , decltype(_impl_.owner_name_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.owner_id_){}
    , decltype(_impl_.style_){}
    , decltype(_impl_.vnum_){}
    , decltype(_impl_.color_red_){}
    , decltype(_impl_.color_green_){}
    , decltype(_impl_.color_blue_){}
    , decltype(_impl_.channel_){}
    , decltype(_impl_.map_index_){}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.timeout_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.owner_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.owner_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_owner_name().empty()) {
    _this->_impl_.owner_name_.Set(from._internal_owner_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.owner_id_, &from._impl_.owner_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.timeout_) -
    reinterpret_cast<char*>(&_impl_.owner_id_)) + sizeof(_impl_.timeout_));
  // @@protoc_insertion_point(copy_constructor:network.GGAuctionShopOpenPacket)
}

inline void GGAuctionShopOpenPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , decltype(_impl_.owner_name_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.owner_id_){0u}
    , decltype(_impl_.style_){0u}
    , decltype(_impl_.vnum_){0u}
    , decltype(_impl_.color_red_){0}
    , decltype(_impl_.color_green_){0}
    , decltype(_impl_.color_blue_){0}
    , decltype(_impl_.channel_){0u}
    , decltype(_impl_.map_index_){0u}
    , decltype(_impl_.x_){0u}
    , decltype(_impl_.y_){0u}
    , decltype(_impl_.timeout_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.owner_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.owner_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GGAuctionShopOpenPacket::~GGAuctionShopOpenPacket() {
  // @@protoc_insertion_point(destructor:network.GGAuctionShopOpenPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GGAuctionShopOpenPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
  _impl_.owner_name_.Destroy();
  _impl_.name_.Destroy();
}

void GGAuctionShopOpenPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GGAuctionShopOpenPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GGAuctionShopOpenPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  _impl_.owner_name_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  ::memset(&_impl_.owner_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.timeout_) -
      reinterpret_cast<char*>(&_impl_.owner_id_)) + sizeof(_impl_.timeout_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GGAuctionShopOpenPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 owner_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.owner_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string owner_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_owner_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "network.GGAuctionShopOpenPacket.owner_name"));
        } else
          goto handle_unusual;
        continue;
      // bytes name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 style = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.style_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 vnum = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.vnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float color_red = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.color_red_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float color_green = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _impl_.color_green_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float color_blue = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _impl_.color_blue_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // uint32 channel = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 map_index = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.map_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 x = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 y = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 timeout = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .network.TItemData items = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GGAuctionShopOpenPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GGAuctionShopOpenPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 owner_id = 1;
  if (this->_internal_owner_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_owner_id(), target);
  }

  // string owner_name = 2;
  if (!this->_internal_owner_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_owner_name().data(), static_cast<int>(this->_internal_owner_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "network.GGAuctionShopOpenPacket.owner_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_owner_name(), target);
  }

  // bytes name = 3;
  if (!this->_internal_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_name(), target);
  }

  // uint32 style = 4;
  if (this->_internal_style() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_style(), target);
  }

  // uint32 vnum = 5;
  if (this->_internal_vnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_vnum(), target);
  }

  // float color_red = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_color_red = this->_internal_color_red();
  uint32_t raw_color_red;
  memcpy(&raw_color_red, &tmp_color_red, sizeof(tmp_color_red));
  if (raw_color_red != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_color_red(), target);
  }

  // float color_green = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_color_green = this->_internal_color_green();
  uint32_t raw_color_green;
  memcpy(&raw_color_green, &tmp_color_green, sizeof(tmp_color_green));
  if (raw_color_green != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_color_green(), target);
  }

  // float color_blue = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_color_blue = this->_internal_color_blue();
  uint32_t raw_color_blue;
  memcpy(&raw_color_blue, &tmp_color_blue, sizeof(tmp_color_blue));
  if (raw_color_blue != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_color_blue(), target);
  }

  // uint32 channel = 9;
  if (this->_internal_channel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_channel(), target);
  }

  // uint32 map_index = 10;
  if (this->_internal_map_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_map_index(), target);
  }

  // uint32 x = 11;
  if (this->_internal_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_x(), target);
  }

  // uint32 y = 12;
  if (this->_internal_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(12, this->_internal_y(), target);
  }

  // uint32 timeout = 13;
  if (this->_internal_timeout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(13, this->_internal_timeout(), target);
  }

  // repeated .network.TItemData items = 14;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(14, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GGAuctionShopOpenPacket)
  return target;
}

size_t GGAuctionShopOpenPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GGAuctionShopOpenPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .network.TItemData items = 14;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string owner_name = 2;
  if (!this->_internal_owner_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_owner_name());
  }

  // bytes name = 3;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // uint32 owner_id = 1;
  if (this->_internal_owner_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_owner_id());
  }

  // uint32 style = 4;
  if (this->_internal_style() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_style());
  }

  // uint32 vnum = 5;
  if (this->_internal_vnum() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_vnum());
  }

  // float color_red = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_color_red = this->_internal_color_red();
  uint32_t raw_color_red;
  memcpy(&raw_color_red, &tmp_color_red, sizeof(tmp_color_red));
  if (raw_color_red != 0) {
    total_size += 1 + 4;
  }

  // float color_green = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_color_green = this->_internal_color_green();
  uint32_t raw_color_green;
  memcpy(&raw_color_green, &tmp_color_green, sizeof(tmp_color_green));
  if (raw_color_green != 0) {
    total_size += 1 + 4;
  }

  // float color_blue = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_color_blue = this->_internal_color_blue();
  uint32_t raw_color_blue;
  memcpy(&raw_color_blue, &tmp_color_blue, sizeof(tmp_color_blue));
  if (raw_color_blue != 0) {
    total_size += 1 + 4;
  }

  // uint32 channel = 9;
  if (this->_internal_channel() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel());
  }

  // uint32 map_index = 10;
  if (this->_internal_map_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_map_index());
  }

  // uint32 x = 11;
  if (this->_internal_x() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_x());
  }

  // uint32 y = 12;
  if (this->_internal_y() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_y());
  }

  // uint32 timeout = 13;
  if (this->_internal_timeout() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_timeout());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GGAuctionShopOpenPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GGAuctionShopOpenPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GGAuctionShopOpenPacket::GetClassData() const { return &_class_data_; }


void GGAuctionShopOpenPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GGAuctionShopOpenPacket*>(&to_msg);
  auto& from = static_cast<const GGAuctionShopOpenPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GGAuctionShopOpenPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  if (!from._internal_owner_name().empty()) {
    _this->_internal_set_owner_name(from._internal_owner_name());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_owner_id() != 0) {
    _this->_internal_set_owner_id(from._internal_owner_id());
  }
  if (from._internal_style() != 0) {
    _this->_internal_set_style(from._internal_style());
  }
  if (from._internal_vnum() != 0) {
    _this->_internal_set_vnum(from._internal_vnum());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_color_red = from._internal_color_red();
  uint32_t raw_color_red;
  memcpy(&raw_color_red, &tmp_color_red, sizeof(tmp_color_red));
  if (raw_color_red != 0) {
    _this->_internal_set_color_red(from._internal_color_red());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_color_green = from._internal_color_green();
  uint32_t raw_color_green;
  memcpy(&raw_color_green, &tmp_color_green, sizeof(tmp_color_green));
  if (raw_color_green != 0) {
    _this->_internal_set_color_green(from._internal_color_green());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_color_blue = from._internal_color_blue();
  uint32_t raw_color_blue;
  memcpy(&raw_color_blue, &tmp_color_blue, sizeof(tmp_color_blue));
  if (raw_color_blue != 0) {
    _this->_internal_set_color_blue(from._internal_color_blue());
  }
  if (from._internal_channel() != 0) {
    _this->_internal_set_channel(from._internal_channel());
  }
  if (from._internal_map_index() != 0) {
    _this->_internal_set_map_index(from._internal_map_index());
  }
  if (from._internal_x() != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  if (from._internal_y() != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  if (from._internal_timeout() != 0) {
    _this->_internal_set_timeout(from._internal_timeout());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GGAuctionShopOpenPacket::CopyFrom(const GGAuctionShopOpenPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GGAuctionShopOpenPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GGAuctionShopOpenPacket::IsInitialized() const {
  return true;
}

void GGAuctionShopOpenPacket::InternalSwap(GGAuctionShopOpenPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.owner_name_, lhs_arena,
      &other->_impl_.owner_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GGAuctionShopOpenPacket, _impl_.timeout_)
      + sizeof(GGAuctionShopOpenPacket::_impl_.timeout_)
      - PROTOBUF_FIELD_OFFSET(GGAuctionShopOpenPacket, _impl_.owner_id_)>(
          reinterpret_cast<char*>(&_impl_.owner_id_),
          reinterpret_cast<char*>(&other->_impl_.owner_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GGAuctionShopOpenPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gg_5fpackets_2eproto_getter, &descriptor_table_gg_5fpackets_2eproto_once,
      file_level_metadata_gg_5fpackets_2eproto[53]);
}

// ===================================================================

class GGAuctionShopTakeGoldPacket::_Internal {
 public:
};

GGAuctionShopTakeGoldPacket::GGAuctionShopTakeGoldPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GGAuctionShopTakeGoldPacket)
}
GGAuctionShopTakeGoldPacket::GGAuctionShopTakeGoldPacket(const GGAuctionShopTakeGoldPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GGAuctionShopTakeGoldPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.gold_){}
    , decltype(_impl_.owner_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.gold_, &from._impl_.gold_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.owner_id_) -
    reinterpret_cast<char*>(&_impl_.gold_)) + sizeof(_impl_.owner_id_));
  // @@protoc_insertion_point(copy_constructor:network.GGAuctionShopTakeGoldPacket)
}

inline void GGAuctionShopTakeGoldPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.gold_){uint64_t{0u}}
    , decltype(_impl_.owner_id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GGAuctionShopTakeGoldPacket::~GGAuctionShopTakeGoldPacket() {
  // @@protoc_insertion_point(destructor:network.GGAuctionShopTakeGoldPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GGAuctionShopTakeGoldPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GGAuctionShopTakeGoldPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GGAuctionShopTakeGoldPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GGAuctionShopTakeGoldPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.gold_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.owner_id_) -
      reinterpret_cast<char*>(&_impl_.gold_)) + sizeof(_impl_.owner_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GGAuctionShopTakeGoldPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 owner_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.owner_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 gold = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GGAuctionShopTakeGoldPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GGAuctionShopTakeGoldPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 owner_id = 1;
  if (this->_internal_owner_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_owner_id(), target);
  }

  // uint64 gold = 2;
  if (this->_internal_gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_gold(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GGAuctionShopTakeGoldPacket)
  return target;
}

size_t GGAuctionShopTakeGoldPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GGAuctionShopTakeGoldPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 gold = 2;
  if (this->_internal_gold() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_gold());
  }

  // uint32 owner_id = 1;
  if (this->_internal_owner_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_owner_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GGAuctionShopTakeGoldPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GGAuctionShopTakeGoldPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GGAuctionShopTakeGoldPacket::GetClassData() const { return &_class_data_; }


void GGAuctionShopTakeGoldPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GGAuctionShopTakeGoldPacket*>(&to_msg);
  auto& from = static_cast<const GGAuctionShopTakeGoldPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GGAuctionShopTakeGoldPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_gold() != 0) {
    _this->_internal_set_gold(from._internal_gold());
  }
  if (from._internal_owner_id() != 0) {
    _this->_internal_set_owner_id(from._internal_owner_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GGAuctionShopTakeGoldPacket::CopyFrom(const GGAuctionShopTakeGoldPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GGAuctionShopTakeGoldPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GGAuctionShopTakeGoldPacket::IsInitialized() const {
  return true;
}

void GGAuctionShopTakeGoldPacket::InternalSwap(GGAuctionShopTakeGoldPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GGAuctionShopTakeGoldPacket, _impl_.owner_id_)
      + sizeof(GGAuctionShopTakeGoldPacket::_impl_.owner_id_)
      - PROTOBUF_FIELD_OFFSET(GGAuctionShopTakeGoldPacket, _impl_.gold_)>(
          reinterpret_cast<char*>(&_impl_.gold_),
          reinterpret_cast<char*>(&other->_impl_.gold_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GGAuctionShopTakeGoldPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gg_5fpackets_2eproto_getter, &descriptor_table_gg_5fpackets_2eproto_once,
      file_level_metadata_gg_5fpackets_2eproto[54]);
}

// ===================================================================

class GGAuctionShopSpawnPacket::_Internal {
 public:
};

GGAuctionShopSpawnPacket::GGAuctionShopSpawnPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GGAuctionShopSpawnPacket)
}
GGAuctionShopSpawnPacket::GGAuctionShopSpawnPacket(const GGAuctionShopSpawnPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GGAuctionShopSpawnPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.owner_name_){}
    , decltype(_impl_.owner_id_){}
    , decltype(_impl_.vnum_){}
    , decltype(_impl_.style_){}
    , decltype(_impl_.color_red_){}
    , decltype(_impl_.color_green_){}
    , decltype(_impl_.color_blue_){}
    , decltype(_impl_.map_index_){}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.owner_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.owner_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_owner_name().empty()) {
    _this->_impl_.owner_name_.Set(from._internal_owner_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.owner_id_, &from._impl_.owner_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.y_) -
    reinterpret_cast<char*>(&_impl_.owner_id_)) + sizeof(_impl_.y_));
  // @@protoc_insertion_point(copy_constructor:network.GGAuctionShopSpawnPacket)
}

inline void GGAuctionShopSpawnPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.owner_name_){}
    , decltype(_impl_.owner_id_){0u}
    , decltype(_impl_.vnum_){0u}
    , decltype(_impl_.style_){0u}
    , decltype(_impl_.color_red_){0}
    , decltype(_impl_.color_green_){0}
    , decltype(_impl_.color_blue_){0}
    , decltype(_impl_.map_index_){0u}
    , decltype(_impl_.x_){0u}
    , decltype(_impl_.y_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.owner_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.owner_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GGAuctionShopSpawnPacket::~GGAuctionShopSpawnPacket() {
  // @@protoc_insertion_point(destructor:network.GGAuctionShopSpawnPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GGAuctionShopSpawnPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.owner_name_.Destroy();
}

void GGAuctionShopSpawnPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GGAuctionShopSpawnPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GGAuctionShopSpawnPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.owner_name_.ClearToEmpty();
  ::memset(&_impl_.owner_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.y_) -
      reinterpret_cast<char*>(&_impl_.owner_id_)) + sizeof(_impl_.y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GGAuctionShopSpawnPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes owner_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_owner_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 owner_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.owner_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 vnum = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.vnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 style = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.style_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float color_red = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.color_red_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float color_green = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _impl_.color_green_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float color_blue = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _impl_.color_blue_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // uint32 map_index = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.map_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 x = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 y = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GGAuctionShopSpawnPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GGAuctionShopSpawnPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes name = 1;
  if (!this->_internal_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_name(), target);
  }

  // bytes owner_name = 2;
  if (!this->_internal_owner_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_owner_name(), target);
  }

  // uint32 owner_id = 3;
  if (this->_internal_owner_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_owner_id(), target);
  }

  // uint32 vnum = 4;
  if (this->_internal_vnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_vnum(), target);
  }

  // uint32 style = 5;
  if (this->_internal_style() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_style(), target);
  }

  // float color_red = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_color_red = this->_internal_color_red();
  uint32_t raw_color_red;
  memcpy(&raw_color_red, &tmp_color_red, sizeof(tmp_color_red));
  if (raw_color_red != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_color_red(), target);
  }

  // float color_green = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_color_green = this->_internal_color_green();
  uint32_t raw_color_green;
  memcpy(&raw_color_green, &tmp_color_green, sizeof(tmp_color_green));
  if (raw_color_green != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_color_green(), target);
  }

  // float color_blue = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_color_blue = this->_internal_color_blue();
  uint32_t raw_color_blue;
  memcpy(&raw_color_blue, &tmp_color_blue, sizeof(tmp_color_blue));
  if (raw_color_blue != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_color_blue(), target);
  }

  // uint32 map_index = 9;
  if (this->_internal_map_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_map_index(), target);
  }

  // uint32 x = 10;
  if (this->_internal_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_x(), target);
  }

  // uint32 y = 11;
  if (this->_internal_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GGAuctionShopSpawnPacket)
  return target;
}

size_t GGAuctionShopSpawnPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GGAuctionShopSpawnPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // bytes owner_name = 2;
  if (!this->_internal_owner_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_owner_name());
  }

  // uint32 owner_id = 3;
  if (this->_internal_owner_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_owner_id());
  }

  // uint32 vnum = 4;
  if (this->_internal_vnum() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_vnum());
  }

  // uint32 style = 5;
  if (this->_internal_style() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_style());
  }

  // float color_red = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_color_red = this->_internal_color_red();
  uint32_t raw_color_red;
  memcpy(&raw_color_red, &tmp_color_red, sizeof(tmp_color_red));
  if (raw_color_red != 0) {
    total_size += 1 + 4;
  }

  // float color_green = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_color_green = this->_internal_color_green();
  uint32_t raw_color_green;
  memcpy(&raw_color_green, &tmp_color_green, sizeof(tmp_color_green));
  if (raw_color_green != 0) {
    total_size += 1 + 4;
  }

  // float color_blue = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_color_blue = this->_internal_color_blue();
  uint32_t raw_color_blue;
  memcpy(&raw_color_blue, &tmp_color_blue, sizeof(tmp_color_blue));
  if (raw_color_blue != 0) {
    total_size += 1 + 4;
  }

  // uint32 map_index = 9;
  if (this->_internal_map_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_map_index());
  }

  // uint32 x = 10;
  if (this->_internal_x() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_x());
  }

  // uint32 y = 11;
  if (this->_internal_y() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_y());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GGAuctionShopSpawnPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GGAuctionShopSpawnPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GGAuctionShopSpawnPacket::GetClassData() const { return &_class_data_; }


void GGAuctionShopSpawnPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GGAuctionShopSpawnPacket*>(&to_msg);
  auto& from = static_cast<const GGAuctionShopSpawnPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GGAuctionShopSpawnPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_owner_name().empty()) {
    _this->_internal_set_owner_name(from._internal_owner_name());
  }
  if (from._internal_owner_id() != 0) {
    _this->_internal_set_owner_id(from._internal_owner_id());
  }
  if (from._internal_vnum() != 0) {
    _this->_internal_set_vnum(from._internal_vnum());
  }
  if (from._internal_style() != 0) {
    _this->_internal_set_style(from._internal_style());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_color_red = from._internal_color_red();
  uint32_t raw_color_red;
  memcpy(&raw_color_red, &tmp_color_red, sizeof(tmp_color_red));
  if (raw_color_red != 0) {
    _this->_internal_set_color_red(from._internal_color_red());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_color_green = from._internal_color_green();
  uint32_t raw_color_green;
  memcpy(&raw_color_green, &tmp_color_green, sizeof(tmp_color_green));
  if (raw_color_green != 0) {
    _this->_internal_set_color_green(from._internal_color_green());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_color_blue = from._internal_color_blue();
  uint32_t raw_color_blue;
  memcpy(&raw_color_blue, &tmp_color_blue, sizeof(tmp_color_blue));
  if (raw_color_blue != 0) {
    _this->_internal_set_color_blue(from._internal_color_blue());
  }
  if (from._internal_map_index() != 0) {
    _this->_internal_set_map_index(from._internal_map_index());
  }
  if (from._internal_x() != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  if (from._internal_y() != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GGAuctionShopSpawnPacket::CopyFrom(const GGAuctionShopSpawnPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GGAuctionShopSpawnPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GGAuctionShopSpawnPacket::IsInitialized() const {
  return true;
}

void GGAuctionShopSpawnPacket::InternalSwap(GGAuctionShopSpawnPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.owner_name_, lhs_arena,
      &other->_impl_.owner_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GGAuctionShopSpawnPacket, _impl_.y_)
      + sizeof(GGAuctionShopSpawnPacket::_impl_.y_)
      - PROTOBUF_FIELD_OFFSET(GGAuctionShopSpawnPacket, _impl_.owner_id_)>(
          reinterpret_cast<char*>(&_impl_.owner_id_),
          reinterpret_cast<char*>(&other->_impl_.owner_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GGAuctionShopSpawnPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gg_5fpackets_2eproto_getter, &descriptor_table_gg_5fpackets_2eproto_once,
      file_level_metadata_gg_5fpackets_2eproto[55]);
}

// ===================================================================

class GGAuctionShopDespawnPacket::_Internal {
 public:
};

GGAuctionShopDespawnPacket::GGAuctionShopDespawnPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GGAuctionShopDespawnPacket)
}
GGAuctionShopDespawnPacket::GGAuctionShopDespawnPacket(const GGAuctionShopDespawnPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GGAuctionShopDespawnPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.owner_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.owner_id_ = from._impl_.owner_id_;
  // @@protoc_insertion_point(copy_constructor:network.GGAuctionShopDespawnPacket)
}

inline void GGAuctionShopDespawnPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.owner_id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GGAuctionShopDespawnPacket::~GGAuctionShopDespawnPacket() {
  // @@protoc_insertion_point(destructor:network.GGAuctionShopDespawnPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GGAuctionShopDespawnPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GGAuctionShopDespawnPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GGAuctionShopDespawnPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GGAuctionShopDespawnPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.owner_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GGAuctionShopDespawnPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 owner_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.owner_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GGAuctionShopDespawnPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GGAuctionShopDespawnPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 owner_id = 1;
  if (this->_internal_owner_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_owner_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GGAuctionShopDespawnPacket)
  return target;
}

size_t GGAuctionShopDespawnPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GGAuctionShopDespawnPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 owner_id = 1;
  if (this->_internal_owner_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_owner_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GGAuctionShopDespawnPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GGAuctionShopDespawnPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GGAuctionShopDespawnPacket::GetClassData() const { return &_class_data_; }


void GGAuctionShopDespawnPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GGAuctionShopDespawnPacket*>(&to_msg);
  auto& from = static_cast<const GGAuctionShopDespawnPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GGAuctionShopDespawnPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_owner_id() != 0) {
    _this->_internal_set_owner_id(from._internal_owner_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GGAuctionShopDespawnPacket::CopyFrom(const GGAuctionShopDespawnPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GGAuctionShopDespawnPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GGAuctionShopDespawnPacket::IsInitialized() const {
  return true;
}

void GGAuctionShopDespawnPacket::InternalSwap(GGAuctionShopDespawnPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.owner_id_, other->_impl_.owner_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GGAuctionShopDespawnPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gg_5fpackets_2eproto_getter, &descriptor_table_gg_5fpackets_2eproto_once,
      file_level_metadata_gg_5fpackets_2eproto[56]);
}

// ===================================================================

class GGAuctionShopViewPacket::_Internal {
 public:
};

GGAuctionShopViewPacket::GGAuctionShopViewPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GGAuctionShopViewPacket)
}
GGAuctionShopViewPacket::GGAuctionShopViewPacket(const GGAuctionShopViewPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GGAuctionShopViewPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.player_id_){}
    , decltype(_impl_.owner_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.player_id_, &from._impl_.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.owner_id_) -
    reinterpret_cast<char*>(&_impl_.player_id_)) + sizeof(_impl_.owner_id_));
  // @@protoc_insertion_point(copy_constructor:network.GGAuctionShopViewPacket)
}

inline void GGAuctionShopViewPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.player_id_){0u}
    , decltype(_impl_.owner_id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GGAuctionShopViewPacket::~GGAuctionShopViewPacket() {
  // @@protoc_insertion_point(destructor:network.GGAuctionShopViewPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GGAuctionShopViewPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GGAuctionShopViewPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GGAuctionShopViewPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GGAuctionShopViewPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.owner_id_) -
      reinterpret_cast<char*>(&_impl_.player_id_)) + sizeof(_impl_.owner_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GGAuctionShopViewPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 owner_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.owner_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GGAuctionShopViewPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GGAuctionShopViewPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 player_id = 1;
  if (this->_internal_player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_player_id(), target);
  }

  // uint32 owner_id = 2;
  if (this->_internal_owner_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_owner_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GGAuctionShopViewPacket)
  return target;
}

size_t GGAuctionShopViewPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GGAuctionShopViewPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 player_id = 1;
  if (this->_internal_player_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_player_id());
  }

  // uint32 owner_id = 2;
  if (this->_internal_owner_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_owner_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GGAuctionShopViewPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GGAuctionShopViewPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GGAuctionShopViewPacket::GetClassData() const { return &_class_data_; }


void GGAuctionShopViewPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GGAuctionShopViewPacket*>(&to_msg);
  auto& from = static_cast<const GGAuctionShopViewPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GGAuctionShopViewPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_player_id() != 0) {
    _this->_internal_set_player_id(from._internal_player_id());
  }
  if (from._internal_owner_id() != 0) {
    _this->_internal_set_owner_id(from._internal_owner_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GGAuctionShopViewPacket::CopyFrom(const GGAuctionShopViewPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GGAuctionShopViewPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GGAuctionShopViewPacket::IsInitialized() const {
  return true;
}

void GGAuctionShopViewPacket::InternalSwap(GGAuctionShopViewPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GGAuctionShopViewPacket, _impl_.owner_id_)
      + sizeof(GGAuctionShopViewPacket::_impl_.owner_id_)
      - PROTOBUF_FIELD_OFFSET(GGAuctionShopViewPacket, _impl_.player_id_)>(
          reinterpret_cast<char*>(&_impl_.player_id_),
          reinterpret_cast<char*>(&other->_impl_.player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GGAuctionShopViewPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gg_5fpackets_2eproto_getter, &descriptor_table_gg_5fpackets_2eproto_once,
      file_level_metadata_gg_5fpackets_2eproto[57]);
}

// ===================================================================

class GGAuctionShopViewCancelPacket::_Internal {
 public:
};

GGAuctionShopViewCancelPacket::GGAuctionShopViewCancelPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GGAuctionShopViewCancelPacket)
}
GGAuctionShopViewCancelPacket::GGAuctionShopViewCancelPacket(const GGAuctionShopViewCancelPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GGAuctionShopViewCancelPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.player_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.player_id_ = from._impl_.player_id_;
  // @@protoc_insertion_point(copy_constructor:network.GGAuctionShopViewCancelPacket)
}

inline void GGAuctionShopViewCancelPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.player_id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GGAuctionShopViewCancelPacket::~GGAuctionShopViewCancelPacket() {
  // @@protoc_insertion_point(destructor:network.GGAuctionShopViewCancelPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GGAuctionShopViewCancelPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GGAuctionShopViewCancelPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GGAuctionShopViewCancelPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GGAuctionShopViewCancelPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.player_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GGAuctionShopViewCancelPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GGAuctionShopViewCancelPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GGAuctionShopViewCancelPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 player_id = 1;
  if (this->_internal_player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_player_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GGAuctionShopViewCancelPacket)
  return target;
}

size_t GGAuctionShopViewCancelPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GGAuctionShopViewCancelPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 player_id = 1;
  if (this->_internal_player_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_player_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GGAuctionShopViewCancelPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GGAuctionShopViewCancelPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GGAuctionShopViewCancelPacket::GetClassData() const { return &_class_data_; }


void GGAuctionShopViewCancelPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GGAuctionShopViewCancelPacket*>(&to_msg);
  auto& from = static_cast<const GGAuctionShopViewCancelPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GGAuctionShopViewCancelPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_player_id() != 0) {
    _this->_internal_set_player_id(from._internal_player_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GGAuctionShopViewCancelPacket::CopyFrom(const GGAuctionShopViewCancelPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GGAuctionShopViewCancelPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GGAuctionShopViewCancelPacket::IsInitialized() const {
  return true;
}

void GGAuctionShopViewCancelPacket::InternalSwap(GGAuctionShopViewCancelPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.player_id_, other->_impl_.player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GGAuctionShopViewCancelPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gg_5fpackets_2eproto_getter, &descriptor_table_gg_5fpackets_2eproto_once,
      file_level_metadata_gg_5fpackets_2eproto[58]);
}

// ===================================================================

class GGAuctionShopRequestHistoryPacket::_Internal {
 public:
};

GGAuctionShopRequestHistoryPacket::GGAuctionShopRequestHistoryPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GGAuctionShopRequestHistoryPacket)
}
GGAuctionShopRequestHistoryPacket::GGAuctionShopRequestHistoryPacket(const GGAuctionShopRequestHistoryPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GGAuctionShopRequestHistoryPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.player_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.player_id_ = from._impl_.player_id_;
  // @@protoc_insertion_point(copy_constructor:network.GGAuctionShopRequestHistoryPacket)
}

inline void GGAuctionShopRequestHistoryPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.player_id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GGAuctionShopRequestHistoryPacket::~GGAuctionShopRequestHistoryPacket() {
  // @@protoc_insertion_point(destructor:network.GGAuctionShopRequestHistoryPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GGAuctionShopRequestHistoryPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GGAuctionShopRequestHistoryPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GGAuctionShopRequestHistoryPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GGAuctionShopRequestHistoryPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.player_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GGAuctionShopRequestHistoryPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GGAuctionShopRequestHistoryPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GGAuctionShopRequestHistoryPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 player_id = 1;
  if (this->_internal_player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_player_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GGAuctionShopRequestHistoryPacket)
  return target;
}

size_t GGAuctionShopRequestHistoryPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GGAuctionShopRequestHistoryPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 player_id = 1;
  if (this->_internal_player_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_player_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GGAuctionShopRequestHistoryPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GGAuctionShopRequestHistoryPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GGAuctionShopRequestHistoryPacket::GetClassData() const { return &_class_data_; }


void GGAuctionShopRequestHistoryPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GGAuctionShopRequestHistoryPacket*>(&to_msg);
  auto& from = static_cast<const GGAuctionShopRequestHistoryPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GGAuctionShopRequestHistoryPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_player_id() != 0) {
    _this->_internal_set_player_id(from._internal_player_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GGAuctionShopRequestHistoryPacket::CopyFrom(const GGAuctionShopRequestHistoryPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GGAuctionShopRequestHistoryPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GGAuctionShopRequestHistoryPacket::IsInitialized() const {
  return true;
}

void GGAuctionShopRequestHistoryPacket::InternalSwap(GGAuctionShopRequestHistoryPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.player_id_, other->_impl_.player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GGAuctionShopRequestHistoryPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gg_5fpackets_2eproto_getter, &descriptor_table_gg_5fpackets_2eproto_once,
      file_level_metadata_gg_5fpackets_2eproto[59]);
}

// ===================================================================

class GGAuctionShopRenewPacket::_Internal {
 public:
};

GGAuctionShopRenewPacket::GGAuctionShopRenewPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GGAuctionShopRenewPacket)
}
GGAuctionShopRenewPacket::GGAuctionShopRenewPacket(const GGAuctionShopRenewPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GGAuctionShopRenewPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.player_id_){}
    , decltype(_impl_.timeout_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.player_id_, &from._impl_.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.timeout_) -
    reinterpret_cast<char*>(&_impl_.player_id_)) + sizeof(_impl_.timeout_));
  // @@protoc_insertion_point(copy_constructor:network.GGAuctionShopRenewPacket)
}

inline void GGAuctionShopRenewPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.player_id_){0u}
    , decltype(_impl_.timeout_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GGAuctionShopRenewPacket::~GGAuctionShopRenewPacket() {
  // @@protoc_insertion_point(destructor:network.GGAuctionShopRenewPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GGAuctionShopRenewPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GGAuctionShopRenewPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GGAuctionShopRenewPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GGAuctionShopRenewPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.timeout_) -
      reinterpret_cast<char*>(&_impl_.player_id_)) + sizeof(_impl_.timeout_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GGAuctionShopRenewPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 timeout = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GGAuctionShopRenewPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GGAuctionShopRenewPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 player_id = 1;
  if (this->_internal_player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_player_id(), target);
  }

  // uint32 timeout = 2;
  if (this->_internal_timeout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_timeout(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GGAuctionShopRenewPacket)
  return target;
}

size_t GGAuctionShopRenewPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GGAuctionShopRenewPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 player_id = 1;
  if (this->_internal_player_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_player_id());
  }

  // uint32 timeout = 2;
  if (this->_internal_timeout() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_timeout());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GGAuctionShopRenewPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GGAuctionShopRenewPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GGAuctionShopRenewPacket::GetClassData() const { return &_class_data_; }


void GGAuctionShopRenewPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GGAuctionShopRenewPacket*>(&to_msg);
  auto& from = static_cast<const GGAuctionShopRenewPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GGAuctionShopRenewPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_player_id() != 0) {
    _this->_internal_set_player_id(from._internal_player_id());
  }
  if (from._internal_timeout() != 0) {
    _this->_internal_set_timeout(from._internal_timeout());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GGAuctionShopRenewPacket::CopyFrom(const GGAuctionShopRenewPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GGAuctionShopRenewPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GGAuctionShopRenewPacket::IsInitialized() const {
  return true;
}

void GGAuctionShopRenewPacket::InternalSwap(GGAuctionShopRenewPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GGAuctionShopRenewPacket, _impl_.timeout_)
      + sizeof(GGAuctionShopRenewPacket::_impl_.timeout_)
      - PROTOBUF_FIELD_OFFSET(GGAuctionShopRenewPacket, _impl_.player_id_)>(
          reinterpret_cast<char*>(&_impl_.player_id_),
          reinterpret_cast<char*>(&other->_impl_.player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GGAuctionShopRenewPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gg_5fpackets_2eproto_getter, &descriptor_table_gg_5fpackets_2eproto_once,
      file_level_metadata_gg_5fpackets_2eproto[60]);
}

// ===================================================================

class GGAuctionShopClosePacket::_Internal {
 public:
};

GGAuctionShopClosePacket::GGAuctionShopClosePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GGAuctionShopClosePacket)
}
GGAuctionShopClosePacket::GGAuctionShopClosePacket(const GGAuctionShopClosePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GGAuctionShopClosePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.player_id_){}
    , decltype(_impl_.map_index_){}
    , decltype(_impl_.channel_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.player_id_, &from._impl_.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.channel_) -
    reinterpret_cast<char*>(&_impl_.player_id_)) + sizeof(_impl_.channel_));
  // @@protoc_insertion_point(copy_constructor:network.GGAuctionShopClosePacket)
}

inline void GGAuctionShopClosePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.player_id_){0u}
    , decltype(_impl_.map_index_){0u}
    , decltype(_impl_.channel_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GGAuctionShopClosePacket::~GGAuctionShopClosePacket() {
  // @@protoc_insertion_point(destructor:network.GGAuctionShopClosePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GGAuctionShopClosePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GGAuctionShopClosePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GGAuctionShopClosePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GGAuctionShopClosePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.channel_) -
      reinterpret_cast<char*>(&_impl_.player_id_)) + sizeof(_impl_.channel_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GGAuctionShopClosePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 map_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.map_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 channel = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GGAuctionShopClosePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GGAuctionShopClosePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 player_id = 1;
  if (this->_internal_player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_player_id(), target);
  }

  // uint32 map_index = 2;
  if (this->_internal_map_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_map_index(), target);
  }

  // uint32 channel = 3;
  if (this->_internal_channel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_channel(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GGAuctionShopClosePacket)
  return target;
}

size_t GGAuctionShopClosePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GGAuctionShopClosePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 player_id = 1;
  if (this->_internal_player_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_player_id());
  }

  // uint32 map_index = 2;
  if (this->_internal_map_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_map_index());
  }

  // uint32 channel = 3;
  if (this->_internal_channel() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GGAuctionShopClosePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GGAuctionShopClosePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GGAuctionShopClosePacket::GetClassData() const { return &_class_data_; }


void GGAuctionShopClosePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GGAuctionShopClosePacket*>(&to_msg);
  auto& from = static_cast<const GGAuctionShopClosePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GGAuctionShopClosePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_player_id() != 0) {
    _this->_internal_set_player_id(from._internal_player_id());
  }
  if (from._internal_map_index() != 0) {
    _this->_internal_set_map_index(from._internal_map_index());
  }
  if (from._internal_channel() != 0) {
    _this->_internal_set_channel(from._internal_channel());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GGAuctionShopClosePacket::CopyFrom(const GGAuctionShopClosePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GGAuctionShopClosePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GGAuctionShopClosePacket::IsInitialized() const {
  return true;
}

void GGAuctionShopClosePacket::InternalSwap(GGAuctionShopClosePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GGAuctionShopClosePacket, _impl_.channel_)
      + sizeof(GGAuctionShopClosePacket::_impl_.channel_)
      - PROTOBUF_FIELD_OFFSET(GGAuctionShopClosePacket, _impl_.player_id_)>(
          reinterpret_cast<char*>(&_impl_.player_id_),
          reinterpret_cast<char*>(&other->_impl_.player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GGAuctionShopClosePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gg_5fpackets_2eproto_getter, &descriptor_table_gg_5fpackets_2eproto_once,
      file_level_metadata_gg_5fpackets_2eproto[61]);
}

// ===================================================================

class GGAuctionRequestAveragePricePacket::_Internal {
 public:
};

GGAuctionRequestAveragePricePacket::GGAuctionRequestAveragePricePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GGAuctionRequestAveragePricePacket)
}
GGAuctionRequestAveragePricePacket::GGAuctionRequestAveragePricePacket(const GGAuctionRequestAveragePricePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GGAuctionRequestAveragePricePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.player_id_){}
    , decltype(_impl_.requestor_){}
    , decltype(_impl_.vnum_){}
    , decltype(_impl_.count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.player_id_, &from._impl_.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.count_) -
    reinterpret_cast<char*>(&_impl_.player_id_)) + sizeof(_impl_.count_));
  // @@protoc_insertion_point(copy_constructor:network.GGAuctionRequestAveragePricePacket)
}

inline void GGAuctionRequestAveragePricePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.player_id_){0u}
    , decltype(_impl_.requestor_){0u}
    , decltype(_impl_.vnum_){0u}
    , decltype(_impl_.count_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GGAuctionRequestAveragePricePacket::~GGAuctionRequestAveragePricePacket() {
  // @@protoc_insertion_point(destructor:network.GGAuctionRequestAveragePricePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GGAuctionRequestAveragePricePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GGAuctionRequestAveragePricePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GGAuctionRequestAveragePricePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GGAuctionRequestAveragePricePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.count_) -
      reinterpret_cast<char*>(&_impl_.player_id_)) + sizeof(_impl_.count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GGAuctionRequestAveragePricePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 requestor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.requestor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 vnum = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.vnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GGAuctionRequestAveragePricePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GGAuctionRequestAveragePricePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 player_id = 1;
  if (this->_internal_player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_player_id(), target);
  }

  // uint32 requestor = 2;
  if (this->_internal_requestor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_requestor(), target);
  }

  // uint32 vnum = 3;
  if (this->_internal_vnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_vnum(), target);
  }

  // uint32 count = 4;
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GGAuctionRequestAveragePricePacket)
  return target;
}

size_t GGAuctionRequestAveragePricePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GGAuctionRequestAveragePricePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 player_id = 1;
  if (this->_internal_player_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_player_id());
  }

  // uint32 requestor = 2;
  if (this->_internal_requestor() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_requestor());
  }

  // uint32 vnum = 3;
  if (this->_internal_vnum() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_vnum());
  }

  // uint32 count = 4;
  if (this->_internal_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GGAuctionRequestAveragePricePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GGAuctionRequestAveragePricePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GGAuctionRequestAveragePricePacket::GetClassData() const { return &_class_data_; }


void GGAuctionRequestAveragePricePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GGAuctionRequestAveragePricePacket*>(&to_msg);
  auto& from = static_cast<const GGAuctionRequestAveragePricePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GGAuctionRequestAveragePricePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_player_id() != 0) {
    _this->_internal_set_player_id(from._internal_player_id());
  }
  if (from._internal_requestor() != 0) {
    _this->_internal_set_requestor(from._internal_requestor());
  }
  if (from._internal_vnum() != 0) {
    _this->_internal_set_vnum(from._internal_vnum());
  }
  if (from._internal_count() != 0) {
    _this->_internal_set_count(from._internal_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GGAuctionRequestAveragePricePacket::CopyFrom(const GGAuctionRequestAveragePricePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GGAuctionRequestAveragePricePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GGAuctionRequestAveragePricePacket::IsInitialized() const {
  return true;
}

void GGAuctionRequestAveragePricePacket::InternalSwap(GGAuctionRequestAveragePricePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GGAuctionRequestAveragePricePacket, _impl_.count_)
      + sizeof(GGAuctionRequestAveragePricePacket::_impl_.count_)
      - PROTOBUF_FIELD_OFFSET(GGAuctionRequestAveragePricePacket, _impl_.player_id_)>(
          reinterpret_cast<char*>(&_impl_.player_id_),
          reinterpret_cast<char*>(&other->_impl_.player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GGAuctionRequestAveragePricePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gg_5fpackets_2eproto_getter, &descriptor_table_gg_5fpackets_2eproto_once,
      file_level_metadata_gg_5fpackets_2eproto[62]);
}

// ===================================================================

class GGEventManagerOpenRegistrationPacket::_Internal {
 public:
};

GGEventManagerOpenRegistrationPacket::GGEventManagerOpenRegistrationPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GGEventManagerOpenRegistrationPacket)
}
GGEventManagerOpenRegistrationPacket::GGEventManagerOpenRegistrationPacket(const GGEventManagerOpenRegistrationPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GGEventManagerOpenRegistrationPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.event_index_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.event_index_ = from._impl_.event_index_;
  // @@protoc_insertion_point(copy_constructor:network.GGEventManagerOpenRegistrationPacket)
}

inline void GGEventManagerOpenRegistrationPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.event_index_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GGEventManagerOpenRegistrationPacket::~GGEventManagerOpenRegistrationPacket() {
  // @@protoc_insertion_point(destructor:network.GGEventManagerOpenRegistrationPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GGEventManagerOpenRegistrationPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GGEventManagerOpenRegistrationPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GGEventManagerOpenRegistrationPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GGEventManagerOpenRegistrationPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.event_index_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GGEventManagerOpenRegistrationPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 event_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.event_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GGEventManagerOpenRegistrationPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GGEventManagerOpenRegistrationPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 event_index = 1;
  if (this->_internal_event_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_event_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GGEventManagerOpenRegistrationPacket)
  return target;
}

size_t GGEventManagerOpenRegistrationPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GGEventManagerOpenRegistrationPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 event_index = 1;
  if (this->_internal_event_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_event_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GGEventManagerOpenRegistrationPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GGEventManagerOpenRegistrationPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GGEventManagerOpenRegistrationPacket::GetClassData() const { return &_class_data_; }


void GGEventManagerOpenRegistrationPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GGEventManagerOpenRegistrationPacket*>(&to_msg);
  auto& from = static_cast<const GGEventManagerOpenRegistrationPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GGEventManagerOpenRegistrationPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_event_index() != 0) {
    _this->_internal_set_event_index(from._internal_event_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GGEventManagerOpenRegistrationPacket::CopyFrom(const GGEventManagerOpenRegistrationPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GGEventManagerOpenRegistrationPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GGEventManagerOpenRegistrationPacket::IsInitialized() const {
  return true;
}

void GGEventManagerOpenRegistrationPacket::InternalSwap(GGEventManagerOpenRegistrationPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.event_index_, other->_impl_.event_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GGEventManagerOpenRegistrationPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gg_5fpackets_2eproto_getter, &descriptor_table_gg_5fpackets_2eproto_once,
      file_level_metadata_gg_5fpackets_2eproto[63]);
}

// ===================================================================

class GGEventManagerCloseRegistrationPacket::_Internal {
 public:
};

GGEventManagerCloseRegistrationPacket::GGEventManagerCloseRegistrationPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GGEventManagerCloseRegistrationPacket)
}
GGEventManagerCloseRegistrationPacket::GGEventManagerCloseRegistrationPacket(const GGEventManagerCloseRegistrationPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GGEventManagerCloseRegistrationPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.clear_event_index_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.clear_event_index_ = from._impl_.clear_event_index_;
  // @@protoc_insertion_point(copy_constructor:network.GGEventManagerCloseRegistrationPacket)
}

inline void GGEventManagerCloseRegistrationPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.clear_event_index_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GGEventManagerCloseRegistrationPacket::~GGEventManagerCloseRegistrationPacket() {
  // @@protoc_insertion_point(destructor:network.GGEventManagerCloseRegistrationPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GGEventManagerCloseRegistrationPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GGEventManagerCloseRegistrationPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GGEventManagerCloseRegistrationPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GGEventManagerCloseRegistrationPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.clear_event_index_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GGEventManagerCloseRegistrationPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool clear_event_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.clear_event_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GGEventManagerCloseRegistrationPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GGEventManagerCloseRegistrationPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool clear_event_index = 1;
  if (this->_internal_clear_event_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_clear_event_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GGEventManagerCloseRegistrationPacket)
  return target;
}

size_t GGEventManagerCloseRegistrationPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GGEventManagerCloseRegistrationPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool clear_event_index = 1;
  if (this->_internal_clear_event_index() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GGEventManagerCloseRegistrationPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GGEventManagerCloseRegistrationPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GGEventManagerCloseRegistrationPacket::GetClassData() const { return &_class_data_; }


void GGEventManagerCloseRegistrationPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GGEventManagerCloseRegistrationPacket*>(&to_msg);
  auto& from = static_cast<const GGEventManagerCloseRegistrationPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GGEventManagerCloseRegistrationPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_clear_event_index() != 0) {
    _this->_internal_set_clear_event_index(from._internal_clear_event_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GGEventManagerCloseRegistrationPacket::CopyFrom(const GGEventManagerCloseRegistrationPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GGEventManagerCloseRegistrationPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GGEventManagerCloseRegistrationPacket::IsInitialized() const {
  return true;
}

void GGEventManagerCloseRegistrationPacket::InternalSwap(GGEventManagerCloseRegistrationPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.clear_event_index_, other->_impl_.clear_event_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GGEventManagerCloseRegistrationPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gg_5fpackets_2eproto_getter, &descriptor_table_gg_5fpackets_2eproto_once,
      file_level_metadata_gg_5fpackets_2eproto[64]);
}

// ===================================================================

class GGEventManagerIgnorePlayerPacket::_Internal {
 public:
};

GGEventManagerIgnorePlayerPacket::GGEventManagerIgnorePlayerPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GGEventManagerIgnorePlayerPacket)
}
GGEventManagerIgnorePlayerPacket::GGEventManagerIgnorePlayerPacket(const GGEventManagerIgnorePlayerPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GGEventManagerIgnorePlayerPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.pid_ = from._impl_.pid_;
  // @@protoc_insertion_point(copy_constructor:network.GGEventManagerIgnorePlayerPacket)
}

inline void GGEventManagerIgnorePlayerPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GGEventManagerIgnorePlayerPacket::~GGEventManagerIgnorePlayerPacket() {
  // @@protoc_insertion_point(destructor:network.GGEventManagerIgnorePlayerPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GGEventManagerIgnorePlayerPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GGEventManagerIgnorePlayerPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GGEventManagerIgnorePlayerPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GGEventManagerIgnorePlayerPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GGEventManagerIgnorePlayerPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GGEventManagerIgnorePlayerPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GGEventManagerIgnorePlayerPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GGEventManagerIgnorePlayerPacket)
  return target;
}

size_t GGEventManagerIgnorePlayerPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GGEventManagerIgnorePlayerPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GGEventManagerIgnorePlayerPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GGEventManagerIgnorePlayerPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GGEventManagerIgnorePlayerPacket::GetClassData() const { return &_class_data_; }


void GGEventManagerIgnorePlayerPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GGEventManagerIgnorePlayerPacket*>(&to_msg);
  auto& from = static_cast<const GGEventManagerIgnorePlayerPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GGEventManagerIgnorePlayerPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_pid() != 0) {
    _this->_internal_set_pid(from._internal_pid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GGEventManagerIgnorePlayerPacket::CopyFrom(const GGEventManagerIgnorePlayerPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GGEventManagerIgnorePlayerPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GGEventManagerIgnorePlayerPacket::IsInitialized() const {
  return true;
}

void GGEventManagerIgnorePlayerPacket::InternalSwap(GGEventManagerIgnorePlayerPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.pid_, other->_impl_.pid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GGEventManagerIgnorePlayerPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gg_5fpackets_2eproto_getter, &descriptor_table_gg_5fpackets_2eproto_once,
      file_level_metadata_gg_5fpackets_2eproto[65]);
}

// ===================================================================

class GGEventManagerOpenAnnouncementPacket::_Internal {
 public:
};

GGEventManagerOpenAnnouncementPacket::GGEventManagerOpenAnnouncementPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GGEventManagerOpenAnnouncementPacket)
}
GGEventManagerOpenAnnouncementPacket::GGEventManagerOpenAnnouncementPacket(const GGEventManagerOpenAnnouncementPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GGEventManagerOpenAnnouncementPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , decltype(_impl_.tm_stamp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.tm_stamp_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.tm_stamp_));
  // @@protoc_insertion_point(copy_constructor:network.GGEventManagerOpenAnnouncementPacket)
}

inline void GGEventManagerOpenAnnouncementPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){0u}
    , decltype(_impl_.tm_stamp_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GGEventManagerOpenAnnouncementPacket::~GGEventManagerOpenAnnouncementPacket() {
  // @@protoc_insertion_point(destructor:network.GGEventManagerOpenAnnouncementPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GGEventManagerOpenAnnouncementPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GGEventManagerOpenAnnouncementPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GGEventManagerOpenAnnouncementPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GGEventManagerOpenAnnouncementPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.tm_stamp_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.tm_stamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GGEventManagerOpenAnnouncementPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 tm_stamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.tm_stamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GGEventManagerOpenAnnouncementPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GGEventManagerOpenAnnouncementPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // uint32 tm_stamp = 2;
  if (this->_internal_tm_stamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_tm_stamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GGEventManagerOpenAnnouncementPacket)
  return target;
}

size_t GGEventManagerOpenAnnouncementPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GGEventManagerOpenAnnouncementPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
  }

  // uint32 tm_stamp = 2;
  if (this->_internal_tm_stamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tm_stamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GGEventManagerOpenAnnouncementPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GGEventManagerOpenAnnouncementPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GGEventManagerOpenAnnouncementPacket::GetClassData() const { return &_class_data_; }


void GGEventManagerOpenAnnouncementPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GGEventManagerOpenAnnouncementPacket*>(&to_msg);
  auto& from = static_cast<const GGEventManagerOpenAnnouncementPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GGEventManagerOpenAnnouncementPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_tm_stamp() != 0) {
    _this->_internal_set_tm_stamp(from._internal_tm_stamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GGEventManagerOpenAnnouncementPacket::CopyFrom(const GGEventManagerOpenAnnouncementPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GGEventManagerOpenAnnouncementPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GGEventManagerOpenAnnouncementPacket::IsInitialized() const {
  return true;
}

void GGEventManagerOpenAnnouncementPacket::InternalSwap(GGEventManagerOpenAnnouncementPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GGEventManagerOpenAnnouncementPacket, _impl_.tm_stamp_)
      + sizeof(GGEventManagerOpenAnnouncementPacket::_impl_.tm_stamp_)
      - PROTOBUF_FIELD_OFFSET(GGEventManagerOpenAnnouncementPacket, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GGEventManagerOpenAnnouncementPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gg_5fpackets_2eproto_getter, &descriptor_table_gg_5fpackets_2eproto_once,
      file_level_metadata_gg_5fpackets_2eproto[66]);
}

// ===================================================================

class GGEventManagerTagTeamRegisterPacket::_Internal {
 public:
};

GGEventManagerTagTeamRegisterPacket::GGEventManagerTagTeamRegisterPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GGEventManagerTagTeamRegisterPacket)
}
GGEventManagerTagTeamRegisterPacket::GGEventManagerTagTeamRegisterPacket(const GGEventManagerTagTeamRegisterPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GGEventManagerTagTeamRegisterPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pid1_){}
    , decltype(_impl_.pid2_){}
    , decltype(_impl_.groupidx_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.pid1_, &from._impl_.pid1_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.groupidx_) -
    reinterpret_cast<char*>(&_impl_.pid1_)) + sizeof(_impl_.groupidx_));
  // @@protoc_insertion_point(copy_constructor:network.GGEventManagerTagTeamRegisterPacket)
}

inline void GGEventManagerTagTeamRegisterPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pid1_){0u}
    , decltype(_impl_.pid2_){0u}
    , decltype(_impl_.groupidx_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GGEventManagerTagTeamRegisterPacket::~GGEventManagerTagTeamRegisterPacket() {
  // @@protoc_insertion_point(destructor:network.GGEventManagerTagTeamRegisterPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GGEventManagerTagTeamRegisterPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GGEventManagerTagTeamRegisterPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GGEventManagerTagTeamRegisterPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GGEventManagerTagTeamRegisterPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.pid1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.groupidx_) -
      reinterpret_cast<char*>(&_impl_.pid1_)) + sizeof(_impl_.groupidx_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GGEventManagerTagTeamRegisterPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 pid1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pid1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 pid2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.pid2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 groupidx = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.groupidx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GGEventManagerTagTeamRegisterPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GGEventManagerTagTeamRegisterPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pid1 = 1;
  if (this->_internal_pid1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pid1(), target);
  }

  // uint32 pid2 = 2;
  if (this->_internal_pid2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_pid2(), target);
  }

  // uint32 groupidx = 3;
  if (this->_internal_groupidx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_groupidx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GGEventManagerTagTeamRegisterPacket)
  return target;
}

size_t GGEventManagerTagTeamRegisterPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GGEventManagerTagTeamRegisterPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 pid1 = 1;
  if (this->_internal_pid1() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid1());
  }

  // uint32 pid2 = 2;
  if (this->_internal_pid2() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid2());
  }

  // uint32 groupidx = 3;
  if (this->_internal_groupidx() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_groupidx());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GGEventManagerTagTeamRegisterPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GGEventManagerTagTeamRegisterPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GGEventManagerTagTeamRegisterPacket::GetClassData() const { return &_class_data_; }


void GGEventManagerTagTeamRegisterPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GGEventManagerTagTeamRegisterPacket*>(&to_msg);
  auto& from = static_cast<const GGEventManagerTagTeamRegisterPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GGEventManagerTagTeamRegisterPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_pid1() != 0) {
    _this->_internal_set_pid1(from._internal_pid1());
  }
  if (from._internal_pid2() != 0) {
    _this->_internal_set_pid2(from._internal_pid2());
  }
  if (from._internal_groupidx() != 0) {
    _this->_internal_set_groupidx(from._internal_groupidx());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GGEventManagerTagTeamRegisterPacket::CopyFrom(const GGEventManagerTagTeamRegisterPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GGEventManagerTagTeamRegisterPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GGEventManagerTagTeamRegisterPacket::IsInitialized() const {
  return true;
}

void GGEventManagerTagTeamRegisterPacket::InternalSwap(GGEventManagerTagTeamRegisterPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GGEventManagerTagTeamRegisterPacket, _impl_.groupidx_)
      + sizeof(GGEventManagerTagTeamRegisterPacket::_impl_.groupidx_)
      - PROTOBUF_FIELD_OFFSET(GGEventManagerTagTeamRegisterPacket, _impl_.pid1_)>(
          reinterpret_cast<char*>(&_impl_.pid1_),
          reinterpret_cast<char*>(&other->_impl_.pid1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GGEventManagerTagTeamRegisterPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gg_5fpackets_2eproto_getter, &descriptor_table_gg_5fpackets_2eproto_once,
      file_level_metadata_gg_5fpackets_2eproto[67]);
}

// ===================================================================

class GGEventManagerTagTeamUnregisterPacket::_Internal {
 public:
};

GGEventManagerTagTeamUnregisterPacket::GGEventManagerTagTeamUnregisterPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GGEventManagerTagTeamUnregisterPacket)
}
GGEventManagerTagTeamUnregisterPacket::GGEventManagerTagTeamUnregisterPacket(const GGEventManagerTagTeamUnregisterPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GGEventManagerTagTeamUnregisterPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pid1_){}
    , decltype(_impl_.pid2_){}
    , decltype(_impl_.groupidx_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.pid1_, &from._impl_.pid1_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.groupidx_) -
    reinterpret_cast<char*>(&_impl_.pid1_)) + sizeof(_impl_.groupidx_));
  // @@protoc_insertion_point(copy_constructor:network.GGEventManagerTagTeamUnregisterPacket)
}

inline void GGEventManagerTagTeamUnregisterPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pid1_){0u}
    , decltype(_impl_.pid2_){0u}
    , decltype(_impl_.groupidx_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GGEventManagerTagTeamUnregisterPacket::~GGEventManagerTagTeamUnregisterPacket() {
  // @@protoc_insertion_point(destructor:network.GGEventManagerTagTeamUnregisterPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GGEventManagerTagTeamUnregisterPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GGEventManagerTagTeamUnregisterPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GGEventManagerTagTeamUnregisterPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GGEventManagerTagTeamUnregisterPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.pid1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.groupidx_) -
      reinterpret_cast<char*>(&_impl_.pid1_)) + sizeof(_impl_.groupidx_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GGEventManagerTagTeamUnregisterPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 pid1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pid1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 pid2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.pid2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 groupidx = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.groupidx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GGEventManagerTagTeamUnregisterPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GGEventManagerTagTeamUnregisterPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pid1 = 1;
  if (this->_internal_pid1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pid1(), target);
  }

  // uint32 pid2 = 2;
  if (this->_internal_pid2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_pid2(), target);
  }

  // uint32 groupidx = 3;
  if (this->_internal_groupidx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_groupidx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GGEventManagerTagTeamUnregisterPacket)
  return target;
}

size_t GGEventManagerTagTeamUnregisterPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GGEventManagerTagTeamUnregisterPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 pid1 = 1;
  if (this->_internal_pid1() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid1());
  }

  // uint32 pid2 = 2;
  if (this->_internal_pid2() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid2());
  }

  // uint32 groupidx = 3;
  if (this->_internal_groupidx() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_groupidx());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GGEventManagerTagTeamUnregisterPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GGEventManagerTagTeamUnregisterPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GGEventManagerTagTeamUnregisterPacket::GetClassData() const { return &_class_data_; }


void GGEventManagerTagTeamUnregisterPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GGEventManagerTagTeamUnregisterPacket*>(&to_msg);
  auto& from = static_cast<const GGEventManagerTagTeamUnregisterPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GGEventManagerTagTeamUnregisterPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_pid1() != 0) {
    _this->_internal_set_pid1(from._internal_pid1());
  }
  if (from._internal_pid2() != 0) {
    _this->_internal_set_pid2(from._internal_pid2());
  }
  if (from._internal_groupidx() != 0) {
    _this->_internal_set_groupidx(from._internal_groupidx());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GGEventManagerTagTeamUnregisterPacket::CopyFrom(const GGEventManagerTagTeamUnregisterPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GGEventManagerTagTeamUnregisterPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GGEventManagerTagTeamUnregisterPacket::IsInitialized() const {
  return true;
}

void GGEventManagerTagTeamUnregisterPacket::InternalSwap(GGEventManagerTagTeamUnregisterPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GGEventManagerTagTeamUnregisterPacket, _impl_.groupidx_)
      + sizeof(GGEventManagerTagTeamUnregisterPacket::_impl_.groupidx_)
      - PROTOBUF_FIELD_OFFSET(GGEventManagerTagTeamUnregisterPacket, _impl_.pid1_)>(
          reinterpret_cast<char*>(&_impl_.pid1_),
          reinterpret_cast<char*>(&other->_impl_.pid1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GGEventManagerTagTeamUnregisterPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gg_5fpackets_2eproto_getter, &descriptor_table_gg_5fpackets_2eproto_once,
      file_level_metadata_gg_5fpackets_2eproto[68]);
}

// ===================================================================

class GGEventManagerTagTeamCreatePacket::_Internal {
 public:
};

void GGEventManagerTagTeamCreatePacket::clear_teams() {
  _impl_.teams_.Clear();
}
GGEventManagerTagTeamCreatePacket::GGEventManagerTagTeamCreatePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GGEventManagerTagTeamCreatePacket)
}
GGEventManagerTagTeamCreatePacket::GGEventManagerTagTeamCreatePacket(const GGEventManagerTagTeamCreatePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GGEventManagerTagTeamCreatePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.teams_){from._impl_.teams_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:network.GGEventManagerTagTeamCreatePacket)
}

inline void GGEventManagerTagTeamCreatePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.teams_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GGEventManagerTagTeamCreatePacket::~GGEventManagerTagTeamCreatePacket() {
  // @@protoc_insertion_point(destructor:network.GGEventManagerTagTeamCreatePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GGEventManagerTagTeamCreatePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.teams_.~RepeatedPtrField();
}

void GGEventManagerTagTeamCreatePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GGEventManagerTagTeamCreatePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GGEventManagerTagTeamCreatePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.teams_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GGEventManagerTagTeamCreatePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .network.TEventManagerTagTeam teams = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_teams(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GGEventManagerTagTeamCreatePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GGEventManagerTagTeamCreatePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .network.TEventManagerTagTeam teams = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_teams_size()); i < n; i++) {
    const auto& repfield = this->_internal_teams(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GGEventManagerTagTeamCreatePacket)
  return target;
}

size_t GGEventManagerTagTeamCreatePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GGEventManagerTagTeamCreatePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .network.TEventManagerTagTeam teams = 1;
  total_size += 1UL * this->_internal_teams_size();
  for (const auto& msg : this->_impl_.teams_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GGEventManagerTagTeamCreatePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GGEventManagerTagTeamCreatePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GGEventManagerTagTeamCreatePacket::GetClassData() const { return &_class_data_; }


void GGEventManagerTagTeamCreatePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GGEventManagerTagTeamCreatePacket*>(&to_msg);
  auto& from = static_cast<const GGEventManagerTagTeamCreatePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GGEventManagerTagTeamCreatePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.teams_.MergeFrom(from._impl_.teams_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GGEventManagerTagTeamCreatePacket::CopyFrom(const GGEventManagerTagTeamCreatePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GGEventManagerTagTeamCreatePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GGEventManagerTagTeamCreatePacket::IsInitialized() const {
  return true;
}

void GGEventManagerTagTeamCreatePacket::InternalSwap(GGEventManagerTagTeamCreatePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.teams_.InternalSwap(&other->_impl_.teams_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GGEventManagerTagTeamCreatePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gg_5fpackets_2eproto_getter, &descriptor_table_gg_5fpackets_2eproto_once,
      file_level_metadata_gg_5fpackets_2eproto[69]);
}

// ===================================================================

class GGGuildChatPacket::_Internal {
 public:
};

GGGuildChatPacket::GGGuildChatPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GGGuildChatPacket)
}
GGGuildChatPacket::GGGuildChatPacket(const GGGuildChatPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GGGuildChatPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.guild_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.guild_id_ = from._impl_.guild_id_;
  // @@protoc_insertion_point(copy_constructor:network.GGGuildChatPacket)
}

inline void GGGuildChatPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.guild_id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GGGuildChatPacket::~GGGuildChatPacket() {
  // @@protoc_insertion_point(destructor:network.GGGuildChatPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GGGuildChatPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
}

void GGGuildChatPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GGGuildChatPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GGGuildChatPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  _impl_.guild_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GGGuildChatPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 guild_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GGGuildChatPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GGGuildChatPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 guild_id = 1;
  if (this->_internal_guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_guild_id(), target);
  }

  // bytes message = 2;
  if (!this->_internal_message().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GGGuildChatPacket)
  return target;
}

size_t GGGuildChatPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GGGuildChatPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_message());
  }

  // uint32 guild_id = 1;
  if (this->_internal_guild_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_guild_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GGGuildChatPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GGGuildChatPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GGGuildChatPacket::GetClassData() const { return &_class_data_; }


void GGGuildChatPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GGGuildChatPacket*>(&to_msg);
  auto& from = static_cast<const GGGuildChatPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GGGuildChatPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_guild_id() != 0) {
    _this->_internal_set_guild_id(from._internal_guild_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GGGuildChatPacket::CopyFrom(const GGGuildChatPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GGGuildChatPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GGGuildChatPacket::IsInitialized() const {
  return true;
}

void GGGuildChatPacket::InternalSwap(GGGuildChatPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  swap(_impl_.guild_id_, other->_impl_.guild_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GGGuildChatPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gg_5fpackets_2eproto_getter, &descriptor_table_gg_5fpackets_2eproto_once,
      file_level_metadata_gg_5fpackets_2eproto[70]);
}

// ===================================================================

class GGGuildSetMemberCountBonusPacket::_Internal {
 public:
};

GGGuildSetMemberCountBonusPacket::GGGuildSetMemberCountBonusPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GGGuildSetMemberCountBonusPacket)
}
GGGuildSetMemberCountBonusPacket::GGGuildSetMemberCountBonusPacket(const GGGuildSetMemberCountBonusPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GGGuildSetMemberCountBonusPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.guild_id_){}
    , decltype(_impl_.bonus_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.guild_id_, &from._impl_.guild_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.bonus_) -
    reinterpret_cast<char*>(&_impl_.guild_id_)) + sizeof(_impl_.bonus_));
  // @@protoc_insertion_point(copy_constructor:network.GGGuildSetMemberCountBonusPacket)
}

inline void GGGuildSetMemberCountBonusPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.guild_id_){0u}
    , decltype(_impl_.bonus_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GGGuildSetMemberCountBonusPacket::~GGGuildSetMemberCountBonusPacket() {
  // @@protoc_insertion_point(destructor:network.GGGuildSetMemberCountBonusPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GGGuildSetMemberCountBonusPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GGGuildSetMemberCountBonusPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GGGuildSetMemberCountBonusPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GGGuildSetMemberCountBonusPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.guild_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.bonus_) -
      reinterpret_cast<char*>(&_impl_.guild_id_)) + sizeof(_impl_.bonus_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GGGuildSetMemberCountBonusPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 guild_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 bonus = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.bonus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GGGuildSetMemberCountBonusPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GGGuildSetMemberCountBonusPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 guild_id = 1;
  if (this->_internal_guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_guild_id(), target);
  }

  // int32 bonus = 2;
  if (this->_internal_bonus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_bonus(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GGGuildSetMemberCountBonusPacket)
  return target;
}

size_t GGGuildSetMemberCountBonusPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GGGuildSetMemberCountBonusPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 guild_id = 1;
  if (this->_internal_guild_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_guild_id());
  }

  // int32 bonus = 2;
  if (this->_internal_bonus() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_bonus());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GGGuildSetMemberCountBonusPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GGGuildSetMemberCountBonusPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GGGuildSetMemberCountBonusPacket::GetClassData() const { return &_class_data_; }


void GGGuildSetMemberCountBonusPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GGGuildSetMemberCountBonusPacket*>(&to_msg);
  auto& from = static_cast<const GGGuildSetMemberCountBonusPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GGGuildSetMemberCountBonusPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_guild_id() != 0) {
    _this->_internal_set_guild_id(from._internal_guild_id());
  }
  if (from._internal_bonus() != 0) {
    _this->_internal_set_bonus(from._internal_bonus());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GGGuildSetMemberCountBonusPacket::CopyFrom(const GGGuildSetMemberCountBonusPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GGGuildSetMemberCountBonusPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GGGuildSetMemberCountBonusPacket::IsInitialized() const {
  return true;
}

void GGGuildSetMemberCountBonusPacket::InternalSwap(GGGuildSetMemberCountBonusPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GGGuildSetMemberCountBonusPacket, _impl_.bonus_)
      + sizeof(GGGuildSetMemberCountBonusPacket::_impl_.bonus_)
      - PROTOBUF_FIELD_OFFSET(GGGuildSetMemberCountBonusPacket, _impl_.guild_id_)>(
          reinterpret_cast<char*>(&_impl_.guild_id_),
          reinterpret_cast<char*>(&other->_impl_.guild_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GGGuildSetMemberCountBonusPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gg_5fpackets_2eproto_getter, &descriptor_table_gg_5fpackets_2eproto_once,
      file_level_metadata_gg_5fpackets_2eproto[71]);
}

// ===================================================================

class GGGuildWarZoneMapIndexPacket::_Internal {
 public:
};

GGGuildWarZoneMapIndexPacket::GGGuildWarZoneMapIndexPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GGGuildWarZoneMapIndexPacket)
}
GGGuildWarZoneMapIndexPacket::GGGuildWarZoneMapIndexPacket(const GGGuildWarZoneMapIndexPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GGGuildWarZoneMapIndexPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.guild_id1_){}
    , decltype(_impl_.guild_id2_){}
    , decltype(_impl_.map_index_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.guild_id1_, &from._impl_.guild_id1_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.map_index_) -
    reinterpret_cast<char*>(&_impl_.guild_id1_)) + sizeof(_impl_.map_index_));
  // @@protoc_insertion_point(copy_constructor:network.GGGuildWarZoneMapIndexPacket)
}

inline void GGGuildWarZoneMapIndexPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.guild_id1_){0u}
    , decltype(_impl_.guild_id2_){0u}
    , decltype(_impl_.map_index_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GGGuildWarZoneMapIndexPacket::~GGGuildWarZoneMapIndexPacket() {
  // @@protoc_insertion_point(destructor:network.GGGuildWarZoneMapIndexPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GGGuildWarZoneMapIndexPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GGGuildWarZoneMapIndexPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GGGuildWarZoneMapIndexPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GGGuildWarZoneMapIndexPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.guild_id1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.map_index_) -
      reinterpret_cast<char*>(&_impl_.guild_id1_)) + sizeof(_impl_.map_index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GGGuildWarZoneMapIndexPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 guild_id1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.guild_id1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 guild_id2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.guild_id2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 map_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.map_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GGGuildWarZoneMapIndexPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GGGuildWarZoneMapIndexPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 guild_id1 = 1;
  if (this->_internal_guild_id1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_guild_id1(), target);
  }

  // uint32 guild_id2 = 2;
  if (this->_internal_guild_id2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_guild_id2(), target);
  }

  // uint32 map_index = 3;
  if (this->_internal_map_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_map_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GGGuildWarZoneMapIndexPacket)
  return target;
}

size_t GGGuildWarZoneMapIndexPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GGGuildWarZoneMapIndexPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 guild_id1 = 1;
  if (this->_internal_guild_id1() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_guild_id1());
  }

  // uint32 guild_id2 = 2;
  if (this->_internal_guild_id2() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_guild_id2());
  }

  // uint32 map_index = 3;
  if (this->_internal_map_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_map_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GGGuildWarZoneMapIndexPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GGGuildWarZoneMapIndexPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GGGuildWarZoneMapIndexPacket::GetClassData() const { return &_class_data_; }


void GGGuildWarZoneMapIndexPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GGGuildWarZoneMapIndexPacket*>(&to_msg);
  auto& from = static_cast<const GGGuildWarZoneMapIndexPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GGGuildWarZoneMapIndexPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_guild_id1() != 0) {
    _this->_internal_set_guild_id1(from._internal_guild_id1());
  }
  if (from._internal_guild_id2() != 0) {
    _this->_internal_set_guild_id2(from._internal_guild_id2());
  }
  if (from._internal_map_index() != 0) {
    _this->_internal_set_map_index(from._internal_map_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GGGuildWarZoneMapIndexPacket::CopyFrom(const GGGuildWarZoneMapIndexPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GGGuildWarZoneMapIndexPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GGGuildWarZoneMapIndexPacket::IsInitialized() const {
  return true;
}

void GGGuildWarZoneMapIndexPacket::InternalSwap(GGGuildWarZoneMapIndexPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GGGuildWarZoneMapIndexPacket, _impl_.map_index_)
      + sizeof(GGGuildWarZoneMapIndexPacket::_impl_.map_index_)
      - PROTOBUF_FIELD_OFFSET(GGGuildWarZoneMapIndexPacket, _impl_.guild_id1_)>(
          reinterpret_cast<char*>(&_impl_.guild_id1_),
          reinterpret_cast<char*>(&other->_impl_.guild_id1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GGGuildWarZoneMapIndexPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gg_5fpackets_2eproto_getter, &descriptor_table_gg_5fpackets_2eproto_once,
      file_level_metadata_gg_5fpackets_2eproto[72]);
}

// ===================================================================

class GGGuildChangeNamePacket::_Internal {
 public:
};

GGGuildChangeNamePacket::GGGuildChangeNamePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GGGuildChangeNamePacket)
}
GGGuildChangeNamePacket::GGGuildChangeNamePacket(const GGGuildChangeNamePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GGGuildChangeNamePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.guild_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.guild_id_ = from._impl_.guild_id_;
  // @@protoc_insertion_point(copy_constructor:network.GGGuildChangeNamePacket)
}

inline void GGGuildChangeNamePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.guild_id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GGGuildChangeNamePacket::~GGGuildChangeNamePacket() {
  // @@protoc_insertion_point(destructor:network.GGGuildChangeNamePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GGGuildChangeNamePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void GGGuildChangeNamePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GGGuildChangeNamePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GGGuildChangeNamePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.guild_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GGGuildChangeNamePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 guild_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GGGuildChangeNamePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GGGuildChangeNamePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 guild_id = 1;
  if (this->_internal_guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_guild_id(), target);
  }

  // bytes name = 2;
  if (!this->_internal_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GGGuildChangeNamePacket)
  return target;
}

size_t GGGuildChangeNamePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GGGuildChangeNamePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // uint32 guild_id = 1;
  if (this->_internal_guild_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_guild_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GGGuildChangeNamePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GGGuildChangeNamePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GGGuildChangeNamePacket::GetClassData() const { return &_class_data_; }


void GGGuildChangeNamePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GGGuildChangeNamePacket*>(&to_msg);
  auto& from = static_cast<const GGGuildChangeNamePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GGGuildChangeNamePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_guild_id() != 0) {
    _this->_internal_set_guild_id(from._internal_guild_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GGGuildChangeNamePacket::CopyFrom(const GGGuildChangeNamePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GGGuildChangeNamePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GGGuildChangeNamePacket::IsInitialized() const {
  return true;
}

void GGGuildChangeNamePacket::InternalSwap(GGGuildChangeNamePacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.guild_id_, other->_impl_.guild_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GGGuildChangeNamePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gg_5fpackets_2eproto_getter, &descriptor_table_gg_5fpackets_2eproto_once,
      file_level_metadata_gg_5fpackets_2eproto[73]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace network
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::network::GGSetupPacket*
Arena::CreateMaybeMessage< ::network::GGSetupPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GGSetupPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GGLoginPacket*
Arena::CreateMaybeMessage< ::network::GGLoginPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GGLoginPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GGLogoutPacket*
Arena::CreateMaybeMessage< ::network::GGLogoutPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GGLogoutPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GGRelayPacket*
Arena::CreateMaybeMessage< ::network::GGRelayPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GGRelayPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GGPlayerPacket*
Arena::CreateMaybeMessage< ::network::GGPlayerPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GGPlayerPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GGDisconnectPacket*
Arena::CreateMaybeMessage< ::network::GGDisconnectPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GGDisconnectPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GGLoginPingPacket*
Arena::CreateMaybeMessage< ::network::GGLoginPingPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GGLoginPingPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GGGiveItemPacket*
Arena::CreateMaybeMessage< ::network::GGGiveItemPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GGGiveItemPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GGGiveGoldPacket*
Arena::CreateMaybeMessage< ::network::GGGiveGoldPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GGGiveGoldPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GGShoutPacket*
Arena::CreateMaybeMessage< ::network::GGShoutPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GGShoutPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GGNoticePacket*
Arena::CreateMaybeMessage< ::network::GGNoticePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GGNoticePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GGSuccessNoticePacket*
Arena::CreateMaybeMessage< ::network::GGSuccessNoticePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GGSuccessNoticePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GGMessengerRequestPacket*
Arena::CreateMaybeMessage< ::network::GGMessengerRequestPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GGMessengerRequestPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GGMessengerRequestFailPacket*
Arena::CreateMaybeMessage< ::network::GGMessengerRequestFailPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GGMessengerRequestFailPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GGMessengerAddPacket*
Arena::CreateMaybeMessage< ::network::GGMessengerAddPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GGMessengerAddPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GGMessengerRemovePacket*
Arena::CreateMaybeMessage< ::network::GGMessengerRemovePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GGMessengerRemovePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GGMessengerBlockAddPacket*
Arena::CreateMaybeMessage< ::network::GGMessengerBlockAddPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GGMessengerBlockAddPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GGMessengerBlockRemovePacket*
Arena::CreateMaybeMessage< ::network::GGMessengerBlockRemovePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GGMessengerBlockRemovePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GGFindPositionPacket*
Arena::CreateMaybeMessage< ::network::GGFindPositionPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GGFindPositionPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GGWarpCharacterPacket*
Arena::CreateMaybeMessage< ::network::GGWarpCharacterPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GGWarpCharacterPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GGXmasWarpSantaPacket*
Arena::CreateMaybeMessage< ::network::GGXmasWarpSantaPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GGXmasWarpSantaPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GGXmasWarpSantaReplyPacket*
Arena::CreateMaybeMessage< ::network::GGXmasWarpSantaReplyPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GGXmasWarpSantaReplyPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GGBlockChatPacket*
Arena::CreateMaybeMessage< ::network::GGBlockChatPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GGBlockChatPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GGCastleSiegePacket*
Arena::CreateMaybeMessage< ::network::GGCastleSiegePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GGCastleSiegePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GGPCBangUpdatePacket*
Arena::CreateMaybeMessage< ::network::GGPCBangUpdatePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GGPCBangUpdatePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GGWhisperManagerAddPacket*
Arena::CreateMaybeMessage< ::network::GGWhisperManagerAddPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GGWhisperManagerAddPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GGTeamlerStatusPacket*
Arena::CreateMaybeMessage< ::network::GGTeamlerStatusPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GGTeamlerStatusPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GGRequestDungeonWarpPacket*
Arena::CreateMaybeMessage< ::network::GGRequestDungeonWarpPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GGRequestDungeonWarpPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GGAnswerDungeonWarpPacket*
Arena::CreateMaybeMessage< ::network::GGAnswerDungeonWarpPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GGAnswerDungeonWarpPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GGDungeonSetFlagPacket*
Arena::CreateMaybeMessage< ::network::GGDungeonSetFlagPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GGDungeonSetFlagPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GGExecReloadCommandPacket*
Arena::CreateMaybeMessage< ::network::GGExecReloadCommandPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GGExecReloadCommandPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GGRecvShutdownPacket*
Arena::CreateMaybeMessage< ::network::GGRecvShutdownPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GGRecvShutdownPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GGTransferPacket*
Arena::CreateMaybeMessage< ::network::GGTransferPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GGTransferPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GGForceItemDeletePacket*
Arena::CreateMaybeMessage< ::network::GGForceItemDeletePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GGForceItemDeletePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GGTeamChatPacket*
Arena::CreateMaybeMessage< ::network::GGTeamChatPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GGTeamChatPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GGCombatZoneRankingPacket*
Arena::CreateMaybeMessage< ::network::GGCombatZoneRankingPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GGCombatZoneRankingPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GGUpdateRightsPacket*
Arena::CreateMaybeMessage< ::network::GGUpdateRightsPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GGUpdateRightsPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GGFlushPlayerPacket*
Arena::CreateMaybeMessage< ::network::GGFlushPlayerPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GGFlushPlayerPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GGHomepageCommandPacket*
Arena::CreateMaybeMessage< ::network::GGHomepageCommandPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GGHomepageCommandPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GGPullOfflineMessagesPacket*
Arena::CreateMaybeMessage< ::network::GGPullOfflineMessagesPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GGPullOfflineMessagesPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GGDmgRankingUpdatePacket_Entry*
Arena::CreateMaybeMessage< ::network::GGDmgRankingUpdatePacket_Entry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GGDmgRankingUpdatePacket_Entry >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GGDmgRankingUpdatePacket*
Arena::CreateMaybeMessage< ::network::GGDmgRankingUpdatePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GGDmgRankingUpdatePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GGLocaleUpdateLastUsagePacket*
Arena::CreateMaybeMessage< ::network::GGLocaleUpdateLastUsagePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GGLocaleUpdateLastUsagePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GGReloadCommandPacket*
Arena::CreateMaybeMessage< ::network::GGReloadCommandPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GGReloadCommandPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GGAuctionInsertItemPacket*
Arena::CreateMaybeMessage< ::network::GGAuctionInsertItemPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GGAuctionInsertItemPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GGAuctionTakeItemPacket*
Arena::CreateMaybeMessage< ::network::GGAuctionTakeItemPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GGAuctionTakeItemPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GGAuctionBuyItemPacket*
Arena::CreateMaybeMessage< ::network::GGAuctionBuyItemPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GGAuctionBuyItemPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GGAuctionTakeGoldPacket*
Arena::CreateMaybeMessage< ::network::GGAuctionTakeGoldPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GGAuctionTakeGoldPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GGAuctionSearchItemsPacket*
Arena::CreateMaybeMessage< ::network::GGAuctionSearchItemsPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GGAuctionSearchItemsPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GGAuctionExtendedSearchItemsPacket*
Arena::CreateMaybeMessage< ::network::GGAuctionExtendedSearchItemsPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GGAuctionExtendedSearchItemsPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GGAuctionMarkShopPacket*
Arena::CreateMaybeMessage< ::network::GGAuctionMarkShopPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GGAuctionMarkShopPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GGAuctionAnswerMarkShopPacket*
Arena::CreateMaybeMessage< ::network::GGAuctionAnswerMarkShopPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GGAuctionAnswerMarkShopPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GGAuctionShopRequestShowPacket*
Arena::CreateMaybeMessage< ::network::GGAuctionShopRequestShowPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GGAuctionShopRequestShowPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GGAuctionShopOpenPacket*
Arena::CreateMaybeMessage< ::network::GGAuctionShopOpenPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GGAuctionShopOpenPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GGAuctionShopTakeGoldPacket*
Arena::CreateMaybeMessage< ::network::GGAuctionShopTakeGoldPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GGAuctionShopTakeGoldPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GGAuctionShopSpawnPacket*
Arena::CreateMaybeMessage< ::network::GGAuctionShopSpawnPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GGAuctionShopSpawnPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GGAuctionShopDespawnPacket*
Arena::CreateMaybeMessage< ::network::GGAuctionShopDespawnPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GGAuctionShopDespawnPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GGAuctionShopViewPacket*
Arena::CreateMaybeMessage< ::network::GGAuctionShopViewPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GGAuctionShopViewPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GGAuctionShopViewCancelPacket*
Arena::CreateMaybeMessage< ::network::GGAuctionShopViewCancelPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GGAuctionShopViewCancelPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GGAuctionShopRequestHistoryPacket*
Arena::CreateMaybeMessage< ::network::GGAuctionShopRequestHistoryPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GGAuctionShopRequestHistoryPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GGAuctionShopRenewPacket*
Arena::CreateMaybeMessage< ::network::GGAuctionShopRenewPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GGAuctionShopRenewPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GGAuctionShopClosePacket*
Arena::CreateMaybeMessage< ::network::GGAuctionShopClosePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GGAuctionShopClosePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GGAuctionRequestAveragePricePacket*
Arena::CreateMaybeMessage< ::network::GGAuctionRequestAveragePricePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GGAuctionRequestAveragePricePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GGEventManagerOpenRegistrationPacket*
Arena::CreateMaybeMessage< ::network::GGEventManagerOpenRegistrationPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GGEventManagerOpenRegistrationPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GGEventManagerCloseRegistrationPacket*
Arena::CreateMaybeMessage< ::network::GGEventManagerCloseRegistrationPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GGEventManagerCloseRegistrationPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GGEventManagerIgnorePlayerPacket*
Arena::CreateMaybeMessage< ::network::GGEventManagerIgnorePlayerPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GGEventManagerIgnorePlayerPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GGEventManagerOpenAnnouncementPacket*
Arena::CreateMaybeMessage< ::network::GGEventManagerOpenAnnouncementPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GGEventManagerOpenAnnouncementPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GGEventManagerTagTeamRegisterPacket*
Arena::CreateMaybeMessage< ::network::GGEventManagerTagTeamRegisterPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GGEventManagerTagTeamRegisterPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GGEventManagerTagTeamUnregisterPacket*
Arena::CreateMaybeMessage< ::network::GGEventManagerTagTeamUnregisterPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GGEventManagerTagTeamUnregisterPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GGEventManagerTagTeamCreatePacket*
Arena::CreateMaybeMessage< ::network::GGEventManagerTagTeamCreatePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GGEventManagerTagTeamCreatePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GGGuildChatPacket*
Arena::CreateMaybeMessage< ::network::GGGuildChatPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GGGuildChatPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GGGuildSetMemberCountBonusPacket*
Arena::CreateMaybeMessage< ::network::GGGuildSetMemberCountBonusPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GGGuildSetMemberCountBonusPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GGGuildWarZoneMapIndexPacket*
Arena::CreateMaybeMessage< ::network::GGGuildWarZoneMapIndexPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GGGuildWarZoneMapIndexPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GGGuildChangeNamePacket*
Arena::CreateMaybeMessage< ::network::GGGuildChangeNamePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GGGuildChangeNamePacket >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
