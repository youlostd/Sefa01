// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: data_item.proto

#include "protobuf_data_item.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace network {
PROTOBUF_CONSTEXPR TItemPos::TItemPos(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.window_type_)*/0u
  , /*decltype(_impl_.cell_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TItemPosDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TItemPosDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TItemPosDefaultTypeInternal() {}
  union {
    TItemPos _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TItemPosDefaultTypeInternal _TItemPos_default_instance_;
PROTOBUF_CONSTEXPR TShopItemTable::TShopItemTable(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.owner_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.item_)*/nullptr
  , /*decltype(_impl_.display_pos_)*/0u
  , /*decltype(_impl_.price_item_vnum_)*/0u
  , /*decltype(_impl_.insertion_time_)*/0u
  , /*decltype(_impl_.timeout_time_)*/0u
  , /*decltype(_impl_.auction_type_)*/0u
  , /*decltype(_impl_.map_index_)*/0u
  , /*decltype(_impl_.channel_)*/0u
  , /*decltype(_impl_.price_item_vnum2_)*/0u
  , /*decltype(_impl_.price2_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TShopItemTableDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TShopItemTableDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TShopItemTableDefaultTypeInternal() {}
  union {
    TShopItemTable _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TShopItemTableDefaultTypeInternal _TShopItemTable_default_instance_;
PROTOBUF_CONSTEXPR TShopExTabData::TShopExTabData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.coin_type_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TShopExTabDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TShopExTabDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TShopExTabDataDefaultTypeInternal() {}
  union {
    TShopExTabData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TShopExTabDataDefaultTypeInternal _TShopExTabData_default_instance_;
PROTOBUF_CONSTEXPR TItemDropInfo::TItemDropInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.vnum_)*/0u
  , /*decltype(_impl_.count_)*/0u
  , /*decltype(_impl_.min_level_)*/0
  , /*decltype(_impl_.max_level_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TItemDropInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TItemDropInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TItemDropInfoDefaultTypeInternal() {}
  union {
    TItemDropInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TItemDropInfoDefaultTypeInternal _TItemDropInfo_default_instance_;
PROTOBUF_CONSTEXPR TItemAttribute::TItemAttribute(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_)*/0u
  , /*decltype(_impl_.value_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TItemAttributeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TItemAttributeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TItemAttributeDefaultTypeInternal() {}
  union {
    TItemAttribute _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TItemAttributeDefaultTypeInternal _TItemAttribute_default_instance_;
PROTOBUF_CONSTEXPR TItemData::TItemData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sockets_)*/{}
  , /*decltype(_impl_._sockets_cached_byte_size_)*/{0}
  , /*decltype(_impl_.attributes_)*/{}
  , /*decltype(_impl_.cell_)*/nullptr
  , /*decltype(_impl_.pet_info_)*/nullptr
  , /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_.vnum_)*/0u
  , /*decltype(_impl_.count_)*/0u
  , /*decltype(_impl_.special_flag_)*/0u
  , /*decltype(_impl_.price_)*/int64_t{0}
  , /*decltype(_impl_.owner_)*/0u
  , /*decltype(_impl_.is_gm_owner_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TItemDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TItemDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TItemDataDefaultTypeInternal() {}
  union {
    TItemData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TItemDataDefaultTypeInternal _TItemData_default_instance_;
}  // namespace network
static ::_pb::Metadata file_level_metadata_data_5fitem_2eproto[6];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_data_5fitem_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_data_5fitem_2eproto = nullptr;

const uint32_t TableStruct_data_5fitem_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::TItemPos, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::TItemPos, _impl_.window_type_),
  PROTOBUF_FIELD_OFFSET(::network::TItemPos, _impl_.cell_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::TShopItemTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::TShopItemTable, _impl_.item_),
  PROTOBUF_FIELD_OFFSET(::network::TShopItemTable, _impl_.display_pos_),
  PROTOBUF_FIELD_OFFSET(::network::TShopItemTable, _impl_.price_item_vnum_),
  PROTOBUF_FIELD_OFFSET(::network::TShopItemTable, _impl_.owner_name_),
  PROTOBUF_FIELD_OFFSET(::network::TShopItemTable, _impl_.insertion_time_),
  PROTOBUF_FIELD_OFFSET(::network::TShopItemTable, _impl_.timeout_time_),
  PROTOBUF_FIELD_OFFSET(::network::TShopItemTable, _impl_.auction_type_),
  PROTOBUF_FIELD_OFFSET(::network::TShopItemTable, _impl_.map_index_),
  PROTOBUF_FIELD_OFFSET(::network::TShopItemTable, _impl_.channel_),
  PROTOBUF_FIELD_OFFSET(::network::TShopItemTable, _impl_.price_item_vnum2_),
  PROTOBUF_FIELD_OFFSET(::network::TShopItemTable, _impl_.price2_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::TShopExTabData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::TShopExTabData, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::network::TShopExTabData, _impl_.coin_type_),
  PROTOBUF_FIELD_OFFSET(::network::TShopExTabData, _impl_.items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::TItemDropInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::TItemDropInfo, _impl_.vnum_),
  PROTOBUF_FIELD_OFFSET(::network::TItemDropInfo, _impl_.count_),
  PROTOBUF_FIELD_OFFSET(::network::TItemDropInfo, _impl_.min_level_),
  PROTOBUF_FIELD_OFFSET(::network::TItemDropInfo, _impl_.max_level_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::TItemAttribute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::TItemAttribute, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::network::TItemAttribute, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::TItemData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::TItemData, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::network::TItemData, _impl_.vnum_),
  PROTOBUF_FIELD_OFFSET(::network::TItemData, _impl_.count_),
  PROTOBUF_FIELD_OFFSET(::network::TItemData, _impl_.special_flag_),
  PROTOBUF_FIELD_OFFSET(::network::TItemData, _impl_.sockets_),
  PROTOBUF_FIELD_OFFSET(::network::TItemData, _impl_.attributes_),
  PROTOBUF_FIELD_OFFSET(::network::TItemData, _impl_.cell_),
  PROTOBUF_FIELD_OFFSET(::network::TItemData, _impl_.owner_),
  PROTOBUF_FIELD_OFFSET(::network::TItemData, _impl_.price_),
  PROTOBUF_FIELD_OFFSET(::network::TItemData, _impl_.is_gm_owner_),
  PROTOBUF_FIELD_OFFSET(::network::TItemData, _impl_.pet_info_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::network::TItemPos)},
  { 8, -1, -1, sizeof(::network::TShopItemTable)},
  { 25, -1, -1, sizeof(::network::TShopExTabData)},
  { 34, -1, -1, sizeof(::network::TItemDropInfo)},
  { 44, -1, -1, sizeof(::network::TItemAttribute)},
  { 52, -1, -1, sizeof(::network::TItemData)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::network::_TItemPos_default_instance_._instance,
  &::network::_TShopItemTable_default_instance_._instance,
  &::network::_TShopExTabData_default_instance_._instance,
  &::network::_TItemDropInfo_default_instance_._instance,
  &::network::_TItemAttribute_default_instance_._instance,
  &::network::_TItemData_default_instance_._instance,
};

const char descriptor_table_protodef_data_5fitem_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017data_item.proto\022\007network\032\016data_pet.pro"
  "to\"-\n\010TItemPos\022\023\n\013window_type\030\001 \001(\r\022\014\n\004c"
  "ell\030\002 \001(\r\"\206\002\n\016TShopItemTable\022 \n\004item\030\001 \001"
  "(\0132\022.network.TItemData\022\023\n\013display_pos\030\002 "
  "\001(\r\022\027\n\017price_item_vnum\030\003 \001(\r\022\022\n\nowner_na"
  "me\030\004 \001(\014\022\026\n\016insertion_time\030\005 \001(\r\022\024\n\014time"
  "out_time\030\006 \001(\r\022\024\n\014auction_type\030\007 \001(\r\022\021\n\t"
  "map_index\030\010 \001(\r\022\017\n\007channel\030\t \001(\r\022\030\n\020pric"
  "e_item_vnum2\030\n \001(\r\022\016\n\006price2\030\013 \001(\r\"Y\n\016TS"
  "hopExTabData\022\014\n\004name\030\001 \001(\014\022\021\n\tcoin_type\030"
  "\002 \001(\r\022&\n\005items\030\003 \003(\0132\027.network.TShopItem"
  "Table\"R\n\rTItemDropInfo\022\014\n\004vnum\030\001 \001(\r\022\r\n\005"
  "count\030\002 \001(\r\022\021\n\tmin_level\030\003 \001(\005\022\021\n\tmax_le"
  "vel\030\004 \001(\005\"-\n\016TItemAttribute\022\014\n\004type\030\001 \001("
  "\r\022\r\n\005value\030\002 \001(\021\"\212\002\n\tTItemData\022\n\n\002id\030\001 \001"
  "(\r\022\014\n\004vnum\030\002 \001(\r\022\r\n\005count\030\003 \001(\r\022\024\n\014speci"
  "al_flag\030\004 \001(\r\022\017\n\007sockets\030\005 \003(\021\022+\n\nattrib"
  "utes\030\006 \003(\0132\027.network.TItemAttribute\022\037\n\004c"
  "ell\030\007 \001(\0132\021.network.TItemPos\022\r\n\005owner\030\010 "
  "\001(\r\022\r\n\005price\030\t \001(\003\022\023\n\013is_gm_owner\030\n \001(\010\022"
  ",\n\010pet_info\030\013 \001(\0132\032.network.TPetAdvanced"
  "Tableb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_data_5fitem_2eproto_deps[1] = {
  &::descriptor_table_data_5fpet_2eproto,
};
static ::_pbi::once_flag descriptor_table_data_5fitem_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_data_5fitem_2eproto = {
    false, false, 853, descriptor_table_protodef_data_5fitem_2eproto,
    "data_item.proto",
    &descriptor_table_data_5fitem_2eproto_once, descriptor_table_data_5fitem_2eproto_deps, 1, 6,
    schemas, file_default_instances, TableStruct_data_5fitem_2eproto::offsets,
    file_level_metadata_data_5fitem_2eproto, file_level_enum_descriptors_data_5fitem_2eproto,
    file_level_service_descriptors_data_5fitem_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_data_5fitem_2eproto_getter() {
  return &descriptor_table_data_5fitem_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_data_5fitem_2eproto(&descriptor_table_data_5fitem_2eproto);
namespace network {

// ===================================================================

class TItemPos::_Internal {
 public:
};

TItemPos::TItemPos(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.TItemPos)
}
TItemPos::TItemPos(const TItemPos& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TItemPos* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.window_type_){}
    , decltype(_impl_.cell_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.window_type_, &from._impl_.window_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.cell_) -
    reinterpret_cast<char*>(&_impl_.window_type_)) + sizeof(_impl_.cell_));
  // @@protoc_insertion_point(copy_constructor:network.TItemPos)
}

inline void TItemPos::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.window_type_){0u}
    , decltype(_impl_.cell_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TItemPos::~TItemPos() {
  // @@protoc_insertion_point(destructor:network.TItemPos)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TItemPos::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TItemPos::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TItemPos::Clear() {
// @@protoc_insertion_point(message_clear_start:network.TItemPos)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.window_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.cell_) -
      reinterpret_cast<char*>(&_impl_.window_type_)) + sizeof(_impl_.cell_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TItemPos::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 window_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.window_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 cell = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.cell_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TItemPos::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.TItemPos)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 window_type = 1;
  if (this->_internal_window_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_window_type(), target);
  }

  // uint32 cell = 2;
  if (this->_internal_cell() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_cell(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.TItemPos)
  return target;
}

size_t TItemPos::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.TItemPos)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 window_type = 1;
  if (this->_internal_window_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_window_type());
  }

  // uint32 cell = 2;
  if (this->_internal_cell() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_cell());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TItemPos::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TItemPos::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TItemPos::GetClassData() const { return &_class_data_; }


void TItemPos::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TItemPos*>(&to_msg);
  auto& from = static_cast<const TItemPos&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.TItemPos)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_window_type() != 0) {
    _this->_internal_set_window_type(from._internal_window_type());
  }
  if (from._internal_cell() != 0) {
    _this->_internal_set_cell(from._internal_cell());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TItemPos::CopyFrom(const TItemPos& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.TItemPos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TItemPos::IsInitialized() const {
  return true;
}

void TItemPos::InternalSwap(TItemPos* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TItemPos, _impl_.cell_)
      + sizeof(TItemPos::_impl_.cell_)
      - PROTOBUF_FIELD_OFFSET(TItemPos, _impl_.window_type_)>(
          reinterpret_cast<char*>(&_impl_.window_type_),
          reinterpret_cast<char*>(&other->_impl_.window_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TItemPos::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_5fitem_2eproto_getter, &descriptor_table_data_5fitem_2eproto_once,
      file_level_metadata_data_5fitem_2eproto[0]);
}

// ===================================================================

class TShopItemTable::_Internal {
 public:
  static const ::network::TItemData& item(const TShopItemTable* msg);
};

const ::network::TItemData&
TShopItemTable::_Internal::item(const TShopItemTable* msg) {
  return *msg->_impl_.item_;
}
TShopItemTable::TShopItemTable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.TShopItemTable)
}
TShopItemTable::TShopItemTable(const TShopItemTable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TShopItemTable* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.owner_name_){}
    , decltype(_impl_.item_){nullptr}
    , decltype(_impl_.display_pos_){}
    , decltype(_impl_.price_item_vnum_){}
    , decltype(_impl_.insertion_time_){}
    , decltype(_impl_.timeout_time_){}
    , decltype(_impl_.auction_type_){}
    , decltype(_impl_.map_index_){}
    , decltype(_impl_.channel_){}
    , decltype(_impl_.price_item_vnum2_){}
    , decltype(_impl_.price2_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.owner_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.owner_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_owner_name().empty()) {
    _this->_impl_.owner_name_.Set(from._internal_owner_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_item()) {
    _this->_impl_.item_ = new ::network::TItemData(*from._impl_.item_);
  }
  ::memcpy(&_impl_.display_pos_, &from._impl_.display_pos_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.price2_) -
    reinterpret_cast<char*>(&_impl_.display_pos_)) + sizeof(_impl_.price2_));
  // @@protoc_insertion_point(copy_constructor:network.TShopItemTable)
}

inline void TShopItemTable::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.owner_name_){}
    , decltype(_impl_.item_){nullptr}
    , decltype(_impl_.display_pos_){0u}
    , decltype(_impl_.price_item_vnum_){0u}
    , decltype(_impl_.insertion_time_){0u}
    , decltype(_impl_.timeout_time_){0u}
    , decltype(_impl_.auction_type_){0u}
    , decltype(_impl_.map_index_){0u}
    , decltype(_impl_.channel_){0u}
    , decltype(_impl_.price_item_vnum2_){0u}
    , decltype(_impl_.price2_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.owner_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.owner_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TShopItemTable::~TShopItemTable() {
  // @@protoc_insertion_point(destructor:network.TShopItemTable)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TShopItemTable::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.owner_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.item_;
}

void TShopItemTable::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TShopItemTable::Clear() {
// @@protoc_insertion_point(message_clear_start:network.TShopItemTable)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.owner_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.item_ != nullptr) {
    delete _impl_.item_;
  }
  _impl_.item_ = nullptr;
  ::memset(&_impl_.display_pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.price2_) -
      reinterpret_cast<char*>(&_impl_.display_pos_)) + sizeof(_impl_.price2_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TShopItemTable::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .network.TItemData item = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_item(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 display_pos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.display_pos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 price_item_vnum = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.price_item_vnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes owner_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_owner_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 insertion_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.insertion_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 timeout_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.timeout_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 auction_type = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.auction_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 map_index = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.map_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 channel = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 price_item_vnum2 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.price_item_vnum2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 price2 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.price2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TShopItemTable::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.TShopItemTable)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .network.TItemData item = 1;
  if (this->_internal_has_item()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::item(this),
        _Internal::item(this).GetCachedSize(), target, stream);
  }

  // uint32 display_pos = 2;
  if (this->_internal_display_pos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_display_pos(), target);
  }

  // uint32 price_item_vnum = 3;
  if (this->_internal_price_item_vnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_price_item_vnum(), target);
  }

  // bytes owner_name = 4;
  if (!this->_internal_owner_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_owner_name(), target);
  }

  // uint32 insertion_time = 5;
  if (this->_internal_insertion_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_insertion_time(), target);
  }

  // uint32 timeout_time = 6;
  if (this->_internal_timeout_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_timeout_time(), target);
  }

  // uint32 auction_type = 7;
  if (this->_internal_auction_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_auction_type(), target);
  }

  // uint32 map_index = 8;
  if (this->_internal_map_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_map_index(), target);
  }

  // uint32 channel = 9;
  if (this->_internal_channel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_channel(), target);
  }

  // uint32 price_item_vnum2 = 10;
  if (this->_internal_price_item_vnum2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_price_item_vnum2(), target);
  }

  // uint32 price2 = 11;
  if (this->_internal_price2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_price2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.TShopItemTable)
  return target;
}

size_t TShopItemTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.TShopItemTable)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes owner_name = 4;
  if (!this->_internal_owner_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_owner_name());
  }

  // .network.TItemData item = 1;
  if (this->_internal_has_item()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.item_);
  }

  // uint32 display_pos = 2;
  if (this->_internal_display_pos() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_display_pos());
  }

  // uint32 price_item_vnum = 3;
  if (this->_internal_price_item_vnum() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_price_item_vnum());
  }

  // uint32 insertion_time = 5;
  if (this->_internal_insertion_time() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_insertion_time());
  }

  // uint32 timeout_time = 6;
  if (this->_internal_timeout_time() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_timeout_time());
  }

  // uint32 auction_type = 7;
  if (this->_internal_auction_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_auction_type());
  }

  // uint32 map_index = 8;
  if (this->_internal_map_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_map_index());
  }

  // uint32 channel = 9;
  if (this->_internal_channel() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel());
  }

  // uint32 price_item_vnum2 = 10;
  if (this->_internal_price_item_vnum2() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_price_item_vnum2());
  }

  // uint32 price2 = 11;
  if (this->_internal_price2() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_price2());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TShopItemTable::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TShopItemTable::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TShopItemTable::GetClassData() const { return &_class_data_; }


void TShopItemTable::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TShopItemTable*>(&to_msg);
  auto& from = static_cast<const TShopItemTable&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.TShopItemTable)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_owner_name().empty()) {
    _this->_internal_set_owner_name(from._internal_owner_name());
  }
  if (from._internal_has_item()) {
    _this->_internal_mutable_item()->::network::TItemData::MergeFrom(
        from._internal_item());
  }
  if (from._internal_display_pos() != 0) {
    _this->_internal_set_display_pos(from._internal_display_pos());
  }
  if (from._internal_price_item_vnum() != 0) {
    _this->_internal_set_price_item_vnum(from._internal_price_item_vnum());
  }
  if (from._internal_insertion_time() != 0) {
    _this->_internal_set_insertion_time(from._internal_insertion_time());
  }
  if (from._internal_timeout_time() != 0) {
    _this->_internal_set_timeout_time(from._internal_timeout_time());
  }
  if (from._internal_auction_type() != 0) {
    _this->_internal_set_auction_type(from._internal_auction_type());
  }
  if (from._internal_map_index() != 0) {
    _this->_internal_set_map_index(from._internal_map_index());
  }
  if (from._internal_channel() != 0) {
    _this->_internal_set_channel(from._internal_channel());
  }
  if (from._internal_price_item_vnum2() != 0) {
    _this->_internal_set_price_item_vnum2(from._internal_price_item_vnum2());
  }
  if (from._internal_price2() != 0) {
    _this->_internal_set_price2(from._internal_price2());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TShopItemTable::CopyFrom(const TShopItemTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.TShopItemTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TShopItemTable::IsInitialized() const {
  return true;
}

void TShopItemTable::InternalSwap(TShopItemTable* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.owner_name_, lhs_arena,
      &other->_impl_.owner_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TShopItemTable, _impl_.price2_)
      + sizeof(TShopItemTable::_impl_.price2_)
      - PROTOBUF_FIELD_OFFSET(TShopItemTable, _impl_.item_)>(
          reinterpret_cast<char*>(&_impl_.item_),
          reinterpret_cast<char*>(&other->_impl_.item_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TShopItemTable::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_5fitem_2eproto_getter, &descriptor_table_data_5fitem_2eproto_once,
      file_level_metadata_data_5fitem_2eproto[1]);
}

// ===================================================================

class TShopExTabData::_Internal {
 public:
};

TShopExTabData::TShopExTabData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.TShopExTabData)
}
TShopExTabData::TShopExTabData(const TShopExTabData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TShopExTabData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.coin_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.coin_type_ = from._impl_.coin_type_;
  // @@protoc_insertion_point(copy_constructor:network.TShopExTabData)
}

inline void TShopExTabData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.coin_type_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TShopExTabData::~TShopExTabData() {
  // @@protoc_insertion_point(destructor:network.TShopExTabData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TShopExTabData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
  _impl_.name_.Destroy();
}

void TShopExTabData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TShopExTabData::Clear() {
// @@protoc_insertion_point(message_clear_start:network.TShopExTabData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  _impl_.name_.ClearToEmpty();
  _impl_.coin_type_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TShopExTabData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 coin_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.coin_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .network.TShopItemTable items = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TShopExTabData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.TShopExTabData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes name = 1;
  if (!this->_internal_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_name(), target);
  }

  // uint32 coin_type = 2;
  if (this->_internal_coin_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_coin_type(), target);
  }

  // repeated .network.TShopItemTable items = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.TShopExTabData)
  return target;
}

size_t TShopExTabData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.TShopExTabData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .network.TShopItemTable items = 3;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // uint32 coin_type = 2;
  if (this->_internal_coin_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_coin_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TShopExTabData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TShopExTabData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TShopExTabData::GetClassData() const { return &_class_data_; }


void TShopExTabData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TShopExTabData*>(&to_msg);
  auto& from = static_cast<const TShopExTabData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.TShopExTabData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_coin_type() != 0) {
    _this->_internal_set_coin_type(from._internal_coin_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TShopExTabData::CopyFrom(const TShopExTabData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.TShopExTabData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TShopExTabData::IsInitialized() const {
  return true;
}

void TShopExTabData::InternalSwap(TShopExTabData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.coin_type_, other->_impl_.coin_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TShopExTabData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_5fitem_2eproto_getter, &descriptor_table_data_5fitem_2eproto_once,
      file_level_metadata_data_5fitem_2eproto[2]);
}

// ===================================================================

class TItemDropInfo::_Internal {
 public:
};

TItemDropInfo::TItemDropInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.TItemDropInfo)
}
TItemDropInfo::TItemDropInfo(const TItemDropInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TItemDropInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.vnum_){}
    , decltype(_impl_.count_){}
    , decltype(_impl_.min_level_){}
    , decltype(_impl_.max_level_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.vnum_, &from._impl_.vnum_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.max_level_) -
    reinterpret_cast<char*>(&_impl_.vnum_)) + sizeof(_impl_.max_level_));
  // @@protoc_insertion_point(copy_constructor:network.TItemDropInfo)
}

inline void TItemDropInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.vnum_){0u}
    , decltype(_impl_.count_){0u}
    , decltype(_impl_.min_level_){0}
    , decltype(_impl_.max_level_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TItemDropInfo::~TItemDropInfo() {
  // @@protoc_insertion_point(destructor:network.TItemDropInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TItemDropInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TItemDropInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TItemDropInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:network.TItemDropInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.vnum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.max_level_) -
      reinterpret_cast<char*>(&_impl_.vnum_)) + sizeof(_impl_.max_level_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TItemDropInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 vnum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.vnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 min_level = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.min_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 max_level = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.max_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TItemDropInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.TItemDropInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 vnum = 1;
  if (this->_internal_vnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_vnum(), target);
  }

  // uint32 count = 2;
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_count(), target);
  }

  // int32 min_level = 3;
  if (this->_internal_min_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_min_level(), target);
  }

  // int32 max_level = 4;
  if (this->_internal_max_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_max_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.TItemDropInfo)
  return target;
}

size_t TItemDropInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.TItemDropInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 vnum = 1;
  if (this->_internal_vnum() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_vnum());
  }

  // uint32 count = 2;
  if (this->_internal_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_count());
  }

  // int32 min_level = 3;
  if (this->_internal_min_level() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_min_level());
  }

  // int32 max_level = 4;
  if (this->_internal_max_level() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_max_level());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TItemDropInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TItemDropInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TItemDropInfo::GetClassData() const { return &_class_data_; }


void TItemDropInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TItemDropInfo*>(&to_msg);
  auto& from = static_cast<const TItemDropInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.TItemDropInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_vnum() != 0) {
    _this->_internal_set_vnum(from._internal_vnum());
  }
  if (from._internal_count() != 0) {
    _this->_internal_set_count(from._internal_count());
  }
  if (from._internal_min_level() != 0) {
    _this->_internal_set_min_level(from._internal_min_level());
  }
  if (from._internal_max_level() != 0) {
    _this->_internal_set_max_level(from._internal_max_level());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TItemDropInfo::CopyFrom(const TItemDropInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.TItemDropInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TItemDropInfo::IsInitialized() const {
  return true;
}

void TItemDropInfo::InternalSwap(TItemDropInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TItemDropInfo, _impl_.max_level_)
      + sizeof(TItemDropInfo::_impl_.max_level_)
      - PROTOBUF_FIELD_OFFSET(TItemDropInfo, _impl_.vnum_)>(
          reinterpret_cast<char*>(&_impl_.vnum_),
          reinterpret_cast<char*>(&other->_impl_.vnum_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TItemDropInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_5fitem_2eproto_getter, &descriptor_table_data_5fitem_2eproto_once,
      file_level_metadata_data_5fitem_2eproto[3]);
}

// ===================================================================

class TItemAttribute::_Internal {
 public:
};

TItemAttribute::TItemAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.TItemAttribute)
}
TItemAttribute::TItemAttribute(const TItemAttribute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TItemAttribute* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.value_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.value_));
  // @@protoc_insertion_point(copy_constructor:network.TItemAttribute)
}

inline void TItemAttribute::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){0u}
    , decltype(_impl_.value_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TItemAttribute::~TItemAttribute() {
  // @@protoc_insertion_point(destructor:network.TItemAttribute)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TItemAttribute::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TItemAttribute::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TItemAttribute::Clear() {
// @@protoc_insertion_point(message_clear_start:network.TItemAttribute)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.value_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.value_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TItemAttribute::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TItemAttribute::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.TItemAttribute)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // sint32 value = 2;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.TItemAttribute)
  return target;
}

size_t TItemAttribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.TItemAttribute)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
  }

  // sint32 value = 2;
  if (this->_internal_value() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TItemAttribute::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TItemAttribute::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TItemAttribute::GetClassData() const { return &_class_data_; }


void TItemAttribute::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TItemAttribute*>(&to_msg);
  auto& from = static_cast<const TItemAttribute&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.TItemAttribute)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_value() != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TItemAttribute::CopyFrom(const TItemAttribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.TItemAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TItemAttribute::IsInitialized() const {
  return true;
}

void TItemAttribute::InternalSwap(TItemAttribute* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TItemAttribute, _impl_.value_)
      + sizeof(TItemAttribute::_impl_.value_)
      - PROTOBUF_FIELD_OFFSET(TItemAttribute, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TItemAttribute::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_5fitem_2eproto_getter, &descriptor_table_data_5fitem_2eproto_once,
      file_level_metadata_data_5fitem_2eproto[4]);
}

// ===================================================================

class TItemData::_Internal {
 public:
  static const ::network::TItemPos& cell(const TItemData* msg);
  static const ::network::TPetAdvancedTable& pet_info(const TItemData* msg);
};

const ::network::TItemPos&
TItemData::_Internal::cell(const TItemData* msg) {
  return *msg->_impl_.cell_;
}
const ::network::TPetAdvancedTable&
TItemData::_Internal::pet_info(const TItemData* msg) {
  return *msg->_impl_.pet_info_;
}
void TItemData::clear_pet_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.pet_info_ != nullptr) {
    delete _impl_.pet_info_;
  }
  _impl_.pet_info_ = nullptr;
}
TItemData::TItemData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.TItemData)
}
TItemData::TItemData(const TItemData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TItemData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sockets_){from._impl_.sockets_}
    , /*decltype(_impl_._sockets_cached_byte_size_)*/{0}
    , decltype(_impl_.attributes_){from._impl_.attributes_}
    , decltype(_impl_.cell_){nullptr}
    , decltype(_impl_.pet_info_){nullptr}
    , decltype(_impl_.id_){}
    , decltype(_impl_.vnum_){}
    , decltype(_impl_.count_){}
    , decltype(_impl_.special_flag_){}
    , decltype(_impl_.price_){}
    , decltype(_impl_.owner_){}
    , decltype(_impl_.is_gm_owner_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_cell()) {
    _this->_impl_.cell_ = new ::network::TItemPos(*from._impl_.cell_);
  }
  if (from._internal_has_pet_info()) {
    _this->_impl_.pet_info_ = new ::network::TPetAdvancedTable(*from._impl_.pet_info_);
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_gm_owner_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.is_gm_owner_));
  // @@protoc_insertion_point(copy_constructor:network.TItemData)
}

inline void TItemData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.sockets_){arena}
    , /*decltype(_impl_._sockets_cached_byte_size_)*/{0}
    , decltype(_impl_.attributes_){arena}
    , decltype(_impl_.cell_){nullptr}
    , decltype(_impl_.pet_info_){nullptr}
    , decltype(_impl_.id_){0u}
    , decltype(_impl_.vnum_){0u}
    , decltype(_impl_.count_){0u}
    , decltype(_impl_.special_flag_){0u}
    , decltype(_impl_.price_){int64_t{0}}
    , decltype(_impl_.owner_){0u}
    , decltype(_impl_.is_gm_owner_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TItemData::~TItemData() {
  // @@protoc_insertion_point(destructor:network.TItemData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TItemData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sockets_.~RepeatedField();
  _impl_.attributes_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.cell_;
  if (this != internal_default_instance()) delete _impl_.pet_info_;
}

void TItemData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TItemData::Clear() {
// @@protoc_insertion_point(message_clear_start:network.TItemData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sockets_.Clear();
  _impl_.attributes_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.cell_ != nullptr) {
    delete _impl_.cell_;
  }
  _impl_.cell_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.pet_info_ != nullptr) {
    delete _impl_.pet_info_;
  }
  _impl_.pet_info_ = nullptr;
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.is_gm_owner_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.is_gm_owner_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TItemData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 vnum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.vnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 special_flag = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.special_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated sint32 sockets = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSInt32Parser(_internal_mutable_sockets(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 40) {
          _internal_add_sockets(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .network.TItemAttribute attributes = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attributes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .network.TItemPos cell = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 owner = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.owner_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 price = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_gm_owner = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.is_gm_owner_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .network.TPetAdvancedTable pet_info = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_pet_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TItemData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.TItemData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // uint32 vnum = 2;
  if (this->_internal_vnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_vnum(), target);
  }

  // uint32 count = 3;
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_count(), target);
  }

  // uint32 special_flag = 4;
  if (this->_internal_special_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_special_flag(), target);
  }

  // repeated sint32 sockets = 5;
  {
    int byte_size = _impl_._sockets_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteSInt32Packed(
          5, _internal_sockets(), byte_size, target);
    }
  }

  // repeated .network.TItemAttribute attributes = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_attributes_size()); i < n; i++) {
    const auto& repfield = this->_internal_attributes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .network.TItemPos cell = 7;
  if (this->_internal_has_cell()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::cell(this),
        _Internal::cell(this).GetCachedSize(), target, stream);
  }

  // uint32 owner = 8;
  if (this->_internal_owner() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_owner(), target);
  }

  // int64 price = 9;
  if (this->_internal_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(9, this->_internal_price(), target);
  }

  // bool is_gm_owner = 10;
  if (this->_internal_is_gm_owner() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_is_gm_owner(), target);
  }

  // .network.TPetAdvancedTable pet_info = 11;
  if (this->_internal_has_pet_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::pet_info(this),
        _Internal::pet_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.TItemData)
  return target;
}

size_t TItemData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.TItemData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated sint32 sockets = 5;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      SInt32Size(this->_impl_.sockets_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._sockets_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .network.TItemAttribute attributes = 6;
  total_size += 1UL * this->_internal_attributes_size();
  for (const auto& msg : this->_impl_.attributes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .network.TItemPos cell = 7;
  if (this->_internal_has_cell()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cell_);
  }

  // .network.TPetAdvancedTable pet_info = 11;
  if (this->_internal_has_pet_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pet_info_);
  }

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  // uint32 vnum = 2;
  if (this->_internal_vnum() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_vnum());
  }

  // uint32 count = 3;
  if (this->_internal_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_count());
  }

  // uint32 special_flag = 4;
  if (this->_internal_special_flag() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_special_flag());
  }

  // int64 price = 9;
  if (this->_internal_price() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_price());
  }

  // uint32 owner = 8;
  if (this->_internal_owner() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_owner());
  }

  // bool is_gm_owner = 10;
  if (this->_internal_is_gm_owner() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TItemData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TItemData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TItemData::GetClassData() const { return &_class_data_; }


void TItemData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TItemData*>(&to_msg);
  auto& from = static_cast<const TItemData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.TItemData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.sockets_.MergeFrom(from._impl_.sockets_);
  _this->_impl_.attributes_.MergeFrom(from._impl_.attributes_);
  if (from._internal_has_cell()) {
    _this->_internal_mutable_cell()->::network::TItemPos::MergeFrom(
        from._internal_cell());
  }
  if (from._internal_has_pet_info()) {
    _this->_internal_mutable_pet_info()->::network::TPetAdvancedTable::MergeFrom(
        from._internal_pet_info());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_vnum() != 0) {
    _this->_internal_set_vnum(from._internal_vnum());
  }
  if (from._internal_count() != 0) {
    _this->_internal_set_count(from._internal_count());
  }
  if (from._internal_special_flag() != 0) {
    _this->_internal_set_special_flag(from._internal_special_flag());
  }
  if (from._internal_price() != 0) {
    _this->_internal_set_price(from._internal_price());
  }
  if (from._internal_owner() != 0) {
    _this->_internal_set_owner(from._internal_owner());
  }
  if (from._internal_is_gm_owner() != 0) {
    _this->_internal_set_is_gm_owner(from._internal_is_gm_owner());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TItemData::CopyFrom(const TItemData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.TItemData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TItemData::IsInitialized() const {
  return true;
}

void TItemData::InternalSwap(TItemData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.sockets_.InternalSwap(&other->_impl_.sockets_);
  _impl_.attributes_.InternalSwap(&other->_impl_.attributes_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TItemData, _impl_.is_gm_owner_)
      + sizeof(TItemData::_impl_.is_gm_owner_)
      - PROTOBUF_FIELD_OFFSET(TItemData, _impl_.cell_)>(
          reinterpret_cast<char*>(&_impl_.cell_),
          reinterpret_cast<char*>(&other->_impl_.cell_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TItemData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_5fitem_2eproto_getter, &descriptor_table_data_5fitem_2eproto_once,
      file_level_metadata_data_5fitem_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace network
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::network::TItemPos*
Arena::CreateMaybeMessage< ::network::TItemPos >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::TItemPos >(arena);
}
template<> PROTOBUF_NOINLINE ::network::TShopItemTable*
Arena::CreateMaybeMessage< ::network::TShopItemTable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::TShopItemTable >(arena);
}
template<> PROTOBUF_NOINLINE ::network::TShopExTabData*
Arena::CreateMaybeMessage< ::network::TShopExTabData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::TShopExTabData >(arena);
}
template<> PROTOBUF_NOINLINE ::network::TItemDropInfo*
Arena::CreateMaybeMessage< ::network::TItemDropInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::TItemDropInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::network::TItemAttribute*
Arena::CreateMaybeMessage< ::network::TItemAttribute >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::TItemAttribute >(arena);
}
template<> PROTOBUF_NOINLINE ::network::TItemData*
Arena::CreateMaybeMessage< ::network::TItemData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::TItemData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
