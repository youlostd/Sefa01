// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gc_packets.proto

#include "protobuf_gc_packets.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace network {
PROTOBUF_CONSTEXPR GCSetVerifyKeyPacket::GCSetVerifyKeyPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.verify_key_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCSetVerifyKeyPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCSetVerifyKeyPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCSetVerifyKeyPacketDefaultTypeInternal() {}
  union {
    GCSetVerifyKeyPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCSetVerifyKeyPacketDefaultTypeInternal _GCSetVerifyKeyPacket_default_instance_;
PROTOBUF_CONSTEXPR GCLoginFailurePacket::GCLoginFailurePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.data_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCLoginFailurePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCLoginFailurePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCLoginFailurePacketDefaultTypeInternal() {}
  union {
    GCLoginFailurePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCLoginFailurePacketDefaultTypeInternal _GCLoginFailurePacket_default_instance_;
PROTOBUF_CONSTEXPR GCCreateFailurePacket::GCCreateFailurePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCCreateFailurePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCCreateFailurePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCCreateFailurePacketDefaultTypeInternal() {}
  union {
    GCCreateFailurePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCCreateFailurePacketDefaultTypeInternal _GCCreateFailurePacket_default_instance_;
PROTOBUF_CONSTEXPR GCDeleteSuccessPacket::GCDeleteSuccessPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.account_index_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCDeleteSuccessPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCDeleteSuccessPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCDeleteSuccessPacketDefaultTypeInternal() {}
  union {
    GCDeleteSuccessPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCDeleteSuccessPacketDefaultTypeInternal _GCDeleteSuccessPacket_default_instance_;
PROTOBUF_CONSTEXPR GCPlayerCreateSuccessPacket::GCPlayerCreateSuccessPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.player_)*/nullptr
  , /*decltype(_impl_.account_index_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCPlayerCreateSuccessPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCPlayerCreateSuccessPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCPlayerCreateSuccessPacketDefaultTypeInternal() {}
  union {
    GCPlayerCreateSuccessPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCPlayerCreateSuccessPacketDefaultTypeInternal _GCPlayerCreateSuccessPacket_default_instance_;
PROTOBUF_CONSTEXPR GCEmpirePacket::GCEmpirePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.empire_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCEmpirePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCEmpirePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCEmpirePacketDefaultTypeInternal() {}
  union {
    GCEmpirePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCEmpirePacketDefaultTypeInternal _GCEmpirePacket_default_instance_;
PROTOBUF_CONSTEXPR GCLoginSuccessPacket::GCLoginSuccessPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.players_)*/{}
  , /*decltype(_impl_.handle_)*/0u
  , /*decltype(_impl_.random_key_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCLoginSuccessPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCLoginSuccessPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCLoginSuccessPacketDefaultTypeInternal() {}
  union {
    GCLoginSuccessPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCLoginSuccessPacketDefaultTypeInternal _GCLoginSuccessPacket_default_instance_;
PROTOBUF_CONSTEXPR GCAuthSuccessPacket::GCAuthSuccessPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.login_key_)*/0u
  , /*decltype(_impl_.result_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCAuthSuccessPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCAuthSuccessPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCAuthSuccessPacketDefaultTypeInternal() {}
  union {
    GCAuthSuccessPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCAuthSuccessPacketDefaultTypeInternal _GCAuthSuccessPacket_default_instance_;
PROTOBUF_CONSTEXPR GCAuthSuccessOpenIDPacket::GCAuthSuccessOpenIDPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.login_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.login_key_)*/0u
  , /*decltype(_impl_.result_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCAuthSuccessOpenIDPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCAuthSuccessOpenIDPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCAuthSuccessOpenIDPacketDefaultTypeInternal() {}
  union {
    GCAuthSuccessOpenIDPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCAuthSuccessOpenIDPacketDefaultTypeInternal _GCAuthSuccessOpenIDPacket_default_instance_;
PROTOBUF_CONSTEXPR GCChangeNamePacket::GCChangeNamePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCChangeNamePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCChangeNamePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCChangeNamePacketDefaultTypeInternal() {}
  union {
    GCChangeNamePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCChangeNamePacketDefaultTypeInternal _GCChangeNamePacket_default_instance_;
PROTOBUF_CONSTEXPR GCHybridCryptSDBPacket::GCHybridCryptSDBPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_stream_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCHybridCryptSDBPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCHybridCryptSDBPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCHybridCryptSDBPacketDefaultTypeInternal() {}
  union {
    GCHybridCryptSDBPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCHybridCryptSDBPacketDefaultTypeInternal _GCHybridCryptSDBPacket_default_instance_;
PROTOBUF_CONSTEXPR GCHybridCryptKeysPacket::GCHybridCryptKeysPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_stream_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCHybridCryptKeysPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCHybridCryptKeysPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCHybridCryptKeysPacketDefaultTypeInternal() {}
  union {
    GCHybridCryptKeysPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCHybridCryptKeysPacketDefaultTypeInternal _GCHybridCryptKeysPacket_default_instance_;
PROTOBUF_CONSTEXPR GCRespondChannelStatusPacket::GCRespondChannelStatusPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.states_)*/{}
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCRespondChannelStatusPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCRespondChannelStatusPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCRespondChannelStatusPacketDefaultTypeInternal() {}
  union {
    GCRespondChannelStatusPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCRespondChannelStatusPacketDefaultTypeInternal _GCRespondChannelStatusPacket_default_instance_;
PROTOBUF_CONSTEXPR GCPhasePacket::GCPhasePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.phase_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCPhasePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCPhasePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCPhasePacketDefaultTypeInternal() {}
  union {
    GCPhasePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCPhasePacketDefaultTypeInternal _GCPhasePacket_default_instance_;
PROTOBUF_CONSTEXPR GCHandshakePacket::GCHandshakePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.handshake_)*/0u
  , /*decltype(_impl_.time_)*/0u
  , /*decltype(_impl_.delta_)*/0
  , /*decltype(_impl_.crypt_key_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCHandshakePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCHandshakePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCHandshakePacketDefaultTypeInternal() {}
  union {
    GCHandshakePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCHandshakePacketDefaultTypeInternal _GCHandshakePacket_default_instance_;
PROTOBUF_CONSTEXPR GCKeyAgreementPacket::GCKeyAgreementPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.agreed_length_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCKeyAgreementPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCKeyAgreementPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCKeyAgreementPacketDefaultTypeInternal() {}
  union {
    GCKeyAgreementPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCKeyAgreementPacketDefaultTypeInternal _GCKeyAgreementPacket_default_instance_;
PROTOBUF_CONSTEXPR GCXTrapCS1RequestPacket::GCXTrapCS1RequestPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCXTrapCS1RequestPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCXTrapCS1RequestPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCXTrapCS1RequestPacketDefaultTypeInternal() {}
  union {
    GCXTrapCS1RequestPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCXTrapCS1RequestPacketDefaultTypeInternal _GCXTrapCS1RequestPacket_default_instance_;
PROTOBUF_CONSTEXPR GCPanamaPackPacket::GCPanamaPackPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pack_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.abiv_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCPanamaPackPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCPanamaPackPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCPanamaPackPacketDefaultTypeInternal() {}
  union {
    GCPanamaPackPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCPanamaPackPacketDefaultTypeInternal _GCPanamaPackPacket_default_instance_;
PROTOBUF_CONSTEXPR GCLoginVersionAnswerPacket::GCLoginVersionAnswerPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.answer_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCLoginVersionAnswerPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCLoginVersionAnswerPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCLoginVersionAnswerPacketDefaultTypeInternal() {}
  union {
    GCLoginVersionAnswerPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCLoginVersionAnswerPacketDefaultTypeInternal _GCLoginVersionAnswerPacket_default_instance_;
PROTOBUF_CONSTEXPR GCTimePacket::GCTimePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.time_)*/0u
  , /*decltype(_impl_.random_)*/0u
  , /*decltype(_impl_.channel_)*/0u
  , /*decltype(_impl_.test_server_)*/0u
  , /*decltype(_impl_.combatzone_)*/false
  , /*decltype(_impl_.coins_)*/false
  , /*decltype(_impl_.map_index_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCTimePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCTimePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCTimePacketDefaultTypeInternal() {}
  union {
    GCTimePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCTimePacketDefaultTypeInternal _GCTimePacket_default_instance_;
PROTOBUF_CONSTEXPR GCChannelPacket::GCChannelPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.channel_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCChannelPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCChannelPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCChannelPacketDefaultTypeInternal() {}
  union {
    GCChannelPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCChannelPacketDefaultTypeInternal _GCChannelPacket_default_instance_;
PROTOBUF_CONSTEXPR GCWhisperPacket::GCWhisperPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_from_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/0u
  , /*decltype(_impl_.locale_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCWhisperPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCWhisperPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCWhisperPacketDefaultTypeInternal() {}
  union {
    GCWhisperPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCWhisperPacketDefaultTypeInternal _GCWhisperPacket_default_instance_;
PROTOBUF_CONSTEXPR GCChatPacket::GCChatPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/0u
  , /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_.empire_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCChatPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCChatPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCChatPacketDefaultTypeInternal() {}
  union {
    GCChatPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCChatPacketDefaultTypeInternal _GCChatPacket_default_instance_;
PROTOBUF_CONSTEXPR GCMovePacket::GCMovePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.func_)*/0u
  , /*decltype(_impl_.arg_)*/0u
  , /*decltype(_impl_.rot_)*/0u
  , /*decltype(_impl_.vid_)*/0u
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.time_)*/0u
  , /*decltype(_impl_.duration_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCMovePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCMovePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCMovePacketDefaultTypeInternal() {}
  union {
    GCMovePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCMovePacketDefaultTypeInternal _GCMovePacket_default_instance_;
PROTOBUF_CONSTEXPR GCSyncPositionPacket::GCSyncPositionPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.elements_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCSyncPositionPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCSyncPositionPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCSyncPositionPacketDefaultTypeInternal() {}
  union {
    GCSyncPositionPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCSyncPositionPacketDefaultTypeInternal _GCSyncPositionPacket_default_instance_;
PROTOBUF_CONSTEXPR GCFlyTargetingPacket::GCFlyTargetingPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.shooter_vid_)*/0u
  , /*decltype(_impl_.target_vid_)*/0u
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCFlyTargetingPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCFlyTargetingPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCFlyTargetingPacketDefaultTypeInternal() {}
  union {
    GCFlyTargetingPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCFlyTargetingPacketDefaultTypeInternal _GCFlyTargetingPacket_default_instance_;
PROTOBUF_CONSTEXPR GCAddFlyTargetingPacket::GCAddFlyTargetingPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.shooter_vid_)*/0u
  , /*decltype(_impl_.target_vid_)*/0u
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCAddFlyTargetingPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCAddFlyTargetingPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCAddFlyTargetingPacketDefaultTypeInternal() {}
  union {
    GCAddFlyTargetingPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCAddFlyTargetingPacketDefaultTypeInternal _GCAddFlyTargetingPacket_default_instance_;
PROTOBUF_CONSTEXPR GCTargetPacket::GCTargetPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.vid_)*/0u
  , /*decltype(_impl_.cur_hp_)*/0
  , /*decltype(_impl_.max_hp_)*/0
  , /*decltype(_impl_.hppercent_)*/0u
  , /*decltype(_impl_.element_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCTargetPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCTargetPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCTargetPacketDefaultTypeInternal() {}
  union {
    GCTargetPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCTargetPacketDefaultTypeInternal _GCTargetPacket_default_instance_;
PROTOBUF_CONSTEXPR GCTargetMonsterInfoPacket::GCTargetMonsterInfoPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.drops_)*/{}
  , /*decltype(_impl_.race_num_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCTargetMonsterInfoPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCTargetMonsterInfoPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCTargetMonsterInfoPacketDefaultTypeInternal() {}
  union {
    GCTargetMonsterInfoPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCTargetMonsterInfoPacketDefaultTypeInternal _GCTargetMonsterInfoPacket_default_instance_;
PROTOBUF_CONSTEXPR GCPlayerOnlineInformationPacket::GCPlayerOnlineInformationPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.player_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.language_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCPlayerOnlineInformationPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCPlayerOnlineInformationPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCPlayerOnlineInformationPacketDefaultTypeInternal() {}
  union {
    GCPlayerOnlineInformationPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCPlayerOnlineInformationPacketDefaultTypeInternal _GCPlayerOnlineInformationPacket_default_instance_;
PROTOBUF_CONSTEXPR GCUpdateCharacterScalePacket::GCUpdateCharacterScalePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.vid_)*/0u
  , /*decltype(_impl_.scale_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCUpdateCharacterScalePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCUpdateCharacterScalePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCUpdateCharacterScalePacketDefaultTypeInternal() {}
  union {
    GCUpdateCharacterScalePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCUpdateCharacterScalePacketDefaultTypeInternal _GCUpdateCharacterScalePacket_default_instance_;
PROTOBUF_CONSTEXPR GCMaintenanceInfoPacket::GCMaintenanceInfoPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.cause_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.remaining_time_)*/0u
  , /*decltype(_impl_.duration_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCMaintenanceInfoPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCMaintenanceInfoPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCMaintenanceInfoPacketDefaultTypeInternal() {}
  union {
    GCMaintenanceInfoPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCMaintenanceInfoPacketDefaultTypeInternal _GCMaintenanceInfoPacket_default_instance_;
PROTOBUF_CONSTEXPR GCObserverAddPacket::GCObserverAddPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.vid_)*/0u
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCObserverAddPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCObserverAddPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCObserverAddPacketDefaultTypeInternal() {}
  union {
    GCObserverAddPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCObserverAddPacketDefaultTypeInternal _GCObserverAddPacket_default_instance_;
PROTOBUF_CONSTEXPR GCObserverRemovePacket::GCObserverRemovePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.vid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCObserverRemovePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCObserverRemovePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCObserverRemovePacketDefaultTypeInternal() {}
  union {
    GCObserverRemovePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCObserverRemovePacketDefaultTypeInternal _GCObserverRemovePacket_default_instance_;
PROTOBUF_CONSTEXPR GCObserverMovePacket::GCObserverMovePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.vid_)*/0u
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCObserverMovePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCObserverMovePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCObserverMovePacketDefaultTypeInternal() {}
  union {
    GCObserverMovePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCObserverMovePacketDefaultTypeInternal _GCObserverMovePacket_default_instance_;
PROTOBUF_CONSTEXPR GCSafeboxSizePacket::GCSafeboxSizePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.size_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCSafeboxSizePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCSafeboxSizePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCSafeboxSizePacketDefaultTypeInternal() {}
  union {
    GCSafeboxSizePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCSafeboxSizePacketDefaultTypeInternal _GCSafeboxSizePacket_default_instance_;
PROTOBUF_CONSTEXPR GCSafeboxMoneyChangePacket::GCSafeboxMoneyChangePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.money_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCSafeboxMoneyChangePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCSafeboxMoneyChangePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCSafeboxMoneyChangePacketDefaultTypeInternal() {}
  union {
    GCSafeboxMoneyChangePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCSafeboxMoneyChangePacketDefaultTypeInternal _GCSafeboxMoneyChangePacket_default_instance_;
PROTOBUF_CONSTEXPR GCWarpPacket::GCWarpPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.addr_)*/0
  , /*decltype(_impl_.port_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCWarpPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCWarpPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCWarpPacketDefaultTypeInternal() {}
  union {
    GCWarpPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCWarpPacketDefaultTypeInternal _GCWarpPacket_default_instance_;
PROTOBUF_CONSTEXPR GCPVPPacket::GCPVPPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.vid_src_)*/0u
  , /*decltype(_impl_.vid_dst_)*/0u
  , /*decltype(_impl_.mode_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCPVPPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCPVPPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCPVPPacketDefaultTypeInternal() {}
  union {
    GCPVPPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCPVPPacketDefaultTypeInternal _GCPVPPacket_default_instance_;
PROTOBUF_CONSTEXPR GCDuelStartPacket::GCDuelStartPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.vids_)*/{}
  , /*decltype(_impl_._vids_cached_byte_size_)*/{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCDuelStartPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCDuelStartPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCDuelStartPacketDefaultTypeInternal() {}
  union {
    GCDuelStartPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCDuelStartPacketDefaultTypeInternal _GCDuelStartPacket_default_instance_;
PROTOBUF_CONSTEXPR GCOwnershipPacket::GCOwnershipPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.owner_vid_)*/0u
  , /*decltype(_impl_.victim_vid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCOwnershipPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCOwnershipPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCOwnershipPacketDefaultTypeInternal() {}
  union {
    GCOwnershipPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCOwnershipPacketDefaultTypeInternal _GCOwnershipPacket_default_instance_;
PROTOBUF_CONSTEXPR GCPositionPacket::GCPositionPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.vid_)*/0u
  , /*decltype(_impl_.position_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCPositionPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCPositionPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCPositionPacketDefaultTypeInternal() {}
  union {
    GCPositionPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCPositionPacketDefaultTypeInternal _GCPositionPacket_default_instance_;
PROTOBUF_CONSTEXPR GCStunPacket::GCStunPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.vid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCStunPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCStunPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCStunPacketDefaultTypeInternal() {}
  union {
    GCStunPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCStunPacketDefaultTypeInternal _GCStunPacket_default_instance_;
PROTOBUF_CONSTEXPR GCDeadPacket::GCDeadPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.vid_)*/0u
  , /*decltype(_impl_.killer_is_pc_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCDeadPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCDeadPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCDeadPacketDefaultTypeInternal() {}
  union {
    GCDeadPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCDeadPacketDefaultTypeInternal _GCDeadPacket_default_instance_;
PROTOBUF_CONSTEXPR GCPointsPacket::GCPointsPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.points_)*/{}
  , /*decltype(_impl_._points_cached_byte_size_)*/{0}
  , /*decltype(_impl_.real_points_)*/{}
  , /*decltype(_impl_._real_points_cached_byte_size_)*/{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCPointsPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCPointsPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCPointsPacketDefaultTypeInternal() {}
  union {
    GCPointsPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCPointsPacketDefaultTypeInternal _GCPointsPacket_default_instance_;
PROTOBUF_CONSTEXPR GCPointChangePacket::GCPointChangePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.vid_)*/0u
  , /*decltype(_impl_.type_)*/0u
  , /*decltype(_impl_.amount_)*/int64_t{0}
  , /*decltype(_impl_.value_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCPointChangePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCPointChangePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCPointChangePacketDefaultTypeInternal() {}
  union {
    GCPointChangePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCPointChangePacketDefaultTypeInternal _GCPointChangePacket_default_instance_;
PROTOBUF_CONSTEXPR GCRealPointSetPacket::GCRealPointSetPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value_)*/int64_t{0}
  , /*decltype(_impl_.type_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCRealPointSetPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCRealPointSetPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCRealPointSetPacketDefaultTypeInternal() {}
  union {
    GCRealPointSetPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCRealPointSetPacketDefaultTypeInternal _GCRealPointSetPacket_default_instance_;
PROTOBUF_CONSTEXPR GCQuickslotAddPacket::GCQuickslotAddPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.slot_)*/nullptr
  , /*decltype(_impl_.pos_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCQuickslotAddPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCQuickslotAddPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCQuickslotAddPacketDefaultTypeInternal() {}
  union {
    GCQuickslotAddPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCQuickslotAddPacketDefaultTypeInternal _GCQuickslotAddPacket_default_instance_;
PROTOBUF_CONSTEXPR GCQuickslotDelPacket::GCQuickslotDelPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pos_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCQuickslotDelPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCQuickslotDelPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCQuickslotDelPacketDefaultTypeInternal() {}
  union {
    GCQuickslotDelPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCQuickslotDelPacketDefaultTypeInternal _GCQuickslotDelPacket_default_instance_;
PROTOBUF_CONSTEXPR GCQuickslotSwapPacket::GCQuickslotSwapPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pos_)*/0u
  , /*decltype(_impl_.change_pos_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCQuickslotSwapPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCQuickslotSwapPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCQuickslotSwapPacketDefaultTypeInternal() {}
  union {
    GCQuickslotSwapPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCQuickslotSwapPacketDefaultTypeInternal _GCQuickslotSwapPacket_default_instance_;
PROTOBUF_CONSTEXPR GCMotionPacket::GCMotionPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.vid_)*/0u
  , /*decltype(_impl_.victim_vid_)*/0u
  , /*decltype(_impl_.motion_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCMotionPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCMotionPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCMotionPacketDefaultTypeInternal() {}
  union {
    GCMotionPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCMotionPacketDefaultTypeInternal _GCMotionPacket_default_instance_;
PROTOBUF_CONSTEXPR GCDamageInfoPacket::GCDamageInfoPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.vid_)*/0u
  , /*decltype(_impl_.flag_)*/0u
  , /*decltype(_impl_.damage_)*/0
  , /*decltype(_impl_.target_vid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCDamageInfoPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCDamageInfoPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCDamageInfoPacketDefaultTypeInternal() {}
  union {
    GCDamageInfoPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCDamageInfoPacketDefaultTypeInternal _GCDamageInfoPacket_default_instance_;
PROTOBUF_CONSTEXPR GCCreateFlyPacket::GCCreateFlyPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_)*/0u
  , /*decltype(_impl_.start_vid_)*/0u
  , /*decltype(_impl_.end_vid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCCreateFlyPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCCreateFlyPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCCreateFlyPacketDefaultTypeInternal() {}
  union {
    GCCreateFlyPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCCreateFlyPacketDefaultTypeInternal _GCCreateFlyPacket_default_instance_;
PROTOBUF_CONSTEXPR GCDungeonDestinationPositionPacket::GCDungeonDestinationPositionPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.x_)*/0u
  , /*decltype(_impl_.y_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCDungeonDestinationPositionPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCDungeonDestinationPositionPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCDungeonDestinationPositionPacketDefaultTypeInternal() {}
  union {
    GCDungeonDestinationPositionPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCDungeonDestinationPositionPacketDefaultTypeInternal _GCDungeonDestinationPositionPacket_default_instance_;
PROTOBUF_CONSTEXPR GCSkillLevelPacket::GCSkillLevelPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.levels_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCSkillLevelPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCSkillLevelPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCSkillLevelPacketDefaultTypeInternal() {}
  union {
    GCSkillLevelPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCSkillLevelPacketDefaultTypeInternal _GCSkillLevelPacket_default_instance_;
PROTOBUF_CONSTEXPR GCMessengerListPacket_Entry::GCMessengerListPacket_Entry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.connected_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCMessengerListPacket_EntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCMessengerListPacket_EntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCMessengerListPacket_EntryDefaultTypeInternal() {}
  union {
    GCMessengerListPacket_Entry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCMessengerListPacket_EntryDefaultTypeInternal _GCMessengerListPacket_Entry_default_instance_;
PROTOBUF_CONSTEXPR GCMessengerListPacket::GCMessengerListPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.players_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCMessengerListPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCMessengerListPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCMessengerListPacketDefaultTypeInternal() {}
  union {
    GCMessengerListPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCMessengerListPacketDefaultTypeInternal _GCMessengerListPacket_default_instance_;
PROTOBUF_CONSTEXPR GCMessengerBlockListPacket_Entry::GCMessengerBlockListPacket_Entry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.connected_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCMessengerBlockListPacket_EntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCMessengerBlockListPacket_EntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCMessengerBlockListPacket_EntryDefaultTypeInternal() {}
  union {
    GCMessengerBlockListPacket_Entry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCMessengerBlockListPacket_EntryDefaultTypeInternal _GCMessengerBlockListPacket_Entry_default_instance_;
PROTOBUF_CONSTEXPR GCMessengerBlockListPacket::GCMessengerBlockListPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.players_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCMessengerBlockListPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCMessengerBlockListPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCMessengerBlockListPacketDefaultTypeInternal() {}
  union {
    GCMessengerBlockListPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCMessengerBlockListPacketDefaultTypeInternal _GCMessengerBlockListPacket_default_instance_;
PROTOBUF_CONSTEXPR GCMessengerLoginPacket::GCMessengerLoginPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCMessengerLoginPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCMessengerLoginPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCMessengerLoginPacketDefaultTypeInternal() {}
  union {
    GCMessengerLoginPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCMessengerLoginPacketDefaultTypeInternal _GCMessengerLoginPacket_default_instance_;
PROTOBUF_CONSTEXPR GCMessengerLogoutPacket::GCMessengerLogoutPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCMessengerLogoutPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCMessengerLogoutPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCMessengerLogoutPacketDefaultTypeInternal() {}
  union {
    GCMessengerLogoutPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCMessengerLogoutPacketDefaultTypeInternal _GCMessengerLogoutPacket_default_instance_;
PROTOBUF_CONSTEXPR GCMessengerBlockLoginPacket::GCMessengerBlockLoginPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCMessengerBlockLoginPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCMessengerBlockLoginPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCMessengerBlockLoginPacketDefaultTypeInternal() {}
  union {
    GCMessengerBlockLoginPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCMessengerBlockLoginPacketDefaultTypeInternal _GCMessengerBlockLoginPacket_default_instance_;
PROTOBUF_CONSTEXPR GCMessengerBlockLogoutPacket::GCMessengerBlockLogoutPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCMessengerBlockLogoutPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCMessengerBlockLogoutPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCMessengerBlockLogoutPacketDefaultTypeInternal() {}
  union {
    GCMessengerBlockLogoutPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCMessengerBlockLogoutPacketDefaultTypeInternal _GCMessengerBlockLogoutPacket_default_instance_;
PROTOBUF_CONSTEXPR GCMessengerMobilePacket::GCMessengerMobilePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.state_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCMessengerMobilePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCMessengerMobilePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCMessengerMobilePacketDefaultTypeInternal() {}
  union {
    GCMessengerMobilePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCMessengerMobilePacketDefaultTypeInternal _GCMessengerMobilePacket_default_instance_;
PROTOBUF_CONSTEXPR GCWalkModePacket::GCWalkModePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.vid_)*/0u
  , /*decltype(_impl_.mode_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCWalkModePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCWalkModePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCWalkModePacketDefaultTypeInternal() {}
  union {
    GCWalkModePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCWalkModePacketDefaultTypeInternal _GCWalkModePacket_default_instance_;
PROTOBUF_CONSTEXPR GCChangeSkillGroupPacket::GCChangeSkillGroupPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.skill_group_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCChangeSkillGroupPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCChangeSkillGroupPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCChangeSkillGroupPacketDefaultTypeInternal() {}
  union {
    GCChangeSkillGroupPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCChangeSkillGroupPacketDefaultTypeInternal _GCChangeSkillGroupPacket_default_instance_;
PROTOBUF_CONSTEXPR GCRefineInformationPacket::GCRefineInformationPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pos_)*/nullptr
  , /*decltype(_impl_.refine_table_)*/nullptr
  , /*decltype(_impl_.type_)*/0u
  , /*decltype(_impl_.src_vnum_)*/0u
  , /*decltype(_impl_.result_vnum_)*/0u
  , /*decltype(_impl_.can_fast_refine_)*/false
  , /*decltype(_impl_.cost_)*/uint64_t{0u}
  , /*decltype(_impl_.prob_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCRefineInformationPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCRefineInformationPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCRefineInformationPacketDefaultTypeInternal() {}
  union {
    GCRefineInformationPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCRefineInformationPacketDefaultTypeInternal _GCRefineInformationPacket_default_instance_;
PROTOBUF_CONSTEXPR GCSpecialEffectPacket::GCSpecialEffectPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_)*/0u
  , /*decltype(_impl_.vid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCSpecialEffectPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCSpecialEffectPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCSpecialEffectPacketDefaultTypeInternal() {}
  union {
    GCSpecialEffectPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCSpecialEffectPacketDefaultTypeInternal _GCSpecialEffectPacket_default_instance_;
PROTOBUF_CONSTEXPR GCNPCListPacket_Position::GCNPCListPacket_Position(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/0u
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.race_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCNPCListPacket_PositionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCNPCListPacket_PositionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCNPCListPacket_PositionDefaultTypeInternal() {}
  union {
    GCNPCListPacket_Position _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCNPCListPacket_PositionDefaultTypeInternal _GCNPCListPacket_Position_default_instance_;
PROTOBUF_CONSTEXPR GCNPCListPacket::GCNPCListPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.positions_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCNPCListPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCNPCListPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCNPCListPacketDefaultTypeInternal() {}
  union {
    GCNPCListPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCNPCListPacketDefaultTypeInternal _GCNPCListPacket_default_instance_;
PROTOBUF_CONSTEXPR GCViewEquipPacket::GCViewEquipPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.equips_)*/{}
  , /*decltype(_impl_.vid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCViewEquipPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCViewEquipPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCViewEquipPacketDefaultTypeInternal() {}
  union {
    GCViewEquipPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCViewEquipPacketDefaultTypeInternal _GCViewEquipPacket_default_instance_;
PROTOBUF_CONSTEXPR GCLandListPacket::GCLandListPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.lands_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCLandListPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCLandListPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCLandListPacketDefaultTypeInternal() {}
  union {
    GCLandListPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCLandListPacketDefaultTypeInternal _GCLandListPacket_default_instance_;
PROTOBUF_CONSTEXPR GCTargetCreatePacket::GCTargetCreatePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_.vid_)*/0u
  , /*decltype(_impl_.type_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCTargetCreatePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCTargetCreatePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCTargetCreatePacketDefaultTypeInternal() {}
  union {
    GCTargetCreatePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCTargetCreatePacketDefaultTypeInternal _GCTargetCreatePacket_default_instance_;
PROTOBUF_CONSTEXPR GCTargetUpdatePacket::GCTargetUpdatePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCTargetUpdatePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCTargetUpdatePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCTargetUpdatePacketDefaultTypeInternal() {}
  union {
    GCTargetUpdatePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCTargetUpdatePacketDefaultTypeInternal _GCTargetUpdatePacket_default_instance_;
PROTOBUF_CONSTEXPR GCTargetDeletePacket::GCTargetDeletePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCTargetDeletePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCTargetDeletePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCTargetDeletePacketDefaultTypeInternal() {}
  union {
    GCTargetDeletePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCTargetDeletePacketDefaultTypeInternal _GCTargetDeletePacket_default_instance_;
PROTOBUF_CONSTEXPR GCAffectAddPacket::GCAffectAddPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.elem_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCAffectAddPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCAffectAddPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCAffectAddPacketDefaultTypeInternal() {}
  union {
    GCAffectAddPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCAffectAddPacketDefaultTypeInternal _GCAffectAddPacket_default_instance_;
PROTOBUF_CONSTEXPR GCAffectRemovePacket::GCAffectRemovePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_)*/0u
  , /*decltype(_impl_.apply_on_)*/0u
  , /*decltype(_impl_.apply_value_)*/0
  , /*decltype(_impl_.flag_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCAffectRemovePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCAffectRemovePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCAffectRemovePacketDefaultTypeInternal() {}
  union {
    GCAffectRemovePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCAffectRemovePacketDefaultTypeInternal _GCAffectRemovePacket_default_instance_;
PROTOBUF_CONSTEXPR GCMallOpenPacket::GCMallOpenPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.size_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCMallOpenPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCMallOpenPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCMallOpenPacketDefaultTypeInternal() {}
  union {
    GCMallOpenPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCMallOpenPacketDefaultTypeInternal _GCMallOpenPacket_default_instance_;
PROTOBUF_CONSTEXPR GCLoverInfoPacket::GCLoverInfoPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.love_point_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCLoverInfoPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCLoverInfoPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCLoverInfoPacketDefaultTypeInternal() {}
  union {
    GCLoverInfoPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCLoverInfoPacketDefaultTypeInternal _GCLoverInfoPacket_default_instance_;
PROTOBUF_CONSTEXPR GCLoverPointUpdatePacket::GCLoverPointUpdatePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.love_point_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCLoverPointUpdatePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCLoverPointUpdatePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCLoverPointUpdatePacketDefaultTypeInternal() {}
  union {
    GCLoverPointUpdatePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCLoverPointUpdatePacketDefaultTypeInternal _GCLoverPointUpdatePacket_default_instance_;
PROTOBUF_CONSTEXPR GCDigMotionPacket::GCDigMotionPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.vid_)*/0u
  , /*decltype(_impl_.target_vid_)*/0u
  , /*decltype(_impl_.count_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCDigMotionPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCDigMotionPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCDigMotionPacketDefaultTypeInternal() {}
  union {
    GCDigMotionPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCDigMotionPacketDefaultTypeInternal _GCDigMotionPacket_default_instance_;
PROTOBUF_CONSTEXPR GCSpecificEffectPacket::GCSpecificEffectPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.effect_file_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.vid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCSpecificEffectPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCSpecificEffectPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCSpecificEffectPacketDefaultTypeInternal() {}
  union {
    GCSpecificEffectPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCSpecificEffectPacketDefaultTypeInternal _GCSpecificEffectPacket_default_instance_;
PROTOBUF_CONSTEXPR GCDragonSoulRefinePacket::GCDragonSoulRefinePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.cell_)*/nullptr
  , /*decltype(_impl_.sub_type_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCDragonSoulRefinePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCDragonSoulRefinePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCDragonSoulRefinePacketDefaultTypeInternal() {}
  union {
    GCDragonSoulRefinePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCDragonSoulRefinePacketDefaultTypeInternal _GCDragonSoulRefinePacket_default_instance_;
PROTOBUF_CONSTEXPR GCTeamlerStatusPacket::GCTeamlerStatusPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.is_online_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCTeamlerStatusPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCTeamlerStatusPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCTeamlerStatusPacketDefaultTypeInternal() {}
  union {
    GCTeamlerStatusPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCTeamlerStatusPacketDefaultTypeInternal _GCTeamlerStatusPacket_default_instance_;
PROTOBUF_CONSTEXPR GCTeamlerShowPacket::GCTeamlerShowPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.is_show_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCTeamlerShowPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCTeamlerShowPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCTeamlerShowPacketDefaultTypeInternal() {}
  union {
    GCTeamlerShowPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCTeamlerShowPacketDefaultTypeInternal _GCTeamlerShowPacket_default_instance_;
PROTOBUF_CONSTEXPR GCPartyPositionPacket::GCPartyPositionPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pid_)*/0u
  , /*decltype(_impl_.x_)*/0u
  , /*decltype(_impl_.y_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCPartyPositionPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCPartyPositionPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCPartyPositionPacketDefaultTypeInternal() {}
  union {
    GCPartyPositionPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCPartyPositionPacketDefaultTypeInternal _GCPartyPositionPacket_default_instance_;
PROTOBUF_CONSTEXPR GCWikiPacket::GCWikiPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.origin_infos_)*/{}
  , /*decltype(_impl_.wiki_info_)*/nullptr
  , /*decltype(_impl_.ret_id_)*/uint64_t{0u}
  , /*decltype(_impl_.vnum_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCWikiPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCWikiPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCWikiPacketDefaultTypeInternal() {}
  union {
    GCWikiPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCWikiPacketDefaultTypeInternal _GCWikiPacket_default_instance_;
PROTOBUF_CONSTEXPR GCWikiMobPacket::GCWikiMobPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.mobs_)*/{}
  , /*decltype(_impl_._mobs_cached_byte_size_)*/{0}
  , /*decltype(_impl_.ret_id_)*/uint64_t{0u}
  , /*decltype(_impl_.vnum_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCWikiMobPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCWikiMobPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCWikiMobPacketDefaultTypeInternal() {}
  union {
    GCWikiMobPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCWikiMobPacketDefaultTypeInternal _GCWikiMobPacket_default_instance_;
PROTOBUF_CONSTEXPR GCSendCombatZonePacket::GCSendCombatZonePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_infos_)*/{}
  , /*decltype(_impl_._data_infos_cached_byte_size_)*/{0}
  , /*decltype(_impl_.data_days_)*/{}
  , /*decltype(_impl_._data_days_cached_byte_size_)*/{0}
  , /*decltype(_impl_.sub_header_)*/0u
  , /*decltype(_impl_.is_running_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCSendCombatZonePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCSendCombatZonePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCSendCombatZonePacketDefaultTypeInternal() {}
  union {
    GCSendCombatZonePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCSendCombatZonePacketDefaultTypeInternal _GCSendCombatZonePacket_default_instance_;
PROTOBUF_CONSTEXPR GCCombatZoneRankingDataPacket::GCCombatZoneRankingDataPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCCombatZoneRankingDataPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCCombatZoneRankingDataPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCCombatZoneRankingDataPacketDefaultTypeInternal() {}
  union {
    GCCombatZoneRankingDataPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCCombatZoneRankingDataPacketDefaultTypeInternal _GCCombatZoneRankingDataPacket_default_instance_;
PROTOBUF_CONSTEXPR GCEventRequestPacket::GCEventRequestPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.desc_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.event_index_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCEventRequestPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCEventRequestPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCEventRequestPacketDefaultTypeInternal() {}
  union {
    GCEventRequestPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCEventRequestPacketDefaultTypeInternal _GCEventRequestPacket_default_instance_;
PROTOBUF_CONSTEXPR GCEventCancelPacket::GCEventCancelPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.event_index_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCEventCancelPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCEventCancelPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCEventCancelPacketDefaultTypeInternal() {}
  union {
    GCEventCancelPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCEventCancelPacketDefaultTypeInternal _GCEventCancelPacket_default_instance_;
PROTOBUF_CONSTEXPR GCEventEmpireWarLoadPacket::GCEventEmpireWarLoadPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.kills_)*/{}
  , /*decltype(_impl_._kills_cached_byte_size_)*/{0}
  , /*decltype(_impl_.deaths_)*/{}
  , /*decltype(_impl_._deaths_cached_byte_size_)*/{0}
  , /*decltype(_impl_.time_left_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCEventEmpireWarLoadPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCEventEmpireWarLoadPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCEventEmpireWarLoadPacketDefaultTypeInternal() {}
  union {
    GCEventEmpireWarLoadPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCEventEmpireWarLoadPacketDefaultTypeInternal _GCEventEmpireWarLoadPacket_default_instance_;
PROTOBUF_CONSTEXPR GCEventEmpireWarUpdatePacket::GCEventEmpireWarUpdatePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.empire_)*/0u
  , /*decltype(_impl_.kills_)*/0u
  , /*decltype(_impl_.deaths_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCEventEmpireWarUpdatePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCEventEmpireWarUpdatePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCEventEmpireWarUpdatePacketDefaultTypeInternal() {}
  union {
    GCEventEmpireWarUpdatePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCEventEmpireWarUpdatePacketDefaultTypeInternal _GCEventEmpireWarUpdatePacket_default_instance_;
PROTOBUF_CONSTEXPR GCAttrtreeLevelPacket::GCAttrtreeLevelPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_.level_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCAttrtreeLevelPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCAttrtreeLevelPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCAttrtreeLevelPacketDefaultTypeInternal() {}
  union {
    GCAttrtreeLevelPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCAttrtreeLevelPacketDefaultTypeInternal _GCAttrtreeLevelPacket_default_instance_;
PROTOBUF_CONSTEXPR GCAttrtreeRefinePacket::GCAttrtreeRefinePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.refine_table_)*/nullptr
  , /*decltype(_impl_.pos_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCAttrtreeRefinePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCAttrtreeRefinePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCAttrtreeRefinePacketDefaultTypeInternal() {}
  union {
    GCAttrtreeRefinePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCAttrtreeRefinePacketDefaultTypeInternal _GCAttrtreeRefinePacket_default_instance_;
PROTOBUF_CONSTEXPR GCRunePacket::GCRunePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.vnum_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCRunePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCRunePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCRunePacketDefaultTypeInternal() {}
  union {
    GCRunePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCRunePacketDefaultTypeInternal _GCRunePacket_default_instance_;
PROTOBUF_CONSTEXPR GCRuneRefinePacket::GCRuneRefinePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.refine_table_)*/nullptr
  , /*decltype(_impl_.next_point_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCRuneRefinePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCRuneRefinePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCRuneRefinePacketDefaultTypeInternal() {}
  union {
    GCRuneRefinePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCRuneRefinePacketDefaultTypeInternal _GCRuneRefinePacket_default_instance_;
PROTOBUF_CONSTEXPR GCRunePagePacket::GCRunePagePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCRunePagePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCRunePagePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCRunePagePacketDefaultTypeInternal() {}
  union {
    GCRunePagePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCRunePagePacketDefaultTypeInternal _GCRunePagePacket_default_instance_;
PROTOBUF_CONSTEXPR GCRuneLevelupPacket::GCRuneLevelupPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.refine_table_)*/nullptr
  , /*decltype(_impl_.pos_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCRuneLevelupPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCRuneLevelupPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCRuneLevelupPacketDefaultTypeInternal() {}
  union {
    GCRuneLevelupPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCRuneLevelupPacketDefaultTypeInternal _GCRuneLevelupPacket_default_instance_;
PROTOBUF_CONSTEXPR GCEquipmentPageLoadPacket::GCEquipmentPageLoadPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pages_)*/{}
  , /*decltype(_impl_.selected_index_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCEquipmentPageLoadPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCEquipmentPageLoadPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCEquipmentPageLoadPacketDefaultTypeInternal() {}
  union {
    GCEquipmentPageLoadPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCEquipmentPageLoadPacketDefaultTypeInternal _GCEquipmentPageLoadPacket_default_instance_;
PROTOBUF_CONSTEXPR GCDmgMeterPacket::GCDmgMeterPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.dmg_)*/0
  , /*decltype(_impl_.vid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCDmgMeterPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCDmgMeterPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCDmgMeterPacketDefaultTypeInternal() {}
  union {
    GCDmgMeterPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCDmgMeterPacketDefaultTypeInternal _GCDmgMeterPacket_default_instance_;
PROTOBUF_CONSTEXPR GCSkillMotionPacket::GCSkillMotionPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.vid_)*/0u
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.rotation_)*/0
  , /*decltype(_impl_.time_)*/0u
  , /*decltype(_impl_.skill_vnum_)*/0u
  , /*decltype(_impl_.skill_level_)*/0u
  , /*decltype(_impl_.skill_grade_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCSkillMotionPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCSkillMotionPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCSkillMotionPacketDefaultTypeInternal() {}
  union {
    GCSkillMotionPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCSkillMotionPacketDefaultTypeInternal _GCSkillMotionPacket_default_instance_;
PROTOBUF_CONSTEXPR GCFakeBuffSkillPacket::GCFakeBuffSkillPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.skill_vnum_)*/0u
  , /*decltype(_impl_.level_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCFakeBuffSkillPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCFakeBuffSkillPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCFakeBuffSkillPacketDefaultTypeInternal() {}
  union {
    GCFakeBuffSkillPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCFakeBuffSkillPacketDefaultTypeInternal _GCFakeBuffSkillPacket_default_instance_;
PROTOBUF_CONSTEXPR GCCBTItemSetPacket::GCCBTItemSetPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/nullptr
  , /*decltype(_impl_.cbt_pos_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCCBTItemSetPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCCBTItemSetPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCCBTItemSetPacketDefaultTypeInternal() {}
  union {
    GCCBTItemSetPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCCBTItemSetPacketDefaultTypeInternal _GCCBTItemSetPacket_default_instance_;
PROTOBUF_CONSTEXPR GCSoulRefineInfoPacket::GCSoulRefineInfoPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.apply_values_)*/{}
  , /*decltype(_impl_._apply_values_cached_byte_size_)*/{0}
  , /*decltype(_impl_.refine_)*/nullptr
  , /*decltype(_impl_.vnum_)*/0u
  , /*decltype(_impl_.apply_type_)*/0u
  , /*decltype(_impl_.type_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCSoulRefineInfoPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCSoulRefineInfoPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCSoulRefineInfoPacketDefaultTypeInternal() {}
  union {
    GCSoulRefineInfoPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCSoulRefineInfoPacketDefaultTypeInternal _GCSoulRefineInfoPacket_default_instance_;
PROTOBUF_CONSTEXPR GCPVPTeamPacket::GCPVPTeamPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.vid_)*/0u
  , /*decltype(_impl_.team_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCPVPTeamPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCPVPTeamPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCPVPTeamPacketDefaultTypeInternal() {}
  union {
    GCPVPTeamPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCPVPTeamPacketDefaultTypeInternal _GCPVPTeamPacket_default_instance_;
PROTOBUF_CONSTEXPR GCInventoryMaxNumPacket::GCInventoryMaxNumPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.inv_type_)*/0u
  , /*decltype(_impl_.max_num_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCInventoryMaxNumPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCInventoryMaxNumPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCInventoryMaxNumPacketDefaultTypeInternal() {}
  union {
    GCInventoryMaxNumPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCInventoryMaxNumPacketDefaultTypeInternal _GCInventoryMaxNumPacket_default_instance_;
PROTOBUF_CONSTEXPR GCAttributesToClientPacket_Attribute::GCAttributesToClientPacket_Attribute(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_)*/0u
  , /*decltype(_impl_.value_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCAttributesToClientPacket_AttributeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCAttributesToClientPacket_AttributeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCAttributesToClientPacket_AttributeDefaultTypeInternal() {}
  union {
    GCAttributesToClientPacket_Attribute _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCAttributesToClientPacket_AttributeDefaultTypeInternal _GCAttributesToClientPacket_Attribute_default_instance_;
PROTOBUF_CONSTEXPR GCAttributesToClientPacket::GCAttributesToClientPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.attrs_)*/{}
  , /*decltype(_impl_.item_type_)*/0u
  , /*decltype(_impl_.item_sub_type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCAttributesToClientPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCAttributesToClientPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCAttributesToClientPacketDefaultTypeInternal() {}
  union {
    GCAttributesToClientPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCAttributesToClientPacketDefaultTypeInternal _GCAttributesToClientPacket_default_instance_;
PROTOBUF_CONSTEXPR GCHorseRefineInfoPacket::GCHorseRefineInfoPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.refine_)*/nullptr
  , /*decltype(_impl_.refine_index_)*/0u
  , /*decltype(_impl_.current_level_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCHorseRefineInfoPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCHorseRefineInfoPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCHorseRefineInfoPacketDefaultTypeInternal() {}
  union {
    GCHorseRefineInfoPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCHorseRefineInfoPacketDefaultTypeInternal _GCHorseRefineInfoPacket_default_instance_;
PROTOBUF_CONSTEXPR GCHorseRefineResultPacket::GCHorseRefineResultPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCHorseRefineResultPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCHorseRefineResultPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCHorseRefineResultPacketDefaultTypeInternal() {}
  union {
    GCHorseRefineResultPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCHorseRefineResultPacketDefaultTypeInternal _GCHorseRefineResultPacket_default_instance_;
PROTOBUF_CONSTEXPR GCGayaShopOpenPacket::GCGayaShopOpenPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.datas_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCGayaShopOpenPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCGayaShopOpenPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCGayaShopOpenPacketDefaultTypeInternal() {}
  union {
    GCGayaShopOpenPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCGayaShopOpenPacketDefaultTypeInternal _GCGayaShopOpenPacket_default_instance_;
PROTOBUF_CONSTEXPR GCBattlepassDataPacket::GCBattlepassDataPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/nullptr
  , /*decltype(_impl_.index_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCBattlepassDataPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCBattlepassDataPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCBattlepassDataPacketDefaultTypeInternal() {}
  union {
    GCBattlepassDataPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCBattlepassDataPacketDefaultTypeInternal _GCBattlepassDataPacket_default_instance_;
PROTOBUF_CONSTEXPR GCCrystalRefinePacket::GCCrystalRefinePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.next_attributes_)*/{}
  , /*decltype(_impl_.crystal_cell_)*/nullptr
  , /*decltype(_impl_.scroll_cell_)*/nullptr
  , /*decltype(_impl_.next_clarity_type_)*/0u
  , /*decltype(_impl_.next_clarity_level_)*/0u
  , /*decltype(_impl_.required_fragments_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCCrystalRefinePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCCrystalRefinePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCCrystalRefinePacketDefaultTypeInternal() {}
  union {
    GCCrystalRefinePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCCrystalRefinePacketDefaultTypeInternal _GCCrystalRefinePacket_default_instance_;
PROTOBUF_CONSTEXPR GCCrystalUsingSlotPacket::GCCrystalUsingSlotPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.cell_)*/nullptr
  , /*decltype(_impl_.active_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCCrystalUsingSlotPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCCrystalUsingSlotPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCCrystalUsingSlotPacketDefaultTypeInternal() {}
  union {
    GCCrystalUsingSlotPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCCrystalUsingSlotPacketDefaultTypeInternal _GCCrystalUsingSlotPacket_default_instance_;
PROTOBUF_CONSTEXPR GCAuctionOwnedGoldPacket::GCAuctionOwnedGoldPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.gold_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCAuctionOwnedGoldPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCAuctionOwnedGoldPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCAuctionOwnedGoldPacketDefaultTypeInternal() {}
  union {
    GCAuctionOwnedGoldPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCAuctionOwnedGoldPacketDefaultTypeInternal _GCAuctionOwnedGoldPacket_default_instance_;
PROTOBUF_CONSTEXPR GCAuctionOwnedItemPacket::GCAuctionOwnedItemPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.item_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCAuctionOwnedItemPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCAuctionOwnedItemPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCAuctionOwnedItemPacketDefaultTypeInternal() {}
  union {
    GCAuctionOwnedItemPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCAuctionOwnedItemPacketDefaultTypeInternal _GCAuctionOwnedItemPacket_default_instance_;
PROTOBUF_CONSTEXPR GCAuctionSearchResultPacket::GCAuctionSearchResultPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_.page_)*/0
  , /*decltype(_impl_.max_page_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCAuctionSearchResultPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCAuctionSearchResultPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCAuctionSearchResultPacketDefaultTypeInternal() {}
  union {
    GCAuctionSearchResultPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCAuctionSearchResultPacketDefaultTypeInternal _GCAuctionSearchResultPacket_default_instance_;
PROTOBUF_CONSTEXPR GCAuctionMessagePacket::GCAuctionMessagePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCAuctionMessagePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCAuctionMessagePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCAuctionMessagePacketDefaultTypeInternal() {}
  union {
    GCAuctionMessagePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCAuctionMessagePacketDefaultTypeInternal _GCAuctionMessagePacket_default_instance_;
PROTOBUF_CONSTEXPR GCAuctionShopOwnedPacket::GCAuctionShopOwnedPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.owned_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCAuctionShopOwnedPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCAuctionShopOwnedPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCAuctionShopOwnedPacketDefaultTypeInternal() {}
  union {
    GCAuctionShopOwnedPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCAuctionShopOwnedPacketDefaultTypeInternal _GCAuctionShopOwnedPacket_default_instance_;
PROTOBUF_CONSTEXPR GCAuctionShopPacket::GCAuctionShopPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.gold_)*/uint64_t{0u}
  , /*decltype(_impl_.timeout_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCAuctionShopPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCAuctionShopPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCAuctionShopPacketDefaultTypeInternal() {}
  union {
    GCAuctionShopPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCAuctionShopPacketDefaultTypeInternal _GCAuctionShopPacket_default_instance_;
PROTOBUF_CONSTEXPR GCAuctionShopGoldPacket::GCAuctionShopGoldPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.gold_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCAuctionShopGoldPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCAuctionShopGoldPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCAuctionShopGoldPacketDefaultTypeInternal() {}
  union {
    GCAuctionShopGoldPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCAuctionShopGoldPacketDefaultTypeInternal _GCAuctionShopGoldPacket_default_instance_;
PROTOBUF_CONSTEXPR GCAuctionShopTimeoutPacket::GCAuctionShopTimeoutPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.timeout_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCAuctionShopTimeoutPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCAuctionShopTimeoutPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCAuctionShopTimeoutPacketDefaultTypeInternal() {}
  union {
    GCAuctionShopTimeoutPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCAuctionShopTimeoutPacketDefaultTypeInternal _GCAuctionShopTimeoutPacket_default_instance_;
PROTOBUF_CONSTEXPR GCAuctionShopGuestOpenPacket::GCAuctionShopGuestOpenPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCAuctionShopGuestOpenPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCAuctionShopGuestOpenPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCAuctionShopGuestOpenPacketDefaultTypeInternal() {}
  union {
    GCAuctionShopGuestOpenPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCAuctionShopGuestOpenPacketDefaultTypeInternal _GCAuctionShopGuestOpenPacket_default_instance_;
PROTOBUF_CONSTEXPR GCAuctionShopGuestUpdatePacket::GCAuctionShopGuestUpdatePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.item_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCAuctionShopGuestUpdatePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCAuctionShopGuestUpdatePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCAuctionShopGuestUpdatePacketDefaultTypeInternal() {}
  union {
    GCAuctionShopGuestUpdatePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCAuctionShopGuestUpdatePacketDefaultTypeInternal _GCAuctionShopGuestUpdatePacket_default_instance_;
PROTOBUF_CONSTEXPR GCAuctionShopHistoryPacket::GCAuctionShopHistoryPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.elems_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCAuctionShopHistoryPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCAuctionShopHistoryPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCAuctionShopHistoryPacketDefaultTypeInternal() {}
  union {
    GCAuctionShopHistoryPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCAuctionShopHistoryPacketDefaultTypeInternal _GCAuctionShopHistoryPacket_default_instance_;
PROTOBUF_CONSTEXPR GCAuctionAveragePricePacket::GCAuctionAveragePricePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.price_)*/uint64_t{0u}
  , /*decltype(_impl_.requestor_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCAuctionAveragePricePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCAuctionAveragePricePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCAuctionAveragePricePacketDefaultTypeInternal() {}
  union {
    GCAuctionAveragePricePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCAuctionAveragePricePacketDefaultTypeInternal _GCAuctionAveragePricePacket_default_instance_;
PROTOBUF_CONSTEXPR GCMainCharacterPacket::GCMainCharacterPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.chr_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.bgm_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.vid_)*/0u
  , /*decltype(_impl_.race_num_)*/0u
  , /*decltype(_impl_.bgm_vol_)*/0
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.z_)*/0
  , /*decltype(_impl_.empire_)*/0u
  , /*decltype(_impl_.skill_group_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCMainCharacterPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCMainCharacterPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCMainCharacterPacketDefaultTypeInternal() {}
  union {
    GCMainCharacterPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCMainCharacterPacketDefaultTypeInternal _GCMainCharacterPacket_default_instance_;
PROTOBUF_CONSTEXPR GCCharacterAddPacket_AffectColor::GCCharacterAddPacket_AffectColor(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.flag_)*/0u
  , /*decltype(_impl_.color_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCCharacterAddPacket_AffectColorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCCharacterAddPacket_AffectColorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCCharacterAddPacket_AffectColorDefaultTypeInternal() {}
  union {
    GCCharacterAddPacket_AffectColor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCCharacterAddPacket_AffectColorDefaultTypeInternal _GCCharacterAddPacket_AffectColor_default_instance_;
PROTOBUF_CONSTEXPR GCCharacterAddPacket::GCCharacterAddPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.affect_flags_)*/{}
  , /*decltype(_impl_._affect_flags_cached_byte_size_)*/{0}
  , /*decltype(_impl_.affect_colors_)*/{}
  , /*decltype(_impl_.toggle_shining_flags_)*/{}
  , /*decltype(_impl_._toggle_shining_flags_cached_byte_size_)*/{0}
  , /*decltype(_impl_.vid_)*/0u
  , /*decltype(_impl_.level_)*/0u
  , /*decltype(_impl_.ai_flag_)*/0u
  , /*decltype(_impl_.angle_)*/0
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.z_)*/0
  , /*decltype(_impl_.type_)*/0u
  , /*decltype(_impl_.race_num_)*/0u
  , /*decltype(_impl_.moving_speed_)*/0u
  , /*decltype(_impl_.attack_speed_)*/0u
  , /*decltype(_impl_.state_flag_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCCharacterAddPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCCharacterAddPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCCharacterAddPacketDefaultTypeInternal() {}
  union {
    GCCharacterAddPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCCharacterAddPacketDefaultTypeInternal _GCCharacterAddPacket_default_instance_;
PROTOBUF_CONSTEXPR GCCharacterAdditionalInfoPacket::GCCharacterAdditionalInfoPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.parts_)*/{}
  , /*decltype(_impl_._parts_cached_byte_size_)*/{0}
  , /*decltype(_impl_.skill_colors_)*/{}
  , /*decltype(_impl_._skill_colors_cached_byte_size_)*/{0}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.vid_)*/0u
  , /*decltype(_impl_.acce_sparkle_)*/false
  , /*decltype(_impl_.empire_)*/0u
  , /*decltype(_impl_.guild_id_)*/0u
  , /*decltype(_impl_.level_)*/0u
  , /*decltype(_impl_.alignment_)*/0
  , /*decltype(_impl_.pk_mode_)*/0u
  , /*decltype(_impl_.mount_vnum_)*/0u
  , /*decltype(_impl_.locale_)*/0
  , /*decltype(_impl_.pvp_team_)*/0
  , /*decltype(_impl_.combat_zone_rank_)*/0u
  , /*decltype(_impl_.mob_scale_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCCharacterAdditionalInfoPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCCharacterAdditionalInfoPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCCharacterAdditionalInfoPacketDefaultTypeInternal() {}
  union {
    GCCharacterAdditionalInfoPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCCharacterAdditionalInfoPacketDefaultTypeInternal _GCCharacterAdditionalInfoPacket_default_instance_;
PROTOBUF_CONSTEXPR GCCharacterUpdatePacket::GCCharacterUpdatePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.parts_)*/{}
  , /*decltype(_impl_._parts_cached_byte_size_)*/{0}
  , /*decltype(_impl_.affect_flags_)*/{}
  , /*decltype(_impl_._affect_flags_cached_byte_size_)*/{0}
  , /*decltype(_impl_.affect_colors_)*/{}
  , /*decltype(_impl_.toggle_shining_flags_)*/{}
  , /*decltype(_impl_._toggle_shining_flags_cached_byte_size_)*/{0}
  , /*decltype(_impl_.skill_colors_)*/{}
  , /*decltype(_impl_._skill_colors_cached_byte_size_)*/{0}
  , /*decltype(_impl_.vid_)*/0u
  , /*decltype(_impl_.acce_sparkle_)*/false
  , /*decltype(_impl_.moving_speed_)*/0u
  , /*decltype(_impl_.attack_speed_)*/0u
  , /*decltype(_impl_.state_flag_)*/0u
  , /*decltype(_impl_.guild_id_)*/0u
  , /*decltype(_impl_.alignment_)*/0
  , /*decltype(_impl_.pk_mode_)*/0u
  , /*decltype(_impl_.mount_vnum_)*/0u
  , /*decltype(_impl_.combat_zone_points_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCCharacterUpdatePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCCharacterUpdatePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCCharacterUpdatePacketDefaultTypeInternal() {}
  union {
    GCCharacterUpdatePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCCharacterUpdatePacketDefaultTypeInternal _GCCharacterUpdatePacket_default_instance_;
PROTOBUF_CONSTEXPR GCCharacterShiningPacket::GCCharacterShiningPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.shinings_)*/{}
  , /*decltype(_impl_._shinings_cached_byte_size_)*/{0}
  , /*decltype(_impl_.vid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCCharacterShiningPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCCharacterShiningPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCCharacterShiningPacketDefaultTypeInternal() {}
  union {
    GCCharacterShiningPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCCharacterShiningPacketDefaultTypeInternal _GCCharacterShiningPacket_default_instance_;
PROTOBUF_CONSTEXPR GCCharacterDeletePacket::GCCharacterDeletePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.vid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCCharacterDeletePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCCharacterDeletePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCCharacterDeletePacketDefaultTypeInternal() {}
  union {
    GCCharacterDeletePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCCharacterDeletePacketDefaultTypeInternal _GCCharacterDeletePacket_default_instance_;
PROTOBUF_CONSTEXPR GCFishingStartPacket::GCFishingStartPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.vid_)*/0u
  , /*decltype(_impl_.dir_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCFishingStartPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCFishingStartPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCFishingStartPacketDefaultTypeInternal() {}
  union {
    GCFishingStartPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCFishingStartPacketDefaultTypeInternal _GCFishingStartPacket_default_instance_;
PROTOBUF_CONSTEXPR GCFishingStopPacket::GCFishingStopPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.vid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCFishingStopPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCFishingStopPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCFishingStopPacketDefaultTypeInternal() {}
  union {
    GCFishingStopPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCFishingStopPacketDefaultTypeInternal _GCFishingStopPacket_default_instance_;
PROTOBUF_CONSTEXPR GCFishingReactPacket::GCFishingReactPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.vid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCFishingReactPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCFishingReactPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCFishingReactPacketDefaultTypeInternal() {}
  union {
    GCFishingReactPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCFishingReactPacketDefaultTypeInternal _GCFishingReactPacket_default_instance_;
PROTOBUF_CONSTEXPR GCFishingSuccessPacket::GCFishingSuccessPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.vid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCFishingSuccessPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCFishingSuccessPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCFishingSuccessPacketDefaultTypeInternal() {}
  union {
    GCFishingSuccessPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCFishingSuccessPacketDefaultTypeInternal _GCFishingSuccessPacket_default_instance_;
PROTOBUF_CONSTEXPR GCFishingFailPacket::GCFishingFailPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.vid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCFishingFailPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCFishingFailPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCFishingFailPacketDefaultTypeInternal() {}
  union {
    GCFishingFailPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCFishingFailPacketDefaultTypeInternal _GCFishingFailPacket_default_instance_;
PROTOBUF_CONSTEXPR GCFishingFishInfoPacket::GCFishingFishInfoPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.info_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCFishingFishInfoPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCFishingFishInfoPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCFishingFishInfoPacketDefaultTypeInternal() {}
  union {
    GCFishingFishInfoPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCFishingFishInfoPacketDefaultTypeInternal _GCFishingFishInfoPacket_default_instance_;
PROTOBUF_CONSTEXPR GCItemSetPacket::GCItemSetPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/nullptr
  , /*decltype(_impl_.highlight_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCItemSetPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCItemSetPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCItemSetPacketDefaultTypeInternal() {}
  union {
    GCItemSetPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCItemSetPacketDefaultTypeInternal _GCItemSetPacket_default_instance_;
PROTOBUF_CONSTEXPR GCItemUpdatePacket::GCItemUpdatePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCItemUpdatePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCItemUpdatePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCItemUpdatePacketDefaultTypeInternal() {}
  union {
    GCItemUpdatePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCItemUpdatePacketDefaultTypeInternal _GCItemUpdatePacket_default_instance_;
PROTOBUF_CONSTEXPR GCItemGroundAddPacket::GCItemGroundAddPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sockets_)*/{}
  , /*decltype(_impl_._sockets_cached_byte_size_)*/{0}
  , /*decltype(_impl_.attributes_)*/{}
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.z_)*/0
  , /*decltype(_impl_.vid_)*/0u
  , /*decltype(_impl_.vnum_)*/0u
  , /*decltype(_impl_.count_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCItemGroundAddPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCItemGroundAddPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCItemGroundAddPacketDefaultTypeInternal() {}
  union {
    GCItemGroundAddPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCItemGroundAddPacketDefaultTypeInternal _GCItemGroundAddPacket_default_instance_;
PROTOBUF_CONSTEXPR GCItemGroundDeletePacket::GCItemGroundDeletePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.vid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCItemGroundDeletePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCItemGroundDeletePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCItemGroundDeletePacketDefaultTypeInternal() {}
  union {
    GCItemGroundDeletePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCItemGroundDeletePacketDefaultTypeInternal _GCItemGroundDeletePacket_default_instance_;
PROTOBUF_CONSTEXPR GCItemOwnershipPacket::GCItemOwnershipPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.vid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCItemOwnershipPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCItemOwnershipPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCItemOwnershipPacketDefaultTypeInternal() {}
  union {
    GCItemOwnershipPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCItemOwnershipPacketDefaultTypeInternal _GCItemOwnershipPacket_default_instance_;
PROTOBUF_CONSTEXPR GCExchangeStartPacket::GCExchangeStartPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.target_vid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCExchangeStartPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCExchangeStartPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCExchangeStartPacketDefaultTypeInternal() {}
  union {
    GCExchangeStartPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCExchangeStartPacketDefaultTypeInternal _GCExchangeStartPacket_default_instance_;
PROTOBUF_CONSTEXPR GCExchangeItemAddPacket::GCExchangeItemAddPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/nullptr
  , /*decltype(_impl_.display_pos_)*/0u
  , /*decltype(_impl_.is_me_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCExchangeItemAddPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCExchangeItemAddPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCExchangeItemAddPacketDefaultTypeInternal() {}
  union {
    GCExchangeItemAddPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCExchangeItemAddPacketDefaultTypeInternal _GCExchangeItemAddPacket_default_instance_;
PROTOBUF_CONSTEXPR GCExchangeItemDelPacket::GCExchangeItemDelPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.inventory_pos_)*/nullptr
  , /*decltype(_impl_.display_pos_)*/0u
  , /*decltype(_impl_.is_me_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCExchangeItemDelPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCExchangeItemDelPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCExchangeItemDelPacketDefaultTypeInternal() {}
  union {
    GCExchangeItemDelPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCExchangeItemDelPacketDefaultTypeInternal _GCExchangeItemDelPacket_default_instance_;
PROTOBUF_CONSTEXPR GCExchangeGoldAddPacket::GCExchangeGoldAddPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.gold_)*/int64_t{0}
  , /*decltype(_impl_.is_me_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCExchangeGoldAddPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCExchangeGoldAddPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCExchangeGoldAddPacketDefaultTypeInternal() {}
  union {
    GCExchangeGoldAddPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCExchangeGoldAddPacketDefaultTypeInternal _GCExchangeGoldAddPacket_default_instance_;
PROTOBUF_CONSTEXPR GCExchangeAcceptPacket::GCExchangeAcceptPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.accept_)*/false
  , /*decltype(_impl_.is_me_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCExchangeAcceptPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCExchangeAcceptPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCExchangeAcceptPacketDefaultTypeInternal() {}
  union {
    GCExchangeAcceptPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCExchangeAcceptPacketDefaultTypeInternal _GCExchangeAcceptPacket_default_instance_;
PROTOBUF_CONSTEXPR GCShopStartPacket::GCShopStartPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_.vid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCShopStartPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCShopStartPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCShopStartPacketDefaultTypeInternal() {}
  union {
    GCShopStartPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCShopStartPacketDefaultTypeInternal _GCShopStartPacket_default_instance_;
PROTOBUF_CONSTEXPR GCShopExStartPacket::GCShopExStartPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tabs_)*/{}
  , /*decltype(_impl_.vid_)*/0u
  , /*decltype(_impl_.points_)*/0u
  , /*decltype(_impl_.cur_limit_)*/0
  , /*decltype(_impl_.max_limit_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCShopExStartPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCShopExStartPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCShopExStartPacketDefaultTypeInternal() {}
  union {
    GCShopExStartPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCShopExStartPacketDefaultTypeInternal _GCShopExStartPacket_default_instance_;
PROTOBUF_CONSTEXPR GCShopUpdateItemPacket::GCShopUpdateItemPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.item_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCShopUpdateItemPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCShopUpdateItemPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCShopUpdateItemPacketDefaultTypeInternal() {}
  union {
    GCShopUpdateItemPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCShopUpdateItemPacketDefaultTypeInternal _GCShopUpdateItemPacket_default_instance_;
PROTOBUF_CONSTEXPR GCShopSignPacket::GCShopSignPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sign_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.vid_)*/0u
  , /*decltype(_impl_.red_)*/0
  , /*decltype(_impl_.green_)*/0
  , /*decltype(_impl_.blue_)*/0
  , /*decltype(_impl_.style_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCShopSignPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCShopSignPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCShopSignPacketDefaultTypeInternal() {}
  union {
    GCShopSignPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCShopSignPacketDefaultTypeInternal _GCShopSignPacket_default_instance_;
PROTOBUF_CONSTEXPR GCQuestInfoPacket::GCQuestInfoPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.title_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.clock_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.counter_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.icon_file_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.index_)*/0u
  , /*decltype(_impl_.flag_)*/0u
  , /*decltype(_impl_.is_begin_)*/false
  , /*decltype(_impl_.cat_id_)*/0u
  , /*decltype(_impl_.clock_value_)*/0
  , /*decltype(_impl_.counter_value_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCQuestInfoPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCQuestInfoPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCQuestInfoPacketDefaultTypeInternal() {}
  union {
    GCQuestInfoPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCQuestInfoPacketDefaultTypeInternal _GCQuestInfoPacket_default_instance_;
PROTOBUF_CONSTEXPR GCScriptPacket::GCScriptPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.script_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.skin_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCScriptPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCScriptPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCScriptPacketDefaultTypeInternal() {}
  union {
    GCScriptPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCScriptPacketDefaultTypeInternal _GCScriptPacket_default_instance_;
PROTOBUF_CONSTEXPR GCQuestConfirmPacket::GCQuestConfirmPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.timeout_)*/0
  , /*decltype(_impl_.request_pid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCQuestConfirmPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCQuestConfirmPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCQuestConfirmPacketDefaultTypeInternal() {}
  union {
    GCQuestConfirmPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCQuestConfirmPacketDefaultTypeInternal _GCQuestConfirmPacket_default_instance_;
PROTOBUF_CONSTEXPR GCQuestCooldownPacket_Cooldown::GCQuestCooldownPacket_Cooldown(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.cooldown_)*/0
  , /*decltype(_impl_.done_)*/0
  , /*decltype(_impl_.time_)*/0
  , /*decltype(_impl_.damage_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCQuestCooldownPacket_CooldownDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCQuestCooldownPacket_CooldownDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCQuestCooldownPacket_CooldownDefaultTypeInternal() {}
  union {
    GCQuestCooldownPacket_Cooldown _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCQuestCooldownPacket_CooldownDefaultTypeInternal _GCQuestCooldownPacket_Cooldown_default_instance_;
PROTOBUF_CONSTEXPR GCQuestCooldownPacket::GCQuestCooldownPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.datas_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCQuestCooldownPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCQuestCooldownPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCQuestCooldownPacketDefaultTypeInternal() {}
  union {
    GCQuestCooldownPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCQuestCooldownPacketDefaultTypeInternal _GCQuestCooldownPacket_default_instance_;
PROTOBUF_CONSTEXPR GCPetSummonPacket::GCPetSummonPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pet_)*/nullptr
  , /*decltype(_impl_.vid_)*/0u
  , /*decltype(_impl_.item_vnum_)*/0u
  , /*decltype(_impl_.next_exp_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCPetSummonPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCPetSummonPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCPetSummonPacketDefaultTypeInternal() {}
  union {
    GCPetSummonPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCPetSummonPacketDefaultTypeInternal _GCPetSummonPacket_default_instance_;
PROTOBUF_CONSTEXPR GCPetUpdateExpPacket::GCPetUpdateExpPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.exp_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCPetUpdateExpPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCPetUpdateExpPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCPetUpdateExpPacketDefaultTypeInternal() {}
  union {
    GCPetUpdateExpPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCPetUpdateExpPacketDefaultTypeInternal _GCPetUpdateExpPacket_default_instance_;
PROTOBUF_CONSTEXPR GCPetUpdateLevelPacket::GCPetUpdateLevelPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.next_exp_)*/int64_t{0}
  , /*decltype(_impl_.level_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCPetUpdateLevelPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCPetUpdateLevelPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCPetUpdateLevelPacketDefaultTypeInternal() {}
  union {
    GCPetUpdateLevelPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCPetUpdateLevelPacketDefaultTypeInternal _GCPetUpdateLevelPacket_default_instance_;
PROTOBUF_CONSTEXPR GCPetUpdateSkillPacket::GCPetUpdateSkillPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.skill_)*/nullptr
  , /*decltype(_impl_.index_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCPetUpdateSkillPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCPetUpdateSkillPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCPetUpdateSkillPacketDefaultTypeInternal() {}
  union {
    GCPetUpdateSkillPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCPetUpdateSkillPacketDefaultTypeInternal _GCPetUpdateSkillPacket_default_instance_;
PROTOBUF_CONSTEXPR GCPetUpdateAttrPacket::GCPetUpdateAttrPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.index_)*/0u
  , /*decltype(_impl_.type_)*/0u
  , /*decltype(_impl_.level_)*/0u
  , /*decltype(_impl_.value_)*/0
  , /*decltype(_impl_.can_upgrade_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCPetUpdateAttrPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCPetUpdateAttrPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCPetUpdateAttrPacketDefaultTypeInternal() {}
  union {
    GCPetUpdateAttrPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCPetUpdateAttrPacketDefaultTypeInternal _GCPetUpdateAttrPacket_default_instance_;
PROTOBUF_CONSTEXPR GCPetUpdateSkillpowerPacket::GCPetUpdateSkillpowerPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.power_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCPetUpdateSkillpowerPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCPetUpdateSkillpowerPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCPetUpdateSkillpowerPacketDefaultTypeInternal() {}
  union {
    GCPetUpdateSkillpowerPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCPetUpdateSkillpowerPacketDefaultTypeInternal _GCPetUpdateSkillpowerPacket_default_instance_;
PROTOBUF_CONSTEXPR GCPetEvolutionInfoPacket::GCPetEvolutionInfoPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.materials_)*/{}
  , /*decltype(_impl_.cost_)*/int64_t{0}
  , /*decltype(_impl_.prob_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCPetEvolutionInfoPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCPetEvolutionInfoPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCPetEvolutionInfoPacketDefaultTypeInternal() {}
  union {
    GCPetEvolutionInfoPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCPetEvolutionInfoPacketDefaultTypeInternal _GCPetEvolutionInfoPacket_default_instance_;
PROTOBUF_CONSTEXPR GCPetEvolveResultPacket::GCPetEvolveResultPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.result_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCPetEvolveResultPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCPetEvolveResultPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCPetEvolveResultPacketDefaultTypeInternal() {}
  union {
    GCPetEvolveResultPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCPetEvolveResultPacketDefaultTypeInternal _GCPetEvolveResultPacket_default_instance_;
PROTOBUF_CONSTEXPR GCPetAttrRefineInfoPacket::GCPetAttrRefineInfoPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.materials_)*/{}
  , /*decltype(_impl_.cost_)*/int64_t{0}
  , /*decltype(_impl_.index_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCPetAttrRefineInfoPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCPetAttrRefineInfoPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCPetAttrRefineInfoPacketDefaultTypeInternal() {}
  union {
    GCPetAttrRefineInfoPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCPetAttrRefineInfoPacketDefaultTypeInternal _GCPetAttrRefineInfoPacket_default_instance_;
PROTOBUF_CONSTEXPR GCPartyInvitePacket::GCPartyInvitePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.leader_vid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCPartyInvitePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCPartyInvitePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCPartyInvitePacketDefaultTypeInternal() {}
  union {
    GCPartyInvitePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCPartyInvitePacketDefaultTypeInternal _GCPartyInvitePacket_default_instance_;
PROTOBUF_CONSTEXPR GCPartyAddPacket::GCPartyAddPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCPartyAddPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCPartyAddPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCPartyAddPacketDefaultTypeInternal() {}
  union {
    GCPartyAddPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCPartyAddPacketDefaultTypeInternal _GCPartyAddPacket_default_instance_;
PROTOBUF_CONSTEXPR GCPartyUpdatePacket::GCPartyUpdatePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.affects_)*/{}
  , /*decltype(_impl_._affects_cached_byte_size_)*/{0}
  , /*decltype(_impl_.pid_)*/0u
  , /*decltype(_impl_.role_)*/0u
  , /*decltype(_impl_.percent_hp_)*/0u
  , /*decltype(_impl_.leader_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCPartyUpdatePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCPartyUpdatePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCPartyUpdatePacketDefaultTypeInternal() {}
  union {
    GCPartyUpdatePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCPartyUpdatePacketDefaultTypeInternal _GCPartyUpdatePacket_default_instance_;
PROTOBUF_CONSTEXPR GCPartyRemovePacket::GCPartyRemovePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCPartyRemovePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCPartyRemovePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCPartyRemovePacketDefaultTypeInternal() {}
  union {
    GCPartyRemovePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCPartyRemovePacketDefaultTypeInternal _GCPartyRemovePacket_default_instance_;
PROTOBUF_CONSTEXPR GCPartyLinkPacket::GCPartyLinkPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pid_)*/0u
  , /*decltype(_impl_.vid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCPartyLinkPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCPartyLinkPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCPartyLinkPacketDefaultTypeInternal() {}
  union {
    GCPartyLinkPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCPartyLinkPacketDefaultTypeInternal _GCPartyLinkPacket_default_instance_;
PROTOBUF_CONSTEXPR GCPartyUnlinkPacket::GCPartyUnlinkPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pid_)*/0u
  , /*decltype(_impl_.vid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCPartyUnlinkPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCPartyUnlinkPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCPartyUnlinkPacketDefaultTypeInternal() {}
  union {
    GCPartyUnlinkPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCPartyUnlinkPacketDefaultTypeInternal _GCPartyUnlinkPacket_default_instance_;
PROTOBUF_CONSTEXPR GCPartyParameterPacket::GCPartyParameterPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.distribute_mode_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCPartyParameterPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCPartyParameterPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCPartyParameterPacketDefaultTypeInternal() {}
  union {
    GCPartyParameterPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCPartyParameterPacketDefaultTypeInternal _GCPartyParameterPacket_default_instance_;
PROTOBUF_CONSTEXPR GCGuildLoginPacket::GCGuildLoginPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCGuildLoginPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCGuildLoginPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCGuildLoginPacketDefaultTypeInternal() {}
  union {
    GCGuildLoginPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCGuildLoginPacketDefaultTypeInternal _GCGuildLoginPacket_default_instance_;
PROTOBUF_CONSTEXPR GCGuildLogoutPacket::GCGuildLogoutPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCGuildLogoutPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCGuildLogoutPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCGuildLogoutPacketDefaultTypeInternal() {}
  union {
    GCGuildLogoutPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCGuildLogoutPacketDefaultTypeInternal _GCGuildLogoutPacket_default_instance_;
PROTOBUF_CONSTEXPR GCGuildRemovePacket::GCGuildRemovePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCGuildRemovePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCGuildRemovePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCGuildRemovePacketDefaultTypeInternal() {}
  union {
    GCGuildRemovePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCGuildRemovePacketDefaultTypeInternal _GCGuildRemovePacket_default_instance_;
PROTOBUF_CONSTEXPR GCGuildMemberListPacket::GCGuildMemberListPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.members_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCGuildMemberListPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCGuildMemberListPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCGuildMemberListPacketDefaultTypeInternal() {}
  union {
    GCGuildMemberListPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCGuildMemberListPacketDefaultTypeInternal _GCGuildMemberListPacket_default_instance_;
PROTOBUF_CONSTEXPR GCGuildGradePacket_GradeData::GCGuildGradePacket_GradeData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.index_)*/0u
  , /*decltype(_impl_.auth_flag_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCGuildGradePacket_GradeDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCGuildGradePacket_GradeDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCGuildGradePacket_GradeDataDefaultTypeInternal() {}
  union {
    GCGuildGradePacket_GradeData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCGuildGradePacket_GradeDataDefaultTypeInternal _GCGuildGradePacket_GradeData_default_instance_;
PROTOBUF_CONSTEXPR GCGuildGradePacket::GCGuildGradePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.grades_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCGuildGradePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCGuildGradePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCGuildGradePacketDefaultTypeInternal() {}
  union {
    GCGuildGradePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCGuildGradePacketDefaultTypeInternal _GCGuildGradePacket_default_instance_;
PROTOBUF_CONSTEXPR GCGuildGradeNamePacket::GCGuildGradeNamePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.index_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCGuildGradeNamePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCGuildGradeNamePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCGuildGradeNamePacketDefaultTypeInternal() {}
  union {
    GCGuildGradeNamePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCGuildGradeNamePacketDefaultTypeInternal _GCGuildGradeNamePacket_default_instance_;
PROTOBUF_CONSTEXPR GCGuildGradeAuthPacket::GCGuildGradeAuthPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.index_)*/0u
  , /*decltype(_impl_.auth_flag_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCGuildGradeAuthPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCGuildGradeAuthPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCGuildGradeAuthPacketDefaultTypeInternal() {}
  union {
    GCGuildGradeAuthPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCGuildGradeAuthPacketDefaultTypeInternal _GCGuildGradeAuthPacket_default_instance_;
PROTOBUF_CONSTEXPR GCGuildInfoPacket::GCGuildInfoPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.wins_)*/{}
  , /*decltype(_impl_._wins_cached_byte_size_)*/{0}
  , /*decltype(_impl_.draws_)*/{}
  , /*decltype(_impl_._draws_cached_byte_size_)*/{0}
  , /*decltype(_impl_.losses_)*/{}
  , /*decltype(_impl_._losses_cached_byte_size_)*/{0}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.member_count_)*/0u
  , /*decltype(_impl_.max_member_count_)*/0u
  , /*decltype(_impl_.guild_id_)*/0u
  , /*decltype(_impl_.master_pid_)*/0u
  , /*decltype(_impl_.exp_)*/0u
  , /*decltype(_impl_.level_)*/0u
  , /*decltype(_impl_.gold_)*/0u
  , /*decltype(_impl_.has_land_)*/false
  , /*decltype(_impl_.guild_point_)*/0u
  , /*decltype(_impl_.guild_rank_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCGuildInfoPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCGuildInfoPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCGuildInfoPacketDefaultTypeInternal() {}
  union {
    GCGuildInfoPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCGuildInfoPacketDefaultTypeInternal _GCGuildInfoPacket_default_instance_;
PROTOBUF_CONSTEXPR GCGuildCommentsPacket_Comment::GCGuildCommentsPacket_Comment(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCGuildCommentsPacket_CommentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCGuildCommentsPacket_CommentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCGuildCommentsPacket_CommentDefaultTypeInternal() {}
  union {
    GCGuildCommentsPacket_Comment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCGuildCommentsPacket_CommentDefaultTypeInternal _GCGuildCommentsPacket_Comment_default_instance_;
PROTOBUF_CONSTEXPR GCGuildCommentsPacket::GCGuildCommentsPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.comments_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCGuildCommentsPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCGuildCommentsPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCGuildCommentsPacketDefaultTypeInternal() {}
  union {
    GCGuildCommentsPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCGuildCommentsPacketDefaultTypeInternal _GCGuildCommentsPacket_default_instance_;
PROTOBUF_CONSTEXPR GCGuildChangeExpPacket::GCGuildChangeExpPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.level_)*/0u
  , /*decltype(_impl_.exp_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCGuildChangeExpPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCGuildChangeExpPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCGuildChangeExpPacketDefaultTypeInternal() {}
  union {
    GCGuildChangeExpPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCGuildChangeExpPacketDefaultTypeInternal _GCGuildChangeExpPacket_default_instance_;
PROTOBUF_CONSTEXPR GCGuildChangeMemberGradePacket::GCGuildChangeMemberGradePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pid_)*/0u
  , /*decltype(_impl_.grade_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCGuildChangeMemberGradePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCGuildChangeMemberGradePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCGuildChangeMemberGradePacketDefaultTypeInternal() {}
  union {
    GCGuildChangeMemberGradePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCGuildChangeMemberGradePacketDefaultTypeInternal _GCGuildChangeMemberGradePacket_default_instance_;
PROTOBUF_CONSTEXPR GCGuildSkillInfoPacket::GCGuildSkillInfoPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.skill_levels_)*/{}
  , /*decltype(_impl_._skill_levels_cached_byte_size_)*/{0}
  , /*decltype(_impl_.skill_point_)*/0u
  , /*decltype(_impl_.guild_point_)*/0u
  , /*decltype(_impl_.max_guild_point_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCGuildSkillInfoPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCGuildSkillInfoPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCGuildSkillInfoPacketDefaultTypeInternal() {}
  union {
    GCGuildSkillInfoPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCGuildSkillInfoPacketDefaultTypeInternal _GCGuildSkillInfoPacket_default_instance_;
PROTOBUF_CONSTEXPR GCGuildChangeMemberGeneralPacket::GCGuildChangeMemberGeneralPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pid_)*/0u
  , /*decltype(_impl_.flag_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCGuildChangeMemberGeneralPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCGuildChangeMemberGeneralPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCGuildChangeMemberGeneralPacketDefaultTypeInternal() {}
  union {
    GCGuildChangeMemberGeneralPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCGuildChangeMemberGeneralPacketDefaultTypeInternal _GCGuildChangeMemberGeneralPacket_default_instance_;
PROTOBUF_CONSTEXPR GCGuildInvitePacket::GCGuildInvitePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.guild_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.guild_id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCGuildInvitePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCGuildInvitePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCGuildInvitePacketDefaultTypeInternal() {}
  union {
    GCGuildInvitePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCGuildInvitePacketDefaultTypeInternal _GCGuildInvitePacket_default_instance_;
PROTOBUF_CONSTEXPR GCGuildMemberLastPlayedPacket_MemberInfo::GCGuildMemberLastPlayedPacket_MemberInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pid_)*/0u
  , /*decltype(_impl_.timestamp_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCGuildMemberLastPlayedPacket_MemberInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCGuildMemberLastPlayedPacket_MemberInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCGuildMemberLastPlayedPacket_MemberInfoDefaultTypeInternal() {}
  union {
    GCGuildMemberLastPlayedPacket_MemberInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCGuildMemberLastPlayedPacket_MemberInfoDefaultTypeInternal _GCGuildMemberLastPlayedPacket_MemberInfo_default_instance_;
PROTOBUF_CONSTEXPR GCGuildMemberLastPlayedPacket::GCGuildMemberLastPlayedPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.members_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCGuildMemberLastPlayedPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCGuildMemberLastPlayedPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCGuildMemberLastPlayedPacketDefaultTypeInternal() {}
  union {
    GCGuildMemberLastPlayedPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCGuildMemberLastPlayedPacketDefaultTypeInternal _GCGuildMemberLastPlayedPacket_default_instance_;
PROTOBUF_CONSTEXPR GCGuildBattleStatsPacket::GCGuildBattleStatsPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.wins_)*/{}
  , /*decltype(_impl_._wins_cached_byte_size_)*/{0}
  , /*decltype(_impl_.draws_)*/{}
  , /*decltype(_impl_._draws_cached_byte_size_)*/{0}
  , /*decltype(_impl_.losses_)*/{}
  , /*decltype(_impl_._losses_cached_byte_size_)*/{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCGuildBattleStatsPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCGuildBattleStatsPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCGuildBattleStatsPacketDefaultTypeInternal() {}
  union {
    GCGuildBattleStatsPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCGuildBattleStatsPacketDefaultTypeInternal _GCGuildBattleStatsPacket_default_instance_;
PROTOBUF_CONSTEXPR GCGuildWarPacket::GCGuildWarPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.guild_self_)*/0u
  , /*decltype(_impl_.guild_opponent_)*/0u
  , /*decltype(_impl_.type_)*/0u
  , /*decltype(_impl_.war_state_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCGuildWarPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCGuildWarPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCGuildWarPacketDefaultTypeInternal() {}
  union {
    GCGuildWarPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCGuildWarPacketDefaultTypeInternal _GCGuildWarPacket_default_instance_;
PROTOBUF_CONSTEXPR GCGuildNamePacket_NameInfo::GCGuildNamePacket_NameInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.guild_id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCGuildNamePacket_NameInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCGuildNamePacket_NameInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCGuildNamePacket_NameInfoDefaultTypeInternal() {}
  union {
    GCGuildNamePacket_NameInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCGuildNamePacket_NameInfoDefaultTypeInternal _GCGuildNamePacket_NameInfo_default_instance_;
PROTOBUF_CONSTEXPR GCGuildNamePacket::GCGuildNamePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.names_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCGuildNamePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCGuildNamePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCGuildNamePacketDefaultTypeInternal() {}
  union {
    GCGuildNamePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCGuildNamePacketDefaultTypeInternal _GCGuildNamePacket_default_instance_;
PROTOBUF_CONSTEXPR GCGuildWarListPacket_WarInfo::GCGuildWarListPacket_WarInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.src_guild_id_)*/0u
  , /*decltype(_impl_.dst_guild_id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCGuildWarListPacket_WarInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCGuildWarListPacket_WarInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCGuildWarListPacket_WarInfoDefaultTypeInternal() {}
  union {
    GCGuildWarListPacket_WarInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCGuildWarListPacket_WarInfoDefaultTypeInternal _GCGuildWarListPacket_WarInfo_default_instance_;
PROTOBUF_CONSTEXPR GCGuildWarListPacket::GCGuildWarListPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.wars_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCGuildWarListPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCGuildWarListPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCGuildWarListPacketDefaultTypeInternal() {}
  union {
    GCGuildWarListPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCGuildWarListPacketDefaultTypeInternal _GCGuildWarListPacket_default_instance_;
PROTOBUF_CONSTEXPR GCGuildWarEndListPacket::GCGuildWarEndListPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.wars_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCGuildWarEndListPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCGuildWarEndListPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCGuildWarEndListPacketDefaultTypeInternal() {}
  union {
    GCGuildWarEndListPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCGuildWarEndListPacketDefaultTypeInternal _GCGuildWarEndListPacket_default_instance_;
PROTOBUF_CONSTEXPR GCGuildWarPointPacket::GCGuildWarPointPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.gain_guild_id_)*/0u
  , /*decltype(_impl_.opponent_guild_id_)*/0u
  , /*decltype(_impl_.point_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCGuildWarPointPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCGuildWarPointPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCGuildWarPointPacketDefaultTypeInternal() {}
  union {
    GCGuildWarPointPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCGuildWarPointPacketDefaultTypeInternal _GCGuildWarPointPacket_default_instance_;
PROTOBUF_CONSTEXPR GCGuildMoneyChangePacket::GCGuildMoneyChangePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.gold_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCGuildMoneyChangePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCGuildMoneyChangePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCGuildMoneyChangePacketDefaultTypeInternal() {}
  union {
    GCGuildMoneyChangePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCGuildMoneyChangePacketDefaultTypeInternal _GCGuildMoneyChangePacket_default_instance_;
PROTOBUF_CONSTEXPR GCGuildSafeboxOpenPacket::GCGuildSafeboxOpenPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.size_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCGuildSafeboxOpenPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCGuildSafeboxOpenPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCGuildSafeboxOpenPacketDefaultTypeInternal() {}
  union {
    GCGuildSafeboxOpenPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCGuildSafeboxOpenPacketDefaultTypeInternal _GCGuildSafeboxOpenPacket_default_instance_;
PROTOBUF_CONSTEXPR GCGuildSafeboxGoldPacket::GCGuildSafeboxGoldPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.gold_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCGuildSafeboxGoldPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCGuildSafeboxGoldPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCGuildSafeboxGoldPacketDefaultTypeInternal() {}
  union {
    GCGuildSafeboxGoldPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCGuildSafeboxGoldPacketDefaultTypeInternal _GCGuildSafeboxGoldPacket_default_instance_;
PROTOBUF_CONSTEXPR GCGuildSafeboxLoadLogPacket::GCGuildSafeboxLoadLogPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.logs_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCGuildSafeboxLoadLogPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCGuildSafeboxLoadLogPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCGuildSafeboxLoadLogPacketDefaultTypeInternal() {}
  union {
    GCGuildSafeboxLoadLogPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCGuildSafeboxLoadLogPacketDefaultTypeInternal _GCGuildSafeboxLoadLogPacket_default_instance_;
PROTOBUF_CONSTEXPR GCGuildSafeboxAppendLogPacket::GCGuildSafeboxAppendLogPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.log_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCGuildSafeboxAppendLogPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCGuildSafeboxAppendLogPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCGuildSafeboxAppendLogPacketDefaultTypeInternal() {}
  union {
    GCGuildSafeboxAppendLogPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCGuildSafeboxAppendLogPacketDefaultTypeInternal _GCGuildSafeboxAppendLogPacket_default_instance_;
PROTOBUF_CONSTEXPR GCGuildLadderListPacket::GCGuildLadderListPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ladders_)*/{}
  , /*decltype(_impl_.page_number_)*/0u
  , /*decltype(_impl_.total_pages_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCGuildLadderListPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCGuildLadderListPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCGuildLadderListPacketDefaultTypeInternal() {}
  union {
    GCGuildLadderListPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCGuildLadderListPacketDefaultTypeInternal _GCGuildLadderListPacket_default_instance_;
PROTOBUF_CONSTEXPR GCGuildLadderSearchResultPacket::GCGuildLadderSearchResultPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ladder_)*/nullptr
  , /*decltype(_impl_.rank_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCGuildLadderSearchResultPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCGuildLadderSearchResultPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCGuildLadderSearchResultPacketDefaultTypeInternal() {}
  union {
    GCGuildLadderSearchResultPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCGuildLadderSearchResultPacketDefaultTypeInternal _GCGuildLadderSearchResultPacket_default_instance_;
PROTOBUF_CONSTEXPR GCGuildRankAndPointPacket::GCGuildRankAndPointPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.point_)*/0
  , /*decltype(_impl_.rank_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCGuildRankAndPointPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCGuildRankAndPointPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCGuildRankAndPointPacketDefaultTypeInternal() {}
  union {
    GCGuildRankAndPointPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCGuildRankAndPointPacketDefaultTypeInternal _GCGuildRankAndPointPacket_default_instance_;
PROTOBUF_CONSTEXPR GCGuildSymbolDataPacket::GCGuildSymbolDataPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.image_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.guild_id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCGuildSymbolDataPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCGuildSymbolDataPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCGuildSymbolDataPacketDefaultTypeInternal() {}
  union {
    GCGuildSymbolDataPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCGuildSymbolDataPacketDefaultTypeInternal _GCGuildSymbolDataPacket_default_instance_;
PROTOBUF_CONSTEXPR GCMarkIDXListPacket_Element::GCMarkIDXListPacket_Element(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.guild_id_)*/0u
  , /*decltype(_impl_.mark_id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCMarkIDXListPacket_ElementDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCMarkIDXListPacket_ElementDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCMarkIDXListPacket_ElementDefaultTypeInternal() {}
  union {
    GCMarkIDXListPacket_Element _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCMarkIDXListPacket_ElementDefaultTypeInternal _GCMarkIDXListPacket_Element_default_instance_;
PROTOBUF_CONSTEXPR GCMarkIDXListPacket::GCMarkIDXListPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.elems_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCMarkIDXListPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCMarkIDXListPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCMarkIDXListPacketDefaultTypeInternal() {}
  union {
    GCMarkIDXListPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCMarkIDXListPacketDefaultTypeInternal _GCMarkIDXListPacket_default_instance_;
PROTOBUF_CONSTEXPR GCMarkBlockPacket::GCMarkBlockPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.image_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.image_index_)*/0u
  , /*decltype(_impl_.block_count_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GCMarkBlockPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCMarkBlockPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCMarkBlockPacketDefaultTypeInternal() {}
  union {
    GCMarkBlockPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCMarkBlockPacketDefaultTypeInternal _GCMarkBlockPacket_default_instance_;
}  // namespace network
static ::_pb::Metadata file_level_metadata_gc_5fpackets_2eproto[214];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_gc_5fpackets_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_gc_5fpackets_2eproto = nullptr;

const uint32_t TableStruct_gc_5fpackets_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCSetVerifyKeyPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCSetVerifyKeyPacket, _impl_.verify_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCLoginFailurePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCLoginFailurePacket, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::network::GCLoginFailurePacket, _impl_.data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCCreateFailurePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCCreateFailurePacket, _impl_.type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCDeleteSuccessPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCDeleteSuccessPacket, _impl_.account_index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCPlayerCreateSuccessPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCPlayerCreateSuccessPacket, _impl_.account_index_),
  PROTOBUF_FIELD_OFFSET(::network::GCPlayerCreateSuccessPacket, _impl_.player_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCEmpirePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCEmpirePacket, _impl_.empire_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCLoginSuccessPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCLoginSuccessPacket, _impl_.players_),
  PROTOBUF_FIELD_OFFSET(::network::GCLoginSuccessPacket, _impl_.handle_),
  PROTOBUF_FIELD_OFFSET(::network::GCLoginSuccessPacket, _impl_.random_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCAuthSuccessPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCAuthSuccessPacket, _impl_.login_key_),
  PROTOBUF_FIELD_OFFSET(::network::GCAuthSuccessPacket, _impl_.result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCAuthSuccessOpenIDPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCAuthSuccessOpenIDPacket, _impl_.login_key_),
  PROTOBUF_FIELD_OFFSET(::network::GCAuthSuccessOpenIDPacket, _impl_.result_),
  PROTOBUF_FIELD_OFFSET(::network::GCAuthSuccessOpenIDPacket, _impl_.login_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCChangeNamePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCChangeNamePacket, _impl_.pid_),
  PROTOBUF_FIELD_OFFSET(::network::GCChangeNamePacket, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCHybridCryptSDBPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCHybridCryptSDBPacket, _impl_.data_stream_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCHybridCryptKeysPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCHybridCryptKeysPacket, _impl_.data_stream_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCRespondChannelStatusPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCRespondChannelStatusPacket, _impl_.states_),
  PROTOBUF_FIELD_OFFSET(::network::GCRespondChannelStatusPacket, _impl_.success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCPhasePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCPhasePacket, _impl_.phase_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCHandshakePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCHandshakePacket, _impl_.handshake_),
  PROTOBUF_FIELD_OFFSET(::network::GCHandshakePacket, _impl_.time_),
  PROTOBUF_FIELD_OFFSET(::network::GCHandshakePacket, _impl_.delta_),
  PROTOBUF_FIELD_OFFSET(::network::GCHandshakePacket, _impl_.crypt_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCKeyAgreementPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCKeyAgreementPacket, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::network::GCKeyAgreementPacket, _impl_.agreed_length_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCXTrapCS1RequestPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCXTrapCS1RequestPacket, _impl_.data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCPanamaPackPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCPanamaPackPacket, _impl_.pack_name_),
  PROTOBUF_FIELD_OFFSET(::network::GCPanamaPackPacket, _impl_.abiv_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCLoginVersionAnswerPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCLoginVersionAnswerPacket, _impl_.answer_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCTimePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCTimePacket, _impl_.time_),
  PROTOBUF_FIELD_OFFSET(::network::GCTimePacket, _impl_.random_),
  PROTOBUF_FIELD_OFFSET(::network::GCTimePacket, _impl_.combatzone_),
  PROTOBUF_FIELD_OFFSET(::network::GCTimePacket, _impl_.channel_),
  PROTOBUF_FIELD_OFFSET(::network::GCTimePacket, _impl_.test_server_),
  PROTOBUF_FIELD_OFFSET(::network::GCTimePacket, _impl_.map_index_),
  PROTOBUF_FIELD_OFFSET(::network::GCTimePacket, _impl_.coins_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCChannelPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCChannelPacket, _impl_.channel_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCWhisperPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCWhisperPacket, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::network::GCWhisperPacket, _impl_.locale_),
  PROTOBUF_FIELD_OFFSET(::network::GCWhisperPacket, _impl_.name_from_),
  PROTOBUF_FIELD_OFFSET(::network::GCWhisperPacket, _impl_.message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCChatPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCChatPacket, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::network::GCChatPacket, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::network::GCChatPacket, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::network::GCChatPacket, _impl_.empire_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCMovePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCMovePacket, _impl_.func_),
  PROTOBUF_FIELD_OFFSET(::network::GCMovePacket, _impl_.arg_),
  PROTOBUF_FIELD_OFFSET(::network::GCMovePacket, _impl_.rot_),
  PROTOBUF_FIELD_OFFSET(::network::GCMovePacket, _impl_.vid_),
  PROTOBUF_FIELD_OFFSET(::network::GCMovePacket, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::network::GCMovePacket, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::network::GCMovePacket, _impl_.time_),
  PROTOBUF_FIELD_OFFSET(::network::GCMovePacket, _impl_.duration_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCSyncPositionPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCSyncPositionPacket, _impl_.elements_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCFlyTargetingPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCFlyTargetingPacket, _impl_.shooter_vid_),
  PROTOBUF_FIELD_OFFSET(::network::GCFlyTargetingPacket, _impl_.target_vid_),
  PROTOBUF_FIELD_OFFSET(::network::GCFlyTargetingPacket, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::network::GCFlyTargetingPacket, _impl_.y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCAddFlyTargetingPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCAddFlyTargetingPacket, _impl_.shooter_vid_),
  PROTOBUF_FIELD_OFFSET(::network::GCAddFlyTargetingPacket, _impl_.target_vid_),
  PROTOBUF_FIELD_OFFSET(::network::GCAddFlyTargetingPacket, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::network::GCAddFlyTargetingPacket, _impl_.y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCTargetPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCTargetPacket, _impl_.vid_),
  PROTOBUF_FIELD_OFFSET(::network::GCTargetPacket, _impl_.cur_hp_),
  PROTOBUF_FIELD_OFFSET(::network::GCTargetPacket, _impl_.max_hp_),
  PROTOBUF_FIELD_OFFSET(::network::GCTargetPacket, _impl_.hppercent_),
  PROTOBUF_FIELD_OFFSET(::network::GCTargetPacket, _impl_.element_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCTargetMonsterInfoPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCTargetMonsterInfoPacket, _impl_.race_num_),
  PROTOBUF_FIELD_OFFSET(::network::GCTargetMonsterInfoPacket, _impl_.drops_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCPlayerOnlineInformationPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCPlayerOnlineInformationPacket, _impl_.player_name_),
  PROTOBUF_FIELD_OFFSET(::network::GCPlayerOnlineInformationPacket, _impl_.language_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCUpdateCharacterScalePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCUpdateCharacterScalePacket, _impl_.vid_),
  PROTOBUF_FIELD_OFFSET(::network::GCUpdateCharacterScalePacket, _impl_.scale_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCMaintenanceInfoPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCMaintenanceInfoPacket, _impl_.remaining_time_),
  PROTOBUF_FIELD_OFFSET(::network::GCMaintenanceInfoPacket, _impl_.duration_),
  PROTOBUF_FIELD_OFFSET(::network::GCMaintenanceInfoPacket, _impl_.cause_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCObserverAddPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCObserverAddPacket, _impl_.vid_),
  PROTOBUF_FIELD_OFFSET(::network::GCObserverAddPacket, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::network::GCObserverAddPacket, _impl_.y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCObserverRemovePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCObserverRemovePacket, _impl_.vid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCObserverMovePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCObserverMovePacket, _impl_.vid_),
  PROTOBUF_FIELD_OFFSET(::network::GCObserverMovePacket, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::network::GCObserverMovePacket, _impl_.y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCSafeboxSizePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCSafeboxSizePacket, _impl_.size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCSafeboxMoneyChangePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCSafeboxMoneyChangePacket, _impl_.money_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCWarpPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCWarpPacket, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::network::GCWarpPacket, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::network::GCWarpPacket, _impl_.addr_),
  PROTOBUF_FIELD_OFFSET(::network::GCWarpPacket, _impl_.port_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCPVPPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCPVPPacket, _impl_.vid_src_),
  PROTOBUF_FIELD_OFFSET(::network::GCPVPPacket, _impl_.vid_dst_),
  PROTOBUF_FIELD_OFFSET(::network::GCPVPPacket, _impl_.mode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCDuelStartPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCDuelStartPacket, _impl_.vids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCOwnershipPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCOwnershipPacket, _impl_.owner_vid_),
  PROTOBUF_FIELD_OFFSET(::network::GCOwnershipPacket, _impl_.victim_vid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCPositionPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCPositionPacket, _impl_.vid_),
  PROTOBUF_FIELD_OFFSET(::network::GCPositionPacket, _impl_.position_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCStunPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCStunPacket, _impl_.vid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCDeadPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCDeadPacket, _impl_.vid_),
  PROTOBUF_FIELD_OFFSET(::network::GCDeadPacket, _impl_.killer_is_pc_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCPointsPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCPointsPacket, _impl_.points_),
  PROTOBUF_FIELD_OFFSET(::network::GCPointsPacket, _impl_.real_points_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCPointChangePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCPointChangePacket, _impl_.vid_),
  PROTOBUF_FIELD_OFFSET(::network::GCPointChangePacket, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::network::GCPointChangePacket, _impl_.amount_),
  PROTOBUF_FIELD_OFFSET(::network::GCPointChangePacket, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCRealPointSetPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCRealPointSetPacket, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::network::GCRealPointSetPacket, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCQuickslotAddPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCQuickslotAddPacket, _impl_.pos_),
  PROTOBUF_FIELD_OFFSET(::network::GCQuickslotAddPacket, _impl_.slot_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCQuickslotDelPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCQuickslotDelPacket, _impl_.pos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCQuickslotSwapPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCQuickslotSwapPacket, _impl_.pos_),
  PROTOBUF_FIELD_OFFSET(::network::GCQuickslotSwapPacket, _impl_.change_pos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCMotionPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCMotionPacket, _impl_.vid_),
  PROTOBUF_FIELD_OFFSET(::network::GCMotionPacket, _impl_.victim_vid_),
  PROTOBUF_FIELD_OFFSET(::network::GCMotionPacket, _impl_.motion_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCDamageInfoPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCDamageInfoPacket, _impl_.vid_),
  PROTOBUF_FIELD_OFFSET(::network::GCDamageInfoPacket, _impl_.flag_),
  PROTOBUF_FIELD_OFFSET(::network::GCDamageInfoPacket, _impl_.damage_),
  PROTOBUF_FIELD_OFFSET(::network::GCDamageInfoPacket, _impl_.target_vid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCCreateFlyPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCCreateFlyPacket, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::network::GCCreateFlyPacket, _impl_.start_vid_),
  PROTOBUF_FIELD_OFFSET(::network::GCCreateFlyPacket, _impl_.end_vid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCDungeonDestinationPositionPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCDungeonDestinationPositionPacket, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::network::GCDungeonDestinationPositionPacket, _impl_.y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCSkillLevelPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCSkillLevelPacket, _impl_.levels_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCMessengerListPacket_Entry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCMessengerListPacket_Entry, _impl_.connected_),
  PROTOBUF_FIELD_OFFSET(::network::GCMessengerListPacket_Entry, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCMessengerListPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCMessengerListPacket, _impl_.players_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCMessengerBlockListPacket_Entry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCMessengerBlockListPacket_Entry, _impl_.connected_),
  PROTOBUF_FIELD_OFFSET(::network::GCMessengerBlockListPacket_Entry, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCMessengerBlockListPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCMessengerBlockListPacket, _impl_.players_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCMessengerLoginPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCMessengerLoginPacket, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCMessengerLogoutPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCMessengerLogoutPacket, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCMessengerBlockLoginPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCMessengerBlockLoginPacket, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCMessengerBlockLogoutPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCMessengerBlockLogoutPacket, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCMessengerMobilePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCMessengerMobilePacket, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::network::GCMessengerMobilePacket, _impl_.state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCWalkModePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCWalkModePacket, _impl_.vid_),
  PROTOBUF_FIELD_OFFSET(::network::GCWalkModePacket, _impl_.mode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCChangeSkillGroupPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCChangeSkillGroupPacket, _impl_.skill_group_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCRefineInformationPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCRefineInformationPacket, _impl_.pos_),
  PROTOBUF_FIELD_OFFSET(::network::GCRefineInformationPacket, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::network::GCRefineInformationPacket, _impl_.src_vnum_),
  PROTOBUF_FIELD_OFFSET(::network::GCRefineInformationPacket, _impl_.result_vnum_),
  PROTOBUF_FIELD_OFFSET(::network::GCRefineInformationPacket, _impl_.refine_table_),
  PROTOBUF_FIELD_OFFSET(::network::GCRefineInformationPacket, _impl_.can_fast_refine_),
  PROTOBUF_FIELD_OFFSET(::network::GCRefineInformationPacket, _impl_.cost_),
  PROTOBUF_FIELD_OFFSET(::network::GCRefineInformationPacket, _impl_.prob_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCSpecialEffectPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCSpecialEffectPacket, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::network::GCSpecialEffectPacket, _impl_.vid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCNPCListPacket_Position, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCNPCListPacket_Position, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::network::GCNPCListPacket_Position, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::network::GCNPCListPacket_Position, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::network::GCNPCListPacket_Position, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::network::GCNPCListPacket_Position, _impl_.race_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCNPCListPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCNPCListPacket, _impl_.positions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCViewEquipPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCViewEquipPacket, _impl_.vid_),
  PROTOBUF_FIELD_OFFSET(::network::GCViewEquipPacket, _impl_.equips_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCLandListPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCLandListPacket, _impl_.lands_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCTargetCreatePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCTargetCreatePacket, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::network::GCTargetCreatePacket, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::network::GCTargetCreatePacket, _impl_.vid_),
  PROTOBUF_FIELD_OFFSET(::network::GCTargetCreatePacket, _impl_.type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCTargetUpdatePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCTargetUpdatePacket, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::network::GCTargetUpdatePacket, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::network::GCTargetUpdatePacket, _impl_.y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCTargetDeletePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCTargetDeletePacket, _impl_.id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCAffectAddPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCAffectAddPacket, _impl_.elem_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCAffectRemovePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCAffectRemovePacket, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::network::GCAffectRemovePacket, _impl_.apply_on_),
  PROTOBUF_FIELD_OFFSET(::network::GCAffectRemovePacket, _impl_.apply_value_),
  PROTOBUF_FIELD_OFFSET(::network::GCAffectRemovePacket, _impl_.flag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCMallOpenPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCMallOpenPacket, _impl_.size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCLoverInfoPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCLoverInfoPacket, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::network::GCLoverInfoPacket, _impl_.love_point_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCLoverPointUpdatePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCLoverPointUpdatePacket, _impl_.love_point_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCDigMotionPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCDigMotionPacket, _impl_.vid_),
  PROTOBUF_FIELD_OFFSET(::network::GCDigMotionPacket, _impl_.target_vid_),
  PROTOBUF_FIELD_OFFSET(::network::GCDigMotionPacket, _impl_.count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCSpecificEffectPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCSpecificEffectPacket, _impl_.vid_),
  PROTOBUF_FIELD_OFFSET(::network::GCSpecificEffectPacket, _impl_.effect_file_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCDragonSoulRefinePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCDragonSoulRefinePacket, _impl_.sub_type_),
  PROTOBUF_FIELD_OFFSET(::network::GCDragonSoulRefinePacket, _impl_.cell_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCTeamlerStatusPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCTeamlerStatusPacket, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::network::GCTeamlerStatusPacket, _impl_.is_online_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCTeamlerShowPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCTeamlerShowPacket, _impl_.is_show_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCPartyPositionPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCPartyPositionPacket, _impl_.pid_),
  PROTOBUF_FIELD_OFFSET(::network::GCPartyPositionPacket, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::network::GCPartyPositionPacket, _impl_.y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCWikiPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCWikiPacket, _impl_.ret_id_),
  PROTOBUF_FIELD_OFFSET(::network::GCWikiPacket, _impl_.vnum_),
  PROTOBUF_FIELD_OFFSET(::network::GCWikiPacket, _impl_.wiki_info_),
  PROTOBUF_FIELD_OFFSET(::network::GCWikiPacket, _impl_.origin_infos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCWikiMobPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCWikiMobPacket, _impl_.ret_id_),
  PROTOBUF_FIELD_OFFSET(::network::GCWikiMobPacket, _impl_.vnum_),
  PROTOBUF_FIELD_OFFSET(::network::GCWikiMobPacket, _impl_.mobs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCSendCombatZonePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCSendCombatZonePacket, _impl_.sub_header_),
  PROTOBUF_FIELD_OFFSET(::network::GCSendCombatZonePacket, _impl_.is_running_),
  PROTOBUF_FIELD_OFFSET(::network::GCSendCombatZonePacket, _impl_.data_infos_),
  PROTOBUF_FIELD_OFFSET(::network::GCSendCombatZonePacket, _impl_.data_days_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCCombatZoneRankingDataPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCCombatZoneRankingDataPacket, _impl_.data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCEventRequestPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCEventRequestPacket, _impl_.event_index_),
  PROTOBUF_FIELD_OFFSET(::network::GCEventRequestPacket, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::network::GCEventRequestPacket, _impl_.desc_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCEventCancelPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCEventCancelPacket, _impl_.event_index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCEventEmpireWarLoadPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCEventEmpireWarLoadPacket, _impl_.time_left_),
  PROTOBUF_FIELD_OFFSET(::network::GCEventEmpireWarLoadPacket, _impl_.kills_),
  PROTOBUF_FIELD_OFFSET(::network::GCEventEmpireWarLoadPacket, _impl_.deaths_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCEventEmpireWarUpdatePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCEventEmpireWarUpdatePacket, _impl_.empire_),
  PROTOBUF_FIELD_OFFSET(::network::GCEventEmpireWarUpdatePacket, _impl_.kills_),
  PROTOBUF_FIELD_OFFSET(::network::GCEventEmpireWarUpdatePacket, _impl_.deaths_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCAttrtreeLevelPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCAttrtreeLevelPacket, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::network::GCAttrtreeLevelPacket, _impl_.level_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCAttrtreeRefinePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCAttrtreeRefinePacket, _impl_.pos_),
  PROTOBUF_FIELD_OFFSET(::network::GCAttrtreeRefinePacket, _impl_.refine_table_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCRunePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCRunePacket, _impl_.vnum_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCRuneRefinePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCRuneRefinePacket, _impl_.next_point_),
  PROTOBUF_FIELD_OFFSET(::network::GCRuneRefinePacket, _impl_.refine_table_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCRunePagePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCRunePagePacket, _impl_.data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCRuneLevelupPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCRuneLevelupPacket, _impl_.pos_),
  PROTOBUF_FIELD_OFFSET(::network::GCRuneLevelupPacket, _impl_.refine_table_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCEquipmentPageLoadPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCEquipmentPageLoadPacket, _impl_.pages_),
  PROTOBUF_FIELD_OFFSET(::network::GCEquipmentPageLoadPacket, _impl_.selected_index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCDmgMeterPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCDmgMeterPacket, _impl_.dmg_),
  PROTOBUF_FIELD_OFFSET(::network::GCDmgMeterPacket, _impl_.vid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCSkillMotionPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCSkillMotionPacket, _impl_.vid_),
  PROTOBUF_FIELD_OFFSET(::network::GCSkillMotionPacket, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::network::GCSkillMotionPacket, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::network::GCSkillMotionPacket, _impl_.rotation_),
  PROTOBUF_FIELD_OFFSET(::network::GCSkillMotionPacket, _impl_.time_),
  PROTOBUF_FIELD_OFFSET(::network::GCSkillMotionPacket, _impl_.skill_vnum_),
  PROTOBUF_FIELD_OFFSET(::network::GCSkillMotionPacket, _impl_.skill_level_),
  PROTOBUF_FIELD_OFFSET(::network::GCSkillMotionPacket, _impl_.skill_grade_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCFakeBuffSkillPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCFakeBuffSkillPacket, _impl_.skill_vnum_),
  PROTOBUF_FIELD_OFFSET(::network::GCFakeBuffSkillPacket, _impl_.level_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCCBTItemSetPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCCBTItemSetPacket, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::network::GCCBTItemSetPacket, _impl_.cbt_pos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCSoulRefineInfoPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCSoulRefineInfoPacket, _impl_.vnum_),
  PROTOBUF_FIELD_OFFSET(::network::GCSoulRefineInfoPacket, _impl_.apply_type_),
  PROTOBUF_FIELD_OFFSET(::network::GCSoulRefineInfoPacket, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::network::GCSoulRefineInfoPacket, _impl_.apply_values_),
  PROTOBUF_FIELD_OFFSET(::network::GCSoulRefineInfoPacket, _impl_.refine_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCPVPTeamPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCPVPTeamPacket, _impl_.vid_),
  PROTOBUF_FIELD_OFFSET(::network::GCPVPTeamPacket, _impl_.team_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCInventoryMaxNumPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCInventoryMaxNumPacket, _impl_.inv_type_),
  PROTOBUF_FIELD_OFFSET(::network::GCInventoryMaxNumPacket, _impl_.max_num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCAttributesToClientPacket_Attribute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCAttributesToClientPacket_Attribute, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::network::GCAttributesToClientPacket_Attribute, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCAttributesToClientPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCAttributesToClientPacket, _impl_.item_type_),
  PROTOBUF_FIELD_OFFSET(::network::GCAttributesToClientPacket, _impl_.item_sub_type_),
  PROTOBUF_FIELD_OFFSET(::network::GCAttributesToClientPacket, _impl_.attrs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCHorseRefineInfoPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCHorseRefineInfoPacket, _impl_.refine_index_),
  PROTOBUF_FIELD_OFFSET(::network::GCHorseRefineInfoPacket, _impl_.current_level_),
  PROTOBUF_FIELD_OFFSET(::network::GCHorseRefineInfoPacket, _impl_.refine_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCHorseRefineResultPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCHorseRefineResultPacket, _impl_.success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCGayaShopOpenPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCGayaShopOpenPacket, _impl_.datas_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCBattlepassDataPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCBattlepassDataPacket, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::network::GCBattlepassDataPacket, _impl_.data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCCrystalRefinePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCCrystalRefinePacket, _impl_.crystal_cell_),
  PROTOBUF_FIELD_OFFSET(::network::GCCrystalRefinePacket, _impl_.scroll_cell_),
  PROTOBUF_FIELD_OFFSET(::network::GCCrystalRefinePacket, _impl_.next_clarity_type_),
  PROTOBUF_FIELD_OFFSET(::network::GCCrystalRefinePacket, _impl_.next_clarity_level_),
  PROTOBUF_FIELD_OFFSET(::network::GCCrystalRefinePacket, _impl_.next_attributes_),
  PROTOBUF_FIELD_OFFSET(::network::GCCrystalRefinePacket, _impl_.required_fragments_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCCrystalUsingSlotPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCCrystalUsingSlotPacket, _impl_.cell_),
  PROTOBUF_FIELD_OFFSET(::network::GCCrystalUsingSlotPacket, _impl_.active_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCAuctionOwnedGoldPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCAuctionOwnedGoldPacket, _impl_.gold_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCAuctionOwnedItemPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCAuctionOwnedItemPacket, _impl_.item_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCAuctionSearchResultPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCAuctionSearchResultPacket, _impl_.page_),
  PROTOBUF_FIELD_OFFSET(::network::GCAuctionSearchResultPacket, _impl_.max_page_),
  PROTOBUF_FIELD_OFFSET(::network::GCAuctionSearchResultPacket, _impl_.items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCAuctionMessagePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCAuctionMessagePacket, _impl_.message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCAuctionShopOwnedPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCAuctionShopOwnedPacket, _impl_.owned_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCAuctionShopPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCAuctionShopPacket, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::network::GCAuctionShopPacket, _impl_.timeout_),
  PROTOBUF_FIELD_OFFSET(::network::GCAuctionShopPacket, _impl_.gold_),
  PROTOBUF_FIELD_OFFSET(::network::GCAuctionShopPacket, _impl_.items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCAuctionShopGoldPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCAuctionShopGoldPacket, _impl_.gold_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCAuctionShopTimeoutPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCAuctionShopTimeoutPacket, _impl_.timeout_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCAuctionShopGuestOpenPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCAuctionShopGuestOpenPacket, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::network::GCAuctionShopGuestOpenPacket, _impl_.items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCAuctionShopGuestUpdatePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCAuctionShopGuestUpdatePacket, _impl_.item_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCAuctionShopHistoryPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCAuctionShopHistoryPacket, _impl_.elems_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCAuctionAveragePricePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCAuctionAveragePricePacket, _impl_.requestor_),
  PROTOBUF_FIELD_OFFSET(::network::GCAuctionAveragePricePacket, _impl_.price_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCMainCharacterPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCMainCharacterPacket, _impl_.vid_),
  PROTOBUF_FIELD_OFFSET(::network::GCMainCharacterPacket, _impl_.race_num_),
  PROTOBUF_FIELD_OFFSET(::network::GCMainCharacterPacket, _impl_.chr_name_),
  PROTOBUF_FIELD_OFFSET(::network::GCMainCharacterPacket, _impl_.bgm_name_),
  PROTOBUF_FIELD_OFFSET(::network::GCMainCharacterPacket, _impl_.bgm_vol_),
  PROTOBUF_FIELD_OFFSET(::network::GCMainCharacterPacket, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::network::GCMainCharacterPacket, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::network::GCMainCharacterPacket, _impl_.z_),
  PROTOBUF_FIELD_OFFSET(::network::GCMainCharacterPacket, _impl_.empire_),
  PROTOBUF_FIELD_OFFSET(::network::GCMainCharacterPacket, _impl_.skill_group_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCCharacterAddPacket_AffectColor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCCharacterAddPacket_AffectColor, _impl_.flag_),
  PROTOBUF_FIELD_OFFSET(::network::GCCharacterAddPacket_AffectColor, _impl_.color_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCCharacterAddPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCCharacterAddPacket, _impl_.vid_),
  PROTOBUF_FIELD_OFFSET(::network::GCCharacterAddPacket, _impl_.level_),
  PROTOBUF_FIELD_OFFSET(::network::GCCharacterAddPacket, _impl_.ai_flag_),
  PROTOBUF_FIELD_OFFSET(::network::GCCharacterAddPacket, _impl_.angle_),
  PROTOBUF_FIELD_OFFSET(::network::GCCharacterAddPacket, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::network::GCCharacterAddPacket, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::network::GCCharacterAddPacket, _impl_.z_),
  PROTOBUF_FIELD_OFFSET(::network::GCCharacterAddPacket, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::network::GCCharacterAddPacket, _impl_.race_num_),
  PROTOBUF_FIELD_OFFSET(::network::GCCharacterAddPacket, _impl_.moving_speed_),
  PROTOBUF_FIELD_OFFSET(::network::GCCharacterAddPacket, _impl_.attack_speed_),
  PROTOBUF_FIELD_OFFSET(::network::GCCharacterAddPacket, _impl_.state_flag_),
  PROTOBUF_FIELD_OFFSET(::network::GCCharacterAddPacket, _impl_.affect_flags_),
  PROTOBUF_FIELD_OFFSET(::network::GCCharacterAddPacket, _impl_.affect_colors_),
  PROTOBUF_FIELD_OFFSET(::network::GCCharacterAddPacket, _impl_.toggle_shining_flags_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCCharacterAdditionalInfoPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCCharacterAdditionalInfoPacket, _impl_.vid_),
  PROTOBUF_FIELD_OFFSET(::network::GCCharacterAdditionalInfoPacket, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::network::GCCharacterAdditionalInfoPacket, _impl_.parts_),
  PROTOBUF_FIELD_OFFSET(::network::GCCharacterAdditionalInfoPacket, _impl_.acce_sparkle_),
  PROTOBUF_FIELD_OFFSET(::network::GCCharacterAdditionalInfoPacket, _impl_.empire_),
  PROTOBUF_FIELD_OFFSET(::network::GCCharacterAdditionalInfoPacket, _impl_.guild_id_),
  PROTOBUF_FIELD_OFFSET(::network::GCCharacterAdditionalInfoPacket, _impl_.level_),
  PROTOBUF_FIELD_OFFSET(::network::GCCharacterAdditionalInfoPacket, _impl_.alignment_),
  PROTOBUF_FIELD_OFFSET(::network::GCCharacterAdditionalInfoPacket, _impl_.pk_mode_),
  PROTOBUF_FIELD_OFFSET(::network::GCCharacterAdditionalInfoPacket, _impl_.mount_vnum_),
  PROTOBUF_FIELD_OFFSET(::network::GCCharacterAdditionalInfoPacket, _impl_.locale_),
  PROTOBUF_FIELD_OFFSET(::network::GCCharacterAdditionalInfoPacket, _impl_.pvp_team_),
  PROTOBUF_FIELD_OFFSET(::network::GCCharacterAdditionalInfoPacket, _impl_.combat_zone_rank_),
  PROTOBUF_FIELD_OFFSET(::network::GCCharacterAdditionalInfoPacket, _impl_.skill_colors_),
  PROTOBUF_FIELD_OFFSET(::network::GCCharacterAdditionalInfoPacket, _impl_.mob_scale_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCCharacterUpdatePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCCharacterUpdatePacket, _impl_.vid_),
  PROTOBUF_FIELD_OFFSET(::network::GCCharacterUpdatePacket, _impl_.parts_),
  PROTOBUF_FIELD_OFFSET(::network::GCCharacterUpdatePacket, _impl_.acce_sparkle_),
  PROTOBUF_FIELD_OFFSET(::network::GCCharacterUpdatePacket, _impl_.moving_speed_),
  PROTOBUF_FIELD_OFFSET(::network::GCCharacterUpdatePacket, _impl_.attack_speed_),
  PROTOBUF_FIELD_OFFSET(::network::GCCharacterUpdatePacket, _impl_.state_flag_),
  PROTOBUF_FIELD_OFFSET(::network::GCCharacterUpdatePacket, _impl_.affect_flags_),
  PROTOBUF_FIELD_OFFSET(::network::GCCharacterUpdatePacket, _impl_.affect_colors_),
  PROTOBUF_FIELD_OFFSET(::network::GCCharacterUpdatePacket, _impl_.toggle_shining_flags_),
  PROTOBUF_FIELD_OFFSET(::network::GCCharacterUpdatePacket, _impl_.guild_id_),
  PROTOBUF_FIELD_OFFSET(::network::GCCharacterUpdatePacket, _impl_.alignment_),
  PROTOBUF_FIELD_OFFSET(::network::GCCharacterUpdatePacket, _impl_.pk_mode_),
  PROTOBUF_FIELD_OFFSET(::network::GCCharacterUpdatePacket, _impl_.mount_vnum_),
  PROTOBUF_FIELD_OFFSET(::network::GCCharacterUpdatePacket, _impl_.combat_zone_points_),
  PROTOBUF_FIELD_OFFSET(::network::GCCharacterUpdatePacket, _impl_.skill_colors_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCCharacterShiningPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCCharacterShiningPacket, _impl_.vid_),
  PROTOBUF_FIELD_OFFSET(::network::GCCharacterShiningPacket, _impl_.shinings_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCCharacterDeletePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCCharacterDeletePacket, _impl_.vid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCFishingStartPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCFishingStartPacket, _impl_.vid_),
  PROTOBUF_FIELD_OFFSET(::network::GCFishingStartPacket, _impl_.dir_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCFishingStopPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCFishingStopPacket, _impl_.vid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCFishingReactPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCFishingReactPacket, _impl_.vid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCFishingSuccessPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCFishingSuccessPacket, _impl_.vid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCFishingFailPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCFishingFailPacket, _impl_.vid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCFishingFishInfoPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCFishingFishInfoPacket, _impl_.info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCItemSetPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCItemSetPacket, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::network::GCItemSetPacket, _impl_.highlight_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCItemUpdatePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCItemUpdatePacket, _impl_.data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCItemGroundAddPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCItemGroundAddPacket, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::network::GCItemGroundAddPacket, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::network::GCItemGroundAddPacket, _impl_.z_),
  PROTOBUF_FIELD_OFFSET(::network::GCItemGroundAddPacket, _impl_.vid_),
  PROTOBUF_FIELD_OFFSET(::network::GCItemGroundAddPacket, _impl_.vnum_),
  PROTOBUF_FIELD_OFFSET(::network::GCItemGroundAddPacket, _impl_.count_),
  PROTOBUF_FIELD_OFFSET(::network::GCItemGroundAddPacket, _impl_.sockets_),
  PROTOBUF_FIELD_OFFSET(::network::GCItemGroundAddPacket, _impl_.attributes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCItemGroundDeletePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCItemGroundDeletePacket, _impl_.vid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCItemOwnershipPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCItemOwnershipPacket, _impl_.vid_),
  PROTOBUF_FIELD_OFFSET(::network::GCItemOwnershipPacket, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCExchangeStartPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCExchangeStartPacket, _impl_.target_vid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCExchangeItemAddPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCExchangeItemAddPacket, _impl_.display_pos_),
  PROTOBUF_FIELD_OFFSET(::network::GCExchangeItemAddPacket, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::network::GCExchangeItemAddPacket, _impl_.is_me_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCExchangeItemDelPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCExchangeItemDelPacket, _impl_.display_pos_),
  PROTOBUF_FIELD_OFFSET(::network::GCExchangeItemDelPacket, _impl_.inventory_pos_),
  PROTOBUF_FIELD_OFFSET(::network::GCExchangeItemDelPacket, _impl_.is_me_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCExchangeGoldAddPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCExchangeGoldAddPacket, _impl_.gold_),
  PROTOBUF_FIELD_OFFSET(::network::GCExchangeGoldAddPacket, _impl_.is_me_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCExchangeAcceptPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCExchangeAcceptPacket, _impl_.accept_),
  PROTOBUF_FIELD_OFFSET(::network::GCExchangeAcceptPacket, _impl_.is_me_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCShopStartPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCShopStartPacket, _impl_.vid_),
  PROTOBUF_FIELD_OFFSET(::network::GCShopStartPacket, _impl_.items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCShopExStartPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCShopExStartPacket, _impl_.vid_),
  PROTOBUF_FIELD_OFFSET(::network::GCShopExStartPacket, _impl_.tabs_),
  PROTOBUF_FIELD_OFFSET(::network::GCShopExStartPacket, _impl_.points_),
  PROTOBUF_FIELD_OFFSET(::network::GCShopExStartPacket, _impl_.cur_limit_),
  PROTOBUF_FIELD_OFFSET(::network::GCShopExStartPacket, _impl_.max_limit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCShopUpdateItemPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCShopUpdateItemPacket, _impl_.item_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCShopSignPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCShopSignPacket, _impl_.vid_),
  PROTOBUF_FIELD_OFFSET(::network::GCShopSignPacket, _impl_.sign_),
  PROTOBUF_FIELD_OFFSET(::network::GCShopSignPacket, _impl_.red_),
  PROTOBUF_FIELD_OFFSET(::network::GCShopSignPacket, _impl_.green_),
  PROTOBUF_FIELD_OFFSET(::network::GCShopSignPacket, _impl_.blue_),
  PROTOBUF_FIELD_OFFSET(::network::GCShopSignPacket, _impl_.style_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCQuestInfoPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCQuestInfoPacket, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::network::GCQuestInfoPacket, _impl_.flag_),
  PROTOBUF_FIELD_OFFSET(::network::GCQuestInfoPacket, _impl_.is_begin_),
  PROTOBUF_FIELD_OFFSET(::network::GCQuestInfoPacket, _impl_.title_),
  PROTOBUF_FIELD_OFFSET(::network::GCQuestInfoPacket, _impl_.cat_id_),
  PROTOBUF_FIELD_OFFSET(::network::GCQuestInfoPacket, _impl_.clock_name_),
  PROTOBUF_FIELD_OFFSET(::network::GCQuestInfoPacket, _impl_.clock_value_),
  PROTOBUF_FIELD_OFFSET(::network::GCQuestInfoPacket, _impl_.counter_name_),
  PROTOBUF_FIELD_OFFSET(::network::GCQuestInfoPacket, _impl_.counter_value_),
  PROTOBUF_FIELD_OFFSET(::network::GCQuestInfoPacket, _impl_.icon_file_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCScriptPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCScriptPacket, _impl_.skin_),
  PROTOBUF_FIELD_OFFSET(::network::GCScriptPacket, _impl_.script_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCQuestConfirmPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCQuestConfirmPacket, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::network::GCQuestConfirmPacket, _impl_.timeout_),
  PROTOBUF_FIELD_OFFSET(::network::GCQuestConfirmPacket, _impl_.request_pid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCQuestCooldownPacket_Cooldown, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCQuestCooldownPacket_Cooldown, _impl_.cooldown_),
  PROTOBUF_FIELD_OFFSET(::network::GCQuestCooldownPacket_Cooldown, _impl_.done_),
  PROTOBUF_FIELD_OFFSET(::network::GCQuestCooldownPacket_Cooldown, _impl_.time_),
  PROTOBUF_FIELD_OFFSET(::network::GCQuestCooldownPacket_Cooldown, _impl_.damage_),
  PROTOBUF_FIELD_OFFSET(::network::GCQuestCooldownPacket_Cooldown, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCQuestCooldownPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCQuestCooldownPacket, _impl_.datas_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCPetSummonPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCPetSummonPacket, _impl_.vid_),
  PROTOBUF_FIELD_OFFSET(::network::GCPetSummonPacket, _impl_.item_vnum_),
  PROTOBUF_FIELD_OFFSET(::network::GCPetSummonPacket, _impl_.pet_),
  PROTOBUF_FIELD_OFFSET(::network::GCPetSummonPacket, _impl_.next_exp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCPetUpdateExpPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCPetUpdateExpPacket, _impl_.exp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCPetUpdateLevelPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCPetUpdateLevelPacket, _impl_.level_),
  PROTOBUF_FIELD_OFFSET(::network::GCPetUpdateLevelPacket, _impl_.next_exp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCPetUpdateSkillPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCPetUpdateSkillPacket, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::network::GCPetUpdateSkillPacket, _impl_.skill_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCPetUpdateAttrPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCPetUpdateAttrPacket, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::network::GCPetUpdateAttrPacket, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::network::GCPetUpdateAttrPacket, _impl_.level_),
  PROTOBUF_FIELD_OFFSET(::network::GCPetUpdateAttrPacket, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::network::GCPetUpdateAttrPacket, _impl_.can_upgrade_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCPetUpdateSkillpowerPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCPetUpdateSkillpowerPacket, _impl_.power_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCPetEvolutionInfoPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCPetEvolutionInfoPacket, _impl_.cost_),
  PROTOBUF_FIELD_OFFSET(::network::GCPetEvolutionInfoPacket, _impl_.prob_),
  PROTOBUF_FIELD_OFFSET(::network::GCPetEvolutionInfoPacket, _impl_.materials_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCPetEvolveResultPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCPetEvolveResultPacket, _impl_.result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCPetAttrRefineInfoPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCPetAttrRefineInfoPacket, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::network::GCPetAttrRefineInfoPacket, _impl_.cost_),
  PROTOBUF_FIELD_OFFSET(::network::GCPetAttrRefineInfoPacket, _impl_.materials_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCPartyInvitePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCPartyInvitePacket, _impl_.leader_vid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCPartyAddPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCPartyAddPacket, _impl_.pid_),
  PROTOBUF_FIELD_OFFSET(::network::GCPartyAddPacket, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCPartyUpdatePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCPartyUpdatePacket, _impl_.pid_),
  PROTOBUF_FIELD_OFFSET(::network::GCPartyUpdatePacket, _impl_.role_),
  PROTOBUF_FIELD_OFFSET(::network::GCPartyUpdatePacket, _impl_.percent_hp_),
  PROTOBUF_FIELD_OFFSET(::network::GCPartyUpdatePacket, _impl_.affects_),
  PROTOBUF_FIELD_OFFSET(::network::GCPartyUpdatePacket, _impl_.leader_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCPartyRemovePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCPartyRemovePacket, _impl_.pid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCPartyLinkPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCPartyLinkPacket, _impl_.pid_),
  PROTOBUF_FIELD_OFFSET(::network::GCPartyLinkPacket, _impl_.vid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCPartyUnlinkPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCPartyUnlinkPacket, _impl_.pid_),
  PROTOBUF_FIELD_OFFSET(::network::GCPartyUnlinkPacket, _impl_.vid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCPartyParameterPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCPartyParameterPacket, _impl_.distribute_mode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCGuildLoginPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCGuildLoginPacket, _impl_.pid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCGuildLogoutPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCGuildLogoutPacket, _impl_.pid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCGuildRemovePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCGuildRemovePacket, _impl_.pid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCGuildMemberListPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCGuildMemberListPacket, _impl_.members_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCGuildGradePacket_GradeData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCGuildGradePacket_GradeData, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::network::GCGuildGradePacket_GradeData, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::network::GCGuildGradePacket_GradeData, _impl_.auth_flag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCGuildGradePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCGuildGradePacket, _impl_.grades_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCGuildGradeNamePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCGuildGradeNamePacket, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::network::GCGuildGradeNamePacket, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCGuildGradeAuthPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCGuildGradeAuthPacket, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::network::GCGuildGradeAuthPacket, _impl_.auth_flag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCGuildInfoPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCGuildInfoPacket, _impl_.member_count_),
  PROTOBUF_FIELD_OFFSET(::network::GCGuildInfoPacket, _impl_.max_member_count_),
  PROTOBUF_FIELD_OFFSET(::network::GCGuildInfoPacket, _impl_.guild_id_),
  PROTOBUF_FIELD_OFFSET(::network::GCGuildInfoPacket, _impl_.master_pid_),
  PROTOBUF_FIELD_OFFSET(::network::GCGuildInfoPacket, _impl_.exp_),
  PROTOBUF_FIELD_OFFSET(::network::GCGuildInfoPacket, _impl_.level_),
  PROTOBUF_FIELD_OFFSET(::network::GCGuildInfoPacket, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::network::GCGuildInfoPacket, _impl_.gold_),
  PROTOBUF_FIELD_OFFSET(::network::GCGuildInfoPacket, _impl_.has_land_),
  PROTOBUF_FIELD_OFFSET(::network::GCGuildInfoPacket, _impl_.guild_point_),
  PROTOBUF_FIELD_OFFSET(::network::GCGuildInfoPacket, _impl_.guild_rank_),
  PROTOBUF_FIELD_OFFSET(::network::GCGuildInfoPacket, _impl_.wins_),
  PROTOBUF_FIELD_OFFSET(::network::GCGuildInfoPacket, _impl_.draws_),
  PROTOBUF_FIELD_OFFSET(::network::GCGuildInfoPacket, _impl_.losses_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCGuildCommentsPacket_Comment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCGuildCommentsPacket_Comment, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::network::GCGuildCommentsPacket_Comment, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::network::GCGuildCommentsPacket_Comment, _impl_.message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCGuildCommentsPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCGuildCommentsPacket, _impl_.comments_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCGuildChangeExpPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCGuildChangeExpPacket, _impl_.level_),
  PROTOBUF_FIELD_OFFSET(::network::GCGuildChangeExpPacket, _impl_.exp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCGuildChangeMemberGradePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCGuildChangeMemberGradePacket, _impl_.pid_),
  PROTOBUF_FIELD_OFFSET(::network::GCGuildChangeMemberGradePacket, _impl_.grade_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCGuildSkillInfoPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCGuildSkillInfoPacket, _impl_.skill_point_),
  PROTOBUF_FIELD_OFFSET(::network::GCGuildSkillInfoPacket, _impl_.skill_levels_),
  PROTOBUF_FIELD_OFFSET(::network::GCGuildSkillInfoPacket, _impl_.guild_point_),
  PROTOBUF_FIELD_OFFSET(::network::GCGuildSkillInfoPacket, _impl_.max_guild_point_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCGuildChangeMemberGeneralPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCGuildChangeMemberGeneralPacket, _impl_.pid_),
  PROTOBUF_FIELD_OFFSET(::network::GCGuildChangeMemberGeneralPacket, _impl_.flag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCGuildInvitePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCGuildInvitePacket, _impl_.guild_id_),
  PROTOBUF_FIELD_OFFSET(::network::GCGuildInvitePacket, _impl_.guild_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCGuildMemberLastPlayedPacket_MemberInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCGuildMemberLastPlayedPacket_MemberInfo, _impl_.pid_),
  PROTOBUF_FIELD_OFFSET(::network::GCGuildMemberLastPlayedPacket_MemberInfo, _impl_.timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCGuildMemberLastPlayedPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCGuildMemberLastPlayedPacket, _impl_.members_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCGuildBattleStatsPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCGuildBattleStatsPacket, _impl_.wins_),
  PROTOBUF_FIELD_OFFSET(::network::GCGuildBattleStatsPacket, _impl_.draws_),
  PROTOBUF_FIELD_OFFSET(::network::GCGuildBattleStatsPacket, _impl_.losses_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCGuildWarPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCGuildWarPacket, _impl_.guild_self_),
  PROTOBUF_FIELD_OFFSET(::network::GCGuildWarPacket, _impl_.guild_opponent_),
  PROTOBUF_FIELD_OFFSET(::network::GCGuildWarPacket, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::network::GCGuildWarPacket, _impl_.war_state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCGuildNamePacket_NameInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCGuildNamePacket_NameInfo, _impl_.guild_id_),
  PROTOBUF_FIELD_OFFSET(::network::GCGuildNamePacket_NameInfo, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCGuildNamePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCGuildNamePacket, _impl_.names_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCGuildWarListPacket_WarInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCGuildWarListPacket_WarInfo, _impl_.src_guild_id_),
  PROTOBUF_FIELD_OFFSET(::network::GCGuildWarListPacket_WarInfo, _impl_.dst_guild_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCGuildWarListPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCGuildWarListPacket, _impl_.wars_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCGuildWarEndListPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCGuildWarEndListPacket, _impl_.wars_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCGuildWarPointPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCGuildWarPointPacket, _impl_.gain_guild_id_),
  PROTOBUF_FIELD_OFFSET(::network::GCGuildWarPointPacket, _impl_.opponent_guild_id_),
  PROTOBUF_FIELD_OFFSET(::network::GCGuildWarPointPacket, _impl_.point_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCGuildMoneyChangePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCGuildMoneyChangePacket, _impl_.gold_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCGuildSafeboxOpenPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCGuildSafeboxOpenPacket, _impl_.size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCGuildSafeboxGoldPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCGuildSafeboxGoldPacket, _impl_.gold_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCGuildSafeboxLoadLogPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCGuildSafeboxLoadLogPacket, _impl_.logs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCGuildSafeboxAppendLogPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCGuildSafeboxAppendLogPacket, _impl_.log_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCGuildLadderListPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCGuildLadderListPacket, _impl_.ladders_),
  PROTOBUF_FIELD_OFFSET(::network::GCGuildLadderListPacket, _impl_.page_number_),
  PROTOBUF_FIELD_OFFSET(::network::GCGuildLadderListPacket, _impl_.total_pages_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCGuildLadderSearchResultPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCGuildLadderSearchResultPacket, _impl_.ladder_),
  PROTOBUF_FIELD_OFFSET(::network::GCGuildLadderSearchResultPacket, _impl_.rank_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCGuildRankAndPointPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCGuildRankAndPointPacket, _impl_.point_),
  PROTOBUF_FIELD_OFFSET(::network::GCGuildRankAndPointPacket, _impl_.rank_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCGuildSymbolDataPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCGuildSymbolDataPacket, _impl_.guild_id_),
  PROTOBUF_FIELD_OFFSET(::network::GCGuildSymbolDataPacket, _impl_.image_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCMarkIDXListPacket_Element, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCMarkIDXListPacket_Element, _impl_.guild_id_),
  PROTOBUF_FIELD_OFFSET(::network::GCMarkIDXListPacket_Element, _impl_.mark_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCMarkIDXListPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCMarkIDXListPacket, _impl_.elems_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network::GCMarkBlockPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::network::GCMarkBlockPacket, _impl_.image_index_),
  PROTOBUF_FIELD_OFFSET(::network::GCMarkBlockPacket, _impl_.block_count_),
  PROTOBUF_FIELD_OFFSET(::network::GCMarkBlockPacket, _impl_.image_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::network::GCSetVerifyKeyPacket)},
  { 7, -1, -1, sizeof(::network::GCLoginFailurePacket)},
  { 15, -1, -1, sizeof(::network::GCCreateFailurePacket)},
  { 22, -1, -1, sizeof(::network::GCDeleteSuccessPacket)},
  { 29, -1, -1, sizeof(::network::GCPlayerCreateSuccessPacket)},
  { 37, -1, -1, sizeof(::network::GCEmpirePacket)},
  { 44, -1, -1, sizeof(::network::GCLoginSuccessPacket)},
  { 53, -1, -1, sizeof(::network::GCAuthSuccessPacket)},
  { 61, -1, -1, sizeof(::network::GCAuthSuccessOpenIDPacket)},
  { 70, -1, -1, sizeof(::network::GCChangeNamePacket)},
  { 78, -1, -1, sizeof(::network::GCHybridCryptSDBPacket)},
  { 85, -1, -1, sizeof(::network::GCHybridCryptKeysPacket)},
  { 92, -1, -1, sizeof(::network::GCRespondChannelStatusPacket)},
  { 100, -1, -1, sizeof(::network::GCPhasePacket)},
  { 107, -1, -1, sizeof(::network::GCHandshakePacket)},
  { 117, -1, -1, sizeof(::network::GCKeyAgreementPacket)},
  { 125, -1, -1, sizeof(::network::GCXTrapCS1RequestPacket)},
  { 132, -1, -1, sizeof(::network::GCPanamaPackPacket)},
  { 140, -1, -1, sizeof(::network::GCLoginVersionAnswerPacket)},
  { 147, -1, -1, sizeof(::network::GCTimePacket)},
  { 160, -1, -1, sizeof(::network::GCChannelPacket)},
  { 167, -1, -1, sizeof(::network::GCWhisperPacket)},
  { 177, -1, -1, sizeof(::network::GCChatPacket)},
  { 187, -1, -1, sizeof(::network::GCMovePacket)},
  { 201, -1, -1, sizeof(::network::GCSyncPositionPacket)},
  { 208, -1, -1, sizeof(::network::GCFlyTargetingPacket)},
  { 218, -1, -1, sizeof(::network::GCAddFlyTargetingPacket)},
  { 228, -1, -1, sizeof(::network::GCTargetPacket)},
  { 239, -1, -1, sizeof(::network::GCTargetMonsterInfoPacket)},
  { 247, -1, -1, sizeof(::network::GCPlayerOnlineInformationPacket)},
  { 255, -1, -1, sizeof(::network::GCUpdateCharacterScalePacket)},
  { 263, -1, -1, sizeof(::network::GCMaintenanceInfoPacket)},
  { 272, -1, -1, sizeof(::network::GCObserverAddPacket)},
  { 281, -1, -1, sizeof(::network::GCObserverRemovePacket)},
  { 288, -1, -1, sizeof(::network::GCObserverMovePacket)},
  { 297, -1, -1, sizeof(::network::GCSafeboxSizePacket)},
  { 304, -1, -1, sizeof(::network::GCSafeboxMoneyChangePacket)},
  { 311, -1, -1, sizeof(::network::GCWarpPacket)},
  { 321, -1, -1, sizeof(::network::GCPVPPacket)},
  { 330, -1, -1, sizeof(::network::GCDuelStartPacket)},
  { 337, -1, -1, sizeof(::network::GCOwnershipPacket)},
  { 345, -1, -1, sizeof(::network::GCPositionPacket)},
  { 353, -1, -1, sizeof(::network::GCStunPacket)},
  { 360, -1, -1, sizeof(::network::GCDeadPacket)},
  { 368, -1, -1, sizeof(::network::GCPointsPacket)},
  { 376, -1, -1, sizeof(::network::GCPointChangePacket)},
  { 386, -1, -1, sizeof(::network::GCRealPointSetPacket)},
  { 394, -1, -1, sizeof(::network::GCQuickslotAddPacket)},
  { 402, -1, -1, sizeof(::network::GCQuickslotDelPacket)},
  { 409, -1, -1, sizeof(::network::GCQuickslotSwapPacket)},
  { 417, -1, -1, sizeof(::network::GCMotionPacket)},
  { 426, -1, -1, sizeof(::network::GCDamageInfoPacket)},
  { 436, -1, -1, sizeof(::network::GCCreateFlyPacket)},
  { 445, -1, -1, sizeof(::network::GCDungeonDestinationPositionPacket)},
  { 453, -1, -1, sizeof(::network::GCSkillLevelPacket)},
  { 460, -1, -1, sizeof(::network::GCMessengerListPacket_Entry)},
  { 468, -1, -1, sizeof(::network::GCMessengerListPacket)},
  { 475, -1, -1, sizeof(::network::GCMessengerBlockListPacket_Entry)},
  { 483, -1, -1, sizeof(::network::GCMessengerBlockListPacket)},
  { 490, -1, -1, sizeof(::network::GCMessengerLoginPacket)},
  { 497, -1, -1, sizeof(::network::GCMessengerLogoutPacket)},
  { 504, -1, -1, sizeof(::network::GCMessengerBlockLoginPacket)},
  { 511, -1, -1, sizeof(::network::GCMessengerBlockLogoutPacket)},
  { 518, -1, -1, sizeof(::network::GCMessengerMobilePacket)},
  { 526, -1, -1, sizeof(::network::GCWalkModePacket)},
  { 534, -1, -1, sizeof(::network::GCChangeSkillGroupPacket)},
  { 541, -1, -1, sizeof(::network::GCRefineInformationPacket)},
  { 555, -1, -1, sizeof(::network::GCSpecialEffectPacket)},
  { 563, -1, -1, sizeof(::network::GCNPCListPacket_Position)},
  { 574, -1, -1, sizeof(::network::GCNPCListPacket)},
  { 581, -1, -1, sizeof(::network::GCViewEquipPacket)},
  { 589, -1, -1, sizeof(::network::GCLandListPacket)},
  { 596, -1, -1, sizeof(::network::GCTargetCreatePacket)},
  { 606, -1, -1, sizeof(::network::GCTargetUpdatePacket)},
  { 615, -1, -1, sizeof(::network::GCTargetDeletePacket)},
  { 622, -1, -1, sizeof(::network::GCAffectAddPacket)},
  { 629, -1, -1, sizeof(::network::GCAffectRemovePacket)},
  { 639, -1, -1, sizeof(::network::GCMallOpenPacket)},
  { 646, -1, -1, sizeof(::network::GCLoverInfoPacket)},
  { 654, -1, -1, sizeof(::network::GCLoverPointUpdatePacket)},
  { 661, -1, -1, sizeof(::network::GCDigMotionPacket)},
  { 670, -1, -1, sizeof(::network::GCSpecificEffectPacket)},
  { 678, -1, -1, sizeof(::network::GCDragonSoulRefinePacket)},
  { 686, -1, -1, sizeof(::network::GCTeamlerStatusPacket)},
  { 694, -1, -1, sizeof(::network::GCTeamlerShowPacket)},
  { 701, -1, -1, sizeof(::network::GCPartyPositionPacket)},
  { 710, -1, -1, sizeof(::network::GCWikiPacket)},
  { 720, -1, -1, sizeof(::network::GCWikiMobPacket)},
  { 729, -1, -1, sizeof(::network::GCSendCombatZonePacket)},
  { 739, -1, -1, sizeof(::network::GCCombatZoneRankingDataPacket)},
  { 746, -1, -1, sizeof(::network::GCEventRequestPacket)},
  { 755, -1, -1, sizeof(::network::GCEventCancelPacket)},
  { 762, -1, -1, sizeof(::network::GCEventEmpireWarLoadPacket)},
  { 771, -1, -1, sizeof(::network::GCEventEmpireWarUpdatePacket)},
  { 780, -1, -1, sizeof(::network::GCAttrtreeLevelPacket)},
  { 788, -1, -1, sizeof(::network::GCAttrtreeRefinePacket)},
  { 796, -1, -1, sizeof(::network::GCRunePacket)},
  { 803, -1, -1, sizeof(::network::GCRuneRefinePacket)},
  { 811, -1, -1, sizeof(::network::GCRunePagePacket)},
  { 818, -1, -1, sizeof(::network::GCRuneLevelupPacket)},
  { 826, -1, -1, sizeof(::network::GCEquipmentPageLoadPacket)},
  { 834, -1, -1, sizeof(::network::GCDmgMeterPacket)},
  { 842, -1, -1, sizeof(::network::GCSkillMotionPacket)},
  { 856, -1, -1, sizeof(::network::GCFakeBuffSkillPacket)},
  { 864, -1, -1, sizeof(::network::GCCBTItemSetPacket)},
  { 872, -1, -1, sizeof(::network::GCSoulRefineInfoPacket)},
  { 883, -1, -1, sizeof(::network::GCPVPTeamPacket)},
  { 891, -1, -1, sizeof(::network::GCInventoryMaxNumPacket)},
  { 899, -1, -1, sizeof(::network::GCAttributesToClientPacket_Attribute)},
  { 907, -1, -1, sizeof(::network::GCAttributesToClientPacket)},
  { 916, -1, -1, sizeof(::network::GCHorseRefineInfoPacket)},
  { 925, -1, -1, sizeof(::network::GCHorseRefineResultPacket)},
  { 932, -1, -1, sizeof(::network::GCGayaShopOpenPacket)},
  { 939, -1, -1, sizeof(::network::GCBattlepassDataPacket)},
  { 947, -1, -1, sizeof(::network::GCCrystalRefinePacket)},
  { 959, -1, -1, sizeof(::network::GCCrystalUsingSlotPacket)},
  { 967, -1, -1, sizeof(::network::GCAuctionOwnedGoldPacket)},
  { 974, -1, -1, sizeof(::network::GCAuctionOwnedItemPacket)},
  { 981, -1, -1, sizeof(::network::GCAuctionSearchResultPacket)},
  { 990, -1, -1, sizeof(::network::GCAuctionMessagePacket)},
  { 997, -1, -1, sizeof(::network::GCAuctionShopOwnedPacket)},
  { 1004, -1, -1, sizeof(::network::GCAuctionShopPacket)},
  { 1014, -1, -1, sizeof(::network::GCAuctionShopGoldPacket)},
  { 1021, -1, -1, sizeof(::network::GCAuctionShopTimeoutPacket)},
  { 1028, -1, -1, sizeof(::network::GCAuctionShopGuestOpenPacket)},
  { 1036, -1, -1, sizeof(::network::GCAuctionShopGuestUpdatePacket)},
  { 1043, -1, -1, sizeof(::network::GCAuctionShopHistoryPacket)},
  { 1050, -1, -1, sizeof(::network::GCAuctionAveragePricePacket)},
  { 1058, -1, -1, sizeof(::network::GCMainCharacterPacket)},
  { 1074, -1, -1, sizeof(::network::GCCharacterAddPacket_AffectColor)},
  { 1082, -1, -1, sizeof(::network::GCCharacterAddPacket)},
  { 1103, -1, -1, sizeof(::network::GCCharacterAdditionalInfoPacket)},
  { 1124, -1, -1, sizeof(::network::GCCharacterUpdatePacket)},
  { 1145, -1, -1, sizeof(::network::GCCharacterShiningPacket)},
  { 1153, -1, -1, sizeof(::network::GCCharacterDeletePacket)},
  { 1160, -1, -1, sizeof(::network::GCFishingStartPacket)},
  { 1168, -1, -1, sizeof(::network::GCFishingStopPacket)},
  { 1175, -1, -1, sizeof(::network::GCFishingReactPacket)},
  { 1182, -1, -1, sizeof(::network::GCFishingSuccessPacket)},
  { 1189, -1, -1, sizeof(::network::GCFishingFailPacket)},
  { 1196, -1, -1, sizeof(::network::GCFishingFishInfoPacket)},
  { 1203, -1, -1, sizeof(::network::GCItemSetPacket)},
  { 1211, -1, -1, sizeof(::network::GCItemUpdatePacket)},
  { 1218, -1, -1, sizeof(::network::GCItemGroundAddPacket)},
  { 1232, -1, -1, sizeof(::network::GCItemGroundDeletePacket)},
  { 1239, -1, -1, sizeof(::network::GCItemOwnershipPacket)},
  { 1247, -1, -1, sizeof(::network::GCExchangeStartPacket)},
  { 1254, -1, -1, sizeof(::network::GCExchangeItemAddPacket)},
  { 1263, -1, -1, sizeof(::network::GCExchangeItemDelPacket)},
  { 1272, -1, -1, sizeof(::network::GCExchangeGoldAddPacket)},
  { 1280, -1, -1, sizeof(::network::GCExchangeAcceptPacket)},
  { 1288, -1, -1, sizeof(::network::GCShopStartPacket)},
  { 1296, -1, -1, sizeof(::network::GCShopExStartPacket)},
  { 1307, -1, -1, sizeof(::network::GCShopUpdateItemPacket)},
  { 1314, -1, -1, sizeof(::network::GCShopSignPacket)},
  { 1326, -1, -1, sizeof(::network::GCQuestInfoPacket)},
  { 1342, -1, -1, sizeof(::network::GCScriptPacket)},
  { 1350, -1, -1, sizeof(::network::GCQuestConfirmPacket)},
  { 1359, -1, -1, sizeof(::network::GCQuestCooldownPacket_Cooldown)},
  { 1370, -1, -1, sizeof(::network::GCQuestCooldownPacket)},
  { 1377, -1, -1, sizeof(::network::GCPetSummonPacket)},
  { 1387, -1, -1, sizeof(::network::GCPetUpdateExpPacket)},
  { 1394, -1, -1, sizeof(::network::GCPetUpdateLevelPacket)},
  { 1402, -1, -1, sizeof(::network::GCPetUpdateSkillPacket)},
  { 1410, -1, -1, sizeof(::network::GCPetUpdateAttrPacket)},
  { 1421, -1, -1, sizeof(::network::GCPetUpdateSkillpowerPacket)},
  { 1428, -1, -1, sizeof(::network::GCPetEvolutionInfoPacket)},
  { 1437, -1, -1, sizeof(::network::GCPetEvolveResultPacket)},
  { 1444, -1, -1, sizeof(::network::GCPetAttrRefineInfoPacket)},
  { 1453, -1, -1, sizeof(::network::GCPartyInvitePacket)},
  { 1460, -1, -1, sizeof(::network::GCPartyAddPacket)},
  { 1468, -1, -1, sizeof(::network::GCPartyUpdatePacket)},
  { 1479, -1, -1, sizeof(::network::GCPartyRemovePacket)},
  { 1486, -1, -1, sizeof(::network::GCPartyLinkPacket)},
  { 1494, -1, -1, sizeof(::network::GCPartyUnlinkPacket)},
  { 1502, -1, -1, sizeof(::network::GCPartyParameterPacket)},
  { 1509, -1, -1, sizeof(::network::GCGuildLoginPacket)},
  { 1516, -1, -1, sizeof(::network::GCGuildLogoutPacket)},
  { 1523, -1, -1, sizeof(::network::GCGuildRemovePacket)},
  { 1530, -1, -1, sizeof(::network::GCGuildMemberListPacket)},
  { 1537, -1, -1, sizeof(::network::GCGuildGradePacket_GradeData)},
  { 1546, -1, -1, sizeof(::network::GCGuildGradePacket)},
  { 1553, -1, -1, sizeof(::network::GCGuildGradeNamePacket)},
  { 1561, -1, -1, sizeof(::network::GCGuildGradeAuthPacket)},
  { 1569, -1, -1, sizeof(::network::GCGuildInfoPacket)},
  { 1589, -1, -1, sizeof(::network::GCGuildCommentsPacket_Comment)},
  { 1598, -1, -1, sizeof(::network::GCGuildCommentsPacket)},
  { 1605, -1, -1, sizeof(::network::GCGuildChangeExpPacket)},
  { 1613, -1, -1, sizeof(::network::GCGuildChangeMemberGradePacket)},
  { 1621, -1, -1, sizeof(::network::GCGuildSkillInfoPacket)},
  { 1631, -1, -1, sizeof(::network::GCGuildChangeMemberGeneralPacket)},
  { 1639, -1, -1, sizeof(::network::GCGuildInvitePacket)},
  { 1647, -1, -1, sizeof(::network::GCGuildMemberLastPlayedPacket_MemberInfo)},
  { 1655, -1, -1, sizeof(::network::GCGuildMemberLastPlayedPacket)},
  { 1662, -1, -1, sizeof(::network::GCGuildBattleStatsPacket)},
  { 1671, -1, -1, sizeof(::network::GCGuildWarPacket)},
  { 1681, -1, -1, sizeof(::network::GCGuildNamePacket_NameInfo)},
  { 1689, -1, -1, sizeof(::network::GCGuildNamePacket)},
  { 1696, -1, -1, sizeof(::network::GCGuildWarListPacket_WarInfo)},
  { 1704, -1, -1, sizeof(::network::GCGuildWarListPacket)},
  { 1711, -1, -1, sizeof(::network::GCGuildWarEndListPacket)},
  { 1718, -1, -1, sizeof(::network::GCGuildWarPointPacket)},
  { 1727, -1, -1, sizeof(::network::GCGuildMoneyChangePacket)},
  { 1734, -1, -1, sizeof(::network::GCGuildSafeboxOpenPacket)},
  { 1741, -1, -1, sizeof(::network::GCGuildSafeboxGoldPacket)},
  { 1748, -1, -1, sizeof(::network::GCGuildSafeboxLoadLogPacket)},
  { 1755, -1, -1, sizeof(::network::GCGuildSafeboxAppendLogPacket)},
  { 1762, -1, -1, sizeof(::network::GCGuildLadderListPacket)},
  { 1771, -1, -1, sizeof(::network::GCGuildLadderSearchResultPacket)},
  { 1779, -1, -1, sizeof(::network::GCGuildRankAndPointPacket)},
  { 1787, -1, -1, sizeof(::network::GCGuildSymbolDataPacket)},
  { 1795, -1, -1, sizeof(::network::GCMarkIDXListPacket_Element)},
  { 1803, -1, -1, sizeof(::network::GCMarkIDXListPacket)},
  { 1810, -1, -1, sizeof(::network::GCMarkBlockPacket)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::network::_GCSetVerifyKeyPacket_default_instance_._instance,
  &::network::_GCLoginFailurePacket_default_instance_._instance,
  &::network::_GCCreateFailurePacket_default_instance_._instance,
  &::network::_GCDeleteSuccessPacket_default_instance_._instance,
  &::network::_GCPlayerCreateSuccessPacket_default_instance_._instance,
  &::network::_GCEmpirePacket_default_instance_._instance,
  &::network::_GCLoginSuccessPacket_default_instance_._instance,
  &::network::_GCAuthSuccessPacket_default_instance_._instance,
  &::network::_GCAuthSuccessOpenIDPacket_default_instance_._instance,
  &::network::_GCChangeNamePacket_default_instance_._instance,
  &::network::_GCHybridCryptSDBPacket_default_instance_._instance,
  &::network::_GCHybridCryptKeysPacket_default_instance_._instance,
  &::network::_GCRespondChannelStatusPacket_default_instance_._instance,
  &::network::_GCPhasePacket_default_instance_._instance,
  &::network::_GCHandshakePacket_default_instance_._instance,
  &::network::_GCKeyAgreementPacket_default_instance_._instance,
  &::network::_GCXTrapCS1RequestPacket_default_instance_._instance,
  &::network::_GCPanamaPackPacket_default_instance_._instance,
  &::network::_GCLoginVersionAnswerPacket_default_instance_._instance,
  &::network::_GCTimePacket_default_instance_._instance,
  &::network::_GCChannelPacket_default_instance_._instance,
  &::network::_GCWhisperPacket_default_instance_._instance,
  &::network::_GCChatPacket_default_instance_._instance,
  &::network::_GCMovePacket_default_instance_._instance,
  &::network::_GCSyncPositionPacket_default_instance_._instance,
  &::network::_GCFlyTargetingPacket_default_instance_._instance,
  &::network::_GCAddFlyTargetingPacket_default_instance_._instance,
  &::network::_GCTargetPacket_default_instance_._instance,
  &::network::_GCTargetMonsterInfoPacket_default_instance_._instance,
  &::network::_GCPlayerOnlineInformationPacket_default_instance_._instance,
  &::network::_GCUpdateCharacterScalePacket_default_instance_._instance,
  &::network::_GCMaintenanceInfoPacket_default_instance_._instance,
  &::network::_GCObserverAddPacket_default_instance_._instance,
  &::network::_GCObserverRemovePacket_default_instance_._instance,
  &::network::_GCObserverMovePacket_default_instance_._instance,
  &::network::_GCSafeboxSizePacket_default_instance_._instance,
  &::network::_GCSafeboxMoneyChangePacket_default_instance_._instance,
  &::network::_GCWarpPacket_default_instance_._instance,
  &::network::_GCPVPPacket_default_instance_._instance,
  &::network::_GCDuelStartPacket_default_instance_._instance,
  &::network::_GCOwnershipPacket_default_instance_._instance,
  &::network::_GCPositionPacket_default_instance_._instance,
  &::network::_GCStunPacket_default_instance_._instance,
  &::network::_GCDeadPacket_default_instance_._instance,
  &::network::_GCPointsPacket_default_instance_._instance,
  &::network::_GCPointChangePacket_default_instance_._instance,
  &::network::_GCRealPointSetPacket_default_instance_._instance,
  &::network::_GCQuickslotAddPacket_default_instance_._instance,
  &::network::_GCQuickslotDelPacket_default_instance_._instance,
  &::network::_GCQuickslotSwapPacket_default_instance_._instance,
  &::network::_GCMotionPacket_default_instance_._instance,
  &::network::_GCDamageInfoPacket_default_instance_._instance,
  &::network::_GCCreateFlyPacket_default_instance_._instance,
  &::network::_GCDungeonDestinationPositionPacket_default_instance_._instance,
  &::network::_GCSkillLevelPacket_default_instance_._instance,
  &::network::_GCMessengerListPacket_Entry_default_instance_._instance,
  &::network::_GCMessengerListPacket_default_instance_._instance,
  &::network::_GCMessengerBlockListPacket_Entry_default_instance_._instance,
  &::network::_GCMessengerBlockListPacket_default_instance_._instance,
  &::network::_GCMessengerLoginPacket_default_instance_._instance,
  &::network::_GCMessengerLogoutPacket_default_instance_._instance,
  &::network::_GCMessengerBlockLoginPacket_default_instance_._instance,
  &::network::_GCMessengerBlockLogoutPacket_default_instance_._instance,
  &::network::_GCMessengerMobilePacket_default_instance_._instance,
  &::network::_GCWalkModePacket_default_instance_._instance,
  &::network::_GCChangeSkillGroupPacket_default_instance_._instance,
  &::network::_GCRefineInformationPacket_default_instance_._instance,
  &::network::_GCSpecialEffectPacket_default_instance_._instance,
  &::network::_GCNPCListPacket_Position_default_instance_._instance,
  &::network::_GCNPCListPacket_default_instance_._instance,
  &::network::_GCViewEquipPacket_default_instance_._instance,
  &::network::_GCLandListPacket_default_instance_._instance,
  &::network::_GCTargetCreatePacket_default_instance_._instance,
  &::network::_GCTargetUpdatePacket_default_instance_._instance,
  &::network::_GCTargetDeletePacket_default_instance_._instance,
  &::network::_GCAffectAddPacket_default_instance_._instance,
  &::network::_GCAffectRemovePacket_default_instance_._instance,
  &::network::_GCMallOpenPacket_default_instance_._instance,
  &::network::_GCLoverInfoPacket_default_instance_._instance,
  &::network::_GCLoverPointUpdatePacket_default_instance_._instance,
  &::network::_GCDigMotionPacket_default_instance_._instance,
  &::network::_GCSpecificEffectPacket_default_instance_._instance,
  &::network::_GCDragonSoulRefinePacket_default_instance_._instance,
  &::network::_GCTeamlerStatusPacket_default_instance_._instance,
  &::network::_GCTeamlerShowPacket_default_instance_._instance,
  &::network::_GCPartyPositionPacket_default_instance_._instance,
  &::network::_GCWikiPacket_default_instance_._instance,
  &::network::_GCWikiMobPacket_default_instance_._instance,
  &::network::_GCSendCombatZonePacket_default_instance_._instance,
  &::network::_GCCombatZoneRankingDataPacket_default_instance_._instance,
  &::network::_GCEventRequestPacket_default_instance_._instance,
  &::network::_GCEventCancelPacket_default_instance_._instance,
  &::network::_GCEventEmpireWarLoadPacket_default_instance_._instance,
  &::network::_GCEventEmpireWarUpdatePacket_default_instance_._instance,
  &::network::_GCAttrtreeLevelPacket_default_instance_._instance,
  &::network::_GCAttrtreeRefinePacket_default_instance_._instance,
  &::network::_GCRunePacket_default_instance_._instance,
  &::network::_GCRuneRefinePacket_default_instance_._instance,
  &::network::_GCRunePagePacket_default_instance_._instance,
  &::network::_GCRuneLevelupPacket_default_instance_._instance,
  &::network::_GCEquipmentPageLoadPacket_default_instance_._instance,
  &::network::_GCDmgMeterPacket_default_instance_._instance,
  &::network::_GCSkillMotionPacket_default_instance_._instance,
  &::network::_GCFakeBuffSkillPacket_default_instance_._instance,
  &::network::_GCCBTItemSetPacket_default_instance_._instance,
  &::network::_GCSoulRefineInfoPacket_default_instance_._instance,
  &::network::_GCPVPTeamPacket_default_instance_._instance,
  &::network::_GCInventoryMaxNumPacket_default_instance_._instance,
  &::network::_GCAttributesToClientPacket_Attribute_default_instance_._instance,
  &::network::_GCAttributesToClientPacket_default_instance_._instance,
  &::network::_GCHorseRefineInfoPacket_default_instance_._instance,
  &::network::_GCHorseRefineResultPacket_default_instance_._instance,
  &::network::_GCGayaShopOpenPacket_default_instance_._instance,
  &::network::_GCBattlepassDataPacket_default_instance_._instance,
  &::network::_GCCrystalRefinePacket_default_instance_._instance,
  &::network::_GCCrystalUsingSlotPacket_default_instance_._instance,
  &::network::_GCAuctionOwnedGoldPacket_default_instance_._instance,
  &::network::_GCAuctionOwnedItemPacket_default_instance_._instance,
  &::network::_GCAuctionSearchResultPacket_default_instance_._instance,
  &::network::_GCAuctionMessagePacket_default_instance_._instance,
  &::network::_GCAuctionShopOwnedPacket_default_instance_._instance,
  &::network::_GCAuctionShopPacket_default_instance_._instance,
  &::network::_GCAuctionShopGoldPacket_default_instance_._instance,
  &::network::_GCAuctionShopTimeoutPacket_default_instance_._instance,
  &::network::_GCAuctionShopGuestOpenPacket_default_instance_._instance,
  &::network::_GCAuctionShopGuestUpdatePacket_default_instance_._instance,
  &::network::_GCAuctionShopHistoryPacket_default_instance_._instance,
  &::network::_GCAuctionAveragePricePacket_default_instance_._instance,
  &::network::_GCMainCharacterPacket_default_instance_._instance,
  &::network::_GCCharacterAddPacket_AffectColor_default_instance_._instance,
  &::network::_GCCharacterAddPacket_default_instance_._instance,
  &::network::_GCCharacterAdditionalInfoPacket_default_instance_._instance,
  &::network::_GCCharacterUpdatePacket_default_instance_._instance,
  &::network::_GCCharacterShiningPacket_default_instance_._instance,
  &::network::_GCCharacterDeletePacket_default_instance_._instance,
  &::network::_GCFishingStartPacket_default_instance_._instance,
  &::network::_GCFishingStopPacket_default_instance_._instance,
  &::network::_GCFishingReactPacket_default_instance_._instance,
  &::network::_GCFishingSuccessPacket_default_instance_._instance,
  &::network::_GCFishingFailPacket_default_instance_._instance,
  &::network::_GCFishingFishInfoPacket_default_instance_._instance,
  &::network::_GCItemSetPacket_default_instance_._instance,
  &::network::_GCItemUpdatePacket_default_instance_._instance,
  &::network::_GCItemGroundAddPacket_default_instance_._instance,
  &::network::_GCItemGroundDeletePacket_default_instance_._instance,
  &::network::_GCItemOwnershipPacket_default_instance_._instance,
  &::network::_GCExchangeStartPacket_default_instance_._instance,
  &::network::_GCExchangeItemAddPacket_default_instance_._instance,
  &::network::_GCExchangeItemDelPacket_default_instance_._instance,
  &::network::_GCExchangeGoldAddPacket_default_instance_._instance,
  &::network::_GCExchangeAcceptPacket_default_instance_._instance,
  &::network::_GCShopStartPacket_default_instance_._instance,
  &::network::_GCShopExStartPacket_default_instance_._instance,
  &::network::_GCShopUpdateItemPacket_default_instance_._instance,
  &::network::_GCShopSignPacket_default_instance_._instance,
  &::network::_GCQuestInfoPacket_default_instance_._instance,
  &::network::_GCScriptPacket_default_instance_._instance,
  &::network::_GCQuestConfirmPacket_default_instance_._instance,
  &::network::_GCQuestCooldownPacket_Cooldown_default_instance_._instance,
  &::network::_GCQuestCooldownPacket_default_instance_._instance,
  &::network::_GCPetSummonPacket_default_instance_._instance,
  &::network::_GCPetUpdateExpPacket_default_instance_._instance,
  &::network::_GCPetUpdateLevelPacket_default_instance_._instance,
  &::network::_GCPetUpdateSkillPacket_default_instance_._instance,
  &::network::_GCPetUpdateAttrPacket_default_instance_._instance,
  &::network::_GCPetUpdateSkillpowerPacket_default_instance_._instance,
  &::network::_GCPetEvolutionInfoPacket_default_instance_._instance,
  &::network::_GCPetEvolveResultPacket_default_instance_._instance,
  &::network::_GCPetAttrRefineInfoPacket_default_instance_._instance,
  &::network::_GCPartyInvitePacket_default_instance_._instance,
  &::network::_GCPartyAddPacket_default_instance_._instance,
  &::network::_GCPartyUpdatePacket_default_instance_._instance,
  &::network::_GCPartyRemovePacket_default_instance_._instance,
  &::network::_GCPartyLinkPacket_default_instance_._instance,
  &::network::_GCPartyUnlinkPacket_default_instance_._instance,
  &::network::_GCPartyParameterPacket_default_instance_._instance,
  &::network::_GCGuildLoginPacket_default_instance_._instance,
  &::network::_GCGuildLogoutPacket_default_instance_._instance,
  &::network::_GCGuildRemovePacket_default_instance_._instance,
  &::network::_GCGuildMemberListPacket_default_instance_._instance,
  &::network::_GCGuildGradePacket_GradeData_default_instance_._instance,
  &::network::_GCGuildGradePacket_default_instance_._instance,
  &::network::_GCGuildGradeNamePacket_default_instance_._instance,
  &::network::_GCGuildGradeAuthPacket_default_instance_._instance,
  &::network::_GCGuildInfoPacket_default_instance_._instance,
  &::network::_GCGuildCommentsPacket_Comment_default_instance_._instance,
  &::network::_GCGuildCommentsPacket_default_instance_._instance,
  &::network::_GCGuildChangeExpPacket_default_instance_._instance,
  &::network::_GCGuildChangeMemberGradePacket_default_instance_._instance,
  &::network::_GCGuildSkillInfoPacket_default_instance_._instance,
  &::network::_GCGuildChangeMemberGeneralPacket_default_instance_._instance,
  &::network::_GCGuildInvitePacket_default_instance_._instance,
  &::network::_GCGuildMemberLastPlayedPacket_MemberInfo_default_instance_._instance,
  &::network::_GCGuildMemberLastPlayedPacket_default_instance_._instance,
  &::network::_GCGuildBattleStatsPacket_default_instance_._instance,
  &::network::_GCGuildWarPacket_default_instance_._instance,
  &::network::_GCGuildNamePacket_NameInfo_default_instance_._instance,
  &::network::_GCGuildNamePacket_default_instance_._instance,
  &::network::_GCGuildWarListPacket_WarInfo_default_instance_._instance,
  &::network::_GCGuildWarListPacket_default_instance_._instance,
  &::network::_GCGuildWarEndListPacket_default_instance_._instance,
  &::network::_GCGuildWarPointPacket_default_instance_._instance,
  &::network::_GCGuildMoneyChangePacket_default_instance_._instance,
  &::network::_GCGuildSafeboxOpenPacket_default_instance_._instance,
  &::network::_GCGuildSafeboxGoldPacket_default_instance_._instance,
  &::network::_GCGuildSafeboxLoadLogPacket_default_instance_._instance,
  &::network::_GCGuildSafeboxAppendLogPacket_default_instance_._instance,
  &::network::_GCGuildLadderListPacket_default_instance_._instance,
  &::network::_GCGuildLadderSearchResultPacket_default_instance_._instance,
  &::network::_GCGuildRankAndPointPacket_default_instance_._instance,
  &::network::_GCGuildSymbolDataPacket_default_instance_._instance,
  &::network::_GCMarkIDXListPacket_Element_default_instance_._instance,
  &::network::_GCMarkIDXListPacket_default_instance_._instance,
  &::network::_GCMarkBlockPacket_default_instance_._instance,
};

const char descriptor_table_protodef_gc_5fpackets_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020gc_packets.proto\022\007network\032\ndata.proto\032"
  "\017data_item.proto\032\021data_player.proto\032\016dat"
  "a_pet.proto\"*\n\024GCSetVerifyKeyPacket\022\022\n\nv"
  "erify_key\030\001 \001(\r\"4\n\024GCLoginFailurePacket\022"
  "\016\n\006status\030\001 \001(\014\022\014\n\004data\030\002 \001(\005\"%\n\025GCCreat"
  "eFailurePacket\022\014\n\004type\030\001 \001(\r\".\n\025GCDelete"
  "SuccessPacket\022\025\n\raccount_index\030\001 \001(\r\"\\\n\033"
  "GCPlayerCreateSuccessPacket\022\025\n\raccount_i"
  "ndex\030\001 \001(\r\022&\n\006player\030\002 \001(\0132\026.network.TSi"
  "mplePlayer\" \n\016GCEmpirePacket\022\016\n\006empire\030\001"
  " \001(\r\"c\n\024GCLoginSuccessPacket\022\'\n\007players\030"
  "\001 \003(\0132\026.network.TSimplePlayer\022\016\n\006handle\030"
  "\002 \001(\r\022\022\n\nrandom_key\030\003 \001(\r\"8\n\023GCAuthSucce"
  "ssPacket\022\021\n\tlogin_key\030\001 \001(\r\022\016\n\006result\030\002 "
  "\001(\010\"M\n\031GCAuthSuccessOpenIDPacket\022\021\n\tlogi"
  "n_key\030\001 \001(\r\022\016\n\006result\030\002 \001(\010\022\r\n\005login\030\003 \001"
  "(\014\"/\n\022GCChangeNamePacket\022\013\n\003pid\030\001 \001(\r\022\014\n"
  "\004name\030\002 \001(\014\"-\n\026GCHybridCryptSDBPacket\022\023\n"
  "\013data_stream\030\001 \001(\014\".\n\027GCHybridCryptKeysP"
  "acket\022\023\n\013data_stream\030\001 \001(\014\"X\n\034GCRespondC"
  "hannelStatusPacket\022\'\n\006states\030\001 \003(\0132\027.net"
  "work.TChannelStatus\022\017\n\007success\030\002 \001(\010\"\036\n\r"
  "GCPhasePacket\022\r\n\005phase\030\001 \001(\r\"V\n\021GCHandsh"
  "akePacket\022\021\n\thandshake\030\001 \001(\r\022\014\n\004time\030\002 \001"
  "(\r\022\r\n\005delta\030\003 \001(\005\022\021\n\tcrypt_key\030\004 \001(\r\";\n\024"
  "GCKeyAgreementPacket\022\014\n\004data\030\001 \001(\014\022\025\n\rag"
  "reed_length\030\002 \001(\r\"\'\n\027GCXTrapCS1RequestPa"
  "cket\022\014\n\004data\030\001 \001(\014\"5\n\022GCPanamaPackPacket"
  "\022\021\n\tpack_name\030\001 \001(\014\022\014\n\004abIV\030\002 \001(\014\",\n\032GCL"
  "oginVersionAnswerPacket\022\016\n\006answer\030\001 \001(\010\""
  "\210\001\n\014GCTimePacket\022\014\n\004time\030\001 \001(\r\022\016\n\006random"
  "\030\002 \001(\r\022\022\n\ncombatzone\030\003 \001(\010\022\017\n\007channel\030\004 "
  "\001(\r\022\023\n\013test_server\030\005 \001(\r\022\021\n\tmap_index\030\006 "
  "\001(\r\022\r\n\005coins\030\007 \001(\010\"\"\n\017GCChannelPacket\022\017\n"
  "\007channel\030\001 \001(\r\"S\n\017GCWhisperPacket\022\014\n\004typ"
  "e\030\001 \001(\r\022\016\n\006locale\030\002 \001(\005\022\021\n\tname_from\030\003 \001"
  "(\014\022\017\n\007message\030\004 \001(\014\"I\n\014GCChatPacket\022\014\n\004t"
  "ype\030\001 \001(\r\022\n\n\002id\030\002 \001(\r\022\017\n\007message\030\003 \001(\014\022\016"
  "\n\006empire\030\004 \001(\r\"y\n\014GCMovePacket\022\014\n\004func\030\001"
  " \001(\r\022\013\n\003arg\030\002 \001(\r\022\013\n\003rot\030\003 \001(\r\022\013\n\003vid\030\004 "
  "\001(\r\022\t\n\001x\030\005 \001(\005\022\t\n\001y\030\006 \001(\005\022\014\n\004time\030\007 \001(\r\022"
  "\020\n\010duration\030\010 \001(\r\"F\n\024GCSyncPositionPacke"
  "t\022.\n\010elements\030\001 \003(\0132\034.network.SyncPositi"
  "onElement\"U\n\024GCFlyTargetingPacket\022\023\n\013sho"
  "oter_vid\030\001 \001(\r\022\022\n\ntarget_vid\030\002 \001(\r\022\t\n\001x\030"
  "\003 \001(\005\022\t\n\001y\030\004 \001(\005\"X\n\027GCAddFlyTargetingPac"
  "ket\022\023\n\013shooter_vid\030\001 \001(\r\022\022\n\ntarget_vid\030\002"
  " \001(\r\022\t\n\001x\030\003 \001(\005\022\t\n\001y\030\004 \001(\005\"a\n\016GCTargetPa"
  "cket\022\013\n\003vid\030\001 \001(\r\022\016\n\006cur_hp\030\002 \001(\005\022\016\n\006max"
  "_hp\030\003 \001(\005\022\021\n\thppercent\030\004 \001(\r\022\017\n\007element\030"
  "\005 \001(\r\"b\n\031GCTargetMonsterInfoPacket\022\020\n\010ra"
  "ce_num\030\001 \001(\r\0223\n\005drops\030\002 \003(\0132$.network.TT"
  "argetMonsterDropInfoTable\"K\n\037GCPlayerOnl"
  "ineInformationPacket\022\023\n\013player_name\030\001 \001("
  "\014\022\023\n\013language_id\030\002 \001(\005\":\n\034GCUpdateCharac"
  "terScalePacket\022\013\n\003vid\030\001 \001(\r\022\r\n\005scale\030\002 \001"
  "(\002\"R\n\027GCMaintenanceInfoPacket\022\026\n\016remaini"
  "ng_time\030\001 \001(\r\022\020\n\010duration\030\002 \001(\r\022\r\n\005cause"
  "\030\003 \001(\014\"8\n\023GCObserverAddPacket\022\013\n\003vid\030\001 \001"
  "(\r\022\t\n\001x\030\002 \001(\005\022\t\n\001y\030\003 \001(\005\"%\n\026GCObserverRe"
  "movePacket\022\013\n\003vid\030\001 \001(\r\"9\n\024GCObserverMov"
  "ePacket\022\013\n\003vid\030\001 \001(\r\022\t\n\001x\030\002 \001(\005\022\t\n\001y\030\003 \001"
  "(\005\"#\n\023GCSafeboxSizePacket\022\014\n\004size\030\001 \001(\r\""
  "+\n\032GCSafeboxMoneyChangePacket\022\r\n\005money\030\001"
  " \001(\r\"@\n\014GCWarpPacket\022\t\n\001x\030\001 \001(\005\022\t\n\001y\030\002 \001"
  "(\005\022\014\n\004addr\030\003 \001(\005\022\014\n\004port\030\004 \001(\r\"=\n\013GCPVPP"
  "acket\022\017\n\007vid_src\030\001 \001(\r\022\017\n\007vid_dst\030\002 \001(\r\022"
  "\014\n\004mode\030\003 \001(\r\"!\n\021GCDuelStartPacket\022\014\n\004vi"
  "ds\030\001 \003(\r\":\n\021GCOwnershipPacket\022\021\n\towner_v"
  "id\030\001 \001(\r\022\022\n\nvictim_vid\030\002 \001(\r\"1\n\020GCPositi"
  "onPacket\022\013\n\003vid\030\001 \001(\r\022\020\n\010position\030\002 \001(\r\""
  "\033\n\014GCStunPacket\022\013\n\003vid\030\001 \001(\r\"1\n\014GCDeadPa"
  "cket\022\013\n\003vid\030\001 \001(\r\022\024\n\014killer_is_pc\030\002 \001(\010\""
  "5\n\016GCPointsPacket\022\016\n\006points\030\001 \003(\003\022\023\n\013rea"
  "l_points\030\002 \003(\003\"O\n\023GCPointChangePacket\022\013\n"
  "\003vid\030\001 \001(\r\022\014\n\004type\030\002 \001(\r\022\016\n\006amount\030\003 \001(\003"
  "\022\r\n\005value\030\004 \001(\003\"3\n\024GCRealPointSetPacket\022"
  "\014\n\004type\030\001 \001(\r\022\r\n\005value\030\002 \001(\003\">\n\024GCQuicks"
  "lotAddPacket\022\013\n\003pos\030\001 \001(\r\022\031\n\004slot\030\002 \001(\0132"
  "\013.TQuickslot\"#\n\024GCQuickslotDelPacket\022\013\n\003"
  "pos\030\001 \001(\r\"8\n\025GCQuickslotSwapPacket\022\013\n\003po"
  "s\030\001 \001(\r\022\022\n\nchange_pos\030\002 \001(\r\"A\n\016GCMotionP"
  "acket\022\013\n\003vid\030\001 \001(\r\022\022\n\nvictim_vid\030\002 \001(\r\022\016"
  "\n\006motion\030\003 \001(\r\"S\n\022GCDamageInfoPacket\022\013\n\003"
  "vid\030\001 \001(\r\022\014\n\004flag\030\002 \001(\r\022\016\n\006damage\030\003 \001(\005\022"
  "\022\n\ntarget_vid\030\004 \001(\r\"E\n\021GCCreateFlyPacket"
  "\022\014\n\004type\030\001 \001(\r\022\021\n\tstart_vid\030\002 \001(\r\022\017\n\007end"
  "_vid\030\003 \001(\r\":\n\"GCDungeonDestinationPositi"
  "onPacket\022\t\n\001x\030\001 \001(\r\022\t\n\001y\030\002 \001(\r\"3\n\022GCSkil"
  "lLevelPacket\022\035\n\006levels\030\001 \003(\0132\r.TPlayerSk"
  "ill\"x\n\025GCMessengerListPacket\0225\n\007players\030"
  "\001 \003(\0132$.network.GCMessengerListPacket.En"
  "try\032(\n\005Entry\022\021\n\tconnected\030\001 \001(\r\022\014\n\004name\030"
  "\002 \001(\014\"\202\001\n\032GCMessengerBlockListPacket\022:\n\007"
  "players\030\001 \003(\0132).network.GCMessengerBlock"
  "ListPacket.Entry\032(\n\005Entry\022\021\n\tconnected\030\001"
  " \001(\r\022\014\n\004name\030\002 \001(\014\"&\n\026GCMessengerLoginPa"
  "cket\022\014\n\004name\030\001 \001(\014\"\'\n\027GCMessengerLogoutP"
  "acket\022\014\n\004name\030\001 \001(\014\"+\n\033GCMessengerBlockL"
  "oginPacket\022\014\n\004name\030\001 \001(\014\",\n\034GCMessengerB"
  "lockLogoutPacket\022\014\n\004name\030\001 \001(\014\"6\n\027GCMess"
  "engerMobilePacket\022\014\n\004name\030\001 \001(\014\022\r\n\005state"
  "\030\002 \001(\r\"-\n\020GCWalkModePacket\022\013\n\003vid\030\001 \001(\r\022"
  "\014\n\004mode\030\002 \001(\r\"/\n\030GCChangeSkillGroupPacke"
  "t\022\023\n\013skill_group\030\001 \001(\r\"\322\001\n\031GCRefineInfor"
  "mationPacket\022\036\n\003pos\030\001 \001(\0132\021.network.TIte"
  "mPos\022\014\n\004type\030\002 \001(\r\022\020\n\010src_vnum\030\003 \001(\r\022\023\n\013"
  "result_vnum\030\004 \001(\r\022+\n\014refine_table\030\005 \001(\0132"
  "\025.network.TRefineTable\022\027\n\017can_fast_refin"
  "e\030\006 \001(\010\022\014\n\004cost\030\007 \001(\004\022\014\n\004prob\030\010 \001(\r\"2\n\025G"
  "CSpecialEffectPacket\022\014\n\004type\030\001 \001(\r\022\013\n\003vi"
  "d\030\002 \001(\r\"\223\001\n\017GCNPCListPacket\0224\n\tpositions"
  "\030\001 \003(\0132!.network.GCNPCListPacket.Positio"
  "n\032J\n\010Position\022\014\n\004type\030\001 \001(\r\022\014\n\004name\030\002 \001("
  "\014\022\t\n\001x\030\003 \001(\005\022\t\n\001y\030\004 \001(\005\022\014\n\004race\030\005 \001(\r\"D\n"
  "\021GCViewEquipPacket\022\013\n\003vid\030\001 \001(\r\022\"\n\006equip"
  "s\030\002 \003(\0132\022.network.TItemData\"9\n\020GCLandLis"
  "tPacket\022%\n\005lands\030\001 \003(\0132\026.network.TBuildi"
  "ngLand\"K\n\024GCTargetCreatePacket\022\n\n\002id\030\001 \001"
  "(\005\022\014\n\004name\030\002 \001(\014\022\013\n\003vid\030\003 \001(\r\022\014\n\004type\030\004 "
  "\001(\r\"8\n\024GCTargetUpdatePacket\022\n\n\002id\030\001 \001(\005\022"
  "\t\n\001x\030\002 \001(\005\022\t\n\001y\030\003 \001(\005\"\"\n\024GCTargetDeleteP"
  "acket\022\n\n\002id\030\001 \001(\005\"8\n\021GCAffectAddPacket\022#"
  "\n\004elem\030\001 \001(\0132\025.TPacketAffectElement\"Y\n\024G"
  "CAffectRemovePacket\022\014\n\004type\030\001 \001(\r\022\020\n\010app"
  "ly_on\030\002 \001(\r\022\023\n\013apply_value\030\003 \001(\005\022\014\n\004flag"
  "\030\004 \001(\r\" \n\020GCMallOpenPacket\022\014\n\004size\030\001 \001(\r"
  "\"5\n\021GCLoverInfoPacket\022\014\n\004name\030\001 \001(\014\022\022\n\nl"
  "ove_point\030\002 \001(\r\".\n\030GCLoverPointUpdatePac"
  "ket\022\022\n\nlove_point\030\001 \001(\r\"C\n\021GCDigMotionPa"
  "cket\022\013\n\003vid\030\001 \001(\r\022\022\n\ntarget_vid\030\002 \001(\r\022\r\n"
  "\005count\030\003 \001(\r\":\n\026GCSpecificEffectPacket\022\013"
  "\n\003vid\030\001 \001(\r\022\023\n\013effect_file\030\002 \001(\014\"M\n\030GCDr"
  "agonSoulRefinePacket\022\020\n\010sub_type\030\001 \001(\r\022\037"
  "\n\004cell\030\002 \001(\0132\021.network.TItemPos\"8\n\025GCTea"
  "mlerStatusPacket\022\014\n\004name\030\001 \001(\014\022\021\n\tis_onl"
  "ine\030\002 \001(\010\"&\n\023GCTeamlerShowPacket\022\017\n\007is_s"
  "how\030\001 \001(\010\":\n\025GCPartyPositionPacket\022\013\n\003pi"
  "d\030\001 \001(\r\022\t\n\001x\030\002 \001(\r\022\t\n\001y\030\003 \001(\r\"\214\001\n\014GCWiki"
  "Packet\022\016\n\006ret_id\030\001 \001(\004\022\014\n\004vnum\030\002 \001(\r\022*\n\t"
  "wiki_info\030\003 \001(\0132\027.network.TWikiInfoTable"
  "\0222\n\014origin_infos\030\004 \003(\0132\034.network.TWikiIt"
  "emOriginInfo\"=\n\017GCWikiMobPacket\022\016\n\006ret_i"
  "d\030\001 \001(\004\022\014\n\004vnum\030\002 \001(\r\022\014\n\004mobs\030\003 \003(\r\"g\n\026G"
  "CSendCombatZonePacket\022\022\n\nsub_header\030\001 \001("
  "\r\022\022\n\nis_running\030\002 \001(\010\022\022\n\ndata_infos\030\003 \003("
  "\r\022\021\n\tdata_days\030\004 \003(\r\"P\n\035GCCombatZoneRank"
  "ingDataPacket\022/\n\004data\030\001 \003(\0132!.network.TC"
  "ombatZoneRankingPlayer\"G\n\024GCEventRequest"
  "Packet\022\023\n\013event_index\030\001 \001(\r\022\014\n\004name\030\002 \001("
  "\014\022\014\n\004desc\030\003 \001(\014\"*\n\023GCEventCancelPacket\022\023"
  "\n\013event_index\030\001 \001(\r\"N\n\032GCEventEmpireWarL"
  "oadPacket\022\021\n\ttime_left\030\001 \001(\005\022\r\n\005kills\030\002 "
  "\003(\005\022\016\n\006deaths\030\003 \003(\005\"M\n\034GCEventEmpireWarU"
  "pdatePacket\022\016\n\006empire\030\001 \001(\r\022\r\n\005kills\030\002 \001"
  "(\r\022\016\n\006deaths\030\003 \001(\r\"2\n\025GCAttrtreeLevelPac"
  "ket\022\n\n\002id\030\001 \001(\r\022\r\n\005level\030\002 \001(\r\"R\n\026GCAttr"
  "treeRefinePacket\022\013\n\003pos\030\001 \001(\r\022+\n\014refine_"
  "table\030\002 \001(\0132\025.network.TRefineTable\"\034\n\014GC"
  "RunePacket\022\014\n\004vnum\030\001 \001(\r\"U\n\022GCRuneRefine"
  "Packet\022\022\n\nnext_point\030\001 \001(\r\022+\n\014refine_tab"
  "le\030\002 \001(\0132\025.network.TRefineTable\"0\n\020GCRun"
  "ePagePacket\022\034\n\004data\030\001 \001(\0132\016.TRunePageDat"
  "a\"O\n\023GCRuneLevelupPacket\022\013\n\003pos\030\001 \001(\r\022+\n"
  "\014refine_table\030\002 \001(\0132\025.network.TRefineTab"
  "le\"_\n\031GCEquipmentPageLoadPacket\022*\n\005pages"
  "\030\001 \003(\0132\033.network.TEquipmentPageInfo\022\026\n\016s"
  "elected_index\030\002 \001(\r\",\n\020GCDmgMeterPacket\022"
  "\013\n\003dmg\030\001 \001(\005\022\013\n\003vid\030\002 \001(\005\"\226\001\n\023GCSkillMot"
  "ionPacket\022\013\n\003vid\030\001 \001(\r\022\t\n\001x\030\002 \001(\005\022\t\n\001y\030\003"
  " \001(\005\022\020\n\010rotation\030\004 \001(\005\022\014\n\004time\030\005 \001(\r\022\022\n\n"
  "skill_vnum\030\006 \001(\r\022\023\n\013skill_level\030\007 \001(\r\022\023\n"
  "\013skill_grade\030\010 \001(\r\":\n\025GCFakeBuffSkillPac"
  "ket\022\022\n\nskill_vnum\030\001 \001(\r\022\r\n\005level\030\002 \001(\r\"G"
  "\n\022GCCBTItemSetPacket\022 \n\004data\030\001 \001(\0132\022.net"
  "work.TItemData\022\017\n\007cbt_pos\030\002 \001(\r\"\205\001\n\026GCSo"
  "ulRefineInfoPacket\022\014\n\004vnum\030\001 \001(\r\022\022\n\nappl"
  "y_type\030\002 \001(\r\022\014\n\004type\030\003 \001(\r\022\024\n\014apply_valu"
  "es\030\004 \003(\005\022%\n\006refine\030\005 \001(\0132\025.network.TRefi"
  "neTable\",\n\017GCPVPTeamPacket\022\013\n\003vid\030\001 \001(\r\022"
  "\014\n\004team\030\002 \001(\021\"<\n\027GCInventoryMaxNumPacket"
  "\022\020\n\010inv_type\030\001 \001(\r\022\017\n\007max_num\030\002 \001(\r\"\256\001\n\032"
  "GCAttributesToClientPacket\022\021\n\titem_type\030"
  "\001 \001(\r\022\025\n\ritem_sub_type\030\002 \001(\021\022<\n\005attrs\030\003 "
  "\003(\0132-.network.GCAttributesToClientPacket"
  ".Attribute\032(\n\tAttribute\022\014\n\004type\030\001 \001(\r\022\r\n"
  "\005value\030\002 \001(\005\"m\n\027GCHorseRefineInfoPacket\022"
  "\024\n\014refine_index\030\001 \001(\r\022\025\n\rcurrent_level\030\002"
  " \001(\r\022%\n\006refine\030\003 \001(\0132\025.network.TRefineTa"
  "ble\",\n\031GCHorseRefineResultPacket\022\017\n\007succ"
  "ess\030\001 \001(\010\"=\n\024GCGayaShopOpenPacket\022%\n\005dat"
  "as\030\001 \003(\0132\026.network.TGayaShopData\"O\n\026GCBa"
  "ttlepassDataPacket\022\r\n\005index\030\001 \001(\r\022&\n\004dat"
  "a\030\002 \001(\0132\030.network.TBattlepassData\"\355\001\n\025GC"
  "CrystalRefinePacket\022\'\n\014crystal_cell\030\001 \001("
  "\0132\021.network.TItemPos\022&\n\013scroll_cell\030\002 \001("
  "\0132\021.network.TItemPos\022\031\n\021next_clarity_typ"
  "e\030\003 \001(\r\022\032\n\022next_clarity_level\030\004 \001(\r\0220\n\017n"
  "ext_attributes\030\005 \003(\0132\027.network.TItemAttr"
  "ibute\022\032\n\022required_fragments\030\006 \001(\r\"K\n\030GCC"
  "rystalUsingSlotPacket\022\037\n\004cell\030\001 \001(\0132\021.ne"
  "twork.TItemPos\022\016\n\006active\030\002 \001(\010\"(\n\030GCAuct"
  "ionOwnedGoldPacket\022\014\n\004gold\030\001 \001(\004\"A\n\030GCAu"
  "ctionOwnedItemPacket\022%\n\004item\030\001 \001(\0132\027.net"
  "work.TShopItemTable\"e\n\033GCAuctionSearchRe"
  "sultPacket\022\014\n\004page\030\001 \001(\021\022\020\n\010max_page\030\002 \001"
  "(\021\022&\n\005items\030\003 \003(\0132\027.network.TShopItemTab"
  "le\")\n\026GCAuctionMessagePacket\022\017\n\007message\030"
  "\001 \001(\t\")\n\030GCAuctionShopOwnedPacket\022\r\n\005own"
  "ed\030\001 \001(\010\"e\n\023GCAuctionShopPacket\022\014\n\004name\030"
  "\001 \001(\t\022\017\n\007timeout\030\002 \001(\r\022\014\n\004gold\030\003 \001(\004\022!\n\005"
  "items\030\004 \003(\0132\022.network.TItemData\"\'\n\027GCAuc"
  "tionShopGoldPacket\022\014\n\004gold\030\001 \001(\004\"-\n\032GCAu"
  "ctionShopTimeoutPacket\022\017\n\007timeout\030\001 \001(\r\""
  "O\n\034GCAuctionShopGuestOpenPacket\022\014\n\004name\030"
  "\001 \001(\t\022!\n\005items\030\002 \003(\0132\022.network.TItemData"
  "\"B\n\036GCAuctionShopGuestUpdatePacket\022 \n\004it"
  "em\030\001 \001(\0132\022.network.TItemData\"P\n\032GCAuctio"
  "nShopHistoryPacket\0222\n\005elems\030\001 \003(\0132#.netw"
  "ork.TAuctionShopHistoryElement\"\?\n\033GCAuct"
  "ionAveragePricePacket\022\021\n\trequestor\030\001 \001(\r"
  "\022\r\n\005price\030\002 \001(\004\"\261\001\n\025GCMainCharacterPacke"
  "t\022\013\n\003vid\030\001 \001(\r\022\020\n\010race_num\030\002 \001(\r\022\020\n\010chr_"
  "name\030\003 \001(\014\022\020\n\010bgm_name\030\004 \001(\014\022\017\n\007bgm_vol\030"
  "\005 \001(\002\022\t\n\001x\030\006 \001(\005\022\t\n\001y\030\007 \001(\005\022\t\n\001z\030\010 \001(\005\022\016"
  "\n\006empire\030\t \001(\r\022\023\n\013skill_group\030\n \001(\r\"\365\002\n\024"
  "GCCharacterAddPacket\022\013\n\003vid\030\001 \001(\r\022\r\n\005lev"
  "el\030\002 \001(\r\022\017\n\007ai_flag\030\003 \001(\r\022\r\n\005angle\030\004 \001(\002"
  "\022\t\n\001x\030\005 \001(\005\022\t\n\001y\030\006 \001(\005\022\t\n\001z\030\007 \001(\005\022\014\n\004typ"
  "e\030\010 \001(\r\022\020\n\010race_num\030\t \001(\r\022\024\n\014moving_spee"
  "d\030\n \001(\r\022\024\n\014attack_speed\030\013 \001(\r\022\022\n\nstate_f"
  "lag\030\014 \001(\r\022\024\n\014affect_flags\030\r \003(\r\022@\n\raffec"
  "t_colors\030\016 \003(\0132).network.GCCharacterAddP"
  "acket.AffectColor\022\034\n\024toggle_shining_flag"
  "s\030\017 \003(\r\032*\n\013AffectColor\022\014\n\004flag\030\001 \001(\r\022\r\n\005"
  "color\030\002 \001(\r\"\257\002\n\037GCCharacterAdditionalInf"
  "oPacket\022\013\n\003vid\030\001 \001(\r\022\014\n\004name\030\002 \001(\014\022\r\n\005pa"
  "rts\030\003 \003(\r\022\024\n\014acce_sparkle\030\004 \001(\010\022\016\n\006empir"
  "e\030\005 \001(\r\022\020\n\010guild_id\030\006 \001(\r\022\r\n\005level\030\007 \001(\r"
  "\022\021\n\talignment\030\010 \001(\021\022\017\n\007pk_mode\030\t \001(\r\022\022\n\n"
  "mount_vnum\030\n \001(\r\022\016\n\006locale\030\013 \001(\005\022\020\n\010pvp_"
  "team\030\014 \001(\021\022\030\n\020combat_zone_rank\030\r \001(\r\022\024\n\014"
  "skill_colors\030\016 \003(\r\022\021\n\tmob_scale\030\017 \001(\002\"\375\002"
  "\n\027GCCharacterUpdatePacket\022\013\n\003vid\030\001 \001(\r\022\r"
  "\n\005parts\030\002 \003(\r\022\024\n\014acce_sparkle\030\003 \001(\010\022\024\n\014m"
  "oving_speed\030\004 \001(\r\022\024\n\014attack_speed\030\005 \001(\r\022"
  "\022\n\nstate_flag\030\006 \001(\r\022\024\n\014affect_flags\030\007 \003("
  "\r\022@\n\raffect_colors\030\010 \003(\0132).network.GCCha"
  "racterAddPacket.AffectColor\022\034\n\024toggle_sh"
  "ining_flags\030\t \003(\r\022\020\n\010guild_id\030\n \001(\r\022\021\n\ta"
  "lignment\030\013 \001(\021\022\017\n\007pk_mode\030\014 \001(\r\022\022\n\nmount"
  "_vnum\030\r \001(\r\022\032\n\022combat_zone_points\030\016 \001(\r\022"
  "\024\n\014skill_colors\030\017 \003(\r\"9\n\030GCCharacterShin"
  "ingPacket\022\013\n\003vid\030\001 \001(\r\022\020\n\010shinings\030\002 \003(\r"
  "\"&\n\027GCCharacterDeletePacket\022\013\n\003vid\030\001 \001(\r"
  "\"0\n\024GCFishingStartPacket\022\013\n\003vid\030\001 \001(\r\022\013\n"
  "\003dir\030\002 \001(\r\"\"\n\023GCFishingStopPacket\022\013\n\003vid"
  "\030\001 \001(\r\"#\n\024GCFishingReactPacket\022\013\n\003vid\030\001 "
  "\001(\r\"%\n\026GCFishingSuccessPacket\022\013\n\003vid\030\001 \001"
  "(\r\"\"\n\023GCFishingFailPacket\022\013\n\003vid\030\001 \001(\r\"\'"
  "\n\027GCFishingFishInfoPacket\022\014\n\004info\030\001 \001(\r\""
  "F\n\017GCItemSetPacket\022 \n\004data\030\001 \001(\0132\022.netwo"
  "rk.TItemData\022\021\n\thighlight\030\002 \001(\010\"6\n\022GCIte"
  "mUpdatePacket\022 \n\004data\030\001 \001(\0132\022.network.TI"
  "temData\"\240\001\n\025GCItemGroundAddPacket\022\t\n\001x\030\001"
  " \001(\005\022\t\n\001y\030\002 \001(\005\022\t\n\001z\030\003 \001(\005\022\013\n\003vid\030\004 \001(\r\022"
  "\014\n\004vnum\030\005 \001(\r\022\r\n\005count\030\006 \001(\r\022\017\n\007sockets\030"
  "\007 \003(\005\022+\n\nattributes\030\010 \003(\0132\027.network.TIte"
  "mAttribute\"\'\n\030GCItemGroundDeletePacket\022\013"
  "\n\003vid\030\001 \001(\r\"2\n\025GCItemOwnershipPacket\022\013\n\003"
  "vid\030\001 \001(\r\022\014\n\004name\030\002 \001(\014\"+\n\025GCExchangeSta"
  "rtPacket\022\022\n\ntarget_vid\030\001 \001(\r\"_\n\027GCExchan"
  "geItemAddPacket\022\023\n\013display_pos\030\001 \001(\r\022 \n\004"
  "data\030\002 \001(\0132\022.network.TItemData\022\r\n\005is_me\030"
  "\003 \001(\010\"g\n\027GCExchangeItemDelPacket\022\023\n\013disp"
  "lay_pos\030\001 \001(\r\022(\n\rinventory_pos\030\002 \001(\0132\021.n"
  "etwork.TItemPos\022\r\n\005is_me\030\003 \001(\010\"6\n\027GCExch"
  "angeGoldAddPacket\022\014\n\004gold\030\001 \001(\003\022\r\n\005is_me"
  "\030\002 \001(\010\"7\n\026GCExchangeAcceptPacket\022\016\n\006acce"
  "pt\030\001 \001(\010\022\r\n\005is_me\030\002 \001(\010\"H\n\021GCShopStartPa"
  "cket\022\013\n\003vid\030\001 \001(\r\022&\n\005items\030\002 \003(\0132\027.netwo"
  "rk.TShopItemTable\"\177\n\023GCShopExStartPacket"
  "\022\013\n\003vid\030\001 \001(\r\022%\n\004tabs\030\002 \003(\0132\027.network.TS"
  "hopExTabData\022\016\n\006points\030\003 \001(\r\022\021\n\tcur_limi"
  "t\030\004 \001(\005\022\021\n\tmax_limit\030\005 \001(\005\"\?\n\026GCShopUpda"
  "teItemPacket\022%\n\004item\030\001 \001(\0132\027.network.TSh"
  "opItemTable\"f\n\020GCShopSignPacket\022\013\n\003vid\030\001"
  " \001(\r\022\014\n\004sign\030\002 \001(\014\022\013\n\003red\030\003 \001(\002\022\r\n\005green"
  "\030\004 \001(\002\022\014\n\004blue\030\005 \001(\002\022\r\n\005style\030\006 \001(\r\"\317\001\n\021"
  "GCQuestInfoPacket\022\r\n\005index\030\001 \001(\r\022\014\n\004flag"
  "\030\002 \001(\r\022\020\n\010is_begin\030\003 \001(\010\022\r\n\005title\030\004 \001(\014\022"
  "\016\n\006cat_id\030\005 \001(\r\022\022\n\nclock_name\030\006 \001(\014\022\023\n\013c"
  "lock_value\030\007 \001(\005\022\024\n\014counter_name\030\010 \001(\014\022\025"
  "\n\rcounter_value\030\t \001(\005\022\026\n\016icon_file_name\030"
  "\n \001(\014\".\n\016GCScriptPacket\022\014\n\004skin\030\001 \001(\r\022\016\n"
  "\006script\030\002 \001(\014\"M\n\024GCQuestConfirmPacket\022\017\n"
  "\007message\030\001 \001(\014\022\017\n\007timeout\030\002 \001(\005\022\023\n\013reque"
  "st_pid\030\003 \001(\r\"\247\001\n\025GCQuestCooldownPacket\0226"
  "\n\005datas\030\001 \003(\0132\'.network.GCQuestCooldownP"
  "acket.Cooldown\032V\n\010Cooldown\022\020\n\010cooldown\030\001"
  " \001(\005\022\014\n\004done\030\002 \001(\005\022\014\n\004time\030\003 \001(\005\022\016\n\006dama"
  "ge\030\004 \001(\005\022\014\n\004name\030\005 \001(\014\"n\n\021GCPetSummonPac"
  "ket\022\013\n\003vid\030\001 \001(\r\022\021\n\titem_vnum\030\002 \001(\r\022\'\n\003p"
  "et\030\003 \001(\0132\032.network.TPetAdvancedTable\022\020\n\010"
  "next_exp\030\004 \001(\003\"#\n\024GCPetUpdateExpPacket\022\013"
  "\n\003exp\030\001 \001(\003\"9\n\026GCPetUpdateLevelPacket\022\r\n"
  "\005level\030\001 \001(\r\022\020\n\010next_exp\030\002 \001(\003\"V\n\026GCPetU"
  "pdateSkillPacket\022\r\n\005index\030\001 \001(\r\022-\n\005skill"
  "\030\002 \001(\0132\036.network.TPetAdvancedSkillData\"g"
  "\n\025GCPetUpdateAttrPacket\022\r\n\005index\030\001 \001(\r\022\014"
  "\n\004type\030\002 \001(\r\022\r\n\005level\030\003 \001(\r\022\r\n\005value\030\004 \001"
  "(\005\022\023\n\013can_upgrade\030\005 \001(\010\",\n\033GCPetUpdateSk"
  "illpowerPacket\022\r\n\005power\030\001 \001(\r\"c\n\030GCPetEv"
  "olutionInfoPacket\022\014\n\004cost\030\001 \001(\003\022\014\n\004prob\030"
  "\002 \001(\r\022+\n\tmaterials\030\003 \003(\0132\030.network.TRefi"
  "neMaterial\")\n\027GCPetEvolveResultPacket\022\016\n"
  "\006result\030\001 \001(\010\"e\n\031GCPetAttrRefineInfoPack"
  "et\022\r\n\005index\030\001 \001(\r\022\014\n\004cost\030\002 \001(\003\022+\n\tmater"
  "ials\030\003 \003(\0132\030.network.TRefineMaterial\")\n\023"
  "GCPartyInvitePacket\022\022\n\nleader_vid\030\001 \001(\r\""
  "-\n\020GCPartyAddPacket\022\013\n\003pid\030\001 \001(\r\022\014\n\004name"
  "\030\002 \001(\014\"e\n\023GCPartyUpdatePacket\022\013\n\003pid\030\001 \001"
  "(\r\022\014\n\004role\030\002 \001(\r\022\022\n\npercent_hp\030\003 \001(\r\022\017\n\007"
  "affects\030\004 \003(\005\022\016\n\006leader\030\005 \001(\010\"\"\n\023GCParty"
  "RemovePacket\022\013\n\003pid\030\001 \001(\r\"-\n\021GCPartyLink"
  "Packet\022\013\n\003pid\030\001 \001(\r\022\013\n\003vid\030\002 \001(\r\"/\n\023GCPa"
  "rtyUnlinkPacket\022\013\n\003pid\030\001 \001(\r\022\013\n\003vid\030\002 \001("
  "\r\"1\n\026GCPartyParameterPacket\022\027\n\017distribut"
  "e_mode\030\001 \001(\r\"!\n\022GCGuildLoginPacket\022\013\n\003pi"
  "d\030\001 \001(\r\"\"\n\023GCGuildLogoutPacket\022\013\n\003pid\030\001 "
  "\001(\r\"\"\n\023GCGuildRemovePacket\022\013\n\003pid\030\001 \001(\r\""
  "E\n\027GCGuildMemberListPacket\022*\n\007members\030\001 "
  "\003(\0132\031.network.TGuildMemberInfo\"\210\001\n\022GCGui"
  "ldGradePacket\0225\n\006grades\030\001 \003(\0132%.network."
  "GCGuildGradePacket.GradeData\032;\n\tGradeDat"
  "a\022\r\n\005index\030\001 \001(\r\022\014\n\004name\030\002 \001(\014\022\021\n\tauth_f"
  "lag\030\003 \001(\r\"5\n\026GCGuildGradeNamePacket\022\r\n\005i"
  "ndex\030\001 \001(\r\022\014\n\004name\030\002 \001(\014\":\n\026GCGuildGrade"
  "AuthPacket\022\r\n\005index\030\001 \001(\r\022\021\n\tauth_flag\030\002"
  " \001(\r\"\211\002\n\021GCGuildInfoPacket\022\024\n\014member_cou"
  "nt\030\001 \001(\r\022\030\n\020max_member_count\030\002 \001(\r\022\020\n\010gu"
  "ild_id\030\003 \001(\r\022\022\n\nmaster_pid\030\004 \001(\r\022\013\n\003exp\030"
  "\005 \001(\r\022\r\n\005level\030\006 \001(\r\022\014\n\004name\030\007 \001(\014\022\014\n\004go"
  "ld\030\010 \001(\r\022\020\n\010has_land\030\t \001(\010\022\023\n\013guild_poin"
  "t\030\n \001(\r\022\022\n\nguild_rank\030\013 \001(\r\022\014\n\004wins\030\014 \003("
  "\r\022\r\n\005draws\030\r \003(\r\022\016\n\006losses\030\016 \003(\r\"\207\001\n\025GCG"
  "uildCommentsPacket\0228\n\010comments\030\001 \003(\0132&.n"
  "etwork.GCGuildCommentsPacket.Comment\0324\n\007"
  "Comment\022\n\n\002id\030\001 \001(\r\022\014\n\004name\030\002 \001(\014\022\017\n\007mes"
  "sage\030\003 \001(\014\"4\n\026GCGuildChangeExpPacket\022\r\n\005"
  "level\030\001 \001(\r\022\013\n\003exp\030\002 \001(\r\"<\n\036GCGuildChang"
  "eMemberGradePacket\022\013\n\003pid\030\001 \001(\r\022\r\n\005grade"
  "\030\002 \001(\r\"q\n\026GCGuildSkillInfoPacket\022\023\n\013skil"
  "l_point\030\001 \001(\r\022\024\n\014skill_levels\030\002 \003(\r\022\023\n\013g"
  "uild_point\030\003 \001(\r\022\027\n\017max_guild_point\030\004 \001("
  "\r\"=\n GCGuildChangeMemberGeneralPacket\022\013\n"
  "\003pid\030\001 \001(\r\022\014\n\004flag\030\002 \001(\010\";\n\023GCGuildInvit"
  "ePacket\022\020\n\010guild_id\030\001 \001(\r\022\022\n\nguild_name\030"
  "\002 \001(\014\"\221\001\n\035GCGuildMemberLastPlayedPacket\022"
  "B\n\007members\030\001 \003(\01321.network.GCGuildMember"
  "LastPlayedPacket.MemberInfo\032,\n\nMemberInf"
  "o\022\013\n\003pid\030\001 \001(\r\022\021\n\ttimestamp\030\002 \001(\r\"G\n\030GCG"
  "uildBattleStatsPacket\022\014\n\004wins\030\001 \003(\005\022\r\n\005d"
  "raws\030\002 \003(\005\022\016\n\006losses\030\003 \003(\005\"_\n\020GCGuildWar"
  "Packet\022\022\n\nguild_self\030\001 \001(\r\022\026\n\016guild_oppo"
  "nent\030\002 \001(\r\022\014\n\004type\030\003 \001(\r\022\021\n\twar_state\030\004 "
  "\001(\r\"s\n\021GCGuildNamePacket\0222\n\005names\030\001 \003(\0132"
  "#.network.GCGuildNamePacket.NameInfo\032*\n\010"
  "NameInfo\022\020\n\010guild_id\030\001 \001(\r\022\014\n\004name\030\002 \001(\014"
  "\"\202\001\n\024GCGuildWarListPacket\0223\n\004wars\030\001 \003(\0132"
  "%.network.GCGuildWarListPacket.WarInfo\0325"
  "\n\007WarInfo\022\024\n\014src_guild_id\030\001 \001(\r\022\024\n\014dst_g"
  "uild_id\030\002 \001(\r\"N\n\027GCGuildWarEndListPacket"
  "\0223\n\004wars\030\001 \003(\0132%.network.GCGuildWarListP"
  "acket.WarInfo\"X\n\025GCGuildWarPointPacket\022\025"
  "\n\rgain_guild_id\030\001 \001(\r\022\031\n\021opponent_guild_"
  "id\030\002 \001(\r\022\r\n\005point\030\003 \001(\005\"(\n\030GCGuildMoneyC"
  "hangePacket\022\014\n\004gold\030\001 \001(\r\"(\n\030GCGuildSafe"
  "boxOpenPacket\022\014\n\004size\030\001 \001(\r\"(\n\030GCGuildSa"
  "feboxGoldPacket\022\014\n\004gold\030\001 \001(\004\"K\n\033GCGuild"
  "SafeboxLoadLogPacket\022,\n\004logs\030\001 \003(\0132\036.net"
  "work.TGuildSafeboxLogTable\"L\n\035GCGuildSaf"
  "eboxAppendLogPacket\022+\n\003log\030\001 \001(\0132\036.netwo"
  "rk.TGuildSafeboxLogTable\"o\n\027GCGuildLadde"
  "rListPacket\022*\n\007ladders\030\001 \003(\0132\031.network.T"
  "GuildLadderInfo\022\023\n\013page_number\030\002 \001(\r\022\023\n\013"
  "total_pages\030\003 \001(\r\"Z\n\037GCGuildLadderSearch"
  "ResultPacket\022)\n\006ladder\030\001 \001(\0132\031.network.T"
  "GuildLadderInfo\022\014\n\004rank\030\002 \001(\r\"8\n\031GCGuild"
  "RankAndPointPacket\022\r\n\005point\030\001 \001(\005\022\014\n\004ran"
  "k\030\002 \001(\r\":\n\027GCGuildSymbolDataPacket\022\020\n\010gu"
  "ild_id\030\001 \001(\r\022\r\n\005image\030\002 \001(\014\"x\n\023GCMarkIDX"
  "ListPacket\0223\n\005elems\030\001 \003(\0132$.network.GCMa"
  "rkIDXListPacket.Element\032,\n\007Element\022\020\n\010gu"
  "ild_id\030\001 \001(\r\022\017\n\007mark_id\030\002 \001(\r\"L\n\021GCMarkB"
  "lockPacket\022\023\n\013image_index\030\001 \001(\r\022\023\n\013block"
  "_count\030\002 \001(\r\022\r\n\005image\030\003 \001(\014b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_gc_5fpackets_2eproto_deps[4] = {
  &::descriptor_table_data_2eproto,
  &::descriptor_table_data_5fitem_2eproto,
  &::descriptor_table_data_5fpet_2eproto,
  &::descriptor_table_data_5fplayer_2eproto,
};
static ::_pbi::once_flag descriptor_table_gc_5fpackets_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_gc_5fpackets_2eproto = {
    false, false, 15875, descriptor_table_protodef_gc_5fpackets_2eproto,
    "gc_packets.proto",
    &descriptor_table_gc_5fpackets_2eproto_once, descriptor_table_gc_5fpackets_2eproto_deps, 4, 214,
    schemas, file_default_instances, TableStruct_gc_5fpackets_2eproto::offsets,
    file_level_metadata_gc_5fpackets_2eproto, file_level_enum_descriptors_gc_5fpackets_2eproto,
    file_level_service_descriptors_gc_5fpackets_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_gc_5fpackets_2eproto_getter() {
  return &descriptor_table_gc_5fpackets_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_gc_5fpackets_2eproto(&descriptor_table_gc_5fpackets_2eproto);
namespace network {

// ===================================================================

class GCSetVerifyKeyPacket::_Internal {
 public:
};

GCSetVerifyKeyPacket::GCSetVerifyKeyPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCSetVerifyKeyPacket)
}
GCSetVerifyKeyPacket::GCSetVerifyKeyPacket(const GCSetVerifyKeyPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCSetVerifyKeyPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.verify_key_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.verify_key_ = from._impl_.verify_key_;
  // @@protoc_insertion_point(copy_constructor:network.GCSetVerifyKeyPacket)
}

inline void GCSetVerifyKeyPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.verify_key_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCSetVerifyKeyPacket::~GCSetVerifyKeyPacket() {
  // @@protoc_insertion_point(destructor:network.GCSetVerifyKeyPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCSetVerifyKeyPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GCSetVerifyKeyPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCSetVerifyKeyPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCSetVerifyKeyPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.verify_key_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCSetVerifyKeyPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 verify_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.verify_key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCSetVerifyKeyPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCSetVerifyKeyPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 verify_key = 1;
  if (this->_internal_verify_key() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_verify_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCSetVerifyKeyPacket)
  return target;
}

size_t GCSetVerifyKeyPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCSetVerifyKeyPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 verify_key = 1;
  if (this->_internal_verify_key() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_verify_key());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCSetVerifyKeyPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCSetVerifyKeyPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCSetVerifyKeyPacket::GetClassData() const { return &_class_data_; }


void GCSetVerifyKeyPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCSetVerifyKeyPacket*>(&to_msg);
  auto& from = static_cast<const GCSetVerifyKeyPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCSetVerifyKeyPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_verify_key() != 0) {
    _this->_internal_set_verify_key(from._internal_verify_key());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCSetVerifyKeyPacket::CopyFrom(const GCSetVerifyKeyPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCSetVerifyKeyPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCSetVerifyKeyPacket::IsInitialized() const {
  return true;
}

void GCSetVerifyKeyPacket::InternalSwap(GCSetVerifyKeyPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.verify_key_, other->_impl_.verify_key_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GCSetVerifyKeyPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[0]);
}

// ===================================================================

class GCLoginFailurePacket::_Internal {
 public:
};

GCLoginFailurePacket::GCLoginFailurePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCLoginFailurePacket)
}
GCLoginFailurePacket::GCLoginFailurePacket(const GCLoginFailurePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCLoginFailurePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){}
    , decltype(_impl_.data_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.status_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_status().empty()) {
    _this->_impl_.status_.Set(from._internal_status(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.data_ = from._impl_.data_;
  // @@protoc_insertion_point(copy_constructor:network.GCLoginFailurePacket)
}

inline void GCLoginFailurePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){}
    , decltype(_impl_.data_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.status_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GCLoginFailurePacket::~GCLoginFailurePacket() {
  // @@protoc_insertion_point(destructor:network.GCLoginFailurePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCLoginFailurePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.status_.Destroy();
}

void GCLoginFailurePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCLoginFailurePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCLoginFailurePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.status_.ClearToEmpty();
  _impl_.data_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCLoginFailurePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_status();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCLoginFailurePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCLoginFailurePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes status = 1;
  if (!this->_internal_status().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_status(), target);
  }

  // int32 data = 2;
  if (this->_internal_data() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCLoginFailurePacket)
  return target;
}

size_t GCLoginFailurePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCLoginFailurePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes status = 1;
  if (!this->_internal_status().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_status());
  }

  // int32 data = 2;
  if (this->_internal_data() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_data());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCLoginFailurePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCLoginFailurePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCLoginFailurePacket::GetClassData() const { return &_class_data_; }


void GCLoginFailurePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCLoginFailurePacket*>(&to_msg);
  auto& from = static_cast<const GCLoginFailurePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCLoginFailurePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_status().empty()) {
    _this->_internal_set_status(from._internal_status());
  }
  if (from._internal_data() != 0) {
    _this->_internal_set_data(from._internal_data());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCLoginFailurePacket::CopyFrom(const GCLoginFailurePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCLoginFailurePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCLoginFailurePacket::IsInitialized() const {
  return true;
}

void GCLoginFailurePacket::InternalSwap(GCLoginFailurePacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.status_, lhs_arena,
      &other->_impl_.status_, rhs_arena
  );
  swap(_impl_.data_, other->_impl_.data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GCLoginFailurePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[1]);
}

// ===================================================================

class GCCreateFailurePacket::_Internal {
 public:
};

GCCreateFailurePacket::GCCreateFailurePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCCreateFailurePacket)
}
GCCreateFailurePacket::GCCreateFailurePacket(const GCCreateFailurePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCCreateFailurePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:network.GCCreateFailurePacket)
}

inline void GCCreateFailurePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCCreateFailurePacket::~GCCreateFailurePacket() {
  // @@protoc_insertion_point(destructor:network.GCCreateFailurePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCCreateFailurePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GCCreateFailurePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCCreateFailurePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCCreateFailurePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.type_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCCreateFailurePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCCreateFailurePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCCreateFailurePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCCreateFailurePacket)
  return target;
}

size_t GCCreateFailurePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCCreateFailurePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCCreateFailurePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCCreateFailurePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCCreateFailurePacket::GetClassData() const { return &_class_data_; }


void GCCreateFailurePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCCreateFailurePacket*>(&to_msg);
  auto& from = static_cast<const GCCreateFailurePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCCreateFailurePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCCreateFailurePacket::CopyFrom(const GCCreateFailurePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCCreateFailurePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCCreateFailurePacket::IsInitialized() const {
  return true;
}

void GCCreateFailurePacket::InternalSwap(GCCreateFailurePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.type_, other->_impl_.type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GCCreateFailurePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[2]);
}

// ===================================================================

class GCDeleteSuccessPacket::_Internal {
 public:
};

GCDeleteSuccessPacket::GCDeleteSuccessPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCDeleteSuccessPacket)
}
GCDeleteSuccessPacket::GCDeleteSuccessPacket(const GCDeleteSuccessPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCDeleteSuccessPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.account_index_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.account_index_ = from._impl_.account_index_;
  // @@protoc_insertion_point(copy_constructor:network.GCDeleteSuccessPacket)
}

inline void GCDeleteSuccessPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.account_index_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCDeleteSuccessPacket::~GCDeleteSuccessPacket() {
  // @@protoc_insertion_point(destructor:network.GCDeleteSuccessPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCDeleteSuccessPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GCDeleteSuccessPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCDeleteSuccessPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCDeleteSuccessPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.account_index_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCDeleteSuccessPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 account_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.account_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCDeleteSuccessPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCDeleteSuccessPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 account_index = 1;
  if (this->_internal_account_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCDeleteSuccessPacket)
  return target;
}

size_t GCDeleteSuccessPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCDeleteSuccessPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 account_index = 1;
  if (this->_internal_account_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCDeleteSuccessPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCDeleteSuccessPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCDeleteSuccessPacket::GetClassData() const { return &_class_data_; }


void GCDeleteSuccessPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCDeleteSuccessPacket*>(&to_msg);
  auto& from = static_cast<const GCDeleteSuccessPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCDeleteSuccessPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_account_index() != 0) {
    _this->_internal_set_account_index(from._internal_account_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCDeleteSuccessPacket::CopyFrom(const GCDeleteSuccessPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCDeleteSuccessPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCDeleteSuccessPacket::IsInitialized() const {
  return true;
}

void GCDeleteSuccessPacket::InternalSwap(GCDeleteSuccessPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.account_index_, other->_impl_.account_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GCDeleteSuccessPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[3]);
}

// ===================================================================

class GCPlayerCreateSuccessPacket::_Internal {
 public:
  static const ::network::TSimplePlayer& player(const GCPlayerCreateSuccessPacket* msg);
};

const ::network::TSimplePlayer&
GCPlayerCreateSuccessPacket::_Internal::player(const GCPlayerCreateSuccessPacket* msg) {
  return *msg->_impl_.player_;
}
void GCPlayerCreateSuccessPacket::clear_player() {
  if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
    delete _impl_.player_;
  }
  _impl_.player_ = nullptr;
}
GCPlayerCreateSuccessPacket::GCPlayerCreateSuccessPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCPlayerCreateSuccessPacket)
}
GCPlayerCreateSuccessPacket::GCPlayerCreateSuccessPacket(const GCPlayerCreateSuccessPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCPlayerCreateSuccessPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.player_){nullptr}
    , decltype(_impl_.account_index_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player()) {
    _this->_impl_.player_ = new ::network::TSimplePlayer(*from._impl_.player_);
  }
  _this->_impl_.account_index_ = from._impl_.account_index_;
  // @@protoc_insertion_point(copy_constructor:network.GCPlayerCreateSuccessPacket)
}

inline void GCPlayerCreateSuccessPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.player_){nullptr}
    , decltype(_impl_.account_index_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCPlayerCreateSuccessPacket::~GCPlayerCreateSuccessPacket() {
  // @@protoc_insertion_point(destructor:network.GCPlayerCreateSuccessPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCPlayerCreateSuccessPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.player_;
}

void GCPlayerCreateSuccessPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCPlayerCreateSuccessPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCPlayerCreateSuccessPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
    delete _impl_.player_;
  }
  _impl_.player_ = nullptr;
  _impl_.account_index_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCPlayerCreateSuccessPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 account_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.account_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .network.TSimplePlayer player = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_player(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCPlayerCreateSuccessPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCPlayerCreateSuccessPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 account_index = 1;
  if (this->_internal_account_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_index(), target);
  }

  // .network.TSimplePlayer player = 2;
  if (this->_internal_has_player()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::player(this),
        _Internal::player(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCPlayerCreateSuccessPacket)
  return target;
}

size_t GCPlayerCreateSuccessPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCPlayerCreateSuccessPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .network.TSimplePlayer player = 2;
  if (this->_internal_has_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.player_);
  }

  // uint32 account_index = 1;
  if (this->_internal_account_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCPlayerCreateSuccessPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCPlayerCreateSuccessPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCPlayerCreateSuccessPacket::GetClassData() const { return &_class_data_; }


void GCPlayerCreateSuccessPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCPlayerCreateSuccessPacket*>(&to_msg);
  auto& from = static_cast<const GCPlayerCreateSuccessPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCPlayerCreateSuccessPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_player()) {
    _this->_internal_mutable_player()->::network::TSimplePlayer::MergeFrom(
        from._internal_player());
  }
  if (from._internal_account_index() != 0) {
    _this->_internal_set_account_index(from._internal_account_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCPlayerCreateSuccessPacket::CopyFrom(const GCPlayerCreateSuccessPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCPlayerCreateSuccessPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCPlayerCreateSuccessPacket::IsInitialized() const {
  return true;
}

void GCPlayerCreateSuccessPacket::InternalSwap(GCPlayerCreateSuccessPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GCPlayerCreateSuccessPacket, _impl_.account_index_)
      + sizeof(GCPlayerCreateSuccessPacket::_impl_.account_index_)
      - PROTOBUF_FIELD_OFFSET(GCPlayerCreateSuccessPacket, _impl_.player_)>(
          reinterpret_cast<char*>(&_impl_.player_),
          reinterpret_cast<char*>(&other->_impl_.player_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GCPlayerCreateSuccessPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[4]);
}

// ===================================================================

class GCEmpirePacket::_Internal {
 public:
};

GCEmpirePacket::GCEmpirePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCEmpirePacket)
}
GCEmpirePacket::GCEmpirePacket(const GCEmpirePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCEmpirePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.empire_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.empire_ = from._impl_.empire_;
  // @@protoc_insertion_point(copy_constructor:network.GCEmpirePacket)
}

inline void GCEmpirePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.empire_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCEmpirePacket::~GCEmpirePacket() {
  // @@protoc_insertion_point(destructor:network.GCEmpirePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCEmpirePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GCEmpirePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCEmpirePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCEmpirePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.empire_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCEmpirePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 empire = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.empire_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCEmpirePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCEmpirePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 empire = 1;
  if (this->_internal_empire() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_empire(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCEmpirePacket)
  return target;
}

size_t GCEmpirePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCEmpirePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 empire = 1;
  if (this->_internal_empire() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_empire());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCEmpirePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCEmpirePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCEmpirePacket::GetClassData() const { return &_class_data_; }


void GCEmpirePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCEmpirePacket*>(&to_msg);
  auto& from = static_cast<const GCEmpirePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCEmpirePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_empire() != 0) {
    _this->_internal_set_empire(from._internal_empire());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCEmpirePacket::CopyFrom(const GCEmpirePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCEmpirePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCEmpirePacket::IsInitialized() const {
  return true;
}

void GCEmpirePacket::InternalSwap(GCEmpirePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.empire_, other->_impl_.empire_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GCEmpirePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[5]);
}

// ===================================================================

class GCLoginSuccessPacket::_Internal {
 public:
};

void GCLoginSuccessPacket::clear_players() {
  _impl_.players_.Clear();
}
GCLoginSuccessPacket::GCLoginSuccessPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCLoginSuccessPacket)
}
GCLoginSuccessPacket::GCLoginSuccessPacket(const GCLoginSuccessPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCLoginSuccessPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.players_){from._impl_.players_}
    , decltype(_impl_.handle_){}
    , decltype(_impl_.random_key_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.handle_, &from._impl_.handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.random_key_) -
    reinterpret_cast<char*>(&_impl_.handle_)) + sizeof(_impl_.random_key_));
  // @@protoc_insertion_point(copy_constructor:network.GCLoginSuccessPacket)
}

inline void GCLoginSuccessPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.players_){arena}
    , decltype(_impl_.handle_){0u}
    , decltype(_impl_.random_key_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCLoginSuccessPacket::~GCLoginSuccessPacket() {
  // @@protoc_insertion_point(destructor:network.GCLoginSuccessPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCLoginSuccessPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.players_.~RepeatedPtrField();
}

void GCLoginSuccessPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCLoginSuccessPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCLoginSuccessPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.players_.Clear();
  ::memset(&_impl_.handle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.random_key_) -
      reinterpret_cast<char*>(&_impl_.handle_)) + sizeof(_impl_.random_key_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCLoginSuccessPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .network.TSimplePlayer players = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint32 handle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 random_key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.random_key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCLoginSuccessPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCLoginSuccessPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .network.TSimplePlayer players = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_players_size()); i < n; i++) {
    const auto& repfield = this->_internal_players(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // uint32 handle = 2;
  if (this->_internal_handle() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_handle(), target);
  }

  // uint32 random_key = 3;
  if (this->_internal_random_key() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_random_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCLoginSuccessPacket)
  return target;
}

size_t GCLoginSuccessPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCLoginSuccessPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .network.TSimplePlayer players = 1;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->_impl_.players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 handle = 2;
  if (this->_internal_handle() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_handle());
  }

  // uint32 random_key = 3;
  if (this->_internal_random_key() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_random_key());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCLoginSuccessPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCLoginSuccessPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCLoginSuccessPacket::GetClassData() const { return &_class_data_; }


void GCLoginSuccessPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCLoginSuccessPacket*>(&to_msg);
  auto& from = static_cast<const GCLoginSuccessPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCLoginSuccessPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.players_.MergeFrom(from._impl_.players_);
  if (from._internal_handle() != 0) {
    _this->_internal_set_handle(from._internal_handle());
  }
  if (from._internal_random_key() != 0) {
    _this->_internal_set_random_key(from._internal_random_key());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCLoginSuccessPacket::CopyFrom(const GCLoginSuccessPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCLoginSuccessPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCLoginSuccessPacket::IsInitialized() const {
  return true;
}

void GCLoginSuccessPacket::InternalSwap(GCLoginSuccessPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.players_.InternalSwap(&other->_impl_.players_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GCLoginSuccessPacket, _impl_.random_key_)
      + sizeof(GCLoginSuccessPacket::_impl_.random_key_)
      - PROTOBUF_FIELD_OFFSET(GCLoginSuccessPacket, _impl_.handle_)>(
          reinterpret_cast<char*>(&_impl_.handle_),
          reinterpret_cast<char*>(&other->_impl_.handle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GCLoginSuccessPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[6]);
}

// ===================================================================

class GCAuthSuccessPacket::_Internal {
 public:
};

GCAuthSuccessPacket::GCAuthSuccessPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCAuthSuccessPacket)
}
GCAuthSuccessPacket::GCAuthSuccessPacket(const GCAuthSuccessPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCAuthSuccessPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.login_key_){}
    , decltype(_impl_.result_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.login_key_, &from._impl_.login_key_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.result_) -
    reinterpret_cast<char*>(&_impl_.login_key_)) + sizeof(_impl_.result_));
  // @@protoc_insertion_point(copy_constructor:network.GCAuthSuccessPacket)
}

inline void GCAuthSuccessPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.login_key_){0u}
    , decltype(_impl_.result_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCAuthSuccessPacket::~GCAuthSuccessPacket() {
  // @@protoc_insertion_point(destructor:network.GCAuthSuccessPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCAuthSuccessPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GCAuthSuccessPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCAuthSuccessPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCAuthSuccessPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.login_key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.result_) -
      reinterpret_cast<char*>(&_impl_.login_key_)) + sizeof(_impl_.result_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCAuthSuccessPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 login_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.login_key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCAuthSuccessPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCAuthSuccessPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 login_key = 1;
  if (this->_internal_login_key() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_login_key(), target);
  }

  // bool result = 2;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCAuthSuccessPacket)
  return target;
}

size_t GCAuthSuccessPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCAuthSuccessPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 login_key = 1;
  if (this->_internal_login_key() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_login_key());
  }

  // bool result = 2;
  if (this->_internal_result() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCAuthSuccessPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCAuthSuccessPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCAuthSuccessPacket::GetClassData() const { return &_class_data_; }


void GCAuthSuccessPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCAuthSuccessPacket*>(&to_msg);
  auto& from = static_cast<const GCAuthSuccessPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCAuthSuccessPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_login_key() != 0) {
    _this->_internal_set_login_key(from._internal_login_key());
  }
  if (from._internal_result() != 0) {
    _this->_internal_set_result(from._internal_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCAuthSuccessPacket::CopyFrom(const GCAuthSuccessPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCAuthSuccessPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCAuthSuccessPacket::IsInitialized() const {
  return true;
}

void GCAuthSuccessPacket::InternalSwap(GCAuthSuccessPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GCAuthSuccessPacket, _impl_.result_)
      + sizeof(GCAuthSuccessPacket::_impl_.result_)
      - PROTOBUF_FIELD_OFFSET(GCAuthSuccessPacket, _impl_.login_key_)>(
          reinterpret_cast<char*>(&_impl_.login_key_),
          reinterpret_cast<char*>(&other->_impl_.login_key_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GCAuthSuccessPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[7]);
}

// ===================================================================

class GCAuthSuccessOpenIDPacket::_Internal {
 public:
};

GCAuthSuccessOpenIDPacket::GCAuthSuccessOpenIDPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCAuthSuccessOpenIDPacket)
}
GCAuthSuccessOpenIDPacket::GCAuthSuccessOpenIDPacket(const GCAuthSuccessOpenIDPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCAuthSuccessOpenIDPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.login_){}
    , decltype(_impl_.login_key_){}
    , decltype(_impl_.result_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.login_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.login_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_login().empty()) {
    _this->_impl_.login_.Set(from._internal_login(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.login_key_, &from._impl_.login_key_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.result_) -
    reinterpret_cast<char*>(&_impl_.login_key_)) + sizeof(_impl_.result_));
  // @@protoc_insertion_point(copy_constructor:network.GCAuthSuccessOpenIDPacket)
}

inline void GCAuthSuccessOpenIDPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.login_){}
    , decltype(_impl_.login_key_){0u}
    , decltype(_impl_.result_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.login_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.login_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GCAuthSuccessOpenIDPacket::~GCAuthSuccessOpenIDPacket() {
  // @@protoc_insertion_point(destructor:network.GCAuthSuccessOpenIDPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCAuthSuccessOpenIDPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.login_.Destroy();
}

void GCAuthSuccessOpenIDPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCAuthSuccessOpenIDPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCAuthSuccessOpenIDPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.login_.ClearToEmpty();
  ::memset(&_impl_.login_key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.result_) -
      reinterpret_cast<char*>(&_impl_.login_key_)) + sizeof(_impl_.result_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCAuthSuccessOpenIDPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 login_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.login_key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes login = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_login();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCAuthSuccessOpenIDPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCAuthSuccessOpenIDPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 login_key = 1;
  if (this->_internal_login_key() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_login_key(), target);
  }

  // bool result = 2;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_result(), target);
  }

  // bytes login = 3;
  if (!this->_internal_login().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_login(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCAuthSuccessOpenIDPacket)
  return target;
}

size_t GCAuthSuccessOpenIDPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCAuthSuccessOpenIDPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes login = 3;
  if (!this->_internal_login().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_login());
  }

  // uint32 login_key = 1;
  if (this->_internal_login_key() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_login_key());
  }

  // bool result = 2;
  if (this->_internal_result() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCAuthSuccessOpenIDPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCAuthSuccessOpenIDPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCAuthSuccessOpenIDPacket::GetClassData() const { return &_class_data_; }


void GCAuthSuccessOpenIDPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCAuthSuccessOpenIDPacket*>(&to_msg);
  auto& from = static_cast<const GCAuthSuccessOpenIDPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCAuthSuccessOpenIDPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_login().empty()) {
    _this->_internal_set_login(from._internal_login());
  }
  if (from._internal_login_key() != 0) {
    _this->_internal_set_login_key(from._internal_login_key());
  }
  if (from._internal_result() != 0) {
    _this->_internal_set_result(from._internal_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCAuthSuccessOpenIDPacket::CopyFrom(const GCAuthSuccessOpenIDPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCAuthSuccessOpenIDPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCAuthSuccessOpenIDPacket::IsInitialized() const {
  return true;
}

void GCAuthSuccessOpenIDPacket::InternalSwap(GCAuthSuccessOpenIDPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.login_, lhs_arena,
      &other->_impl_.login_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GCAuthSuccessOpenIDPacket, _impl_.result_)
      + sizeof(GCAuthSuccessOpenIDPacket::_impl_.result_)
      - PROTOBUF_FIELD_OFFSET(GCAuthSuccessOpenIDPacket, _impl_.login_key_)>(
          reinterpret_cast<char*>(&_impl_.login_key_),
          reinterpret_cast<char*>(&other->_impl_.login_key_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GCAuthSuccessOpenIDPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[8]);
}

// ===================================================================

class GCChangeNamePacket::_Internal {
 public:
};

GCChangeNamePacket::GCChangeNamePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCChangeNamePacket)
}
GCChangeNamePacket::GCChangeNamePacket(const GCChangeNamePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCChangeNamePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.pid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.pid_ = from._impl_.pid_;
  // @@protoc_insertion_point(copy_constructor:network.GCChangeNamePacket)
}

inline void GCChangeNamePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.pid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GCChangeNamePacket::~GCChangeNamePacket() {
  // @@protoc_insertion_point(destructor:network.GCChangeNamePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCChangeNamePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void GCChangeNamePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCChangeNamePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCChangeNamePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.pid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCChangeNamePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCChangeNamePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCChangeNamePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pid(), target);
  }

  // bytes name = 2;
  if (!this->_internal_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCChangeNamePacket)
  return target;
}

size_t GCChangeNamePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCChangeNamePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCChangeNamePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCChangeNamePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCChangeNamePacket::GetClassData() const { return &_class_data_; }


void GCChangeNamePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCChangeNamePacket*>(&to_msg);
  auto& from = static_cast<const GCChangeNamePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCChangeNamePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_pid() != 0) {
    _this->_internal_set_pid(from._internal_pid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCChangeNamePacket::CopyFrom(const GCChangeNamePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCChangeNamePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCChangeNamePacket::IsInitialized() const {
  return true;
}

void GCChangeNamePacket::InternalSwap(GCChangeNamePacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.pid_, other->_impl_.pid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GCChangeNamePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[9]);
}

// ===================================================================

class GCHybridCryptSDBPacket::_Internal {
 public:
};

GCHybridCryptSDBPacket::GCHybridCryptSDBPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCHybridCryptSDBPacket)
}
GCHybridCryptSDBPacket::GCHybridCryptSDBPacket(const GCHybridCryptSDBPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCHybridCryptSDBPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_stream_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_stream_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_stream_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data_stream().empty()) {
    _this->_impl_.data_stream_.Set(from._internal_data_stream(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:network.GCHybridCryptSDBPacket)
}

inline void GCHybridCryptSDBPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_stream_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.data_stream_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_stream_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GCHybridCryptSDBPacket::~GCHybridCryptSDBPacket() {
  // @@protoc_insertion_point(destructor:network.GCHybridCryptSDBPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCHybridCryptSDBPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_stream_.Destroy();
}

void GCHybridCryptSDBPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCHybridCryptSDBPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCHybridCryptSDBPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_stream_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCHybridCryptSDBPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes data_stream = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_data_stream();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCHybridCryptSDBPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCHybridCryptSDBPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data_stream = 1;
  if (!this->_internal_data_stream().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_data_stream(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCHybridCryptSDBPacket)
  return target;
}

size_t GCHybridCryptSDBPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCHybridCryptSDBPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data_stream = 1;
  if (!this->_internal_data_stream().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data_stream());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCHybridCryptSDBPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCHybridCryptSDBPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCHybridCryptSDBPacket::GetClassData() const { return &_class_data_; }


void GCHybridCryptSDBPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCHybridCryptSDBPacket*>(&to_msg);
  auto& from = static_cast<const GCHybridCryptSDBPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCHybridCryptSDBPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data_stream().empty()) {
    _this->_internal_set_data_stream(from._internal_data_stream());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCHybridCryptSDBPacket::CopyFrom(const GCHybridCryptSDBPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCHybridCryptSDBPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCHybridCryptSDBPacket::IsInitialized() const {
  return true;
}

void GCHybridCryptSDBPacket::InternalSwap(GCHybridCryptSDBPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_stream_, lhs_arena,
      &other->_impl_.data_stream_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GCHybridCryptSDBPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[10]);
}

// ===================================================================

class GCHybridCryptKeysPacket::_Internal {
 public:
};

GCHybridCryptKeysPacket::GCHybridCryptKeysPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCHybridCryptKeysPacket)
}
GCHybridCryptKeysPacket::GCHybridCryptKeysPacket(const GCHybridCryptKeysPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCHybridCryptKeysPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_stream_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_stream_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_stream_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data_stream().empty()) {
    _this->_impl_.data_stream_.Set(from._internal_data_stream(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:network.GCHybridCryptKeysPacket)
}

inline void GCHybridCryptKeysPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_stream_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.data_stream_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_stream_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GCHybridCryptKeysPacket::~GCHybridCryptKeysPacket() {
  // @@protoc_insertion_point(destructor:network.GCHybridCryptKeysPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCHybridCryptKeysPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_stream_.Destroy();
}

void GCHybridCryptKeysPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCHybridCryptKeysPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCHybridCryptKeysPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_stream_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCHybridCryptKeysPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes data_stream = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_data_stream();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCHybridCryptKeysPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCHybridCryptKeysPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data_stream = 1;
  if (!this->_internal_data_stream().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_data_stream(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCHybridCryptKeysPacket)
  return target;
}

size_t GCHybridCryptKeysPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCHybridCryptKeysPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data_stream = 1;
  if (!this->_internal_data_stream().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data_stream());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCHybridCryptKeysPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCHybridCryptKeysPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCHybridCryptKeysPacket::GetClassData() const { return &_class_data_; }


void GCHybridCryptKeysPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCHybridCryptKeysPacket*>(&to_msg);
  auto& from = static_cast<const GCHybridCryptKeysPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCHybridCryptKeysPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data_stream().empty()) {
    _this->_internal_set_data_stream(from._internal_data_stream());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCHybridCryptKeysPacket::CopyFrom(const GCHybridCryptKeysPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCHybridCryptKeysPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCHybridCryptKeysPacket::IsInitialized() const {
  return true;
}

void GCHybridCryptKeysPacket::InternalSwap(GCHybridCryptKeysPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_stream_, lhs_arena,
      &other->_impl_.data_stream_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GCHybridCryptKeysPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[11]);
}

// ===================================================================

class GCRespondChannelStatusPacket::_Internal {
 public:
};

void GCRespondChannelStatusPacket::clear_states() {
  _impl_.states_.Clear();
}
GCRespondChannelStatusPacket::GCRespondChannelStatusPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCRespondChannelStatusPacket)
}
GCRespondChannelStatusPacket::GCRespondChannelStatusPacket(const GCRespondChannelStatusPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCRespondChannelStatusPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.states_){from._impl_.states_}
    , decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:network.GCRespondChannelStatusPacket)
}

inline void GCRespondChannelStatusPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.states_){arena}
    , decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCRespondChannelStatusPacket::~GCRespondChannelStatusPacket() {
  // @@protoc_insertion_point(destructor:network.GCRespondChannelStatusPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCRespondChannelStatusPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.states_.~RepeatedPtrField();
}

void GCRespondChannelStatusPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCRespondChannelStatusPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCRespondChannelStatusPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.states_.Clear();
  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCRespondChannelStatusPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .network.TChannelStatus states = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_states(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCRespondChannelStatusPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCRespondChannelStatusPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .network.TChannelStatus states = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_states_size()); i < n; i++) {
    const auto& repfield = this->_internal_states(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCRespondChannelStatusPacket)
  return target;
}

size_t GCRespondChannelStatusPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCRespondChannelStatusPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .network.TChannelStatus states = 1;
  total_size += 1UL * this->_internal_states_size();
  for (const auto& msg : this->_impl_.states_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCRespondChannelStatusPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCRespondChannelStatusPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCRespondChannelStatusPacket::GetClassData() const { return &_class_data_; }


void GCRespondChannelStatusPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCRespondChannelStatusPacket*>(&to_msg);
  auto& from = static_cast<const GCRespondChannelStatusPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCRespondChannelStatusPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.states_.MergeFrom(from._impl_.states_);
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCRespondChannelStatusPacket::CopyFrom(const GCRespondChannelStatusPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCRespondChannelStatusPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCRespondChannelStatusPacket::IsInitialized() const {
  return true;
}

void GCRespondChannelStatusPacket::InternalSwap(GCRespondChannelStatusPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.states_.InternalSwap(&other->_impl_.states_);
  swap(_impl_.success_, other->_impl_.success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GCRespondChannelStatusPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[12]);
}

// ===================================================================

class GCPhasePacket::_Internal {
 public:
};

GCPhasePacket::GCPhasePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCPhasePacket)
}
GCPhasePacket::GCPhasePacket(const GCPhasePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCPhasePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.phase_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.phase_ = from._impl_.phase_;
  // @@protoc_insertion_point(copy_constructor:network.GCPhasePacket)
}

inline void GCPhasePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.phase_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCPhasePacket::~GCPhasePacket() {
  // @@protoc_insertion_point(destructor:network.GCPhasePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCPhasePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GCPhasePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCPhasePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCPhasePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.phase_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCPhasePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 phase = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.phase_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCPhasePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCPhasePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 phase = 1;
  if (this->_internal_phase() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_phase(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCPhasePacket)
  return target;
}

size_t GCPhasePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCPhasePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 phase = 1;
  if (this->_internal_phase() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_phase());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCPhasePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCPhasePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCPhasePacket::GetClassData() const { return &_class_data_; }


void GCPhasePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCPhasePacket*>(&to_msg);
  auto& from = static_cast<const GCPhasePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCPhasePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_phase() != 0) {
    _this->_internal_set_phase(from._internal_phase());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCPhasePacket::CopyFrom(const GCPhasePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCPhasePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCPhasePacket::IsInitialized() const {
  return true;
}

void GCPhasePacket::InternalSwap(GCPhasePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.phase_, other->_impl_.phase_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GCPhasePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[13]);
}

// ===================================================================

class GCHandshakePacket::_Internal {
 public:
};

GCHandshakePacket::GCHandshakePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCHandshakePacket)
}
GCHandshakePacket::GCHandshakePacket(const GCHandshakePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCHandshakePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.handshake_){}
    , decltype(_impl_.time_){}
    , decltype(_impl_.delta_){}
    , decltype(_impl_.crypt_key_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.handshake_, &from._impl_.handshake_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.crypt_key_) -
    reinterpret_cast<char*>(&_impl_.handshake_)) + sizeof(_impl_.crypt_key_));
  // @@protoc_insertion_point(copy_constructor:network.GCHandshakePacket)
}

inline void GCHandshakePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.handshake_){0u}
    , decltype(_impl_.time_){0u}
    , decltype(_impl_.delta_){0}
    , decltype(_impl_.crypt_key_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCHandshakePacket::~GCHandshakePacket() {
  // @@protoc_insertion_point(destructor:network.GCHandshakePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCHandshakePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GCHandshakePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCHandshakePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCHandshakePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.handshake_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.crypt_key_) -
      reinterpret_cast<char*>(&_impl_.handshake_)) + sizeof(_impl_.crypt_key_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCHandshakePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 handshake = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.handshake_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 delta = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.delta_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 crypt_key = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.crypt_key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCHandshakePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCHandshakePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 handshake = 1;
  if (this->_internal_handshake() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_handshake(), target);
  }

  // uint32 time = 2;
  if (this->_internal_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_time(), target);
  }

  // int32 delta = 3;
  if (this->_internal_delta() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_delta(), target);
  }

  // uint32 crypt_key = 4;
  if (this->_internal_crypt_key() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_crypt_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCHandshakePacket)
  return target;
}

size_t GCHandshakePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCHandshakePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 handshake = 1;
  if (this->_internal_handshake() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_handshake());
  }

  // uint32 time = 2;
  if (this->_internal_time() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_time());
  }

  // int32 delta = 3;
  if (this->_internal_delta() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_delta());
  }

  // uint32 crypt_key = 4;
  if (this->_internal_crypt_key() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_crypt_key());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCHandshakePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCHandshakePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCHandshakePacket::GetClassData() const { return &_class_data_; }


void GCHandshakePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCHandshakePacket*>(&to_msg);
  auto& from = static_cast<const GCHandshakePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCHandshakePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_handshake() != 0) {
    _this->_internal_set_handshake(from._internal_handshake());
  }
  if (from._internal_time() != 0) {
    _this->_internal_set_time(from._internal_time());
  }
  if (from._internal_delta() != 0) {
    _this->_internal_set_delta(from._internal_delta());
  }
  if (from._internal_crypt_key() != 0) {
    _this->_internal_set_crypt_key(from._internal_crypt_key());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCHandshakePacket::CopyFrom(const GCHandshakePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCHandshakePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCHandshakePacket::IsInitialized() const {
  return true;
}

void GCHandshakePacket::InternalSwap(GCHandshakePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GCHandshakePacket, _impl_.crypt_key_)
      + sizeof(GCHandshakePacket::_impl_.crypt_key_)
      - PROTOBUF_FIELD_OFFSET(GCHandshakePacket, _impl_.handshake_)>(
          reinterpret_cast<char*>(&_impl_.handshake_),
          reinterpret_cast<char*>(&other->_impl_.handshake_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GCHandshakePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[14]);
}

// ===================================================================

class GCKeyAgreementPacket::_Internal {
 public:
};

GCKeyAgreementPacket::GCKeyAgreementPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCKeyAgreementPacket)
}
GCKeyAgreementPacket::GCKeyAgreementPacket(const GCKeyAgreementPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCKeyAgreementPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.agreed_length_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.agreed_length_ = from._impl_.agreed_length_;
  // @@protoc_insertion_point(copy_constructor:network.GCKeyAgreementPacket)
}

inline void GCKeyAgreementPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.agreed_length_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GCKeyAgreementPacket::~GCKeyAgreementPacket() {
  // @@protoc_insertion_point(destructor:network.GCKeyAgreementPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCKeyAgreementPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.Destroy();
}

void GCKeyAgreementPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCKeyAgreementPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCKeyAgreementPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.ClearToEmpty();
  _impl_.agreed_length_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCKeyAgreementPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 agreed_length = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.agreed_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCKeyAgreementPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCKeyAgreementPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 1;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_data(), target);
  }

  // uint32 agreed_length = 2;
  if (this->_internal_agreed_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_agreed_length(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCKeyAgreementPacket)
  return target;
}

size_t GCKeyAgreementPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCKeyAgreementPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 1;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // uint32 agreed_length = 2;
  if (this->_internal_agreed_length() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_agreed_length());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCKeyAgreementPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCKeyAgreementPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCKeyAgreementPacket::GetClassData() const { return &_class_data_; }


void GCKeyAgreementPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCKeyAgreementPacket*>(&to_msg);
  auto& from = static_cast<const GCKeyAgreementPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCKeyAgreementPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (from._internal_agreed_length() != 0) {
    _this->_internal_set_agreed_length(from._internal_agreed_length());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCKeyAgreementPacket::CopyFrom(const GCKeyAgreementPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCKeyAgreementPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCKeyAgreementPacket::IsInitialized() const {
  return true;
}

void GCKeyAgreementPacket::InternalSwap(GCKeyAgreementPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  swap(_impl_.agreed_length_, other->_impl_.agreed_length_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GCKeyAgreementPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[15]);
}

// ===================================================================

class GCXTrapCS1RequestPacket::_Internal {
 public:
};

GCXTrapCS1RequestPacket::GCXTrapCS1RequestPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCXTrapCS1RequestPacket)
}
GCXTrapCS1RequestPacket::GCXTrapCS1RequestPacket(const GCXTrapCS1RequestPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCXTrapCS1RequestPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:network.GCXTrapCS1RequestPacket)
}

inline void GCXTrapCS1RequestPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GCXTrapCS1RequestPacket::~GCXTrapCS1RequestPacket() {
  // @@protoc_insertion_point(destructor:network.GCXTrapCS1RequestPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCXTrapCS1RequestPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.Destroy();
}

void GCXTrapCS1RequestPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCXTrapCS1RequestPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCXTrapCS1RequestPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCXTrapCS1RequestPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCXTrapCS1RequestPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCXTrapCS1RequestPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 1;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCXTrapCS1RequestPacket)
  return target;
}

size_t GCXTrapCS1RequestPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCXTrapCS1RequestPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 1;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCXTrapCS1RequestPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCXTrapCS1RequestPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCXTrapCS1RequestPacket::GetClassData() const { return &_class_data_; }


void GCXTrapCS1RequestPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCXTrapCS1RequestPacket*>(&to_msg);
  auto& from = static_cast<const GCXTrapCS1RequestPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCXTrapCS1RequestPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCXTrapCS1RequestPacket::CopyFrom(const GCXTrapCS1RequestPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCXTrapCS1RequestPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCXTrapCS1RequestPacket::IsInitialized() const {
  return true;
}

void GCXTrapCS1RequestPacket::InternalSwap(GCXTrapCS1RequestPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GCXTrapCS1RequestPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[16]);
}

// ===================================================================

class GCPanamaPackPacket::_Internal {
 public:
};

GCPanamaPackPacket::GCPanamaPackPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCPanamaPackPacket)
}
GCPanamaPackPacket::GCPanamaPackPacket(const GCPanamaPackPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCPanamaPackPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pack_name_){}
    , decltype(_impl_.abiv_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.pack_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pack_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pack_name().empty()) {
    _this->_impl_.pack_name_.Set(from._internal_pack_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.abiv_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.abiv_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_abiv().empty()) {
    _this->_impl_.abiv_.Set(from._internal_abiv(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:network.GCPanamaPackPacket)
}

inline void GCPanamaPackPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pack_name_){}
    , decltype(_impl_.abiv_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.pack_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pack_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.abiv_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.abiv_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GCPanamaPackPacket::~GCPanamaPackPacket() {
  // @@protoc_insertion_point(destructor:network.GCPanamaPackPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCPanamaPackPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.pack_name_.Destroy();
  _impl_.abiv_.Destroy();
}

void GCPanamaPackPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCPanamaPackPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCPanamaPackPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pack_name_.ClearToEmpty();
  _impl_.abiv_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCPanamaPackPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes pack_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_pack_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes abIV = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_abiv();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCPanamaPackPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCPanamaPackPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes pack_name = 1;
  if (!this->_internal_pack_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_pack_name(), target);
  }

  // bytes abIV = 2;
  if (!this->_internal_abiv().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_abiv(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCPanamaPackPacket)
  return target;
}

size_t GCPanamaPackPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCPanamaPackPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes pack_name = 1;
  if (!this->_internal_pack_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_pack_name());
  }

  // bytes abIV = 2;
  if (!this->_internal_abiv().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_abiv());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCPanamaPackPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCPanamaPackPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCPanamaPackPacket::GetClassData() const { return &_class_data_; }


void GCPanamaPackPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCPanamaPackPacket*>(&to_msg);
  auto& from = static_cast<const GCPanamaPackPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCPanamaPackPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_pack_name().empty()) {
    _this->_internal_set_pack_name(from._internal_pack_name());
  }
  if (!from._internal_abiv().empty()) {
    _this->_internal_set_abiv(from._internal_abiv());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCPanamaPackPacket::CopyFrom(const GCPanamaPackPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCPanamaPackPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCPanamaPackPacket::IsInitialized() const {
  return true;
}

void GCPanamaPackPacket::InternalSwap(GCPanamaPackPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pack_name_, lhs_arena,
      &other->_impl_.pack_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.abiv_, lhs_arena,
      &other->_impl_.abiv_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GCPanamaPackPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[17]);
}

// ===================================================================

class GCLoginVersionAnswerPacket::_Internal {
 public:
};

GCLoginVersionAnswerPacket::GCLoginVersionAnswerPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCLoginVersionAnswerPacket)
}
GCLoginVersionAnswerPacket::GCLoginVersionAnswerPacket(const GCLoginVersionAnswerPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCLoginVersionAnswerPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.answer_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.answer_ = from._impl_.answer_;
  // @@protoc_insertion_point(copy_constructor:network.GCLoginVersionAnswerPacket)
}

inline void GCLoginVersionAnswerPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.answer_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCLoginVersionAnswerPacket::~GCLoginVersionAnswerPacket() {
  // @@protoc_insertion_point(destructor:network.GCLoginVersionAnswerPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCLoginVersionAnswerPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GCLoginVersionAnswerPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCLoginVersionAnswerPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCLoginVersionAnswerPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.answer_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCLoginVersionAnswerPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool answer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.answer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCLoginVersionAnswerPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCLoginVersionAnswerPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool answer = 1;
  if (this->_internal_answer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_answer(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCLoginVersionAnswerPacket)
  return target;
}

size_t GCLoginVersionAnswerPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCLoginVersionAnswerPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool answer = 1;
  if (this->_internal_answer() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCLoginVersionAnswerPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCLoginVersionAnswerPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCLoginVersionAnswerPacket::GetClassData() const { return &_class_data_; }


void GCLoginVersionAnswerPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCLoginVersionAnswerPacket*>(&to_msg);
  auto& from = static_cast<const GCLoginVersionAnswerPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCLoginVersionAnswerPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_answer() != 0) {
    _this->_internal_set_answer(from._internal_answer());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCLoginVersionAnswerPacket::CopyFrom(const GCLoginVersionAnswerPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCLoginVersionAnswerPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCLoginVersionAnswerPacket::IsInitialized() const {
  return true;
}

void GCLoginVersionAnswerPacket::InternalSwap(GCLoginVersionAnswerPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.answer_, other->_impl_.answer_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GCLoginVersionAnswerPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[18]);
}

// ===================================================================

class GCTimePacket::_Internal {
 public:
};

GCTimePacket::GCTimePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCTimePacket)
}
GCTimePacket::GCTimePacket(const GCTimePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCTimePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.time_){}
    , decltype(_impl_.random_){}
    , decltype(_impl_.channel_){}
    , decltype(_impl_.test_server_){}
    , decltype(_impl_.combatzone_){}
    , decltype(_impl_.coins_){}
    , decltype(_impl_.map_index_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.time_, &from._impl_.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.map_index_) -
    reinterpret_cast<char*>(&_impl_.time_)) + sizeof(_impl_.map_index_));
  // @@protoc_insertion_point(copy_constructor:network.GCTimePacket)
}

inline void GCTimePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.time_){0u}
    , decltype(_impl_.random_){0u}
    , decltype(_impl_.channel_){0u}
    , decltype(_impl_.test_server_){0u}
    , decltype(_impl_.combatzone_){false}
    , decltype(_impl_.coins_){false}
    , decltype(_impl_.map_index_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCTimePacket::~GCTimePacket() {
  // @@protoc_insertion_point(destructor:network.GCTimePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCTimePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GCTimePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCTimePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCTimePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.map_index_) -
      reinterpret_cast<char*>(&_impl_.time_)) + sizeof(_impl_.map_index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCTimePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 random = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.random_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool combatzone = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.combatzone_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 channel = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 test_server = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.test_server_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 map_index = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.map_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool coins = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.coins_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCTimePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCTimePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 time = 1;
  if (this->_internal_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_time(), target);
  }

  // uint32 random = 2;
  if (this->_internal_random() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_random(), target);
  }

  // bool combatzone = 3;
  if (this->_internal_combatzone() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_combatzone(), target);
  }

  // uint32 channel = 4;
  if (this->_internal_channel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_channel(), target);
  }

  // uint32 test_server = 5;
  if (this->_internal_test_server() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_test_server(), target);
  }

  // uint32 map_index = 6;
  if (this->_internal_map_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_map_index(), target);
  }

  // bool coins = 7;
  if (this->_internal_coins() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_coins(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCTimePacket)
  return target;
}

size_t GCTimePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCTimePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 time = 1;
  if (this->_internal_time() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_time());
  }

  // uint32 random = 2;
  if (this->_internal_random() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_random());
  }

  // uint32 channel = 4;
  if (this->_internal_channel() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel());
  }

  // uint32 test_server = 5;
  if (this->_internal_test_server() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_test_server());
  }

  // bool combatzone = 3;
  if (this->_internal_combatzone() != 0) {
    total_size += 1 + 1;
  }

  // bool coins = 7;
  if (this->_internal_coins() != 0) {
    total_size += 1 + 1;
  }

  // uint32 map_index = 6;
  if (this->_internal_map_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_map_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCTimePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCTimePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCTimePacket::GetClassData() const { return &_class_data_; }


void GCTimePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCTimePacket*>(&to_msg);
  auto& from = static_cast<const GCTimePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCTimePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_time() != 0) {
    _this->_internal_set_time(from._internal_time());
  }
  if (from._internal_random() != 0) {
    _this->_internal_set_random(from._internal_random());
  }
  if (from._internal_channel() != 0) {
    _this->_internal_set_channel(from._internal_channel());
  }
  if (from._internal_test_server() != 0) {
    _this->_internal_set_test_server(from._internal_test_server());
  }
  if (from._internal_combatzone() != 0) {
    _this->_internal_set_combatzone(from._internal_combatzone());
  }
  if (from._internal_coins() != 0) {
    _this->_internal_set_coins(from._internal_coins());
  }
  if (from._internal_map_index() != 0) {
    _this->_internal_set_map_index(from._internal_map_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCTimePacket::CopyFrom(const GCTimePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCTimePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCTimePacket::IsInitialized() const {
  return true;
}

void GCTimePacket::InternalSwap(GCTimePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GCTimePacket, _impl_.map_index_)
      + sizeof(GCTimePacket::_impl_.map_index_)
      - PROTOBUF_FIELD_OFFSET(GCTimePacket, _impl_.time_)>(
          reinterpret_cast<char*>(&_impl_.time_),
          reinterpret_cast<char*>(&other->_impl_.time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GCTimePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[19]);
}

// ===================================================================

class GCChannelPacket::_Internal {
 public:
};

GCChannelPacket::GCChannelPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCChannelPacket)
}
GCChannelPacket::GCChannelPacket(const GCChannelPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCChannelPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.channel_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.channel_ = from._impl_.channel_;
  // @@protoc_insertion_point(copy_constructor:network.GCChannelPacket)
}

inline void GCChannelPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.channel_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCChannelPacket::~GCChannelPacket() {
  // @@protoc_insertion_point(destructor:network.GCChannelPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCChannelPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GCChannelPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCChannelPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCChannelPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.channel_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCChannelPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 channel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCChannelPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCChannelPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 channel = 1;
  if (this->_internal_channel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_channel(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCChannelPacket)
  return target;
}

size_t GCChannelPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCChannelPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 channel = 1;
  if (this->_internal_channel() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCChannelPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCChannelPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCChannelPacket::GetClassData() const { return &_class_data_; }


void GCChannelPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCChannelPacket*>(&to_msg);
  auto& from = static_cast<const GCChannelPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCChannelPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_channel() != 0) {
    _this->_internal_set_channel(from._internal_channel());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCChannelPacket::CopyFrom(const GCChannelPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCChannelPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCChannelPacket::IsInitialized() const {
  return true;
}

void GCChannelPacket::InternalSwap(GCChannelPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.channel_, other->_impl_.channel_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GCChannelPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[20]);
}

// ===================================================================

class GCWhisperPacket::_Internal {
 public:
};

GCWhisperPacket::GCWhisperPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCWhisperPacket)
}
GCWhisperPacket::GCWhisperPacket(const GCWhisperPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCWhisperPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_from_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.locale_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_from_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_from_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name_from().empty()) {
    _this->_impl_.name_from_.Set(from._internal_name_from(), 
      _this->GetArenaForAllocation());
  }
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.locale_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.locale_));
  // @@protoc_insertion_point(copy_constructor:network.GCWhisperPacket)
}

inline void GCWhisperPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_from_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.type_){0u}
    , decltype(_impl_.locale_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_from_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_from_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GCWhisperPacket::~GCWhisperPacket() {
  // @@protoc_insertion_point(destructor:network.GCWhisperPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCWhisperPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_from_.Destroy();
  _impl_.message_.Destroy();
}

void GCWhisperPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCWhisperPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCWhisperPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_from_.ClearToEmpty();
  _impl_.message_.ClearToEmpty();
  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.locale_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.locale_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCWhisperPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 locale = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.locale_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes name_from = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_name_from();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes message = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCWhisperPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCWhisperPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // int32 locale = 2;
  if (this->_internal_locale() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_locale(), target);
  }

  // bytes name_from = 3;
  if (!this->_internal_name_from().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_name_from(), target);
  }

  // bytes message = 4;
  if (!this->_internal_message().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCWhisperPacket)
  return target;
}

size_t GCWhisperPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCWhisperPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name_from = 3;
  if (!this->_internal_name_from().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name_from());
  }

  // bytes message = 4;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_message());
  }

  // uint32 type = 1;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
  }

  // int32 locale = 2;
  if (this->_internal_locale() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_locale());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCWhisperPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCWhisperPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCWhisperPacket::GetClassData() const { return &_class_data_; }


void GCWhisperPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCWhisperPacket*>(&to_msg);
  auto& from = static_cast<const GCWhisperPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCWhisperPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name_from().empty()) {
    _this->_internal_set_name_from(from._internal_name_from());
  }
  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_locale() != 0) {
    _this->_internal_set_locale(from._internal_locale());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCWhisperPacket::CopyFrom(const GCWhisperPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCWhisperPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCWhisperPacket::IsInitialized() const {
  return true;
}

void GCWhisperPacket::InternalSwap(GCWhisperPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_from_, lhs_arena,
      &other->_impl_.name_from_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GCWhisperPacket, _impl_.locale_)
      + sizeof(GCWhisperPacket::_impl_.locale_)
      - PROTOBUF_FIELD_OFFSET(GCWhisperPacket, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GCWhisperPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[21]);
}

// ===================================================================

class GCChatPacket::_Internal {
 public:
};

GCChatPacket::GCChatPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCChatPacket)
}
GCChatPacket::GCChatPacket(const GCChatPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCChatPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.empire_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.empire_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.empire_));
  // @@protoc_insertion_point(copy_constructor:network.GCChatPacket)
}

inline void GCChatPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.type_){0u}
    , decltype(_impl_.id_){0u}
    , decltype(_impl_.empire_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GCChatPacket::~GCChatPacket() {
  // @@protoc_insertion_point(destructor:network.GCChatPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCChatPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
}

void GCChatPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCChatPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCChatPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.empire_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.empire_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCChatPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 empire = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.empire_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCChatPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCChatPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // uint32 id = 2;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_id(), target);
  }

  // bytes message = 3;
  if (!this->_internal_message().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_message(), target);
  }

  // uint32 empire = 4;
  if (this->_internal_empire() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_empire(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCChatPacket)
  return target;
}

size_t GCChatPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCChatPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes message = 3;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_message());
  }

  // uint32 type = 1;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
  }

  // uint32 id = 2;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  // uint32 empire = 4;
  if (this->_internal_empire() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_empire());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCChatPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCChatPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCChatPacket::GetClassData() const { return &_class_data_; }


void GCChatPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCChatPacket*>(&to_msg);
  auto& from = static_cast<const GCChatPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCChatPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_empire() != 0) {
    _this->_internal_set_empire(from._internal_empire());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCChatPacket::CopyFrom(const GCChatPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCChatPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCChatPacket::IsInitialized() const {
  return true;
}

void GCChatPacket::InternalSwap(GCChatPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GCChatPacket, _impl_.empire_)
      + sizeof(GCChatPacket::_impl_.empire_)
      - PROTOBUF_FIELD_OFFSET(GCChatPacket, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GCChatPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[22]);
}

// ===================================================================

class GCMovePacket::_Internal {
 public:
};

GCMovePacket::GCMovePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCMovePacket)
}
GCMovePacket::GCMovePacket(const GCMovePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCMovePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.func_){}
    , decltype(_impl_.arg_){}
    , decltype(_impl_.rot_){}
    , decltype(_impl_.vid_){}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.time_){}
    , decltype(_impl_.duration_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.func_, &from._impl_.func_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.duration_) -
    reinterpret_cast<char*>(&_impl_.func_)) + sizeof(_impl_.duration_));
  // @@protoc_insertion_point(copy_constructor:network.GCMovePacket)
}

inline void GCMovePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.func_){0u}
    , decltype(_impl_.arg_){0u}
    , decltype(_impl_.rot_){0u}
    , decltype(_impl_.vid_){0u}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.time_){0u}
    , decltype(_impl_.duration_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCMovePacket::~GCMovePacket() {
  // @@protoc_insertion_point(destructor:network.GCMovePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCMovePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GCMovePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCMovePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCMovePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.func_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.duration_) -
      reinterpret_cast<char*>(&_impl_.func_)) + sizeof(_impl_.duration_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCMovePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 func = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.func_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 arg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.arg_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 rot = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.rot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 vid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.vid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 x = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 y = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 duration = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCMovePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCMovePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 func = 1;
  if (this->_internal_func() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_func(), target);
  }

  // uint32 arg = 2;
  if (this->_internal_arg() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_arg(), target);
  }

  // uint32 rot = 3;
  if (this->_internal_rot() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_rot(), target);
  }

  // uint32 vid = 4;
  if (this->_internal_vid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_vid(), target);
  }

  // int32 x = 5;
  if (this->_internal_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_x(), target);
  }

  // int32 y = 6;
  if (this->_internal_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_y(), target);
  }

  // uint32 time = 7;
  if (this->_internal_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_time(), target);
  }

  // uint32 duration = 8;
  if (this->_internal_duration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_duration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCMovePacket)
  return target;
}

size_t GCMovePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCMovePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 func = 1;
  if (this->_internal_func() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_func());
  }

  // uint32 arg = 2;
  if (this->_internal_arg() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_arg());
  }

  // uint32 rot = 3;
  if (this->_internal_rot() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rot());
  }

  // uint32 vid = 4;
  if (this->_internal_vid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_vid());
  }

  // int32 x = 5;
  if (this->_internal_x() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x());
  }

  // int32 y = 6;
  if (this->_internal_y() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y());
  }

  // uint32 time = 7;
  if (this->_internal_time() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_time());
  }

  // uint32 duration = 8;
  if (this->_internal_duration() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_duration());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCMovePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCMovePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCMovePacket::GetClassData() const { return &_class_data_; }


void GCMovePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCMovePacket*>(&to_msg);
  auto& from = static_cast<const GCMovePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCMovePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_func() != 0) {
    _this->_internal_set_func(from._internal_func());
  }
  if (from._internal_arg() != 0) {
    _this->_internal_set_arg(from._internal_arg());
  }
  if (from._internal_rot() != 0) {
    _this->_internal_set_rot(from._internal_rot());
  }
  if (from._internal_vid() != 0) {
    _this->_internal_set_vid(from._internal_vid());
  }
  if (from._internal_x() != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  if (from._internal_y() != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  if (from._internal_time() != 0) {
    _this->_internal_set_time(from._internal_time());
  }
  if (from._internal_duration() != 0) {
    _this->_internal_set_duration(from._internal_duration());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCMovePacket::CopyFrom(const GCMovePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCMovePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCMovePacket::IsInitialized() const {
  return true;
}

void GCMovePacket::InternalSwap(GCMovePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GCMovePacket, _impl_.duration_)
      + sizeof(GCMovePacket::_impl_.duration_)
      - PROTOBUF_FIELD_OFFSET(GCMovePacket, _impl_.func_)>(
          reinterpret_cast<char*>(&_impl_.func_),
          reinterpret_cast<char*>(&other->_impl_.func_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GCMovePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[23]);
}

// ===================================================================

class GCSyncPositionPacket::_Internal {
 public:
};

void GCSyncPositionPacket::clear_elements() {
  _impl_.elements_.Clear();
}
GCSyncPositionPacket::GCSyncPositionPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCSyncPositionPacket)
}
GCSyncPositionPacket::GCSyncPositionPacket(const GCSyncPositionPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCSyncPositionPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.elements_){from._impl_.elements_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:network.GCSyncPositionPacket)
}

inline void GCSyncPositionPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.elements_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCSyncPositionPacket::~GCSyncPositionPacket() {
  // @@protoc_insertion_point(destructor:network.GCSyncPositionPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCSyncPositionPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.elements_.~RepeatedPtrField();
}

void GCSyncPositionPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCSyncPositionPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCSyncPositionPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.elements_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCSyncPositionPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .network.SyncPositionElement elements = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_elements(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCSyncPositionPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCSyncPositionPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .network.SyncPositionElement elements = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_elements_size()); i < n; i++) {
    const auto& repfield = this->_internal_elements(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCSyncPositionPacket)
  return target;
}

size_t GCSyncPositionPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCSyncPositionPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .network.SyncPositionElement elements = 1;
  total_size += 1UL * this->_internal_elements_size();
  for (const auto& msg : this->_impl_.elements_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCSyncPositionPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCSyncPositionPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCSyncPositionPacket::GetClassData() const { return &_class_data_; }


void GCSyncPositionPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCSyncPositionPacket*>(&to_msg);
  auto& from = static_cast<const GCSyncPositionPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCSyncPositionPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.elements_.MergeFrom(from._impl_.elements_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCSyncPositionPacket::CopyFrom(const GCSyncPositionPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCSyncPositionPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCSyncPositionPacket::IsInitialized() const {
  return true;
}

void GCSyncPositionPacket::InternalSwap(GCSyncPositionPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.elements_.InternalSwap(&other->_impl_.elements_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GCSyncPositionPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[24]);
}

// ===================================================================

class GCFlyTargetingPacket::_Internal {
 public:
};

GCFlyTargetingPacket::GCFlyTargetingPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCFlyTargetingPacket)
}
GCFlyTargetingPacket::GCFlyTargetingPacket(const GCFlyTargetingPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCFlyTargetingPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.shooter_vid_){}
    , decltype(_impl_.target_vid_){}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.shooter_vid_, &from._impl_.shooter_vid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.y_) -
    reinterpret_cast<char*>(&_impl_.shooter_vid_)) + sizeof(_impl_.y_));
  // @@protoc_insertion_point(copy_constructor:network.GCFlyTargetingPacket)
}

inline void GCFlyTargetingPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.shooter_vid_){0u}
    , decltype(_impl_.target_vid_){0u}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCFlyTargetingPacket::~GCFlyTargetingPacket() {
  // @@protoc_insertion_point(destructor:network.GCFlyTargetingPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCFlyTargetingPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GCFlyTargetingPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCFlyTargetingPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCFlyTargetingPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.shooter_vid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.y_) -
      reinterpret_cast<char*>(&_impl_.shooter_vid_)) + sizeof(_impl_.y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCFlyTargetingPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 shooter_vid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.shooter_vid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 target_vid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.target_vid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 x = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 y = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCFlyTargetingPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCFlyTargetingPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 shooter_vid = 1;
  if (this->_internal_shooter_vid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_shooter_vid(), target);
  }

  // uint32 target_vid = 2;
  if (this->_internal_target_vid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_target_vid(), target);
  }

  // int32 x = 3;
  if (this->_internal_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_x(), target);
  }

  // int32 y = 4;
  if (this->_internal_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCFlyTargetingPacket)
  return target;
}

size_t GCFlyTargetingPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCFlyTargetingPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 shooter_vid = 1;
  if (this->_internal_shooter_vid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_shooter_vid());
  }

  // uint32 target_vid = 2;
  if (this->_internal_target_vid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_target_vid());
  }

  // int32 x = 3;
  if (this->_internal_x() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x());
  }

  // int32 y = 4;
  if (this->_internal_y() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCFlyTargetingPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCFlyTargetingPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCFlyTargetingPacket::GetClassData() const { return &_class_data_; }


void GCFlyTargetingPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCFlyTargetingPacket*>(&to_msg);
  auto& from = static_cast<const GCFlyTargetingPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCFlyTargetingPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_shooter_vid() != 0) {
    _this->_internal_set_shooter_vid(from._internal_shooter_vid());
  }
  if (from._internal_target_vid() != 0) {
    _this->_internal_set_target_vid(from._internal_target_vid());
  }
  if (from._internal_x() != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  if (from._internal_y() != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCFlyTargetingPacket::CopyFrom(const GCFlyTargetingPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCFlyTargetingPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCFlyTargetingPacket::IsInitialized() const {
  return true;
}

void GCFlyTargetingPacket::InternalSwap(GCFlyTargetingPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GCFlyTargetingPacket, _impl_.y_)
      + sizeof(GCFlyTargetingPacket::_impl_.y_)
      - PROTOBUF_FIELD_OFFSET(GCFlyTargetingPacket, _impl_.shooter_vid_)>(
          reinterpret_cast<char*>(&_impl_.shooter_vid_),
          reinterpret_cast<char*>(&other->_impl_.shooter_vid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GCFlyTargetingPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[25]);
}

// ===================================================================

class GCAddFlyTargetingPacket::_Internal {
 public:
};

GCAddFlyTargetingPacket::GCAddFlyTargetingPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCAddFlyTargetingPacket)
}
GCAddFlyTargetingPacket::GCAddFlyTargetingPacket(const GCAddFlyTargetingPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCAddFlyTargetingPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.shooter_vid_){}
    , decltype(_impl_.target_vid_){}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.shooter_vid_, &from._impl_.shooter_vid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.y_) -
    reinterpret_cast<char*>(&_impl_.shooter_vid_)) + sizeof(_impl_.y_));
  // @@protoc_insertion_point(copy_constructor:network.GCAddFlyTargetingPacket)
}

inline void GCAddFlyTargetingPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.shooter_vid_){0u}
    , decltype(_impl_.target_vid_){0u}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCAddFlyTargetingPacket::~GCAddFlyTargetingPacket() {
  // @@protoc_insertion_point(destructor:network.GCAddFlyTargetingPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCAddFlyTargetingPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GCAddFlyTargetingPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCAddFlyTargetingPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCAddFlyTargetingPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.shooter_vid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.y_) -
      reinterpret_cast<char*>(&_impl_.shooter_vid_)) + sizeof(_impl_.y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCAddFlyTargetingPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 shooter_vid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.shooter_vid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 target_vid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.target_vid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 x = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 y = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCAddFlyTargetingPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCAddFlyTargetingPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 shooter_vid = 1;
  if (this->_internal_shooter_vid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_shooter_vid(), target);
  }

  // uint32 target_vid = 2;
  if (this->_internal_target_vid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_target_vid(), target);
  }

  // int32 x = 3;
  if (this->_internal_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_x(), target);
  }

  // int32 y = 4;
  if (this->_internal_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCAddFlyTargetingPacket)
  return target;
}

size_t GCAddFlyTargetingPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCAddFlyTargetingPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 shooter_vid = 1;
  if (this->_internal_shooter_vid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_shooter_vid());
  }

  // uint32 target_vid = 2;
  if (this->_internal_target_vid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_target_vid());
  }

  // int32 x = 3;
  if (this->_internal_x() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x());
  }

  // int32 y = 4;
  if (this->_internal_y() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCAddFlyTargetingPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCAddFlyTargetingPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCAddFlyTargetingPacket::GetClassData() const { return &_class_data_; }


void GCAddFlyTargetingPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCAddFlyTargetingPacket*>(&to_msg);
  auto& from = static_cast<const GCAddFlyTargetingPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCAddFlyTargetingPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_shooter_vid() != 0) {
    _this->_internal_set_shooter_vid(from._internal_shooter_vid());
  }
  if (from._internal_target_vid() != 0) {
    _this->_internal_set_target_vid(from._internal_target_vid());
  }
  if (from._internal_x() != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  if (from._internal_y() != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCAddFlyTargetingPacket::CopyFrom(const GCAddFlyTargetingPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCAddFlyTargetingPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCAddFlyTargetingPacket::IsInitialized() const {
  return true;
}

void GCAddFlyTargetingPacket::InternalSwap(GCAddFlyTargetingPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GCAddFlyTargetingPacket, _impl_.y_)
      + sizeof(GCAddFlyTargetingPacket::_impl_.y_)
      - PROTOBUF_FIELD_OFFSET(GCAddFlyTargetingPacket, _impl_.shooter_vid_)>(
          reinterpret_cast<char*>(&_impl_.shooter_vid_),
          reinterpret_cast<char*>(&other->_impl_.shooter_vid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GCAddFlyTargetingPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[26]);
}

// ===================================================================

class GCTargetPacket::_Internal {
 public:
};

GCTargetPacket::GCTargetPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCTargetPacket)
}
GCTargetPacket::GCTargetPacket(const GCTargetPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCTargetPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.vid_){}
    , decltype(_impl_.cur_hp_){}
    , decltype(_impl_.max_hp_){}
    , decltype(_impl_.hppercent_){}
    , decltype(_impl_.element_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.vid_, &from._impl_.vid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.element_) -
    reinterpret_cast<char*>(&_impl_.vid_)) + sizeof(_impl_.element_));
  // @@protoc_insertion_point(copy_constructor:network.GCTargetPacket)
}

inline void GCTargetPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.vid_){0u}
    , decltype(_impl_.cur_hp_){0}
    , decltype(_impl_.max_hp_){0}
    , decltype(_impl_.hppercent_){0u}
    , decltype(_impl_.element_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCTargetPacket::~GCTargetPacket() {
  // @@protoc_insertion_point(destructor:network.GCTargetPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCTargetPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GCTargetPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCTargetPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCTargetPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.vid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.element_) -
      reinterpret_cast<char*>(&_impl_.vid_)) + sizeof(_impl_.element_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCTargetPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 vid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.vid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 cur_hp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.cur_hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 max_hp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.max_hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 hppercent = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.hppercent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 element = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.element_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCTargetPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCTargetPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 vid = 1;
  if (this->_internal_vid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_vid(), target);
  }

  // int32 cur_hp = 2;
  if (this->_internal_cur_hp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_cur_hp(), target);
  }

  // int32 max_hp = 3;
  if (this->_internal_max_hp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_max_hp(), target);
  }

  // uint32 hppercent = 4;
  if (this->_internal_hppercent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_hppercent(), target);
  }

  // uint32 element = 5;
  if (this->_internal_element() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_element(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCTargetPacket)
  return target;
}

size_t GCTargetPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCTargetPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 vid = 1;
  if (this->_internal_vid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_vid());
  }

  // int32 cur_hp = 2;
  if (this->_internal_cur_hp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_cur_hp());
  }

  // int32 max_hp = 3;
  if (this->_internal_max_hp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_max_hp());
  }

  // uint32 hppercent = 4;
  if (this->_internal_hppercent() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_hppercent());
  }

  // uint32 element = 5;
  if (this->_internal_element() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_element());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCTargetPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCTargetPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCTargetPacket::GetClassData() const { return &_class_data_; }


void GCTargetPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCTargetPacket*>(&to_msg);
  auto& from = static_cast<const GCTargetPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCTargetPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_vid() != 0) {
    _this->_internal_set_vid(from._internal_vid());
  }
  if (from._internal_cur_hp() != 0) {
    _this->_internal_set_cur_hp(from._internal_cur_hp());
  }
  if (from._internal_max_hp() != 0) {
    _this->_internal_set_max_hp(from._internal_max_hp());
  }
  if (from._internal_hppercent() != 0) {
    _this->_internal_set_hppercent(from._internal_hppercent());
  }
  if (from._internal_element() != 0) {
    _this->_internal_set_element(from._internal_element());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCTargetPacket::CopyFrom(const GCTargetPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCTargetPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCTargetPacket::IsInitialized() const {
  return true;
}

void GCTargetPacket::InternalSwap(GCTargetPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GCTargetPacket, _impl_.element_)
      + sizeof(GCTargetPacket::_impl_.element_)
      - PROTOBUF_FIELD_OFFSET(GCTargetPacket, _impl_.vid_)>(
          reinterpret_cast<char*>(&_impl_.vid_),
          reinterpret_cast<char*>(&other->_impl_.vid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GCTargetPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[27]);
}

// ===================================================================

class GCTargetMonsterInfoPacket::_Internal {
 public:
};

void GCTargetMonsterInfoPacket::clear_drops() {
  _impl_.drops_.Clear();
}
GCTargetMonsterInfoPacket::GCTargetMonsterInfoPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCTargetMonsterInfoPacket)
}
GCTargetMonsterInfoPacket::GCTargetMonsterInfoPacket(const GCTargetMonsterInfoPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCTargetMonsterInfoPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.drops_){from._impl_.drops_}
    , decltype(_impl_.race_num_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.race_num_ = from._impl_.race_num_;
  // @@protoc_insertion_point(copy_constructor:network.GCTargetMonsterInfoPacket)
}

inline void GCTargetMonsterInfoPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.drops_){arena}
    , decltype(_impl_.race_num_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCTargetMonsterInfoPacket::~GCTargetMonsterInfoPacket() {
  // @@protoc_insertion_point(destructor:network.GCTargetMonsterInfoPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCTargetMonsterInfoPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.drops_.~RepeatedPtrField();
}

void GCTargetMonsterInfoPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCTargetMonsterInfoPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCTargetMonsterInfoPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.drops_.Clear();
  _impl_.race_num_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCTargetMonsterInfoPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 race_num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.race_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .network.TTargetMonsterDropInfoTable drops = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_drops(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCTargetMonsterInfoPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCTargetMonsterInfoPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 race_num = 1;
  if (this->_internal_race_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_race_num(), target);
  }

  // repeated .network.TTargetMonsterDropInfoTable drops = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_drops_size()); i < n; i++) {
    const auto& repfield = this->_internal_drops(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCTargetMonsterInfoPacket)
  return target;
}

size_t GCTargetMonsterInfoPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCTargetMonsterInfoPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .network.TTargetMonsterDropInfoTable drops = 2;
  total_size += 1UL * this->_internal_drops_size();
  for (const auto& msg : this->_impl_.drops_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 race_num = 1;
  if (this->_internal_race_num() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_race_num());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCTargetMonsterInfoPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCTargetMonsterInfoPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCTargetMonsterInfoPacket::GetClassData() const { return &_class_data_; }


void GCTargetMonsterInfoPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCTargetMonsterInfoPacket*>(&to_msg);
  auto& from = static_cast<const GCTargetMonsterInfoPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCTargetMonsterInfoPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.drops_.MergeFrom(from._impl_.drops_);
  if (from._internal_race_num() != 0) {
    _this->_internal_set_race_num(from._internal_race_num());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCTargetMonsterInfoPacket::CopyFrom(const GCTargetMonsterInfoPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCTargetMonsterInfoPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCTargetMonsterInfoPacket::IsInitialized() const {
  return true;
}

void GCTargetMonsterInfoPacket::InternalSwap(GCTargetMonsterInfoPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.drops_.InternalSwap(&other->_impl_.drops_);
  swap(_impl_.race_num_, other->_impl_.race_num_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GCTargetMonsterInfoPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[28]);
}

// ===================================================================

class GCPlayerOnlineInformationPacket::_Internal {
 public:
};

GCPlayerOnlineInformationPacket::GCPlayerOnlineInformationPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCPlayerOnlineInformationPacket)
}
GCPlayerOnlineInformationPacket::GCPlayerOnlineInformationPacket(const GCPlayerOnlineInformationPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCPlayerOnlineInformationPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.player_name_){}
    , decltype(_impl_.language_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.player_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.player_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_player_name().empty()) {
    _this->_impl_.player_name_.Set(from._internal_player_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.language_id_ = from._impl_.language_id_;
  // @@protoc_insertion_point(copy_constructor:network.GCPlayerOnlineInformationPacket)
}

inline void GCPlayerOnlineInformationPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.player_name_){}
    , decltype(_impl_.language_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.player_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.player_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GCPlayerOnlineInformationPacket::~GCPlayerOnlineInformationPacket() {
  // @@protoc_insertion_point(destructor:network.GCPlayerOnlineInformationPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCPlayerOnlineInformationPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.player_name_.Destroy();
}

void GCPlayerOnlineInformationPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCPlayerOnlineInformationPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCPlayerOnlineInformationPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.player_name_.ClearToEmpty();
  _impl_.language_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCPlayerOnlineInformationPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes player_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_player_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 language_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.language_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCPlayerOnlineInformationPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCPlayerOnlineInformationPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes player_name = 1;
  if (!this->_internal_player_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_player_name(), target);
  }

  // int32 language_id = 2;
  if (this->_internal_language_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_language_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCPlayerOnlineInformationPacket)
  return target;
}

size_t GCPlayerOnlineInformationPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCPlayerOnlineInformationPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes player_name = 1;
  if (!this->_internal_player_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_player_name());
  }

  // int32 language_id = 2;
  if (this->_internal_language_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_language_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCPlayerOnlineInformationPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCPlayerOnlineInformationPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCPlayerOnlineInformationPacket::GetClassData() const { return &_class_data_; }


void GCPlayerOnlineInformationPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCPlayerOnlineInformationPacket*>(&to_msg);
  auto& from = static_cast<const GCPlayerOnlineInformationPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCPlayerOnlineInformationPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_player_name().empty()) {
    _this->_internal_set_player_name(from._internal_player_name());
  }
  if (from._internal_language_id() != 0) {
    _this->_internal_set_language_id(from._internal_language_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCPlayerOnlineInformationPacket::CopyFrom(const GCPlayerOnlineInformationPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCPlayerOnlineInformationPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCPlayerOnlineInformationPacket::IsInitialized() const {
  return true;
}

void GCPlayerOnlineInformationPacket::InternalSwap(GCPlayerOnlineInformationPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.player_name_, lhs_arena,
      &other->_impl_.player_name_, rhs_arena
  );
  swap(_impl_.language_id_, other->_impl_.language_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GCPlayerOnlineInformationPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[29]);
}

// ===================================================================

class GCUpdateCharacterScalePacket::_Internal {
 public:
};

GCUpdateCharacterScalePacket::GCUpdateCharacterScalePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCUpdateCharacterScalePacket)
}
GCUpdateCharacterScalePacket::GCUpdateCharacterScalePacket(const GCUpdateCharacterScalePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCUpdateCharacterScalePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.vid_){}
    , decltype(_impl_.scale_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.vid_, &from._impl_.vid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.scale_) -
    reinterpret_cast<char*>(&_impl_.vid_)) + sizeof(_impl_.scale_));
  // @@protoc_insertion_point(copy_constructor:network.GCUpdateCharacterScalePacket)
}

inline void GCUpdateCharacterScalePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.vid_){0u}
    , decltype(_impl_.scale_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCUpdateCharacterScalePacket::~GCUpdateCharacterScalePacket() {
  // @@protoc_insertion_point(destructor:network.GCUpdateCharacterScalePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCUpdateCharacterScalePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GCUpdateCharacterScalePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCUpdateCharacterScalePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCUpdateCharacterScalePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.vid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.scale_) -
      reinterpret_cast<char*>(&_impl_.vid_)) + sizeof(_impl_.scale_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCUpdateCharacterScalePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 vid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.vid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float scale = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCUpdateCharacterScalePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCUpdateCharacterScalePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 vid = 1;
  if (this->_internal_vid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_vid(), target);
  }

  // float scale = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_scale = this->_internal_scale();
  uint32_t raw_scale;
  memcpy(&raw_scale, &tmp_scale, sizeof(tmp_scale));
  if (raw_scale != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_scale(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCUpdateCharacterScalePacket)
  return target;
}

size_t GCUpdateCharacterScalePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCUpdateCharacterScalePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 vid = 1;
  if (this->_internal_vid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_vid());
  }

  // float scale = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_scale = this->_internal_scale();
  uint32_t raw_scale;
  memcpy(&raw_scale, &tmp_scale, sizeof(tmp_scale));
  if (raw_scale != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCUpdateCharacterScalePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCUpdateCharacterScalePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCUpdateCharacterScalePacket::GetClassData() const { return &_class_data_; }


void GCUpdateCharacterScalePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCUpdateCharacterScalePacket*>(&to_msg);
  auto& from = static_cast<const GCUpdateCharacterScalePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCUpdateCharacterScalePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_vid() != 0) {
    _this->_internal_set_vid(from._internal_vid());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_scale = from._internal_scale();
  uint32_t raw_scale;
  memcpy(&raw_scale, &tmp_scale, sizeof(tmp_scale));
  if (raw_scale != 0) {
    _this->_internal_set_scale(from._internal_scale());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCUpdateCharacterScalePacket::CopyFrom(const GCUpdateCharacterScalePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCUpdateCharacterScalePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCUpdateCharacterScalePacket::IsInitialized() const {
  return true;
}

void GCUpdateCharacterScalePacket::InternalSwap(GCUpdateCharacterScalePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GCUpdateCharacterScalePacket, _impl_.scale_)
      + sizeof(GCUpdateCharacterScalePacket::_impl_.scale_)
      - PROTOBUF_FIELD_OFFSET(GCUpdateCharacterScalePacket, _impl_.vid_)>(
          reinterpret_cast<char*>(&_impl_.vid_),
          reinterpret_cast<char*>(&other->_impl_.vid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GCUpdateCharacterScalePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[30]);
}

// ===================================================================

class GCMaintenanceInfoPacket::_Internal {
 public:
};

GCMaintenanceInfoPacket::GCMaintenanceInfoPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCMaintenanceInfoPacket)
}
GCMaintenanceInfoPacket::GCMaintenanceInfoPacket(const GCMaintenanceInfoPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCMaintenanceInfoPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.cause_){}
    , decltype(_impl_.remaining_time_){}
    , decltype(_impl_.duration_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.cause_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cause_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cause().empty()) {
    _this->_impl_.cause_.Set(from._internal_cause(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.remaining_time_, &from._impl_.remaining_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.duration_) -
    reinterpret_cast<char*>(&_impl_.remaining_time_)) + sizeof(_impl_.duration_));
  // @@protoc_insertion_point(copy_constructor:network.GCMaintenanceInfoPacket)
}

inline void GCMaintenanceInfoPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.cause_){}
    , decltype(_impl_.remaining_time_){0u}
    , decltype(_impl_.duration_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.cause_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cause_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GCMaintenanceInfoPacket::~GCMaintenanceInfoPacket() {
  // @@protoc_insertion_point(destructor:network.GCMaintenanceInfoPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCMaintenanceInfoPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.cause_.Destroy();
}

void GCMaintenanceInfoPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCMaintenanceInfoPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCMaintenanceInfoPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cause_.ClearToEmpty();
  ::memset(&_impl_.remaining_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.duration_) -
      reinterpret_cast<char*>(&_impl_.remaining_time_)) + sizeof(_impl_.duration_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCMaintenanceInfoPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 remaining_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.remaining_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 duration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes cause = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_cause();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCMaintenanceInfoPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCMaintenanceInfoPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 remaining_time = 1;
  if (this->_internal_remaining_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_remaining_time(), target);
  }

  // uint32 duration = 2;
  if (this->_internal_duration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_duration(), target);
  }

  // bytes cause = 3;
  if (!this->_internal_cause().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_cause(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCMaintenanceInfoPacket)
  return target;
}

size_t GCMaintenanceInfoPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCMaintenanceInfoPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes cause = 3;
  if (!this->_internal_cause().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_cause());
  }

  // uint32 remaining_time = 1;
  if (this->_internal_remaining_time() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_remaining_time());
  }

  // uint32 duration = 2;
  if (this->_internal_duration() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_duration());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCMaintenanceInfoPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCMaintenanceInfoPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCMaintenanceInfoPacket::GetClassData() const { return &_class_data_; }


void GCMaintenanceInfoPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCMaintenanceInfoPacket*>(&to_msg);
  auto& from = static_cast<const GCMaintenanceInfoPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCMaintenanceInfoPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_cause().empty()) {
    _this->_internal_set_cause(from._internal_cause());
  }
  if (from._internal_remaining_time() != 0) {
    _this->_internal_set_remaining_time(from._internal_remaining_time());
  }
  if (from._internal_duration() != 0) {
    _this->_internal_set_duration(from._internal_duration());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCMaintenanceInfoPacket::CopyFrom(const GCMaintenanceInfoPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCMaintenanceInfoPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCMaintenanceInfoPacket::IsInitialized() const {
  return true;
}

void GCMaintenanceInfoPacket::InternalSwap(GCMaintenanceInfoPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.cause_, lhs_arena,
      &other->_impl_.cause_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GCMaintenanceInfoPacket, _impl_.duration_)
      + sizeof(GCMaintenanceInfoPacket::_impl_.duration_)
      - PROTOBUF_FIELD_OFFSET(GCMaintenanceInfoPacket, _impl_.remaining_time_)>(
          reinterpret_cast<char*>(&_impl_.remaining_time_),
          reinterpret_cast<char*>(&other->_impl_.remaining_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GCMaintenanceInfoPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[31]);
}

// ===================================================================

class GCObserverAddPacket::_Internal {
 public:
};

GCObserverAddPacket::GCObserverAddPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCObserverAddPacket)
}
GCObserverAddPacket::GCObserverAddPacket(const GCObserverAddPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCObserverAddPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.vid_){}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.vid_, &from._impl_.vid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.y_) -
    reinterpret_cast<char*>(&_impl_.vid_)) + sizeof(_impl_.y_));
  // @@protoc_insertion_point(copy_constructor:network.GCObserverAddPacket)
}

inline void GCObserverAddPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.vid_){0u}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCObserverAddPacket::~GCObserverAddPacket() {
  // @@protoc_insertion_point(destructor:network.GCObserverAddPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCObserverAddPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GCObserverAddPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCObserverAddPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCObserverAddPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.vid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.y_) -
      reinterpret_cast<char*>(&_impl_.vid_)) + sizeof(_impl_.y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCObserverAddPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 vid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.vid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCObserverAddPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCObserverAddPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 vid = 1;
  if (this->_internal_vid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_vid(), target);
  }

  // int32 x = 2;
  if (this->_internal_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_x(), target);
  }

  // int32 y = 3;
  if (this->_internal_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCObserverAddPacket)
  return target;
}

size_t GCObserverAddPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCObserverAddPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 vid = 1;
  if (this->_internal_vid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_vid());
  }

  // int32 x = 2;
  if (this->_internal_x() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x());
  }

  // int32 y = 3;
  if (this->_internal_y() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCObserverAddPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCObserverAddPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCObserverAddPacket::GetClassData() const { return &_class_data_; }


void GCObserverAddPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCObserverAddPacket*>(&to_msg);
  auto& from = static_cast<const GCObserverAddPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCObserverAddPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_vid() != 0) {
    _this->_internal_set_vid(from._internal_vid());
  }
  if (from._internal_x() != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  if (from._internal_y() != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCObserverAddPacket::CopyFrom(const GCObserverAddPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCObserverAddPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCObserverAddPacket::IsInitialized() const {
  return true;
}

void GCObserverAddPacket::InternalSwap(GCObserverAddPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GCObserverAddPacket, _impl_.y_)
      + sizeof(GCObserverAddPacket::_impl_.y_)
      - PROTOBUF_FIELD_OFFSET(GCObserverAddPacket, _impl_.vid_)>(
          reinterpret_cast<char*>(&_impl_.vid_),
          reinterpret_cast<char*>(&other->_impl_.vid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GCObserverAddPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[32]);
}

// ===================================================================

class GCObserverRemovePacket::_Internal {
 public:
};

GCObserverRemovePacket::GCObserverRemovePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCObserverRemovePacket)
}
GCObserverRemovePacket::GCObserverRemovePacket(const GCObserverRemovePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCObserverRemovePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.vid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.vid_ = from._impl_.vid_;
  // @@protoc_insertion_point(copy_constructor:network.GCObserverRemovePacket)
}

inline void GCObserverRemovePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.vid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCObserverRemovePacket::~GCObserverRemovePacket() {
  // @@protoc_insertion_point(destructor:network.GCObserverRemovePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCObserverRemovePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GCObserverRemovePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCObserverRemovePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCObserverRemovePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.vid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCObserverRemovePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 vid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.vid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCObserverRemovePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCObserverRemovePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 vid = 1;
  if (this->_internal_vid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_vid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCObserverRemovePacket)
  return target;
}

size_t GCObserverRemovePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCObserverRemovePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 vid = 1;
  if (this->_internal_vid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_vid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCObserverRemovePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCObserverRemovePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCObserverRemovePacket::GetClassData() const { return &_class_data_; }


void GCObserverRemovePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCObserverRemovePacket*>(&to_msg);
  auto& from = static_cast<const GCObserverRemovePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCObserverRemovePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_vid() != 0) {
    _this->_internal_set_vid(from._internal_vid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCObserverRemovePacket::CopyFrom(const GCObserverRemovePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCObserverRemovePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCObserverRemovePacket::IsInitialized() const {
  return true;
}

void GCObserverRemovePacket::InternalSwap(GCObserverRemovePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.vid_, other->_impl_.vid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GCObserverRemovePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[33]);
}

// ===================================================================

class GCObserverMovePacket::_Internal {
 public:
};

GCObserverMovePacket::GCObserverMovePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCObserverMovePacket)
}
GCObserverMovePacket::GCObserverMovePacket(const GCObserverMovePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCObserverMovePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.vid_){}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.vid_, &from._impl_.vid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.y_) -
    reinterpret_cast<char*>(&_impl_.vid_)) + sizeof(_impl_.y_));
  // @@protoc_insertion_point(copy_constructor:network.GCObserverMovePacket)
}

inline void GCObserverMovePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.vid_){0u}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCObserverMovePacket::~GCObserverMovePacket() {
  // @@protoc_insertion_point(destructor:network.GCObserverMovePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCObserverMovePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GCObserverMovePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCObserverMovePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCObserverMovePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.vid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.y_) -
      reinterpret_cast<char*>(&_impl_.vid_)) + sizeof(_impl_.y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCObserverMovePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 vid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.vid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCObserverMovePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCObserverMovePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 vid = 1;
  if (this->_internal_vid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_vid(), target);
  }

  // int32 x = 2;
  if (this->_internal_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_x(), target);
  }

  // int32 y = 3;
  if (this->_internal_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCObserverMovePacket)
  return target;
}

size_t GCObserverMovePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCObserverMovePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 vid = 1;
  if (this->_internal_vid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_vid());
  }

  // int32 x = 2;
  if (this->_internal_x() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x());
  }

  // int32 y = 3;
  if (this->_internal_y() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCObserverMovePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCObserverMovePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCObserverMovePacket::GetClassData() const { return &_class_data_; }


void GCObserverMovePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCObserverMovePacket*>(&to_msg);
  auto& from = static_cast<const GCObserverMovePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCObserverMovePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_vid() != 0) {
    _this->_internal_set_vid(from._internal_vid());
  }
  if (from._internal_x() != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  if (from._internal_y() != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCObserverMovePacket::CopyFrom(const GCObserverMovePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCObserverMovePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCObserverMovePacket::IsInitialized() const {
  return true;
}

void GCObserverMovePacket::InternalSwap(GCObserverMovePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GCObserverMovePacket, _impl_.y_)
      + sizeof(GCObserverMovePacket::_impl_.y_)
      - PROTOBUF_FIELD_OFFSET(GCObserverMovePacket, _impl_.vid_)>(
          reinterpret_cast<char*>(&_impl_.vid_),
          reinterpret_cast<char*>(&other->_impl_.vid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GCObserverMovePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[34]);
}

// ===================================================================

class GCSafeboxSizePacket::_Internal {
 public:
};

GCSafeboxSizePacket::GCSafeboxSizePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCSafeboxSizePacket)
}
GCSafeboxSizePacket::GCSafeboxSizePacket(const GCSafeboxSizePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCSafeboxSizePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.size_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.size_ = from._impl_.size_;
  // @@protoc_insertion_point(copy_constructor:network.GCSafeboxSizePacket)
}

inline void GCSafeboxSizePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.size_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCSafeboxSizePacket::~GCSafeboxSizePacket() {
  // @@protoc_insertion_point(destructor:network.GCSafeboxSizePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCSafeboxSizePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GCSafeboxSizePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCSafeboxSizePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCSafeboxSizePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.size_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCSafeboxSizePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCSafeboxSizePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCSafeboxSizePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 size = 1;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCSafeboxSizePacket)
  return target;
}

size_t GCSafeboxSizePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCSafeboxSizePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 size = 1;
  if (this->_internal_size() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCSafeboxSizePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCSafeboxSizePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCSafeboxSizePacket::GetClassData() const { return &_class_data_; }


void GCSafeboxSizePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCSafeboxSizePacket*>(&to_msg);
  auto& from = static_cast<const GCSafeboxSizePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCSafeboxSizePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_size() != 0) {
    _this->_internal_set_size(from._internal_size());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCSafeboxSizePacket::CopyFrom(const GCSafeboxSizePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCSafeboxSizePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCSafeboxSizePacket::IsInitialized() const {
  return true;
}

void GCSafeboxSizePacket::InternalSwap(GCSafeboxSizePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.size_, other->_impl_.size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GCSafeboxSizePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[35]);
}

// ===================================================================

class GCSafeboxMoneyChangePacket::_Internal {
 public:
};

GCSafeboxMoneyChangePacket::GCSafeboxMoneyChangePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCSafeboxMoneyChangePacket)
}
GCSafeboxMoneyChangePacket::GCSafeboxMoneyChangePacket(const GCSafeboxMoneyChangePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCSafeboxMoneyChangePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.money_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.money_ = from._impl_.money_;
  // @@protoc_insertion_point(copy_constructor:network.GCSafeboxMoneyChangePacket)
}

inline void GCSafeboxMoneyChangePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.money_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCSafeboxMoneyChangePacket::~GCSafeboxMoneyChangePacket() {
  // @@protoc_insertion_point(destructor:network.GCSafeboxMoneyChangePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCSafeboxMoneyChangePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GCSafeboxMoneyChangePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCSafeboxMoneyChangePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCSafeboxMoneyChangePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.money_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCSafeboxMoneyChangePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 money = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.money_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCSafeboxMoneyChangePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCSafeboxMoneyChangePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 money = 1;
  if (this->_internal_money() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_money(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCSafeboxMoneyChangePacket)
  return target;
}

size_t GCSafeboxMoneyChangePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCSafeboxMoneyChangePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 money = 1;
  if (this->_internal_money() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_money());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCSafeboxMoneyChangePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCSafeboxMoneyChangePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCSafeboxMoneyChangePacket::GetClassData() const { return &_class_data_; }


void GCSafeboxMoneyChangePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCSafeboxMoneyChangePacket*>(&to_msg);
  auto& from = static_cast<const GCSafeboxMoneyChangePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCSafeboxMoneyChangePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_money() != 0) {
    _this->_internal_set_money(from._internal_money());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCSafeboxMoneyChangePacket::CopyFrom(const GCSafeboxMoneyChangePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCSafeboxMoneyChangePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCSafeboxMoneyChangePacket::IsInitialized() const {
  return true;
}

void GCSafeboxMoneyChangePacket::InternalSwap(GCSafeboxMoneyChangePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.money_, other->_impl_.money_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GCSafeboxMoneyChangePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[36]);
}

// ===================================================================

class GCWarpPacket::_Internal {
 public:
};

GCWarpPacket::GCWarpPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCWarpPacket)
}
GCWarpPacket::GCWarpPacket(const GCWarpPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCWarpPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.addr_){}
    , decltype(_impl_.port_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.port_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.port_));
  // @@protoc_insertion_point(copy_constructor:network.GCWarpPacket)
}

inline void GCWarpPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.addr_){0}
    , decltype(_impl_.port_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCWarpPacket::~GCWarpPacket() {
  // @@protoc_insertion_point(destructor:network.GCWarpPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCWarpPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GCWarpPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCWarpPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCWarpPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.port_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.port_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCWarpPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 addr = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.addr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 port = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCWarpPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCWarpPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->_internal_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_x(), target);
  }

  // int32 y = 2;
  if (this->_internal_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_y(), target);
  }

  // int32 addr = 3;
  if (this->_internal_addr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_addr(), target);
  }

  // uint32 port = 4;
  if (this->_internal_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCWarpPacket)
  return target;
}

size_t GCWarpPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCWarpPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->_internal_x() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x());
  }

  // int32 y = 2;
  if (this->_internal_y() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y());
  }

  // int32 addr = 3;
  if (this->_internal_addr() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_addr());
  }

  // uint32 port = 4;
  if (this->_internal_port() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_port());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCWarpPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCWarpPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCWarpPacket::GetClassData() const { return &_class_data_; }


void GCWarpPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCWarpPacket*>(&to_msg);
  auto& from = static_cast<const GCWarpPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCWarpPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_x() != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  if (from._internal_y() != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  if (from._internal_addr() != 0) {
    _this->_internal_set_addr(from._internal_addr());
  }
  if (from._internal_port() != 0) {
    _this->_internal_set_port(from._internal_port());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCWarpPacket::CopyFrom(const GCWarpPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCWarpPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCWarpPacket::IsInitialized() const {
  return true;
}

void GCWarpPacket::InternalSwap(GCWarpPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GCWarpPacket, _impl_.port_)
      + sizeof(GCWarpPacket::_impl_.port_)
      - PROTOBUF_FIELD_OFFSET(GCWarpPacket, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GCWarpPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[37]);
}

// ===================================================================

class GCPVPPacket::_Internal {
 public:
};

GCPVPPacket::GCPVPPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCPVPPacket)
}
GCPVPPacket::GCPVPPacket(const GCPVPPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCPVPPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.vid_src_){}
    , decltype(_impl_.vid_dst_){}
    , decltype(_impl_.mode_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.vid_src_, &from._impl_.vid_src_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.mode_) -
    reinterpret_cast<char*>(&_impl_.vid_src_)) + sizeof(_impl_.mode_));
  // @@protoc_insertion_point(copy_constructor:network.GCPVPPacket)
}

inline void GCPVPPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.vid_src_){0u}
    , decltype(_impl_.vid_dst_){0u}
    , decltype(_impl_.mode_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCPVPPacket::~GCPVPPacket() {
  // @@protoc_insertion_point(destructor:network.GCPVPPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCPVPPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GCPVPPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCPVPPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCPVPPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.vid_src_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.mode_) -
      reinterpret_cast<char*>(&_impl_.vid_src_)) + sizeof(_impl_.mode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCPVPPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 vid_src = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.vid_src_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 vid_dst = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.vid_dst_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 mode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCPVPPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCPVPPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 vid_src = 1;
  if (this->_internal_vid_src() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_vid_src(), target);
  }

  // uint32 vid_dst = 2;
  if (this->_internal_vid_dst() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_vid_dst(), target);
  }

  // uint32 mode = 3;
  if (this->_internal_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCPVPPacket)
  return target;
}

size_t GCPVPPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCPVPPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 vid_src = 1;
  if (this->_internal_vid_src() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_vid_src());
  }

  // uint32 vid_dst = 2;
  if (this->_internal_vid_dst() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_vid_dst());
  }

  // uint32 mode = 3;
  if (this->_internal_mode() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_mode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCPVPPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCPVPPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCPVPPacket::GetClassData() const { return &_class_data_; }


void GCPVPPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCPVPPacket*>(&to_msg);
  auto& from = static_cast<const GCPVPPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCPVPPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_vid_src() != 0) {
    _this->_internal_set_vid_src(from._internal_vid_src());
  }
  if (from._internal_vid_dst() != 0) {
    _this->_internal_set_vid_dst(from._internal_vid_dst());
  }
  if (from._internal_mode() != 0) {
    _this->_internal_set_mode(from._internal_mode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCPVPPacket::CopyFrom(const GCPVPPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCPVPPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCPVPPacket::IsInitialized() const {
  return true;
}

void GCPVPPacket::InternalSwap(GCPVPPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GCPVPPacket, _impl_.mode_)
      + sizeof(GCPVPPacket::_impl_.mode_)
      - PROTOBUF_FIELD_OFFSET(GCPVPPacket, _impl_.vid_src_)>(
          reinterpret_cast<char*>(&_impl_.vid_src_),
          reinterpret_cast<char*>(&other->_impl_.vid_src_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GCPVPPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[38]);
}

// ===================================================================

class GCDuelStartPacket::_Internal {
 public:
};

GCDuelStartPacket::GCDuelStartPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCDuelStartPacket)
}
GCDuelStartPacket::GCDuelStartPacket(const GCDuelStartPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCDuelStartPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.vids_){from._impl_.vids_}
    , /*decltype(_impl_._vids_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:network.GCDuelStartPacket)
}

inline void GCDuelStartPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.vids_){arena}
    , /*decltype(_impl_._vids_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCDuelStartPacket::~GCDuelStartPacket() {
  // @@protoc_insertion_point(destructor:network.GCDuelStartPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCDuelStartPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.vids_.~RepeatedField();
}

void GCDuelStartPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCDuelStartPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCDuelStartPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.vids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCDuelStartPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 vids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_vids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_vids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCDuelStartPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCDuelStartPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 vids = 1;
  {
    int byte_size = _impl_._vids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_vids(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCDuelStartPacket)
  return target;
}

size_t GCDuelStartPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCDuelStartPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 vids = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.vids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._vids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCDuelStartPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCDuelStartPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCDuelStartPacket::GetClassData() const { return &_class_data_; }


void GCDuelStartPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCDuelStartPacket*>(&to_msg);
  auto& from = static_cast<const GCDuelStartPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCDuelStartPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.vids_.MergeFrom(from._impl_.vids_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCDuelStartPacket::CopyFrom(const GCDuelStartPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCDuelStartPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCDuelStartPacket::IsInitialized() const {
  return true;
}

void GCDuelStartPacket::InternalSwap(GCDuelStartPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.vids_.InternalSwap(&other->_impl_.vids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GCDuelStartPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[39]);
}

// ===================================================================

class GCOwnershipPacket::_Internal {
 public:
};

GCOwnershipPacket::GCOwnershipPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCOwnershipPacket)
}
GCOwnershipPacket::GCOwnershipPacket(const GCOwnershipPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCOwnershipPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.owner_vid_){}
    , decltype(_impl_.victim_vid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.owner_vid_, &from._impl_.owner_vid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.victim_vid_) -
    reinterpret_cast<char*>(&_impl_.owner_vid_)) + sizeof(_impl_.victim_vid_));
  // @@protoc_insertion_point(copy_constructor:network.GCOwnershipPacket)
}

inline void GCOwnershipPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.owner_vid_){0u}
    , decltype(_impl_.victim_vid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCOwnershipPacket::~GCOwnershipPacket() {
  // @@protoc_insertion_point(destructor:network.GCOwnershipPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCOwnershipPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GCOwnershipPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCOwnershipPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCOwnershipPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.owner_vid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.victim_vid_) -
      reinterpret_cast<char*>(&_impl_.owner_vid_)) + sizeof(_impl_.victim_vid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCOwnershipPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 owner_vid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.owner_vid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 victim_vid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.victim_vid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCOwnershipPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCOwnershipPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 owner_vid = 1;
  if (this->_internal_owner_vid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_owner_vid(), target);
  }

  // uint32 victim_vid = 2;
  if (this->_internal_victim_vid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_victim_vid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCOwnershipPacket)
  return target;
}

size_t GCOwnershipPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCOwnershipPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 owner_vid = 1;
  if (this->_internal_owner_vid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_owner_vid());
  }

  // uint32 victim_vid = 2;
  if (this->_internal_victim_vid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_victim_vid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCOwnershipPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCOwnershipPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCOwnershipPacket::GetClassData() const { return &_class_data_; }


void GCOwnershipPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCOwnershipPacket*>(&to_msg);
  auto& from = static_cast<const GCOwnershipPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCOwnershipPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_owner_vid() != 0) {
    _this->_internal_set_owner_vid(from._internal_owner_vid());
  }
  if (from._internal_victim_vid() != 0) {
    _this->_internal_set_victim_vid(from._internal_victim_vid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCOwnershipPacket::CopyFrom(const GCOwnershipPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCOwnershipPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCOwnershipPacket::IsInitialized() const {
  return true;
}

void GCOwnershipPacket::InternalSwap(GCOwnershipPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GCOwnershipPacket, _impl_.victim_vid_)
      + sizeof(GCOwnershipPacket::_impl_.victim_vid_)
      - PROTOBUF_FIELD_OFFSET(GCOwnershipPacket, _impl_.owner_vid_)>(
          reinterpret_cast<char*>(&_impl_.owner_vid_),
          reinterpret_cast<char*>(&other->_impl_.owner_vid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GCOwnershipPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[40]);
}

// ===================================================================

class GCPositionPacket::_Internal {
 public:
};

GCPositionPacket::GCPositionPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCPositionPacket)
}
GCPositionPacket::GCPositionPacket(const GCPositionPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCPositionPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.vid_){}
    , decltype(_impl_.position_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.vid_, &from._impl_.vid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.position_) -
    reinterpret_cast<char*>(&_impl_.vid_)) + sizeof(_impl_.position_));
  // @@protoc_insertion_point(copy_constructor:network.GCPositionPacket)
}

inline void GCPositionPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.vid_){0u}
    , decltype(_impl_.position_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCPositionPacket::~GCPositionPacket() {
  // @@protoc_insertion_point(destructor:network.GCPositionPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCPositionPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GCPositionPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCPositionPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCPositionPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.vid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.position_) -
      reinterpret_cast<char*>(&_impl_.vid_)) + sizeof(_impl_.position_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCPositionPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 vid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.vid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCPositionPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCPositionPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 vid = 1;
  if (this->_internal_vid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_vid(), target);
  }

  // uint32 position = 2;
  if (this->_internal_position() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_position(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCPositionPacket)
  return target;
}

size_t GCPositionPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCPositionPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 vid = 1;
  if (this->_internal_vid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_vid());
  }

  // uint32 position = 2;
  if (this->_internal_position() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_position());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCPositionPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCPositionPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCPositionPacket::GetClassData() const { return &_class_data_; }


void GCPositionPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCPositionPacket*>(&to_msg);
  auto& from = static_cast<const GCPositionPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCPositionPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_vid() != 0) {
    _this->_internal_set_vid(from._internal_vid());
  }
  if (from._internal_position() != 0) {
    _this->_internal_set_position(from._internal_position());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCPositionPacket::CopyFrom(const GCPositionPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCPositionPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCPositionPacket::IsInitialized() const {
  return true;
}

void GCPositionPacket::InternalSwap(GCPositionPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GCPositionPacket, _impl_.position_)
      + sizeof(GCPositionPacket::_impl_.position_)
      - PROTOBUF_FIELD_OFFSET(GCPositionPacket, _impl_.vid_)>(
          reinterpret_cast<char*>(&_impl_.vid_),
          reinterpret_cast<char*>(&other->_impl_.vid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GCPositionPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[41]);
}

// ===================================================================

class GCStunPacket::_Internal {
 public:
};

GCStunPacket::GCStunPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCStunPacket)
}
GCStunPacket::GCStunPacket(const GCStunPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCStunPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.vid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.vid_ = from._impl_.vid_;
  // @@protoc_insertion_point(copy_constructor:network.GCStunPacket)
}

inline void GCStunPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.vid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCStunPacket::~GCStunPacket() {
  // @@protoc_insertion_point(destructor:network.GCStunPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCStunPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GCStunPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCStunPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCStunPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.vid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCStunPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 vid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.vid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCStunPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCStunPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 vid = 1;
  if (this->_internal_vid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_vid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCStunPacket)
  return target;
}

size_t GCStunPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCStunPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 vid = 1;
  if (this->_internal_vid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_vid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCStunPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCStunPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCStunPacket::GetClassData() const { return &_class_data_; }


void GCStunPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCStunPacket*>(&to_msg);
  auto& from = static_cast<const GCStunPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCStunPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_vid() != 0) {
    _this->_internal_set_vid(from._internal_vid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCStunPacket::CopyFrom(const GCStunPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCStunPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCStunPacket::IsInitialized() const {
  return true;
}

void GCStunPacket::InternalSwap(GCStunPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.vid_, other->_impl_.vid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GCStunPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[42]);
}

// ===================================================================

class GCDeadPacket::_Internal {
 public:
};

GCDeadPacket::GCDeadPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCDeadPacket)
}
GCDeadPacket::GCDeadPacket(const GCDeadPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCDeadPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.vid_){}
    , decltype(_impl_.killer_is_pc_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.vid_, &from._impl_.vid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.killer_is_pc_) -
    reinterpret_cast<char*>(&_impl_.vid_)) + sizeof(_impl_.killer_is_pc_));
  // @@protoc_insertion_point(copy_constructor:network.GCDeadPacket)
}

inline void GCDeadPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.vid_){0u}
    , decltype(_impl_.killer_is_pc_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCDeadPacket::~GCDeadPacket() {
  // @@protoc_insertion_point(destructor:network.GCDeadPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCDeadPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GCDeadPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCDeadPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCDeadPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.vid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.killer_is_pc_) -
      reinterpret_cast<char*>(&_impl_.vid_)) + sizeof(_impl_.killer_is_pc_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCDeadPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 vid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.vid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool killer_is_pc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.killer_is_pc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCDeadPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCDeadPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 vid = 1;
  if (this->_internal_vid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_vid(), target);
  }

  // bool killer_is_pc = 2;
  if (this->_internal_killer_is_pc() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_killer_is_pc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCDeadPacket)
  return target;
}

size_t GCDeadPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCDeadPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 vid = 1;
  if (this->_internal_vid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_vid());
  }

  // bool killer_is_pc = 2;
  if (this->_internal_killer_is_pc() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCDeadPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCDeadPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCDeadPacket::GetClassData() const { return &_class_data_; }


void GCDeadPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCDeadPacket*>(&to_msg);
  auto& from = static_cast<const GCDeadPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCDeadPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_vid() != 0) {
    _this->_internal_set_vid(from._internal_vid());
  }
  if (from._internal_killer_is_pc() != 0) {
    _this->_internal_set_killer_is_pc(from._internal_killer_is_pc());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCDeadPacket::CopyFrom(const GCDeadPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCDeadPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCDeadPacket::IsInitialized() const {
  return true;
}

void GCDeadPacket::InternalSwap(GCDeadPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GCDeadPacket, _impl_.killer_is_pc_)
      + sizeof(GCDeadPacket::_impl_.killer_is_pc_)
      - PROTOBUF_FIELD_OFFSET(GCDeadPacket, _impl_.vid_)>(
          reinterpret_cast<char*>(&_impl_.vid_),
          reinterpret_cast<char*>(&other->_impl_.vid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GCDeadPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[43]);
}

// ===================================================================

class GCPointsPacket::_Internal {
 public:
};

GCPointsPacket::GCPointsPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCPointsPacket)
}
GCPointsPacket::GCPointsPacket(const GCPointsPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCPointsPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.points_){from._impl_.points_}
    , /*decltype(_impl_._points_cached_byte_size_)*/{0}
    , decltype(_impl_.real_points_){from._impl_.real_points_}
    , /*decltype(_impl_._real_points_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:network.GCPointsPacket)
}

inline void GCPointsPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.points_){arena}
    , /*decltype(_impl_._points_cached_byte_size_)*/{0}
    , decltype(_impl_.real_points_){arena}
    , /*decltype(_impl_._real_points_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCPointsPacket::~GCPointsPacket() {
  // @@protoc_insertion_point(destructor:network.GCPointsPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCPointsPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.points_.~RepeatedField();
  _impl_.real_points_.~RepeatedField();
}

void GCPointsPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCPointsPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCPointsPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.points_.Clear();
  _impl_.real_points_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCPointsPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int64 points = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_points(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_points(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 real_points = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_real_points(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_real_points(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCPointsPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCPointsPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 points = 1;
  {
    int byte_size = _impl_._points_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          1, _internal_points(), byte_size, target);
    }
  }

  // repeated int64 real_points = 2;
  {
    int byte_size = _impl_._real_points_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          2, _internal_real_points(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCPointsPacket)
  return target;
}

size_t GCPointsPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCPointsPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 points = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.points_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._points_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 real_points = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.real_points_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._real_points_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCPointsPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCPointsPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCPointsPacket::GetClassData() const { return &_class_data_; }


void GCPointsPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCPointsPacket*>(&to_msg);
  auto& from = static_cast<const GCPointsPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCPointsPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.points_.MergeFrom(from._impl_.points_);
  _this->_impl_.real_points_.MergeFrom(from._impl_.real_points_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCPointsPacket::CopyFrom(const GCPointsPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCPointsPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCPointsPacket::IsInitialized() const {
  return true;
}

void GCPointsPacket::InternalSwap(GCPointsPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.points_.InternalSwap(&other->_impl_.points_);
  _impl_.real_points_.InternalSwap(&other->_impl_.real_points_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GCPointsPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[44]);
}

// ===================================================================

class GCPointChangePacket::_Internal {
 public:
};

GCPointChangePacket::GCPointChangePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCPointChangePacket)
}
GCPointChangePacket::GCPointChangePacket(const GCPointChangePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCPointChangePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.vid_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.amount_){}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.vid_, &from._impl_.vid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.value_) -
    reinterpret_cast<char*>(&_impl_.vid_)) + sizeof(_impl_.value_));
  // @@protoc_insertion_point(copy_constructor:network.GCPointChangePacket)
}

inline void GCPointChangePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.vid_){0u}
    , decltype(_impl_.type_){0u}
    , decltype(_impl_.amount_){int64_t{0}}
    , decltype(_impl_.value_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCPointChangePacket::~GCPointChangePacket() {
  // @@protoc_insertion_point(destructor:network.GCPointChangePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCPointChangePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GCPointChangePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCPointChangePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCPointChangePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.vid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.value_) -
      reinterpret_cast<char*>(&_impl_.vid_)) + sizeof(_impl_.value_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCPointChangePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 vid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.vid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 amount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCPointChangePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCPointChangePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 vid = 1;
  if (this->_internal_vid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_vid(), target);
  }

  // uint32 type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_type(), target);
  }

  // int64 amount = 3;
  if (this->_internal_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_amount(), target);
  }

  // int64 value = 4;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCPointChangePacket)
  return target;
}

size_t GCPointChangePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCPointChangePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 vid = 1;
  if (this->_internal_vid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_vid());
  }

  // uint32 type = 2;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
  }

  // int64 amount = 3;
  if (this->_internal_amount() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_amount());
  }

  // int64 value = 4;
  if (this->_internal_value() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCPointChangePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCPointChangePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCPointChangePacket::GetClassData() const { return &_class_data_; }


void GCPointChangePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCPointChangePacket*>(&to_msg);
  auto& from = static_cast<const GCPointChangePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCPointChangePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_vid() != 0) {
    _this->_internal_set_vid(from._internal_vid());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_amount() != 0) {
    _this->_internal_set_amount(from._internal_amount());
  }
  if (from._internal_value() != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCPointChangePacket::CopyFrom(const GCPointChangePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCPointChangePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCPointChangePacket::IsInitialized() const {
  return true;
}

void GCPointChangePacket::InternalSwap(GCPointChangePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GCPointChangePacket, _impl_.value_)
      + sizeof(GCPointChangePacket::_impl_.value_)
      - PROTOBUF_FIELD_OFFSET(GCPointChangePacket, _impl_.vid_)>(
          reinterpret_cast<char*>(&_impl_.vid_),
          reinterpret_cast<char*>(&other->_impl_.vid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GCPointChangePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[45]);
}

// ===================================================================

class GCRealPointSetPacket::_Internal {
 public:
};

GCRealPointSetPacket::GCRealPointSetPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCRealPointSetPacket)
}
GCRealPointSetPacket::GCRealPointSetPacket(const GCRealPointSetPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCRealPointSetPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.value_, &from._impl_.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.value_)) + sizeof(_impl_.type_));
  // @@protoc_insertion_point(copy_constructor:network.GCRealPointSetPacket)
}

inline void GCRealPointSetPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){int64_t{0}}
    , decltype(_impl_.type_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCRealPointSetPacket::~GCRealPointSetPacket() {
  // @@protoc_insertion_point(destructor:network.GCRealPointSetPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCRealPointSetPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GCRealPointSetPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCRealPointSetPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCRealPointSetPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.type_) -
      reinterpret_cast<char*>(&_impl_.value_)) + sizeof(_impl_.type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCRealPointSetPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCRealPointSetPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCRealPointSetPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // int64 value = 2;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCRealPointSetPacket)
  return target;
}

size_t GCRealPointSetPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCRealPointSetPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 value = 2;
  if (this->_internal_value() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_value());
  }

  // uint32 type = 1;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCRealPointSetPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCRealPointSetPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCRealPointSetPacket::GetClassData() const { return &_class_data_; }


void GCRealPointSetPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCRealPointSetPacket*>(&to_msg);
  auto& from = static_cast<const GCRealPointSetPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCRealPointSetPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_value() != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCRealPointSetPacket::CopyFrom(const GCRealPointSetPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCRealPointSetPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCRealPointSetPacket::IsInitialized() const {
  return true;
}

void GCRealPointSetPacket::InternalSwap(GCRealPointSetPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GCRealPointSetPacket, _impl_.type_)
      + sizeof(GCRealPointSetPacket::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(GCRealPointSetPacket, _impl_.value_)>(
          reinterpret_cast<char*>(&_impl_.value_),
          reinterpret_cast<char*>(&other->_impl_.value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GCRealPointSetPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[46]);
}

// ===================================================================

class GCQuickslotAddPacket::_Internal {
 public:
  static const ::TQuickslot& slot(const GCQuickslotAddPacket* msg);
};

const ::TQuickslot&
GCQuickslotAddPacket::_Internal::slot(const GCQuickslotAddPacket* msg) {
  return *msg->_impl_.slot_;
}
void GCQuickslotAddPacket::clear_slot() {
  if (GetArenaForAllocation() == nullptr && _impl_.slot_ != nullptr) {
    delete _impl_.slot_;
  }
  _impl_.slot_ = nullptr;
}
GCQuickslotAddPacket::GCQuickslotAddPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCQuickslotAddPacket)
}
GCQuickslotAddPacket::GCQuickslotAddPacket(const GCQuickslotAddPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCQuickslotAddPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.slot_){nullptr}
    , decltype(_impl_.pos_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_slot()) {
    _this->_impl_.slot_ = new ::TQuickslot(*from._impl_.slot_);
  }
  _this->_impl_.pos_ = from._impl_.pos_;
  // @@protoc_insertion_point(copy_constructor:network.GCQuickslotAddPacket)
}

inline void GCQuickslotAddPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.slot_){nullptr}
    , decltype(_impl_.pos_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCQuickslotAddPacket::~GCQuickslotAddPacket() {
  // @@protoc_insertion_point(destructor:network.GCQuickslotAddPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCQuickslotAddPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.slot_;
}

void GCQuickslotAddPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCQuickslotAddPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCQuickslotAddPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.slot_ != nullptr) {
    delete _impl_.slot_;
  }
  _impl_.slot_ = nullptr;
  _impl_.pos_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCQuickslotAddPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TQuickslot slot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_slot(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCQuickslotAddPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCQuickslotAddPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pos = 1;
  if (this->_internal_pos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pos(), target);
  }

  // .TQuickslot slot = 2;
  if (this->_internal_has_slot()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::slot(this),
        _Internal::slot(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCQuickslotAddPacket)
  return target;
}

size_t GCQuickslotAddPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCQuickslotAddPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .TQuickslot slot = 2;
  if (this->_internal_has_slot()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.slot_);
  }

  // uint32 pos = 1;
  if (this->_internal_pos() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pos());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCQuickslotAddPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCQuickslotAddPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCQuickslotAddPacket::GetClassData() const { return &_class_data_; }


void GCQuickslotAddPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCQuickslotAddPacket*>(&to_msg);
  auto& from = static_cast<const GCQuickslotAddPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCQuickslotAddPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_slot()) {
    _this->_internal_mutable_slot()->::TQuickslot::MergeFrom(
        from._internal_slot());
  }
  if (from._internal_pos() != 0) {
    _this->_internal_set_pos(from._internal_pos());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCQuickslotAddPacket::CopyFrom(const GCQuickslotAddPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCQuickslotAddPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCQuickslotAddPacket::IsInitialized() const {
  return true;
}

void GCQuickslotAddPacket::InternalSwap(GCQuickslotAddPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GCQuickslotAddPacket, _impl_.pos_)
      + sizeof(GCQuickslotAddPacket::_impl_.pos_)
      - PROTOBUF_FIELD_OFFSET(GCQuickslotAddPacket, _impl_.slot_)>(
          reinterpret_cast<char*>(&_impl_.slot_),
          reinterpret_cast<char*>(&other->_impl_.slot_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GCQuickslotAddPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[47]);
}

// ===================================================================

class GCQuickslotDelPacket::_Internal {
 public:
};

GCQuickslotDelPacket::GCQuickslotDelPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCQuickslotDelPacket)
}
GCQuickslotDelPacket::GCQuickslotDelPacket(const GCQuickslotDelPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCQuickslotDelPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pos_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.pos_ = from._impl_.pos_;
  // @@protoc_insertion_point(copy_constructor:network.GCQuickslotDelPacket)
}

inline void GCQuickslotDelPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pos_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCQuickslotDelPacket::~GCQuickslotDelPacket() {
  // @@protoc_insertion_point(destructor:network.GCQuickslotDelPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCQuickslotDelPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GCQuickslotDelPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCQuickslotDelPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCQuickslotDelPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pos_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCQuickslotDelPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCQuickslotDelPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCQuickslotDelPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pos = 1;
  if (this->_internal_pos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pos(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCQuickslotDelPacket)
  return target;
}

size_t GCQuickslotDelPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCQuickslotDelPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 pos = 1;
  if (this->_internal_pos() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pos());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCQuickslotDelPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCQuickslotDelPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCQuickslotDelPacket::GetClassData() const { return &_class_data_; }


void GCQuickslotDelPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCQuickslotDelPacket*>(&to_msg);
  auto& from = static_cast<const GCQuickslotDelPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCQuickslotDelPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_pos() != 0) {
    _this->_internal_set_pos(from._internal_pos());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCQuickslotDelPacket::CopyFrom(const GCQuickslotDelPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCQuickslotDelPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCQuickslotDelPacket::IsInitialized() const {
  return true;
}

void GCQuickslotDelPacket::InternalSwap(GCQuickslotDelPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.pos_, other->_impl_.pos_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GCQuickslotDelPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[48]);
}

// ===================================================================

class GCQuickslotSwapPacket::_Internal {
 public:
};

GCQuickslotSwapPacket::GCQuickslotSwapPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCQuickslotSwapPacket)
}
GCQuickslotSwapPacket::GCQuickslotSwapPacket(const GCQuickslotSwapPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCQuickslotSwapPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pos_){}
    , decltype(_impl_.change_pos_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.pos_, &from._impl_.pos_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.change_pos_) -
    reinterpret_cast<char*>(&_impl_.pos_)) + sizeof(_impl_.change_pos_));
  // @@protoc_insertion_point(copy_constructor:network.GCQuickslotSwapPacket)
}

inline void GCQuickslotSwapPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pos_){0u}
    , decltype(_impl_.change_pos_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCQuickslotSwapPacket::~GCQuickslotSwapPacket() {
  // @@protoc_insertion_point(destructor:network.GCQuickslotSwapPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCQuickslotSwapPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GCQuickslotSwapPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCQuickslotSwapPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCQuickslotSwapPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.change_pos_) -
      reinterpret_cast<char*>(&_impl_.pos_)) + sizeof(_impl_.change_pos_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCQuickslotSwapPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 change_pos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.change_pos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCQuickslotSwapPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCQuickslotSwapPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pos = 1;
  if (this->_internal_pos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pos(), target);
  }

  // uint32 change_pos = 2;
  if (this->_internal_change_pos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_change_pos(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCQuickslotSwapPacket)
  return target;
}

size_t GCQuickslotSwapPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCQuickslotSwapPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 pos = 1;
  if (this->_internal_pos() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pos());
  }

  // uint32 change_pos = 2;
  if (this->_internal_change_pos() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_change_pos());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCQuickslotSwapPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCQuickslotSwapPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCQuickslotSwapPacket::GetClassData() const { return &_class_data_; }


void GCQuickslotSwapPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCQuickslotSwapPacket*>(&to_msg);
  auto& from = static_cast<const GCQuickslotSwapPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCQuickslotSwapPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_pos() != 0) {
    _this->_internal_set_pos(from._internal_pos());
  }
  if (from._internal_change_pos() != 0) {
    _this->_internal_set_change_pos(from._internal_change_pos());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCQuickslotSwapPacket::CopyFrom(const GCQuickslotSwapPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCQuickslotSwapPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCQuickslotSwapPacket::IsInitialized() const {
  return true;
}

void GCQuickslotSwapPacket::InternalSwap(GCQuickslotSwapPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GCQuickslotSwapPacket, _impl_.change_pos_)
      + sizeof(GCQuickslotSwapPacket::_impl_.change_pos_)
      - PROTOBUF_FIELD_OFFSET(GCQuickslotSwapPacket, _impl_.pos_)>(
          reinterpret_cast<char*>(&_impl_.pos_),
          reinterpret_cast<char*>(&other->_impl_.pos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GCQuickslotSwapPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[49]);
}

// ===================================================================

class GCMotionPacket::_Internal {
 public:
};

GCMotionPacket::GCMotionPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCMotionPacket)
}
GCMotionPacket::GCMotionPacket(const GCMotionPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCMotionPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.vid_){}
    , decltype(_impl_.victim_vid_){}
    , decltype(_impl_.motion_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.vid_, &from._impl_.vid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.motion_) -
    reinterpret_cast<char*>(&_impl_.vid_)) + sizeof(_impl_.motion_));
  // @@protoc_insertion_point(copy_constructor:network.GCMotionPacket)
}

inline void GCMotionPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.vid_){0u}
    , decltype(_impl_.victim_vid_){0u}
    , decltype(_impl_.motion_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCMotionPacket::~GCMotionPacket() {
  // @@protoc_insertion_point(destructor:network.GCMotionPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCMotionPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GCMotionPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCMotionPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCMotionPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.vid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.motion_) -
      reinterpret_cast<char*>(&_impl_.vid_)) + sizeof(_impl_.motion_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCMotionPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 vid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.vid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 victim_vid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.victim_vid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 motion = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.motion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCMotionPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCMotionPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 vid = 1;
  if (this->_internal_vid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_vid(), target);
  }

  // uint32 victim_vid = 2;
  if (this->_internal_victim_vid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_victim_vid(), target);
  }

  // uint32 motion = 3;
  if (this->_internal_motion() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_motion(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCMotionPacket)
  return target;
}

size_t GCMotionPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCMotionPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 vid = 1;
  if (this->_internal_vid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_vid());
  }

  // uint32 victim_vid = 2;
  if (this->_internal_victim_vid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_victim_vid());
  }

  // uint32 motion = 3;
  if (this->_internal_motion() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_motion());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCMotionPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCMotionPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCMotionPacket::GetClassData() const { return &_class_data_; }


void GCMotionPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCMotionPacket*>(&to_msg);
  auto& from = static_cast<const GCMotionPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCMotionPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_vid() != 0) {
    _this->_internal_set_vid(from._internal_vid());
  }
  if (from._internal_victim_vid() != 0) {
    _this->_internal_set_victim_vid(from._internal_victim_vid());
  }
  if (from._internal_motion() != 0) {
    _this->_internal_set_motion(from._internal_motion());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCMotionPacket::CopyFrom(const GCMotionPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCMotionPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCMotionPacket::IsInitialized() const {
  return true;
}

void GCMotionPacket::InternalSwap(GCMotionPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GCMotionPacket, _impl_.motion_)
      + sizeof(GCMotionPacket::_impl_.motion_)
      - PROTOBUF_FIELD_OFFSET(GCMotionPacket, _impl_.vid_)>(
          reinterpret_cast<char*>(&_impl_.vid_),
          reinterpret_cast<char*>(&other->_impl_.vid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GCMotionPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[50]);
}

// ===================================================================

class GCDamageInfoPacket::_Internal {
 public:
};

GCDamageInfoPacket::GCDamageInfoPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCDamageInfoPacket)
}
GCDamageInfoPacket::GCDamageInfoPacket(const GCDamageInfoPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCDamageInfoPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.vid_){}
    , decltype(_impl_.flag_){}
    , decltype(_impl_.damage_){}
    , decltype(_impl_.target_vid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.vid_, &from._impl_.vid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.target_vid_) -
    reinterpret_cast<char*>(&_impl_.vid_)) + sizeof(_impl_.target_vid_));
  // @@protoc_insertion_point(copy_constructor:network.GCDamageInfoPacket)
}

inline void GCDamageInfoPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.vid_){0u}
    , decltype(_impl_.flag_){0u}
    , decltype(_impl_.damage_){0}
    , decltype(_impl_.target_vid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCDamageInfoPacket::~GCDamageInfoPacket() {
  // @@protoc_insertion_point(destructor:network.GCDamageInfoPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCDamageInfoPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GCDamageInfoPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCDamageInfoPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCDamageInfoPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.vid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.target_vid_) -
      reinterpret_cast<char*>(&_impl_.vid_)) + sizeof(_impl_.target_vid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCDamageInfoPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 vid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.vid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 flag = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 damage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.damage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 target_vid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.target_vid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCDamageInfoPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCDamageInfoPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 vid = 1;
  if (this->_internal_vid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_vid(), target);
  }

  // uint32 flag = 2;
  if (this->_internal_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_flag(), target);
  }

  // int32 damage = 3;
  if (this->_internal_damage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_damage(), target);
  }

  // uint32 target_vid = 4;
  if (this->_internal_target_vid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_target_vid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCDamageInfoPacket)
  return target;
}

size_t GCDamageInfoPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCDamageInfoPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 vid = 1;
  if (this->_internal_vid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_vid());
  }

  // uint32 flag = 2;
  if (this->_internal_flag() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_flag());
  }

  // int32 damage = 3;
  if (this->_internal_damage() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_damage());
  }

  // uint32 target_vid = 4;
  if (this->_internal_target_vid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_target_vid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCDamageInfoPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCDamageInfoPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCDamageInfoPacket::GetClassData() const { return &_class_data_; }


void GCDamageInfoPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCDamageInfoPacket*>(&to_msg);
  auto& from = static_cast<const GCDamageInfoPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCDamageInfoPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_vid() != 0) {
    _this->_internal_set_vid(from._internal_vid());
  }
  if (from._internal_flag() != 0) {
    _this->_internal_set_flag(from._internal_flag());
  }
  if (from._internal_damage() != 0) {
    _this->_internal_set_damage(from._internal_damage());
  }
  if (from._internal_target_vid() != 0) {
    _this->_internal_set_target_vid(from._internal_target_vid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCDamageInfoPacket::CopyFrom(const GCDamageInfoPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCDamageInfoPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCDamageInfoPacket::IsInitialized() const {
  return true;
}

void GCDamageInfoPacket::InternalSwap(GCDamageInfoPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GCDamageInfoPacket, _impl_.target_vid_)
      + sizeof(GCDamageInfoPacket::_impl_.target_vid_)
      - PROTOBUF_FIELD_OFFSET(GCDamageInfoPacket, _impl_.vid_)>(
          reinterpret_cast<char*>(&_impl_.vid_),
          reinterpret_cast<char*>(&other->_impl_.vid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GCDamageInfoPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[51]);
}

// ===================================================================

class GCCreateFlyPacket::_Internal {
 public:
};

GCCreateFlyPacket::GCCreateFlyPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCCreateFlyPacket)
}
GCCreateFlyPacket::GCCreateFlyPacket(const GCCreateFlyPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCCreateFlyPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , decltype(_impl_.start_vid_){}
    , decltype(_impl_.end_vid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.end_vid_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.end_vid_));
  // @@protoc_insertion_point(copy_constructor:network.GCCreateFlyPacket)
}

inline void GCCreateFlyPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){0u}
    , decltype(_impl_.start_vid_){0u}
    , decltype(_impl_.end_vid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCCreateFlyPacket::~GCCreateFlyPacket() {
  // @@protoc_insertion_point(destructor:network.GCCreateFlyPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCCreateFlyPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GCCreateFlyPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCCreateFlyPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCCreateFlyPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.end_vid_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.end_vid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCCreateFlyPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 start_vid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.start_vid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 end_vid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.end_vid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCCreateFlyPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCCreateFlyPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // uint32 start_vid = 2;
  if (this->_internal_start_vid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_start_vid(), target);
  }

  // uint32 end_vid = 3;
  if (this->_internal_end_vid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_end_vid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCCreateFlyPacket)
  return target;
}

size_t GCCreateFlyPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCCreateFlyPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
  }

  // uint32 start_vid = 2;
  if (this->_internal_start_vid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_start_vid());
  }

  // uint32 end_vid = 3;
  if (this->_internal_end_vid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_end_vid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCCreateFlyPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCCreateFlyPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCCreateFlyPacket::GetClassData() const { return &_class_data_; }


void GCCreateFlyPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCCreateFlyPacket*>(&to_msg);
  auto& from = static_cast<const GCCreateFlyPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCCreateFlyPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_start_vid() != 0) {
    _this->_internal_set_start_vid(from._internal_start_vid());
  }
  if (from._internal_end_vid() != 0) {
    _this->_internal_set_end_vid(from._internal_end_vid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCCreateFlyPacket::CopyFrom(const GCCreateFlyPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCCreateFlyPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCCreateFlyPacket::IsInitialized() const {
  return true;
}

void GCCreateFlyPacket::InternalSwap(GCCreateFlyPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GCCreateFlyPacket, _impl_.end_vid_)
      + sizeof(GCCreateFlyPacket::_impl_.end_vid_)
      - PROTOBUF_FIELD_OFFSET(GCCreateFlyPacket, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GCCreateFlyPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[52]);
}

// ===================================================================

class GCDungeonDestinationPositionPacket::_Internal {
 public:
};

GCDungeonDestinationPositionPacket::GCDungeonDestinationPositionPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCDungeonDestinationPositionPacket)
}
GCDungeonDestinationPositionPacket::GCDungeonDestinationPositionPacket(const GCDungeonDestinationPositionPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCDungeonDestinationPositionPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.y_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  // @@protoc_insertion_point(copy_constructor:network.GCDungeonDestinationPositionPacket)
}

inline void GCDungeonDestinationPositionPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){0u}
    , decltype(_impl_.y_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCDungeonDestinationPositionPacket::~GCDungeonDestinationPositionPacket() {
  // @@protoc_insertion_point(destructor:network.GCDungeonDestinationPositionPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCDungeonDestinationPositionPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GCDungeonDestinationPositionPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCDungeonDestinationPositionPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCDungeonDestinationPositionPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.y_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCDungeonDestinationPositionPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCDungeonDestinationPositionPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCDungeonDestinationPositionPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 x = 1;
  if (this->_internal_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_x(), target);
  }

  // uint32 y = 2;
  if (this->_internal_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCDungeonDestinationPositionPacket)
  return target;
}

size_t GCDungeonDestinationPositionPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCDungeonDestinationPositionPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 x = 1;
  if (this->_internal_x() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_x());
  }

  // uint32 y = 2;
  if (this->_internal_y() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_y());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCDungeonDestinationPositionPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCDungeonDestinationPositionPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCDungeonDestinationPositionPacket::GetClassData() const { return &_class_data_; }


void GCDungeonDestinationPositionPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCDungeonDestinationPositionPacket*>(&to_msg);
  auto& from = static_cast<const GCDungeonDestinationPositionPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCDungeonDestinationPositionPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_x() != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  if (from._internal_y() != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCDungeonDestinationPositionPacket::CopyFrom(const GCDungeonDestinationPositionPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCDungeonDestinationPositionPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCDungeonDestinationPositionPacket::IsInitialized() const {
  return true;
}

void GCDungeonDestinationPositionPacket::InternalSwap(GCDungeonDestinationPositionPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GCDungeonDestinationPositionPacket, _impl_.y_)
      + sizeof(GCDungeonDestinationPositionPacket::_impl_.y_)
      - PROTOBUF_FIELD_OFFSET(GCDungeonDestinationPositionPacket, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GCDungeonDestinationPositionPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[53]);
}

// ===================================================================

class GCSkillLevelPacket::_Internal {
 public:
};

void GCSkillLevelPacket::clear_levels() {
  _impl_.levels_.Clear();
}
GCSkillLevelPacket::GCSkillLevelPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCSkillLevelPacket)
}
GCSkillLevelPacket::GCSkillLevelPacket(const GCSkillLevelPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCSkillLevelPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.levels_){from._impl_.levels_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:network.GCSkillLevelPacket)
}

inline void GCSkillLevelPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.levels_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCSkillLevelPacket::~GCSkillLevelPacket() {
  // @@protoc_insertion_point(destructor:network.GCSkillLevelPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCSkillLevelPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.levels_.~RepeatedPtrField();
}

void GCSkillLevelPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCSkillLevelPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCSkillLevelPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.levels_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCSkillLevelPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TPlayerSkill levels = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_levels(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCSkillLevelPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCSkillLevelPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TPlayerSkill levels = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_levels_size()); i < n; i++) {
    const auto& repfield = this->_internal_levels(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCSkillLevelPacket)
  return target;
}

size_t GCSkillLevelPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCSkillLevelPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TPlayerSkill levels = 1;
  total_size += 1UL * this->_internal_levels_size();
  for (const auto& msg : this->_impl_.levels_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCSkillLevelPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCSkillLevelPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCSkillLevelPacket::GetClassData() const { return &_class_data_; }


void GCSkillLevelPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCSkillLevelPacket*>(&to_msg);
  auto& from = static_cast<const GCSkillLevelPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCSkillLevelPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.levels_.MergeFrom(from._impl_.levels_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCSkillLevelPacket::CopyFrom(const GCSkillLevelPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCSkillLevelPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCSkillLevelPacket::IsInitialized() const {
  return true;
}

void GCSkillLevelPacket::InternalSwap(GCSkillLevelPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.levels_.InternalSwap(&other->_impl_.levels_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GCSkillLevelPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[54]);
}

// ===================================================================

class GCMessengerListPacket_Entry::_Internal {
 public:
};

GCMessengerListPacket_Entry::GCMessengerListPacket_Entry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCMessengerListPacket.Entry)
}
GCMessengerListPacket_Entry::GCMessengerListPacket_Entry(const GCMessengerListPacket_Entry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCMessengerListPacket_Entry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.connected_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.connected_ = from._impl_.connected_;
  // @@protoc_insertion_point(copy_constructor:network.GCMessengerListPacket.Entry)
}

inline void GCMessengerListPacket_Entry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.connected_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GCMessengerListPacket_Entry::~GCMessengerListPacket_Entry() {
  // @@protoc_insertion_point(destructor:network.GCMessengerListPacket.Entry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCMessengerListPacket_Entry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void GCMessengerListPacket_Entry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCMessengerListPacket_Entry::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCMessengerListPacket.Entry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.connected_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCMessengerListPacket_Entry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 connected = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.connected_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCMessengerListPacket_Entry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCMessengerListPacket.Entry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 connected = 1;
  if (this->_internal_connected() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_connected(), target);
  }

  // bytes name = 2;
  if (!this->_internal_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCMessengerListPacket.Entry)
  return target;
}

size_t GCMessengerListPacket_Entry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCMessengerListPacket.Entry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // uint32 connected = 1;
  if (this->_internal_connected() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_connected());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCMessengerListPacket_Entry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCMessengerListPacket_Entry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCMessengerListPacket_Entry::GetClassData() const { return &_class_data_; }


void GCMessengerListPacket_Entry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCMessengerListPacket_Entry*>(&to_msg);
  auto& from = static_cast<const GCMessengerListPacket_Entry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCMessengerListPacket.Entry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_connected() != 0) {
    _this->_internal_set_connected(from._internal_connected());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCMessengerListPacket_Entry::CopyFrom(const GCMessengerListPacket_Entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCMessengerListPacket.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCMessengerListPacket_Entry::IsInitialized() const {
  return true;
}

void GCMessengerListPacket_Entry::InternalSwap(GCMessengerListPacket_Entry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.connected_, other->_impl_.connected_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GCMessengerListPacket_Entry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[55]);
}

// ===================================================================

class GCMessengerListPacket::_Internal {
 public:
};

GCMessengerListPacket::GCMessengerListPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCMessengerListPacket)
}
GCMessengerListPacket::GCMessengerListPacket(const GCMessengerListPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCMessengerListPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.players_){from._impl_.players_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:network.GCMessengerListPacket)
}

inline void GCMessengerListPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.players_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCMessengerListPacket::~GCMessengerListPacket() {
  // @@protoc_insertion_point(destructor:network.GCMessengerListPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCMessengerListPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.players_.~RepeatedPtrField();
}

void GCMessengerListPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCMessengerListPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCMessengerListPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.players_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCMessengerListPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .network.GCMessengerListPacket.Entry players = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCMessengerListPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCMessengerListPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .network.GCMessengerListPacket.Entry players = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_players_size()); i < n; i++) {
    const auto& repfield = this->_internal_players(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCMessengerListPacket)
  return target;
}

size_t GCMessengerListPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCMessengerListPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .network.GCMessengerListPacket.Entry players = 1;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->_impl_.players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCMessengerListPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCMessengerListPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCMessengerListPacket::GetClassData() const { return &_class_data_; }


void GCMessengerListPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCMessengerListPacket*>(&to_msg);
  auto& from = static_cast<const GCMessengerListPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCMessengerListPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.players_.MergeFrom(from._impl_.players_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCMessengerListPacket::CopyFrom(const GCMessengerListPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCMessengerListPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCMessengerListPacket::IsInitialized() const {
  return true;
}

void GCMessengerListPacket::InternalSwap(GCMessengerListPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.players_.InternalSwap(&other->_impl_.players_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GCMessengerListPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[56]);
}

// ===================================================================

class GCMessengerBlockListPacket_Entry::_Internal {
 public:
};

GCMessengerBlockListPacket_Entry::GCMessengerBlockListPacket_Entry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCMessengerBlockListPacket.Entry)
}
GCMessengerBlockListPacket_Entry::GCMessengerBlockListPacket_Entry(const GCMessengerBlockListPacket_Entry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCMessengerBlockListPacket_Entry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.connected_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.connected_ = from._impl_.connected_;
  // @@protoc_insertion_point(copy_constructor:network.GCMessengerBlockListPacket.Entry)
}

inline void GCMessengerBlockListPacket_Entry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.connected_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GCMessengerBlockListPacket_Entry::~GCMessengerBlockListPacket_Entry() {
  // @@protoc_insertion_point(destructor:network.GCMessengerBlockListPacket.Entry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCMessengerBlockListPacket_Entry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void GCMessengerBlockListPacket_Entry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCMessengerBlockListPacket_Entry::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCMessengerBlockListPacket.Entry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.connected_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCMessengerBlockListPacket_Entry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 connected = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.connected_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCMessengerBlockListPacket_Entry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCMessengerBlockListPacket.Entry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 connected = 1;
  if (this->_internal_connected() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_connected(), target);
  }

  // bytes name = 2;
  if (!this->_internal_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCMessengerBlockListPacket.Entry)
  return target;
}

size_t GCMessengerBlockListPacket_Entry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCMessengerBlockListPacket.Entry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // uint32 connected = 1;
  if (this->_internal_connected() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_connected());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCMessengerBlockListPacket_Entry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCMessengerBlockListPacket_Entry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCMessengerBlockListPacket_Entry::GetClassData() const { return &_class_data_; }


void GCMessengerBlockListPacket_Entry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCMessengerBlockListPacket_Entry*>(&to_msg);
  auto& from = static_cast<const GCMessengerBlockListPacket_Entry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCMessengerBlockListPacket.Entry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_connected() != 0) {
    _this->_internal_set_connected(from._internal_connected());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCMessengerBlockListPacket_Entry::CopyFrom(const GCMessengerBlockListPacket_Entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCMessengerBlockListPacket.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCMessengerBlockListPacket_Entry::IsInitialized() const {
  return true;
}

void GCMessengerBlockListPacket_Entry::InternalSwap(GCMessengerBlockListPacket_Entry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.connected_, other->_impl_.connected_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GCMessengerBlockListPacket_Entry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[57]);
}

// ===================================================================

class GCMessengerBlockListPacket::_Internal {
 public:
};

GCMessengerBlockListPacket::GCMessengerBlockListPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCMessengerBlockListPacket)
}
GCMessengerBlockListPacket::GCMessengerBlockListPacket(const GCMessengerBlockListPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCMessengerBlockListPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.players_){from._impl_.players_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:network.GCMessengerBlockListPacket)
}

inline void GCMessengerBlockListPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.players_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCMessengerBlockListPacket::~GCMessengerBlockListPacket() {
  // @@protoc_insertion_point(destructor:network.GCMessengerBlockListPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCMessengerBlockListPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.players_.~RepeatedPtrField();
}

void GCMessengerBlockListPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCMessengerBlockListPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCMessengerBlockListPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.players_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCMessengerBlockListPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .network.GCMessengerBlockListPacket.Entry players = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCMessengerBlockListPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCMessengerBlockListPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .network.GCMessengerBlockListPacket.Entry players = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_players_size()); i < n; i++) {
    const auto& repfield = this->_internal_players(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCMessengerBlockListPacket)
  return target;
}

size_t GCMessengerBlockListPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCMessengerBlockListPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .network.GCMessengerBlockListPacket.Entry players = 1;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->_impl_.players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCMessengerBlockListPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCMessengerBlockListPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCMessengerBlockListPacket::GetClassData() const { return &_class_data_; }


void GCMessengerBlockListPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCMessengerBlockListPacket*>(&to_msg);
  auto& from = static_cast<const GCMessengerBlockListPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCMessengerBlockListPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.players_.MergeFrom(from._impl_.players_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCMessengerBlockListPacket::CopyFrom(const GCMessengerBlockListPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCMessengerBlockListPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCMessengerBlockListPacket::IsInitialized() const {
  return true;
}

void GCMessengerBlockListPacket::InternalSwap(GCMessengerBlockListPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.players_.InternalSwap(&other->_impl_.players_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GCMessengerBlockListPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[58]);
}

// ===================================================================

class GCMessengerLoginPacket::_Internal {
 public:
};

GCMessengerLoginPacket::GCMessengerLoginPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCMessengerLoginPacket)
}
GCMessengerLoginPacket::GCMessengerLoginPacket(const GCMessengerLoginPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCMessengerLoginPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:network.GCMessengerLoginPacket)
}

inline void GCMessengerLoginPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GCMessengerLoginPacket::~GCMessengerLoginPacket() {
  // @@protoc_insertion_point(destructor:network.GCMessengerLoginPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCMessengerLoginPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void GCMessengerLoginPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCMessengerLoginPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCMessengerLoginPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCMessengerLoginPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCMessengerLoginPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCMessengerLoginPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes name = 1;
  if (!this->_internal_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCMessengerLoginPacket)
  return target;
}

size_t GCMessengerLoginPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCMessengerLoginPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCMessengerLoginPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCMessengerLoginPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCMessengerLoginPacket::GetClassData() const { return &_class_data_; }


void GCMessengerLoginPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCMessengerLoginPacket*>(&to_msg);
  auto& from = static_cast<const GCMessengerLoginPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCMessengerLoginPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCMessengerLoginPacket::CopyFrom(const GCMessengerLoginPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCMessengerLoginPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCMessengerLoginPacket::IsInitialized() const {
  return true;
}

void GCMessengerLoginPacket::InternalSwap(GCMessengerLoginPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GCMessengerLoginPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[59]);
}

// ===================================================================

class GCMessengerLogoutPacket::_Internal {
 public:
};

GCMessengerLogoutPacket::GCMessengerLogoutPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCMessengerLogoutPacket)
}
GCMessengerLogoutPacket::GCMessengerLogoutPacket(const GCMessengerLogoutPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCMessengerLogoutPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:network.GCMessengerLogoutPacket)
}

inline void GCMessengerLogoutPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GCMessengerLogoutPacket::~GCMessengerLogoutPacket() {
  // @@protoc_insertion_point(destructor:network.GCMessengerLogoutPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCMessengerLogoutPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void GCMessengerLogoutPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCMessengerLogoutPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCMessengerLogoutPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCMessengerLogoutPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCMessengerLogoutPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCMessengerLogoutPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes name = 1;
  if (!this->_internal_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCMessengerLogoutPacket)
  return target;
}

size_t GCMessengerLogoutPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCMessengerLogoutPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCMessengerLogoutPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCMessengerLogoutPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCMessengerLogoutPacket::GetClassData() const { return &_class_data_; }


void GCMessengerLogoutPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCMessengerLogoutPacket*>(&to_msg);
  auto& from = static_cast<const GCMessengerLogoutPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCMessengerLogoutPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCMessengerLogoutPacket::CopyFrom(const GCMessengerLogoutPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCMessengerLogoutPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCMessengerLogoutPacket::IsInitialized() const {
  return true;
}

void GCMessengerLogoutPacket::InternalSwap(GCMessengerLogoutPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GCMessengerLogoutPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[60]);
}

// ===================================================================

class GCMessengerBlockLoginPacket::_Internal {
 public:
};

GCMessengerBlockLoginPacket::GCMessengerBlockLoginPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCMessengerBlockLoginPacket)
}
GCMessengerBlockLoginPacket::GCMessengerBlockLoginPacket(const GCMessengerBlockLoginPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCMessengerBlockLoginPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:network.GCMessengerBlockLoginPacket)
}

inline void GCMessengerBlockLoginPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GCMessengerBlockLoginPacket::~GCMessengerBlockLoginPacket() {
  // @@protoc_insertion_point(destructor:network.GCMessengerBlockLoginPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCMessengerBlockLoginPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void GCMessengerBlockLoginPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCMessengerBlockLoginPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCMessengerBlockLoginPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCMessengerBlockLoginPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCMessengerBlockLoginPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCMessengerBlockLoginPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes name = 1;
  if (!this->_internal_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCMessengerBlockLoginPacket)
  return target;
}

size_t GCMessengerBlockLoginPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCMessengerBlockLoginPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCMessengerBlockLoginPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCMessengerBlockLoginPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCMessengerBlockLoginPacket::GetClassData() const { return &_class_data_; }


void GCMessengerBlockLoginPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCMessengerBlockLoginPacket*>(&to_msg);
  auto& from = static_cast<const GCMessengerBlockLoginPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCMessengerBlockLoginPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCMessengerBlockLoginPacket::CopyFrom(const GCMessengerBlockLoginPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCMessengerBlockLoginPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCMessengerBlockLoginPacket::IsInitialized() const {
  return true;
}

void GCMessengerBlockLoginPacket::InternalSwap(GCMessengerBlockLoginPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GCMessengerBlockLoginPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[61]);
}

// ===================================================================

class GCMessengerBlockLogoutPacket::_Internal {
 public:
};

GCMessengerBlockLogoutPacket::GCMessengerBlockLogoutPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCMessengerBlockLogoutPacket)
}
GCMessengerBlockLogoutPacket::GCMessengerBlockLogoutPacket(const GCMessengerBlockLogoutPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCMessengerBlockLogoutPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:network.GCMessengerBlockLogoutPacket)
}

inline void GCMessengerBlockLogoutPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GCMessengerBlockLogoutPacket::~GCMessengerBlockLogoutPacket() {
  // @@protoc_insertion_point(destructor:network.GCMessengerBlockLogoutPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCMessengerBlockLogoutPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void GCMessengerBlockLogoutPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCMessengerBlockLogoutPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCMessengerBlockLogoutPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCMessengerBlockLogoutPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCMessengerBlockLogoutPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCMessengerBlockLogoutPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes name = 1;
  if (!this->_internal_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCMessengerBlockLogoutPacket)
  return target;
}

size_t GCMessengerBlockLogoutPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCMessengerBlockLogoutPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCMessengerBlockLogoutPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCMessengerBlockLogoutPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCMessengerBlockLogoutPacket::GetClassData() const { return &_class_data_; }


void GCMessengerBlockLogoutPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCMessengerBlockLogoutPacket*>(&to_msg);
  auto& from = static_cast<const GCMessengerBlockLogoutPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCMessengerBlockLogoutPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCMessengerBlockLogoutPacket::CopyFrom(const GCMessengerBlockLogoutPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCMessengerBlockLogoutPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCMessengerBlockLogoutPacket::IsInitialized() const {
  return true;
}

void GCMessengerBlockLogoutPacket::InternalSwap(GCMessengerBlockLogoutPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GCMessengerBlockLogoutPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[62]);
}

// ===================================================================

class GCMessengerMobilePacket::_Internal {
 public:
};

GCMessengerMobilePacket::GCMessengerMobilePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCMessengerMobilePacket)
}
GCMessengerMobilePacket::GCMessengerMobilePacket(const GCMessengerMobilePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCMessengerMobilePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.state_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.state_ = from._impl_.state_;
  // @@protoc_insertion_point(copy_constructor:network.GCMessengerMobilePacket)
}

inline void GCMessengerMobilePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.state_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GCMessengerMobilePacket::~GCMessengerMobilePacket() {
  // @@protoc_insertion_point(destructor:network.GCMessengerMobilePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCMessengerMobilePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void GCMessengerMobilePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCMessengerMobilePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCMessengerMobilePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.state_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCMessengerMobilePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCMessengerMobilePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCMessengerMobilePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes name = 1;
  if (!this->_internal_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_name(), target);
  }

  // uint32 state = 2;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCMessengerMobilePacket)
  return target;
}

size_t GCMessengerMobilePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCMessengerMobilePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // uint32 state = 2;
  if (this->_internal_state() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCMessengerMobilePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCMessengerMobilePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCMessengerMobilePacket::GetClassData() const { return &_class_data_; }


void GCMessengerMobilePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCMessengerMobilePacket*>(&to_msg);
  auto& from = static_cast<const GCMessengerMobilePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCMessengerMobilePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_state() != 0) {
    _this->_internal_set_state(from._internal_state());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCMessengerMobilePacket::CopyFrom(const GCMessengerMobilePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCMessengerMobilePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCMessengerMobilePacket::IsInitialized() const {
  return true;
}

void GCMessengerMobilePacket::InternalSwap(GCMessengerMobilePacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.state_, other->_impl_.state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GCMessengerMobilePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[63]);
}

// ===================================================================

class GCWalkModePacket::_Internal {
 public:
};

GCWalkModePacket::GCWalkModePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCWalkModePacket)
}
GCWalkModePacket::GCWalkModePacket(const GCWalkModePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCWalkModePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.vid_){}
    , decltype(_impl_.mode_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.vid_, &from._impl_.vid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.mode_) -
    reinterpret_cast<char*>(&_impl_.vid_)) + sizeof(_impl_.mode_));
  // @@protoc_insertion_point(copy_constructor:network.GCWalkModePacket)
}

inline void GCWalkModePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.vid_){0u}
    , decltype(_impl_.mode_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCWalkModePacket::~GCWalkModePacket() {
  // @@protoc_insertion_point(destructor:network.GCWalkModePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCWalkModePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GCWalkModePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCWalkModePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCWalkModePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.vid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.mode_) -
      reinterpret_cast<char*>(&_impl_.vid_)) + sizeof(_impl_.mode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCWalkModePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 vid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.vid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 mode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCWalkModePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCWalkModePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 vid = 1;
  if (this->_internal_vid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_vid(), target);
  }

  // uint32 mode = 2;
  if (this->_internal_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCWalkModePacket)
  return target;
}

size_t GCWalkModePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCWalkModePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 vid = 1;
  if (this->_internal_vid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_vid());
  }

  // uint32 mode = 2;
  if (this->_internal_mode() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_mode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCWalkModePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCWalkModePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCWalkModePacket::GetClassData() const { return &_class_data_; }


void GCWalkModePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCWalkModePacket*>(&to_msg);
  auto& from = static_cast<const GCWalkModePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCWalkModePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_vid() != 0) {
    _this->_internal_set_vid(from._internal_vid());
  }
  if (from._internal_mode() != 0) {
    _this->_internal_set_mode(from._internal_mode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCWalkModePacket::CopyFrom(const GCWalkModePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCWalkModePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCWalkModePacket::IsInitialized() const {
  return true;
}

void GCWalkModePacket::InternalSwap(GCWalkModePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GCWalkModePacket, _impl_.mode_)
      + sizeof(GCWalkModePacket::_impl_.mode_)
      - PROTOBUF_FIELD_OFFSET(GCWalkModePacket, _impl_.vid_)>(
          reinterpret_cast<char*>(&_impl_.vid_),
          reinterpret_cast<char*>(&other->_impl_.vid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GCWalkModePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[64]);
}

// ===================================================================

class GCChangeSkillGroupPacket::_Internal {
 public:
};

GCChangeSkillGroupPacket::GCChangeSkillGroupPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCChangeSkillGroupPacket)
}
GCChangeSkillGroupPacket::GCChangeSkillGroupPacket(const GCChangeSkillGroupPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCChangeSkillGroupPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.skill_group_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.skill_group_ = from._impl_.skill_group_;
  // @@protoc_insertion_point(copy_constructor:network.GCChangeSkillGroupPacket)
}

inline void GCChangeSkillGroupPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.skill_group_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCChangeSkillGroupPacket::~GCChangeSkillGroupPacket() {
  // @@protoc_insertion_point(destructor:network.GCChangeSkillGroupPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCChangeSkillGroupPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GCChangeSkillGroupPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCChangeSkillGroupPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCChangeSkillGroupPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.skill_group_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCChangeSkillGroupPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 skill_group = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.skill_group_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCChangeSkillGroupPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCChangeSkillGroupPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 skill_group = 1;
  if (this->_internal_skill_group() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_skill_group(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCChangeSkillGroupPacket)
  return target;
}

size_t GCChangeSkillGroupPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCChangeSkillGroupPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 skill_group = 1;
  if (this->_internal_skill_group() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_skill_group());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCChangeSkillGroupPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCChangeSkillGroupPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCChangeSkillGroupPacket::GetClassData() const { return &_class_data_; }


void GCChangeSkillGroupPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCChangeSkillGroupPacket*>(&to_msg);
  auto& from = static_cast<const GCChangeSkillGroupPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCChangeSkillGroupPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_skill_group() != 0) {
    _this->_internal_set_skill_group(from._internal_skill_group());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCChangeSkillGroupPacket::CopyFrom(const GCChangeSkillGroupPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCChangeSkillGroupPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCChangeSkillGroupPacket::IsInitialized() const {
  return true;
}

void GCChangeSkillGroupPacket::InternalSwap(GCChangeSkillGroupPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.skill_group_, other->_impl_.skill_group_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GCChangeSkillGroupPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[65]);
}

// ===================================================================

class GCRefineInformationPacket::_Internal {
 public:
  static const ::network::TItemPos& pos(const GCRefineInformationPacket* msg);
  static const ::network::TRefineTable& refine_table(const GCRefineInformationPacket* msg);
};

const ::network::TItemPos&
GCRefineInformationPacket::_Internal::pos(const GCRefineInformationPacket* msg) {
  return *msg->_impl_.pos_;
}
const ::network::TRefineTable&
GCRefineInformationPacket::_Internal::refine_table(const GCRefineInformationPacket* msg) {
  return *msg->_impl_.refine_table_;
}
void GCRefineInformationPacket::clear_pos() {
  if (GetArenaForAllocation() == nullptr && _impl_.pos_ != nullptr) {
    delete _impl_.pos_;
  }
  _impl_.pos_ = nullptr;
}
void GCRefineInformationPacket::clear_refine_table() {
  if (GetArenaForAllocation() == nullptr && _impl_.refine_table_ != nullptr) {
    delete _impl_.refine_table_;
  }
  _impl_.refine_table_ = nullptr;
}
GCRefineInformationPacket::GCRefineInformationPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCRefineInformationPacket)
}
GCRefineInformationPacket::GCRefineInformationPacket(const GCRefineInformationPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCRefineInformationPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pos_){nullptr}
    , decltype(_impl_.refine_table_){nullptr}
    , decltype(_impl_.type_){}
    , decltype(_impl_.src_vnum_){}
    , decltype(_impl_.result_vnum_){}
    , decltype(_impl_.can_fast_refine_){}
    , decltype(_impl_.cost_){}
    , decltype(_impl_.prob_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pos()) {
    _this->_impl_.pos_ = new ::network::TItemPos(*from._impl_.pos_);
  }
  if (from._internal_has_refine_table()) {
    _this->_impl_.refine_table_ = new ::network::TRefineTable(*from._impl_.refine_table_);
  }
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.prob_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.prob_));
  // @@protoc_insertion_point(copy_constructor:network.GCRefineInformationPacket)
}

inline void GCRefineInformationPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pos_){nullptr}
    , decltype(_impl_.refine_table_){nullptr}
    , decltype(_impl_.type_){0u}
    , decltype(_impl_.src_vnum_){0u}
    , decltype(_impl_.result_vnum_){0u}
    , decltype(_impl_.can_fast_refine_){false}
    , decltype(_impl_.cost_){uint64_t{0u}}
    , decltype(_impl_.prob_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCRefineInformationPacket::~GCRefineInformationPacket() {
  // @@protoc_insertion_point(destructor:network.GCRefineInformationPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCRefineInformationPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.pos_;
  if (this != internal_default_instance()) delete _impl_.refine_table_;
}

void GCRefineInformationPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCRefineInformationPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCRefineInformationPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.pos_ != nullptr) {
    delete _impl_.pos_;
  }
  _impl_.pos_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.refine_table_ != nullptr) {
    delete _impl_.refine_table_;
  }
  _impl_.refine_table_ = nullptr;
  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.prob_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.prob_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCRefineInformationPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .network.TItemPos pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 src_vnum = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.src_vnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 result_vnum = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.result_vnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .network.TRefineTable refine_table = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_refine_table(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool can_fast_refine = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.can_fast_refine_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 cost = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.cost_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 prob = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.prob_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCRefineInformationPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCRefineInformationPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .network.TItemPos pos = 1;
  if (this->_internal_has_pos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::pos(this),
        _Internal::pos(this).GetCachedSize(), target, stream);
  }

  // uint32 type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_type(), target);
  }

  // uint32 src_vnum = 3;
  if (this->_internal_src_vnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_src_vnum(), target);
  }

  // uint32 result_vnum = 4;
  if (this->_internal_result_vnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_result_vnum(), target);
  }

  // .network.TRefineTable refine_table = 5;
  if (this->_internal_has_refine_table()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::refine_table(this),
        _Internal::refine_table(this).GetCachedSize(), target, stream);
  }

  // bool can_fast_refine = 6;
  if (this->_internal_can_fast_refine() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_can_fast_refine(), target);
  }

  // uint64 cost = 7;
  if (this->_internal_cost() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(7, this->_internal_cost(), target);
  }

  // uint32 prob = 8;
  if (this->_internal_prob() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_prob(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCRefineInformationPacket)
  return target;
}

size_t GCRefineInformationPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCRefineInformationPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .network.TItemPos pos = 1;
  if (this->_internal_has_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pos_);
  }

  // .network.TRefineTable refine_table = 5;
  if (this->_internal_has_refine_table()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.refine_table_);
  }

  // uint32 type = 2;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
  }

  // uint32 src_vnum = 3;
  if (this->_internal_src_vnum() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_src_vnum());
  }

  // uint32 result_vnum = 4;
  if (this->_internal_result_vnum() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_result_vnum());
  }

  // bool can_fast_refine = 6;
  if (this->_internal_can_fast_refine() != 0) {
    total_size += 1 + 1;
  }

  // uint64 cost = 7;
  if (this->_internal_cost() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_cost());
  }

  // uint32 prob = 8;
  if (this->_internal_prob() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_prob());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCRefineInformationPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCRefineInformationPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCRefineInformationPacket::GetClassData() const { return &_class_data_; }


void GCRefineInformationPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCRefineInformationPacket*>(&to_msg);
  auto& from = static_cast<const GCRefineInformationPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCRefineInformationPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_pos()) {
    _this->_internal_mutable_pos()->::network::TItemPos::MergeFrom(
        from._internal_pos());
  }
  if (from._internal_has_refine_table()) {
    _this->_internal_mutable_refine_table()->::network::TRefineTable::MergeFrom(
        from._internal_refine_table());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_src_vnum() != 0) {
    _this->_internal_set_src_vnum(from._internal_src_vnum());
  }
  if (from._internal_result_vnum() != 0) {
    _this->_internal_set_result_vnum(from._internal_result_vnum());
  }
  if (from._internal_can_fast_refine() != 0) {
    _this->_internal_set_can_fast_refine(from._internal_can_fast_refine());
  }
  if (from._internal_cost() != 0) {
    _this->_internal_set_cost(from._internal_cost());
  }
  if (from._internal_prob() != 0) {
    _this->_internal_set_prob(from._internal_prob());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCRefineInformationPacket::CopyFrom(const GCRefineInformationPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCRefineInformationPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCRefineInformationPacket::IsInitialized() const {
  return true;
}

void GCRefineInformationPacket::InternalSwap(GCRefineInformationPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GCRefineInformationPacket, _impl_.prob_)
      + sizeof(GCRefineInformationPacket::_impl_.prob_)
      - PROTOBUF_FIELD_OFFSET(GCRefineInformationPacket, _impl_.pos_)>(
          reinterpret_cast<char*>(&_impl_.pos_),
          reinterpret_cast<char*>(&other->_impl_.pos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GCRefineInformationPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[66]);
}

// ===================================================================

class GCSpecialEffectPacket::_Internal {
 public:
};

GCSpecialEffectPacket::GCSpecialEffectPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCSpecialEffectPacket)
}
GCSpecialEffectPacket::GCSpecialEffectPacket(const GCSpecialEffectPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCSpecialEffectPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , decltype(_impl_.vid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.vid_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.vid_));
  // @@protoc_insertion_point(copy_constructor:network.GCSpecialEffectPacket)
}

inline void GCSpecialEffectPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){0u}
    , decltype(_impl_.vid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCSpecialEffectPacket::~GCSpecialEffectPacket() {
  // @@protoc_insertion_point(destructor:network.GCSpecialEffectPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCSpecialEffectPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GCSpecialEffectPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCSpecialEffectPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCSpecialEffectPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.vid_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.vid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCSpecialEffectPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 vid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.vid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCSpecialEffectPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCSpecialEffectPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // uint32 vid = 2;
  if (this->_internal_vid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_vid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCSpecialEffectPacket)
  return target;
}

size_t GCSpecialEffectPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCSpecialEffectPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
  }

  // uint32 vid = 2;
  if (this->_internal_vid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_vid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCSpecialEffectPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCSpecialEffectPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCSpecialEffectPacket::GetClassData() const { return &_class_data_; }


void GCSpecialEffectPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCSpecialEffectPacket*>(&to_msg);
  auto& from = static_cast<const GCSpecialEffectPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCSpecialEffectPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_vid() != 0) {
    _this->_internal_set_vid(from._internal_vid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCSpecialEffectPacket::CopyFrom(const GCSpecialEffectPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCSpecialEffectPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCSpecialEffectPacket::IsInitialized() const {
  return true;
}

void GCSpecialEffectPacket::InternalSwap(GCSpecialEffectPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GCSpecialEffectPacket, _impl_.vid_)
      + sizeof(GCSpecialEffectPacket::_impl_.vid_)
      - PROTOBUF_FIELD_OFFSET(GCSpecialEffectPacket, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GCSpecialEffectPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[67]);
}

// ===================================================================

class GCNPCListPacket_Position::_Internal {
 public:
};

GCNPCListPacket_Position::GCNPCListPacket_Position(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCNPCListPacket.Position)
}
GCNPCListPacket_Position::GCNPCListPacket_Position(const GCNPCListPacket_Position& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCNPCListPacket_Position* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.race_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.race_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.race_));
  // @@protoc_insertion_point(copy_constructor:network.GCNPCListPacket.Position)
}

inline void GCNPCListPacket_Position::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.type_){0u}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.race_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GCNPCListPacket_Position::~GCNPCListPacket_Position() {
  // @@protoc_insertion_point(destructor:network.GCNPCListPacket.Position)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCNPCListPacket_Position::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void GCNPCListPacket_Position::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCNPCListPacket_Position::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCNPCListPacket.Position)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.race_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.race_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCNPCListPacket_Position::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 x = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 y = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 race = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.race_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCNPCListPacket_Position::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCNPCListPacket.Position)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // bytes name = 2;
  if (!this->_internal_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_name(), target);
  }

  // int32 x = 3;
  if (this->_internal_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_x(), target);
  }

  // int32 y = 4;
  if (this->_internal_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_y(), target);
  }

  // uint32 race = 5;
  if (this->_internal_race() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_race(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCNPCListPacket.Position)
  return target;
}

size_t GCNPCListPacket_Position::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCNPCListPacket.Position)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // uint32 type = 1;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
  }

  // int32 x = 3;
  if (this->_internal_x() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x());
  }

  // int32 y = 4;
  if (this->_internal_y() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y());
  }

  // uint32 race = 5;
  if (this->_internal_race() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_race());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCNPCListPacket_Position::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCNPCListPacket_Position::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCNPCListPacket_Position::GetClassData() const { return &_class_data_; }


void GCNPCListPacket_Position::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCNPCListPacket_Position*>(&to_msg);
  auto& from = static_cast<const GCNPCListPacket_Position&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCNPCListPacket.Position)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_x() != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  if (from._internal_y() != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  if (from._internal_race() != 0) {
    _this->_internal_set_race(from._internal_race());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCNPCListPacket_Position::CopyFrom(const GCNPCListPacket_Position& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCNPCListPacket.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCNPCListPacket_Position::IsInitialized() const {
  return true;
}

void GCNPCListPacket_Position::InternalSwap(GCNPCListPacket_Position* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GCNPCListPacket_Position, _impl_.race_)
      + sizeof(GCNPCListPacket_Position::_impl_.race_)
      - PROTOBUF_FIELD_OFFSET(GCNPCListPacket_Position, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GCNPCListPacket_Position::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[68]);
}

// ===================================================================

class GCNPCListPacket::_Internal {
 public:
};

GCNPCListPacket::GCNPCListPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCNPCListPacket)
}
GCNPCListPacket::GCNPCListPacket(const GCNPCListPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCNPCListPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.positions_){from._impl_.positions_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:network.GCNPCListPacket)
}

inline void GCNPCListPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.positions_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCNPCListPacket::~GCNPCListPacket() {
  // @@protoc_insertion_point(destructor:network.GCNPCListPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCNPCListPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.positions_.~RepeatedPtrField();
}

void GCNPCListPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCNPCListPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCNPCListPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.positions_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCNPCListPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .network.GCNPCListPacket.Position positions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_positions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCNPCListPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCNPCListPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .network.GCNPCListPacket.Position positions = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_positions_size()); i < n; i++) {
    const auto& repfield = this->_internal_positions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCNPCListPacket)
  return target;
}

size_t GCNPCListPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCNPCListPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .network.GCNPCListPacket.Position positions = 1;
  total_size += 1UL * this->_internal_positions_size();
  for (const auto& msg : this->_impl_.positions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCNPCListPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCNPCListPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCNPCListPacket::GetClassData() const { return &_class_data_; }


void GCNPCListPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCNPCListPacket*>(&to_msg);
  auto& from = static_cast<const GCNPCListPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCNPCListPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.positions_.MergeFrom(from._impl_.positions_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCNPCListPacket::CopyFrom(const GCNPCListPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCNPCListPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCNPCListPacket::IsInitialized() const {
  return true;
}

void GCNPCListPacket::InternalSwap(GCNPCListPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.positions_.InternalSwap(&other->_impl_.positions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GCNPCListPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[69]);
}

// ===================================================================

class GCViewEquipPacket::_Internal {
 public:
};

void GCViewEquipPacket::clear_equips() {
  _impl_.equips_.Clear();
}
GCViewEquipPacket::GCViewEquipPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCViewEquipPacket)
}
GCViewEquipPacket::GCViewEquipPacket(const GCViewEquipPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCViewEquipPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.equips_){from._impl_.equips_}
    , decltype(_impl_.vid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.vid_ = from._impl_.vid_;
  // @@protoc_insertion_point(copy_constructor:network.GCViewEquipPacket)
}

inline void GCViewEquipPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.equips_){arena}
    , decltype(_impl_.vid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCViewEquipPacket::~GCViewEquipPacket() {
  // @@protoc_insertion_point(destructor:network.GCViewEquipPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCViewEquipPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.equips_.~RepeatedPtrField();
}

void GCViewEquipPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCViewEquipPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCViewEquipPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.equips_.Clear();
  _impl_.vid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCViewEquipPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 vid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.vid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .network.TItemData equips = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_equips(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCViewEquipPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCViewEquipPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 vid = 1;
  if (this->_internal_vid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_vid(), target);
  }

  // repeated .network.TItemData equips = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_equips_size()); i < n; i++) {
    const auto& repfield = this->_internal_equips(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCViewEquipPacket)
  return target;
}

size_t GCViewEquipPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCViewEquipPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .network.TItemData equips = 2;
  total_size += 1UL * this->_internal_equips_size();
  for (const auto& msg : this->_impl_.equips_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 vid = 1;
  if (this->_internal_vid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_vid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCViewEquipPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCViewEquipPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCViewEquipPacket::GetClassData() const { return &_class_data_; }


void GCViewEquipPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCViewEquipPacket*>(&to_msg);
  auto& from = static_cast<const GCViewEquipPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCViewEquipPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.equips_.MergeFrom(from._impl_.equips_);
  if (from._internal_vid() != 0) {
    _this->_internal_set_vid(from._internal_vid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCViewEquipPacket::CopyFrom(const GCViewEquipPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCViewEquipPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCViewEquipPacket::IsInitialized() const {
  return true;
}

void GCViewEquipPacket::InternalSwap(GCViewEquipPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.equips_.InternalSwap(&other->_impl_.equips_);
  swap(_impl_.vid_, other->_impl_.vid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GCViewEquipPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[70]);
}

// ===================================================================

class GCLandListPacket::_Internal {
 public:
};

void GCLandListPacket::clear_lands() {
  _impl_.lands_.Clear();
}
GCLandListPacket::GCLandListPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCLandListPacket)
}
GCLandListPacket::GCLandListPacket(const GCLandListPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCLandListPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.lands_){from._impl_.lands_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:network.GCLandListPacket)
}

inline void GCLandListPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.lands_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCLandListPacket::~GCLandListPacket() {
  // @@protoc_insertion_point(destructor:network.GCLandListPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCLandListPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.lands_.~RepeatedPtrField();
}

void GCLandListPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCLandListPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCLandListPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.lands_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCLandListPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .network.TBuildingLand lands = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lands(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCLandListPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCLandListPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .network.TBuildingLand lands = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_lands_size()); i < n; i++) {
    const auto& repfield = this->_internal_lands(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCLandListPacket)
  return target;
}

size_t GCLandListPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCLandListPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .network.TBuildingLand lands = 1;
  total_size += 1UL * this->_internal_lands_size();
  for (const auto& msg : this->_impl_.lands_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCLandListPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCLandListPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCLandListPacket::GetClassData() const { return &_class_data_; }


void GCLandListPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCLandListPacket*>(&to_msg);
  auto& from = static_cast<const GCLandListPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCLandListPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.lands_.MergeFrom(from._impl_.lands_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCLandListPacket::CopyFrom(const GCLandListPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCLandListPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCLandListPacket::IsInitialized() const {
  return true;
}

void GCLandListPacket::InternalSwap(GCLandListPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.lands_.InternalSwap(&other->_impl_.lands_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GCLandListPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[71]);
}

// ===================================================================

class GCTargetCreatePacket::_Internal {
 public:
};

GCTargetCreatePacket::GCTargetCreatePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCTargetCreatePacket)
}
GCTargetCreatePacket::GCTargetCreatePacket(const GCTargetCreatePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCTargetCreatePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.vid_){}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.type_));
  // @@protoc_insertion_point(copy_constructor:network.GCTargetCreatePacket)
}

inline void GCTargetCreatePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.id_){0}
    , decltype(_impl_.vid_){0u}
    , decltype(_impl_.type_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GCTargetCreatePacket::~GCTargetCreatePacket() {
  // @@protoc_insertion_point(destructor:network.GCTargetCreatePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCTargetCreatePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void GCTargetCreatePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCTargetCreatePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCTargetCreatePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.type_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCTargetCreatePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 vid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.vid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCTargetCreatePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCTargetCreatePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // bytes name = 2;
  if (!this->_internal_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_name(), target);
  }

  // uint32 vid = 3;
  if (this->_internal_vid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_vid(), target);
  }

  // uint32 type = 4;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCTargetCreatePacket)
  return target;
}

size_t GCTargetCreatePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCTargetCreatePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  // uint32 vid = 3;
  if (this->_internal_vid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_vid());
  }

  // uint32 type = 4;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCTargetCreatePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCTargetCreatePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCTargetCreatePacket::GetClassData() const { return &_class_data_; }


void GCTargetCreatePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCTargetCreatePacket*>(&to_msg);
  auto& from = static_cast<const GCTargetCreatePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCTargetCreatePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_vid() != 0) {
    _this->_internal_set_vid(from._internal_vid());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCTargetCreatePacket::CopyFrom(const GCTargetCreatePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCTargetCreatePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCTargetCreatePacket::IsInitialized() const {
  return true;
}

void GCTargetCreatePacket::InternalSwap(GCTargetCreatePacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GCTargetCreatePacket, _impl_.type_)
      + sizeof(GCTargetCreatePacket::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(GCTargetCreatePacket, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GCTargetCreatePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[72]);
}

// ===================================================================

class GCTargetUpdatePacket::_Internal {
 public:
};

GCTargetUpdatePacket::GCTargetUpdatePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCTargetUpdatePacket)
}
GCTargetUpdatePacket::GCTargetUpdatePacket(const GCTargetUpdatePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCTargetUpdatePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.y_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.y_));
  // @@protoc_insertion_point(copy_constructor:network.GCTargetUpdatePacket)
}

inline void GCTargetUpdatePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){0}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCTargetUpdatePacket::~GCTargetUpdatePacket() {
  // @@protoc_insertion_point(destructor:network.GCTargetUpdatePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCTargetUpdatePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GCTargetUpdatePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCTargetUpdatePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCTargetUpdatePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.y_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCTargetUpdatePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCTargetUpdatePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCTargetUpdatePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int32 x = 2;
  if (this->_internal_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_x(), target);
  }

  // int32 y = 3;
  if (this->_internal_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCTargetUpdatePacket)
  return target;
}

size_t GCTargetUpdatePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCTargetUpdatePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  // int32 x = 2;
  if (this->_internal_x() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x());
  }

  // int32 y = 3;
  if (this->_internal_y() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCTargetUpdatePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCTargetUpdatePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCTargetUpdatePacket::GetClassData() const { return &_class_data_; }


void GCTargetUpdatePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCTargetUpdatePacket*>(&to_msg);
  auto& from = static_cast<const GCTargetUpdatePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCTargetUpdatePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_x() != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  if (from._internal_y() != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCTargetUpdatePacket::CopyFrom(const GCTargetUpdatePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCTargetUpdatePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCTargetUpdatePacket::IsInitialized() const {
  return true;
}

void GCTargetUpdatePacket::InternalSwap(GCTargetUpdatePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GCTargetUpdatePacket, _impl_.y_)
      + sizeof(GCTargetUpdatePacket::_impl_.y_)
      - PROTOBUF_FIELD_OFFSET(GCTargetUpdatePacket, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GCTargetUpdatePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[73]);
}

// ===================================================================

class GCTargetDeletePacket::_Internal {
 public:
};

GCTargetDeletePacket::GCTargetDeletePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCTargetDeletePacket)
}
GCTargetDeletePacket::GCTargetDeletePacket(const GCTargetDeletePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCTargetDeletePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:network.GCTargetDeletePacket)
}

inline void GCTargetDeletePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCTargetDeletePacket::~GCTargetDeletePacket() {
  // @@protoc_insertion_point(destructor:network.GCTargetDeletePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCTargetDeletePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GCTargetDeletePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCTargetDeletePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCTargetDeletePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCTargetDeletePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCTargetDeletePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCTargetDeletePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCTargetDeletePacket)
  return target;
}

size_t GCTargetDeletePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCTargetDeletePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCTargetDeletePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCTargetDeletePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCTargetDeletePacket::GetClassData() const { return &_class_data_; }


void GCTargetDeletePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCTargetDeletePacket*>(&to_msg);
  auto& from = static_cast<const GCTargetDeletePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCTargetDeletePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCTargetDeletePacket::CopyFrom(const GCTargetDeletePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCTargetDeletePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCTargetDeletePacket::IsInitialized() const {
  return true;
}

void GCTargetDeletePacket::InternalSwap(GCTargetDeletePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GCTargetDeletePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[74]);
}

// ===================================================================

class GCAffectAddPacket::_Internal {
 public:
  static const ::TPacketAffectElement& elem(const GCAffectAddPacket* msg);
};

const ::TPacketAffectElement&
GCAffectAddPacket::_Internal::elem(const GCAffectAddPacket* msg) {
  return *msg->_impl_.elem_;
}
void GCAffectAddPacket::clear_elem() {
  if (GetArenaForAllocation() == nullptr && _impl_.elem_ != nullptr) {
    delete _impl_.elem_;
  }
  _impl_.elem_ = nullptr;
}
GCAffectAddPacket::GCAffectAddPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCAffectAddPacket)
}
GCAffectAddPacket::GCAffectAddPacket(const GCAffectAddPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCAffectAddPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.elem_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_elem()) {
    _this->_impl_.elem_ = new ::TPacketAffectElement(*from._impl_.elem_);
  }
  // @@protoc_insertion_point(copy_constructor:network.GCAffectAddPacket)
}

inline void GCAffectAddPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.elem_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCAffectAddPacket::~GCAffectAddPacket() {
  // @@protoc_insertion_point(destructor:network.GCAffectAddPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCAffectAddPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.elem_;
}

void GCAffectAddPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCAffectAddPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCAffectAddPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.elem_ != nullptr) {
    delete _impl_.elem_;
  }
  _impl_.elem_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCAffectAddPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .TPacketAffectElement elem = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_elem(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCAffectAddPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCAffectAddPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .TPacketAffectElement elem = 1;
  if (this->_internal_has_elem()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::elem(this),
        _Internal::elem(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCAffectAddPacket)
  return target;
}

size_t GCAffectAddPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCAffectAddPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .TPacketAffectElement elem = 1;
  if (this->_internal_has_elem()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.elem_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCAffectAddPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCAffectAddPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCAffectAddPacket::GetClassData() const { return &_class_data_; }


void GCAffectAddPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCAffectAddPacket*>(&to_msg);
  auto& from = static_cast<const GCAffectAddPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCAffectAddPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_elem()) {
    _this->_internal_mutable_elem()->::TPacketAffectElement::MergeFrom(
        from._internal_elem());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCAffectAddPacket::CopyFrom(const GCAffectAddPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCAffectAddPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCAffectAddPacket::IsInitialized() const {
  return true;
}

void GCAffectAddPacket::InternalSwap(GCAffectAddPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.elem_, other->_impl_.elem_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GCAffectAddPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[75]);
}

// ===================================================================

class GCAffectRemovePacket::_Internal {
 public:
};

GCAffectRemovePacket::GCAffectRemovePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCAffectRemovePacket)
}
GCAffectRemovePacket::GCAffectRemovePacket(const GCAffectRemovePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCAffectRemovePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , decltype(_impl_.apply_on_){}
    , decltype(_impl_.apply_value_){}
    , decltype(_impl_.flag_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.flag_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.flag_));
  // @@protoc_insertion_point(copy_constructor:network.GCAffectRemovePacket)
}

inline void GCAffectRemovePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){0u}
    , decltype(_impl_.apply_on_){0u}
    , decltype(_impl_.apply_value_){0}
    , decltype(_impl_.flag_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCAffectRemovePacket::~GCAffectRemovePacket() {
  // @@protoc_insertion_point(destructor:network.GCAffectRemovePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCAffectRemovePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GCAffectRemovePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCAffectRemovePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCAffectRemovePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.flag_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.flag_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCAffectRemovePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 apply_on = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.apply_on_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 apply_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.apply_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 flag = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCAffectRemovePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCAffectRemovePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // uint32 apply_on = 2;
  if (this->_internal_apply_on() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_apply_on(), target);
  }

  // int32 apply_value = 3;
  if (this->_internal_apply_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_apply_value(), target);
  }

  // uint32 flag = 4;
  if (this->_internal_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_flag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCAffectRemovePacket)
  return target;
}

size_t GCAffectRemovePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCAffectRemovePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
  }

  // uint32 apply_on = 2;
  if (this->_internal_apply_on() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_apply_on());
  }

  // int32 apply_value = 3;
  if (this->_internal_apply_value() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_apply_value());
  }

  // uint32 flag = 4;
  if (this->_internal_flag() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_flag());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCAffectRemovePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCAffectRemovePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCAffectRemovePacket::GetClassData() const { return &_class_data_; }


void GCAffectRemovePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCAffectRemovePacket*>(&to_msg);
  auto& from = static_cast<const GCAffectRemovePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCAffectRemovePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_apply_on() != 0) {
    _this->_internal_set_apply_on(from._internal_apply_on());
  }
  if (from._internal_apply_value() != 0) {
    _this->_internal_set_apply_value(from._internal_apply_value());
  }
  if (from._internal_flag() != 0) {
    _this->_internal_set_flag(from._internal_flag());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCAffectRemovePacket::CopyFrom(const GCAffectRemovePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCAffectRemovePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCAffectRemovePacket::IsInitialized() const {
  return true;
}

void GCAffectRemovePacket::InternalSwap(GCAffectRemovePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GCAffectRemovePacket, _impl_.flag_)
      + sizeof(GCAffectRemovePacket::_impl_.flag_)
      - PROTOBUF_FIELD_OFFSET(GCAffectRemovePacket, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GCAffectRemovePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[76]);
}

// ===================================================================

class GCMallOpenPacket::_Internal {
 public:
};

GCMallOpenPacket::GCMallOpenPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCMallOpenPacket)
}
GCMallOpenPacket::GCMallOpenPacket(const GCMallOpenPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCMallOpenPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.size_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.size_ = from._impl_.size_;
  // @@protoc_insertion_point(copy_constructor:network.GCMallOpenPacket)
}

inline void GCMallOpenPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.size_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCMallOpenPacket::~GCMallOpenPacket() {
  // @@protoc_insertion_point(destructor:network.GCMallOpenPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCMallOpenPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GCMallOpenPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCMallOpenPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCMallOpenPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.size_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCMallOpenPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCMallOpenPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCMallOpenPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 size = 1;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCMallOpenPacket)
  return target;
}

size_t GCMallOpenPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCMallOpenPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 size = 1;
  if (this->_internal_size() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCMallOpenPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCMallOpenPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCMallOpenPacket::GetClassData() const { return &_class_data_; }


void GCMallOpenPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCMallOpenPacket*>(&to_msg);
  auto& from = static_cast<const GCMallOpenPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCMallOpenPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_size() != 0) {
    _this->_internal_set_size(from._internal_size());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCMallOpenPacket::CopyFrom(const GCMallOpenPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCMallOpenPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCMallOpenPacket::IsInitialized() const {
  return true;
}

void GCMallOpenPacket::InternalSwap(GCMallOpenPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.size_, other->_impl_.size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GCMallOpenPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[77]);
}

// ===================================================================

class GCLoverInfoPacket::_Internal {
 public:
};

GCLoverInfoPacket::GCLoverInfoPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCLoverInfoPacket)
}
GCLoverInfoPacket::GCLoverInfoPacket(const GCLoverInfoPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCLoverInfoPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.love_point_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.love_point_ = from._impl_.love_point_;
  // @@protoc_insertion_point(copy_constructor:network.GCLoverInfoPacket)
}

inline void GCLoverInfoPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.love_point_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GCLoverInfoPacket::~GCLoverInfoPacket() {
  // @@protoc_insertion_point(destructor:network.GCLoverInfoPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCLoverInfoPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void GCLoverInfoPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCLoverInfoPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCLoverInfoPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.love_point_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCLoverInfoPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 love_point = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.love_point_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCLoverInfoPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCLoverInfoPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes name = 1;
  if (!this->_internal_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_name(), target);
  }

  // uint32 love_point = 2;
  if (this->_internal_love_point() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_love_point(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCLoverInfoPacket)
  return target;
}

size_t GCLoverInfoPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCLoverInfoPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // uint32 love_point = 2;
  if (this->_internal_love_point() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_love_point());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCLoverInfoPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCLoverInfoPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCLoverInfoPacket::GetClassData() const { return &_class_data_; }


void GCLoverInfoPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCLoverInfoPacket*>(&to_msg);
  auto& from = static_cast<const GCLoverInfoPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCLoverInfoPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_love_point() != 0) {
    _this->_internal_set_love_point(from._internal_love_point());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCLoverInfoPacket::CopyFrom(const GCLoverInfoPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCLoverInfoPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCLoverInfoPacket::IsInitialized() const {
  return true;
}

void GCLoverInfoPacket::InternalSwap(GCLoverInfoPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.love_point_, other->_impl_.love_point_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GCLoverInfoPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[78]);
}

// ===================================================================

class GCLoverPointUpdatePacket::_Internal {
 public:
};

GCLoverPointUpdatePacket::GCLoverPointUpdatePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCLoverPointUpdatePacket)
}
GCLoverPointUpdatePacket::GCLoverPointUpdatePacket(const GCLoverPointUpdatePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCLoverPointUpdatePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.love_point_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.love_point_ = from._impl_.love_point_;
  // @@protoc_insertion_point(copy_constructor:network.GCLoverPointUpdatePacket)
}

inline void GCLoverPointUpdatePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.love_point_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCLoverPointUpdatePacket::~GCLoverPointUpdatePacket() {
  // @@protoc_insertion_point(destructor:network.GCLoverPointUpdatePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCLoverPointUpdatePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GCLoverPointUpdatePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCLoverPointUpdatePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCLoverPointUpdatePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.love_point_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCLoverPointUpdatePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 love_point = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.love_point_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCLoverPointUpdatePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCLoverPointUpdatePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 love_point = 1;
  if (this->_internal_love_point() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_love_point(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCLoverPointUpdatePacket)
  return target;
}

size_t GCLoverPointUpdatePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCLoverPointUpdatePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 love_point = 1;
  if (this->_internal_love_point() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_love_point());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCLoverPointUpdatePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCLoverPointUpdatePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCLoverPointUpdatePacket::GetClassData() const { return &_class_data_; }


void GCLoverPointUpdatePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCLoverPointUpdatePacket*>(&to_msg);
  auto& from = static_cast<const GCLoverPointUpdatePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCLoverPointUpdatePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_love_point() != 0) {
    _this->_internal_set_love_point(from._internal_love_point());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCLoverPointUpdatePacket::CopyFrom(const GCLoverPointUpdatePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCLoverPointUpdatePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCLoverPointUpdatePacket::IsInitialized() const {
  return true;
}

void GCLoverPointUpdatePacket::InternalSwap(GCLoverPointUpdatePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.love_point_, other->_impl_.love_point_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GCLoverPointUpdatePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[79]);
}

// ===================================================================

class GCDigMotionPacket::_Internal {
 public:
};

GCDigMotionPacket::GCDigMotionPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCDigMotionPacket)
}
GCDigMotionPacket::GCDigMotionPacket(const GCDigMotionPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCDigMotionPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.vid_){}
    , decltype(_impl_.target_vid_){}
    , decltype(_impl_.count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.vid_, &from._impl_.vid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.count_) -
    reinterpret_cast<char*>(&_impl_.vid_)) + sizeof(_impl_.count_));
  // @@protoc_insertion_point(copy_constructor:network.GCDigMotionPacket)
}

inline void GCDigMotionPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.vid_){0u}
    , decltype(_impl_.target_vid_){0u}
    , decltype(_impl_.count_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCDigMotionPacket::~GCDigMotionPacket() {
  // @@protoc_insertion_point(destructor:network.GCDigMotionPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCDigMotionPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GCDigMotionPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCDigMotionPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCDigMotionPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.vid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.count_) -
      reinterpret_cast<char*>(&_impl_.vid_)) + sizeof(_impl_.count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCDigMotionPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 vid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.vid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 target_vid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.target_vid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCDigMotionPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCDigMotionPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 vid = 1;
  if (this->_internal_vid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_vid(), target);
  }

  // uint32 target_vid = 2;
  if (this->_internal_target_vid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_target_vid(), target);
  }

  // uint32 count = 3;
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCDigMotionPacket)
  return target;
}

size_t GCDigMotionPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCDigMotionPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 vid = 1;
  if (this->_internal_vid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_vid());
  }

  // uint32 target_vid = 2;
  if (this->_internal_target_vid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_target_vid());
  }

  // uint32 count = 3;
  if (this->_internal_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCDigMotionPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCDigMotionPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCDigMotionPacket::GetClassData() const { return &_class_data_; }


void GCDigMotionPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCDigMotionPacket*>(&to_msg);
  auto& from = static_cast<const GCDigMotionPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCDigMotionPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_vid() != 0) {
    _this->_internal_set_vid(from._internal_vid());
  }
  if (from._internal_target_vid() != 0) {
    _this->_internal_set_target_vid(from._internal_target_vid());
  }
  if (from._internal_count() != 0) {
    _this->_internal_set_count(from._internal_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCDigMotionPacket::CopyFrom(const GCDigMotionPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCDigMotionPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCDigMotionPacket::IsInitialized() const {
  return true;
}

void GCDigMotionPacket::InternalSwap(GCDigMotionPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GCDigMotionPacket, _impl_.count_)
      + sizeof(GCDigMotionPacket::_impl_.count_)
      - PROTOBUF_FIELD_OFFSET(GCDigMotionPacket, _impl_.vid_)>(
          reinterpret_cast<char*>(&_impl_.vid_),
          reinterpret_cast<char*>(&other->_impl_.vid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GCDigMotionPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[80]);
}

// ===================================================================

class GCSpecificEffectPacket::_Internal {
 public:
};

GCSpecificEffectPacket::GCSpecificEffectPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCSpecificEffectPacket)
}
GCSpecificEffectPacket::GCSpecificEffectPacket(const GCSpecificEffectPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCSpecificEffectPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.effect_file_){}
    , decltype(_impl_.vid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.effect_file_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.effect_file_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_effect_file().empty()) {
    _this->_impl_.effect_file_.Set(from._internal_effect_file(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.vid_ = from._impl_.vid_;
  // @@protoc_insertion_point(copy_constructor:network.GCSpecificEffectPacket)
}

inline void GCSpecificEffectPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.effect_file_){}
    , decltype(_impl_.vid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.effect_file_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.effect_file_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GCSpecificEffectPacket::~GCSpecificEffectPacket() {
  // @@protoc_insertion_point(destructor:network.GCSpecificEffectPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCSpecificEffectPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.effect_file_.Destroy();
}

void GCSpecificEffectPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCSpecificEffectPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCSpecificEffectPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.effect_file_.ClearToEmpty();
  _impl_.vid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCSpecificEffectPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 vid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.vid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes effect_file = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_effect_file();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCSpecificEffectPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCSpecificEffectPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 vid = 1;
  if (this->_internal_vid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_vid(), target);
  }

  // bytes effect_file = 2;
  if (!this->_internal_effect_file().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_effect_file(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCSpecificEffectPacket)
  return target;
}

size_t GCSpecificEffectPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCSpecificEffectPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes effect_file = 2;
  if (!this->_internal_effect_file().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_effect_file());
  }

  // uint32 vid = 1;
  if (this->_internal_vid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_vid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCSpecificEffectPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCSpecificEffectPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCSpecificEffectPacket::GetClassData() const { return &_class_data_; }


void GCSpecificEffectPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCSpecificEffectPacket*>(&to_msg);
  auto& from = static_cast<const GCSpecificEffectPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCSpecificEffectPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_effect_file().empty()) {
    _this->_internal_set_effect_file(from._internal_effect_file());
  }
  if (from._internal_vid() != 0) {
    _this->_internal_set_vid(from._internal_vid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCSpecificEffectPacket::CopyFrom(const GCSpecificEffectPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCSpecificEffectPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCSpecificEffectPacket::IsInitialized() const {
  return true;
}

void GCSpecificEffectPacket::InternalSwap(GCSpecificEffectPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.effect_file_, lhs_arena,
      &other->_impl_.effect_file_, rhs_arena
  );
  swap(_impl_.vid_, other->_impl_.vid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GCSpecificEffectPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[81]);
}

// ===================================================================

class GCDragonSoulRefinePacket::_Internal {
 public:
  static const ::network::TItemPos& cell(const GCDragonSoulRefinePacket* msg);
};

const ::network::TItemPos&
GCDragonSoulRefinePacket::_Internal::cell(const GCDragonSoulRefinePacket* msg) {
  return *msg->_impl_.cell_;
}
void GCDragonSoulRefinePacket::clear_cell() {
  if (GetArenaForAllocation() == nullptr && _impl_.cell_ != nullptr) {
    delete _impl_.cell_;
  }
  _impl_.cell_ = nullptr;
}
GCDragonSoulRefinePacket::GCDragonSoulRefinePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCDragonSoulRefinePacket)
}
GCDragonSoulRefinePacket::GCDragonSoulRefinePacket(const GCDragonSoulRefinePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCDragonSoulRefinePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.cell_){nullptr}
    , decltype(_impl_.sub_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_cell()) {
    _this->_impl_.cell_ = new ::network::TItemPos(*from._impl_.cell_);
  }
  _this->_impl_.sub_type_ = from._impl_.sub_type_;
  // @@protoc_insertion_point(copy_constructor:network.GCDragonSoulRefinePacket)
}

inline void GCDragonSoulRefinePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.cell_){nullptr}
    , decltype(_impl_.sub_type_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCDragonSoulRefinePacket::~GCDragonSoulRefinePacket() {
  // @@protoc_insertion_point(destructor:network.GCDragonSoulRefinePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCDragonSoulRefinePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.cell_;
}

void GCDragonSoulRefinePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCDragonSoulRefinePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCDragonSoulRefinePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.cell_ != nullptr) {
    delete _impl_.cell_;
  }
  _impl_.cell_ = nullptr;
  _impl_.sub_type_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCDragonSoulRefinePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 sub_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.sub_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .network.TItemPos cell = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCDragonSoulRefinePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCDragonSoulRefinePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 sub_type = 1;
  if (this->_internal_sub_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_sub_type(), target);
  }

  // .network.TItemPos cell = 2;
  if (this->_internal_has_cell()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::cell(this),
        _Internal::cell(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCDragonSoulRefinePacket)
  return target;
}

size_t GCDragonSoulRefinePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCDragonSoulRefinePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .network.TItemPos cell = 2;
  if (this->_internal_has_cell()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cell_);
  }

  // uint32 sub_type = 1;
  if (this->_internal_sub_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_sub_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCDragonSoulRefinePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCDragonSoulRefinePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCDragonSoulRefinePacket::GetClassData() const { return &_class_data_; }


void GCDragonSoulRefinePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCDragonSoulRefinePacket*>(&to_msg);
  auto& from = static_cast<const GCDragonSoulRefinePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCDragonSoulRefinePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_cell()) {
    _this->_internal_mutable_cell()->::network::TItemPos::MergeFrom(
        from._internal_cell());
  }
  if (from._internal_sub_type() != 0) {
    _this->_internal_set_sub_type(from._internal_sub_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCDragonSoulRefinePacket::CopyFrom(const GCDragonSoulRefinePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCDragonSoulRefinePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCDragonSoulRefinePacket::IsInitialized() const {
  return true;
}

void GCDragonSoulRefinePacket::InternalSwap(GCDragonSoulRefinePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GCDragonSoulRefinePacket, _impl_.sub_type_)
      + sizeof(GCDragonSoulRefinePacket::_impl_.sub_type_)
      - PROTOBUF_FIELD_OFFSET(GCDragonSoulRefinePacket, _impl_.cell_)>(
          reinterpret_cast<char*>(&_impl_.cell_),
          reinterpret_cast<char*>(&other->_impl_.cell_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GCDragonSoulRefinePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[82]);
}

// ===================================================================

class GCTeamlerStatusPacket::_Internal {
 public:
};

GCTeamlerStatusPacket::GCTeamlerStatusPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCTeamlerStatusPacket)
}
GCTeamlerStatusPacket::GCTeamlerStatusPacket(const GCTeamlerStatusPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCTeamlerStatusPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.is_online_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.is_online_ = from._impl_.is_online_;
  // @@protoc_insertion_point(copy_constructor:network.GCTeamlerStatusPacket)
}

inline void GCTeamlerStatusPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.is_online_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GCTeamlerStatusPacket::~GCTeamlerStatusPacket() {
  // @@protoc_insertion_point(destructor:network.GCTeamlerStatusPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCTeamlerStatusPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void GCTeamlerStatusPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCTeamlerStatusPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCTeamlerStatusPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.is_online_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCTeamlerStatusPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_online = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.is_online_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCTeamlerStatusPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCTeamlerStatusPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes name = 1;
  if (!this->_internal_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_name(), target);
  }

  // bool is_online = 2;
  if (this->_internal_is_online() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_is_online(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCTeamlerStatusPacket)
  return target;
}

size_t GCTeamlerStatusPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCTeamlerStatusPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // bool is_online = 2;
  if (this->_internal_is_online() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCTeamlerStatusPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCTeamlerStatusPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCTeamlerStatusPacket::GetClassData() const { return &_class_data_; }


void GCTeamlerStatusPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCTeamlerStatusPacket*>(&to_msg);
  auto& from = static_cast<const GCTeamlerStatusPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCTeamlerStatusPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_is_online() != 0) {
    _this->_internal_set_is_online(from._internal_is_online());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCTeamlerStatusPacket::CopyFrom(const GCTeamlerStatusPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCTeamlerStatusPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCTeamlerStatusPacket::IsInitialized() const {
  return true;
}

void GCTeamlerStatusPacket::InternalSwap(GCTeamlerStatusPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.is_online_, other->_impl_.is_online_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GCTeamlerStatusPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[83]);
}

// ===================================================================

class GCTeamlerShowPacket::_Internal {
 public:
};

GCTeamlerShowPacket::GCTeamlerShowPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCTeamlerShowPacket)
}
GCTeamlerShowPacket::GCTeamlerShowPacket(const GCTeamlerShowPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCTeamlerShowPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.is_show_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.is_show_ = from._impl_.is_show_;
  // @@protoc_insertion_point(copy_constructor:network.GCTeamlerShowPacket)
}

inline void GCTeamlerShowPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.is_show_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCTeamlerShowPacket::~GCTeamlerShowPacket() {
  // @@protoc_insertion_point(destructor:network.GCTeamlerShowPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCTeamlerShowPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GCTeamlerShowPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCTeamlerShowPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCTeamlerShowPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.is_show_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCTeamlerShowPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool is_show = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.is_show_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCTeamlerShowPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCTeamlerShowPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_show = 1;
  if (this->_internal_is_show() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_is_show(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCTeamlerShowPacket)
  return target;
}

size_t GCTeamlerShowPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCTeamlerShowPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool is_show = 1;
  if (this->_internal_is_show() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCTeamlerShowPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCTeamlerShowPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCTeamlerShowPacket::GetClassData() const { return &_class_data_; }


void GCTeamlerShowPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCTeamlerShowPacket*>(&to_msg);
  auto& from = static_cast<const GCTeamlerShowPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCTeamlerShowPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_is_show() != 0) {
    _this->_internal_set_is_show(from._internal_is_show());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCTeamlerShowPacket::CopyFrom(const GCTeamlerShowPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCTeamlerShowPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCTeamlerShowPacket::IsInitialized() const {
  return true;
}

void GCTeamlerShowPacket::InternalSwap(GCTeamlerShowPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.is_show_, other->_impl_.is_show_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GCTeamlerShowPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[84]);
}

// ===================================================================

class GCPartyPositionPacket::_Internal {
 public:
};

GCPartyPositionPacket::GCPartyPositionPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCPartyPositionPacket)
}
GCPartyPositionPacket::GCPartyPositionPacket(const GCPartyPositionPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCPartyPositionPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pid_){}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.pid_, &from._impl_.pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.y_) -
    reinterpret_cast<char*>(&_impl_.pid_)) + sizeof(_impl_.y_));
  // @@protoc_insertion_point(copy_constructor:network.GCPartyPositionPacket)
}

inline void GCPartyPositionPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pid_){0u}
    , decltype(_impl_.x_){0u}
    , decltype(_impl_.y_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCPartyPositionPacket::~GCPartyPositionPacket() {
  // @@protoc_insertion_point(destructor:network.GCPartyPositionPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCPartyPositionPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GCPartyPositionPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCPartyPositionPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCPartyPositionPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.pid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.y_) -
      reinterpret_cast<char*>(&_impl_.pid_)) + sizeof(_impl_.y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCPartyPositionPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCPartyPositionPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCPartyPositionPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pid(), target);
  }

  // uint32 x = 2;
  if (this->_internal_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_x(), target);
  }

  // uint32 y = 3;
  if (this->_internal_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCPartyPositionPacket)
  return target;
}

size_t GCPartyPositionPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCPartyPositionPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid());
  }

  // uint32 x = 2;
  if (this->_internal_x() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_x());
  }

  // uint32 y = 3;
  if (this->_internal_y() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_y());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCPartyPositionPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCPartyPositionPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCPartyPositionPacket::GetClassData() const { return &_class_data_; }


void GCPartyPositionPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCPartyPositionPacket*>(&to_msg);
  auto& from = static_cast<const GCPartyPositionPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCPartyPositionPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_pid() != 0) {
    _this->_internal_set_pid(from._internal_pid());
  }
  if (from._internal_x() != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  if (from._internal_y() != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCPartyPositionPacket::CopyFrom(const GCPartyPositionPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCPartyPositionPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCPartyPositionPacket::IsInitialized() const {
  return true;
}

void GCPartyPositionPacket::InternalSwap(GCPartyPositionPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GCPartyPositionPacket, _impl_.y_)
      + sizeof(GCPartyPositionPacket::_impl_.y_)
      - PROTOBUF_FIELD_OFFSET(GCPartyPositionPacket, _impl_.pid_)>(
          reinterpret_cast<char*>(&_impl_.pid_),
          reinterpret_cast<char*>(&other->_impl_.pid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GCPartyPositionPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[85]);
}

// ===================================================================

class GCWikiPacket::_Internal {
 public:
  static const ::network::TWikiInfoTable& wiki_info(const GCWikiPacket* msg);
};

const ::network::TWikiInfoTable&
GCWikiPacket::_Internal::wiki_info(const GCWikiPacket* msg) {
  return *msg->_impl_.wiki_info_;
}
void GCWikiPacket::clear_wiki_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.wiki_info_ != nullptr) {
    delete _impl_.wiki_info_;
  }
  _impl_.wiki_info_ = nullptr;
}
void GCWikiPacket::clear_origin_infos() {
  _impl_.origin_infos_.Clear();
}
GCWikiPacket::GCWikiPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCWikiPacket)
}
GCWikiPacket::GCWikiPacket(const GCWikiPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCWikiPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.origin_infos_){from._impl_.origin_infos_}
    , decltype(_impl_.wiki_info_){nullptr}
    , decltype(_impl_.ret_id_){}
    , decltype(_impl_.vnum_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_wiki_info()) {
    _this->_impl_.wiki_info_ = new ::network::TWikiInfoTable(*from._impl_.wiki_info_);
  }
  ::memcpy(&_impl_.ret_id_, &from._impl_.ret_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.vnum_) -
    reinterpret_cast<char*>(&_impl_.ret_id_)) + sizeof(_impl_.vnum_));
  // @@protoc_insertion_point(copy_constructor:network.GCWikiPacket)
}

inline void GCWikiPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.origin_infos_){arena}
    , decltype(_impl_.wiki_info_){nullptr}
    , decltype(_impl_.ret_id_){uint64_t{0u}}
    , decltype(_impl_.vnum_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCWikiPacket::~GCWikiPacket() {
  // @@protoc_insertion_point(destructor:network.GCWikiPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCWikiPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.origin_infos_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.wiki_info_;
}

void GCWikiPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCWikiPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCWikiPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.origin_infos_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.wiki_info_ != nullptr) {
    delete _impl_.wiki_info_;
  }
  _impl_.wiki_info_ = nullptr;
  ::memset(&_impl_.ret_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.vnum_) -
      reinterpret_cast<char*>(&_impl_.ret_id_)) + sizeof(_impl_.vnum_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCWikiPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 ret_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.ret_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 vnum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.vnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .network.TWikiInfoTable wiki_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_wiki_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .network.TWikiItemOriginInfo origin_infos = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_origin_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCWikiPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCWikiPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 ret_id = 1;
  if (this->_internal_ret_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_ret_id(), target);
  }

  // uint32 vnum = 2;
  if (this->_internal_vnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_vnum(), target);
  }

  // .network.TWikiInfoTable wiki_info = 3;
  if (this->_internal_has_wiki_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::wiki_info(this),
        _Internal::wiki_info(this).GetCachedSize(), target, stream);
  }

  // repeated .network.TWikiItemOriginInfo origin_infos = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_origin_infos_size()); i < n; i++) {
    const auto& repfield = this->_internal_origin_infos(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCWikiPacket)
  return target;
}

size_t GCWikiPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCWikiPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .network.TWikiItemOriginInfo origin_infos = 4;
  total_size += 1UL * this->_internal_origin_infos_size();
  for (const auto& msg : this->_impl_.origin_infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .network.TWikiInfoTable wiki_info = 3;
  if (this->_internal_has_wiki_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.wiki_info_);
  }

  // uint64 ret_id = 1;
  if (this->_internal_ret_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_ret_id());
  }

  // uint32 vnum = 2;
  if (this->_internal_vnum() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_vnum());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCWikiPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCWikiPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCWikiPacket::GetClassData() const { return &_class_data_; }


void GCWikiPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCWikiPacket*>(&to_msg);
  auto& from = static_cast<const GCWikiPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCWikiPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.origin_infos_.MergeFrom(from._impl_.origin_infos_);
  if (from._internal_has_wiki_info()) {
    _this->_internal_mutable_wiki_info()->::network::TWikiInfoTable::MergeFrom(
        from._internal_wiki_info());
  }
  if (from._internal_ret_id() != 0) {
    _this->_internal_set_ret_id(from._internal_ret_id());
  }
  if (from._internal_vnum() != 0) {
    _this->_internal_set_vnum(from._internal_vnum());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCWikiPacket::CopyFrom(const GCWikiPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCWikiPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCWikiPacket::IsInitialized() const {
  return true;
}

void GCWikiPacket::InternalSwap(GCWikiPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.origin_infos_.InternalSwap(&other->_impl_.origin_infos_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GCWikiPacket, _impl_.vnum_)
      + sizeof(GCWikiPacket::_impl_.vnum_)
      - PROTOBUF_FIELD_OFFSET(GCWikiPacket, _impl_.wiki_info_)>(
          reinterpret_cast<char*>(&_impl_.wiki_info_),
          reinterpret_cast<char*>(&other->_impl_.wiki_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GCWikiPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[86]);
}

// ===================================================================

class GCWikiMobPacket::_Internal {
 public:
};

GCWikiMobPacket::GCWikiMobPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCWikiMobPacket)
}
GCWikiMobPacket::GCWikiMobPacket(const GCWikiMobPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCWikiMobPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.mobs_){from._impl_.mobs_}
    , /*decltype(_impl_._mobs_cached_byte_size_)*/{0}
    , decltype(_impl_.ret_id_){}
    , decltype(_impl_.vnum_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.ret_id_, &from._impl_.ret_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.vnum_) -
    reinterpret_cast<char*>(&_impl_.ret_id_)) + sizeof(_impl_.vnum_));
  // @@protoc_insertion_point(copy_constructor:network.GCWikiMobPacket)
}

inline void GCWikiMobPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.mobs_){arena}
    , /*decltype(_impl_._mobs_cached_byte_size_)*/{0}
    , decltype(_impl_.ret_id_){uint64_t{0u}}
    , decltype(_impl_.vnum_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCWikiMobPacket::~GCWikiMobPacket() {
  // @@protoc_insertion_point(destructor:network.GCWikiMobPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCWikiMobPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.mobs_.~RepeatedField();
}

void GCWikiMobPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCWikiMobPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCWikiMobPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mobs_.Clear();
  ::memset(&_impl_.ret_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.vnum_) -
      reinterpret_cast<char*>(&_impl_.ret_id_)) + sizeof(_impl_.vnum_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCWikiMobPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 ret_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.ret_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 vnum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.vnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 mobs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_mobs(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_mobs(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCWikiMobPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCWikiMobPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 ret_id = 1;
  if (this->_internal_ret_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_ret_id(), target);
  }

  // uint32 vnum = 2;
  if (this->_internal_vnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_vnum(), target);
  }

  // repeated uint32 mobs = 3;
  {
    int byte_size = _impl_._mobs_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          3, _internal_mobs(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCWikiMobPacket)
  return target;
}

size_t GCWikiMobPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCWikiMobPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 mobs = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.mobs_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._mobs_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint64 ret_id = 1;
  if (this->_internal_ret_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_ret_id());
  }

  // uint32 vnum = 2;
  if (this->_internal_vnum() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_vnum());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCWikiMobPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCWikiMobPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCWikiMobPacket::GetClassData() const { return &_class_data_; }


void GCWikiMobPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCWikiMobPacket*>(&to_msg);
  auto& from = static_cast<const GCWikiMobPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCWikiMobPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.mobs_.MergeFrom(from._impl_.mobs_);
  if (from._internal_ret_id() != 0) {
    _this->_internal_set_ret_id(from._internal_ret_id());
  }
  if (from._internal_vnum() != 0) {
    _this->_internal_set_vnum(from._internal_vnum());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCWikiMobPacket::CopyFrom(const GCWikiMobPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCWikiMobPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCWikiMobPacket::IsInitialized() const {
  return true;
}

void GCWikiMobPacket::InternalSwap(GCWikiMobPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.mobs_.InternalSwap(&other->_impl_.mobs_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GCWikiMobPacket, _impl_.vnum_)
      + sizeof(GCWikiMobPacket::_impl_.vnum_)
      - PROTOBUF_FIELD_OFFSET(GCWikiMobPacket, _impl_.ret_id_)>(
          reinterpret_cast<char*>(&_impl_.ret_id_),
          reinterpret_cast<char*>(&other->_impl_.ret_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GCWikiMobPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[87]);
}

// ===================================================================

class GCSendCombatZonePacket::_Internal {
 public:
};

GCSendCombatZonePacket::GCSendCombatZonePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCSendCombatZonePacket)
}
GCSendCombatZonePacket::GCSendCombatZonePacket(const GCSendCombatZonePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCSendCombatZonePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_infos_){from._impl_.data_infos_}
    , /*decltype(_impl_._data_infos_cached_byte_size_)*/{0}
    , decltype(_impl_.data_days_){from._impl_.data_days_}
    , /*decltype(_impl_._data_days_cached_byte_size_)*/{0}
    , decltype(_impl_.sub_header_){}
    , decltype(_impl_.is_running_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.sub_header_, &from._impl_.sub_header_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_running_) -
    reinterpret_cast<char*>(&_impl_.sub_header_)) + sizeof(_impl_.is_running_));
  // @@protoc_insertion_point(copy_constructor:network.GCSendCombatZonePacket)
}

inline void GCSendCombatZonePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_infos_){arena}
    , /*decltype(_impl_._data_infos_cached_byte_size_)*/{0}
    , decltype(_impl_.data_days_){arena}
    , /*decltype(_impl_._data_days_cached_byte_size_)*/{0}
    , decltype(_impl_.sub_header_){0u}
    , decltype(_impl_.is_running_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCSendCombatZonePacket::~GCSendCombatZonePacket() {
  // @@protoc_insertion_point(destructor:network.GCSendCombatZonePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCSendCombatZonePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_infos_.~RepeatedField();
  _impl_.data_days_.~RepeatedField();
}

void GCSendCombatZonePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCSendCombatZonePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCSendCombatZonePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_infos_.Clear();
  _impl_.data_days_.Clear();
  ::memset(&_impl_.sub_header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.is_running_) -
      reinterpret_cast<char*>(&_impl_.sub_header_)) + sizeof(_impl_.is_running_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCSendCombatZonePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 sub_header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.sub_header_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_running = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.is_running_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 data_infos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_data_infos(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_data_infos(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 data_days = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_data_days(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_data_days(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCSendCombatZonePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCSendCombatZonePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 sub_header = 1;
  if (this->_internal_sub_header() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_sub_header(), target);
  }

  // bool is_running = 2;
  if (this->_internal_is_running() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_is_running(), target);
  }

  // repeated uint32 data_infos = 3;
  {
    int byte_size = _impl_._data_infos_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          3, _internal_data_infos(), byte_size, target);
    }
  }

  // repeated uint32 data_days = 4;
  {
    int byte_size = _impl_._data_days_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          4, _internal_data_days(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCSendCombatZonePacket)
  return target;
}

size_t GCSendCombatZonePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCSendCombatZonePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 data_infos = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.data_infos_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._data_infos_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 data_days = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.data_days_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._data_days_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint32 sub_header = 1;
  if (this->_internal_sub_header() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_sub_header());
  }

  // bool is_running = 2;
  if (this->_internal_is_running() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCSendCombatZonePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCSendCombatZonePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCSendCombatZonePacket::GetClassData() const { return &_class_data_; }


void GCSendCombatZonePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCSendCombatZonePacket*>(&to_msg);
  auto& from = static_cast<const GCSendCombatZonePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCSendCombatZonePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.data_infos_.MergeFrom(from._impl_.data_infos_);
  _this->_impl_.data_days_.MergeFrom(from._impl_.data_days_);
  if (from._internal_sub_header() != 0) {
    _this->_internal_set_sub_header(from._internal_sub_header());
  }
  if (from._internal_is_running() != 0) {
    _this->_internal_set_is_running(from._internal_is_running());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCSendCombatZonePacket::CopyFrom(const GCSendCombatZonePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCSendCombatZonePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCSendCombatZonePacket::IsInitialized() const {
  return true;
}

void GCSendCombatZonePacket::InternalSwap(GCSendCombatZonePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_infos_.InternalSwap(&other->_impl_.data_infos_);
  _impl_.data_days_.InternalSwap(&other->_impl_.data_days_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GCSendCombatZonePacket, _impl_.is_running_)
      + sizeof(GCSendCombatZonePacket::_impl_.is_running_)
      - PROTOBUF_FIELD_OFFSET(GCSendCombatZonePacket, _impl_.sub_header_)>(
          reinterpret_cast<char*>(&_impl_.sub_header_),
          reinterpret_cast<char*>(&other->_impl_.sub_header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GCSendCombatZonePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[88]);
}

// ===================================================================

class GCCombatZoneRankingDataPacket::_Internal {
 public:
};

void GCCombatZoneRankingDataPacket::clear_data() {
  _impl_.data_.Clear();
}
GCCombatZoneRankingDataPacket::GCCombatZoneRankingDataPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCCombatZoneRankingDataPacket)
}
GCCombatZoneRankingDataPacket::GCCombatZoneRankingDataPacket(const GCCombatZoneRankingDataPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCCombatZoneRankingDataPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){from._impl_.data_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:network.GCCombatZoneRankingDataPacket)
}

inline void GCCombatZoneRankingDataPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCCombatZoneRankingDataPacket::~GCCombatZoneRankingDataPacket() {
  // @@protoc_insertion_point(destructor:network.GCCombatZoneRankingDataPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCCombatZoneRankingDataPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.~RepeatedPtrField();
}

void GCCombatZoneRankingDataPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCCombatZoneRankingDataPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCCombatZoneRankingDataPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCCombatZoneRankingDataPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .network.TCombatZoneRankingPlayer data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCCombatZoneRankingDataPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCCombatZoneRankingDataPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .network.TCombatZoneRankingPlayer data = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_data_size()); i < n; i++) {
    const auto& repfield = this->_internal_data(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCCombatZoneRankingDataPacket)
  return target;
}

size_t GCCombatZoneRankingDataPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCCombatZoneRankingDataPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .network.TCombatZoneRankingPlayer data = 1;
  total_size += 1UL * this->_internal_data_size();
  for (const auto& msg : this->_impl_.data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCCombatZoneRankingDataPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCCombatZoneRankingDataPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCCombatZoneRankingDataPacket::GetClassData() const { return &_class_data_; }


void GCCombatZoneRankingDataPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCCombatZoneRankingDataPacket*>(&to_msg);
  auto& from = static_cast<const GCCombatZoneRankingDataPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCCombatZoneRankingDataPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.data_.MergeFrom(from._impl_.data_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCCombatZoneRankingDataPacket::CopyFrom(const GCCombatZoneRankingDataPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCCombatZoneRankingDataPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCCombatZoneRankingDataPacket::IsInitialized() const {
  return true;
}

void GCCombatZoneRankingDataPacket::InternalSwap(GCCombatZoneRankingDataPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_.InternalSwap(&other->_impl_.data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GCCombatZoneRankingDataPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[89]);
}

// ===================================================================

class GCEventRequestPacket::_Internal {
 public:
};

GCEventRequestPacket::GCEventRequestPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCEventRequestPacket)
}
GCEventRequestPacket::GCEventRequestPacket(const GCEventRequestPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCEventRequestPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.desc_){}
    , decltype(_impl_.event_index_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.desc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.desc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_desc().empty()) {
    _this->_impl_.desc_.Set(from._internal_desc(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.event_index_ = from._impl_.event_index_;
  // @@protoc_insertion_point(copy_constructor:network.GCEventRequestPacket)
}

inline void GCEventRequestPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.desc_){}
    , decltype(_impl_.event_index_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.desc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.desc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GCEventRequestPacket::~GCEventRequestPacket() {
  // @@protoc_insertion_point(destructor:network.GCEventRequestPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCEventRequestPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.desc_.Destroy();
}

void GCEventRequestPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCEventRequestPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCEventRequestPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.desc_.ClearToEmpty();
  _impl_.event_index_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCEventRequestPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 event_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.event_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes desc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_desc();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCEventRequestPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCEventRequestPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 event_index = 1;
  if (this->_internal_event_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_event_index(), target);
  }

  // bytes name = 2;
  if (!this->_internal_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_name(), target);
  }

  // bytes desc = 3;
  if (!this->_internal_desc().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_desc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCEventRequestPacket)
  return target;
}

size_t GCEventRequestPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCEventRequestPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // bytes desc = 3;
  if (!this->_internal_desc().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_desc());
  }

  // uint32 event_index = 1;
  if (this->_internal_event_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_event_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCEventRequestPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCEventRequestPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCEventRequestPacket::GetClassData() const { return &_class_data_; }


void GCEventRequestPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCEventRequestPacket*>(&to_msg);
  auto& from = static_cast<const GCEventRequestPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCEventRequestPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_desc().empty()) {
    _this->_internal_set_desc(from._internal_desc());
  }
  if (from._internal_event_index() != 0) {
    _this->_internal_set_event_index(from._internal_event_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCEventRequestPacket::CopyFrom(const GCEventRequestPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCEventRequestPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCEventRequestPacket::IsInitialized() const {
  return true;
}

void GCEventRequestPacket::InternalSwap(GCEventRequestPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.desc_, lhs_arena,
      &other->_impl_.desc_, rhs_arena
  );
  swap(_impl_.event_index_, other->_impl_.event_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GCEventRequestPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[90]);
}

// ===================================================================

class GCEventCancelPacket::_Internal {
 public:
};

GCEventCancelPacket::GCEventCancelPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCEventCancelPacket)
}
GCEventCancelPacket::GCEventCancelPacket(const GCEventCancelPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCEventCancelPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.event_index_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.event_index_ = from._impl_.event_index_;
  // @@protoc_insertion_point(copy_constructor:network.GCEventCancelPacket)
}

inline void GCEventCancelPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.event_index_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCEventCancelPacket::~GCEventCancelPacket() {
  // @@protoc_insertion_point(destructor:network.GCEventCancelPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCEventCancelPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GCEventCancelPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCEventCancelPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCEventCancelPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.event_index_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCEventCancelPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 event_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.event_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCEventCancelPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCEventCancelPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 event_index = 1;
  if (this->_internal_event_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_event_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCEventCancelPacket)
  return target;
}

size_t GCEventCancelPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCEventCancelPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 event_index = 1;
  if (this->_internal_event_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_event_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCEventCancelPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCEventCancelPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCEventCancelPacket::GetClassData() const { return &_class_data_; }


void GCEventCancelPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCEventCancelPacket*>(&to_msg);
  auto& from = static_cast<const GCEventCancelPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCEventCancelPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_event_index() != 0) {
    _this->_internal_set_event_index(from._internal_event_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCEventCancelPacket::CopyFrom(const GCEventCancelPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCEventCancelPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCEventCancelPacket::IsInitialized() const {
  return true;
}

void GCEventCancelPacket::InternalSwap(GCEventCancelPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.event_index_, other->_impl_.event_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GCEventCancelPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[91]);
}

// ===================================================================

class GCEventEmpireWarLoadPacket::_Internal {
 public:
};

GCEventEmpireWarLoadPacket::GCEventEmpireWarLoadPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCEventEmpireWarLoadPacket)
}
GCEventEmpireWarLoadPacket::GCEventEmpireWarLoadPacket(const GCEventEmpireWarLoadPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCEventEmpireWarLoadPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.kills_){from._impl_.kills_}
    , /*decltype(_impl_._kills_cached_byte_size_)*/{0}
    , decltype(_impl_.deaths_){from._impl_.deaths_}
    , /*decltype(_impl_._deaths_cached_byte_size_)*/{0}
    , decltype(_impl_.time_left_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.time_left_ = from._impl_.time_left_;
  // @@protoc_insertion_point(copy_constructor:network.GCEventEmpireWarLoadPacket)
}

inline void GCEventEmpireWarLoadPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.kills_){arena}
    , /*decltype(_impl_._kills_cached_byte_size_)*/{0}
    , decltype(_impl_.deaths_){arena}
    , /*decltype(_impl_._deaths_cached_byte_size_)*/{0}
    , decltype(_impl_.time_left_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCEventEmpireWarLoadPacket::~GCEventEmpireWarLoadPacket() {
  // @@protoc_insertion_point(destructor:network.GCEventEmpireWarLoadPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCEventEmpireWarLoadPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.kills_.~RepeatedField();
  _impl_.deaths_.~RepeatedField();
}

void GCEventEmpireWarLoadPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCEventEmpireWarLoadPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCEventEmpireWarLoadPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.kills_.Clear();
  _impl_.deaths_.Clear();
  _impl_.time_left_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCEventEmpireWarLoadPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 time_left = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.time_left_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 kills = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_kills(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_kills(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 deaths = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_deaths(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_deaths(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCEventEmpireWarLoadPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCEventEmpireWarLoadPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 time_left = 1;
  if (this->_internal_time_left() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_time_left(), target);
  }

  // repeated int32 kills = 2;
  {
    int byte_size = _impl_._kills_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_kills(), byte_size, target);
    }
  }

  // repeated int32 deaths = 3;
  {
    int byte_size = _impl_._deaths_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_deaths(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCEventEmpireWarLoadPacket)
  return target;
}

size_t GCEventEmpireWarLoadPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCEventEmpireWarLoadPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 kills = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.kills_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._kills_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 deaths = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.deaths_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._deaths_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 time_left = 1;
  if (this->_internal_time_left() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_time_left());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCEventEmpireWarLoadPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCEventEmpireWarLoadPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCEventEmpireWarLoadPacket::GetClassData() const { return &_class_data_; }


void GCEventEmpireWarLoadPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCEventEmpireWarLoadPacket*>(&to_msg);
  auto& from = static_cast<const GCEventEmpireWarLoadPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCEventEmpireWarLoadPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.kills_.MergeFrom(from._impl_.kills_);
  _this->_impl_.deaths_.MergeFrom(from._impl_.deaths_);
  if (from._internal_time_left() != 0) {
    _this->_internal_set_time_left(from._internal_time_left());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCEventEmpireWarLoadPacket::CopyFrom(const GCEventEmpireWarLoadPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCEventEmpireWarLoadPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCEventEmpireWarLoadPacket::IsInitialized() const {
  return true;
}

void GCEventEmpireWarLoadPacket::InternalSwap(GCEventEmpireWarLoadPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.kills_.InternalSwap(&other->_impl_.kills_);
  _impl_.deaths_.InternalSwap(&other->_impl_.deaths_);
  swap(_impl_.time_left_, other->_impl_.time_left_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GCEventEmpireWarLoadPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[92]);
}

// ===================================================================

class GCEventEmpireWarUpdatePacket::_Internal {
 public:
};

GCEventEmpireWarUpdatePacket::GCEventEmpireWarUpdatePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCEventEmpireWarUpdatePacket)
}
GCEventEmpireWarUpdatePacket::GCEventEmpireWarUpdatePacket(const GCEventEmpireWarUpdatePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCEventEmpireWarUpdatePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.empire_){}
    , decltype(_impl_.kills_){}
    , decltype(_impl_.deaths_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.empire_, &from._impl_.empire_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.deaths_) -
    reinterpret_cast<char*>(&_impl_.empire_)) + sizeof(_impl_.deaths_));
  // @@protoc_insertion_point(copy_constructor:network.GCEventEmpireWarUpdatePacket)
}

inline void GCEventEmpireWarUpdatePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.empire_){0u}
    , decltype(_impl_.kills_){0u}
    , decltype(_impl_.deaths_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCEventEmpireWarUpdatePacket::~GCEventEmpireWarUpdatePacket() {
  // @@protoc_insertion_point(destructor:network.GCEventEmpireWarUpdatePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCEventEmpireWarUpdatePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GCEventEmpireWarUpdatePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCEventEmpireWarUpdatePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCEventEmpireWarUpdatePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.empire_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.deaths_) -
      reinterpret_cast<char*>(&_impl_.empire_)) + sizeof(_impl_.deaths_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCEventEmpireWarUpdatePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 empire = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.empire_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 kills = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.kills_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 deaths = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.deaths_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCEventEmpireWarUpdatePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCEventEmpireWarUpdatePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 empire = 1;
  if (this->_internal_empire() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_empire(), target);
  }

  // uint32 kills = 2;
  if (this->_internal_kills() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_kills(), target);
  }

  // uint32 deaths = 3;
  if (this->_internal_deaths() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_deaths(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCEventEmpireWarUpdatePacket)
  return target;
}

size_t GCEventEmpireWarUpdatePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCEventEmpireWarUpdatePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 empire = 1;
  if (this->_internal_empire() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_empire());
  }

  // uint32 kills = 2;
  if (this->_internal_kills() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_kills());
  }

  // uint32 deaths = 3;
  if (this->_internal_deaths() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_deaths());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCEventEmpireWarUpdatePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCEventEmpireWarUpdatePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCEventEmpireWarUpdatePacket::GetClassData() const { return &_class_data_; }


void GCEventEmpireWarUpdatePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCEventEmpireWarUpdatePacket*>(&to_msg);
  auto& from = static_cast<const GCEventEmpireWarUpdatePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCEventEmpireWarUpdatePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_empire() != 0) {
    _this->_internal_set_empire(from._internal_empire());
  }
  if (from._internal_kills() != 0) {
    _this->_internal_set_kills(from._internal_kills());
  }
  if (from._internal_deaths() != 0) {
    _this->_internal_set_deaths(from._internal_deaths());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCEventEmpireWarUpdatePacket::CopyFrom(const GCEventEmpireWarUpdatePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCEventEmpireWarUpdatePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCEventEmpireWarUpdatePacket::IsInitialized() const {
  return true;
}

void GCEventEmpireWarUpdatePacket::InternalSwap(GCEventEmpireWarUpdatePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GCEventEmpireWarUpdatePacket, _impl_.deaths_)
      + sizeof(GCEventEmpireWarUpdatePacket::_impl_.deaths_)
      - PROTOBUF_FIELD_OFFSET(GCEventEmpireWarUpdatePacket, _impl_.empire_)>(
          reinterpret_cast<char*>(&_impl_.empire_),
          reinterpret_cast<char*>(&other->_impl_.empire_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GCEventEmpireWarUpdatePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[93]);
}

// ===================================================================

class GCAttrtreeLevelPacket::_Internal {
 public:
};

GCAttrtreeLevelPacket::GCAttrtreeLevelPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCAttrtreeLevelPacket)
}
GCAttrtreeLevelPacket::GCAttrtreeLevelPacket(const GCAttrtreeLevelPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCAttrtreeLevelPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.level_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.level_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.level_));
  // @@protoc_insertion_point(copy_constructor:network.GCAttrtreeLevelPacket)
}

inline void GCAttrtreeLevelPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){0u}
    , decltype(_impl_.level_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCAttrtreeLevelPacket::~GCAttrtreeLevelPacket() {
  // @@protoc_insertion_point(destructor:network.GCAttrtreeLevelPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCAttrtreeLevelPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GCAttrtreeLevelPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCAttrtreeLevelPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCAttrtreeLevelPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.level_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.level_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCAttrtreeLevelPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCAttrtreeLevelPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCAttrtreeLevelPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // uint32 level = 2;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCAttrtreeLevelPacket)
  return target;
}

size_t GCAttrtreeLevelPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCAttrtreeLevelPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  // uint32 level = 2;
  if (this->_internal_level() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_level());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCAttrtreeLevelPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCAttrtreeLevelPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCAttrtreeLevelPacket::GetClassData() const { return &_class_data_; }


void GCAttrtreeLevelPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCAttrtreeLevelPacket*>(&to_msg);
  auto& from = static_cast<const GCAttrtreeLevelPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCAttrtreeLevelPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCAttrtreeLevelPacket::CopyFrom(const GCAttrtreeLevelPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCAttrtreeLevelPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCAttrtreeLevelPacket::IsInitialized() const {
  return true;
}

void GCAttrtreeLevelPacket::InternalSwap(GCAttrtreeLevelPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GCAttrtreeLevelPacket, _impl_.level_)
      + sizeof(GCAttrtreeLevelPacket::_impl_.level_)
      - PROTOBUF_FIELD_OFFSET(GCAttrtreeLevelPacket, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GCAttrtreeLevelPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[94]);
}

// ===================================================================

class GCAttrtreeRefinePacket::_Internal {
 public:
  static const ::network::TRefineTable& refine_table(const GCAttrtreeRefinePacket* msg);
};

const ::network::TRefineTable&
GCAttrtreeRefinePacket::_Internal::refine_table(const GCAttrtreeRefinePacket* msg) {
  return *msg->_impl_.refine_table_;
}
void GCAttrtreeRefinePacket::clear_refine_table() {
  if (GetArenaForAllocation() == nullptr && _impl_.refine_table_ != nullptr) {
    delete _impl_.refine_table_;
  }
  _impl_.refine_table_ = nullptr;
}
GCAttrtreeRefinePacket::GCAttrtreeRefinePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCAttrtreeRefinePacket)
}
GCAttrtreeRefinePacket::GCAttrtreeRefinePacket(const GCAttrtreeRefinePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCAttrtreeRefinePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.refine_table_){nullptr}
    , decltype(_impl_.pos_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_refine_table()) {
    _this->_impl_.refine_table_ = new ::network::TRefineTable(*from._impl_.refine_table_);
  }
  _this->_impl_.pos_ = from._impl_.pos_;
  // @@protoc_insertion_point(copy_constructor:network.GCAttrtreeRefinePacket)
}

inline void GCAttrtreeRefinePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.refine_table_){nullptr}
    , decltype(_impl_.pos_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCAttrtreeRefinePacket::~GCAttrtreeRefinePacket() {
  // @@protoc_insertion_point(destructor:network.GCAttrtreeRefinePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCAttrtreeRefinePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.refine_table_;
}

void GCAttrtreeRefinePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCAttrtreeRefinePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCAttrtreeRefinePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.refine_table_ != nullptr) {
    delete _impl_.refine_table_;
  }
  _impl_.refine_table_ = nullptr;
  _impl_.pos_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCAttrtreeRefinePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .network.TRefineTable refine_table = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_refine_table(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCAttrtreeRefinePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCAttrtreeRefinePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pos = 1;
  if (this->_internal_pos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pos(), target);
  }

  // .network.TRefineTable refine_table = 2;
  if (this->_internal_has_refine_table()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::refine_table(this),
        _Internal::refine_table(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCAttrtreeRefinePacket)
  return target;
}

size_t GCAttrtreeRefinePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCAttrtreeRefinePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .network.TRefineTable refine_table = 2;
  if (this->_internal_has_refine_table()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.refine_table_);
  }

  // uint32 pos = 1;
  if (this->_internal_pos() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pos());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCAttrtreeRefinePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCAttrtreeRefinePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCAttrtreeRefinePacket::GetClassData() const { return &_class_data_; }


void GCAttrtreeRefinePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCAttrtreeRefinePacket*>(&to_msg);
  auto& from = static_cast<const GCAttrtreeRefinePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCAttrtreeRefinePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_refine_table()) {
    _this->_internal_mutable_refine_table()->::network::TRefineTable::MergeFrom(
        from._internal_refine_table());
  }
  if (from._internal_pos() != 0) {
    _this->_internal_set_pos(from._internal_pos());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCAttrtreeRefinePacket::CopyFrom(const GCAttrtreeRefinePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCAttrtreeRefinePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCAttrtreeRefinePacket::IsInitialized() const {
  return true;
}

void GCAttrtreeRefinePacket::InternalSwap(GCAttrtreeRefinePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GCAttrtreeRefinePacket, _impl_.pos_)
      + sizeof(GCAttrtreeRefinePacket::_impl_.pos_)
      - PROTOBUF_FIELD_OFFSET(GCAttrtreeRefinePacket, _impl_.refine_table_)>(
          reinterpret_cast<char*>(&_impl_.refine_table_),
          reinterpret_cast<char*>(&other->_impl_.refine_table_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GCAttrtreeRefinePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[95]);
}

// ===================================================================

class GCRunePacket::_Internal {
 public:
};

GCRunePacket::GCRunePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCRunePacket)
}
GCRunePacket::GCRunePacket(const GCRunePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCRunePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.vnum_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.vnum_ = from._impl_.vnum_;
  // @@protoc_insertion_point(copy_constructor:network.GCRunePacket)
}

inline void GCRunePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.vnum_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCRunePacket::~GCRunePacket() {
  // @@protoc_insertion_point(destructor:network.GCRunePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCRunePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GCRunePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCRunePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCRunePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.vnum_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCRunePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 vnum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.vnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCRunePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCRunePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 vnum = 1;
  if (this->_internal_vnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_vnum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCRunePacket)
  return target;
}

size_t GCRunePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCRunePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 vnum = 1;
  if (this->_internal_vnum() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_vnum());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCRunePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCRunePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCRunePacket::GetClassData() const { return &_class_data_; }


void GCRunePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCRunePacket*>(&to_msg);
  auto& from = static_cast<const GCRunePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCRunePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_vnum() != 0) {
    _this->_internal_set_vnum(from._internal_vnum());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCRunePacket::CopyFrom(const GCRunePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCRunePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCRunePacket::IsInitialized() const {
  return true;
}

void GCRunePacket::InternalSwap(GCRunePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.vnum_, other->_impl_.vnum_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GCRunePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[96]);
}

// ===================================================================

class GCRuneRefinePacket::_Internal {
 public:
  static const ::network::TRefineTable& refine_table(const GCRuneRefinePacket* msg);
};

const ::network::TRefineTable&
GCRuneRefinePacket::_Internal::refine_table(const GCRuneRefinePacket* msg) {
  return *msg->_impl_.refine_table_;
}
void GCRuneRefinePacket::clear_refine_table() {
  if (GetArenaForAllocation() == nullptr && _impl_.refine_table_ != nullptr) {
    delete _impl_.refine_table_;
  }
  _impl_.refine_table_ = nullptr;
}
GCRuneRefinePacket::GCRuneRefinePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCRuneRefinePacket)
}
GCRuneRefinePacket::GCRuneRefinePacket(const GCRuneRefinePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCRuneRefinePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.refine_table_){nullptr}
    , decltype(_impl_.next_point_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_refine_table()) {
    _this->_impl_.refine_table_ = new ::network::TRefineTable(*from._impl_.refine_table_);
  }
  _this->_impl_.next_point_ = from._impl_.next_point_;
  // @@protoc_insertion_point(copy_constructor:network.GCRuneRefinePacket)
}

inline void GCRuneRefinePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.refine_table_){nullptr}
    , decltype(_impl_.next_point_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCRuneRefinePacket::~GCRuneRefinePacket() {
  // @@protoc_insertion_point(destructor:network.GCRuneRefinePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCRuneRefinePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.refine_table_;
}

void GCRuneRefinePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCRuneRefinePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCRuneRefinePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.refine_table_ != nullptr) {
    delete _impl_.refine_table_;
  }
  _impl_.refine_table_ = nullptr;
  _impl_.next_point_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCRuneRefinePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 next_point = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.next_point_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .network.TRefineTable refine_table = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_refine_table(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCRuneRefinePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCRuneRefinePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 next_point = 1;
  if (this->_internal_next_point() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_next_point(), target);
  }

  // .network.TRefineTable refine_table = 2;
  if (this->_internal_has_refine_table()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::refine_table(this),
        _Internal::refine_table(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCRuneRefinePacket)
  return target;
}

size_t GCRuneRefinePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCRuneRefinePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .network.TRefineTable refine_table = 2;
  if (this->_internal_has_refine_table()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.refine_table_);
  }

  // uint32 next_point = 1;
  if (this->_internal_next_point() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_next_point());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCRuneRefinePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCRuneRefinePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCRuneRefinePacket::GetClassData() const { return &_class_data_; }


void GCRuneRefinePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCRuneRefinePacket*>(&to_msg);
  auto& from = static_cast<const GCRuneRefinePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCRuneRefinePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_refine_table()) {
    _this->_internal_mutable_refine_table()->::network::TRefineTable::MergeFrom(
        from._internal_refine_table());
  }
  if (from._internal_next_point() != 0) {
    _this->_internal_set_next_point(from._internal_next_point());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCRuneRefinePacket::CopyFrom(const GCRuneRefinePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCRuneRefinePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCRuneRefinePacket::IsInitialized() const {
  return true;
}

void GCRuneRefinePacket::InternalSwap(GCRuneRefinePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GCRuneRefinePacket, _impl_.next_point_)
      + sizeof(GCRuneRefinePacket::_impl_.next_point_)
      - PROTOBUF_FIELD_OFFSET(GCRuneRefinePacket, _impl_.refine_table_)>(
          reinterpret_cast<char*>(&_impl_.refine_table_),
          reinterpret_cast<char*>(&other->_impl_.refine_table_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GCRuneRefinePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[97]);
}

// ===================================================================

class GCRunePagePacket::_Internal {
 public:
  static const ::TRunePageData& data(const GCRunePagePacket* msg);
};

const ::TRunePageData&
GCRunePagePacket::_Internal::data(const GCRunePagePacket* msg) {
  return *msg->_impl_.data_;
}
void GCRunePagePacket::clear_data() {
  if (GetArenaForAllocation() == nullptr && _impl_.data_ != nullptr) {
    delete _impl_.data_;
  }
  _impl_.data_ = nullptr;
}
GCRunePagePacket::GCRunePagePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCRunePagePacket)
}
GCRunePagePacket::GCRunePagePacket(const GCRunePagePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCRunePagePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data()) {
    _this->_impl_.data_ = new ::TRunePageData(*from._impl_.data_);
  }
  // @@protoc_insertion_point(copy_constructor:network.GCRunePagePacket)
}

inline void GCRunePagePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCRunePagePacket::~GCRunePagePacket() {
  // @@protoc_insertion_point(destructor:network.GCRunePagePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCRunePagePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.data_;
}

void GCRunePagePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCRunePagePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCRunePagePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.data_ != nullptr) {
    delete _impl_.data_;
  }
  _impl_.data_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCRunePagePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .TRunePageData data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCRunePagePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCRunePagePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .TRunePageData data = 1;
  if (this->_internal_has_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::data(this),
        _Internal::data(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCRunePagePacket)
  return target;
}

size_t GCRunePagePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCRunePagePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .TRunePageData data = 1;
  if (this->_internal_has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.data_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCRunePagePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCRunePagePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCRunePagePacket::GetClassData() const { return &_class_data_; }


void GCRunePagePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCRunePagePacket*>(&to_msg);
  auto& from = static_cast<const GCRunePagePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCRunePagePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_data()) {
    _this->_internal_mutable_data()->::TRunePageData::MergeFrom(
        from._internal_data());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCRunePagePacket::CopyFrom(const GCRunePagePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCRunePagePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCRunePagePacket::IsInitialized() const {
  return true;
}

void GCRunePagePacket::InternalSwap(GCRunePagePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.data_, other->_impl_.data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GCRunePagePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[98]);
}

// ===================================================================

class GCRuneLevelupPacket::_Internal {
 public:
  static const ::network::TRefineTable& refine_table(const GCRuneLevelupPacket* msg);
};

const ::network::TRefineTable&
GCRuneLevelupPacket::_Internal::refine_table(const GCRuneLevelupPacket* msg) {
  return *msg->_impl_.refine_table_;
}
void GCRuneLevelupPacket::clear_refine_table() {
  if (GetArenaForAllocation() == nullptr && _impl_.refine_table_ != nullptr) {
    delete _impl_.refine_table_;
  }
  _impl_.refine_table_ = nullptr;
}
GCRuneLevelupPacket::GCRuneLevelupPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCRuneLevelupPacket)
}
GCRuneLevelupPacket::GCRuneLevelupPacket(const GCRuneLevelupPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCRuneLevelupPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.refine_table_){nullptr}
    , decltype(_impl_.pos_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_refine_table()) {
    _this->_impl_.refine_table_ = new ::network::TRefineTable(*from._impl_.refine_table_);
  }
  _this->_impl_.pos_ = from._impl_.pos_;
  // @@protoc_insertion_point(copy_constructor:network.GCRuneLevelupPacket)
}

inline void GCRuneLevelupPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.refine_table_){nullptr}
    , decltype(_impl_.pos_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCRuneLevelupPacket::~GCRuneLevelupPacket() {
  // @@protoc_insertion_point(destructor:network.GCRuneLevelupPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCRuneLevelupPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.refine_table_;
}

void GCRuneLevelupPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCRuneLevelupPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCRuneLevelupPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.refine_table_ != nullptr) {
    delete _impl_.refine_table_;
  }
  _impl_.refine_table_ = nullptr;
  _impl_.pos_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCRuneLevelupPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .network.TRefineTable refine_table = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_refine_table(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCRuneLevelupPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCRuneLevelupPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pos = 1;
  if (this->_internal_pos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pos(), target);
  }

  // .network.TRefineTable refine_table = 2;
  if (this->_internal_has_refine_table()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::refine_table(this),
        _Internal::refine_table(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCRuneLevelupPacket)
  return target;
}

size_t GCRuneLevelupPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCRuneLevelupPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .network.TRefineTable refine_table = 2;
  if (this->_internal_has_refine_table()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.refine_table_);
  }

  // uint32 pos = 1;
  if (this->_internal_pos() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pos());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCRuneLevelupPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCRuneLevelupPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCRuneLevelupPacket::GetClassData() const { return &_class_data_; }


void GCRuneLevelupPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCRuneLevelupPacket*>(&to_msg);
  auto& from = static_cast<const GCRuneLevelupPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCRuneLevelupPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_refine_table()) {
    _this->_internal_mutable_refine_table()->::network::TRefineTable::MergeFrom(
        from._internal_refine_table());
  }
  if (from._internal_pos() != 0) {
    _this->_internal_set_pos(from._internal_pos());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCRuneLevelupPacket::CopyFrom(const GCRuneLevelupPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCRuneLevelupPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCRuneLevelupPacket::IsInitialized() const {
  return true;
}

void GCRuneLevelupPacket::InternalSwap(GCRuneLevelupPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GCRuneLevelupPacket, _impl_.pos_)
      + sizeof(GCRuneLevelupPacket::_impl_.pos_)
      - PROTOBUF_FIELD_OFFSET(GCRuneLevelupPacket, _impl_.refine_table_)>(
          reinterpret_cast<char*>(&_impl_.refine_table_),
          reinterpret_cast<char*>(&other->_impl_.refine_table_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GCRuneLevelupPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[99]);
}

// ===================================================================

class GCEquipmentPageLoadPacket::_Internal {
 public:
};

void GCEquipmentPageLoadPacket::clear_pages() {
  _impl_.pages_.Clear();
}
GCEquipmentPageLoadPacket::GCEquipmentPageLoadPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCEquipmentPageLoadPacket)
}
GCEquipmentPageLoadPacket::GCEquipmentPageLoadPacket(const GCEquipmentPageLoadPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCEquipmentPageLoadPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pages_){from._impl_.pages_}
    , decltype(_impl_.selected_index_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.selected_index_ = from._impl_.selected_index_;
  // @@protoc_insertion_point(copy_constructor:network.GCEquipmentPageLoadPacket)
}

inline void GCEquipmentPageLoadPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pages_){arena}
    , decltype(_impl_.selected_index_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCEquipmentPageLoadPacket::~GCEquipmentPageLoadPacket() {
  // @@protoc_insertion_point(destructor:network.GCEquipmentPageLoadPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCEquipmentPageLoadPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.pages_.~RepeatedPtrField();
}

void GCEquipmentPageLoadPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCEquipmentPageLoadPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCEquipmentPageLoadPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pages_.Clear();
  _impl_.selected_index_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCEquipmentPageLoadPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .network.TEquipmentPageInfo pages = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint32 selected_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.selected_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCEquipmentPageLoadPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCEquipmentPageLoadPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .network.TEquipmentPageInfo pages = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_pages_size()); i < n; i++) {
    const auto& repfield = this->_internal_pages(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // uint32 selected_index = 2;
  if (this->_internal_selected_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_selected_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCEquipmentPageLoadPacket)
  return target;
}

size_t GCEquipmentPageLoadPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCEquipmentPageLoadPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .network.TEquipmentPageInfo pages = 1;
  total_size += 1UL * this->_internal_pages_size();
  for (const auto& msg : this->_impl_.pages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 selected_index = 2;
  if (this->_internal_selected_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_selected_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCEquipmentPageLoadPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCEquipmentPageLoadPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCEquipmentPageLoadPacket::GetClassData() const { return &_class_data_; }


void GCEquipmentPageLoadPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCEquipmentPageLoadPacket*>(&to_msg);
  auto& from = static_cast<const GCEquipmentPageLoadPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCEquipmentPageLoadPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.pages_.MergeFrom(from._impl_.pages_);
  if (from._internal_selected_index() != 0) {
    _this->_internal_set_selected_index(from._internal_selected_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCEquipmentPageLoadPacket::CopyFrom(const GCEquipmentPageLoadPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCEquipmentPageLoadPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCEquipmentPageLoadPacket::IsInitialized() const {
  return true;
}

void GCEquipmentPageLoadPacket::InternalSwap(GCEquipmentPageLoadPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.pages_.InternalSwap(&other->_impl_.pages_);
  swap(_impl_.selected_index_, other->_impl_.selected_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GCEquipmentPageLoadPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[100]);
}

// ===================================================================

class GCDmgMeterPacket::_Internal {
 public:
};

GCDmgMeterPacket::GCDmgMeterPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCDmgMeterPacket)
}
GCDmgMeterPacket::GCDmgMeterPacket(const GCDmgMeterPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCDmgMeterPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.dmg_){}
    , decltype(_impl_.vid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.dmg_, &from._impl_.dmg_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.vid_) -
    reinterpret_cast<char*>(&_impl_.dmg_)) + sizeof(_impl_.vid_));
  // @@protoc_insertion_point(copy_constructor:network.GCDmgMeterPacket)
}

inline void GCDmgMeterPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.dmg_){0}
    , decltype(_impl_.vid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCDmgMeterPacket::~GCDmgMeterPacket() {
  // @@protoc_insertion_point(destructor:network.GCDmgMeterPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCDmgMeterPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GCDmgMeterPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCDmgMeterPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCDmgMeterPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.dmg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.vid_) -
      reinterpret_cast<char*>(&_impl_.dmg_)) + sizeof(_impl_.vid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCDmgMeterPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 dmg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.dmg_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 vid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.vid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCDmgMeterPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCDmgMeterPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 dmg = 1;
  if (this->_internal_dmg() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_dmg(), target);
  }

  // int32 vid = 2;
  if (this->_internal_vid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_vid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCDmgMeterPacket)
  return target;
}

size_t GCDmgMeterPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCDmgMeterPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 dmg = 1;
  if (this->_internal_dmg() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_dmg());
  }

  // int32 vid = 2;
  if (this->_internal_vid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_vid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCDmgMeterPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCDmgMeterPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCDmgMeterPacket::GetClassData() const { return &_class_data_; }


void GCDmgMeterPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCDmgMeterPacket*>(&to_msg);
  auto& from = static_cast<const GCDmgMeterPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCDmgMeterPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_dmg() != 0) {
    _this->_internal_set_dmg(from._internal_dmg());
  }
  if (from._internal_vid() != 0) {
    _this->_internal_set_vid(from._internal_vid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCDmgMeterPacket::CopyFrom(const GCDmgMeterPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCDmgMeterPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCDmgMeterPacket::IsInitialized() const {
  return true;
}

void GCDmgMeterPacket::InternalSwap(GCDmgMeterPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GCDmgMeterPacket, _impl_.vid_)
      + sizeof(GCDmgMeterPacket::_impl_.vid_)
      - PROTOBUF_FIELD_OFFSET(GCDmgMeterPacket, _impl_.dmg_)>(
          reinterpret_cast<char*>(&_impl_.dmg_),
          reinterpret_cast<char*>(&other->_impl_.dmg_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GCDmgMeterPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[101]);
}

// ===================================================================

class GCSkillMotionPacket::_Internal {
 public:
};

GCSkillMotionPacket::GCSkillMotionPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCSkillMotionPacket)
}
GCSkillMotionPacket::GCSkillMotionPacket(const GCSkillMotionPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCSkillMotionPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.vid_){}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.rotation_){}
    , decltype(_impl_.time_){}
    , decltype(_impl_.skill_vnum_){}
    , decltype(_impl_.skill_level_){}
    , decltype(_impl_.skill_grade_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.vid_, &from._impl_.vid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.skill_grade_) -
    reinterpret_cast<char*>(&_impl_.vid_)) + sizeof(_impl_.skill_grade_));
  // @@protoc_insertion_point(copy_constructor:network.GCSkillMotionPacket)
}

inline void GCSkillMotionPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.vid_){0u}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.rotation_){0}
    , decltype(_impl_.time_){0u}
    , decltype(_impl_.skill_vnum_){0u}
    , decltype(_impl_.skill_level_){0u}
    , decltype(_impl_.skill_grade_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCSkillMotionPacket::~GCSkillMotionPacket() {
  // @@protoc_insertion_point(destructor:network.GCSkillMotionPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCSkillMotionPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GCSkillMotionPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCSkillMotionPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCSkillMotionPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.vid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.skill_grade_) -
      reinterpret_cast<char*>(&_impl_.vid_)) + sizeof(_impl_.skill_grade_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCSkillMotionPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 vid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.vid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 rotation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.rotation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 skill_vnum = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.skill_vnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 skill_level = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.skill_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 skill_grade = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.skill_grade_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCSkillMotionPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCSkillMotionPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 vid = 1;
  if (this->_internal_vid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_vid(), target);
  }

  // int32 x = 2;
  if (this->_internal_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_x(), target);
  }

  // int32 y = 3;
  if (this->_internal_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_y(), target);
  }

  // int32 rotation = 4;
  if (this->_internal_rotation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_rotation(), target);
  }

  // uint32 time = 5;
  if (this->_internal_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_time(), target);
  }

  // uint32 skill_vnum = 6;
  if (this->_internal_skill_vnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_skill_vnum(), target);
  }

  // uint32 skill_level = 7;
  if (this->_internal_skill_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_skill_level(), target);
  }

  // uint32 skill_grade = 8;
  if (this->_internal_skill_grade() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_skill_grade(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCSkillMotionPacket)
  return target;
}

size_t GCSkillMotionPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCSkillMotionPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 vid = 1;
  if (this->_internal_vid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_vid());
  }

  // int32 x = 2;
  if (this->_internal_x() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x());
  }

  // int32 y = 3;
  if (this->_internal_y() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y());
  }

  // int32 rotation = 4;
  if (this->_internal_rotation() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_rotation());
  }

  // uint32 time = 5;
  if (this->_internal_time() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_time());
  }

  // uint32 skill_vnum = 6;
  if (this->_internal_skill_vnum() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_skill_vnum());
  }

  // uint32 skill_level = 7;
  if (this->_internal_skill_level() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_skill_level());
  }

  // uint32 skill_grade = 8;
  if (this->_internal_skill_grade() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_skill_grade());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCSkillMotionPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCSkillMotionPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCSkillMotionPacket::GetClassData() const { return &_class_data_; }


void GCSkillMotionPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCSkillMotionPacket*>(&to_msg);
  auto& from = static_cast<const GCSkillMotionPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCSkillMotionPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_vid() != 0) {
    _this->_internal_set_vid(from._internal_vid());
  }
  if (from._internal_x() != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  if (from._internal_y() != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  if (from._internal_rotation() != 0) {
    _this->_internal_set_rotation(from._internal_rotation());
  }
  if (from._internal_time() != 0) {
    _this->_internal_set_time(from._internal_time());
  }
  if (from._internal_skill_vnum() != 0) {
    _this->_internal_set_skill_vnum(from._internal_skill_vnum());
  }
  if (from._internal_skill_level() != 0) {
    _this->_internal_set_skill_level(from._internal_skill_level());
  }
  if (from._internal_skill_grade() != 0) {
    _this->_internal_set_skill_grade(from._internal_skill_grade());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCSkillMotionPacket::CopyFrom(const GCSkillMotionPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCSkillMotionPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCSkillMotionPacket::IsInitialized() const {
  return true;
}

void GCSkillMotionPacket::InternalSwap(GCSkillMotionPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GCSkillMotionPacket, _impl_.skill_grade_)
      + sizeof(GCSkillMotionPacket::_impl_.skill_grade_)
      - PROTOBUF_FIELD_OFFSET(GCSkillMotionPacket, _impl_.vid_)>(
          reinterpret_cast<char*>(&_impl_.vid_),
          reinterpret_cast<char*>(&other->_impl_.vid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GCSkillMotionPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[102]);
}

// ===================================================================

class GCFakeBuffSkillPacket::_Internal {
 public:
};

GCFakeBuffSkillPacket::GCFakeBuffSkillPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCFakeBuffSkillPacket)
}
GCFakeBuffSkillPacket::GCFakeBuffSkillPacket(const GCFakeBuffSkillPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCFakeBuffSkillPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.skill_vnum_){}
    , decltype(_impl_.level_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.skill_vnum_, &from._impl_.skill_vnum_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.level_) -
    reinterpret_cast<char*>(&_impl_.skill_vnum_)) + sizeof(_impl_.level_));
  // @@protoc_insertion_point(copy_constructor:network.GCFakeBuffSkillPacket)
}

inline void GCFakeBuffSkillPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.skill_vnum_){0u}
    , decltype(_impl_.level_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCFakeBuffSkillPacket::~GCFakeBuffSkillPacket() {
  // @@protoc_insertion_point(destructor:network.GCFakeBuffSkillPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCFakeBuffSkillPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GCFakeBuffSkillPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCFakeBuffSkillPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCFakeBuffSkillPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.skill_vnum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.level_) -
      reinterpret_cast<char*>(&_impl_.skill_vnum_)) + sizeof(_impl_.level_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCFakeBuffSkillPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 skill_vnum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.skill_vnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCFakeBuffSkillPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCFakeBuffSkillPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 skill_vnum = 1;
  if (this->_internal_skill_vnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_skill_vnum(), target);
  }

  // uint32 level = 2;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCFakeBuffSkillPacket)
  return target;
}

size_t GCFakeBuffSkillPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCFakeBuffSkillPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 skill_vnum = 1;
  if (this->_internal_skill_vnum() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_skill_vnum());
  }

  // uint32 level = 2;
  if (this->_internal_level() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_level());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCFakeBuffSkillPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCFakeBuffSkillPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCFakeBuffSkillPacket::GetClassData() const { return &_class_data_; }


void GCFakeBuffSkillPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCFakeBuffSkillPacket*>(&to_msg);
  auto& from = static_cast<const GCFakeBuffSkillPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCFakeBuffSkillPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_skill_vnum() != 0) {
    _this->_internal_set_skill_vnum(from._internal_skill_vnum());
  }
  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCFakeBuffSkillPacket::CopyFrom(const GCFakeBuffSkillPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCFakeBuffSkillPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCFakeBuffSkillPacket::IsInitialized() const {
  return true;
}

void GCFakeBuffSkillPacket::InternalSwap(GCFakeBuffSkillPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GCFakeBuffSkillPacket, _impl_.level_)
      + sizeof(GCFakeBuffSkillPacket::_impl_.level_)
      - PROTOBUF_FIELD_OFFSET(GCFakeBuffSkillPacket, _impl_.skill_vnum_)>(
          reinterpret_cast<char*>(&_impl_.skill_vnum_),
          reinterpret_cast<char*>(&other->_impl_.skill_vnum_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GCFakeBuffSkillPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[103]);
}

// ===================================================================

class GCCBTItemSetPacket::_Internal {
 public:
  static const ::network::TItemData& data(const GCCBTItemSetPacket* msg);
};

const ::network::TItemData&
GCCBTItemSetPacket::_Internal::data(const GCCBTItemSetPacket* msg) {
  return *msg->_impl_.data_;
}
void GCCBTItemSetPacket::clear_data() {
  if (GetArenaForAllocation() == nullptr && _impl_.data_ != nullptr) {
    delete _impl_.data_;
  }
  _impl_.data_ = nullptr;
}
GCCBTItemSetPacket::GCCBTItemSetPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCCBTItemSetPacket)
}
GCCBTItemSetPacket::GCCBTItemSetPacket(const GCCBTItemSetPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCCBTItemSetPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){nullptr}
    , decltype(_impl_.cbt_pos_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data()) {
    _this->_impl_.data_ = new ::network::TItemData(*from._impl_.data_);
  }
  _this->_impl_.cbt_pos_ = from._impl_.cbt_pos_;
  // @@protoc_insertion_point(copy_constructor:network.GCCBTItemSetPacket)
}

inline void GCCBTItemSetPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){nullptr}
    , decltype(_impl_.cbt_pos_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCCBTItemSetPacket::~GCCBTItemSetPacket() {
  // @@protoc_insertion_point(destructor:network.GCCBTItemSetPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCCBTItemSetPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.data_;
}

void GCCBTItemSetPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCCBTItemSetPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCCBTItemSetPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.data_ != nullptr) {
    delete _impl_.data_;
  }
  _impl_.data_ = nullptr;
  _impl_.cbt_pos_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCCBTItemSetPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .network.TItemData data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 cbt_pos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.cbt_pos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCCBTItemSetPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCCBTItemSetPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .network.TItemData data = 1;
  if (this->_internal_has_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::data(this),
        _Internal::data(this).GetCachedSize(), target, stream);
  }

  // uint32 cbt_pos = 2;
  if (this->_internal_cbt_pos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_cbt_pos(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCCBTItemSetPacket)
  return target;
}

size_t GCCBTItemSetPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCCBTItemSetPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .network.TItemData data = 1;
  if (this->_internal_has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.data_);
  }

  // uint32 cbt_pos = 2;
  if (this->_internal_cbt_pos() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_cbt_pos());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCCBTItemSetPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCCBTItemSetPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCCBTItemSetPacket::GetClassData() const { return &_class_data_; }


void GCCBTItemSetPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCCBTItemSetPacket*>(&to_msg);
  auto& from = static_cast<const GCCBTItemSetPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCCBTItemSetPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_data()) {
    _this->_internal_mutable_data()->::network::TItemData::MergeFrom(
        from._internal_data());
  }
  if (from._internal_cbt_pos() != 0) {
    _this->_internal_set_cbt_pos(from._internal_cbt_pos());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCCBTItemSetPacket::CopyFrom(const GCCBTItemSetPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCCBTItemSetPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCCBTItemSetPacket::IsInitialized() const {
  return true;
}

void GCCBTItemSetPacket::InternalSwap(GCCBTItemSetPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GCCBTItemSetPacket, _impl_.cbt_pos_)
      + sizeof(GCCBTItemSetPacket::_impl_.cbt_pos_)
      - PROTOBUF_FIELD_OFFSET(GCCBTItemSetPacket, _impl_.data_)>(
          reinterpret_cast<char*>(&_impl_.data_),
          reinterpret_cast<char*>(&other->_impl_.data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GCCBTItemSetPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[104]);
}

// ===================================================================

class GCSoulRefineInfoPacket::_Internal {
 public:
  static const ::network::TRefineTable& refine(const GCSoulRefineInfoPacket* msg);
};

const ::network::TRefineTable&
GCSoulRefineInfoPacket::_Internal::refine(const GCSoulRefineInfoPacket* msg) {
  return *msg->_impl_.refine_;
}
void GCSoulRefineInfoPacket::clear_refine() {
  if (GetArenaForAllocation() == nullptr && _impl_.refine_ != nullptr) {
    delete _impl_.refine_;
  }
  _impl_.refine_ = nullptr;
}
GCSoulRefineInfoPacket::GCSoulRefineInfoPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCSoulRefineInfoPacket)
}
GCSoulRefineInfoPacket::GCSoulRefineInfoPacket(const GCSoulRefineInfoPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCSoulRefineInfoPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.apply_values_){from._impl_.apply_values_}
    , /*decltype(_impl_._apply_values_cached_byte_size_)*/{0}
    , decltype(_impl_.refine_){nullptr}
    , decltype(_impl_.vnum_){}
    , decltype(_impl_.apply_type_){}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_refine()) {
    _this->_impl_.refine_ = new ::network::TRefineTable(*from._impl_.refine_);
  }
  ::memcpy(&_impl_.vnum_, &from._impl_.vnum_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.vnum_)) + sizeof(_impl_.type_));
  // @@protoc_insertion_point(copy_constructor:network.GCSoulRefineInfoPacket)
}

inline void GCSoulRefineInfoPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.apply_values_){arena}
    , /*decltype(_impl_._apply_values_cached_byte_size_)*/{0}
    , decltype(_impl_.refine_){nullptr}
    , decltype(_impl_.vnum_){0u}
    , decltype(_impl_.apply_type_){0u}
    , decltype(_impl_.type_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCSoulRefineInfoPacket::~GCSoulRefineInfoPacket() {
  // @@protoc_insertion_point(destructor:network.GCSoulRefineInfoPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCSoulRefineInfoPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.apply_values_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.refine_;
}

void GCSoulRefineInfoPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCSoulRefineInfoPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCSoulRefineInfoPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.apply_values_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.refine_ != nullptr) {
    delete _impl_.refine_;
  }
  _impl_.refine_ = nullptr;
  ::memset(&_impl_.vnum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.type_) -
      reinterpret_cast<char*>(&_impl_.vnum_)) + sizeof(_impl_.type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCSoulRefineInfoPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 vnum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.vnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 apply_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.apply_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 apply_values = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_apply_values(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_apply_values(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .network.TRefineTable refine = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_refine(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCSoulRefineInfoPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCSoulRefineInfoPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 vnum = 1;
  if (this->_internal_vnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_vnum(), target);
  }

  // uint32 apply_type = 2;
  if (this->_internal_apply_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_apply_type(), target);
  }

  // uint32 type = 3;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_type(), target);
  }

  // repeated int32 apply_values = 4;
  {
    int byte_size = _impl_._apply_values_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          4, _internal_apply_values(), byte_size, target);
    }
  }

  // .network.TRefineTable refine = 5;
  if (this->_internal_has_refine()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::refine(this),
        _Internal::refine(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCSoulRefineInfoPacket)
  return target;
}

size_t GCSoulRefineInfoPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCSoulRefineInfoPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 apply_values = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.apply_values_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._apply_values_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .network.TRefineTable refine = 5;
  if (this->_internal_has_refine()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.refine_);
  }

  // uint32 vnum = 1;
  if (this->_internal_vnum() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_vnum());
  }

  // uint32 apply_type = 2;
  if (this->_internal_apply_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_apply_type());
  }

  // uint32 type = 3;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCSoulRefineInfoPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCSoulRefineInfoPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCSoulRefineInfoPacket::GetClassData() const { return &_class_data_; }


void GCSoulRefineInfoPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCSoulRefineInfoPacket*>(&to_msg);
  auto& from = static_cast<const GCSoulRefineInfoPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCSoulRefineInfoPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.apply_values_.MergeFrom(from._impl_.apply_values_);
  if (from._internal_has_refine()) {
    _this->_internal_mutable_refine()->::network::TRefineTable::MergeFrom(
        from._internal_refine());
  }
  if (from._internal_vnum() != 0) {
    _this->_internal_set_vnum(from._internal_vnum());
  }
  if (from._internal_apply_type() != 0) {
    _this->_internal_set_apply_type(from._internal_apply_type());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCSoulRefineInfoPacket::CopyFrom(const GCSoulRefineInfoPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCSoulRefineInfoPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCSoulRefineInfoPacket::IsInitialized() const {
  return true;
}

void GCSoulRefineInfoPacket::InternalSwap(GCSoulRefineInfoPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.apply_values_.InternalSwap(&other->_impl_.apply_values_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GCSoulRefineInfoPacket, _impl_.type_)
      + sizeof(GCSoulRefineInfoPacket::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(GCSoulRefineInfoPacket, _impl_.refine_)>(
          reinterpret_cast<char*>(&_impl_.refine_),
          reinterpret_cast<char*>(&other->_impl_.refine_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GCSoulRefineInfoPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[105]);
}

// ===================================================================

class GCPVPTeamPacket::_Internal {
 public:
};

GCPVPTeamPacket::GCPVPTeamPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCPVPTeamPacket)
}
GCPVPTeamPacket::GCPVPTeamPacket(const GCPVPTeamPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCPVPTeamPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.vid_){}
    , decltype(_impl_.team_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.vid_, &from._impl_.vid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.team_) -
    reinterpret_cast<char*>(&_impl_.vid_)) + sizeof(_impl_.team_));
  // @@protoc_insertion_point(copy_constructor:network.GCPVPTeamPacket)
}

inline void GCPVPTeamPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.vid_){0u}
    , decltype(_impl_.team_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCPVPTeamPacket::~GCPVPTeamPacket() {
  // @@protoc_insertion_point(destructor:network.GCPVPTeamPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCPVPTeamPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GCPVPTeamPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCPVPTeamPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCPVPTeamPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.vid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.team_) -
      reinterpret_cast<char*>(&_impl_.vid_)) + sizeof(_impl_.team_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCPVPTeamPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 vid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.vid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 team = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.team_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCPVPTeamPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCPVPTeamPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 vid = 1;
  if (this->_internal_vid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_vid(), target);
  }

  // sint32 team = 2;
  if (this->_internal_team() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(2, this->_internal_team(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCPVPTeamPacket)
  return target;
}

size_t GCPVPTeamPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCPVPTeamPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 vid = 1;
  if (this->_internal_vid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_vid());
  }

  // sint32 team = 2;
  if (this->_internal_team() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_team());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCPVPTeamPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCPVPTeamPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCPVPTeamPacket::GetClassData() const { return &_class_data_; }


void GCPVPTeamPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCPVPTeamPacket*>(&to_msg);
  auto& from = static_cast<const GCPVPTeamPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCPVPTeamPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_vid() != 0) {
    _this->_internal_set_vid(from._internal_vid());
  }
  if (from._internal_team() != 0) {
    _this->_internal_set_team(from._internal_team());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCPVPTeamPacket::CopyFrom(const GCPVPTeamPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCPVPTeamPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCPVPTeamPacket::IsInitialized() const {
  return true;
}

void GCPVPTeamPacket::InternalSwap(GCPVPTeamPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GCPVPTeamPacket, _impl_.team_)
      + sizeof(GCPVPTeamPacket::_impl_.team_)
      - PROTOBUF_FIELD_OFFSET(GCPVPTeamPacket, _impl_.vid_)>(
          reinterpret_cast<char*>(&_impl_.vid_),
          reinterpret_cast<char*>(&other->_impl_.vid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GCPVPTeamPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[106]);
}

// ===================================================================

class GCInventoryMaxNumPacket::_Internal {
 public:
};

GCInventoryMaxNumPacket::GCInventoryMaxNumPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCInventoryMaxNumPacket)
}
GCInventoryMaxNumPacket::GCInventoryMaxNumPacket(const GCInventoryMaxNumPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCInventoryMaxNumPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.inv_type_){}
    , decltype(_impl_.max_num_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.inv_type_, &from._impl_.inv_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.max_num_) -
    reinterpret_cast<char*>(&_impl_.inv_type_)) + sizeof(_impl_.max_num_));
  // @@protoc_insertion_point(copy_constructor:network.GCInventoryMaxNumPacket)
}

inline void GCInventoryMaxNumPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.inv_type_){0u}
    , decltype(_impl_.max_num_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCInventoryMaxNumPacket::~GCInventoryMaxNumPacket() {
  // @@protoc_insertion_point(destructor:network.GCInventoryMaxNumPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCInventoryMaxNumPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GCInventoryMaxNumPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCInventoryMaxNumPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCInventoryMaxNumPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.inv_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.max_num_) -
      reinterpret_cast<char*>(&_impl_.inv_type_)) + sizeof(_impl_.max_num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCInventoryMaxNumPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 inv_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.inv_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 max_num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.max_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCInventoryMaxNumPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCInventoryMaxNumPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 inv_type = 1;
  if (this->_internal_inv_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_inv_type(), target);
  }

  // uint32 max_num = 2;
  if (this->_internal_max_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_max_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCInventoryMaxNumPacket)
  return target;
}

size_t GCInventoryMaxNumPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCInventoryMaxNumPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 inv_type = 1;
  if (this->_internal_inv_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_inv_type());
  }

  // uint32 max_num = 2;
  if (this->_internal_max_num() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_max_num());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCInventoryMaxNumPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCInventoryMaxNumPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCInventoryMaxNumPacket::GetClassData() const { return &_class_data_; }


void GCInventoryMaxNumPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCInventoryMaxNumPacket*>(&to_msg);
  auto& from = static_cast<const GCInventoryMaxNumPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCInventoryMaxNumPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_inv_type() != 0) {
    _this->_internal_set_inv_type(from._internal_inv_type());
  }
  if (from._internal_max_num() != 0) {
    _this->_internal_set_max_num(from._internal_max_num());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCInventoryMaxNumPacket::CopyFrom(const GCInventoryMaxNumPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCInventoryMaxNumPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCInventoryMaxNumPacket::IsInitialized() const {
  return true;
}

void GCInventoryMaxNumPacket::InternalSwap(GCInventoryMaxNumPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GCInventoryMaxNumPacket, _impl_.max_num_)
      + sizeof(GCInventoryMaxNumPacket::_impl_.max_num_)
      - PROTOBUF_FIELD_OFFSET(GCInventoryMaxNumPacket, _impl_.inv_type_)>(
          reinterpret_cast<char*>(&_impl_.inv_type_),
          reinterpret_cast<char*>(&other->_impl_.inv_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GCInventoryMaxNumPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[107]);
}

// ===================================================================

class GCAttributesToClientPacket_Attribute::_Internal {
 public:
};

GCAttributesToClientPacket_Attribute::GCAttributesToClientPacket_Attribute(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCAttributesToClientPacket.Attribute)
}
GCAttributesToClientPacket_Attribute::GCAttributesToClientPacket_Attribute(const GCAttributesToClientPacket_Attribute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCAttributesToClientPacket_Attribute* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.value_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.value_));
  // @@protoc_insertion_point(copy_constructor:network.GCAttributesToClientPacket.Attribute)
}

inline void GCAttributesToClientPacket_Attribute::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){0u}
    , decltype(_impl_.value_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCAttributesToClientPacket_Attribute::~GCAttributesToClientPacket_Attribute() {
  // @@protoc_insertion_point(destructor:network.GCAttributesToClientPacket.Attribute)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCAttributesToClientPacket_Attribute::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GCAttributesToClientPacket_Attribute::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCAttributesToClientPacket_Attribute::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCAttributesToClientPacket.Attribute)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.value_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.value_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCAttributesToClientPacket_Attribute::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCAttributesToClientPacket_Attribute::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCAttributesToClientPacket.Attribute)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // int32 value = 2;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCAttributesToClientPacket.Attribute)
  return target;
}

size_t GCAttributesToClientPacket_Attribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCAttributesToClientPacket.Attribute)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
  }

  // int32 value = 2;
  if (this->_internal_value() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCAttributesToClientPacket_Attribute::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCAttributesToClientPacket_Attribute::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCAttributesToClientPacket_Attribute::GetClassData() const { return &_class_data_; }


void GCAttributesToClientPacket_Attribute::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCAttributesToClientPacket_Attribute*>(&to_msg);
  auto& from = static_cast<const GCAttributesToClientPacket_Attribute&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCAttributesToClientPacket.Attribute)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_value() != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCAttributesToClientPacket_Attribute::CopyFrom(const GCAttributesToClientPacket_Attribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCAttributesToClientPacket.Attribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCAttributesToClientPacket_Attribute::IsInitialized() const {
  return true;
}

void GCAttributesToClientPacket_Attribute::InternalSwap(GCAttributesToClientPacket_Attribute* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GCAttributesToClientPacket_Attribute, _impl_.value_)
      + sizeof(GCAttributesToClientPacket_Attribute::_impl_.value_)
      - PROTOBUF_FIELD_OFFSET(GCAttributesToClientPacket_Attribute, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GCAttributesToClientPacket_Attribute::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[108]);
}

// ===================================================================

class GCAttributesToClientPacket::_Internal {
 public:
};

GCAttributesToClientPacket::GCAttributesToClientPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCAttributesToClientPacket)
}
GCAttributesToClientPacket::GCAttributesToClientPacket(const GCAttributesToClientPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCAttributesToClientPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.attrs_){from._impl_.attrs_}
    , decltype(_impl_.item_type_){}
    , decltype(_impl_.item_sub_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.item_type_, &from._impl_.item_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.item_sub_type_) -
    reinterpret_cast<char*>(&_impl_.item_type_)) + sizeof(_impl_.item_sub_type_));
  // @@protoc_insertion_point(copy_constructor:network.GCAttributesToClientPacket)
}

inline void GCAttributesToClientPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.attrs_){arena}
    , decltype(_impl_.item_type_){0u}
    , decltype(_impl_.item_sub_type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCAttributesToClientPacket::~GCAttributesToClientPacket() {
  // @@protoc_insertion_point(destructor:network.GCAttributesToClientPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCAttributesToClientPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.attrs_.~RepeatedPtrField();
}

void GCAttributesToClientPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCAttributesToClientPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCAttributesToClientPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.attrs_.Clear();
  ::memset(&_impl_.item_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.item_sub_type_) -
      reinterpret_cast<char*>(&_impl_.item_type_)) + sizeof(_impl_.item_sub_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCAttributesToClientPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 item_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.item_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 item_sub_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.item_sub_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .network.GCAttributesToClientPacket.Attribute attrs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attrs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCAttributesToClientPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCAttributesToClientPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 item_type = 1;
  if (this->_internal_item_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_item_type(), target);
  }

  // sint32 item_sub_type = 2;
  if (this->_internal_item_sub_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(2, this->_internal_item_sub_type(), target);
  }

  // repeated .network.GCAttributesToClientPacket.Attribute attrs = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_attrs_size()); i < n; i++) {
    const auto& repfield = this->_internal_attrs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCAttributesToClientPacket)
  return target;
}

size_t GCAttributesToClientPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCAttributesToClientPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .network.GCAttributesToClientPacket.Attribute attrs = 3;
  total_size += 1UL * this->_internal_attrs_size();
  for (const auto& msg : this->_impl_.attrs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 item_type = 1;
  if (this->_internal_item_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_item_type());
  }

  // sint32 item_sub_type = 2;
  if (this->_internal_item_sub_type() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_item_sub_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCAttributesToClientPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCAttributesToClientPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCAttributesToClientPacket::GetClassData() const { return &_class_data_; }


void GCAttributesToClientPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCAttributesToClientPacket*>(&to_msg);
  auto& from = static_cast<const GCAttributesToClientPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCAttributesToClientPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.attrs_.MergeFrom(from._impl_.attrs_);
  if (from._internal_item_type() != 0) {
    _this->_internal_set_item_type(from._internal_item_type());
  }
  if (from._internal_item_sub_type() != 0) {
    _this->_internal_set_item_sub_type(from._internal_item_sub_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCAttributesToClientPacket::CopyFrom(const GCAttributesToClientPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCAttributesToClientPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCAttributesToClientPacket::IsInitialized() const {
  return true;
}

void GCAttributesToClientPacket::InternalSwap(GCAttributesToClientPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.attrs_.InternalSwap(&other->_impl_.attrs_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GCAttributesToClientPacket, _impl_.item_sub_type_)
      + sizeof(GCAttributesToClientPacket::_impl_.item_sub_type_)
      - PROTOBUF_FIELD_OFFSET(GCAttributesToClientPacket, _impl_.item_type_)>(
          reinterpret_cast<char*>(&_impl_.item_type_),
          reinterpret_cast<char*>(&other->_impl_.item_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GCAttributesToClientPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[109]);
}

// ===================================================================

class GCHorseRefineInfoPacket::_Internal {
 public:
  static const ::network::TRefineTable& refine(const GCHorseRefineInfoPacket* msg);
};

const ::network::TRefineTable&
GCHorseRefineInfoPacket::_Internal::refine(const GCHorseRefineInfoPacket* msg) {
  return *msg->_impl_.refine_;
}
void GCHorseRefineInfoPacket::clear_refine() {
  if (GetArenaForAllocation() == nullptr && _impl_.refine_ != nullptr) {
    delete _impl_.refine_;
  }
  _impl_.refine_ = nullptr;
}
GCHorseRefineInfoPacket::GCHorseRefineInfoPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCHorseRefineInfoPacket)
}
GCHorseRefineInfoPacket::GCHorseRefineInfoPacket(const GCHorseRefineInfoPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCHorseRefineInfoPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.refine_){nullptr}
    , decltype(_impl_.refine_index_){}
    , decltype(_impl_.current_level_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_refine()) {
    _this->_impl_.refine_ = new ::network::TRefineTable(*from._impl_.refine_);
  }
  ::memcpy(&_impl_.refine_index_, &from._impl_.refine_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.current_level_) -
    reinterpret_cast<char*>(&_impl_.refine_index_)) + sizeof(_impl_.current_level_));
  // @@protoc_insertion_point(copy_constructor:network.GCHorseRefineInfoPacket)
}

inline void GCHorseRefineInfoPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.refine_){nullptr}
    , decltype(_impl_.refine_index_){0u}
    , decltype(_impl_.current_level_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCHorseRefineInfoPacket::~GCHorseRefineInfoPacket() {
  // @@protoc_insertion_point(destructor:network.GCHorseRefineInfoPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCHorseRefineInfoPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.refine_;
}

void GCHorseRefineInfoPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCHorseRefineInfoPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCHorseRefineInfoPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.refine_ != nullptr) {
    delete _impl_.refine_;
  }
  _impl_.refine_ = nullptr;
  ::memset(&_impl_.refine_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.current_level_) -
      reinterpret_cast<char*>(&_impl_.refine_index_)) + sizeof(_impl_.current_level_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCHorseRefineInfoPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 refine_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.refine_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 current_level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.current_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .network.TRefineTable refine = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_refine(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCHorseRefineInfoPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCHorseRefineInfoPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 refine_index = 1;
  if (this->_internal_refine_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_refine_index(), target);
  }

  // uint32 current_level = 2;
  if (this->_internal_current_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_current_level(), target);
  }

  // .network.TRefineTable refine = 3;
  if (this->_internal_has_refine()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::refine(this),
        _Internal::refine(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCHorseRefineInfoPacket)
  return target;
}

size_t GCHorseRefineInfoPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCHorseRefineInfoPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .network.TRefineTable refine = 3;
  if (this->_internal_has_refine()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.refine_);
  }

  // uint32 refine_index = 1;
  if (this->_internal_refine_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_refine_index());
  }

  // uint32 current_level = 2;
  if (this->_internal_current_level() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_current_level());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCHorseRefineInfoPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCHorseRefineInfoPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCHorseRefineInfoPacket::GetClassData() const { return &_class_data_; }


void GCHorseRefineInfoPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCHorseRefineInfoPacket*>(&to_msg);
  auto& from = static_cast<const GCHorseRefineInfoPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCHorseRefineInfoPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_refine()) {
    _this->_internal_mutable_refine()->::network::TRefineTable::MergeFrom(
        from._internal_refine());
  }
  if (from._internal_refine_index() != 0) {
    _this->_internal_set_refine_index(from._internal_refine_index());
  }
  if (from._internal_current_level() != 0) {
    _this->_internal_set_current_level(from._internal_current_level());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCHorseRefineInfoPacket::CopyFrom(const GCHorseRefineInfoPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCHorseRefineInfoPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCHorseRefineInfoPacket::IsInitialized() const {
  return true;
}

void GCHorseRefineInfoPacket::InternalSwap(GCHorseRefineInfoPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GCHorseRefineInfoPacket, _impl_.current_level_)
      + sizeof(GCHorseRefineInfoPacket::_impl_.current_level_)
      - PROTOBUF_FIELD_OFFSET(GCHorseRefineInfoPacket, _impl_.refine_)>(
          reinterpret_cast<char*>(&_impl_.refine_),
          reinterpret_cast<char*>(&other->_impl_.refine_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GCHorseRefineInfoPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[110]);
}

// ===================================================================

class GCHorseRefineResultPacket::_Internal {
 public:
};

GCHorseRefineResultPacket::GCHorseRefineResultPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCHorseRefineResultPacket)
}
GCHorseRefineResultPacket::GCHorseRefineResultPacket(const GCHorseRefineResultPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCHorseRefineResultPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:network.GCHorseRefineResultPacket)
}

inline void GCHorseRefineResultPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCHorseRefineResultPacket::~GCHorseRefineResultPacket() {
  // @@protoc_insertion_point(destructor:network.GCHorseRefineResultPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCHorseRefineResultPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GCHorseRefineResultPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCHorseRefineResultPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCHorseRefineResultPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCHorseRefineResultPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCHorseRefineResultPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCHorseRefineResultPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCHorseRefineResultPacket)
  return target;
}

size_t GCHorseRefineResultPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCHorseRefineResultPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCHorseRefineResultPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCHorseRefineResultPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCHorseRefineResultPacket::GetClassData() const { return &_class_data_; }


void GCHorseRefineResultPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCHorseRefineResultPacket*>(&to_msg);
  auto& from = static_cast<const GCHorseRefineResultPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCHorseRefineResultPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCHorseRefineResultPacket::CopyFrom(const GCHorseRefineResultPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCHorseRefineResultPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCHorseRefineResultPacket::IsInitialized() const {
  return true;
}

void GCHorseRefineResultPacket::InternalSwap(GCHorseRefineResultPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.success_, other->_impl_.success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GCHorseRefineResultPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[111]);
}

// ===================================================================

class GCGayaShopOpenPacket::_Internal {
 public:
};

void GCGayaShopOpenPacket::clear_datas() {
  _impl_.datas_.Clear();
}
GCGayaShopOpenPacket::GCGayaShopOpenPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCGayaShopOpenPacket)
}
GCGayaShopOpenPacket::GCGayaShopOpenPacket(const GCGayaShopOpenPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCGayaShopOpenPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.datas_){from._impl_.datas_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:network.GCGayaShopOpenPacket)
}

inline void GCGayaShopOpenPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.datas_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCGayaShopOpenPacket::~GCGayaShopOpenPacket() {
  // @@protoc_insertion_point(destructor:network.GCGayaShopOpenPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCGayaShopOpenPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.datas_.~RepeatedPtrField();
}

void GCGayaShopOpenPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCGayaShopOpenPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCGayaShopOpenPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.datas_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCGayaShopOpenPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .network.TGayaShopData datas = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_datas(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCGayaShopOpenPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCGayaShopOpenPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .network.TGayaShopData datas = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_datas_size()); i < n; i++) {
    const auto& repfield = this->_internal_datas(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCGayaShopOpenPacket)
  return target;
}

size_t GCGayaShopOpenPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCGayaShopOpenPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .network.TGayaShopData datas = 1;
  total_size += 1UL * this->_internal_datas_size();
  for (const auto& msg : this->_impl_.datas_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCGayaShopOpenPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCGayaShopOpenPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCGayaShopOpenPacket::GetClassData() const { return &_class_data_; }


void GCGayaShopOpenPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCGayaShopOpenPacket*>(&to_msg);
  auto& from = static_cast<const GCGayaShopOpenPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCGayaShopOpenPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.datas_.MergeFrom(from._impl_.datas_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCGayaShopOpenPacket::CopyFrom(const GCGayaShopOpenPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCGayaShopOpenPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGayaShopOpenPacket::IsInitialized() const {
  return true;
}

void GCGayaShopOpenPacket::InternalSwap(GCGayaShopOpenPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.datas_.InternalSwap(&other->_impl_.datas_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GCGayaShopOpenPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[112]);
}

// ===================================================================

class GCBattlepassDataPacket::_Internal {
 public:
  static const ::network::TBattlepassData& data(const GCBattlepassDataPacket* msg);
};

const ::network::TBattlepassData&
GCBattlepassDataPacket::_Internal::data(const GCBattlepassDataPacket* msg) {
  return *msg->_impl_.data_;
}
void GCBattlepassDataPacket::clear_data() {
  if (GetArenaForAllocation() == nullptr && _impl_.data_ != nullptr) {
    delete _impl_.data_;
  }
  _impl_.data_ = nullptr;
}
GCBattlepassDataPacket::GCBattlepassDataPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCBattlepassDataPacket)
}
GCBattlepassDataPacket::GCBattlepassDataPacket(const GCBattlepassDataPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCBattlepassDataPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){nullptr}
    , decltype(_impl_.index_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data()) {
    _this->_impl_.data_ = new ::network::TBattlepassData(*from._impl_.data_);
  }
  _this->_impl_.index_ = from._impl_.index_;
  // @@protoc_insertion_point(copy_constructor:network.GCBattlepassDataPacket)
}

inline void GCBattlepassDataPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){nullptr}
    , decltype(_impl_.index_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCBattlepassDataPacket::~GCBattlepassDataPacket() {
  // @@protoc_insertion_point(destructor:network.GCBattlepassDataPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCBattlepassDataPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.data_;
}

void GCBattlepassDataPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCBattlepassDataPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCBattlepassDataPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.data_ != nullptr) {
    delete _impl_.data_;
  }
  _impl_.data_ = nullptr;
  _impl_.index_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCBattlepassDataPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .network.TBattlepassData data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCBattlepassDataPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCBattlepassDataPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 index = 1;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_index(), target);
  }

  // .network.TBattlepassData data = 2;
  if (this->_internal_has_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::data(this),
        _Internal::data(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCBattlepassDataPacket)
  return target;
}

size_t GCBattlepassDataPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCBattlepassDataPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .network.TBattlepassData data = 2;
  if (this->_internal_has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.data_);
  }

  // uint32 index = 1;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCBattlepassDataPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCBattlepassDataPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCBattlepassDataPacket::GetClassData() const { return &_class_data_; }


void GCBattlepassDataPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCBattlepassDataPacket*>(&to_msg);
  auto& from = static_cast<const GCBattlepassDataPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCBattlepassDataPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_data()) {
    _this->_internal_mutable_data()->::network::TBattlepassData::MergeFrom(
        from._internal_data());
  }
  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCBattlepassDataPacket::CopyFrom(const GCBattlepassDataPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCBattlepassDataPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCBattlepassDataPacket::IsInitialized() const {
  return true;
}

void GCBattlepassDataPacket::InternalSwap(GCBattlepassDataPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GCBattlepassDataPacket, _impl_.index_)
      + sizeof(GCBattlepassDataPacket::_impl_.index_)
      - PROTOBUF_FIELD_OFFSET(GCBattlepassDataPacket, _impl_.data_)>(
          reinterpret_cast<char*>(&_impl_.data_),
          reinterpret_cast<char*>(&other->_impl_.data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GCBattlepassDataPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[113]);
}

// ===================================================================

class GCCrystalRefinePacket::_Internal {
 public:
  static const ::network::TItemPos& crystal_cell(const GCCrystalRefinePacket* msg);
  static const ::network::TItemPos& scroll_cell(const GCCrystalRefinePacket* msg);
};

const ::network::TItemPos&
GCCrystalRefinePacket::_Internal::crystal_cell(const GCCrystalRefinePacket* msg) {
  return *msg->_impl_.crystal_cell_;
}
const ::network::TItemPos&
GCCrystalRefinePacket::_Internal::scroll_cell(const GCCrystalRefinePacket* msg) {
  return *msg->_impl_.scroll_cell_;
}
void GCCrystalRefinePacket::clear_crystal_cell() {
  if (GetArenaForAllocation() == nullptr && _impl_.crystal_cell_ != nullptr) {
    delete _impl_.crystal_cell_;
  }
  _impl_.crystal_cell_ = nullptr;
}
void GCCrystalRefinePacket::clear_scroll_cell() {
  if (GetArenaForAllocation() == nullptr && _impl_.scroll_cell_ != nullptr) {
    delete _impl_.scroll_cell_;
  }
  _impl_.scroll_cell_ = nullptr;
}
void GCCrystalRefinePacket::clear_next_attributes() {
  _impl_.next_attributes_.Clear();
}
GCCrystalRefinePacket::GCCrystalRefinePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCCrystalRefinePacket)
}
GCCrystalRefinePacket::GCCrystalRefinePacket(const GCCrystalRefinePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCCrystalRefinePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.next_attributes_){from._impl_.next_attributes_}
    , decltype(_impl_.crystal_cell_){nullptr}
    , decltype(_impl_.scroll_cell_){nullptr}
    , decltype(_impl_.next_clarity_type_){}
    , decltype(_impl_.next_clarity_level_){}
    , decltype(_impl_.required_fragments_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_crystal_cell()) {
    _this->_impl_.crystal_cell_ = new ::network::TItemPos(*from._impl_.crystal_cell_);
  }
  if (from._internal_has_scroll_cell()) {
    _this->_impl_.scroll_cell_ = new ::network::TItemPos(*from._impl_.scroll_cell_);
  }
  ::memcpy(&_impl_.next_clarity_type_, &from._impl_.next_clarity_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.required_fragments_) -
    reinterpret_cast<char*>(&_impl_.next_clarity_type_)) + sizeof(_impl_.required_fragments_));
  // @@protoc_insertion_point(copy_constructor:network.GCCrystalRefinePacket)
}

inline void GCCrystalRefinePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.next_attributes_){arena}
    , decltype(_impl_.crystal_cell_){nullptr}
    , decltype(_impl_.scroll_cell_){nullptr}
    , decltype(_impl_.next_clarity_type_){0u}
    , decltype(_impl_.next_clarity_level_){0u}
    , decltype(_impl_.required_fragments_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCCrystalRefinePacket::~GCCrystalRefinePacket() {
  // @@protoc_insertion_point(destructor:network.GCCrystalRefinePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCCrystalRefinePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.next_attributes_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.crystal_cell_;
  if (this != internal_default_instance()) delete _impl_.scroll_cell_;
}

void GCCrystalRefinePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCCrystalRefinePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCCrystalRefinePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.next_attributes_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.crystal_cell_ != nullptr) {
    delete _impl_.crystal_cell_;
  }
  _impl_.crystal_cell_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.scroll_cell_ != nullptr) {
    delete _impl_.scroll_cell_;
  }
  _impl_.scroll_cell_ = nullptr;
  ::memset(&_impl_.next_clarity_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.required_fragments_) -
      reinterpret_cast<char*>(&_impl_.next_clarity_type_)) + sizeof(_impl_.required_fragments_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCCrystalRefinePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .network.TItemPos crystal_cell = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_crystal_cell(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .network.TItemPos scroll_cell = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_scroll_cell(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 next_clarity_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.next_clarity_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 next_clarity_level = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.next_clarity_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .network.TItemAttribute next_attributes = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_next_attributes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint32 required_fragments = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.required_fragments_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCCrystalRefinePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCCrystalRefinePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .network.TItemPos crystal_cell = 1;
  if (this->_internal_has_crystal_cell()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::crystal_cell(this),
        _Internal::crystal_cell(this).GetCachedSize(), target, stream);
  }

  // .network.TItemPos scroll_cell = 2;
  if (this->_internal_has_scroll_cell()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::scroll_cell(this),
        _Internal::scroll_cell(this).GetCachedSize(), target, stream);
  }

  // uint32 next_clarity_type = 3;
  if (this->_internal_next_clarity_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_next_clarity_type(), target);
  }

  // uint32 next_clarity_level = 4;
  if (this->_internal_next_clarity_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_next_clarity_level(), target);
  }

  // repeated .network.TItemAttribute next_attributes = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_next_attributes_size()); i < n; i++) {
    const auto& repfield = this->_internal_next_attributes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // uint32 required_fragments = 6;
  if (this->_internal_required_fragments() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_required_fragments(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCCrystalRefinePacket)
  return target;
}

size_t GCCrystalRefinePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCCrystalRefinePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .network.TItemAttribute next_attributes = 5;
  total_size += 1UL * this->_internal_next_attributes_size();
  for (const auto& msg : this->_impl_.next_attributes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .network.TItemPos crystal_cell = 1;
  if (this->_internal_has_crystal_cell()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.crystal_cell_);
  }

  // .network.TItemPos scroll_cell = 2;
  if (this->_internal_has_scroll_cell()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.scroll_cell_);
  }

  // uint32 next_clarity_type = 3;
  if (this->_internal_next_clarity_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_next_clarity_type());
  }

  // uint32 next_clarity_level = 4;
  if (this->_internal_next_clarity_level() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_next_clarity_level());
  }

  // uint32 required_fragments = 6;
  if (this->_internal_required_fragments() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_required_fragments());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCCrystalRefinePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCCrystalRefinePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCCrystalRefinePacket::GetClassData() const { return &_class_data_; }


void GCCrystalRefinePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCCrystalRefinePacket*>(&to_msg);
  auto& from = static_cast<const GCCrystalRefinePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCCrystalRefinePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.next_attributes_.MergeFrom(from._impl_.next_attributes_);
  if (from._internal_has_crystal_cell()) {
    _this->_internal_mutable_crystal_cell()->::network::TItemPos::MergeFrom(
        from._internal_crystal_cell());
  }
  if (from._internal_has_scroll_cell()) {
    _this->_internal_mutable_scroll_cell()->::network::TItemPos::MergeFrom(
        from._internal_scroll_cell());
  }
  if (from._internal_next_clarity_type() != 0) {
    _this->_internal_set_next_clarity_type(from._internal_next_clarity_type());
  }
  if (from._internal_next_clarity_level() != 0) {
    _this->_internal_set_next_clarity_level(from._internal_next_clarity_level());
  }
  if (from._internal_required_fragments() != 0) {
    _this->_internal_set_required_fragments(from._internal_required_fragments());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCCrystalRefinePacket::CopyFrom(const GCCrystalRefinePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCCrystalRefinePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCCrystalRefinePacket::IsInitialized() const {
  return true;
}

void GCCrystalRefinePacket::InternalSwap(GCCrystalRefinePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.next_attributes_.InternalSwap(&other->_impl_.next_attributes_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GCCrystalRefinePacket, _impl_.required_fragments_)
      + sizeof(GCCrystalRefinePacket::_impl_.required_fragments_)
      - PROTOBUF_FIELD_OFFSET(GCCrystalRefinePacket, _impl_.crystal_cell_)>(
          reinterpret_cast<char*>(&_impl_.crystal_cell_),
          reinterpret_cast<char*>(&other->_impl_.crystal_cell_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GCCrystalRefinePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[114]);
}

// ===================================================================

class GCCrystalUsingSlotPacket::_Internal {
 public:
  static const ::network::TItemPos& cell(const GCCrystalUsingSlotPacket* msg);
};

const ::network::TItemPos&
GCCrystalUsingSlotPacket::_Internal::cell(const GCCrystalUsingSlotPacket* msg) {
  return *msg->_impl_.cell_;
}
void GCCrystalUsingSlotPacket::clear_cell() {
  if (GetArenaForAllocation() == nullptr && _impl_.cell_ != nullptr) {
    delete _impl_.cell_;
  }
  _impl_.cell_ = nullptr;
}
GCCrystalUsingSlotPacket::GCCrystalUsingSlotPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCCrystalUsingSlotPacket)
}
GCCrystalUsingSlotPacket::GCCrystalUsingSlotPacket(const GCCrystalUsingSlotPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCCrystalUsingSlotPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.cell_){nullptr}
    , decltype(_impl_.active_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_cell()) {
    _this->_impl_.cell_ = new ::network::TItemPos(*from._impl_.cell_);
  }
  _this->_impl_.active_ = from._impl_.active_;
  // @@protoc_insertion_point(copy_constructor:network.GCCrystalUsingSlotPacket)
}

inline void GCCrystalUsingSlotPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.cell_){nullptr}
    , decltype(_impl_.active_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCCrystalUsingSlotPacket::~GCCrystalUsingSlotPacket() {
  // @@protoc_insertion_point(destructor:network.GCCrystalUsingSlotPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCCrystalUsingSlotPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.cell_;
}

void GCCrystalUsingSlotPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCCrystalUsingSlotPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCCrystalUsingSlotPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.cell_ != nullptr) {
    delete _impl_.cell_;
  }
  _impl_.cell_ = nullptr;
  _impl_.active_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCCrystalUsingSlotPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .network.TItemPos cell = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool active = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCCrystalUsingSlotPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCCrystalUsingSlotPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .network.TItemPos cell = 1;
  if (this->_internal_has_cell()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::cell(this),
        _Internal::cell(this).GetCachedSize(), target, stream);
  }

  // bool active = 2;
  if (this->_internal_active() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_active(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCCrystalUsingSlotPacket)
  return target;
}

size_t GCCrystalUsingSlotPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCCrystalUsingSlotPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .network.TItemPos cell = 1;
  if (this->_internal_has_cell()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cell_);
  }

  // bool active = 2;
  if (this->_internal_active() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCCrystalUsingSlotPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCCrystalUsingSlotPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCCrystalUsingSlotPacket::GetClassData() const { return &_class_data_; }


void GCCrystalUsingSlotPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCCrystalUsingSlotPacket*>(&to_msg);
  auto& from = static_cast<const GCCrystalUsingSlotPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCCrystalUsingSlotPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_cell()) {
    _this->_internal_mutable_cell()->::network::TItemPos::MergeFrom(
        from._internal_cell());
  }
  if (from._internal_active() != 0) {
    _this->_internal_set_active(from._internal_active());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCCrystalUsingSlotPacket::CopyFrom(const GCCrystalUsingSlotPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCCrystalUsingSlotPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCCrystalUsingSlotPacket::IsInitialized() const {
  return true;
}

void GCCrystalUsingSlotPacket::InternalSwap(GCCrystalUsingSlotPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GCCrystalUsingSlotPacket, _impl_.active_)
      + sizeof(GCCrystalUsingSlotPacket::_impl_.active_)
      - PROTOBUF_FIELD_OFFSET(GCCrystalUsingSlotPacket, _impl_.cell_)>(
          reinterpret_cast<char*>(&_impl_.cell_),
          reinterpret_cast<char*>(&other->_impl_.cell_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GCCrystalUsingSlotPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[115]);
}

// ===================================================================

class GCAuctionOwnedGoldPacket::_Internal {
 public:
};

GCAuctionOwnedGoldPacket::GCAuctionOwnedGoldPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCAuctionOwnedGoldPacket)
}
GCAuctionOwnedGoldPacket::GCAuctionOwnedGoldPacket(const GCAuctionOwnedGoldPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCAuctionOwnedGoldPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.gold_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.gold_ = from._impl_.gold_;
  // @@protoc_insertion_point(copy_constructor:network.GCAuctionOwnedGoldPacket)
}

inline void GCAuctionOwnedGoldPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.gold_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCAuctionOwnedGoldPacket::~GCAuctionOwnedGoldPacket() {
  // @@protoc_insertion_point(destructor:network.GCAuctionOwnedGoldPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCAuctionOwnedGoldPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GCAuctionOwnedGoldPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCAuctionOwnedGoldPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCAuctionOwnedGoldPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.gold_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCAuctionOwnedGoldPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 gold = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCAuctionOwnedGoldPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCAuctionOwnedGoldPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 gold = 1;
  if (this->_internal_gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_gold(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCAuctionOwnedGoldPacket)
  return target;
}

size_t GCAuctionOwnedGoldPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCAuctionOwnedGoldPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 gold = 1;
  if (this->_internal_gold() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_gold());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCAuctionOwnedGoldPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCAuctionOwnedGoldPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCAuctionOwnedGoldPacket::GetClassData() const { return &_class_data_; }


void GCAuctionOwnedGoldPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCAuctionOwnedGoldPacket*>(&to_msg);
  auto& from = static_cast<const GCAuctionOwnedGoldPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCAuctionOwnedGoldPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_gold() != 0) {
    _this->_internal_set_gold(from._internal_gold());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCAuctionOwnedGoldPacket::CopyFrom(const GCAuctionOwnedGoldPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCAuctionOwnedGoldPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCAuctionOwnedGoldPacket::IsInitialized() const {
  return true;
}

void GCAuctionOwnedGoldPacket::InternalSwap(GCAuctionOwnedGoldPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.gold_, other->_impl_.gold_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GCAuctionOwnedGoldPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[116]);
}

// ===================================================================

class GCAuctionOwnedItemPacket::_Internal {
 public:
  static const ::network::TShopItemTable& item(const GCAuctionOwnedItemPacket* msg);
};

const ::network::TShopItemTable&
GCAuctionOwnedItemPacket::_Internal::item(const GCAuctionOwnedItemPacket* msg) {
  return *msg->_impl_.item_;
}
void GCAuctionOwnedItemPacket::clear_item() {
  if (GetArenaForAllocation() == nullptr && _impl_.item_ != nullptr) {
    delete _impl_.item_;
  }
  _impl_.item_ = nullptr;
}
GCAuctionOwnedItemPacket::GCAuctionOwnedItemPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCAuctionOwnedItemPacket)
}
GCAuctionOwnedItemPacket::GCAuctionOwnedItemPacket(const GCAuctionOwnedItemPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCAuctionOwnedItemPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.item_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_item()) {
    _this->_impl_.item_ = new ::network::TShopItemTable(*from._impl_.item_);
  }
  // @@protoc_insertion_point(copy_constructor:network.GCAuctionOwnedItemPacket)
}

inline void GCAuctionOwnedItemPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.item_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCAuctionOwnedItemPacket::~GCAuctionOwnedItemPacket() {
  // @@protoc_insertion_point(destructor:network.GCAuctionOwnedItemPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCAuctionOwnedItemPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.item_;
}

void GCAuctionOwnedItemPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCAuctionOwnedItemPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCAuctionOwnedItemPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.item_ != nullptr) {
    delete _impl_.item_;
  }
  _impl_.item_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCAuctionOwnedItemPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .network.TShopItemTable item = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_item(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCAuctionOwnedItemPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCAuctionOwnedItemPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .network.TShopItemTable item = 1;
  if (this->_internal_has_item()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::item(this),
        _Internal::item(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCAuctionOwnedItemPacket)
  return target;
}

size_t GCAuctionOwnedItemPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCAuctionOwnedItemPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .network.TShopItemTable item = 1;
  if (this->_internal_has_item()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.item_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCAuctionOwnedItemPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCAuctionOwnedItemPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCAuctionOwnedItemPacket::GetClassData() const { return &_class_data_; }


void GCAuctionOwnedItemPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCAuctionOwnedItemPacket*>(&to_msg);
  auto& from = static_cast<const GCAuctionOwnedItemPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCAuctionOwnedItemPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_item()) {
    _this->_internal_mutable_item()->::network::TShopItemTable::MergeFrom(
        from._internal_item());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCAuctionOwnedItemPacket::CopyFrom(const GCAuctionOwnedItemPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCAuctionOwnedItemPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCAuctionOwnedItemPacket::IsInitialized() const {
  return true;
}

void GCAuctionOwnedItemPacket::InternalSwap(GCAuctionOwnedItemPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.item_, other->_impl_.item_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GCAuctionOwnedItemPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[117]);
}

// ===================================================================

class GCAuctionSearchResultPacket::_Internal {
 public:
};

void GCAuctionSearchResultPacket::clear_items() {
  _impl_.items_.Clear();
}
GCAuctionSearchResultPacket::GCAuctionSearchResultPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCAuctionSearchResultPacket)
}
GCAuctionSearchResultPacket::GCAuctionSearchResultPacket(const GCAuctionSearchResultPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCAuctionSearchResultPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , decltype(_impl_.page_){}
    , decltype(_impl_.max_page_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.page_, &from._impl_.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.max_page_) -
    reinterpret_cast<char*>(&_impl_.page_)) + sizeof(_impl_.max_page_));
  // @@protoc_insertion_point(copy_constructor:network.GCAuctionSearchResultPacket)
}

inline void GCAuctionSearchResultPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , decltype(_impl_.page_){0}
    , decltype(_impl_.max_page_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCAuctionSearchResultPacket::~GCAuctionSearchResultPacket() {
  // @@protoc_insertion_point(destructor:network.GCAuctionSearchResultPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCAuctionSearchResultPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
}

void GCAuctionSearchResultPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCAuctionSearchResultPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCAuctionSearchResultPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  ::memset(&_impl_.page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.max_page_) -
      reinterpret_cast<char*>(&_impl_.page_)) + sizeof(_impl_.max_page_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCAuctionSearchResultPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // sint32 page = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 max_page = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.max_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .network.TShopItemTable items = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCAuctionSearchResultPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCAuctionSearchResultPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 page = 1;
  if (this->_internal_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(1, this->_internal_page(), target);
  }

  // sint32 max_page = 2;
  if (this->_internal_max_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(2, this->_internal_max_page(), target);
  }

  // repeated .network.TShopItemTable items = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCAuctionSearchResultPacket)
  return target;
}

size_t GCAuctionSearchResultPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCAuctionSearchResultPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .network.TShopItemTable items = 3;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // sint32 page = 1;
  if (this->_internal_page() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_page());
  }

  // sint32 max_page = 2;
  if (this->_internal_max_page() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_max_page());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCAuctionSearchResultPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCAuctionSearchResultPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCAuctionSearchResultPacket::GetClassData() const { return &_class_data_; }


void GCAuctionSearchResultPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCAuctionSearchResultPacket*>(&to_msg);
  auto& from = static_cast<const GCAuctionSearchResultPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCAuctionSearchResultPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  if (from._internal_page() != 0) {
    _this->_internal_set_page(from._internal_page());
  }
  if (from._internal_max_page() != 0) {
    _this->_internal_set_max_page(from._internal_max_page());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCAuctionSearchResultPacket::CopyFrom(const GCAuctionSearchResultPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCAuctionSearchResultPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCAuctionSearchResultPacket::IsInitialized() const {
  return true;
}

void GCAuctionSearchResultPacket::InternalSwap(GCAuctionSearchResultPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GCAuctionSearchResultPacket, _impl_.max_page_)
      + sizeof(GCAuctionSearchResultPacket::_impl_.max_page_)
      - PROTOBUF_FIELD_OFFSET(GCAuctionSearchResultPacket, _impl_.page_)>(
          reinterpret_cast<char*>(&_impl_.page_),
          reinterpret_cast<char*>(&other->_impl_.page_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GCAuctionSearchResultPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[118]);
}

// ===================================================================

class GCAuctionMessagePacket::_Internal {
 public:
};

GCAuctionMessagePacket::GCAuctionMessagePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCAuctionMessagePacket)
}
GCAuctionMessagePacket::GCAuctionMessagePacket(const GCAuctionMessagePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCAuctionMessagePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:network.GCAuctionMessagePacket)
}

inline void GCAuctionMessagePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GCAuctionMessagePacket::~GCAuctionMessagePacket() {
  // @@protoc_insertion_point(destructor:network.GCAuctionMessagePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCAuctionMessagePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
}

void GCAuctionMessagePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCAuctionMessagePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCAuctionMessagePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCAuctionMessagePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "network.GCAuctionMessagePacket.message"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCAuctionMessagePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCAuctionMessagePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string message = 1;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "network.GCAuctionMessagePacket.message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCAuctionMessagePacket)
  return target;
}

size_t GCAuctionMessagePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCAuctionMessagePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 1;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCAuctionMessagePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCAuctionMessagePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCAuctionMessagePacket::GetClassData() const { return &_class_data_; }


void GCAuctionMessagePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCAuctionMessagePacket*>(&to_msg);
  auto& from = static_cast<const GCAuctionMessagePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCAuctionMessagePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCAuctionMessagePacket::CopyFrom(const GCAuctionMessagePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCAuctionMessagePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCAuctionMessagePacket::IsInitialized() const {
  return true;
}

void GCAuctionMessagePacket::InternalSwap(GCAuctionMessagePacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GCAuctionMessagePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[119]);
}

// ===================================================================

class GCAuctionShopOwnedPacket::_Internal {
 public:
};

GCAuctionShopOwnedPacket::GCAuctionShopOwnedPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCAuctionShopOwnedPacket)
}
GCAuctionShopOwnedPacket::GCAuctionShopOwnedPacket(const GCAuctionShopOwnedPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCAuctionShopOwnedPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.owned_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.owned_ = from._impl_.owned_;
  // @@protoc_insertion_point(copy_constructor:network.GCAuctionShopOwnedPacket)
}

inline void GCAuctionShopOwnedPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.owned_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCAuctionShopOwnedPacket::~GCAuctionShopOwnedPacket() {
  // @@protoc_insertion_point(destructor:network.GCAuctionShopOwnedPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCAuctionShopOwnedPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GCAuctionShopOwnedPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCAuctionShopOwnedPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCAuctionShopOwnedPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.owned_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCAuctionShopOwnedPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool owned = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.owned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCAuctionShopOwnedPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCAuctionShopOwnedPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool owned = 1;
  if (this->_internal_owned() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_owned(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCAuctionShopOwnedPacket)
  return target;
}

size_t GCAuctionShopOwnedPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCAuctionShopOwnedPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool owned = 1;
  if (this->_internal_owned() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCAuctionShopOwnedPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCAuctionShopOwnedPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCAuctionShopOwnedPacket::GetClassData() const { return &_class_data_; }


void GCAuctionShopOwnedPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCAuctionShopOwnedPacket*>(&to_msg);
  auto& from = static_cast<const GCAuctionShopOwnedPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCAuctionShopOwnedPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_owned() != 0) {
    _this->_internal_set_owned(from._internal_owned());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCAuctionShopOwnedPacket::CopyFrom(const GCAuctionShopOwnedPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCAuctionShopOwnedPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCAuctionShopOwnedPacket::IsInitialized() const {
  return true;
}

void GCAuctionShopOwnedPacket::InternalSwap(GCAuctionShopOwnedPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.owned_, other->_impl_.owned_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GCAuctionShopOwnedPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[120]);
}

// ===================================================================

class GCAuctionShopPacket::_Internal {
 public:
};

void GCAuctionShopPacket::clear_items() {
  _impl_.items_.Clear();
}
GCAuctionShopPacket::GCAuctionShopPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCAuctionShopPacket)
}
GCAuctionShopPacket::GCAuctionShopPacket(const GCAuctionShopPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCAuctionShopPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.gold_){}
    , decltype(_impl_.timeout_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.gold_, &from._impl_.gold_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.timeout_) -
    reinterpret_cast<char*>(&_impl_.gold_)) + sizeof(_impl_.timeout_));
  // @@protoc_insertion_point(copy_constructor:network.GCAuctionShopPacket)
}

inline void GCAuctionShopPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.gold_){uint64_t{0u}}
    , decltype(_impl_.timeout_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GCAuctionShopPacket::~GCAuctionShopPacket() {
  // @@protoc_insertion_point(destructor:network.GCAuctionShopPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCAuctionShopPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
  _impl_.name_.Destroy();
}

void GCAuctionShopPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCAuctionShopPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCAuctionShopPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  _impl_.name_.ClearToEmpty();
  ::memset(&_impl_.gold_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.timeout_) -
      reinterpret_cast<char*>(&_impl_.gold_)) + sizeof(_impl_.timeout_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCAuctionShopPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "network.GCAuctionShopPacket.name"));
        } else
          goto handle_unusual;
        continue;
      // uint32 timeout = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 gold = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .network.TItemData items = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCAuctionShopPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCAuctionShopPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "network.GCAuctionShopPacket.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // uint32 timeout = 2;
  if (this->_internal_timeout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_timeout(), target);
  }

  // uint64 gold = 3;
  if (this->_internal_gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_gold(), target);
  }

  // repeated .network.TItemData items = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCAuctionShopPacket)
  return target;
}

size_t GCAuctionShopPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCAuctionShopPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .network.TItemData items = 4;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint64 gold = 3;
  if (this->_internal_gold() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_gold());
  }

  // uint32 timeout = 2;
  if (this->_internal_timeout() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_timeout());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCAuctionShopPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCAuctionShopPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCAuctionShopPacket::GetClassData() const { return &_class_data_; }


void GCAuctionShopPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCAuctionShopPacket*>(&to_msg);
  auto& from = static_cast<const GCAuctionShopPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCAuctionShopPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_gold() != 0) {
    _this->_internal_set_gold(from._internal_gold());
  }
  if (from._internal_timeout() != 0) {
    _this->_internal_set_timeout(from._internal_timeout());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCAuctionShopPacket::CopyFrom(const GCAuctionShopPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCAuctionShopPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCAuctionShopPacket::IsInitialized() const {
  return true;
}

void GCAuctionShopPacket::InternalSwap(GCAuctionShopPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GCAuctionShopPacket, _impl_.timeout_)
      + sizeof(GCAuctionShopPacket::_impl_.timeout_)
      - PROTOBUF_FIELD_OFFSET(GCAuctionShopPacket, _impl_.gold_)>(
          reinterpret_cast<char*>(&_impl_.gold_),
          reinterpret_cast<char*>(&other->_impl_.gold_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GCAuctionShopPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[121]);
}

// ===================================================================

class GCAuctionShopGoldPacket::_Internal {
 public:
};

GCAuctionShopGoldPacket::GCAuctionShopGoldPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCAuctionShopGoldPacket)
}
GCAuctionShopGoldPacket::GCAuctionShopGoldPacket(const GCAuctionShopGoldPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCAuctionShopGoldPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.gold_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.gold_ = from._impl_.gold_;
  // @@protoc_insertion_point(copy_constructor:network.GCAuctionShopGoldPacket)
}

inline void GCAuctionShopGoldPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.gold_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCAuctionShopGoldPacket::~GCAuctionShopGoldPacket() {
  // @@protoc_insertion_point(destructor:network.GCAuctionShopGoldPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCAuctionShopGoldPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GCAuctionShopGoldPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCAuctionShopGoldPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCAuctionShopGoldPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.gold_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCAuctionShopGoldPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 gold = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCAuctionShopGoldPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCAuctionShopGoldPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 gold = 1;
  if (this->_internal_gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_gold(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCAuctionShopGoldPacket)
  return target;
}

size_t GCAuctionShopGoldPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCAuctionShopGoldPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 gold = 1;
  if (this->_internal_gold() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_gold());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCAuctionShopGoldPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCAuctionShopGoldPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCAuctionShopGoldPacket::GetClassData() const { return &_class_data_; }


void GCAuctionShopGoldPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCAuctionShopGoldPacket*>(&to_msg);
  auto& from = static_cast<const GCAuctionShopGoldPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCAuctionShopGoldPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_gold() != 0) {
    _this->_internal_set_gold(from._internal_gold());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCAuctionShopGoldPacket::CopyFrom(const GCAuctionShopGoldPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCAuctionShopGoldPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCAuctionShopGoldPacket::IsInitialized() const {
  return true;
}

void GCAuctionShopGoldPacket::InternalSwap(GCAuctionShopGoldPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.gold_, other->_impl_.gold_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GCAuctionShopGoldPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[122]);
}

// ===================================================================

class GCAuctionShopTimeoutPacket::_Internal {
 public:
};

GCAuctionShopTimeoutPacket::GCAuctionShopTimeoutPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCAuctionShopTimeoutPacket)
}
GCAuctionShopTimeoutPacket::GCAuctionShopTimeoutPacket(const GCAuctionShopTimeoutPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCAuctionShopTimeoutPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.timeout_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.timeout_ = from._impl_.timeout_;
  // @@protoc_insertion_point(copy_constructor:network.GCAuctionShopTimeoutPacket)
}

inline void GCAuctionShopTimeoutPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.timeout_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCAuctionShopTimeoutPacket::~GCAuctionShopTimeoutPacket() {
  // @@protoc_insertion_point(destructor:network.GCAuctionShopTimeoutPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCAuctionShopTimeoutPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GCAuctionShopTimeoutPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCAuctionShopTimeoutPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCAuctionShopTimeoutPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.timeout_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCAuctionShopTimeoutPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 timeout = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCAuctionShopTimeoutPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCAuctionShopTimeoutPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 timeout = 1;
  if (this->_internal_timeout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_timeout(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCAuctionShopTimeoutPacket)
  return target;
}

size_t GCAuctionShopTimeoutPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCAuctionShopTimeoutPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 timeout = 1;
  if (this->_internal_timeout() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_timeout());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCAuctionShopTimeoutPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCAuctionShopTimeoutPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCAuctionShopTimeoutPacket::GetClassData() const { return &_class_data_; }


void GCAuctionShopTimeoutPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCAuctionShopTimeoutPacket*>(&to_msg);
  auto& from = static_cast<const GCAuctionShopTimeoutPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCAuctionShopTimeoutPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_timeout() != 0) {
    _this->_internal_set_timeout(from._internal_timeout());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCAuctionShopTimeoutPacket::CopyFrom(const GCAuctionShopTimeoutPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCAuctionShopTimeoutPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCAuctionShopTimeoutPacket::IsInitialized() const {
  return true;
}

void GCAuctionShopTimeoutPacket::InternalSwap(GCAuctionShopTimeoutPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.timeout_, other->_impl_.timeout_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GCAuctionShopTimeoutPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[123]);
}

// ===================================================================

class GCAuctionShopGuestOpenPacket::_Internal {
 public:
};

void GCAuctionShopGuestOpenPacket::clear_items() {
  _impl_.items_.Clear();
}
GCAuctionShopGuestOpenPacket::GCAuctionShopGuestOpenPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCAuctionShopGuestOpenPacket)
}
GCAuctionShopGuestOpenPacket::GCAuctionShopGuestOpenPacket(const GCAuctionShopGuestOpenPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCAuctionShopGuestOpenPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:network.GCAuctionShopGuestOpenPacket)
}

inline void GCAuctionShopGuestOpenPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GCAuctionShopGuestOpenPacket::~GCAuctionShopGuestOpenPacket() {
  // @@protoc_insertion_point(destructor:network.GCAuctionShopGuestOpenPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCAuctionShopGuestOpenPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
  _impl_.name_.Destroy();
}

void GCAuctionShopGuestOpenPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCAuctionShopGuestOpenPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCAuctionShopGuestOpenPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCAuctionShopGuestOpenPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "network.GCAuctionShopGuestOpenPacket.name"));
        } else
          goto handle_unusual;
        continue;
      // repeated .network.TItemData items = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCAuctionShopGuestOpenPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCAuctionShopGuestOpenPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "network.GCAuctionShopGuestOpenPacket.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated .network.TItemData items = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCAuctionShopGuestOpenPacket)
  return target;
}

size_t GCAuctionShopGuestOpenPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCAuctionShopGuestOpenPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .network.TItemData items = 2;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCAuctionShopGuestOpenPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCAuctionShopGuestOpenPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCAuctionShopGuestOpenPacket::GetClassData() const { return &_class_data_; }


void GCAuctionShopGuestOpenPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCAuctionShopGuestOpenPacket*>(&to_msg);
  auto& from = static_cast<const GCAuctionShopGuestOpenPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCAuctionShopGuestOpenPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCAuctionShopGuestOpenPacket::CopyFrom(const GCAuctionShopGuestOpenPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCAuctionShopGuestOpenPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCAuctionShopGuestOpenPacket::IsInitialized() const {
  return true;
}

void GCAuctionShopGuestOpenPacket::InternalSwap(GCAuctionShopGuestOpenPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GCAuctionShopGuestOpenPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[124]);
}

// ===================================================================

class GCAuctionShopGuestUpdatePacket::_Internal {
 public:
  static const ::network::TItemData& item(const GCAuctionShopGuestUpdatePacket* msg);
};

const ::network::TItemData&
GCAuctionShopGuestUpdatePacket::_Internal::item(const GCAuctionShopGuestUpdatePacket* msg) {
  return *msg->_impl_.item_;
}
void GCAuctionShopGuestUpdatePacket::clear_item() {
  if (GetArenaForAllocation() == nullptr && _impl_.item_ != nullptr) {
    delete _impl_.item_;
  }
  _impl_.item_ = nullptr;
}
GCAuctionShopGuestUpdatePacket::GCAuctionShopGuestUpdatePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCAuctionShopGuestUpdatePacket)
}
GCAuctionShopGuestUpdatePacket::GCAuctionShopGuestUpdatePacket(const GCAuctionShopGuestUpdatePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCAuctionShopGuestUpdatePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.item_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_item()) {
    _this->_impl_.item_ = new ::network::TItemData(*from._impl_.item_);
  }
  // @@protoc_insertion_point(copy_constructor:network.GCAuctionShopGuestUpdatePacket)
}

inline void GCAuctionShopGuestUpdatePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.item_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCAuctionShopGuestUpdatePacket::~GCAuctionShopGuestUpdatePacket() {
  // @@protoc_insertion_point(destructor:network.GCAuctionShopGuestUpdatePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCAuctionShopGuestUpdatePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.item_;
}

void GCAuctionShopGuestUpdatePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCAuctionShopGuestUpdatePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCAuctionShopGuestUpdatePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.item_ != nullptr) {
    delete _impl_.item_;
  }
  _impl_.item_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCAuctionShopGuestUpdatePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .network.TItemData item = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_item(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCAuctionShopGuestUpdatePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCAuctionShopGuestUpdatePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .network.TItemData item = 1;
  if (this->_internal_has_item()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::item(this),
        _Internal::item(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCAuctionShopGuestUpdatePacket)
  return target;
}

size_t GCAuctionShopGuestUpdatePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCAuctionShopGuestUpdatePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .network.TItemData item = 1;
  if (this->_internal_has_item()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.item_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCAuctionShopGuestUpdatePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCAuctionShopGuestUpdatePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCAuctionShopGuestUpdatePacket::GetClassData() const { return &_class_data_; }


void GCAuctionShopGuestUpdatePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCAuctionShopGuestUpdatePacket*>(&to_msg);
  auto& from = static_cast<const GCAuctionShopGuestUpdatePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCAuctionShopGuestUpdatePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_item()) {
    _this->_internal_mutable_item()->::network::TItemData::MergeFrom(
        from._internal_item());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCAuctionShopGuestUpdatePacket::CopyFrom(const GCAuctionShopGuestUpdatePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCAuctionShopGuestUpdatePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCAuctionShopGuestUpdatePacket::IsInitialized() const {
  return true;
}

void GCAuctionShopGuestUpdatePacket::InternalSwap(GCAuctionShopGuestUpdatePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.item_, other->_impl_.item_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GCAuctionShopGuestUpdatePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[125]);
}

// ===================================================================

class GCAuctionShopHistoryPacket::_Internal {
 public:
};

void GCAuctionShopHistoryPacket::clear_elems() {
  _impl_.elems_.Clear();
}
GCAuctionShopHistoryPacket::GCAuctionShopHistoryPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCAuctionShopHistoryPacket)
}
GCAuctionShopHistoryPacket::GCAuctionShopHistoryPacket(const GCAuctionShopHistoryPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCAuctionShopHistoryPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.elems_){from._impl_.elems_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:network.GCAuctionShopHistoryPacket)
}

inline void GCAuctionShopHistoryPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.elems_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCAuctionShopHistoryPacket::~GCAuctionShopHistoryPacket() {
  // @@protoc_insertion_point(destructor:network.GCAuctionShopHistoryPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCAuctionShopHistoryPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.elems_.~RepeatedPtrField();
}

void GCAuctionShopHistoryPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCAuctionShopHistoryPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCAuctionShopHistoryPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.elems_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCAuctionShopHistoryPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .network.TAuctionShopHistoryElement elems = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_elems(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCAuctionShopHistoryPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCAuctionShopHistoryPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .network.TAuctionShopHistoryElement elems = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_elems_size()); i < n; i++) {
    const auto& repfield = this->_internal_elems(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCAuctionShopHistoryPacket)
  return target;
}

size_t GCAuctionShopHistoryPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCAuctionShopHistoryPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .network.TAuctionShopHistoryElement elems = 1;
  total_size += 1UL * this->_internal_elems_size();
  for (const auto& msg : this->_impl_.elems_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCAuctionShopHistoryPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCAuctionShopHistoryPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCAuctionShopHistoryPacket::GetClassData() const { return &_class_data_; }


void GCAuctionShopHistoryPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCAuctionShopHistoryPacket*>(&to_msg);
  auto& from = static_cast<const GCAuctionShopHistoryPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCAuctionShopHistoryPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.elems_.MergeFrom(from._impl_.elems_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCAuctionShopHistoryPacket::CopyFrom(const GCAuctionShopHistoryPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCAuctionShopHistoryPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCAuctionShopHistoryPacket::IsInitialized() const {
  return true;
}

void GCAuctionShopHistoryPacket::InternalSwap(GCAuctionShopHistoryPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.elems_.InternalSwap(&other->_impl_.elems_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GCAuctionShopHistoryPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[126]);
}

// ===================================================================

class GCAuctionAveragePricePacket::_Internal {
 public:
};

GCAuctionAveragePricePacket::GCAuctionAveragePricePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCAuctionAveragePricePacket)
}
GCAuctionAveragePricePacket::GCAuctionAveragePricePacket(const GCAuctionAveragePricePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCAuctionAveragePricePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.price_){}
    , decltype(_impl_.requestor_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.price_, &from._impl_.price_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.requestor_) -
    reinterpret_cast<char*>(&_impl_.price_)) + sizeof(_impl_.requestor_));
  // @@protoc_insertion_point(copy_constructor:network.GCAuctionAveragePricePacket)
}

inline void GCAuctionAveragePricePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.price_){uint64_t{0u}}
    , decltype(_impl_.requestor_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCAuctionAveragePricePacket::~GCAuctionAveragePricePacket() {
  // @@protoc_insertion_point(destructor:network.GCAuctionAveragePricePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCAuctionAveragePricePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GCAuctionAveragePricePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCAuctionAveragePricePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCAuctionAveragePricePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.requestor_) -
      reinterpret_cast<char*>(&_impl_.price_)) + sizeof(_impl_.requestor_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCAuctionAveragePricePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 requestor = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.requestor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 price = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCAuctionAveragePricePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCAuctionAveragePricePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 requestor = 1;
  if (this->_internal_requestor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_requestor(), target);
  }

  // uint64 price = 2;
  if (this->_internal_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_price(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCAuctionAveragePricePacket)
  return target;
}

size_t GCAuctionAveragePricePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCAuctionAveragePricePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 price = 2;
  if (this->_internal_price() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_price());
  }

  // uint32 requestor = 1;
  if (this->_internal_requestor() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_requestor());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCAuctionAveragePricePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCAuctionAveragePricePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCAuctionAveragePricePacket::GetClassData() const { return &_class_data_; }


void GCAuctionAveragePricePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCAuctionAveragePricePacket*>(&to_msg);
  auto& from = static_cast<const GCAuctionAveragePricePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCAuctionAveragePricePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_price() != 0) {
    _this->_internal_set_price(from._internal_price());
  }
  if (from._internal_requestor() != 0) {
    _this->_internal_set_requestor(from._internal_requestor());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCAuctionAveragePricePacket::CopyFrom(const GCAuctionAveragePricePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCAuctionAveragePricePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCAuctionAveragePricePacket::IsInitialized() const {
  return true;
}

void GCAuctionAveragePricePacket::InternalSwap(GCAuctionAveragePricePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GCAuctionAveragePricePacket, _impl_.requestor_)
      + sizeof(GCAuctionAveragePricePacket::_impl_.requestor_)
      - PROTOBUF_FIELD_OFFSET(GCAuctionAveragePricePacket, _impl_.price_)>(
          reinterpret_cast<char*>(&_impl_.price_),
          reinterpret_cast<char*>(&other->_impl_.price_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GCAuctionAveragePricePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[127]);
}

// ===================================================================

class GCMainCharacterPacket::_Internal {
 public:
};

GCMainCharacterPacket::GCMainCharacterPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCMainCharacterPacket)
}
GCMainCharacterPacket::GCMainCharacterPacket(const GCMainCharacterPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCMainCharacterPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.chr_name_){}
    , decltype(_impl_.bgm_name_){}
    , decltype(_impl_.vid_){}
    , decltype(_impl_.race_num_){}
    , decltype(_impl_.bgm_vol_){}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.z_){}
    , decltype(_impl_.empire_){}
    , decltype(_impl_.skill_group_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.chr_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.chr_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_chr_name().empty()) {
    _this->_impl_.chr_name_.Set(from._internal_chr_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.bgm_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bgm_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bgm_name().empty()) {
    _this->_impl_.bgm_name_.Set(from._internal_bgm_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.vid_, &from._impl_.vid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.skill_group_) -
    reinterpret_cast<char*>(&_impl_.vid_)) + sizeof(_impl_.skill_group_));
  // @@protoc_insertion_point(copy_constructor:network.GCMainCharacterPacket)
}

inline void GCMainCharacterPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.chr_name_){}
    , decltype(_impl_.bgm_name_){}
    , decltype(_impl_.vid_){0u}
    , decltype(_impl_.race_num_){0u}
    , decltype(_impl_.bgm_vol_){0}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.z_){0}
    , decltype(_impl_.empire_){0u}
    , decltype(_impl_.skill_group_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.chr_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.chr_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.bgm_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bgm_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GCMainCharacterPacket::~GCMainCharacterPacket() {
  // @@protoc_insertion_point(destructor:network.GCMainCharacterPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCMainCharacterPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.chr_name_.Destroy();
  _impl_.bgm_name_.Destroy();
}

void GCMainCharacterPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCMainCharacterPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCMainCharacterPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.chr_name_.ClearToEmpty();
  _impl_.bgm_name_.ClearToEmpty();
  ::memset(&_impl_.vid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.skill_group_) -
      reinterpret_cast<char*>(&_impl_.vid_)) + sizeof(_impl_.skill_group_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCMainCharacterPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 vid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.vid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 race_num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.race_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes chr_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_chr_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes bgm_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_bgm_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float bgm_vol = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.bgm_vol_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int32 x = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 y = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 z = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.z_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 empire = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.empire_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 skill_group = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.skill_group_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCMainCharacterPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCMainCharacterPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 vid = 1;
  if (this->_internal_vid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_vid(), target);
  }

  // uint32 race_num = 2;
  if (this->_internal_race_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_race_num(), target);
  }

  // bytes chr_name = 3;
  if (!this->_internal_chr_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_chr_name(), target);
  }

  // bytes bgm_name = 4;
  if (!this->_internal_bgm_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_bgm_name(), target);
  }

  // float bgm_vol = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_bgm_vol = this->_internal_bgm_vol();
  uint32_t raw_bgm_vol;
  memcpy(&raw_bgm_vol, &tmp_bgm_vol, sizeof(tmp_bgm_vol));
  if (raw_bgm_vol != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_bgm_vol(), target);
  }

  // int32 x = 6;
  if (this->_internal_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_x(), target);
  }

  // int32 y = 7;
  if (this->_internal_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_y(), target);
  }

  // int32 z = 8;
  if (this->_internal_z() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_z(), target);
  }

  // uint32 empire = 9;
  if (this->_internal_empire() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_empire(), target);
  }

  // uint32 skill_group = 10;
  if (this->_internal_skill_group() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_skill_group(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCMainCharacterPacket)
  return target;
}

size_t GCMainCharacterPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCMainCharacterPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes chr_name = 3;
  if (!this->_internal_chr_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_chr_name());
  }

  // bytes bgm_name = 4;
  if (!this->_internal_bgm_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_bgm_name());
  }

  // uint32 vid = 1;
  if (this->_internal_vid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_vid());
  }

  // uint32 race_num = 2;
  if (this->_internal_race_num() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_race_num());
  }

  // float bgm_vol = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_bgm_vol = this->_internal_bgm_vol();
  uint32_t raw_bgm_vol;
  memcpy(&raw_bgm_vol, &tmp_bgm_vol, sizeof(tmp_bgm_vol));
  if (raw_bgm_vol != 0) {
    total_size += 1 + 4;
  }

  // int32 x = 6;
  if (this->_internal_x() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x());
  }

  // int32 y = 7;
  if (this->_internal_y() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y());
  }

  // int32 z = 8;
  if (this->_internal_z() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_z());
  }

  // uint32 empire = 9;
  if (this->_internal_empire() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_empire());
  }

  // uint32 skill_group = 10;
  if (this->_internal_skill_group() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_skill_group());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCMainCharacterPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCMainCharacterPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCMainCharacterPacket::GetClassData() const { return &_class_data_; }


void GCMainCharacterPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCMainCharacterPacket*>(&to_msg);
  auto& from = static_cast<const GCMainCharacterPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCMainCharacterPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_chr_name().empty()) {
    _this->_internal_set_chr_name(from._internal_chr_name());
  }
  if (!from._internal_bgm_name().empty()) {
    _this->_internal_set_bgm_name(from._internal_bgm_name());
  }
  if (from._internal_vid() != 0) {
    _this->_internal_set_vid(from._internal_vid());
  }
  if (from._internal_race_num() != 0) {
    _this->_internal_set_race_num(from._internal_race_num());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_bgm_vol = from._internal_bgm_vol();
  uint32_t raw_bgm_vol;
  memcpy(&raw_bgm_vol, &tmp_bgm_vol, sizeof(tmp_bgm_vol));
  if (raw_bgm_vol != 0) {
    _this->_internal_set_bgm_vol(from._internal_bgm_vol());
  }
  if (from._internal_x() != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  if (from._internal_y() != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  if (from._internal_z() != 0) {
    _this->_internal_set_z(from._internal_z());
  }
  if (from._internal_empire() != 0) {
    _this->_internal_set_empire(from._internal_empire());
  }
  if (from._internal_skill_group() != 0) {
    _this->_internal_set_skill_group(from._internal_skill_group());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCMainCharacterPacket::CopyFrom(const GCMainCharacterPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCMainCharacterPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCMainCharacterPacket::IsInitialized() const {
  return true;
}

void GCMainCharacterPacket::InternalSwap(GCMainCharacterPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.chr_name_, lhs_arena,
      &other->_impl_.chr_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.bgm_name_, lhs_arena,
      &other->_impl_.bgm_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GCMainCharacterPacket, _impl_.skill_group_)
      + sizeof(GCMainCharacterPacket::_impl_.skill_group_)
      - PROTOBUF_FIELD_OFFSET(GCMainCharacterPacket, _impl_.vid_)>(
          reinterpret_cast<char*>(&_impl_.vid_),
          reinterpret_cast<char*>(&other->_impl_.vid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GCMainCharacterPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[128]);
}

// ===================================================================

class GCCharacterAddPacket_AffectColor::_Internal {
 public:
};

GCCharacterAddPacket_AffectColor::GCCharacterAddPacket_AffectColor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCCharacterAddPacket.AffectColor)
}
GCCharacterAddPacket_AffectColor::GCCharacterAddPacket_AffectColor(const GCCharacterAddPacket_AffectColor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCCharacterAddPacket_AffectColor* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.flag_){}
    , decltype(_impl_.color_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.flag_, &from._impl_.flag_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.color_) -
    reinterpret_cast<char*>(&_impl_.flag_)) + sizeof(_impl_.color_));
  // @@protoc_insertion_point(copy_constructor:network.GCCharacterAddPacket.AffectColor)
}

inline void GCCharacterAddPacket_AffectColor::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.flag_){0u}
    , decltype(_impl_.color_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCCharacterAddPacket_AffectColor::~GCCharacterAddPacket_AffectColor() {
  // @@protoc_insertion_point(destructor:network.GCCharacterAddPacket.AffectColor)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCCharacterAddPacket_AffectColor::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GCCharacterAddPacket_AffectColor::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCCharacterAddPacket_AffectColor::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCCharacterAddPacket.AffectColor)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.flag_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.color_) -
      reinterpret_cast<char*>(&_impl_.flag_)) + sizeof(_impl_.color_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCCharacterAddPacket_AffectColor::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 flag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 color = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCCharacterAddPacket_AffectColor::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCCharacterAddPacket.AffectColor)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 flag = 1;
  if (this->_internal_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_flag(), target);
  }

  // uint32 color = 2;
  if (this->_internal_color() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_color(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCCharacterAddPacket.AffectColor)
  return target;
}

size_t GCCharacterAddPacket_AffectColor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCCharacterAddPacket.AffectColor)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 flag = 1;
  if (this->_internal_flag() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_flag());
  }

  // uint32 color = 2;
  if (this->_internal_color() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_color());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCCharacterAddPacket_AffectColor::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCCharacterAddPacket_AffectColor::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCCharacterAddPacket_AffectColor::GetClassData() const { return &_class_data_; }


void GCCharacterAddPacket_AffectColor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCCharacterAddPacket_AffectColor*>(&to_msg);
  auto& from = static_cast<const GCCharacterAddPacket_AffectColor&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCCharacterAddPacket.AffectColor)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_flag() != 0) {
    _this->_internal_set_flag(from._internal_flag());
  }
  if (from._internal_color() != 0) {
    _this->_internal_set_color(from._internal_color());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCCharacterAddPacket_AffectColor::CopyFrom(const GCCharacterAddPacket_AffectColor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCCharacterAddPacket.AffectColor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCCharacterAddPacket_AffectColor::IsInitialized() const {
  return true;
}

void GCCharacterAddPacket_AffectColor::InternalSwap(GCCharacterAddPacket_AffectColor* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GCCharacterAddPacket_AffectColor, _impl_.color_)
      + sizeof(GCCharacterAddPacket_AffectColor::_impl_.color_)
      - PROTOBUF_FIELD_OFFSET(GCCharacterAddPacket_AffectColor, _impl_.flag_)>(
          reinterpret_cast<char*>(&_impl_.flag_),
          reinterpret_cast<char*>(&other->_impl_.flag_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GCCharacterAddPacket_AffectColor::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[129]);
}

// ===================================================================

class GCCharacterAddPacket::_Internal {
 public:
};

GCCharacterAddPacket::GCCharacterAddPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCCharacterAddPacket)
}
GCCharacterAddPacket::GCCharacterAddPacket(const GCCharacterAddPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCCharacterAddPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.affect_flags_){from._impl_.affect_flags_}
    , /*decltype(_impl_._affect_flags_cached_byte_size_)*/{0}
    , decltype(_impl_.affect_colors_){from._impl_.affect_colors_}
    , decltype(_impl_.toggle_shining_flags_){from._impl_.toggle_shining_flags_}
    , /*decltype(_impl_._toggle_shining_flags_cached_byte_size_)*/{0}
    , decltype(_impl_.vid_){}
    , decltype(_impl_.level_){}
    , decltype(_impl_.ai_flag_){}
    , decltype(_impl_.angle_){}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.z_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.race_num_){}
    , decltype(_impl_.moving_speed_){}
    , decltype(_impl_.attack_speed_){}
    , decltype(_impl_.state_flag_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.vid_, &from._impl_.vid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.state_flag_) -
    reinterpret_cast<char*>(&_impl_.vid_)) + sizeof(_impl_.state_flag_));
  // @@protoc_insertion_point(copy_constructor:network.GCCharacterAddPacket)
}

inline void GCCharacterAddPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.affect_flags_){arena}
    , /*decltype(_impl_._affect_flags_cached_byte_size_)*/{0}
    , decltype(_impl_.affect_colors_){arena}
    , decltype(_impl_.toggle_shining_flags_){arena}
    , /*decltype(_impl_._toggle_shining_flags_cached_byte_size_)*/{0}
    , decltype(_impl_.vid_){0u}
    , decltype(_impl_.level_){0u}
    , decltype(_impl_.ai_flag_){0u}
    , decltype(_impl_.angle_){0}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.z_){0}
    , decltype(_impl_.type_){0u}
    , decltype(_impl_.race_num_){0u}
    , decltype(_impl_.moving_speed_){0u}
    , decltype(_impl_.attack_speed_){0u}
    , decltype(_impl_.state_flag_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCCharacterAddPacket::~GCCharacterAddPacket() {
  // @@protoc_insertion_point(destructor:network.GCCharacterAddPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCCharacterAddPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.affect_flags_.~RepeatedField();
  _impl_.affect_colors_.~RepeatedPtrField();
  _impl_.toggle_shining_flags_.~RepeatedField();
}

void GCCharacterAddPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCCharacterAddPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCCharacterAddPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.affect_flags_.Clear();
  _impl_.affect_colors_.Clear();
  _impl_.toggle_shining_flags_.Clear();
  ::memset(&_impl_.vid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.state_flag_) -
      reinterpret_cast<char*>(&_impl_.vid_)) + sizeof(_impl_.state_flag_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCCharacterAddPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 vid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.vid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 ai_flag = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.ai_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float angle = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int32 x = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 y = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 z = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.z_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 type = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 race_num = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.race_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 moving_speed = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.moving_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 attack_speed = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.attack_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 state_flag = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.state_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 affect_flags = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_affect_flags(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 104) {
          _internal_add_affect_flags(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .network.GCCharacterAddPacket.AffectColor affect_colors = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_affect_colors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 toggle_shining_flags = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_toggle_shining_flags(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 120) {
          _internal_add_toggle_shining_flags(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCCharacterAddPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCCharacterAddPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 vid = 1;
  if (this->_internal_vid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_vid(), target);
  }

  // uint32 level = 2;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_level(), target);
  }

  // uint32 ai_flag = 3;
  if (this->_internal_ai_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_ai_flag(), target);
  }

  // float angle = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_angle = this->_internal_angle();
  uint32_t raw_angle;
  memcpy(&raw_angle, &tmp_angle, sizeof(tmp_angle));
  if (raw_angle != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_angle(), target);
  }

  // int32 x = 5;
  if (this->_internal_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_x(), target);
  }

  // int32 y = 6;
  if (this->_internal_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_y(), target);
  }

  // int32 z = 7;
  if (this->_internal_z() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_z(), target);
  }

  // uint32 type = 8;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_type(), target);
  }

  // uint32 race_num = 9;
  if (this->_internal_race_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_race_num(), target);
  }

  // uint32 moving_speed = 10;
  if (this->_internal_moving_speed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_moving_speed(), target);
  }

  // uint32 attack_speed = 11;
  if (this->_internal_attack_speed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_attack_speed(), target);
  }

  // uint32 state_flag = 12;
  if (this->_internal_state_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(12, this->_internal_state_flag(), target);
  }

  // repeated uint32 affect_flags = 13;
  {
    int byte_size = _impl_._affect_flags_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          13, _internal_affect_flags(), byte_size, target);
    }
  }

  // repeated .network.GCCharacterAddPacket.AffectColor affect_colors = 14;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_affect_colors_size()); i < n; i++) {
    const auto& repfield = this->_internal_affect_colors(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(14, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated uint32 toggle_shining_flags = 15;
  {
    int byte_size = _impl_._toggle_shining_flags_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          15, _internal_toggle_shining_flags(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCCharacterAddPacket)
  return target;
}

size_t GCCharacterAddPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCCharacterAddPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 affect_flags = 13;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.affect_flags_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._affect_flags_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .network.GCCharacterAddPacket.AffectColor affect_colors = 14;
  total_size += 1UL * this->_internal_affect_colors_size();
  for (const auto& msg : this->_impl_.affect_colors_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 toggle_shining_flags = 15;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.toggle_shining_flags_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._toggle_shining_flags_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint32 vid = 1;
  if (this->_internal_vid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_vid());
  }

  // uint32 level = 2;
  if (this->_internal_level() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_level());
  }

  // uint32 ai_flag = 3;
  if (this->_internal_ai_flag() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ai_flag());
  }

  // float angle = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_angle = this->_internal_angle();
  uint32_t raw_angle;
  memcpy(&raw_angle, &tmp_angle, sizeof(tmp_angle));
  if (raw_angle != 0) {
    total_size += 1 + 4;
  }

  // int32 x = 5;
  if (this->_internal_x() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x());
  }

  // int32 y = 6;
  if (this->_internal_y() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y());
  }

  // int32 z = 7;
  if (this->_internal_z() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_z());
  }

  // uint32 type = 8;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
  }

  // uint32 race_num = 9;
  if (this->_internal_race_num() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_race_num());
  }

  // uint32 moving_speed = 10;
  if (this->_internal_moving_speed() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_moving_speed());
  }

  // uint32 attack_speed = 11;
  if (this->_internal_attack_speed() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_attack_speed());
  }

  // uint32 state_flag = 12;
  if (this->_internal_state_flag() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_state_flag());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCCharacterAddPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCCharacterAddPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCCharacterAddPacket::GetClassData() const { return &_class_data_; }


void GCCharacterAddPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCCharacterAddPacket*>(&to_msg);
  auto& from = static_cast<const GCCharacterAddPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCCharacterAddPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.affect_flags_.MergeFrom(from._impl_.affect_flags_);
  _this->_impl_.affect_colors_.MergeFrom(from._impl_.affect_colors_);
  _this->_impl_.toggle_shining_flags_.MergeFrom(from._impl_.toggle_shining_flags_);
  if (from._internal_vid() != 0) {
    _this->_internal_set_vid(from._internal_vid());
  }
  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  if (from._internal_ai_flag() != 0) {
    _this->_internal_set_ai_flag(from._internal_ai_flag());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_angle = from._internal_angle();
  uint32_t raw_angle;
  memcpy(&raw_angle, &tmp_angle, sizeof(tmp_angle));
  if (raw_angle != 0) {
    _this->_internal_set_angle(from._internal_angle());
  }
  if (from._internal_x() != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  if (from._internal_y() != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  if (from._internal_z() != 0) {
    _this->_internal_set_z(from._internal_z());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_race_num() != 0) {
    _this->_internal_set_race_num(from._internal_race_num());
  }
  if (from._internal_moving_speed() != 0) {
    _this->_internal_set_moving_speed(from._internal_moving_speed());
  }
  if (from._internal_attack_speed() != 0) {
    _this->_internal_set_attack_speed(from._internal_attack_speed());
  }
  if (from._internal_state_flag() != 0) {
    _this->_internal_set_state_flag(from._internal_state_flag());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCCharacterAddPacket::CopyFrom(const GCCharacterAddPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCCharacterAddPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCCharacterAddPacket::IsInitialized() const {
  return true;
}

void GCCharacterAddPacket::InternalSwap(GCCharacterAddPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.affect_flags_.InternalSwap(&other->_impl_.affect_flags_);
  _impl_.affect_colors_.InternalSwap(&other->_impl_.affect_colors_);
  _impl_.toggle_shining_flags_.InternalSwap(&other->_impl_.toggle_shining_flags_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GCCharacterAddPacket, _impl_.state_flag_)
      + sizeof(GCCharacterAddPacket::_impl_.state_flag_)
      - PROTOBUF_FIELD_OFFSET(GCCharacterAddPacket, _impl_.vid_)>(
          reinterpret_cast<char*>(&_impl_.vid_),
          reinterpret_cast<char*>(&other->_impl_.vid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GCCharacterAddPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[130]);
}

// ===================================================================

class GCCharacterAdditionalInfoPacket::_Internal {
 public:
};

GCCharacterAdditionalInfoPacket::GCCharacterAdditionalInfoPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCCharacterAdditionalInfoPacket)
}
GCCharacterAdditionalInfoPacket::GCCharacterAdditionalInfoPacket(const GCCharacterAdditionalInfoPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCCharacterAdditionalInfoPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.parts_){from._impl_.parts_}
    , /*decltype(_impl_._parts_cached_byte_size_)*/{0}
    , decltype(_impl_.skill_colors_){from._impl_.skill_colors_}
    , /*decltype(_impl_._skill_colors_cached_byte_size_)*/{0}
    , decltype(_impl_.name_){}
    , decltype(_impl_.vid_){}
    , decltype(_impl_.acce_sparkle_){}
    , decltype(_impl_.empire_){}
    , decltype(_impl_.guild_id_){}
    , decltype(_impl_.level_){}
    , decltype(_impl_.alignment_){}
    , decltype(_impl_.pk_mode_){}
    , decltype(_impl_.mount_vnum_){}
    , decltype(_impl_.locale_){}
    , decltype(_impl_.pvp_team_){}
    , decltype(_impl_.combat_zone_rank_){}
    , decltype(_impl_.mob_scale_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.vid_, &from._impl_.vid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.mob_scale_) -
    reinterpret_cast<char*>(&_impl_.vid_)) + sizeof(_impl_.mob_scale_));
  // @@protoc_insertion_point(copy_constructor:network.GCCharacterAdditionalInfoPacket)
}

inline void GCCharacterAdditionalInfoPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.parts_){arena}
    , /*decltype(_impl_._parts_cached_byte_size_)*/{0}
    , decltype(_impl_.skill_colors_){arena}
    , /*decltype(_impl_._skill_colors_cached_byte_size_)*/{0}
    , decltype(_impl_.name_){}
    , decltype(_impl_.vid_){0u}
    , decltype(_impl_.acce_sparkle_){false}
    , decltype(_impl_.empire_){0u}
    , decltype(_impl_.guild_id_){0u}
    , decltype(_impl_.level_){0u}
    , decltype(_impl_.alignment_){0}
    , decltype(_impl_.pk_mode_){0u}
    , decltype(_impl_.mount_vnum_){0u}
    , decltype(_impl_.locale_){0}
    , decltype(_impl_.pvp_team_){0}
    , decltype(_impl_.combat_zone_rank_){0u}
    , decltype(_impl_.mob_scale_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GCCharacterAdditionalInfoPacket::~GCCharacterAdditionalInfoPacket() {
  // @@protoc_insertion_point(destructor:network.GCCharacterAdditionalInfoPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCCharacterAdditionalInfoPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.parts_.~RepeatedField();
  _impl_.skill_colors_.~RepeatedField();
  _impl_.name_.Destroy();
}

void GCCharacterAdditionalInfoPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCCharacterAdditionalInfoPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCCharacterAdditionalInfoPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.parts_.Clear();
  _impl_.skill_colors_.Clear();
  _impl_.name_.ClearToEmpty();
  ::memset(&_impl_.vid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.mob_scale_) -
      reinterpret_cast<char*>(&_impl_.vid_)) + sizeof(_impl_.mob_scale_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCCharacterAdditionalInfoPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 vid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.vid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 parts = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_parts(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_parts(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool acce_sparkle = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.acce_sparkle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 empire = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.empire_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 guild_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 level = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 alignment = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.alignment_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 pk_mode = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.pk_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 mount_vnum = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.mount_vnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 locale = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.locale_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 pvp_team = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.pvp_team_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 combat_zone_rank = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.combat_zone_rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 skill_colors = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_skill_colors(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 112) {
          _internal_add_skill_colors(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float mob_scale = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 125)) {
          _impl_.mob_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCCharacterAdditionalInfoPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCCharacterAdditionalInfoPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 vid = 1;
  if (this->_internal_vid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_vid(), target);
  }

  // bytes name = 2;
  if (!this->_internal_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_name(), target);
  }

  // repeated uint32 parts = 3;
  {
    int byte_size = _impl_._parts_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          3, _internal_parts(), byte_size, target);
    }
  }

  // bool acce_sparkle = 4;
  if (this->_internal_acce_sparkle() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_acce_sparkle(), target);
  }

  // uint32 empire = 5;
  if (this->_internal_empire() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_empire(), target);
  }

  // uint32 guild_id = 6;
  if (this->_internal_guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_guild_id(), target);
  }

  // uint32 level = 7;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_level(), target);
  }

  // sint32 alignment = 8;
  if (this->_internal_alignment() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(8, this->_internal_alignment(), target);
  }

  // uint32 pk_mode = 9;
  if (this->_internal_pk_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_pk_mode(), target);
  }

  // uint32 mount_vnum = 10;
  if (this->_internal_mount_vnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_mount_vnum(), target);
  }

  // int32 locale = 11;
  if (this->_internal_locale() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_locale(), target);
  }

  // sint32 pvp_team = 12;
  if (this->_internal_pvp_team() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(12, this->_internal_pvp_team(), target);
  }

  // uint32 combat_zone_rank = 13;
  if (this->_internal_combat_zone_rank() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(13, this->_internal_combat_zone_rank(), target);
  }

  // repeated uint32 skill_colors = 14;
  {
    int byte_size = _impl_._skill_colors_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          14, _internal_skill_colors(), byte_size, target);
    }
  }

  // float mob_scale = 15;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mob_scale = this->_internal_mob_scale();
  uint32_t raw_mob_scale;
  memcpy(&raw_mob_scale, &tmp_mob_scale, sizeof(tmp_mob_scale));
  if (raw_mob_scale != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(15, this->_internal_mob_scale(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCCharacterAdditionalInfoPacket)
  return target;
}

size_t GCCharacterAdditionalInfoPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCCharacterAdditionalInfoPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 parts = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.parts_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._parts_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 skill_colors = 14;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.skill_colors_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._skill_colors_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // bytes name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // uint32 vid = 1;
  if (this->_internal_vid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_vid());
  }

  // bool acce_sparkle = 4;
  if (this->_internal_acce_sparkle() != 0) {
    total_size += 1 + 1;
  }

  // uint32 empire = 5;
  if (this->_internal_empire() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_empire());
  }

  // uint32 guild_id = 6;
  if (this->_internal_guild_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_guild_id());
  }

  // uint32 level = 7;
  if (this->_internal_level() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_level());
  }

  // sint32 alignment = 8;
  if (this->_internal_alignment() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_alignment());
  }

  // uint32 pk_mode = 9;
  if (this->_internal_pk_mode() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pk_mode());
  }

  // uint32 mount_vnum = 10;
  if (this->_internal_mount_vnum() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_mount_vnum());
  }

  // int32 locale = 11;
  if (this->_internal_locale() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_locale());
  }

  // sint32 pvp_team = 12;
  if (this->_internal_pvp_team() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_pvp_team());
  }

  // uint32 combat_zone_rank = 13;
  if (this->_internal_combat_zone_rank() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_combat_zone_rank());
  }

  // float mob_scale = 15;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mob_scale = this->_internal_mob_scale();
  uint32_t raw_mob_scale;
  memcpy(&raw_mob_scale, &tmp_mob_scale, sizeof(tmp_mob_scale));
  if (raw_mob_scale != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCCharacterAdditionalInfoPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCCharacterAdditionalInfoPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCCharacterAdditionalInfoPacket::GetClassData() const { return &_class_data_; }


void GCCharacterAdditionalInfoPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCCharacterAdditionalInfoPacket*>(&to_msg);
  auto& from = static_cast<const GCCharacterAdditionalInfoPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCCharacterAdditionalInfoPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.parts_.MergeFrom(from._impl_.parts_);
  _this->_impl_.skill_colors_.MergeFrom(from._impl_.skill_colors_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_vid() != 0) {
    _this->_internal_set_vid(from._internal_vid());
  }
  if (from._internal_acce_sparkle() != 0) {
    _this->_internal_set_acce_sparkle(from._internal_acce_sparkle());
  }
  if (from._internal_empire() != 0) {
    _this->_internal_set_empire(from._internal_empire());
  }
  if (from._internal_guild_id() != 0) {
    _this->_internal_set_guild_id(from._internal_guild_id());
  }
  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  if (from._internal_alignment() != 0) {
    _this->_internal_set_alignment(from._internal_alignment());
  }
  if (from._internal_pk_mode() != 0) {
    _this->_internal_set_pk_mode(from._internal_pk_mode());
  }
  if (from._internal_mount_vnum() != 0) {
    _this->_internal_set_mount_vnum(from._internal_mount_vnum());
  }
  if (from._internal_locale() != 0) {
    _this->_internal_set_locale(from._internal_locale());
  }
  if (from._internal_pvp_team() != 0) {
    _this->_internal_set_pvp_team(from._internal_pvp_team());
  }
  if (from._internal_combat_zone_rank() != 0) {
    _this->_internal_set_combat_zone_rank(from._internal_combat_zone_rank());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mob_scale = from._internal_mob_scale();
  uint32_t raw_mob_scale;
  memcpy(&raw_mob_scale, &tmp_mob_scale, sizeof(tmp_mob_scale));
  if (raw_mob_scale != 0) {
    _this->_internal_set_mob_scale(from._internal_mob_scale());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCCharacterAdditionalInfoPacket::CopyFrom(const GCCharacterAdditionalInfoPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCCharacterAdditionalInfoPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCCharacterAdditionalInfoPacket::IsInitialized() const {
  return true;
}

void GCCharacterAdditionalInfoPacket::InternalSwap(GCCharacterAdditionalInfoPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.parts_.InternalSwap(&other->_impl_.parts_);
  _impl_.skill_colors_.InternalSwap(&other->_impl_.skill_colors_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GCCharacterAdditionalInfoPacket, _impl_.mob_scale_)
      + sizeof(GCCharacterAdditionalInfoPacket::_impl_.mob_scale_)
      - PROTOBUF_FIELD_OFFSET(GCCharacterAdditionalInfoPacket, _impl_.vid_)>(
          reinterpret_cast<char*>(&_impl_.vid_),
          reinterpret_cast<char*>(&other->_impl_.vid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GCCharacterAdditionalInfoPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[131]);
}

// ===================================================================

class GCCharacterUpdatePacket::_Internal {
 public:
};

GCCharacterUpdatePacket::GCCharacterUpdatePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCCharacterUpdatePacket)
}
GCCharacterUpdatePacket::GCCharacterUpdatePacket(const GCCharacterUpdatePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCCharacterUpdatePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.parts_){from._impl_.parts_}
    , /*decltype(_impl_._parts_cached_byte_size_)*/{0}
    , decltype(_impl_.affect_flags_){from._impl_.affect_flags_}
    , /*decltype(_impl_._affect_flags_cached_byte_size_)*/{0}
    , decltype(_impl_.affect_colors_){from._impl_.affect_colors_}
    , decltype(_impl_.toggle_shining_flags_){from._impl_.toggle_shining_flags_}
    , /*decltype(_impl_._toggle_shining_flags_cached_byte_size_)*/{0}
    , decltype(_impl_.skill_colors_){from._impl_.skill_colors_}
    , /*decltype(_impl_._skill_colors_cached_byte_size_)*/{0}
    , decltype(_impl_.vid_){}
    , decltype(_impl_.acce_sparkle_){}
    , decltype(_impl_.moving_speed_){}
    , decltype(_impl_.attack_speed_){}
    , decltype(_impl_.state_flag_){}
    , decltype(_impl_.guild_id_){}
    , decltype(_impl_.alignment_){}
    , decltype(_impl_.pk_mode_){}
    , decltype(_impl_.mount_vnum_){}
    , decltype(_impl_.combat_zone_points_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.vid_, &from._impl_.vid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.combat_zone_points_) -
    reinterpret_cast<char*>(&_impl_.vid_)) + sizeof(_impl_.combat_zone_points_));
  // @@protoc_insertion_point(copy_constructor:network.GCCharacterUpdatePacket)
}

inline void GCCharacterUpdatePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.parts_){arena}
    , /*decltype(_impl_._parts_cached_byte_size_)*/{0}
    , decltype(_impl_.affect_flags_){arena}
    , /*decltype(_impl_._affect_flags_cached_byte_size_)*/{0}
    , decltype(_impl_.affect_colors_){arena}
    , decltype(_impl_.toggle_shining_flags_){arena}
    , /*decltype(_impl_._toggle_shining_flags_cached_byte_size_)*/{0}
    , decltype(_impl_.skill_colors_){arena}
    , /*decltype(_impl_._skill_colors_cached_byte_size_)*/{0}
    , decltype(_impl_.vid_){0u}
    , decltype(_impl_.acce_sparkle_){false}
    , decltype(_impl_.moving_speed_){0u}
    , decltype(_impl_.attack_speed_){0u}
    , decltype(_impl_.state_flag_){0u}
    , decltype(_impl_.guild_id_){0u}
    , decltype(_impl_.alignment_){0}
    , decltype(_impl_.pk_mode_){0u}
    , decltype(_impl_.mount_vnum_){0u}
    , decltype(_impl_.combat_zone_points_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCCharacterUpdatePacket::~GCCharacterUpdatePacket() {
  // @@protoc_insertion_point(destructor:network.GCCharacterUpdatePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCCharacterUpdatePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.parts_.~RepeatedField();
  _impl_.affect_flags_.~RepeatedField();
  _impl_.affect_colors_.~RepeatedPtrField();
  _impl_.toggle_shining_flags_.~RepeatedField();
  _impl_.skill_colors_.~RepeatedField();
}

void GCCharacterUpdatePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCCharacterUpdatePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCCharacterUpdatePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.parts_.Clear();
  _impl_.affect_flags_.Clear();
  _impl_.affect_colors_.Clear();
  _impl_.toggle_shining_flags_.Clear();
  _impl_.skill_colors_.Clear();
  ::memset(&_impl_.vid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.combat_zone_points_) -
      reinterpret_cast<char*>(&_impl_.vid_)) + sizeof(_impl_.combat_zone_points_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCCharacterUpdatePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 vid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.vid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 parts = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_parts(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_parts(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool acce_sparkle = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.acce_sparkle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 moving_speed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.moving_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 attack_speed = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.attack_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 state_flag = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.state_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 affect_flags = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_affect_flags(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 56) {
          _internal_add_affect_flags(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .network.GCCharacterAddPacket.AffectColor affect_colors = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_affect_colors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 toggle_shining_flags = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_toggle_shining_flags(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 72) {
          _internal_add_toggle_shining_flags(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 guild_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 alignment = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.alignment_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 pk_mode = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.pk_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 mount_vnum = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.mount_vnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 combat_zone_points = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.combat_zone_points_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 skill_colors = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_skill_colors(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 120) {
          _internal_add_skill_colors(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCCharacterUpdatePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCCharacterUpdatePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 vid = 1;
  if (this->_internal_vid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_vid(), target);
  }

  // repeated uint32 parts = 2;
  {
    int byte_size = _impl_._parts_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          2, _internal_parts(), byte_size, target);
    }
  }

  // bool acce_sparkle = 3;
  if (this->_internal_acce_sparkle() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_acce_sparkle(), target);
  }

  // uint32 moving_speed = 4;
  if (this->_internal_moving_speed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_moving_speed(), target);
  }

  // uint32 attack_speed = 5;
  if (this->_internal_attack_speed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_attack_speed(), target);
  }

  // uint32 state_flag = 6;
  if (this->_internal_state_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_state_flag(), target);
  }

  // repeated uint32 affect_flags = 7;
  {
    int byte_size = _impl_._affect_flags_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          7, _internal_affect_flags(), byte_size, target);
    }
  }

  // repeated .network.GCCharacterAddPacket.AffectColor affect_colors = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_affect_colors_size()); i < n; i++) {
    const auto& repfield = this->_internal_affect_colors(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated uint32 toggle_shining_flags = 9;
  {
    int byte_size = _impl_._toggle_shining_flags_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          9, _internal_toggle_shining_flags(), byte_size, target);
    }
  }

  // uint32 guild_id = 10;
  if (this->_internal_guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_guild_id(), target);
  }

  // sint32 alignment = 11;
  if (this->_internal_alignment() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(11, this->_internal_alignment(), target);
  }

  // uint32 pk_mode = 12;
  if (this->_internal_pk_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(12, this->_internal_pk_mode(), target);
  }

  // uint32 mount_vnum = 13;
  if (this->_internal_mount_vnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(13, this->_internal_mount_vnum(), target);
  }

  // uint32 combat_zone_points = 14;
  if (this->_internal_combat_zone_points() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(14, this->_internal_combat_zone_points(), target);
  }

  // repeated uint32 skill_colors = 15;
  {
    int byte_size = _impl_._skill_colors_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          15, _internal_skill_colors(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCCharacterUpdatePacket)
  return target;
}

size_t GCCharacterUpdatePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCCharacterUpdatePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 parts = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.parts_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._parts_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 affect_flags = 7;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.affect_flags_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._affect_flags_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .network.GCCharacterAddPacket.AffectColor affect_colors = 8;
  total_size += 1UL * this->_internal_affect_colors_size();
  for (const auto& msg : this->_impl_.affect_colors_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 toggle_shining_flags = 9;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.toggle_shining_flags_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._toggle_shining_flags_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 skill_colors = 15;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.skill_colors_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._skill_colors_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint32 vid = 1;
  if (this->_internal_vid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_vid());
  }

  // bool acce_sparkle = 3;
  if (this->_internal_acce_sparkle() != 0) {
    total_size += 1 + 1;
  }

  // uint32 moving_speed = 4;
  if (this->_internal_moving_speed() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_moving_speed());
  }

  // uint32 attack_speed = 5;
  if (this->_internal_attack_speed() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_attack_speed());
  }

  // uint32 state_flag = 6;
  if (this->_internal_state_flag() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_state_flag());
  }

  // uint32 guild_id = 10;
  if (this->_internal_guild_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_guild_id());
  }

  // sint32 alignment = 11;
  if (this->_internal_alignment() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_alignment());
  }

  // uint32 pk_mode = 12;
  if (this->_internal_pk_mode() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pk_mode());
  }

  // uint32 mount_vnum = 13;
  if (this->_internal_mount_vnum() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_mount_vnum());
  }

  // uint32 combat_zone_points = 14;
  if (this->_internal_combat_zone_points() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_combat_zone_points());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCCharacterUpdatePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCCharacterUpdatePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCCharacterUpdatePacket::GetClassData() const { return &_class_data_; }


void GCCharacterUpdatePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCCharacterUpdatePacket*>(&to_msg);
  auto& from = static_cast<const GCCharacterUpdatePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCCharacterUpdatePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.parts_.MergeFrom(from._impl_.parts_);
  _this->_impl_.affect_flags_.MergeFrom(from._impl_.affect_flags_);
  _this->_impl_.affect_colors_.MergeFrom(from._impl_.affect_colors_);
  _this->_impl_.toggle_shining_flags_.MergeFrom(from._impl_.toggle_shining_flags_);
  _this->_impl_.skill_colors_.MergeFrom(from._impl_.skill_colors_);
  if (from._internal_vid() != 0) {
    _this->_internal_set_vid(from._internal_vid());
  }
  if (from._internal_acce_sparkle() != 0) {
    _this->_internal_set_acce_sparkle(from._internal_acce_sparkle());
  }
  if (from._internal_moving_speed() != 0) {
    _this->_internal_set_moving_speed(from._internal_moving_speed());
  }
  if (from._internal_attack_speed() != 0) {
    _this->_internal_set_attack_speed(from._internal_attack_speed());
  }
  if (from._internal_state_flag() != 0) {
    _this->_internal_set_state_flag(from._internal_state_flag());
  }
  if (from._internal_guild_id() != 0) {
    _this->_internal_set_guild_id(from._internal_guild_id());
  }
  if (from._internal_alignment() != 0) {
    _this->_internal_set_alignment(from._internal_alignment());
  }
  if (from._internal_pk_mode() != 0) {
    _this->_internal_set_pk_mode(from._internal_pk_mode());
  }
  if (from._internal_mount_vnum() != 0) {
    _this->_internal_set_mount_vnum(from._internal_mount_vnum());
  }
  if (from._internal_combat_zone_points() != 0) {
    _this->_internal_set_combat_zone_points(from._internal_combat_zone_points());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCCharacterUpdatePacket::CopyFrom(const GCCharacterUpdatePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCCharacterUpdatePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCCharacterUpdatePacket::IsInitialized() const {
  return true;
}

void GCCharacterUpdatePacket::InternalSwap(GCCharacterUpdatePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.parts_.InternalSwap(&other->_impl_.parts_);
  _impl_.affect_flags_.InternalSwap(&other->_impl_.affect_flags_);
  _impl_.affect_colors_.InternalSwap(&other->_impl_.affect_colors_);
  _impl_.toggle_shining_flags_.InternalSwap(&other->_impl_.toggle_shining_flags_);
  _impl_.skill_colors_.InternalSwap(&other->_impl_.skill_colors_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GCCharacterUpdatePacket, _impl_.combat_zone_points_)
      + sizeof(GCCharacterUpdatePacket::_impl_.combat_zone_points_)
      - PROTOBUF_FIELD_OFFSET(GCCharacterUpdatePacket, _impl_.vid_)>(
          reinterpret_cast<char*>(&_impl_.vid_),
          reinterpret_cast<char*>(&other->_impl_.vid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GCCharacterUpdatePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[132]);
}

// ===================================================================

class GCCharacterShiningPacket::_Internal {
 public:
};

GCCharacterShiningPacket::GCCharacterShiningPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCCharacterShiningPacket)
}
GCCharacterShiningPacket::GCCharacterShiningPacket(const GCCharacterShiningPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCCharacterShiningPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.shinings_){from._impl_.shinings_}
    , /*decltype(_impl_._shinings_cached_byte_size_)*/{0}
    , decltype(_impl_.vid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.vid_ = from._impl_.vid_;
  // @@protoc_insertion_point(copy_constructor:network.GCCharacterShiningPacket)
}

inline void GCCharacterShiningPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.shinings_){arena}
    , /*decltype(_impl_._shinings_cached_byte_size_)*/{0}
    , decltype(_impl_.vid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCCharacterShiningPacket::~GCCharacterShiningPacket() {
  // @@protoc_insertion_point(destructor:network.GCCharacterShiningPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCCharacterShiningPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.shinings_.~RepeatedField();
}

void GCCharacterShiningPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCCharacterShiningPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCCharacterShiningPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.shinings_.Clear();
  _impl_.vid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCCharacterShiningPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 vid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.vid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 shinings = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_shinings(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_shinings(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCCharacterShiningPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCCharacterShiningPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 vid = 1;
  if (this->_internal_vid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_vid(), target);
  }

  // repeated uint32 shinings = 2;
  {
    int byte_size = _impl_._shinings_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          2, _internal_shinings(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCCharacterShiningPacket)
  return target;
}

size_t GCCharacterShiningPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCCharacterShiningPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 shinings = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.shinings_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._shinings_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint32 vid = 1;
  if (this->_internal_vid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_vid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCCharacterShiningPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCCharacterShiningPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCCharacterShiningPacket::GetClassData() const { return &_class_data_; }


void GCCharacterShiningPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCCharacterShiningPacket*>(&to_msg);
  auto& from = static_cast<const GCCharacterShiningPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCCharacterShiningPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.shinings_.MergeFrom(from._impl_.shinings_);
  if (from._internal_vid() != 0) {
    _this->_internal_set_vid(from._internal_vid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCCharacterShiningPacket::CopyFrom(const GCCharacterShiningPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCCharacterShiningPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCCharacterShiningPacket::IsInitialized() const {
  return true;
}

void GCCharacterShiningPacket::InternalSwap(GCCharacterShiningPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.shinings_.InternalSwap(&other->_impl_.shinings_);
  swap(_impl_.vid_, other->_impl_.vid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GCCharacterShiningPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[133]);
}

// ===================================================================

class GCCharacterDeletePacket::_Internal {
 public:
};

GCCharacterDeletePacket::GCCharacterDeletePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCCharacterDeletePacket)
}
GCCharacterDeletePacket::GCCharacterDeletePacket(const GCCharacterDeletePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCCharacterDeletePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.vid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.vid_ = from._impl_.vid_;
  // @@protoc_insertion_point(copy_constructor:network.GCCharacterDeletePacket)
}

inline void GCCharacterDeletePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.vid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCCharacterDeletePacket::~GCCharacterDeletePacket() {
  // @@protoc_insertion_point(destructor:network.GCCharacterDeletePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCCharacterDeletePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GCCharacterDeletePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCCharacterDeletePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCCharacterDeletePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.vid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCCharacterDeletePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 vid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.vid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCCharacterDeletePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCCharacterDeletePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 vid = 1;
  if (this->_internal_vid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_vid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCCharacterDeletePacket)
  return target;
}

size_t GCCharacterDeletePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCCharacterDeletePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 vid = 1;
  if (this->_internal_vid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_vid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCCharacterDeletePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCCharacterDeletePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCCharacterDeletePacket::GetClassData() const { return &_class_data_; }


void GCCharacterDeletePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCCharacterDeletePacket*>(&to_msg);
  auto& from = static_cast<const GCCharacterDeletePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCCharacterDeletePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_vid() != 0) {
    _this->_internal_set_vid(from._internal_vid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCCharacterDeletePacket::CopyFrom(const GCCharacterDeletePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCCharacterDeletePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCCharacterDeletePacket::IsInitialized() const {
  return true;
}

void GCCharacterDeletePacket::InternalSwap(GCCharacterDeletePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.vid_, other->_impl_.vid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GCCharacterDeletePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[134]);
}

// ===================================================================

class GCFishingStartPacket::_Internal {
 public:
};

GCFishingStartPacket::GCFishingStartPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCFishingStartPacket)
}
GCFishingStartPacket::GCFishingStartPacket(const GCFishingStartPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCFishingStartPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.vid_){}
    , decltype(_impl_.dir_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.vid_, &from._impl_.vid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.dir_) -
    reinterpret_cast<char*>(&_impl_.vid_)) + sizeof(_impl_.dir_));
  // @@protoc_insertion_point(copy_constructor:network.GCFishingStartPacket)
}

inline void GCFishingStartPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.vid_){0u}
    , decltype(_impl_.dir_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCFishingStartPacket::~GCFishingStartPacket() {
  // @@protoc_insertion_point(destructor:network.GCFishingStartPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCFishingStartPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GCFishingStartPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCFishingStartPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCFishingStartPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.vid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.dir_) -
      reinterpret_cast<char*>(&_impl_.vid_)) + sizeof(_impl_.dir_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCFishingStartPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 vid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.vid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 dir = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.dir_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCFishingStartPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCFishingStartPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 vid = 1;
  if (this->_internal_vid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_vid(), target);
  }

  // uint32 dir = 2;
  if (this->_internal_dir() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_dir(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCFishingStartPacket)
  return target;
}

size_t GCFishingStartPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCFishingStartPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 vid = 1;
  if (this->_internal_vid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_vid());
  }

  // uint32 dir = 2;
  if (this->_internal_dir() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_dir());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCFishingStartPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCFishingStartPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCFishingStartPacket::GetClassData() const { return &_class_data_; }


void GCFishingStartPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCFishingStartPacket*>(&to_msg);
  auto& from = static_cast<const GCFishingStartPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCFishingStartPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_vid() != 0) {
    _this->_internal_set_vid(from._internal_vid());
  }
  if (from._internal_dir() != 0) {
    _this->_internal_set_dir(from._internal_dir());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCFishingStartPacket::CopyFrom(const GCFishingStartPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCFishingStartPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCFishingStartPacket::IsInitialized() const {
  return true;
}

void GCFishingStartPacket::InternalSwap(GCFishingStartPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GCFishingStartPacket, _impl_.dir_)
      + sizeof(GCFishingStartPacket::_impl_.dir_)
      - PROTOBUF_FIELD_OFFSET(GCFishingStartPacket, _impl_.vid_)>(
          reinterpret_cast<char*>(&_impl_.vid_),
          reinterpret_cast<char*>(&other->_impl_.vid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GCFishingStartPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[135]);
}

// ===================================================================

class GCFishingStopPacket::_Internal {
 public:
};

GCFishingStopPacket::GCFishingStopPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCFishingStopPacket)
}
GCFishingStopPacket::GCFishingStopPacket(const GCFishingStopPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCFishingStopPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.vid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.vid_ = from._impl_.vid_;
  // @@protoc_insertion_point(copy_constructor:network.GCFishingStopPacket)
}

inline void GCFishingStopPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.vid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCFishingStopPacket::~GCFishingStopPacket() {
  // @@protoc_insertion_point(destructor:network.GCFishingStopPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCFishingStopPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GCFishingStopPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCFishingStopPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCFishingStopPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.vid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCFishingStopPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 vid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.vid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCFishingStopPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCFishingStopPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 vid = 1;
  if (this->_internal_vid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_vid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCFishingStopPacket)
  return target;
}

size_t GCFishingStopPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCFishingStopPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 vid = 1;
  if (this->_internal_vid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_vid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCFishingStopPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCFishingStopPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCFishingStopPacket::GetClassData() const { return &_class_data_; }


void GCFishingStopPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCFishingStopPacket*>(&to_msg);
  auto& from = static_cast<const GCFishingStopPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCFishingStopPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_vid() != 0) {
    _this->_internal_set_vid(from._internal_vid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCFishingStopPacket::CopyFrom(const GCFishingStopPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCFishingStopPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCFishingStopPacket::IsInitialized() const {
  return true;
}

void GCFishingStopPacket::InternalSwap(GCFishingStopPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.vid_, other->_impl_.vid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GCFishingStopPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[136]);
}

// ===================================================================

class GCFishingReactPacket::_Internal {
 public:
};

GCFishingReactPacket::GCFishingReactPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCFishingReactPacket)
}
GCFishingReactPacket::GCFishingReactPacket(const GCFishingReactPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCFishingReactPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.vid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.vid_ = from._impl_.vid_;
  // @@protoc_insertion_point(copy_constructor:network.GCFishingReactPacket)
}

inline void GCFishingReactPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.vid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCFishingReactPacket::~GCFishingReactPacket() {
  // @@protoc_insertion_point(destructor:network.GCFishingReactPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCFishingReactPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GCFishingReactPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCFishingReactPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCFishingReactPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.vid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCFishingReactPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 vid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.vid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCFishingReactPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCFishingReactPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 vid = 1;
  if (this->_internal_vid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_vid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCFishingReactPacket)
  return target;
}

size_t GCFishingReactPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCFishingReactPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 vid = 1;
  if (this->_internal_vid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_vid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCFishingReactPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCFishingReactPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCFishingReactPacket::GetClassData() const { return &_class_data_; }


void GCFishingReactPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCFishingReactPacket*>(&to_msg);
  auto& from = static_cast<const GCFishingReactPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCFishingReactPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_vid() != 0) {
    _this->_internal_set_vid(from._internal_vid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCFishingReactPacket::CopyFrom(const GCFishingReactPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCFishingReactPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCFishingReactPacket::IsInitialized() const {
  return true;
}

void GCFishingReactPacket::InternalSwap(GCFishingReactPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.vid_, other->_impl_.vid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GCFishingReactPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[137]);
}

// ===================================================================

class GCFishingSuccessPacket::_Internal {
 public:
};

GCFishingSuccessPacket::GCFishingSuccessPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCFishingSuccessPacket)
}
GCFishingSuccessPacket::GCFishingSuccessPacket(const GCFishingSuccessPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCFishingSuccessPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.vid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.vid_ = from._impl_.vid_;
  // @@protoc_insertion_point(copy_constructor:network.GCFishingSuccessPacket)
}

inline void GCFishingSuccessPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.vid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCFishingSuccessPacket::~GCFishingSuccessPacket() {
  // @@protoc_insertion_point(destructor:network.GCFishingSuccessPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCFishingSuccessPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GCFishingSuccessPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCFishingSuccessPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCFishingSuccessPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.vid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCFishingSuccessPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 vid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.vid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCFishingSuccessPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCFishingSuccessPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 vid = 1;
  if (this->_internal_vid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_vid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCFishingSuccessPacket)
  return target;
}

size_t GCFishingSuccessPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCFishingSuccessPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 vid = 1;
  if (this->_internal_vid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_vid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCFishingSuccessPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCFishingSuccessPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCFishingSuccessPacket::GetClassData() const { return &_class_data_; }


void GCFishingSuccessPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCFishingSuccessPacket*>(&to_msg);
  auto& from = static_cast<const GCFishingSuccessPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCFishingSuccessPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_vid() != 0) {
    _this->_internal_set_vid(from._internal_vid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCFishingSuccessPacket::CopyFrom(const GCFishingSuccessPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCFishingSuccessPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCFishingSuccessPacket::IsInitialized() const {
  return true;
}

void GCFishingSuccessPacket::InternalSwap(GCFishingSuccessPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.vid_, other->_impl_.vid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GCFishingSuccessPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[138]);
}

// ===================================================================

class GCFishingFailPacket::_Internal {
 public:
};

GCFishingFailPacket::GCFishingFailPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCFishingFailPacket)
}
GCFishingFailPacket::GCFishingFailPacket(const GCFishingFailPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCFishingFailPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.vid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.vid_ = from._impl_.vid_;
  // @@protoc_insertion_point(copy_constructor:network.GCFishingFailPacket)
}

inline void GCFishingFailPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.vid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCFishingFailPacket::~GCFishingFailPacket() {
  // @@protoc_insertion_point(destructor:network.GCFishingFailPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCFishingFailPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GCFishingFailPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCFishingFailPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCFishingFailPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.vid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCFishingFailPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 vid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.vid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCFishingFailPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCFishingFailPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 vid = 1;
  if (this->_internal_vid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_vid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCFishingFailPacket)
  return target;
}

size_t GCFishingFailPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCFishingFailPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 vid = 1;
  if (this->_internal_vid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_vid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCFishingFailPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCFishingFailPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCFishingFailPacket::GetClassData() const { return &_class_data_; }


void GCFishingFailPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCFishingFailPacket*>(&to_msg);
  auto& from = static_cast<const GCFishingFailPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCFishingFailPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_vid() != 0) {
    _this->_internal_set_vid(from._internal_vid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCFishingFailPacket::CopyFrom(const GCFishingFailPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCFishingFailPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCFishingFailPacket::IsInitialized() const {
  return true;
}

void GCFishingFailPacket::InternalSwap(GCFishingFailPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.vid_, other->_impl_.vid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GCFishingFailPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[139]);
}

// ===================================================================

class GCFishingFishInfoPacket::_Internal {
 public:
};

GCFishingFishInfoPacket::GCFishingFishInfoPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCFishingFishInfoPacket)
}
GCFishingFishInfoPacket::GCFishingFishInfoPacket(const GCFishingFishInfoPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCFishingFishInfoPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.info_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.info_ = from._impl_.info_;
  // @@protoc_insertion_point(copy_constructor:network.GCFishingFishInfoPacket)
}

inline void GCFishingFishInfoPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.info_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCFishingFishInfoPacket::~GCFishingFishInfoPacket() {
  // @@protoc_insertion_point(destructor:network.GCFishingFishInfoPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCFishingFishInfoPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GCFishingFishInfoPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCFishingFishInfoPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCFishingFishInfoPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.info_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCFishingFishInfoPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.info_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCFishingFishInfoPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCFishingFishInfoPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 info = 1;
  if (this->_internal_info() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_info(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCFishingFishInfoPacket)
  return target;
}

size_t GCFishingFishInfoPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCFishingFishInfoPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 info = 1;
  if (this->_internal_info() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_info());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCFishingFishInfoPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCFishingFishInfoPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCFishingFishInfoPacket::GetClassData() const { return &_class_data_; }


void GCFishingFishInfoPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCFishingFishInfoPacket*>(&to_msg);
  auto& from = static_cast<const GCFishingFishInfoPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCFishingFishInfoPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_info() != 0) {
    _this->_internal_set_info(from._internal_info());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCFishingFishInfoPacket::CopyFrom(const GCFishingFishInfoPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCFishingFishInfoPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCFishingFishInfoPacket::IsInitialized() const {
  return true;
}

void GCFishingFishInfoPacket::InternalSwap(GCFishingFishInfoPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.info_, other->_impl_.info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GCFishingFishInfoPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[140]);
}

// ===================================================================

class GCItemSetPacket::_Internal {
 public:
  static const ::network::TItemData& data(const GCItemSetPacket* msg);
};

const ::network::TItemData&
GCItemSetPacket::_Internal::data(const GCItemSetPacket* msg) {
  return *msg->_impl_.data_;
}
void GCItemSetPacket::clear_data() {
  if (GetArenaForAllocation() == nullptr && _impl_.data_ != nullptr) {
    delete _impl_.data_;
  }
  _impl_.data_ = nullptr;
}
GCItemSetPacket::GCItemSetPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCItemSetPacket)
}
GCItemSetPacket::GCItemSetPacket(const GCItemSetPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCItemSetPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){nullptr}
    , decltype(_impl_.highlight_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data()) {
    _this->_impl_.data_ = new ::network::TItemData(*from._impl_.data_);
  }
  _this->_impl_.highlight_ = from._impl_.highlight_;
  // @@protoc_insertion_point(copy_constructor:network.GCItemSetPacket)
}

inline void GCItemSetPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){nullptr}
    , decltype(_impl_.highlight_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCItemSetPacket::~GCItemSetPacket() {
  // @@protoc_insertion_point(destructor:network.GCItemSetPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCItemSetPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.data_;
}

void GCItemSetPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCItemSetPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCItemSetPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.data_ != nullptr) {
    delete _impl_.data_;
  }
  _impl_.data_ = nullptr;
  _impl_.highlight_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCItemSetPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .network.TItemData data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool highlight = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.highlight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCItemSetPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCItemSetPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .network.TItemData data = 1;
  if (this->_internal_has_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::data(this),
        _Internal::data(this).GetCachedSize(), target, stream);
  }

  // bool highlight = 2;
  if (this->_internal_highlight() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_highlight(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCItemSetPacket)
  return target;
}

size_t GCItemSetPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCItemSetPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .network.TItemData data = 1;
  if (this->_internal_has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.data_);
  }

  // bool highlight = 2;
  if (this->_internal_highlight() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCItemSetPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCItemSetPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCItemSetPacket::GetClassData() const { return &_class_data_; }


void GCItemSetPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCItemSetPacket*>(&to_msg);
  auto& from = static_cast<const GCItemSetPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCItemSetPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_data()) {
    _this->_internal_mutable_data()->::network::TItemData::MergeFrom(
        from._internal_data());
  }
  if (from._internal_highlight() != 0) {
    _this->_internal_set_highlight(from._internal_highlight());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCItemSetPacket::CopyFrom(const GCItemSetPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCItemSetPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCItemSetPacket::IsInitialized() const {
  return true;
}

void GCItemSetPacket::InternalSwap(GCItemSetPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GCItemSetPacket, _impl_.highlight_)
      + sizeof(GCItemSetPacket::_impl_.highlight_)
      - PROTOBUF_FIELD_OFFSET(GCItemSetPacket, _impl_.data_)>(
          reinterpret_cast<char*>(&_impl_.data_),
          reinterpret_cast<char*>(&other->_impl_.data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GCItemSetPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[141]);
}

// ===================================================================

class GCItemUpdatePacket::_Internal {
 public:
  static const ::network::TItemData& data(const GCItemUpdatePacket* msg);
};

const ::network::TItemData&
GCItemUpdatePacket::_Internal::data(const GCItemUpdatePacket* msg) {
  return *msg->_impl_.data_;
}
void GCItemUpdatePacket::clear_data() {
  if (GetArenaForAllocation() == nullptr && _impl_.data_ != nullptr) {
    delete _impl_.data_;
  }
  _impl_.data_ = nullptr;
}
GCItemUpdatePacket::GCItemUpdatePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCItemUpdatePacket)
}
GCItemUpdatePacket::GCItemUpdatePacket(const GCItemUpdatePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCItemUpdatePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data()) {
    _this->_impl_.data_ = new ::network::TItemData(*from._impl_.data_);
  }
  // @@protoc_insertion_point(copy_constructor:network.GCItemUpdatePacket)
}

inline void GCItemUpdatePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCItemUpdatePacket::~GCItemUpdatePacket() {
  // @@protoc_insertion_point(destructor:network.GCItemUpdatePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCItemUpdatePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.data_;
}

void GCItemUpdatePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCItemUpdatePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCItemUpdatePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.data_ != nullptr) {
    delete _impl_.data_;
  }
  _impl_.data_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCItemUpdatePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .network.TItemData data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCItemUpdatePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCItemUpdatePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .network.TItemData data = 1;
  if (this->_internal_has_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::data(this),
        _Internal::data(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCItemUpdatePacket)
  return target;
}

size_t GCItemUpdatePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCItemUpdatePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .network.TItemData data = 1;
  if (this->_internal_has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.data_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCItemUpdatePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCItemUpdatePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCItemUpdatePacket::GetClassData() const { return &_class_data_; }


void GCItemUpdatePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCItemUpdatePacket*>(&to_msg);
  auto& from = static_cast<const GCItemUpdatePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCItemUpdatePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_data()) {
    _this->_internal_mutable_data()->::network::TItemData::MergeFrom(
        from._internal_data());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCItemUpdatePacket::CopyFrom(const GCItemUpdatePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCItemUpdatePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCItemUpdatePacket::IsInitialized() const {
  return true;
}

void GCItemUpdatePacket::InternalSwap(GCItemUpdatePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.data_, other->_impl_.data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GCItemUpdatePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[142]);
}

// ===================================================================

class GCItemGroundAddPacket::_Internal {
 public:
};

void GCItemGroundAddPacket::clear_attributes() {
  _impl_.attributes_.Clear();
}
GCItemGroundAddPacket::GCItemGroundAddPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCItemGroundAddPacket)
}
GCItemGroundAddPacket::GCItemGroundAddPacket(const GCItemGroundAddPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCItemGroundAddPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sockets_){from._impl_.sockets_}
    , /*decltype(_impl_._sockets_cached_byte_size_)*/{0}
    , decltype(_impl_.attributes_){from._impl_.attributes_}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.z_){}
    , decltype(_impl_.vid_){}
    , decltype(_impl_.vnum_){}
    , decltype(_impl_.count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.count_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.count_));
  // @@protoc_insertion_point(copy_constructor:network.GCItemGroundAddPacket)
}

inline void GCItemGroundAddPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.sockets_){arena}
    , /*decltype(_impl_._sockets_cached_byte_size_)*/{0}
    , decltype(_impl_.attributes_){arena}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.z_){0}
    , decltype(_impl_.vid_){0u}
    , decltype(_impl_.vnum_){0u}
    , decltype(_impl_.count_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCItemGroundAddPacket::~GCItemGroundAddPacket() {
  // @@protoc_insertion_point(destructor:network.GCItemGroundAddPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCItemGroundAddPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sockets_.~RepeatedField();
  _impl_.attributes_.~RepeatedPtrField();
}

void GCItemGroundAddPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCItemGroundAddPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCItemGroundAddPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sockets_.Clear();
  _impl_.attributes_.Clear();
  ::memset(&_impl_.x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.count_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCItemGroundAddPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.z_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 vid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.vid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 vnum = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.vnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 count = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 sockets = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_sockets(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 56) {
          _internal_add_sockets(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .network.TItemAttribute attributes = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attributes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCItemGroundAddPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCItemGroundAddPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->_internal_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_x(), target);
  }

  // int32 y = 2;
  if (this->_internal_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_y(), target);
  }

  // int32 z = 3;
  if (this->_internal_z() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_z(), target);
  }

  // uint32 vid = 4;
  if (this->_internal_vid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_vid(), target);
  }

  // uint32 vnum = 5;
  if (this->_internal_vnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_vnum(), target);
  }

  // uint32 count = 6;
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_count(), target);
  }

  // repeated int32 sockets = 7;
  {
    int byte_size = _impl_._sockets_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          7, _internal_sockets(), byte_size, target);
    }
  }

  // repeated .network.TItemAttribute attributes = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_attributes_size()); i < n; i++) {
    const auto& repfield = this->_internal_attributes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCItemGroundAddPacket)
  return target;
}

size_t GCItemGroundAddPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCItemGroundAddPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 sockets = 7;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.sockets_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._sockets_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .network.TItemAttribute attributes = 8;
  total_size += 1UL * this->_internal_attributes_size();
  for (const auto& msg : this->_impl_.attributes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 x = 1;
  if (this->_internal_x() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x());
  }

  // int32 y = 2;
  if (this->_internal_y() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y());
  }

  // int32 z = 3;
  if (this->_internal_z() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_z());
  }

  // uint32 vid = 4;
  if (this->_internal_vid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_vid());
  }

  // uint32 vnum = 5;
  if (this->_internal_vnum() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_vnum());
  }

  // uint32 count = 6;
  if (this->_internal_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCItemGroundAddPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCItemGroundAddPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCItemGroundAddPacket::GetClassData() const { return &_class_data_; }


void GCItemGroundAddPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCItemGroundAddPacket*>(&to_msg);
  auto& from = static_cast<const GCItemGroundAddPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCItemGroundAddPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.sockets_.MergeFrom(from._impl_.sockets_);
  _this->_impl_.attributes_.MergeFrom(from._impl_.attributes_);
  if (from._internal_x() != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  if (from._internal_y() != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  if (from._internal_z() != 0) {
    _this->_internal_set_z(from._internal_z());
  }
  if (from._internal_vid() != 0) {
    _this->_internal_set_vid(from._internal_vid());
  }
  if (from._internal_vnum() != 0) {
    _this->_internal_set_vnum(from._internal_vnum());
  }
  if (from._internal_count() != 0) {
    _this->_internal_set_count(from._internal_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCItemGroundAddPacket::CopyFrom(const GCItemGroundAddPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCItemGroundAddPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCItemGroundAddPacket::IsInitialized() const {
  return true;
}

void GCItemGroundAddPacket::InternalSwap(GCItemGroundAddPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.sockets_.InternalSwap(&other->_impl_.sockets_);
  _impl_.attributes_.InternalSwap(&other->_impl_.attributes_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GCItemGroundAddPacket, _impl_.count_)
      + sizeof(GCItemGroundAddPacket::_impl_.count_)
      - PROTOBUF_FIELD_OFFSET(GCItemGroundAddPacket, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GCItemGroundAddPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[143]);
}

// ===================================================================

class GCItemGroundDeletePacket::_Internal {
 public:
};

GCItemGroundDeletePacket::GCItemGroundDeletePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCItemGroundDeletePacket)
}
GCItemGroundDeletePacket::GCItemGroundDeletePacket(const GCItemGroundDeletePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCItemGroundDeletePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.vid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.vid_ = from._impl_.vid_;
  // @@protoc_insertion_point(copy_constructor:network.GCItemGroundDeletePacket)
}

inline void GCItemGroundDeletePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.vid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCItemGroundDeletePacket::~GCItemGroundDeletePacket() {
  // @@protoc_insertion_point(destructor:network.GCItemGroundDeletePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCItemGroundDeletePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GCItemGroundDeletePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCItemGroundDeletePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCItemGroundDeletePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.vid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCItemGroundDeletePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 vid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.vid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCItemGroundDeletePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCItemGroundDeletePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 vid = 1;
  if (this->_internal_vid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_vid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCItemGroundDeletePacket)
  return target;
}

size_t GCItemGroundDeletePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCItemGroundDeletePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 vid = 1;
  if (this->_internal_vid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_vid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCItemGroundDeletePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCItemGroundDeletePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCItemGroundDeletePacket::GetClassData() const { return &_class_data_; }


void GCItemGroundDeletePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCItemGroundDeletePacket*>(&to_msg);
  auto& from = static_cast<const GCItemGroundDeletePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCItemGroundDeletePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_vid() != 0) {
    _this->_internal_set_vid(from._internal_vid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCItemGroundDeletePacket::CopyFrom(const GCItemGroundDeletePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCItemGroundDeletePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCItemGroundDeletePacket::IsInitialized() const {
  return true;
}

void GCItemGroundDeletePacket::InternalSwap(GCItemGroundDeletePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.vid_, other->_impl_.vid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GCItemGroundDeletePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[144]);
}

// ===================================================================

class GCItemOwnershipPacket::_Internal {
 public:
};

GCItemOwnershipPacket::GCItemOwnershipPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCItemOwnershipPacket)
}
GCItemOwnershipPacket::GCItemOwnershipPacket(const GCItemOwnershipPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCItemOwnershipPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.vid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.vid_ = from._impl_.vid_;
  // @@protoc_insertion_point(copy_constructor:network.GCItemOwnershipPacket)
}

inline void GCItemOwnershipPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.vid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GCItemOwnershipPacket::~GCItemOwnershipPacket() {
  // @@protoc_insertion_point(destructor:network.GCItemOwnershipPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCItemOwnershipPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void GCItemOwnershipPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCItemOwnershipPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCItemOwnershipPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.vid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCItemOwnershipPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 vid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.vid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCItemOwnershipPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCItemOwnershipPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 vid = 1;
  if (this->_internal_vid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_vid(), target);
  }

  // bytes name = 2;
  if (!this->_internal_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCItemOwnershipPacket)
  return target;
}

size_t GCItemOwnershipPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCItemOwnershipPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // uint32 vid = 1;
  if (this->_internal_vid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_vid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCItemOwnershipPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCItemOwnershipPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCItemOwnershipPacket::GetClassData() const { return &_class_data_; }


void GCItemOwnershipPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCItemOwnershipPacket*>(&to_msg);
  auto& from = static_cast<const GCItemOwnershipPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCItemOwnershipPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_vid() != 0) {
    _this->_internal_set_vid(from._internal_vid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCItemOwnershipPacket::CopyFrom(const GCItemOwnershipPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCItemOwnershipPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCItemOwnershipPacket::IsInitialized() const {
  return true;
}

void GCItemOwnershipPacket::InternalSwap(GCItemOwnershipPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.vid_, other->_impl_.vid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GCItemOwnershipPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[145]);
}

// ===================================================================

class GCExchangeStartPacket::_Internal {
 public:
};

GCExchangeStartPacket::GCExchangeStartPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCExchangeStartPacket)
}
GCExchangeStartPacket::GCExchangeStartPacket(const GCExchangeStartPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCExchangeStartPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.target_vid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.target_vid_ = from._impl_.target_vid_;
  // @@protoc_insertion_point(copy_constructor:network.GCExchangeStartPacket)
}

inline void GCExchangeStartPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.target_vid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCExchangeStartPacket::~GCExchangeStartPacket() {
  // @@protoc_insertion_point(destructor:network.GCExchangeStartPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCExchangeStartPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GCExchangeStartPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCExchangeStartPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCExchangeStartPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.target_vid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCExchangeStartPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 target_vid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.target_vid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCExchangeStartPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCExchangeStartPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 target_vid = 1;
  if (this->_internal_target_vid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_target_vid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCExchangeStartPacket)
  return target;
}

size_t GCExchangeStartPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCExchangeStartPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 target_vid = 1;
  if (this->_internal_target_vid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_target_vid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCExchangeStartPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCExchangeStartPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCExchangeStartPacket::GetClassData() const { return &_class_data_; }


void GCExchangeStartPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCExchangeStartPacket*>(&to_msg);
  auto& from = static_cast<const GCExchangeStartPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCExchangeStartPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_target_vid() != 0) {
    _this->_internal_set_target_vid(from._internal_target_vid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCExchangeStartPacket::CopyFrom(const GCExchangeStartPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCExchangeStartPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCExchangeStartPacket::IsInitialized() const {
  return true;
}

void GCExchangeStartPacket::InternalSwap(GCExchangeStartPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.target_vid_, other->_impl_.target_vid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GCExchangeStartPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[146]);
}

// ===================================================================

class GCExchangeItemAddPacket::_Internal {
 public:
  static const ::network::TItemData& data(const GCExchangeItemAddPacket* msg);
};

const ::network::TItemData&
GCExchangeItemAddPacket::_Internal::data(const GCExchangeItemAddPacket* msg) {
  return *msg->_impl_.data_;
}
void GCExchangeItemAddPacket::clear_data() {
  if (GetArenaForAllocation() == nullptr && _impl_.data_ != nullptr) {
    delete _impl_.data_;
  }
  _impl_.data_ = nullptr;
}
GCExchangeItemAddPacket::GCExchangeItemAddPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCExchangeItemAddPacket)
}
GCExchangeItemAddPacket::GCExchangeItemAddPacket(const GCExchangeItemAddPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCExchangeItemAddPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){nullptr}
    , decltype(_impl_.display_pos_){}
    , decltype(_impl_.is_me_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data()) {
    _this->_impl_.data_ = new ::network::TItemData(*from._impl_.data_);
  }
  ::memcpy(&_impl_.display_pos_, &from._impl_.display_pos_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_me_) -
    reinterpret_cast<char*>(&_impl_.display_pos_)) + sizeof(_impl_.is_me_));
  // @@protoc_insertion_point(copy_constructor:network.GCExchangeItemAddPacket)
}

inline void GCExchangeItemAddPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){nullptr}
    , decltype(_impl_.display_pos_){0u}
    , decltype(_impl_.is_me_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCExchangeItemAddPacket::~GCExchangeItemAddPacket() {
  // @@protoc_insertion_point(destructor:network.GCExchangeItemAddPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCExchangeItemAddPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.data_;
}

void GCExchangeItemAddPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCExchangeItemAddPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCExchangeItemAddPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.data_ != nullptr) {
    delete _impl_.data_;
  }
  _impl_.data_ = nullptr;
  ::memset(&_impl_.display_pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.is_me_) -
      reinterpret_cast<char*>(&_impl_.display_pos_)) + sizeof(_impl_.is_me_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCExchangeItemAddPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 display_pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.display_pos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .network.TItemData data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_me = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.is_me_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCExchangeItemAddPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCExchangeItemAddPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 display_pos = 1;
  if (this->_internal_display_pos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_display_pos(), target);
  }

  // .network.TItemData data = 2;
  if (this->_internal_has_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::data(this),
        _Internal::data(this).GetCachedSize(), target, stream);
  }

  // bool is_me = 3;
  if (this->_internal_is_me() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_is_me(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCExchangeItemAddPacket)
  return target;
}

size_t GCExchangeItemAddPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCExchangeItemAddPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .network.TItemData data = 2;
  if (this->_internal_has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.data_);
  }

  // uint32 display_pos = 1;
  if (this->_internal_display_pos() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_display_pos());
  }

  // bool is_me = 3;
  if (this->_internal_is_me() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCExchangeItemAddPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCExchangeItemAddPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCExchangeItemAddPacket::GetClassData() const { return &_class_data_; }


void GCExchangeItemAddPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCExchangeItemAddPacket*>(&to_msg);
  auto& from = static_cast<const GCExchangeItemAddPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCExchangeItemAddPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_data()) {
    _this->_internal_mutable_data()->::network::TItemData::MergeFrom(
        from._internal_data());
  }
  if (from._internal_display_pos() != 0) {
    _this->_internal_set_display_pos(from._internal_display_pos());
  }
  if (from._internal_is_me() != 0) {
    _this->_internal_set_is_me(from._internal_is_me());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCExchangeItemAddPacket::CopyFrom(const GCExchangeItemAddPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCExchangeItemAddPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCExchangeItemAddPacket::IsInitialized() const {
  return true;
}

void GCExchangeItemAddPacket::InternalSwap(GCExchangeItemAddPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GCExchangeItemAddPacket, _impl_.is_me_)
      + sizeof(GCExchangeItemAddPacket::_impl_.is_me_)
      - PROTOBUF_FIELD_OFFSET(GCExchangeItemAddPacket, _impl_.data_)>(
          reinterpret_cast<char*>(&_impl_.data_),
          reinterpret_cast<char*>(&other->_impl_.data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GCExchangeItemAddPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[147]);
}

// ===================================================================

class GCExchangeItemDelPacket::_Internal {
 public:
  static const ::network::TItemPos& inventory_pos(const GCExchangeItemDelPacket* msg);
};

const ::network::TItemPos&
GCExchangeItemDelPacket::_Internal::inventory_pos(const GCExchangeItemDelPacket* msg) {
  return *msg->_impl_.inventory_pos_;
}
void GCExchangeItemDelPacket::clear_inventory_pos() {
  if (GetArenaForAllocation() == nullptr && _impl_.inventory_pos_ != nullptr) {
    delete _impl_.inventory_pos_;
  }
  _impl_.inventory_pos_ = nullptr;
}
GCExchangeItemDelPacket::GCExchangeItemDelPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCExchangeItemDelPacket)
}
GCExchangeItemDelPacket::GCExchangeItemDelPacket(const GCExchangeItemDelPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCExchangeItemDelPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.inventory_pos_){nullptr}
    , decltype(_impl_.display_pos_){}
    , decltype(_impl_.is_me_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_inventory_pos()) {
    _this->_impl_.inventory_pos_ = new ::network::TItemPos(*from._impl_.inventory_pos_);
  }
  ::memcpy(&_impl_.display_pos_, &from._impl_.display_pos_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_me_) -
    reinterpret_cast<char*>(&_impl_.display_pos_)) + sizeof(_impl_.is_me_));
  // @@protoc_insertion_point(copy_constructor:network.GCExchangeItemDelPacket)
}

inline void GCExchangeItemDelPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.inventory_pos_){nullptr}
    , decltype(_impl_.display_pos_){0u}
    , decltype(_impl_.is_me_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCExchangeItemDelPacket::~GCExchangeItemDelPacket() {
  // @@protoc_insertion_point(destructor:network.GCExchangeItemDelPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCExchangeItemDelPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.inventory_pos_;
}

void GCExchangeItemDelPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCExchangeItemDelPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCExchangeItemDelPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.inventory_pos_ != nullptr) {
    delete _impl_.inventory_pos_;
  }
  _impl_.inventory_pos_ = nullptr;
  ::memset(&_impl_.display_pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.is_me_) -
      reinterpret_cast<char*>(&_impl_.display_pos_)) + sizeof(_impl_.is_me_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCExchangeItemDelPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 display_pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.display_pos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .network.TItemPos inventory_pos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_inventory_pos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_me = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.is_me_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCExchangeItemDelPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCExchangeItemDelPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 display_pos = 1;
  if (this->_internal_display_pos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_display_pos(), target);
  }

  // .network.TItemPos inventory_pos = 2;
  if (this->_internal_has_inventory_pos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::inventory_pos(this),
        _Internal::inventory_pos(this).GetCachedSize(), target, stream);
  }

  // bool is_me = 3;
  if (this->_internal_is_me() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_is_me(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCExchangeItemDelPacket)
  return target;
}

size_t GCExchangeItemDelPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCExchangeItemDelPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .network.TItemPos inventory_pos = 2;
  if (this->_internal_has_inventory_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.inventory_pos_);
  }

  // uint32 display_pos = 1;
  if (this->_internal_display_pos() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_display_pos());
  }

  // bool is_me = 3;
  if (this->_internal_is_me() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCExchangeItemDelPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCExchangeItemDelPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCExchangeItemDelPacket::GetClassData() const { return &_class_data_; }


void GCExchangeItemDelPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCExchangeItemDelPacket*>(&to_msg);
  auto& from = static_cast<const GCExchangeItemDelPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCExchangeItemDelPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_inventory_pos()) {
    _this->_internal_mutable_inventory_pos()->::network::TItemPos::MergeFrom(
        from._internal_inventory_pos());
  }
  if (from._internal_display_pos() != 0) {
    _this->_internal_set_display_pos(from._internal_display_pos());
  }
  if (from._internal_is_me() != 0) {
    _this->_internal_set_is_me(from._internal_is_me());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCExchangeItemDelPacket::CopyFrom(const GCExchangeItemDelPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCExchangeItemDelPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCExchangeItemDelPacket::IsInitialized() const {
  return true;
}

void GCExchangeItemDelPacket::InternalSwap(GCExchangeItemDelPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GCExchangeItemDelPacket, _impl_.is_me_)
      + sizeof(GCExchangeItemDelPacket::_impl_.is_me_)
      - PROTOBUF_FIELD_OFFSET(GCExchangeItemDelPacket, _impl_.inventory_pos_)>(
          reinterpret_cast<char*>(&_impl_.inventory_pos_),
          reinterpret_cast<char*>(&other->_impl_.inventory_pos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GCExchangeItemDelPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[148]);
}

// ===================================================================

class GCExchangeGoldAddPacket::_Internal {
 public:
};

GCExchangeGoldAddPacket::GCExchangeGoldAddPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCExchangeGoldAddPacket)
}
GCExchangeGoldAddPacket::GCExchangeGoldAddPacket(const GCExchangeGoldAddPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCExchangeGoldAddPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.gold_){}
    , decltype(_impl_.is_me_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.gold_, &from._impl_.gold_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_me_) -
    reinterpret_cast<char*>(&_impl_.gold_)) + sizeof(_impl_.is_me_));
  // @@protoc_insertion_point(copy_constructor:network.GCExchangeGoldAddPacket)
}

inline void GCExchangeGoldAddPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.gold_){int64_t{0}}
    , decltype(_impl_.is_me_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCExchangeGoldAddPacket::~GCExchangeGoldAddPacket() {
  // @@protoc_insertion_point(destructor:network.GCExchangeGoldAddPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCExchangeGoldAddPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GCExchangeGoldAddPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCExchangeGoldAddPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCExchangeGoldAddPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.gold_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.is_me_) -
      reinterpret_cast<char*>(&_impl_.gold_)) + sizeof(_impl_.is_me_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCExchangeGoldAddPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 gold = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_me = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.is_me_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCExchangeGoldAddPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCExchangeGoldAddPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 gold = 1;
  if (this->_internal_gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_gold(), target);
  }

  // bool is_me = 2;
  if (this->_internal_is_me() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_is_me(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCExchangeGoldAddPacket)
  return target;
}

size_t GCExchangeGoldAddPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCExchangeGoldAddPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 gold = 1;
  if (this->_internal_gold() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_gold());
  }

  // bool is_me = 2;
  if (this->_internal_is_me() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCExchangeGoldAddPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCExchangeGoldAddPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCExchangeGoldAddPacket::GetClassData() const { return &_class_data_; }


void GCExchangeGoldAddPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCExchangeGoldAddPacket*>(&to_msg);
  auto& from = static_cast<const GCExchangeGoldAddPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCExchangeGoldAddPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_gold() != 0) {
    _this->_internal_set_gold(from._internal_gold());
  }
  if (from._internal_is_me() != 0) {
    _this->_internal_set_is_me(from._internal_is_me());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCExchangeGoldAddPacket::CopyFrom(const GCExchangeGoldAddPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCExchangeGoldAddPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCExchangeGoldAddPacket::IsInitialized() const {
  return true;
}

void GCExchangeGoldAddPacket::InternalSwap(GCExchangeGoldAddPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GCExchangeGoldAddPacket, _impl_.is_me_)
      + sizeof(GCExchangeGoldAddPacket::_impl_.is_me_)
      - PROTOBUF_FIELD_OFFSET(GCExchangeGoldAddPacket, _impl_.gold_)>(
          reinterpret_cast<char*>(&_impl_.gold_),
          reinterpret_cast<char*>(&other->_impl_.gold_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GCExchangeGoldAddPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[149]);
}

// ===================================================================

class GCExchangeAcceptPacket::_Internal {
 public:
};

GCExchangeAcceptPacket::GCExchangeAcceptPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCExchangeAcceptPacket)
}
GCExchangeAcceptPacket::GCExchangeAcceptPacket(const GCExchangeAcceptPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCExchangeAcceptPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.accept_){}
    , decltype(_impl_.is_me_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.accept_, &from._impl_.accept_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_me_) -
    reinterpret_cast<char*>(&_impl_.accept_)) + sizeof(_impl_.is_me_));
  // @@protoc_insertion_point(copy_constructor:network.GCExchangeAcceptPacket)
}

inline void GCExchangeAcceptPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.accept_){false}
    , decltype(_impl_.is_me_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCExchangeAcceptPacket::~GCExchangeAcceptPacket() {
  // @@protoc_insertion_point(destructor:network.GCExchangeAcceptPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCExchangeAcceptPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GCExchangeAcceptPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCExchangeAcceptPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCExchangeAcceptPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.accept_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.is_me_) -
      reinterpret_cast<char*>(&_impl_.accept_)) + sizeof(_impl_.is_me_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCExchangeAcceptPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool accept = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.accept_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_me = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.is_me_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCExchangeAcceptPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCExchangeAcceptPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool accept = 1;
  if (this->_internal_accept() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_accept(), target);
  }

  // bool is_me = 2;
  if (this->_internal_is_me() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_is_me(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCExchangeAcceptPacket)
  return target;
}

size_t GCExchangeAcceptPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCExchangeAcceptPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool accept = 1;
  if (this->_internal_accept() != 0) {
    total_size += 1 + 1;
  }

  // bool is_me = 2;
  if (this->_internal_is_me() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCExchangeAcceptPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCExchangeAcceptPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCExchangeAcceptPacket::GetClassData() const { return &_class_data_; }


void GCExchangeAcceptPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCExchangeAcceptPacket*>(&to_msg);
  auto& from = static_cast<const GCExchangeAcceptPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCExchangeAcceptPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_accept() != 0) {
    _this->_internal_set_accept(from._internal_accept());
  }
  if (from._internal_is_me() != 0) {
    _this->_internal_set_is_me(from._internal_is_me());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCExchangeAcceptPacket::CopyFrom(const GCExchangeAcceptPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCExchangeAcceptPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCExchangeAcceptPacket::IsInitialized() const {
  return true;
}

void GCExchangeAcceptPacket::InternalSwap(GCExchangeAcceptPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GCExchangeAcceptPacket, _impl_.is_me_)
      + sizeof(GCExchangeAcceptPacket::_impl_.is_me_)
      - PROTOBUF_FIELD_OFFSET(GCExchangeAcceptPacket, _impl_.accept_)>(
          reinterpret_cast<char*>(&_impl_.accept_),
          reinterpret_cast<char*>(&other->_impl_.accept_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GCExchangeAcceptPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[150]);
}

// ===================================================================

class GCShopStartPacket::_Internal {
 public:
};

void GCShopStartPacket::clear_items() {
  _impl_.items_.Clear();
}
GCShopStartPacket::GCShopStartPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCShopStartPacket)
}
GCShopStartPacket::GCShopStartPacket(const GCShopStartPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCShopStartPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , decltype(_impl_.vid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.vid_ = from._impl_.vid_;
  // @@protoc_insertion_point(copy_constructor:network.GCShopStartPacket)
}

inline void GCShopStartPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , decltype(_impl_.vid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCShopStartPacket::~GCShopStartPacket() {
  // @@protoc_insertion_point(destructor:network.GCShopStartPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCShopStartPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
}

void GCShopStartPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCShopStartPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCShopStartPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  _impl_.vid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCShopStartPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 vid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.vid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .network.TShopItemTable items = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCShopStartPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCShopStartPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 vid = 1;
  if (this->_internal_vid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_vid(), target);
  }

  // repeated .network.TShopItemTable items = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCShopStartPacket)
  return target;
}

size_t GCShopStartPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCShopStartPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .network.TShopItemTable items = 2;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 vid = 1;
  if (this->_internal_vid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_vid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCShopStartPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCShopStartPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCShopStartPacket::GetClassData() const { return &_class_data_; }


void GCShopStartPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCShopStartPacket*>(&to_msg);
  auto& from = static_cast<const GCShopStartPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCShopStartPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  if (from._internal_vid() != 0) {
    _this->_internal_set_vid(from._internal_vid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCShopStartPacket::CopyFrom(const GCShopStartPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCShopStartPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCShopStartPacket::IsInitialized() const {
  return true;
}

void GCShopStartPacket::InternalSwap(GCShopStartPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
  swap(_impl_.vid_, other->_impl_.vid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GCShopStartPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[151]);
}

// ===================================================================

class GCShopExStartPacket::_Internal {
 public:
};

void GCShopExStartPacket::clear_tabs() {
  _impl_.tabs_.Clear();
}
GCShopExStartPacket::GCShopExStartPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCShopExStartPacket)
}
GCShopExStartPacket::GCShopExStartPacket(const GCShopExStartPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCShopExStartPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tabs_){from._impl_.tabs_}
    , decltype(_impl_.vid_){}
    , decltype(_impl_.points_){}
    , decltype(_impl_.cur_limit_){}
    , decltype(_impl_.max_limit_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.vid_, &from._impl_.vid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.max_limit_) -
    reinterpret_cast<char*>(&_impl_.vid_)) + sizeof(_impl_.max_limit_));
  // @@protoc_insertion_point(copy_constructor:network.GCShopExStartPacket)
}

inline void GCShopExStartPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tabs_){arena}
    , decltype(_impl_.vid_){0u}
    , decltype(_impl_.points_){0u}
    , decltype(_impl_.cur_limit_){0}
    , decltype(_impl_.max_limit_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCShopExStartPacket::~GCShopExStartPacket() {
  // @@protoc_insertion_point(destructor:network.GCShopExStartPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCShopExStartPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tabs_.~RepeatedPtrField();
}

void GCShopExStartPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCShopExStartPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCShopExStartPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tabs_.Clear();
  ::memset(&_impl_.vid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.max_limit_) -
      reinterpret_cast<char*>(&_impl_.vid_)) + sizeof(_impl_.max_limit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCShopExStartPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 vid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.vid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .network.TShopExTabData tabs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tabs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint32 points = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.points_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 cur_limit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.cur_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 max_limit = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.max_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCShopExStartPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCShopExStartPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 vid = 1;
  if (this->_internal_vid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_vid(), target);
  }

  // repeated .network.TShopExTabData tabs = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tabs_size()); i < n; i++) {
    const auto& repfield = this->_internal_tabs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // uint32 points = 3;
  if (this->_internal_points() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_points(), target);
  }

  // int32 cur_limit = 4;
  if (this->_internal_cur_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_cur_limit(), target);
  }

  // int32 max_limit = 5;
  if (this->_internal_max_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_max_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCShopExStartPacket)
  return target;
}

size_t GCShopExStartPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCShopExStartPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .network.TShopExTabData tabs = 2;
  total_size += 1UL * this->_internal_tabs_size();
  for (const auto& msg : this->_impl_.tabs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 vid = 1;
  if (this->_internal_vid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_vid());
  }

  // uint32 points = 3;
  if (this->_internal_points() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_points());
  }

  // int32 cur_limit = 4;
  if (this->_internal_cur_limit() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_cur_limit());
  }

  // int32 max_limit = 5;
  if (this->_internal_max_limit() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_max_limit());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCShopExStartPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCShopExStartPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCShopExStartPacket::GetClassData() const { return &_class_data_; }


void GCShopExStartPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCShopExStartPacket*>(&to_msg);
  auto& from = static_cast<const GCShopExStartPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCShopExStartPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.tabs_.MergeFrom(from._impl_.tabs_);
  if (from._internal_vid() != 0) {
    _this->_internal_set_vid(from._internal_vid());
  }
  if (from._internal_points() != 0) {
    _this->_internal_set_points(from._internal_points());
  }
  if (from._internal_cur_limit() != 0) {
    _this->_internal_set_cur_limit(from._internal_cur_limit());
  }
  if (from._internal_max_limit() != 0) {
    _this->_internal_set_max_limit(from._internal_max_limit());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCShopExStartPacket::CopyFrom(const GCShopExStartPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCShopExStartPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCShopExStartPacket::IsInitialized() const {
  return true;
}

void GCShopExStartPacket::InternalSwap(GCShopExStartPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.tabs_.InternalSwap(&other->_impl_.tabs_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GCShopExStartPacket, _impl_.max_limit_)
      + sizeof(GCShopExStartPacket::_impl_.max_limit_)
      - PROTOBUF_FIELD_OFFSET(GCShopExStartPacket, _impl_.vid_)>(
          reinterpret_cast<char*>(&_impl_.vid_),
          reinterpret_cast<char*>(&other->_impl_.vid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GCShopExStartPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[152]);
}

// ===================================================================

class GCShopUpdateItemPacket::_Internal {
 public:
  static const ::network::TShopItemTable& item(const GCShopUpdateItemPacket* msg);
};

const ::network::TShopItemTable&
GCShopUpdateItemPacket::_Internal::item(const GCShopUpdateItemPacket* msg) {
  return *msg->_impl_.item_;
}
void GCShopUpdateItemPacket::clear_item() {
  if (GetArenaForAllocation() == nullptr && _impl_.item_ != nullptr) {
    delete _impl_.item_;
  }
  _impl_.item_ = nullptr;
}
GCShopUpdateItemPacket::GCShopUpdateItemPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCShopUpdateItemPacket)
}
GCShopUpdateItemPacket::GCShopUpdateItemPacket(const GCShopUpdateItemPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCShopUpdateItemPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.item_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_item()) {
    _this->_impl_.item_ = new ::network::TShopItemTable(*from._impl_.item_);
  }
  // @@protoc_insertion_point(copy_constructor:network.GCShopUpdateItemPacket)
}

inline void GCShopUpdateItemPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.item_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCShopUpdateItemPacket::~GCShopUpdateItemPacket() {
  // @@protoc_insertion_point(destructor:network.GCShopUpdateItemPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCShopUpdateItemPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.item_;
}

void GCShopUpdateItemPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCShopUpdateItemPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCShopUpdateItemPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.item_ != nullptr) {
    delete _impl_.item_;
  }
  _impl_.item_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCShopUpdateItemPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .network.TShopItemTable item = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_item(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCShopUpdateItemPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCShopUpdateItemPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .network.TShopItemTable item = 1;
  if (this->_internal_has_item()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::item(this),
        _Internal::item(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCShopUpdateItemPacket)
  return target;
}

size_t GCShopUpdateItemPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCShopUpdateItemPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .network.TShopItemTable item = 1;
  if (this->_internal_has_item()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.item_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCShopUpdateItemPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCShopUpdateItemPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCShopUpdateItemPacket::GetClassData() const { return &_class_data_; }


void GCShopUpdateItemPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCShopUpdateItemPacket*>(&to_msg);
  auto& from = static_cast<const GCShopUpdateItemPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCShopUpdateItemPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_item()) {
    _this->_internal_mutable_item()->::network::TShopItemTable::MergeFrom(
        from._internal_item());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCShopUpdateItemPacket::CopyFrom(const GCShopUpdateItemPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCShopUpdateItemPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCShopUpdateItemPacket::IsInitialized() const {
  return true;
}

void GCShopUpdateItemPacket::InternalSwap(GCShopUpdateItemPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.item_, other->_impl_.item_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GCShopUpdateItemPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[153]);
}

// ===================================================================

class GCShopSignPacket::_Internal {
 public:
};

GCShopSignPacket::GCShopSignPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCShopSignPacket)
}
GCShopSignPacket::GCShopSignPacket(const GCShopSignPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCShopSignPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sign_){}
    , decltype(_impl_.vid_){}
    , decltype(_impl_.red_){}
    , decltype(_impl_.green_){}
    , decltype(_impl_.blue_){}
    , decltype(_impl_.style_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sign_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sign_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sign().empty()) {
    _this->_impl_.sign_.Set(from._internal_sign(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.vid_, &from._impl_.vid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.style_) -
    reinterpret_cast<char*>(&_impl_.vid_)) + sizeof(_impl_.style_));
  // @@protoc_insertion_point(copy_constructor:network.GCShopSignPacket)
}

inline void GCShopSignPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.sign_){}
    , decltype(_impl_.vid_){0u}
    , decltype(_impl_.red_){0}
    , decltype(_impl_.green_){0}
    , decltype(_impl_.blue_){0}
    , decltype(_impl_.style_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.sign_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sign_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GCShopSignPacket::~GCShopSignPacket() {
  // @@protoc_insertion_point(destructor:network.GCShopSignPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCShopSignPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sign_.Destroy();
}

void GCShopSignPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCShopSignPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCShopSignPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sign_.ClearToEmpty();
  ::memset(&_impl_.vid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.style_) -
      reinterpret_cast<char*>(&_impl_.vid_)) + sizeof(_impl_.style_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCShopSignPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 vid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.vid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes sign = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_sign();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float red = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.red_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float green = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.green_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float blue = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.blue_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // uint32 style = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.style_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCShopSignPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCShopSignPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 vid = 1;
  if (this->_internal_vid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_vid(), target);
  }

  // bytes sign = 2;
  if (!this->_internal_sign().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_sign(), target);
  }

  // float red = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_red = this->_internal_red();
  uint32_t raw_red;
  memcpy(&raw_red, &tmp_red, sizeof(tmp_red));
  if (raw_red != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_red(), target);
  }

  // float green = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_green = this->_internal_green();
  uint32_t raw_green;
  memcpy(&raw_green, &tmp_green, sizeof(tmp_green));
  if (raw_green != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_green(), target);
  }

  // float blue = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_blue = this->_internal_blue();
  uint32_t raw_blue;
  memcpy(&raw_blue, &tmp_blue, sizeof(tmp_blue));
  if (raw_blue != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_blue(), target);
  }

  // uint32 style = 6;
  if (this->_internal_style() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_style(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCShopSignPacket)
  return target;
}

size_t GCShopSignPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCShopSignPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes sign = 2;
  if (!this->_internal_sign().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sign());
  }

  // uint32 vid = 1;
  if (this->_internal_vid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_vid());
  }

  // float red = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_red = this->_internal_red();
  uint32_t raw_red;
  memcpy(&raw_red, &tmp_red, sizeof(tmp_red));
  if (raw_red != 0) {
    total_size += 1 + 4;
  }

  // float green = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_green = this->_internal_green();
  uint32_t raw_green;
  memcpy(&raw_green, &tmp_green, sizeof(tmp_green));
  if (raw_green != 0) {
    total_size += 1 + 4;
  }

  // float blue = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_blue = this->_internal_blue();
  uint32_t raw_blue;
  memcpy(&raw_blue, &tmp_blue, sizeof(tmp_blue));
  if (raw_blue != 0) {
    total_size += 1 + 4;
  }

  // uint32 style = 6;
  if (this->_internal_style() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_style());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCShopSignPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCShopSignPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCShopSignPacket::GetClassData() const { return &_class_data_; }


void GCShopSignPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCShopSignPacket*>(&to_msg);
  auto& from = static_cast<const GCShopSignPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCShopSignPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sign().empty()) {
    _this->_internal_set_sign(from._internal_sign());
  }
  if (from._internal_vid() != 0) {
    _this->_internal_set_vid(from._internal_vid());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_red = from._internal_red();
  uint32_t raw_red;
  memcpy(&raw_red, &tmp_red, sizeof(tmp_red));
  if (raw_red != 0) {
    _this->_internal_set_red(from._internal_red());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_green = from._internal_green();
  uint32_t raw_green;
  memcpy(&raw_green, &tmp_green, sizeof(tmp_green));
  if (raw_green != 0) {
    _this->_internal_set_green(from._internal_green());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_blue = from._internal_blue();
  uint32_t raw_blue;
  memcpy(&raw_blue, &tmp_blue, sizeof(tmp_blue));
  if (raw_blue != 0) {
    _this->_internal_set_blue(from._internal_blue());
  }
  if (from._internal_style() != 0) {
    _this->_internal_set_style(from._internal_style());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCShopSignPacket::CopyFrom(const GCShopSignPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCShopSignPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCShopSignPacket::IsInitialized() const {
  return true;
}

void GCShopSignPacket::InternalSwap(GCShopSignPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sign_, lhs_arena,
      &other->_impl_.sign_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GCShopSignPacket, _impl_.style_)
      + sizeof(GCShopSignPacket::_impl_.style_)
      - PROTOBUF_FIELD_OFFSET(GCShopSignPacket, _impl_.vid_)>(
          reinterpret_cast<char*>(&_impl_.vid_),
          reinterpret_cast<char*>(&other->_impl_.vid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GCShopSignPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[154]);
}

// ===================================================================

class GCQuestInfoPacket::_Internal {
 public:
};

GCQuestInfoPacket::GCQuestInfoPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCQuestInfoPacket)
}
GCQuestInfoPacket::GCQuestInfoPacket(const GCQuestInfoPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCQuestInfoPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.title_){}
    , decltype(_impl_.clock_name_){}
    , decltype(_impl_.counter_name_){}
    , decltype(_impl_.icon_file_name_){}
    , decltype(_impl_.index_){}
    , decltype(_impl_.flag_){}
    , decltype(_impl_.is_begin_){}
    , decltype(_impl_.cat_id_){}
    , decltype(_impl_.clock_value_){}
    , decltype(_impl_.counter_value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    _this->_impl_.title_.Set(from._internal_title(), 
      _this->GetArenaForAllocation());
  }
  _impl_.clock_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clock_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_clock_name().empty()) {
    _this->_impl_.clock_name_.Set(from._internal_clock_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.counter_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.counter_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_counter_name().empty()) {
    _this->_impl_.counter_name_.Set(from._internal_counter_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.icon_file_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.icon_file_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_icon_file_name().empty()) {
    _this->_impl_.icon_file_name_.Set(from._internal_icon_file_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.index_, &from._impl_.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.counter_value_) -
    reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.counter_value_));
  // @@protoc_insertion_point(copy_constructor:network.GCQuestInfoPacket)
}

inline void GCQuestInfoPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.title_){}
    , decltype(_impl_.clock_name_){}
    , decltype(_impl_.counter_name_){}
    , decltype(_impl_.icon_file_name_){}
    , decltype(_impl_.index_){0u}
    , decltype(_impl_.flag_){0u}
    , decltype(_impl_.is_begin_){false}
    , decltype(_impl_.cat_id_){0u}
    , decltype(_impl_.clock_value_){0}
    , decltype(_impl_.counter_value_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.clock_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clock_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.counter_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.counter_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.icon_file_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.icon_file_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GCQuestInfoPacket::~GCQuestInfoPacket() {
  // @@protoc_insertion_point(destructor:network.GCQuestInfoPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCQuestInfoPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.title_.Destroy();
  _impl_.clock_name_.Destroy();
  _impl_.counter_name_.Destroy();
  _impl_.icon_file_name_.Destroy();
}

void GCQuestInfoPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCQuestInfoPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCQuestInfoPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.title_.ClearToEmpty();
  _impl_.clock_name_.ClearToEmpty();
  _impl_.counter_name_.ClearToEmpty();
  _impl_.icon_file_name_.ClearToEmpty();
  ::memset(&_impl_.index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.counter_value_) -
      reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.counter_value_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCQuestInfoPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 flag = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_begin = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.is_begin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes title = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 cat_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.cat_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes clock_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_clock_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 clock_value = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.clock_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes counter_name = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_counter_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 counter_value = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.counter_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes icon_file_name = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_icon_file_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCQuestInfoPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCQuestInfoPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 index = 1;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_index(), target);
  }

  // uint32 flag = 2;
  if (this->_internal_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_flag(), target);
  }

  // bool is_begin = 3;
  if (this->_internal_is_begin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_is_begin(), target);
  }

  // bytes title = 4;
  if (!this->_internal_title().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_title(), target);
  }

  // uint32 cat_id = 5;
  if (this->_internal_cat_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_cat_id(), target);
  }

  // bytes clock_name = 6;
  if (!this->_internal_clock_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_clock_name(), target);
  }

  // int32 clock_value = 7;
  if (this->_internal_clock_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_clock_value(), target);
  }

  // bytes counter_name = 8;
  if (!this->_internal_counter_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_counter_name(), target);
  }

  // int32 counter_value = 9;
  if (this->_internal_counter_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_counter_value(), target);
  }

  // bytes icon_file_name = 10;
  if (!this->_internal_icon_file_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        10, this->_internal_icon_file_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCQuestInfoPacket)
  return target;
}

size_t GCQuestInfoPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCQuestInfoPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes title = 4;
  if (!this->_internal_title().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_title());
  }

  // bytes clock_name = 6;
  if (!this->_internal_clock_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_clock_name());
  }

  // bytes counter_name = 8;
  if (!this->_internal_counter_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_counter_name());
  }

  // bytes icon_file_name = 10;
  if (!this->_internal_icon_file_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_icon_file_name());
  }

  // uint32 index = 1;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_index());
  }

  // uint32 flag = 2;
  if (this->_internal_flag() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_flag());
  }

  // bool is_begin = 3;
  if (this->_internal_is_begin() != 0) {
    total_size += 1 + 1;
  }

  // uint32 cat_id = 5;
  if (this->_internal_cat_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_cat_id());
  }

  // int32 clock_value = 7;
  if (this->_internal_clock_value() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_clock_value());
  }

  // int32 counter_value = 9;
  if (this->_internal_counter_value() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_counter_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCQuestInfoPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCQuestInfoPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCQuestInfoPacket::GetClassData() const { return &_class_data_; }


void GCQuestInfoPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCQuestInfoPacket*>(&to_msg);
  auto& from = static_cast<const GCQuestInfoPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCQuestInfoPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  if (!from._internal_clock_name().empty()) {
    _this->_internal_set_clock_name(from._internal_clock_name());
  }
  if (!from._internal_counter_name().empty()) {
    _this->_internal_set_counter_name(from._internal_counter_name());
  }
  if (!from._internal_icon_file_name().empty()) {
    _this->_internal_set_icon_file_name(from._internal_icon_file_name());
  }
  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  if (from._internal_flag() != 0) {
    _this->_internal_set_flag(from._internal_flag());
  }
  if (from._internal_is_begin() != 0) {
    _this->_internal_set_is_begin(from._internal_is_begin());
  }
  if (from._internal_cat_id() != 0) {
    _this->_internal_set_cat_id(from._internal_cat_id());
  }
  if (from._internal_clock_value() != 0) {
    _this->_internal_set_clock_value(from._internal_clock_value());
  }
  if (from._internal_counter_value() != 0) {
    _this->_internal_set_counter_value(from._internal_counter_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCQuestInfoPacket::CopyFrom(const GCQuestInfoPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCQuestInfoPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCQuestInfoPacket::IsInitialized() const {
  return true;
}

void GCQuestInfoPacket::InternalSwap(GCQuestInfoPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.title_, lhs_arena,
      &other->_impl_.title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.clock_name_, lhs_arena,
      &other->_impl_.clock_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.counter_name_, lhs_arena,
      &other->_impl_.counter_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.icon_file_name_, lhs_arena,
      &other->_impl_.icon_file_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GCQuestInfoPacket, _impl_.counter_value_)
      + sizeof(GCQuestInfoPacket::_impl_.counter_value_)
      - PROTOBUF_FIELD_OFFSET(GCQuestInfoPacket, _impl_.index_)>(
          reinterpret_cast<char*>(&_impl_.index_),
          reinterpret_cast<char*>(&other->_impl_.index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GCQuestInfoPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[155]);
}

// ===================================================================

class GCScriptPacket::_Internal {
 public:
};

GCScriptPacket::GCScriptPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCScriptPacket)
}
GCScriptPacket::GCScriptPacket(const GCScriptPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCScriptPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.script_){}
    , decltype(_impl_.skin_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.script_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.script_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_script().empty()) {
    _this->_impl_.script_.Set(from._internal_script(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.skin_ = from._impl_.skin_;
  // @@protoc_insertion_point(copy_constructor:network.GCScriptPacket)
}

inline void GCScriptPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.script_){}
    , decltype(_impl_.skin_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.script_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.script_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GCScriptPacket::~GCScriptPacket() {
  // @@protoc_insertion_point(destructor:network.GCScriptPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCScriptPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.script_.Destroy();
}

void GCScriptPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCScriptPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCScriptPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.script_.ClearToEmpty();
  _impl_.skin_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCScriptPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 skin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.skin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes script = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_script();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCScriptPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCScriptPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 skin = 1;
  if (this->_internal_skin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_skin(), target);
  }

  // bytes script = 2;
  if (!this->_internal_script().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_script(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCScriptPacket)
  return target;
}

size_t GCScriptPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCScriptPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes script = 2;
  if (!this->_internal_script().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_script());
  }

  // uint32 skin = 1;
  if (this->_internal_skin() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_skin());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCScriptPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCScriptPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCScriptPacket::GetClassData() const { return &_class_data_; }


void GCScriptPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCScriptPacket*>(&to_msg);
  auto& from = static_cast<const GCScriptPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCScriptPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_script().empty()) {
    _this->_internal_set_script(from._internal_script());
  }
  if (from._internal_skin() != 0) {
    _this->_internal_set_skin(from._internal_skin());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCScriptPacket::CopyFrom(const GCScriptPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCScriptPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCScriptPacket::IsInitialized() const {
  return true;
}

void GCScriptPacket::InternalSwap(GCScriptPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.script_, lhs_arena,
      &other->_impl_.script_, rhs_arena
  );
  swap(_impl_.skin_, other->_impl_.skin_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GCScriptPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[156]);
}

// ===================================================================

class GCQuestConfirmPacket::_Internal {
 public:
};

GCQuestConfirmPacket::GCQuestConfirmPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCQuestConfirmPacket)
}
GCQuestConfirmPacket::GCQuestConfirmPacket(const GCQuestConfirmPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCQuestConfirmPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.timeout_){}
    , decltype(_impl_.request_pid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.timeout_, &from._impl_.timeout_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.request_pid_) -
    reinterpret_cast<char*>(&_impl_.timeout_)) + sizeof(_impl_.request_pid_));
  // @@protoc_insertion_point(copy_constructor:network.GCQuestConfirmPacket)
}

inline void GCQuestConfirmPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.timeout_){0}
    , decltype(_impl_.request_pid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GCQuestConfirmPacket::~GCQuestConfirmPacket() {
  // @@protoc_insertion_point(destructor:network.GCQuestConfirmPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCQuestConfirmPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
}

void GCQuestConfirmPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCQuestConfirmPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCQuestConfirmPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  ::memset(&_impl_.timeout_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.request_pid_) -
      reinterpret_cast<char*>(&_impl_.timeout_)) + sizeof(_impl_.request_pid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCQuestConfirmPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 timeout = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 request_pid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.request_pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCQuestConfirmPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCQuestConfirmPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes message = 1;
  if (!this->_internal_message().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_message(), target);
  }

  // int32 timeout = 2;
  if (this->_internal_timeout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_timeout(), target);
  }

  // uint32 request_pid = 3;
  if (this->_internal_request_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_request_pid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCQuestConfirmPacket)
  return target;
}

size_t GCQuestConfirmPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCQuestConfirmPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes message = 1;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_message());
  }

  // int32 timeout = 2;
  if (this->_internal_timeout() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_timeout());
  }

  // uint32 request_pid = 3;
  if (this->_internal_request_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_request_pid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCQuestConfirmPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCQuestConfirmPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCQuestConfirmPacket::GetClassData() const { return &_class_data_; }


void GCQuestConfirmPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCQuestConfirmPacket*>(&to_msg);
  auto& from = static_cast<const GCQuestConfirmPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCQuestConfirmPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_timeout() != 0) {
    _this->_internal_set_timeout(from._internal_timeout());
  }
  if (from._internal_request_pid() != 0) {
    _this->_internal_set_request_pid(from._internal_request_pid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCQuestConfirmPacket::CopyFrom(const GCQuestConfirmPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCQuestConfirmPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCQuestConfirmPacket::IsInitialized() const {
  return true;
}

void GCQuestConfirmPacket::InternalSwap(GCQuestConfirmPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GCQuestConfirmPacket, _impl_.request_pid_)
      + sizeof(GCQuestConfirmPacket::_impl_.request_pid_)
      - PROTOBUF_FIELD_OFFSET(GCQuestConfirmPacket, _impl_.timeout_)>(
          reinterpret_cast<char*>(&_impl_.timeout_),
          reinterpret_cast<char*>(&other->_impl_.timeout_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GCQuestConfirmPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[157]);
}

// ===================================================================

class GCQuestCooldownPacket_Cooldown::_Internal {
 public:
};

GCQuestCooldownPacket_Cooldown::GCQuestCooldownPacket_Cooldown(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCQuestCooldownPacket.Cooldown)
}
GCQuestCooldownPacket_Cooldown::GCQuestCooldownPacket_Cooldown(const GCQuestCooldownPacket_Cooldown& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCQuestCooldownPacket_Cooldown* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.cooldown_){}
    , decltype(_impl_.done_){}
    , decltype(_impl_.time_){}
    , decltype(_impl_.damage_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.cooldown_, &from._impl_.cooldown_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.damage_) -
    reinterpret_cast<char*>(&_impl_.cooldown_)) + sizeof(_impl_.damage_));
  // @@protoc_insertion_point(copy_constructor:network.GCQuestCooldownPacket.Cooldown)
}

inline void GCQuestCooldownPacket_Cooldown::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.cooldown_){0}
    , decltype(_impl_.done_){0}
    , decltype(_impl_.time_){0}
    , decltype(_impl_.damage_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GCQuestCooldownPacket_Cooldown::~GCQuestCooldownPacket_Cooldown() {
  // @@protoc_insertion_point(destructor:network.GCQuestCooldownPacket.Cooldown)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCQuestCooldownPacket_Cooldown::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void GCQuestCooldownPacket_Cooldown::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCQuestCooldownPacket_Cooldown::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCQuestCooldownPacket.Cooldown)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  ::memset(&_impl_.cooldown_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.damage_) -
      reinterpret_cast<char*>(&_impl_.cooldown_)) + sizeof(_impl_.damage_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCQuestCooldownPacket_Cooldown::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 cooldown = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.cooldown_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 done = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.done_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 damage = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.damage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCQuestCooldownPacket_Cooldown::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCQuestCooldownPacket.Cooldown)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 cooldown = 1;
  if (this->_internal_cooldown() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_cooldown(), target);
  }

  // int32 done = 2;
  if (this->_internal_done() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_done(), target);
  }

  // int32 time = 3;
  if (this->_internal_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_time(), target);
  }

  // int32 damage = 4;
  if (this->_internal_damage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_damage(), target);
  }

  // bytes name = 5;
  if (!this->_internal_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCQuestCooldownPacket.Cooldown)
  return target;
}

size_t GCQuestCooldownPacket_Cooldown::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCQuestCooldownPacket.Cooldown)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 5;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // int32 cooldown = 1;
  if (this->_internal_cooldown() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_cooldown());
  }

  // int32 done = 2;
  if (this->_internal_done() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_done());
  }

  // int32 time = 3;
  if (this->_internal_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_time());
  }

  // int32 damage = 4;
  if (this->_internal_damage() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_damage());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCQuestCooldownPacket_Cooldown::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCQuestCooldownPacket_Cooldown::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCQuestCooldownPacket_Cooldown::GetClassData() const { return &_class_data_; }


void GCQuestCooldownPacket_Cooldown::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCQuestCooldownPacket_Cooldown*>(&to_msg);
  auto& from = static_cast<const GCQuestCooldownPacket_Cooldown&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCQuestCooldownPacket.Cooldown)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_cooldown() != 0) {
    _this->_internal_set_cooldown(from._internal_cooldown());
  }
  if (from._internal_done() != 0) {
    _this->_internal_set_done(from._internal_done());
  }
  if (from._internal_time() != 0) {
    _this->_internal_set_time(from._internal_time());
  }
  if (from._internal_damage() != 0) {
    _this->_internal_set_damage(from._internal_damage());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCQuestCooldownPacket_Cooldown::CopyFrom(const GCQuestCooldownPacket_Cooldown& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCQuestCooldownPacket.Cooldown)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCQuestCooldownPacket_Cooldown::IsInitialized() const {
  return true;
}

void GCQuestCooldownPacket_Cooldown::InternalSwap(GCQuestCooldownPacket_Cooldown* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GCQuestCooldownPacket_Cooldown, _impl_.damage_)
      + sizeof(GCQuestCooldownPacket_Cooldown::_impl_.damage_)
      - PROTOBUF_FIELD_OFFSET(GCQuestCooldownPacket_Cooldown, _impl_.cooldown_)>(
          reinterpret_cast<char*>(&_impl_.cooldown_),
          reinterpret_cast<char*>(&other->_impl_.cooldown_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GCQuestCooldownPacket_Cooldown::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[158]);
}

// ===================================================================

class GCQuestCooldownPacket::_Internal {
 public:
};

GCQuestCooldownPacket::GCQuestCooldownPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCQuestCooldownPacket)
}
GCQuestCooldownPacket::GCQuestCooldownPacket(const GCQuestCooldownPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCQuestCooldownPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.datas_){from._impl_.datas_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:network.GCQuestCooldownPacket)
}

inline void GCQuestCooldownPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.datas_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCQuestCooldownPacket::~GCQuestCooldownPacket() {
  // @@protoc_insertion_point(destructor:network.GCQuestCooldownPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCQuestCooldownPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.datas_.~RepeatedPtrField();
}

void GCQuestCooldownPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCQuestCooldownPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCQuestCooldownPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.datas_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCQuestCooldownPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .network.GCQuestCooldownPacket.Cooldown datas = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_datas(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCQuestCooldownPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCQuestCooldownPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .network.GCQuestCooldownPacket.Cooldown datas = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_datas_size()); i < n; i++) {
    const auto& repfield = this->_internal_datas(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCQuestCooldownPacket)
  return target;
}

size_t GCQuestCooldownPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCQuestCooldownPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .network.GCQuestCooldownPacket.Cooldown datas = 1;
  total_size += 1UL * this->_internal_datas_size();
  for (const auto& msg : this->_impl_.datas_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCQuestCooldownPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCQuestCooldownPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCQuestCooldownPacket::GetClassData() const { return &_class_data_; }


void GCQuestCooldownPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCQuestCooldownPacket*>(&to_msg);
  auto& from = static_cast<const GCQuestCooldownPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCQuestCooldownPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.datas_.MergeFrom(from._impl_.datas_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCQuestCooldownPacket::CopyFrom(const GCQuestCooldownPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCQuestCooldownPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCQuestCooldownPacket::IsInitialized() const {
  return true;
}

void GCQuestCooldownPacket::InternalSwap(GCQuestCooldownPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.datas_.InternalSwap(&other->_impl_.datas_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GCQuestCooldownPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[159]);
}

// ===================================================================

class GCPetSummonPacket::_Internal {
 public:
  static const ::network::TPetAdvancedTable& pet(const GCPetSummonPacket* msg);
};

const ::network::TPetAdvancedTable&
GCPetSummonPacket::_Internal::pet(const GCPetSummonPacket* msg) {
  return *msg->_impl_.pet_;
}
void GCPetSummonPacket::clear_pet() {
  if (GetArenaForAllocation() == nullptr && _impl_.pet_ != nullptr) {
    delete _impl_.pet_;
  }
  _impl_.pet_ = nullptr;
}
GCPetSummonPacket::GCPetSummonPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCPetSummonPacket)
}
GCPetSummonPacket::GCPetSummonPacket(const GCPetSummonPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCPetSummonPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pet_){nullptr}
    , decltype(_impl_.vid_){}
    , decltype(_impl_.item_vnum_){}
    , decltype(_impl_.next_exp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pet()) {
    _this->_impl_.pet_ = new ::network::TPetAdvancedTable(*from._impl_.pet_);
  }
  ::memcpy(&_impl_.vid_, &from._impl_.vid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.next_exp_) -
    reinterpret_cast<char*>(&_impl_.vid_)) + sizeof(_impl_.next_exp_));
  // @@protoc_insertion_point(copy_constructor:network.GCPetSummonPacket)
}

inline void GCPetSummonPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pet_){nullptr}
    , decltype(_impl_.vid_){0u}
    , decltype(_impl_.item_vnum_){0u}
    , decltype(_impl_.next_exp_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCPetSummonPacket::~GCPetSummonPacket() {
  // @@protoc_insertion_point(destructor:network.GCPetSummonPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCPetSummonPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.pet_;
}

void GCPetSummonPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCPetSummonPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCPetSummonPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.pet_ != nullptr) {
    delete _impl_.pet_;
  }
  _impl_.pet_ = nullptr;
  ::memset(&_impl_.vid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.next_exp_) -
      reinterpret_cast<char*>(&_impl_.vid_)) + sizeof(_impl_.next_exp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCPetSummonPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 vid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.vid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 item_vnum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.item_vnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .network.TPetAdvancedTable pet = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pet(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 next_exp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.next_exp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCPetSummonPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCPetSummonPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 vid = 1;
  if (this->_internal_vid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_vid(), target);
  }

  // uint32 item_vnum = 2;
  if (this->_internal_item_vnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_item_vnum(), target);
  }

  // .network.TPetAdvancedTable pet = 3;
  if (this->_internal_has_pet()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::pet(this),
        _Internal::pet(this).GetCachedSize(), target, stream);
  }

  // int64 next_exp = 4;
  if (this->_internal_next_exp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_next_exp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCPetSummonPacket)
  return target;
}

size_t GCPetSummonPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCPetSummonPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .network.TPetAdvancedTable pet = 3;
  if (this->_internal_has_pet()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pet_);
  }

  // uint32 vid = 1;
  if (this->_internal_vid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_vid());
  }

  // uint32 item_vnum = 2;
  if (this->_internal_item_vnum() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_item_vnum());
  }

  // int64 next_exp = 4;
  if (this->_internal_next_exp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_next_exp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCPetSummonPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCPetSummonPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCPetSummonPacket::GetClassData() const { return &_class_data_; }


void GCPetSummonPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCPetSummonPacket*>(&to_msg);
  auto& from = static_cast<const GCPetSummonPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCPetSummonPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_pet()) {
    _this->_internal_mutable_pet()->::network::TPetAdvancedTable::MergeFrom(
        from._internal_pet());
  }
  if (from._internal_vid() != 0) {
    _this->_internal_set_vid(from._internal_vid());
  }
  if (from._internal_item_vnum() != 0) {
    _this->_internal_set_item_vnum(from._internal_item_vnum());
  }
  if (from._internal_next_exp() != 0) {
    _this->_internal_set_next_exp(from._internal_next_exp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCPetSummonPacket::CopyFrom(const GCPetSummonPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCPetSummonPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCPetSummonPacket::IsInitialized() const {
  return true;
}

void GCPetSummonPacket::InternalSwap(GCPetSummonPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GCPetSummonPacket, _impl_.next_exp_)
      + sizeof(GCPetSummonPacket::_impl_.next_exp_)
      - PROTOBUF_FIELD_OFFSET(GCPetSummonPacket, _impl_.pet_)>(
          reinterpret_cast<char*>(&_impl_.pet_),
          reinterpret_cast<char*>(&other->_impl_.pet_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GCPetSummonPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[160]);
}

// ===================================================================

class GCPetUpdateExpPacket::_Internal {
 public:
};

GCPetUpdateExpPacket::GCPetUpdateExpPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCPetUpdateExpPacket)
}
GCPetUpdateExpPacket::GCPetUpdateExpPacket(const GCPetUpdateExpPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCPetUpdateExpPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.exp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.exp_ = from._impl_.exp_;
  // @@protoc_insertion_point(copy_constructor:network.GCPetUpdateExpPacket)
}

inline void GCPetUpdateExpPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.exp_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCPetUpdateExpPacket::~GCPetUpdateExpPacket() {
  // @@protoc_insertion_point(destructor:network.GCPetUpdateExpPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCPetUpdateExpPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GCPetUpdateExpPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCPetUpdateExpPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCPetUpdateExpPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.exp_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCPetUpdateExpPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 exp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.exp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCPetUpdateExpPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCPetUpdateExpPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 exp = 1;
  if (this->_internal_exp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_exp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCPetUpdateExpPacket)
  return target;
}

size_t GCPetUpdateExpPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCPetUpdateExpPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 exp = 1;
  if (this->_internal_exp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_exp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCPetUpdateExpPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCPetUpdateExpPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCPetUpdateExpPacket::GetClassData() const { return &_class_data_; }


void GCPetUpdateExpPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCPetUpdateExpPacket*>(&to_msg);
  auto& from = static_cast<const GCPetUpdateExpPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCPetUpdateExpPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_exp() != 0) {
    _this->_internal_set_exp(from._internal_exp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCPetUpdateExpPacket::CopyFrom(const GCPetUpdateExpPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCPetUpdateExpPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCPetUpdateExpPacket::IsInitialized() const {
  return true;
}

void GCPetUpdateExpPacket::InternalSwap(GCPetUpdateExpPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.exp_, other->_impl_.exp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GCPetUpdateExpPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[161]);
}

// ===================================================================

class GCPetUpdateLevelPacket::_Internal {
 public:
};

GCPetUpdateLevelPacket::GCPetUpdateLevelPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCPetUpdateLevelPacket)
}
GCPetUpdateLevelPacket::GCPetUpdateLevelPacket(const GCPetUpdateLevelPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCPetUpdateLevelPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.next_exp_){}
    , decltype(_impl_.level_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.next_exp_, &from._impl_.next_exp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.level_) -
    reinterpret_cast<char*>(&_impl_.next_exp_)) + sizeof(_impl_.level_));
  // @@protoc_insertion_point(copy_constructor:network.GCPetUpdateLevelPacket)
}

inline void GCPetUpdateLevelPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.next_exp_){int64_t{0}}
    , decltype(_impl_.level_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCPetUpdateLevelPacket::~GCPetUpdateLevelPacket() {
  // @@protoc_insertion_point(destructor:network.GCPetUpdateLevelPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCPetUpdateLevelPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GCPetUpdateLevelPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCPetUpdateLevelPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCPetUpdateLevelPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.next_exp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.level_) -
      reinterpret_cast<char*>(&_impl_.next_exp_)) + sizeof(_impl_.level_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCPetUpdateLevelPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 next_exp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.next_exp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCPetUpdateLevelPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCPetUpdateLevelPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 level = 1;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_level(), target);
  }

  // int64 next_exp = 2;
  if (this->_internal_next_exp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_next_exp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCPetUpdateLevelPacket)
  return target;
}

size_t GCPetUpdateLevelPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCPetUpdateLevelPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 next_exp = 2;
  if (this->_internal_next_exp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_next_exp());
  }

  // uint32 level = 1;
  if (this->_internal_level() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_level());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCPetUpdateLevelPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCPetUpdateLevelPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCPetUpdateLevelPacket::GetClassData() const { return &_class_data_; }


void GCPetUpdateLevelPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCPetUpdateLevelPacket*>(&to_msg);
  auto& from = static_cast<const GCPetUpdateLevelPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCPetUpdateLevelPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_next_exp() != 0) {
    _this->_internal_set_next_exp(from._internal_next_exp());
  }
  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCPetUpdateLevelPacket::CopyFrom(const GCPetUpdateLevelPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCPetUpdateLevelPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCPetUpdateLevelPacket::IsInitialized() const {
  return true;
}

void GCPetUpdateLevelPacket::InternalSwap(GCPetUpdateLevelPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GCPetUpdateLevelPacket, _impl_.level_)
      + sizeof(GCPetUpdateLevelPacket::_impl_.level_)
      - PROTOBUF_FIELD_OFFSET(GCPetUpdateLevelPacket, _impl_.next_exp_)>(
          reinterpret_cast<char*>(&_impl_.next_exp_),
          reinterpret_cast<char*>(&other->_impl_.next_exp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GCPetUpdateLevelPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[162]);
}

// ===================================================================

class GCPetUpdateSkillPacket::_Internal {
 public:
  static const ::network::TPetAdvancedSkillData& skill(const GCPetUpdateSkillPacket* msg);
};

const ::network::TPetAdvancedSkillData&
GCPetUpdateSkillPacket::_Internal::skill(const GCPetUpdateSkillPacket* msg) {
  return *msg->_impl_.skill_;
}
void GCPetUpdateSkillPacket::clear_skill() {
  if (GetArenaForAllocation() == nullptr && _impl_.skill_ != nullptr) {
    delete _impl_.skill_;
  }
  _impl_.skill_ = nullptr;
}
GCPetUpdateSkillPacket::GCPetUpdateSkillPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCPetUpdateSkillPacket)
}
GCPetUpdateSkillPacket::GCPetUpdateSkillPacket(const GCPetUpdateSkillPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCPetUpdateSkillPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.skill_){nullptr}
    , decltype(_impl_.index_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_skill()) {
    _this->_impl_.skill_ = new ::network::TPetAdvancedSkillData(*from._impl_.skill_);
  }
  _this->_impl_.index_ = from._impl_.index_;
  // @@protoc_insertion_point(copy_constructor:network.GCPetUpdateSkillPacket)
}

inline void GCPetUpdateSkillPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.skill_){nullptr}
    , decltype(_impl_.index_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCPetUpdateSkillPacket::~GCPetUpdateSkillPacket() {
  // @@protoc_insertion_point(destructor:network.GCPetUpdateSkillPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCPetUpdateSkillPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.skill_;
}

void GCPetUpdateSkillPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCPetUpdateSkillPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCPetUpdateSkillPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.skill_ != nullptr) {
    delete _impl_.skill_;
  }
  _impl_.skill_ = nullptr;
  _impl_.index_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCPetUpdateSkillPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .network.TPetAdvancedSkillData skill = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_skill(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCPetUpdateSkillPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCPetUpdateSkillPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 index = 1;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_index(), target);
  }

  // .network.TPetAdvancedSkillData skill = 2;
  if (this->_internal_has_skill()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::skill(this),
        _Internal::skill(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCPetUpdateSkillPacket)
  return target;
}

size_t GCPetUpdateSkillPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCPetUpdateSkillPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .network.TPetAdvancedSkillData skill = 2;
  if (this->_internal_has_skill()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.skill_);
  }

  // uint32 index = 1;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCPetUpdateSkillPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCPetUpdateSkillPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCPetUpdateSkillPacket::GetClassData() const { return &_class_data_; }


void GCPetUpdateSkillPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCPetUpdateSkillPacket*>(&to_msg);
  auto& from = static_cast<const GCPetUpdateSkillPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCPetUpdateSkillPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_skill()) {
    _this->_internal_mutable_skill()->::network::TPetAdvancedSkillData::MergeFrom(
        from._internal_skill());
  }
  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCPetUpdateSkillPacket::CopyFrom(const GCPetUpdateSkillPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCPetUpdateSkillPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCPetUpdateSkillPacket::IsInitialized() const {
  return true;
}

void GCPetUpdateSkillPacket::InternalSwap(GCPetUpdateSkillPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GCPetUpdateSkillPacket, _impl_.index_)
      + sizeof(GCPetUpdateSkillPacket::_impl_.index_)
      - PROTOBUF_FIELD_OFFSET(GCPetUpdateSkillPacket, _impl_.skill_)>(
          reinterpret_cast<char*>(&_impl_.skill_),
          reinterpret_cast<char*>(&other->_impl_.skill_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GCPetUpdateSkillPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[163]);
}

// ===================================================================

class GCPetUpdateAttrPacket::_Internal {
 public:
};

GCPetUpdateAttrPacket::GCPetUpdateAttrPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCPetUpdateAttrPacket)
}
GCPetUpdateAttrPacket::GCPetUpdateAttrPacket(const GCPetUpdateAttrPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCPetUpdateAttrPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.index_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.level_){}
    , decltype(_impl_.value_){}
    , decltype(_impl_.can_upgrade_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.index_, &from._impl_.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.can_upgrade_) -
    reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.can_upgrade_));
  // @@protoc_insertion_point(copy_constructor:network.GCPetUpdateAttrPacket)
}

inline void GCPetUpdateAttrPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.index_){0u}
    , decltype(_impl_.type_){0u}
    , decltype(_impl_.level_){0u}
    , decltype(_impl_.value_){0}
    , decltype(_impl_.can_upgrade_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCPetUpdateAttrPacket::~GCPetUpdateAttrPacket() {
  // @@protoc_insertion_point(destructor:network.GCPetUpdateAttrPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCPetUpdateAttrPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GCPetUpdateAttrPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCPetUpdateAttrPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCPetUpdateAttrPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.can_upgrade_) -
      reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.can_upgrade_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCPetUpdateAttrPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 level = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool can_upgrade = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.can_upgrade_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCPetUpdateAttrPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCPetUpdateAttrPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 index = 1;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_index(), target);
  }

  // uint32 type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_type(), target);
  }

  // uint32 level = 3;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_level(), target);
  }

  // int32 value = 4;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_value(), target);
  }

  // bool can_upgrade = 5;
  if (this->_internal_can_upgrade() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_can_upgrade(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCPetUpdateAttrPacket)
  return target;
}

size_t GCPetUpdateAttrPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCPetUpdateAttrPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 index = 1;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_index());
  }

  // uint32 type = 2;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
  }

  // uint32 level = 3;
  if (this->_internal_level() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_level());
  }

  // int32 value = 4;
  if (this->_internal_value() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_value());
  }

  // bool can_upgrade = 5;
  if (this->_internal_can_upgrade() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCPetUpdateAttrPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCPetUpdateAttrPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCPetUpdateAttrPacket::GetClassData() const { return &_class_data_; }


void GCPetUpdateAttrPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCPetUpdateAttrPacket*>(&to_msg);
  auto& from = static_cast<const GCPetUpdateAttrPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCPetUpdateAttrPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  if (from._internal_value() != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  if (from._internal_can_upgrade() != 0) {
    _this->_internal_set_can_upgrade(from._internal_can_upgrade());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCPetUpdateAttrPacket::CopyFrom(const GCPetUpdateAttrPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCPetUpdateAttrPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCPetUpdateAttrPacket::IsInitialized() const {
  return true;
}

void GCPetUpdateAttrPacket::InternalSwap(GCPetUpdateAttrPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GCPetUpdateAttrPacket, _impl_.can_upgrade_)
      + sizeof(GCPetUpdateAttrPacket::_impl_.can_upgrade_)
      - PROTOBUF_FIELD_OFFSET(GCPetUpdateAttrPacket, _impl_.index_)>(
          reinterpret_cast<char*>(&_impl_.index_),
          reinterpret_cast<char*>(&other->_impl_.index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GCPetUpdateAttrPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[164]);
}

// ===================================================================

class GCPetUpdateSkillpowerPacket::_Internal {
 public:
};

GCPetUpdateSkillpowerPacket::GCPetUpdateSkillpowerPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCPetUpdateSkillpowerPacket)
}
GCPetUpdateSkillpowerPacket::GCPetUpdateSkillpowerPacket(const GCPetUpdateSkillpowerPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCPetUpdateSkillpowerPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.power_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.power_ = from._impl_.power_;
  // @@protoc_insertion_point(copy_constructor:network.GCPetUpdateSkillpowerPacket)
}

inline void GCPetUpdateSkillpowerPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.power_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCPetUpdateSkillpowerPacket::~GCPetUpdateSkillpowerPacket() {
  // @@protoc_insertion_point(destructor:network.GCPetUpdateSkillpowerPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCPetUpdateSkillpowerPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GCPetUpdateSkillpowerPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCPetUpdateSkillpowerPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCPetUpdateSkillpowerPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.power_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCPetUpdateSkillpowerPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 power = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.power_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCPetUpdateSkillpowerPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCPetUpdateSkillpowerPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 power = 1;
  if (this->_internal_power() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_power(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCPetUpdateSkillpowerPacket)
  return target;
}

size_t GCPetUpdateSkillpowerPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCPetUpdateSkillpowerPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 power = 1;
  if (this->_internal_power() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_power());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCPetUpdateSkillpowerPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCPetUpdateSkillpowerPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCPetUpdateSkillpowerPacket::GetClassData() const { return &_class_data_; }


void GCPetUpdateSkillpowerPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCPetUpdateSkillpowerPacket*>(&to_msg);
  auto& from = static_cast<const GCPetUpdateSkillpowerPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCPetUpdateSkillpowerPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_power() != 0) {
    _this->_internal_set_power(from._internal_power());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCPetUpdateSkillpowerPacket::CopyFrom(const GCPetUpdateSkillpowerPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCPetUpdateSkillpowerPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCPetUpdateSkillpowerPacket::IsInitialized() const {
  return true;
}

void GCPetUpdateSkillpowerPacket::InternalSwap(GCPetUpdateSkillpowerPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.power_, other->_impl_.power_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GCPetUpdateSkillpowerPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[165]);
}

// ===================================================================

class GCPetEvolutionInfoPacket::_Internal {
 public:
};

void GCPetEvolutionInfoPacket::clear_materials() {
  _impl_.materials_.Clear();
}
GCPetEvolutionInfoPacket::GCPetEvolutionInfoPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCPetEvolutionInfoPacket)
}
GCPetEvolutionInfoPacket::GCPetEvolutionInfoPacket(const GCPetEvolutionInfoPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCPetEvolutionInfoPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.materials_){from._impl_.materials_}
    , decltype(_impl_.cost_){}
    , decltype(_impl_.prob_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.cost_, &from._impl_.cost_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.prob_) -
    reinterpret_cast<char*>(&_impl_.cost_)) + sizeof(_impl_.prob_));
  // @@protoc_insertion_point(copy_constructor:network.GCPetEvolutionInfoPacket)
}

inline void GCPetEvolutionInfoPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.materials_){arena}
    , decltype(_impl_.cost_){int64_t{0}}
    , decltype(_impl_.prob_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCPetEvolutionInfoPacket::~GCPetEvolutionInfoPacket() {
  // @@protoc_insertion_point(destructor:network.GCPetEvolutionInfoPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCPetEvolutionInfoPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.materials_.~RepeatedPtrField();
}

void GCPetEvolutionInfoPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCPetEvolutionInfoPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCPetEvolutionInfoPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.materials_.Clear();
  ::memset(&_impl_.cost_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.prob_) -
      reinterpret_cast<char*>(&_impl_.cost_)) + sizeof(_impl_.prob_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCPetEvolutionInfoPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 cost = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.cost_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 prob = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.prob_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .network.TRefineMaterial materials = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_materials(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCPetEvolutionInfoPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCPetEvolutionInfoPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 cost = 1;
  if (this->_internal_cost() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_cost(), target);
  }

  // uint32 prob = 2;
  if (this->_internal_prob() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_prob(), target);
  }

  // repeated .network.TRefineMaterial materials = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_materials_size()); i < n; i++) {
    const auto& repfield = this->_internal_materials(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCPetEvolutionInfoPacket)
  return target;
}

size_t GCPetEvolutionInfoPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCPetEvolutionInfoPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .network.TRefineMaterial materials = 3;
  total_size += 1UL * this->_internal_materials_size();
  for (const auto& msg : this->_impl_.materials_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 cost = 1;
  if (this->_internal_cost() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_cost());
  }

  // uint32 prob = 2;
  if (this->_internal_prob() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_prob());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCPetEvolutionInfoPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCPetEvolutionInfoPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCPetEvolutionInfoPacket::GetClassData() const { return &_class_data_; }


void GCPetEvolutionInfoPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCPetEvolutionInfoPacket*>(&to_msg);
  auto& from = static_cast<const GCPetEvolutionInfoPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCPetEvolutionInfoPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.materials_.MergeFrom(from._impl_.materials_);
  if (from._internal_cost() != 0) {
    _this->_internal_set_cost(from._internal_cost());
  }
  if (from._internal_prob() != 0) {
    _this->_internal_set_prob(from._internal_prob());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCPetEvolutionInfoPacket::CopyFrom(const GCPetEvolutionInfoPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCPetEvolutionInfoPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCPetEvolutionInfoPacket::IsInitialized() const {
  return true;
}

void GCPetEvolutionInfoPacket::InternalSwap(GCPetEvolutionInfoPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.materials_.InternalSwap(&other->_impl_.materials_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GCPetEvolutionInfoPacket, _impl_.prob_)
      + sizeof(GCPetEvolutionInfoPacket::_impl_.prob_)
      - PROTOBUF_FIELD_OFFSET(GCPetEvolutionInfoPacket, _impl_.cost_)>(
          reinterpret_cast<char*>(&_impl_.cost_),
          reinterpret_cast<char*>(&other->_impl_.cost_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GCPetEvolutionInfoPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[166]);
}

// ===================================================================

class GCPetEvolveResultPacket::_Internal {
 public:
};

GCPetEvolveResultPacket::GCPetEvolveResultPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCPetEvolveResultPacket)
}
GCPetEvolveResultPacket::GCPetEvolveResultPacket(const GCPetEvolveResultPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCPetEvolveResultPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.result_ = from._impl_.result_;
  // @@protoc_insertion_point(copy_constructor:network.GCPetEvolveResultPacket)
}

inline void GCPetEvolveResultPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCPetEvolveResultPacket::~GCPetEvolveResultPacket() {
  // @@protoc_insertion_point(destructor:network.GCPetEvolveResultPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCPetEvolveResultPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GCPetEvolveResultPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCPetEvolveResultPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCPetEvolveResultPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.result_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCPetEvolveResultPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCPetEvolveResultPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCPetEvolveResultPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCPetEvolveResultPacket)
  return target;
}

size_t GCPetEvolveResultPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCPetEvolveResultPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool result = 1;
  if (this->_internal_result() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCPetEvolveResultPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCPetEvolveResultPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCPetEvolveResultPacket::GetClassData() const { return &_class_data_; }


void GCPetEvolveResultPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCPetEvolveResultPacket*>(&to_msg);
  auto& from = static_cast<const GCPetEvolveResultPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCPetEvolveResultPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_result() != 0) {
    _this->_internal_set_result(from._internal_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCPetEvolveResultPacket::CopyFrom(const GCPetEvolveResultPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCPetEvolveResultPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCPetEvolveResultPacket::IsInitialized() const {
  return true;
}

void GCPetEvolveResultPacket::InternalSwap(GCPetEvolveResultPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.result_, other->_impl_.result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GCPetEvolveResultPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[167]);
}

// ===================================================================

class GCPetAttrRefineInfoPacket::_Internal {
 public:
};

void GCPetAttrRefineInfoPacket::clear_materials() {
  _impl_.materials_.Clear();
}
GCPetAttrRefineInfoPacket::GCPetAttrRefineInfoPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCPetAttrRefineInfoPacket)
}
GCPetAttrRefineInfoPacket::GCPetAttrRefineInfoPacket(const GCPetAttrRefineInfoPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCPetAttrRefineInfoPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.materials_){from._impl_.materials_}
    , decltype(_impl_.cost_){}
    , decltype(_impl_.index_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.cost_, &from._impl_.cost_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.index_) -
    reinterpret_cast<char*>(&_impl_.cost_)) + sizeof(_impl_.index_));
  // @@protoc_insertion_point(copy_constructor:network.GCPetAttrRefineInfoPacket)
}

inline void GCPetAttrRefineInfoPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.materials_){arena}
    , decltype(_impl_.cost_){int64_t{0}}
    , decltype(_impl_.index_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCPetAttrRefineInfoPacket::~GCPetAttrRefineInfoPacket() {
  // @@protoc_insertion_point(destructor:network.GCPetAttrRefineInfoPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCPetAttrRefineInfoPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.materials_.~RepeatedPtrField();
}

void GCPetAttrRefineInfoPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCPetAttrRefineInfoPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCPetAttrRefineInfoPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.materials_.Clear();
  ::memset(&_impl_.cost_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.index_) -
      reinterpret_cast<char*>(&_impl_.cost_)) + sizeof(_impl_.index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCPetAttrRefineInfoPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 cost = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.cost_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .network.TRefineMaterial materials = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_materials(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCPetAttrRefineInfoPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCPetAttrRefineInfoPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 index = 1;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_index(), target);
  }

  // int64 cost = 2;
  if (this->_internal_cost() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_cost(), target);
  }

  // repeated .network.TRefineMaterial materials = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_materials_size()); i < n; i++) {
    const auto& repfield = this->_internal_materials(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCPetAttrRefineInfoPacket)
  return target;
}

size_t GCPetAttrRefineInfoPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCPetAttrRefineInfoPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .network.TRefineMaterial materials = 3;
  total_size += 1UL * this->_internal_materials_size();
  for (const auto& msg : this->_impl_.materials_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 cost = 2;
  if (this->_internal_cost() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_cost());
  }

  // uint32 index = 1;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCPetAttrRefineInfoPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCPetAttrRefineInfoPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCPetAttrRefineInfoPacket::GetClassData() const { return &_class_data_; }


void GCPetAttrRefineInfoPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCPetAttrRefineInfoPacket*>(&to_msg);
  auto& from = static_cast<const GCPetAttrRefineInfoPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCPetAttrRefineInfoPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.materials_.MergeFrom(from._impl_.materials_);
  if (from._internal_cost() != 0) {
    _this->_internal_set_cost(from._internal_cost());
  }
  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCPetAttrRefineInfoPacket::CopyFrom(const GCPetAttrRefineInfoPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCPetAttrRefineInfoPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCPetAttrRefineInfoPacket::IsInitialized() const {
  return true;
}

void GCPetAttrRefineInfoPacket::InternalSwap(GCPetAttrRefineInfoPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.materials_.InternalSwap(&other->_impl_.materials_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GCPetAttrRefineInfoPacket, _impl_.index_)
      + sizeof(GCPetAttrRefineInfoPacket::_impl_.index_)
      - PROTOBUF_FIELD_OFFSET(GCPetAttrRefineInfoPacket, _impl_.cost_)>(
          reinterpret_cast<char*>(&_impl_.cost_),
          reinterpret_cast<char*>(&other->_impl_.cost_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GCPetAttrRefineInfoPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[168]);
}

// ===================================================================

class GCPartyInvitePacket::_Internal {
 public:
};

GCPartyInvitePacket::GCPartyInvitePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCPartyInvitePacket)
}
GCPartyInvitePacket::GCPartyInvitePacket(const GCPartyInvitePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCPartyInvitePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.leader_vid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.leader_vid_ = from._impl_.leader_vid_;
  // @@protoc_insertion_point(copy_constructor:network.GCPartyInvitePacket)
}

inline void GCPartyInvitePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.leader_vid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCPartyInvitePacket::~GCPartyInvitePacket() {
  // @@protoc_insertion_point(destructor:network.GCPartyInvitePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCPartyInvitePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GCPartyInvitePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCPartyInvitePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCPartyInvitePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.leader_vid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCPartyInvitePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 leader_vid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.leader_vid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCPartyInvitePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCPartyInvitePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 leader_vid = 1;
  if (this->_internal_leader_vid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_leader_vid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCPartyInvitePacket)
  return target;
}

size_t GCPartyInvitePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCPartyInvitePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 leader_vid = 1;
  if (this->_internal_leader_vid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_leader_vid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCPartyInvitePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCPartyInvitePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCPartyInvitePacket::GetClassData() const { return &_class_data_; }


void GCPartyInvitePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCPartyInvitePacket*>(&to_msg);
  auto& from = static_cast<const GCPartyInvitePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCPartyInvitePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_leader_vid() != 0) {
    _this->_internal_set_leader_vid(from._internal_leader_vid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCPartyInvitePacket::CopyFrom(const GCPartyInvitePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCPartyInvitePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCPartyInvitePacket::IsInitialized() const {
  return true;
}

void GCPartyInvitePacket::InternalSwap(GCPartyInvitePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.leader_vid_, other->_impl_.leader_vid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GCPartyInvitePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[169]);
}

// ===================================================================

class GCPartyAddPacket::_Internal {
 public:
};

GCPartyAddPacket::GCPartyAddPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCPartyAddPacket)
}
GCPartyAddPacket::GCPartyAddPacket(const GCPartyAddPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCPartyAddPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.pid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.pid_ = from._impl_.pid_;
  // @@protoc_insertion_point(copy_constructor:network.GCPartyAddPacket)
}

inline void GCPartyAddPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.pid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GCPartyAddPacket::~GCPartyAddPacket() {
  // @@protoc_insertion_point(destructor:network.GCPartyAddPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCPartyAddPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void GCPartyAddPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCPartyAddPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCPartyAddPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.pid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCPartyAddPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCPartyAddPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCPartyAddPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pid(), target);
  }

  // bytes name = 2;
  if (!this->_internal_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCPartyAddPacket)
  return target;
}

size_t GCPartyAddPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCPartyAddPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCPartyAddPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCPartyAddPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCPartyAddPacket::GetClassData() const { return &_class_data_; }


void GCPartyAddPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCPartyAddPacket*>(&to_msg);
  auto& from = static_cast<const GCPartyAddPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCPartyAddPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_pid() != 0) {
    _this->_internal_set_pid(from._internal_pid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCPartyAddPacket::CopyFrom(const GCPartyAddPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCPartyAddPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCPartyAddPacket::IsInitialized() const {
  return true;
}

void GCPartyAddPacket::InternalSwap(GCPartyAddPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.pid_, other->_impl_.pid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GCPartyAddPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[170]);
}

// ===================================================================

class GCPartyUpdatePacket::_Internal {
 public:
};

GCPartyUpdatePacket::GCPartyUpdatePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCPartyUpdatePacket)
}
GCPartyUpdatePacket::GCPartyUpdatePacket(const GCPartyUpdatePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCPartyUpdatePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.affects_){from._impl_.affects_}
    , /*decltype(_impl_._affects_cached_byte_size_)*/{0}
    , decltype(_impl_.pid_){}
    , decltype(_impl_.role_){}
    , decltype(_impl_.percent_hp_){}
    , decltype(_impl_.leader_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.pid_, &from._impl_.pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.leader_) -
    reinterpret_cast<char*>(&_impl_.pid_)) + sizeof(_impl_.leader_));
  // @@protoc_insertion_point(copy_constructor:network.GCPartyUpdatePacket)
}

inline void GCPartyUpdatePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.affects_){arena}
    , /*decltype(_impl_._affects_cached_byte_size_)*/{0}
    , decltype(_impl_.pid_){0u}
    , decltype(_impl_.role_){0u}
    , decltype(_impl_.percent_hp_){0u}
    , decltype(_impl_.leader_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCPartyUpdatePacket::~GCPartyUpdatePacket() {
  // @@protoc_insertion_point(destructor:network.GCPartyUpdatePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCPartyUpdatePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.affects_.~RepeatedField();
}

void GCPartyUpdatePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCPartyUpdatePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCPartyUpdatePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.affects_.Clear();
  ::memset(&_impl_.pid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.leader_) -
      reinterpret_cast<char*>(&_impl_.pid_)) + sizeof(_impl_.leader_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCPartyUpdatePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 role = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.role_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 percent_hp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.percent_hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 affects = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_affects(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_affects(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool leader = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.leader_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCPartyUpdatePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCPartyUpdatePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pid(), target);
  }

  // uint32 role = 2;
  if (this->_internal_role() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_role(), target);
  }

  // uint32 percent_hp = 3;
  if (this->_internal_percent_hp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_percent_hp(), target);
  }

  // repeated int32 affects = 4;
  {
    int byte_size = _impl_._affects_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          4, _internal_affects(), byte_size, target);
    }
  }

  // bool leader = 5;
  if (this->_internal_leader() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_leader(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCPartyUpdatePacket)
  return target;
}

size_t GCPartyUpdatePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCPartyUpdatePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 affects = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.affects_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._affects_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid());
  }

  // uint32 role = 2;
  if (this->_internal_role() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_role());
  }

  // uint32 percent_hp = 3;
  if (this->_internal_percent_hp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_percent_hp());
  }

  // bool leader = 5;
  if (this->_internal_leader() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCPartyUpdatePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCPartyUpdatePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCPartyUpdatePacket::GetClassData() const { return &_class_data_; }


void GCPartyUpdatePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCPartyUpdatePacket*>(&to_msg);
  auto& from = static_cast<const GCPartyUpdatePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCPartyUpdatePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.affects_.MergeFrom(from._impl_.affects_);
  if (from._internal_pid() != 0) {
    _this->_internal_set_pid(from._internal_pid());
  }
  if (from._internal_role() != 0) {
    _this->_internal_set_role(from._internal_role());
  }
  if (from._internal_percent_hp() != 0) {
    _this->_internal_set_percent_hp(from._internal_percent_hp());
  }
  if (from._internal_leader() != 0) {
    _this->_internal_set_leader(from._internal_leader());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCPartyUpdatePacket::CopyFrom(const GCPartyUpdatePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCPartyUpdatePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCPartyUpdatePacket::IsInitialized() const {
  return true;
}

void GCPartyUpdatePacket::InternalSwap(GCPartyUpdatePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.affects_.InternalSwap(&other->_impl_.affects_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GCPartyUpdatePacket, _impl_.leader_)
      + sizeof(GCPartyUpdatePacket::_impl_.leader_)
      - PROTOBUF_FIELD_OFFSET(GCPartyUpdatePacket, _impl_.pid_)>(
          reinterpret_cast<char*>(&_impl_.pid_),
          reinterpret_cast<char*>(&other->_impl_.pid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GCPartyUpdatePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[171]);
}

// ===================================================================

class GCPartyRemovePacket::_Internal {
 public:
};

GCPartyRemovePacket::GCPartyRemovePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCPartyRemovePacket)
}
GCPartyRemovePacket::GCPartyRemovePacket(const GCPartyRemovePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCPartyRemovePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.pid_ = from._impl_.pid_;
  // @@protoc_insertion_point(copy_constructor:network.GCPartyRemovePacket)
}

inline void GCPartyRemovePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCPartyRemovePacket::~GCPartyRemovePacket() {
  // @@protoc_insertion_point(destructor:network.GCPartyRemovePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCPartyRemovePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GCPartyRemovePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCPartyRemovePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCPartyRemovePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCPartyRemovePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCPartyRemovePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCPartyRemovePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCPartyRemovePacket)
  return target;
}

size_t GCPartyRemovePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCPartyRemovePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCPartyRemovePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCPartyRemovePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCPartyRemovePacket::GetClassData() const { return &_class_data_; }


void GCPartyRemovePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCPartyRemovePacket*>(&to_msg);
  auto& from = static_cast<const GCPartyRemovePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCPartyRemovePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_pid() != 0) {
    _this->_internal_set_pid(from._internal_pid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCPartyRemovePacket::CopyFrom(const GCPartyRemovePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCPartyRemovePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCPartyRemovePacket::IsInitialized() const {
  return true;
}

void GCPartyRemovePacket::InternalSwap(GCPartyRemovePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.pid_, other->_impl_.pid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GCPartyRemovePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[172]);
}

// ===================================================================

class GCPartyLinkPacket::_Internal {
 public:
};

GCPartyLinkPacket::GCPartyLinkPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCPartyLinkPacket)
}
GCPartyLinkPacket::GCPartyLinkPacket(const GCPartyLinkPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCPartyLinkPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pid_){}
    , decltype(_impl_.vid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.pid_, &from._impl_.pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.vid_) -
    reinterpret_cast<char*>(&_impl_.pid_)) + sizeof(_impl_.vid_));
  // @@protoc_insertion_point(copy_constructor:network.GCPartyLinkPacket)
}

inline void GCPartyLinkPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pid_){0u}
    , decltype(_impl_.vid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCPartyLinkPacket::~GCPartyLinkPacket() {
  // @@protoc_insertion_point(destructor:network.GCPartyLinkPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCPartyLinkPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GCPartyLinkPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCPartyLinkPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCPartyLinkPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.pid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.vid_) -
      reinterpret_cast<char*>(&_impl_.pid_)) + sizeof(_impl_.vid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCPartyLinkPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 vid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.vid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCPartyLinkPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCPartyLinkPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pid(), target);
  }

  // uint32 vid = 2;
  if (this->_internal_vid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_vid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCPartyLinkPacket)
  return target;
}

size_t GCPartyLinkPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCPartyLinkPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid());
  }

  // uint32 vid = 2;
  if (this->_internal_vid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_vid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCPartyLinkPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCPartyLinkPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCPartyLinkPacket::GetClassData() const { return &_class_data_; }


void GCPartyLinkPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCPartyLinkPacket*>(&to_msg);
  auto& from = static_cast<const GCPartyLinkPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCPartyLinkPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_pid() != 0) {
    _this->_internal_set_pid(from._internal_pid());
  }
  if (from._internal_vid() != 0) {
    _this->_internal_set_vid(from._internal_vid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCPartyLinkPacket::CopyFrom(const GCPartyLinkPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCPartyLinkPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCPartyLinkPacket::IsInitialized() const {
  return true;
}

void GCPartyLinkPacket::InternalSwap(GCPartyLinkPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GCPartyLinkPacket, _impl_.vid_)
      + sizeof(GCPartyLinkPacket::_impl_.vid_)
      - PROTOBUF_FIELD_OFFSET(GCPartyLinkPacket, _impl_.pid_)>(
          reinterpret_cast<char*>(&_impl_.pid_),
          reinterpret_cast<char*>(&other->_impl_.pid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GCPartyLinkPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[173]);
}

// ===================================================================

class GCPartyUnlinkPacket::_Internal {
 public:
};

GCPartyUnlinkPacket::GCPartyUnlinkPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCPartyUnlinkPacket)
}
GCPartyUnlinkPacket::GCPartyUnlinkPacket(const GCPartyUnlinkPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCPartyUnlinkPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pid_){}
    , decltype(_impl_.vid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.pid_, &from._impl_.pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.vid_) -
    reinterpret_cast<char*>(&_impl_.pid_)) + sizeof(_impl_.vid_));
  // @@protoc_insertion_point(copy_constructor:network.GCPartyUnlinkPacket)
}

inline void GCPartyUnlinkPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pid_){0u}
    , decltype(_impl_.vid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCPartyUnlinkPacket::~GCPartyUnlinkPacket() {
  // @@protoc_insertion_point(destructor:network.GCPartyUnlinkPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCPartyUnlinkPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GCPartyUnlinkPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCPartyUnlinkPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCPartyUnlinkPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.pid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.vid_) -
      reinterpret_cast<char*>(&_impl_.pid_)) + sizeof(_impl_.vid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCPartyUnlinkPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 vid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.vid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCPartyUnlinkPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCPartyUnlinkPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pid(), target);
  }

  // uint32 vid = 2;
  if (this->_internal_vid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_vid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCPartyUnlinkPacket)
  return target;
}

size_t GCPartyUnlinkPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCPartyUnlinkPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid());
  }

  // uint32 vid = 2;
  if (this->_internal_vid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_vid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCPartyUnlinkPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCPartyUnlinkPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCPartyUnlinkPacket::GetClassData() const { return &_class_data_; }


void GCPartyUnlinkPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCPartyUnlinkPacket*>(&to_msg);
  auto& from = static_cast<const GCPartyUnlinkPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCPartyUnlinkPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_pid() != 0) {
    _this->_internal_set_pid(from._internal_pid());
  }
  if (from._internal_vid() != 0) {
    _this->_internal_set_vid(from._internal_vid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCPartyUnlinkPacket::CopyFrom(const GCPartyUnlinkPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCPartyUnlinkPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCPartyUnlinkPacket::IsInitialized() const {
  return true;
}

void GCPartyUnlinkPacket::InternalSwap(GCPartyUnlinkPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GCPartyUnlinkPacket, _impl_.vid_)
      + sizeof(GCPartyUnlinkPacket::_impl_.vid_)
      - PROTOBUF_FIELD_OFFSET(GCPartyUnlinkPacket, _impl_.pid_)>(
          reinterpret_cast<char*>(&_impl_.pid_),
          reinterpret_cast<char*>(&other->_impl_.pid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GCPartyUnlinkPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[174]);
}

// ===================================================================

class GCPartyParameterPacket::_Internal {
 public:
};

GCPartyParameterPacket::GCPartyParameterPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCPartyParameterPacket)
}
GCPartyParameterPacket::GCPartyParameterPacket(const GCPartyParameterPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCPartyParameterPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.distribute_mode_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.distribute_mode_ = from._impl_.distribute_mode_;
  // @@protoc_insertion_point(copy_constructor:network.GCPartyParameterPacket)
}

inline void GCPartyParameterPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.distribute_mode_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCPartyParameterPacket::~GCPartyParameterPacket() {
  // @@protoc_insertion_point(destructor:network.GCPartyParameterPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCPartyParameterPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GCPartyParameterPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCPartyParameterPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCPartyParameterPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.distribute_mode_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCPartyParameterPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 distribute_mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.distribute_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCPartyParameterPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCPartyParameterPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 distribute_mode = 1;
  if (this->_internal_distribute_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_distribute_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCPartyParameterPacket)
  return target;
}

size_t GCPartyParameterPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCPartyParameterPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 distribute_mode = 1;
  if (this->_internal_distribute_mode() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_distribute_mode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCPartyParameterPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCPartyParameterPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCPartyParameterPacket::GetClassData() const { return &_class_data_; }


void GCPartyParameterPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCPartyParameterPacket*>(&to_msg);
  auto& from = static_cast<const GCPartyParameterPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCPartyParameterPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_distribute_mode() != 0) {
    _this->_internal_set_distribute_mode(from._internal_distribute_mode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCPartyParameterPacket::CopyFrom(const GCPartyParameterPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCPartyParameterPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCPartyParameterPacket::IsInitialized() const {
  return true;
}

void GCPartyParameterPacket::InternalSwap(GCPartyParameterPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.distribute_mode_, other->_impl_.distribute_mode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GCPartyParameterPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[175]);
}

// ===================================================================

class GCGuildLoginPacket::_Internal {
 public:
};

GCGuildLoginPacket::GCGuildLoginPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCGuildLoginPacket)
}
GCGuildLoginPacket::GCGuildLoginPacket(const GCGuildLoginPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCGuildLoginPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.pid_ = from._impl_.pid_;
  // @@protoc_insertion_point(copy_constructor:network.GCGuildLoginPacket)
}

inline void GCGuildLoginPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCGuildLoginPacket::~GCGuildLoginPacket() {
  // @@protoc_insertion_point(destructor:network.GCGuildLoginPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCGuildLoginPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GCGuildLoginPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCGuildLoginPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCGuildLoginPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCGuildLoginPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCGuildLoginPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCGuildLoginPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCGuildLoginPacket)
  return target;
}

size_t GCGuildLoginPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCGuildLoginPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCGuildLoginPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCGuildLoginPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCGuildLoginPacket::GetClassData() const { return &_class_data_; }


void GCGuildLoginPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCGuildLoginPacket*>(&to_msg);
  auto& from = static_cast<const GCGuildLoginPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCGuildLoginPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_pid() != 0) {
    _this->_internal_set_pid(from._internal_pid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCGuildLoginPacket::CopyFrom(const GCGuildLoginPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCGuildLoginPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGuildLoginPacket::IsInitialized() const {
  return true;
}

void GCGuildLoginPacket::InternalSwap(GCGuildLoginPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.pid_, other->_impl_.pid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GCGuildLoginPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[176]);
}

// ===================================================================

class GCGuildLogoutPacket::_Internal {
 public:
};

GCGuildLogoutPacket::GCGuildLogoutPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCGuildLogoutPacket)
}
GCGuildLogoutPacket::GCGuildLogoutPacket(const GCGuildLogoutPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCGuildLogoutPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.pid_ = from._impl_.pid_;
  // @@protoc_insertion_point(copy_constructor:network.GCGuildLogoutPacket)
}

inline void GCGuildLogoutPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCGuildLogoutPacket::~GCGuildLogoutPacket() {
  // @@protoc_insertion_point(destructor:network.GCGuildLogoutPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCGuildLogoutPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GCGuildLogoutPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCGuildLogoutPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCGuildLogoutPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCGuildLogoutPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCGuildLogoutPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCGuildLogoutPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCGuildLogoutPacket)
  return target;
}

size_t GCGuildLogoutPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCGuildLogoutPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCGuildLogoutPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCGuildLogoutPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCGuildLogoutPacket::GetClassData() const { return &_class_data_; }


void GCGuildLogoutPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCGuildLogoutPacket*>(&to_msg);
  auto& from = static_cast<const GCGuildLogoutPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCGuildLogoutPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_pid() != 0) {
    _this->_internal_set_pid(from._internal_pid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCGuildLogoutPacket::CopyFrom(const GCGuildLogoutPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCGuildLogoutPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGuildLogoutPacket::IsInitialized() const {
  return true;
}

void GCGuildLogoutPacket::InternalSwap(GCGuildLogoutPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.pid_, other->_impl_.pid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GCGuildLogoutPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[177]);
}

// ===================================================================

class GCGuildRemovePacket::_Internal {
 public:
};

GCGuildRemovePacket::GCGuildRemovePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCGuildRemovePacket)
}
GCGuildRemovePacket::GCGuildRemovePacket(const GCGuildRemovePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCGuildRemovePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.pid_ = from._impl_.pid_;
  // @@protoc_insertion_point(copy_constructor:network.GCGuildRemovePacket)
}

inline void GCGuildRemovePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCGuildRemovePacket::~GCGuildRemovePacket() {
  // @@protoc_insertion_point(destructor:network.GCGuildRemovePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCGuildRemovePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GCGuildRemovePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCGuildRemovePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCGuildRemovePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCGuildRemovePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCGuildRemovePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCGuildRemovePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCGuildRemovePacket)
  return target;
}

size_t GCGuildRemovePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCGuildRemovePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCGuildRemovePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCGuildRemovePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCGuildRemovePacket::GetClassData() const { return &_class_data_; }


void GCGuildRemovePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCGuildRemovePacket*>(&to_msg);
  auto& from = static_cast<const GCGuildRemovePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCGuildRemovePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_pid() != 0) {
    _this->_internal_set_pid(from._internal_pid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCGuildRemovePacket::CopyFrom(const GCGuildRemovePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCGuildRemovePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGuildRemovePacket::IsInitialized() const {
  return true;
}

void GCGuildRemovePacket::InternalSwap(GCGuildRemovePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.pid_, other->_impl_.pid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GCGuildRemovePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[178]);
}

// ===================================================================

class GCGuildMemberListPacket::_Internal {
 public:
};

void GCGuildMemberListPacket::clear_members() {
  _impl_.members_.Clear();
}
GCGuildMemberListPacket::GCGuildMemberListPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCGuildMemberListPacket)
}
GCGuildMemberListPacket::GCGuildMemberListPacket(const GCGuildMemberListPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCGuildMemberListPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.members_){from._impl_.members_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:network.GCGuildMemberListPacket)
}

inline void GCGuildMemberListPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.members_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCGuildMemberListPacket::~GCGuildMemberListPacket() {
  // @@protoc_insertion_point(destructor:network.GCGuildMemberListPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCGuildMemberListPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.members_.~RepeatedPtrField();
}

void GCGuildMemberListPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCGuildMemberListPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCGuildMemberListPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.members_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCGuildMemberListPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .network.TGuildMemberInfo members = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_members(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCGuildMemberListPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCGuildMemberListPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .network.TGuildMemberInfo members = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_members_size()); i < n; i++) {
    const auto& repfield = this->_internal_members(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCGuildMemberListPacket)
  return target;
}

size_t GCGuildMemberListPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCGuildMemberListPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .network.TGuildMemberInfo members = 1;
  total_size += 1UL * this->_internal_members_size();
  for (const auto& msg : this->_impl_.members_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCGuildMemberListPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCGuildMemberListPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCGuildMemberListPacket::GetClassData() const { return &_class_data_; }


void GCGuildMemberListPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCGuildMemberListPacket*>(&to_msg);
  auto& from = static_cast<const GCGuildMemberListPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCGuildMemberListPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.members_.MergeFrom(from._impl_.members_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCGuildMemberListPacket::CopyFrom(const GCGuildMemberListPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCGuildMemberListPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGuildMemberListPacket::IsInitialized() const {
  return true;
}

void GCGuildMemberListPacket::InternalSwap(GCGuildMemberListPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.members_.InternalSwap(&other->_impl_.members_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GCGuildMemberListPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[179]);
}

// ===================================================================

class GCGuildGradePacket_GradeData::_Internal {
 public:
};

GCGuildGradePacket_GradeData::GCGuildGradePacket_GradeData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCGuildGradePacket.GradeData)
}
GCGuildGradePacket_GradeData::GCGuildGradePacket_GradeData(const GCGuildGradePacket_GradeData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCGuildGradePacket_GradeData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.index_){}
    , decltype(_impl_.auth_flag_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.index_, &from._impl_.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.auth_flag_) -
    reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.auth_flag_));
  // @@protoc_insertion_point(copy_constructor:network.GCGuildGradePacket.GradeData)
}

inline void GCGuildGradePacket_GradeData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.index_){0u}
    , decltype(_impl_.auth_flag_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GCGuildGradePacket_GradeData::~GCGuildGradePacket_GradeData() {
  // @@protoc_insertion_point(destructor:network.GCGuildGradePacket.GradeData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCGuildGradePacket_GradeData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void GCGuildGradePacket_GradeData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCGuildGradePacket_GradeData::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCGuildGradePacket.GradeData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  ::memset(&_impl_.index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.auth_flag_) -
      reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.auth_flag_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCGuildGradePacket_GradeData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 auth_flag = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.auth_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCGuildGradePacket_GradeData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCGuildGradePacket.GradeData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 index = 1;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_index(), target);
  }

  // bytes name = 2;
  if (!this->_internal_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_name(), target);
  }

  // uint32 auth_flag = 3;
  if (this->_internal_auth_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_auth_flag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCGuildGradePacket.GradeData)
  return target;
}

size_t GCGuildGradePacket_GradeData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCGuildGradePacket.GradeData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // uint32 index = 1;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_index());
  }

  // uint32 auth_flag = 3;
  if (this->_internal_auth_flag() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_auth_flag());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCGuildGradePacket_GradeData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCGuildGradePacket_GradeData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCGuildGradePacket_GradeData::GetClassData() const { return &_class_data_; }


void GCGuildGradePacket_GradeData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCGuildGradePacket_GradeData*>(&to_msg);
  auto& from = static_cast<const GCGuildGradePacket_GradeData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCGuildGradePacket.GradeData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  if (from._internal_auth_flag() != 0) {
    _this->_internal_set_auth_flag(from._internal_auth_flag());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCGuildGradePacket_GradeData::CopyFrom(const GCGuildGradePacket_GradeData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCGuildGradePacket.GradeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGuildGradePacket_GradeData::IsInitialized() const {
  return true;
}

void GCGuildGradePacket_GradeData::InternalSwap(GCGuildGradePacket_GradeData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GCGuildGradePacket_GradeData, _impl_.auth_flag_)
      + sizeof(GCGuildGradePacket_GradeData::_impl_.auth_flag_)
      - PROTOBUF_FIELD_OFFSET(GCGuildGradePacket_GradeData, _impl_.index_)>(
          reinterpret_cast<char*>(&_impl_.index_),
          reinterpret_cast<char*>(&other->_impl_.index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GCGuildGradePacket_GradeData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[180]);
}

// ===================================================================

class GCGuildGradePacket::_Internal {
 public:
};

GCGuildGradePacket::GCGuildGradePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCGuildGradePacket)
}
GCGuildGradePacket::GCGuildGradePacket(const GCGuildGradePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCGuildGradePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.grades_){from._impl_.grades_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:network.GCGuildGradePacket)
}

inline void GCGuildGradePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.grades_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCGuildGradePacket::~GCGuildGradePacket() {
  // @@protoc_insertion_point(destructor:network.GCGuildGradePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCGuildGradePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.grades_.~RepeatedPtrField();
}

void GCGuildGradePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCGuildGradePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCGuildGradePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.grades_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCGuildGradePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .network.GCGuildGradePacket.GradeData grades = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_grades(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCGuildGradePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCGuildGradePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .network.GCGuildGradePacket.GradeData grades = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_grades_size()); i < n; i++) {
    const auto& repfield = this->_internal_grades(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCGuildGradePacket)
  return target;
}

size_t GCGuildGradePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCGuildGradePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .network.GCGuildGradePacket.GradeData grades = 1;
  total_size += 1UL * this->_internal_grades_size();
  for (const auto& msg : this->_impl_.grades_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCGuildGradePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCGuildGradePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCGuildGradePacket::GetClassData() const { return &_class_data_; }


void GCGuildGradePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCGuildGradePacket*>(&to_msg);
  auto& from = static_cast<const GCGuildGradePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCGuildGradePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.grades_.MergeFrom(from._impl_.grades_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCGuildGradePacket::CopyFrom(const GCGuildGradePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCGuildGradePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGuildGradePacket::IsInitialized() const {
  return true;
}

void GCGuildGradePacket::InternalSwap(GCGuildGradePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.grades_.InternalSwap(&other->_impl_.grades_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GCGuildGradePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[181]);
}

// ===================================================================

class GCGuildGradeNamePacket::_Internal {
 public:
};

GCGuildGradeNamePacket::GCGuildGradeNamePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCGuildGradeNamePacket)
}
GCGuildGradeNamePacket::GCGuildGradeNamePacket(const GCGuildGradeNamePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCGuildGradeNamePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.index_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.index_ = from._impl_.index_;
  // @@protoc_insertion_point(copy_constructor:network.GCGuildGradeNamePacket)
}

inline void GCGuildGradeNamePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.index_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GCGuildGradeNamePacket::~GCGuildGradeNamePacket() {
  // @@protoc_insertion_point(destructor:network.GCGuildGradeNamePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCGuildGradeNamePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void GCGuildGradeNamePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCGuildGradeNamePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCGuildGradeNamePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.index_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCGuildGradeNamePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCGuildGradeNamePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCGuildGradeNamePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 index = 1;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_index(), target);
  }

  // bytes name = 2;
  if (!this->_internal_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCGuildGradeNamePacket)
  return target;
}

size_t GCGuildGradeNamePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCGuildGradeNamePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // uint32 index = 1;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCGuildGradeNamePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCGuildGradeNamePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCGuildGradeNamePacket::GetClassData() const { return &_class_data_; }


void GCGuildGradeNamePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCGuildGradeNamePacket*>(&to_msg);
  auto& from = static_cast<const GCGuildGradeNamePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCGuildGradeNamePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCGuildGradeNamePacket::CopyFrom(const GCGuildGradeNamePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCGuildGradeNamePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGuildGradeNamePacket::IsInitialized() const {
  return true;
}

void GCGuildGradeNamePacket::InternalSwap(GCGuildGradeNamePacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.index_, other->_impl_.index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GCGuildGradeNamePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[182]);
}

// ===================================================================

class GCGuildGradeAuthPacket::_Internal {
 public:
};

GCGuildGradeAuthPacket::GCGuildGradeAuthPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCGuildGradeAuthPacket)
}
GCGuildGradeAuthPacket::GCGuildGradeAuthPacket(const GCGuildGradeAuthPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCGuildGradeAuthPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.index_){}
    , decltype(_impl_.auth_flag_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.index_, &from._impl_.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.auth_flag_) -
    reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.auth_flag_));
  // @@protoc_insertion_point(copy_constructor:network.GCGuildGradeAuthPacket)
}

inline void GCGuildGradeAuthPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.index_){0u}
    , decltype(_impl_.auth_flag_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCGuildGradeAuthPacket::~GCGuildGradeAuthPacket() {
  // @@protoc_insertion_point(destructor:network.GCGuildGradeAuthPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCGuildGradeAuthPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GCGuildGradeAuthPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCGuildGradeAuthPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCGuildGradeAuthPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.auth_flag_) -
      reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.auth_flag_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCGuildGradeAuthPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 auth_flag = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.auth_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCGuildGradeAuthPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCGuildGradeAuthPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 index = 1;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_index(), target);
  }

  // uint32 auth_flag = 2;
  if (this->_internal_auth_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_auth_flag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCGuildGradeAuthPacket)
  return target;
}

size_t GCGuildGradeAuthPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCGuildGradeAuthPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 index = 1;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_index());
  }

  // uint32 auth_flag = 2;
  if (this->_internal_auth_flag() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_auth_flag());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCGuildGradeAuthPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCGuildGradeAuthPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCGuildGradeAuthPacket::GetClassData() const { return &_class_data_; }


void GCGuildGradeAuthPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCGuildGradeAuthPacket*>(&to_msg);
  auto& from = static_cast<const GCGuildGradeAuthPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCGuildGradeAuthPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  if (from._internal_auth_flag() != 0) {
    _this->_internal_set_auth_flag(from._internal_auth_flag());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCGuildGradeAuthPacket::CopyFrom(const GCGuildGradeAuthPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCGuildGradeAuthPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGuildGradeAuthPacket::IsInitialized() const {
  return true;
}

void GCGuildGradeAuthPacket::InternalSwap(GCGuildGradeAuthPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GCGuildGradeAuthPacket, _impl_.auth_flag_)
      + sizeof(GCGuildGradeAuthPacket::_impl_.auth_flag_)
      - PROTOBUF_FIELD_OFFSET(GCGuildGradeAuthPacket, _impl_.index_)>(
          reinterpret_cast<char*>(&_impl_.index_),
          reinterpret_cast<char*>(&other->_impl_.index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GCGuildGradeAuthPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[183]);
}

// ===================================================================

class GCGuildInfoPacket::_Internal {
 public:
};

GCGuildInfoPacket::GCGuildInfoPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCGuildInfoPacket)
}
GCGuildInfoPacket::GCGuildInfoPacket(const GCGuildInfoPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCGuildInfoPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.wins_){from._impl_.wins_}
    , /*decltype(_impl_._wins_cached_byte_size_)*/{0}
    , decltype(_impl_.draws_){from._impl_.draws_}
    , /*decltype(_impl_._draws_cached_byte_size_)*/{0}
    , decltype(_impl_.losses_){from._impl_.losses_}
    , /*decltype(_impl_._losses_cached_byte_size_)*/{0}
    , decltype(_impl_.name_){}
    , decltype(_impl_.member_count_){}
    , decltype(_impl_.max_member_count_){}
    , decltype(_impl_.guild_id_){}
    , decltype(_impl_.master_pid_){}
    , decltype(_impl_.exp_){}
    , decltype(_impl_.level_){}
    , decltype(_impl_.gold_){}
    , decltype(_impl_.has_land_){}
    , decltype(_impl_.guild_point_){}
    , decltype(_impl_.guild_rank_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.member_count_, &from._impl_.member_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.guild_rank_) -
    reinterpret_cast<char*>(&_impl_.member_count_)) + sizeof(_impl_.guild_rank_));
  // @@protoc_insertion_point(copy_constructor:network.GCGuildInfoPacket)
}

inline void GCGuildInfoPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.wins_){arena}
    , /*decltype(_impl_._wins_cached_byte_size_)*/{0}
    , decltype(_impl_.draws_){arena}
    , /*decltype(_impl_._draws_cached_byte_size_)*/{0}
    , decltype(_impl_.losses_){arena}
    , /*decltype(_impl_._losses_cached_byte_size_)*/{0}
    , decltype(_impl_.name_){}
    , decltype(_impl_.member_count_){0u}
    , decltype(_impl_.max_member_count_){0u}
    , decltype(_impl_.guild_id_){0u}
    , decltype(_impl_.master_pid_){0u}
    , decltype(_impl_.exp_){0u}
    , decltype(_impl_.level_){0u}
    , decltype(_impl_.gold_){0u}
    , decltype(_impl_.has_land_){false}
    , decltype(_impl_.guild_point_){0u}
    , decltype(_impl_.guild_rank_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GCGuildInfoPacket::~GCGuildInfoPacket() {
  // @@protoc_insertion_point(destructor:network.GCGuildInfoPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCGuildInfoPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.wins_.~RepeatedField();
  _impl_.draws_.~RepeatedField();
  _impl_.losses_.~RepeatedField();
  _impl_.name_.Destroy();
}

void GCGuildInfoPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCGuildInfoPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCGuildInfoPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.wins_.Clear();
  _impl_.draws_.Clear();
  _impl_.losses_.Clear();
  _impl_.name_.ClearToEmpty();
  ::memset(&_impl_.member_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.guild_rank_) -
      reinterpret_cast<char*>(&_impl_.member_count_)) + sizeof(_impl_.guild_rank_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCGuildInfoPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 member_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.member_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 max_member_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.max_member_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 guild_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 master_pid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.master_pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 exp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.exp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 level = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes name = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 gold = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool has_land = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.has_land_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 guild_point = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.guild_point_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 guild_rank = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.guild_rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 wins = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_wins(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 96) {
          _internal_add_wins(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 draws = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_draws(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 104) {
          _internal_add_draws(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 losses = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_losses(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 112) {
          _internal_add_losses(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCGuildInfoPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCGuildInfoPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 member_count = 1;
  if (this->_internal_member_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_member_count(), target);
  }

  // uint32 max_member_count = 2;
  if (this->_internal_max_member_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_max_member_count(), target);
  }

  // uint32 guild_id = 3;
  if (this->_internal_guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_guild_id(), target);
  }

  // uint32 master_pid = 4;
  if (this->_internal_master_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_master_pid(), target);
  }

  // uint32 exp = 5;
  if (this->_internal_exp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_exp(), target);
  }

  // uint32 level = 6;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_level(), target);
  }

  // bytes name = 7;
  if (!this->_internal_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_name(), target);
  }

  // uint32 gold = 8;
  if (this->_internal_gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_gold(), target);
  }

  // bool has_land = 9;
  if (this->_internal_has_land() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_has_land(), target);
  }

  // uint32 guild_point = 10;
  if (this->_internal_guild_point() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_guild_point(), target);
  }

  // uint32 guild_rank = 11;
  if (this->_internal_guild_rank() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_guild_rank(), target);
  }

  // repeated uint32 wins = 12;
  {
    int byte_size = _impl_._wins_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          12, _internal_wins(), byte_size, target);
    }
  }

  // repeated uint32 draws = 13;
  {
    int byte_size = _impl_._draws_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          13, _internal_draws(), byte_size, target);
    }
  }

  // repeated uint32 losses = 14;
  {
    int byte_size = _impl_._losses_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          14, _internal_losses(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCGuildInfoPacket)
  return target;
}

size_t GCGuildInfoPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCGuildInfoPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 wins = 12;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.wins_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._wins_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 draws = 13;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.draws_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._draws_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 losses = 14;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.losses_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._losses_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // bytes name = 7;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // uint32 member_count = 1;
  if (this->_internal_member_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_member_count());
  }

  // uint32 max_member_count = 2;
  if (this->_internal_max_member_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_max_member_count());
  }

  // uint32 guild_id = 3;
  if (this->_internal_guild_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_guild_id());
  }

  // uint32 master_pid = 4;
  if (this->_internal_master_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_master_pid());
  }

  // uint32 exp = 5;
  if (this->_internal_exp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_exp());
  }

  // uint32 level = 6;
  if (this->_internal_level() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_level());
  }

  // uint32 gold = 8;
  if (this->_internal_gold() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_gold());
  }

  // bool has_land = 9;
  if (this->_internal_has_land() != 0) {
    total_size += 1 + 1;
  }

  // uint32 guild_point = 10;
  if (this->_internal_guild_point() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_guild_point());
  }

  // uint32 guild_rank = 11;
  if (this->_internal_guild_rank() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_guild_rank());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCGuildInfoPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCGuildInfoPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCGuildInfoPacket::GetClassData() const { return &_class_data_; }


void GCGuildInfoPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCGuildInfoPacket*>(&to_msg);
  auto& from = static_cast<const GCGuildInfoPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCGuildInfoPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.wins_.MergeFrom(from._impl_.wins_);
  _this->_impl_.draws_.MergeFrom(from._impl_.draws_);
  _this->_impl_.losses_.MergeFrom(from._impl_.losses_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_member_count() != 0) {
    _this->_internal_set_member_count(from._internal_member_count());
  }
  if (from._internal_max_member_count() != 0) {
    _this->_internal_set_max_member_count(from._internal_max_member_count());
  }
  if (from._internal_guild_id() != 0) {
    _this->_internal_set_guild_id(from._internal_guild_id());
  }
  if (from._internal_master_pid() != 0) {
    _this->_internal_set_master_pid(from._internal_master_pid());
  }
  if (from._internal_exp() != 0) {
    _this->_internal_set_exp(from._internal_exp());
  }
  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  if (from._internal_gold() != 0) {
    _this->_internal_set_gold(from._internal_gold());
  }
  if (from._internal_has_land() != 0) {
    _this->_internal_set_has_land(from._internal_has_land());
  }
  if (from._internal_guild_point() != 0) {
    _this->_internal_set_guild_point(from._internal_guild_point());
  }
  if (from._internal_guild_rank() != 0) {
    _this->_internal_set_guild_rank(from._internal_guild_rank());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCGuildInfoPacket::CopyFrom(const GCGuildInfoPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCGuildInfoPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGuildInfoPacket::IsInitialized() const {
  return true;
}

void GCGuildInfoPacket::InternalSwap(GCGuildInfoPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.wins_.InternalSwap(&other->_impl_.wins_);
  _impl_.draws_.InternalSwap(&other->_impl_.draws_);
  _impl_.losses_.InternalSwap(&other->_impl_.losses_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GCGuildInfoPacket, _impl_.guild_rank_)
      + sizeof(GCGuildInfoPacket::_impl_.guild_rank_)
      - PROTOBUF_FIELD_OFFSET(GCGuildInfoPacket, _impl_.member_count_)>(
          reinterpret_cast<char*>(&_impl_.member_count_),
          reinterpret_cast<char*>(&other->_impl_.member_count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GCGuildInfoPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[184]);
}

// ===================================================================

class GCGuildCommentsPacket_Comment::_Internal {
 public:
};

GCGuildCommentsPacket_Comment::GCGuildCommentsPacket_Comment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCGuildCommentsPacket.Comment)
}
GCGuildCommentsPacket_Comment::GCGuildCommentsPacket_Comment(const GCGuildCommentsPacket_Comment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCGuildCommentsPacket_Comment* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:network.GCGuildCommentsPacket.Comment)
}

inline void GCGuildCommentsPacket_Comment::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GCGuildCommentsPacket_Comment::~GCGuildCommentsPacket_Comment() {
  // @@protoc_insertion_point(destructor:network.GCGuildCommentsPacket.Comment)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCGuildCommentsPacket_Comment::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.message_.Destroy();
}

void GCGuildCommentsPacket_Comment::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCGuildCommentsPacket_Comment::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCGuildCommentsPacket.Comment)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.message_.ClearToEmpty();
  _impl_.id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCGuildCommentsPacket_Comment::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCGuildCommentsPacket_Comment::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCGuildCommentsPacket.Comment)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // bytes name = 2;
  if (!this->_internal_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_name(), target);
  }

  // bytes message = 3;
  if (!this->_internal_message().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCGuildCommentsPacket.Comment)
  return target;
}

size_t GCGuildCommentsPacket_Comment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCGuildCommentsPacket.Comment)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // bytes message = 3;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_message());
  }

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCGuildCommentsPacket_Comment::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCGuildCommentsPacket_Comment::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCGuildCommentsPacket_Comment::GetClassData() const { return &_class_data_; }


void GCGuildCommentsPacket_Comment::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCGuildCommentsPacket_Comment*>(&to_msg);
  auto& from = static_cast<const GCGuildCommentsPacket_Comment&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCGuildCommentsPacket.Comment)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCGuildCommentsPacket_Comment::CopyFrom(const GCGuildCommentsPacket_Comment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCGuildCommentsPacket.Comment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGuildCommentsPacket_Comment::IsInitialized() const {
  return true;
}

void GCGuildCommentsPacket_Comment::InternalSwap(GCGuildCommentsPacket_Comment* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GCGuildCommentsPacket_Comment::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[185]);
}

// ===================================================================

class GCGuildCommentsPacket::_Internal {
 public:
};

GCGuildCommentsPacket::GCGuildCommentsPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCGuildCommentsPacket)
}
GCGuildCommentsPacket::GCGuildCommentsPacket(const GCGuildCommentsPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCGuildCommentsPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.comments_){from._impl_.comments_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:network.GCGuildCommentsPacket)
}

inline void GCGuildCommentsPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.comments_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCGuildCommentsPacket::~GCGuildCommentsPacket() {
  // @@protoc_insertion_point(destructor:network.GCGuildCommentsPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCGuildCommentsPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.comments_.~RepeatedPtrField();
}

void GCGuildCommentsPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCGuildCommentsPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCGuildCommentsPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.comments_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCGuildCommentsPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .network.GCGuildCommentsPacket.Comment comments = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_comments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCGuildCommentsPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCGuildCommentsPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .network.GCGuildCommentsPacket.Comment comments = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_comments_size()); i < n; i++) {
    const auto& repfield = this->_internal_comments(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCGuildCommentsPacket)
  return target;
}

size_t GCGuildCommentsPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCGuildCommentsPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .network.GCGuildCommentsPacket.Comment comments = 1;
  total_size += 1UL * this->_internal_comments_size();
  for (const auto& msg : this->_impl_.comments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCGuildCommentsPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCGuildCommentsPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCGuildCommentsPacket::GetClassData() const { return &_class_data_; }


void GCGuildCommentsPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCGuildCommentsPacket*>(&to_msg);
  auto& from = static_cast<const GCGuildCommentsPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCGuildCommentsPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.comments_.MergeFrom(from._impl_.comments_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCGuildCommentsPacket::CopyFrom(const GCGuildCommentsPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCGuildCommentsPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGuildCommentsPacket::IsInitialized() const {
  return true;
}

void GCGuildCommentsPacket::InternalSwap(GCGuildCommentsPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.comments_.InternalSwap(&other->_impl_.comments_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GCGuildCommentsPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[186]);
}

// ===================================================================

class GCGuildChangeExpPacket::_Internal {
 public:
};

GCGuildChangeExpPacket::GCGuildChangeExpPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCGuildChangeExpPacket)
}
GCGuildChangeExpPacket::GCGuildChangeExpPacket(const GCGuildChangeExpPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCGuildChangeExpPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.level_){}
    , decltype(_impl_.exp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.level_, &from._impl_.level_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.exp_) -
    reinterpret_cast<char*>(&_impl_.level_)) + sizeof(_impl_.exp_));
  // @@protoc_insertion_point(copy_constructor:network.GCGuildChangeExpPacket)
}

inline void GCGuildChangeExpPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.level_){0u}
    , decltype(_impl_.exp_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCGuildChangeExpPacket::~GCGuildChangeExpPacket() {
  // @@protoc_insertion_point(destructor:network.GCGuildChangeExpPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCGuildChangeExpPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GCGuildChangeExpPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCGuildChangeExpPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCGuildChangeExpPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.exp_) -
      reinterpret_cast<char*>(&_impl_.level_)) + sizeof(_impl_.exp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCGuildChangeExpPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 exp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.exp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCGuildChangeExpPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCGuildChangeExpPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 level = 1;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_level(), target);
  }

  // uint32 exp = 2;
  if (this->_internal_exp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_exp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCGuildChangeExpPacket)
  return target;
}

size_t GCGuildChangeExpPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCGuildChangeExpPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 level = 1;
  if (this->_internal_level() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_level());
  }

  // uint32 exp = 2;
  if (this->_internal_exp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_exp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCGuildChangeExpPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCGuildChangeExpPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCGuildChangeExpPacket::GetClassData() const { return &_class_data_; }


void GCGuildChangeExpPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCGuildChangeExpPacket*>(&to_msg);
  auto& from = static_cast<const GCGuildChangeExpPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCGuildChangeExpPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  if (from._internal_exp() != 0) {
    _this->_internal_set_exp(from._internal_exp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCGuildChangeExpPacket::CopyFrom(const GCGuildChangeExpPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCGuildChangeExpPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGuildChangeExpPacket::IsInitialized() const {
  return true;
}

void GCGuildChangeExpPacket::InternalSwap(GCGuildChangeExpPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GCGuildChangeExpPacket, _impl_.exp_)
      + sizeof(GCGuildChangeExpPacket::_impl_.exp_)
      - PROTOBUF_FIELD_OFFSET(GCGuildChangeExpPacket, _impl_.level_)>(
          reinterpret_cast<char*>(&_impl_.level_),
          reinterpret_cast<char*>(&other->_impl_.level_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GCGuildChangeExpPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[187]);
}

// ===================================================================

class GCGuildChangeMemberGradePacket::_Internal {
 public:
};

GCGuildChangeMemberGradePacket::GCGuildChangeMemberGradePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCGuildChangeMemberGradePacket)
}
GCGuildChangeMemberGradePacket::GCGuildChangeMemberGradePacket(const GCGuildChangeMemberGradePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCGuildChangeMemberGradePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pid_){}
    , decltype(_impl_.grade_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.pid_, &from._impl_.pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.grade_) -
    reinterpret_cast<char*>(&_impl_.pid_)) + sizeof(_impl_.grade_));
  // @@protoc_insertion_point(copy_constructor:network.GCGuildChangeMemberGradePacket)
}

inline void GCGuildChangeMemberGradePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pid_){0u}
    , decltype(_impl_.grade_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCGuildChangeMemberGradePacket::~GCGuildChangeMemberGradePacket() {
  // @@protoc_insertion_point(destructor:network.GCGuildChangeMemberGradePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCGuildChangeMemberGradePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GCGuildChangeMemberGradePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCGuildChangeMemberGradePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCGuildChangeMemberGradePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.pid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.grade_) -
      reinterpret_cast<char*>(&_impl_.pid_)) + sizeof(_impl_.grade_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCGuildChangeMemberGradePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 grade = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.grade_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCGuildChangeMemberGradePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCGuildChangeMemberGradePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pid(), target);
  }

  // uint32 grade = 2;
  if (this->_internal_grade() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_grade(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCGuildChangeMemberGradePacket)
  return target;
}

size_t GCGuildChangeMemberGradePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCGuildChangeMemberGradePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid());
  }

  // uint32 grade = 2;
  if (this->_internal_grade() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_grade());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCGuildChangeMemberGradePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCGuildChangeMemberGradePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCGuildChangeMemberGradePacket::GetClassData() const { return &_class_data_; }


void GCGuildChangeMemberGradePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCGuildChangeMemberGradePacket*>(&to_msg);
  auto& from = static_cast<const GCGuildChangeMemberGradePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCGuildChangeMemberGradePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_pid() != 0) {
    _this->_internal_set_pid(from._internal_pid());
  }
  if (from._internal_grade() != 0) {
    _this->_internal_set_grade(from._internal_grade());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCGuildChangeMemberGradePacket::CopyFrom(const GCGuildChangeMemberGradePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCGuildChangeMemberGradePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGuildChangeMemberGradePacket::IsInitialized() const {
  return true;
}

void GCGuildChangeMemberGradePacket::InternalSwap(GCGuildChangeMemberGradePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GCGuildChangeMemberGradePacket, _impl_.grade_)
      + sizeof(GCGuildChangeMemberGradePacket::_impl_.grade_)
      - PROTOBUF_FIELD_OFFSET(GCGuildChangeMemberGradePacket, _impl_.pid_)>(
          reinterpret_cast<char*>(&_impl_.pid_),
          reinterpret_cast<char*>(&other->_impl_.pid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GCGuildChangeMemberGradePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[188]);
}

// ===================================================================

class GCGuildSkillInfoPacket::_Internal {
 public:
};

GCGuildSkillInfoPacket::GCGuildSkillInfoPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCGuildSkillInfoPacket)
}
GCGuildSkillInfoPacket::GCGuildSkillInfoPacket(const GCGuildSkillInfoPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCGuildSkillInfoPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.skill_levels_){from._impl_.skill_levels_}
    , /*decltype(_impl_._skill_levels_cached_byte_size_)*/{0}
    , decltype(_impl_.skill_point_){}
    , decltype(_impl_.guild_point_){}
    , decltype(_impl_.max_guild_point_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.skill_point_, &from._impl_.skill_point_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.max_guild_point_) -
    reinterpret_cast<char*>(&_impl_.skill_point_)) + sizeof(_impl_.max_guild_point_));
  // @@protoc_insertion_point(copy_constructor:network.GCGuildSkillInfoPacket)
}

inline void GCGuildSkillInfoPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.skill_levels_){arena}
    , /*decltype(_impl_._skill_levels_cached_byte_size_)*/{0}
    , decltype(_impl_.skill_point_){0u}
    , decltype(_impl_.guild_point_){0u}
    , decltype(_impl_.max_guild_point_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCGuildSkillInfoPacket::~GCGuildSkillInfoPacket() {
  // @@protoc_insertion_point(destructor:network.GCGuildSkillInfoPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCGuildSkillInfoPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.skill_levels_.~RepeatedField();
}

void GCGuildSkillInfoPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCGuildSkillInfoPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCGuildSkillInfoPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.skill_levels_.Clear();
  ::memset(&_impl_.skill_point_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.max_guild_point_) -
      reinterpret_cast<char*>(&_impl_.skill_point_)) + sizeof(_impl_.max_guild_point_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCGuildSkillInfoPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 skill_point = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.skill_point_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 skill_levels = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_skill_levels(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_skill_levels(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 guild_point = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.guild_point_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 max_guild_point = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.max_guild_point_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCGuildSkillInfoPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCGuildSkillInfoPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 skill_point = 1;
  if (this->_internal_skill_point() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_skill_point(), target);
  }

  // repeated uint32 skill_levels = 2;
  {
    int byte_size = _impl_._skill_levels_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          2, _internal_skill_levels(), byte_size, target);
    }
  }

  // uint32 guild_point = 3;
  if (this->_internal_guild_point() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_guild_point(), target);
  }

  // uint32 max_guild_point = 4;
  if (this->_internal_max_guild_point() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_max_guild_point(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCGuildSkillInfoPacket)
  return target;
}

size_t GCGuildSkillInfoPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCGuildSkillInfoPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 skill_levels = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.skill_levels_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._skill_levels_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint32 skill_point = 1;
  if (this->_internal_skill_point() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_skill_point());
  }

  // uint32 guild_point = 3;
  if (this->_internal_guild_point() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_guild_point());
  }

  // uint32 max_guild_point = 4;
  if (this->_internal_max_guild_point() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_max_guild_point());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCGuildSkillInfoPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCGuildSkillInfoPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCGuildSkillInfoPacket::GetClassData() const { return &_class_data_; }


void GCGuildSkillInfoPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCGuildSkillInfoPacket*>(&to_msg);
  auto& from = static_cast<const GCGuildSkillInfoPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCGuildSkillInfoPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.skill_levels_.MergeFrom(from._impl_.skill_levels_);
  if (from._internal_skill_point() != 0) {
    _this->_internal_set_skill_point(from._internal_skill_point());
  }
  if (from._internal_guild_point() != 0) {
    _this->_internal_set_guild_point(from._internal_guild_point());
  }
  if (from._internal_max_guild_point() != 0) {
    _this->_internal_set_max_guild_point(from._internal_max_guild_point());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCGuildSkillInfoPacket::CopyFrom(const GCGuildSkillInfoPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCGuildSkillInfoPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGuildSkillInfoPacket::IsInitialized() const {
  return true;
}

void GCGuildSkillInfoPacket::InternalSwap(GCGuildSkillInfoPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.skill_levels_.InternalSwap(&other->_impl_.skill_levels_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GCGuildSkillInfoPacket, _impl_.max_guild_point_)
      + sizeof(GCGuildSkillInfoPacket::_impl_.max_guild_point_)
      - PROTOBUF_FIELD_OFFSET(GCGuildSkillInfoPacket, _impl_.skill_point_)>(
          reinterpret_cast<char*>(&_impl_.skill_point_),
          reinterpret_cast<char*>(&other->_impl_.skill_point_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GCGuildSkillInfoPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[189]);
}

// ===================================================================

class GCGuildChangeMemberGeneralPacket::_Internal {
 public:
};

GCGuildChangeMemberGeneralPacket::GCGuildChangeMemberGeneralPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCGuildChangeMemberGeneralPacket)
}
GCGuildChangeMemberGeneralPacket::GCGuildChangeMemberGeneralPacket(const GCGuildChangeMemberGeneralPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCGuildChangeMemberGeneralPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pid_){}
    , decltype(_impl_.flag_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.pid_, &from._impl_.pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.flag_) -
    reinterpret_cast<char*>(&_impl_.pid_)) + sizeof(_impl_.flag_));
  // @@protoc_insertion_point(copy_constructor:network.GCGuildChangeMemberGeneralPacket)
}

inline void GCGuildChangeMemberGeneralPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pid_){0u}
    , decltype(_impl_.flag_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCGuildChangeMemberGeneralPacket::~GCGuildChangeMemberGeneralPacket() {
  // @@protoc_insertion_point(destructor:network.GCGuildChangeMemberGeneralPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCGuildChangeMemberGeneralPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GCGuildChangeMemberGeneralPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCGuildChangeMemberGeneralPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCGuildChangeMemberGeneralPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.pid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.flag_) -
      reinterpret_cast<char*>(&_impl_.pid_)) + sizeof(_impl_.flag_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCGuildChangeMemberGeneralPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool flag = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCGuildChangeMemberGeneralPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCGuildChangeMemberGeneralPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pid(), target);
  }

  // bool flag = 2;
  if (this->_internal_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_flag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCGuildChangeMemberGeneralPacket)
  return target;
}

size_t GCGuildChangeMemberGeneralPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCGuildChangeMemberGeneralPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid());
  }

  // bool flag = 2;
  if (this->_internal_flag() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCGuildChangeMemberGeneralPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCGuildChangeMemberGeneralPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCGuildChangeMemberGeneralPacket::GetClassData() const { return &_class_data_; }


void GCGuildChangeMemberGeneralPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCGuildChangeMemberGeneralPacket*>(&to_msg);
  auto& from = static_cast<const GCGuildChangeMemberGeneralPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCGuildChangeMemberGeneralPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_pid() != 0) {
    _this->_internal_set_pid(from._internal_pid());
  }
  if (from._internal_flag() != 0) {
    _this->_internal_set_flag(from._internal_flag());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCGuildChangeMemberGeneralPacket::CopyFrom(const GCGuildChangeMemberGeneralPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCGuildChangeMemberGeneralPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGuildChangeMemberGeneralPacket::IsInitialized() const {
  return true;
}

void GCGuildChangeMemberGeneralPacket::InternalSwap(GCGuildChangeMemberGeneralPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GCGuildChangeMemberGeneralPacket, _impl_.flag_)
      + sizeof(GCGuildChangeMemberGeneralPacket::_impl_.flag_)
      - PROTOBUF_FIELD_OFFSET(GCGuildChangeMemberGeneralPacket, _impl_.pid_)>(
          reinterpret_cast<char*>(&_impl_.pid_),
          reinterpret_cast<char*>(&other->_impl_.pid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GCGuildChangeMemberGeneralPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[190]);
}

// ===================================================================

class GCGuildInvitePacket::_Internal {
 public:
};

GCGuildInvitePacket::GCGuildInvitePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCGuildInvitePacket)
}
GCGuildInvitePacket::GCGuildInvitePacket(const GCGuildInvitePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCGuildInvitePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.guild_name_){}
    , decltype(_impl_.guild_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.guild_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.guild_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_guild_name().empty()) {
    _this->_impl_.guild_name_.Set(from._internal_guild_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.guild_id_ = from._impl_.guild_id_;
  // @@protoc_insertion_point(copy_constructor:network.GCGuildInvitePacket)
}

inline void GCGuildInvitePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.guild_name_){}
    , decltype(_impl_.guild_id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.guild_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.guild_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GCGuildInvitePacket::~GCGuildInvitePacket() {
  // @@protoc_insertion_point(destructor:network.GCGuildInvitePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCGuildInvitePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.guild_name_.Destroy();
}

void GCGuildInvitePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCGuildInvitePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCGuildInvitePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.guild_name_.ClearToEmpty();
  _impl_.guild_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCGuildInvitePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 guild_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes guild_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_guild_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCGuildInvitePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCGuildInvitePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 guild_id = 1;
  if (this->_internal_guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_guild_id(), target);
  }

  // bytes guild_name = 2;
  if (!this->_internal_guild_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_guild_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCGuildInvitePacket)
  return target;
}

size_t GCGuildInvitePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCGuildInvitePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes guild_name = 2;
  if (!this->_internal_guild_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_guild_name());
  }

  // uint32 guild_id = 1;
  if (this->_internal_guild_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_guild_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCGuildInvitePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCGuildInvitePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCGuildInvitePacket::GetClassData() const { return &_class_data_; }


void GCGuildInvitePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCGuildInvitePacket*>(&to_msg);
  auto& from = static_cast<const GCGuildInvitePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCGuildInvitePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_guild_name().empty()) {
    _this->_internal_set_guild_name(from._internal_guild_name());
  }
  if (from._internal_guild_id() != 0) {
    _this->_internal_set_guild_id(from._internal_guild_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCGuildInvitePacket::CopyFrom(const GCGuildInvitePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCGuildInvitePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGuildInvitePacket::IsInitialized() const {
  return true;
}

void GCGuildInvitePacket::InternalSwap(GCGuildInvitePacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.guild_name_, lhs_arena,
      &other->_impl_.guild_name_, rhs_arena
  );
  swap(_impl_.guild_id_, other->_impl_.guild_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GCGuildInvitePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[191]);
}

// ===================================================================

class GCGuildMemberLastPlayedPacket_MemberInfo::_Internal {
 public:
};

GCGuildMemberLastPlayedPacket_MemberInfo::GCGuildMemberLastPlayedPacket_MemberInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCGuildMemberLastPlayedPacket.MemberInfo)
}
GCGuildMemberLastPlayedPacket_MemberInfo::GCGuildMemberLastPlayedPacket_MemberInfo(const GCGuildMemberLastPlayedPacket_MemberInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCGuildMemberLastPlayedPacket_MemberInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pid_){}
    , decltype(_impl_.timestamp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.pid_, &from._impl_.pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.timestamp_) -
    reinterpret_cast<char*>(&_impl_.pid_)) + sizeof(_impl_.timestamp_));
  // @@protoc_insertion_point(copy_constructor:network.GCGuildMemberLastPlayedPacket.MemberInfo)
}

inline void GCGuildMemberLastPlayedPacket_MemberInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pid_){0u}
    , decltype(_impl_.timestamp_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCGuildMemberLastPlayedPacket_MemberInfo::~GCGuildMemberLastPlayedPacket_MemberInfo() {
  // @@protoc_insertion_point(destructor:network.GCGuildMemberLastPlayedPacket.MemberInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCGuildMemberLastPlayedPacket_MemberInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GCGuildMemberLastPlayedPacket_MemberInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCGuildMemberLastPlayedPacket_MemberInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCGuildMemberLastPlayedPacket.MemberInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.pid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.timestamp_) -
      reinterpret_cast<char*>(&_impl_.pid_)) + sizeof(_impl_.timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCGuildMemberLastPlayedPacket_MemberInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCGuildMemberLastPlayedPacket_MemberInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCGuildMemberLastPlayedPacket.MemberInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pid(), target);
  }

  // uint32 timestamp = 2;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCGuildMemberLastPlayedPacket.MemberInfo)
  return target;
}

size_t GCGuildMemberLastPlayedPacket_MemberInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCGuildMemberLastPlayedPacket.MemberInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 pid = 1;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid());
  }

  // uint32 timestamp = 2;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCGuildMemberLastPlayedPacket_MemberInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCGuildMemberLastPlayedPacket_MemberInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCGuildMemberLastPlayedPacket_MemberInfo::GetClassData() const { return &_class_data_; }


void GCGuildMemberLastPlayedPacket_MemberInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCGuildMemberLastPlayedPacket_MemberInfo*>(&to_msg);
  auto& from = static_cast<const GCGuildMemberLastPlayedPacket_MemberInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCGuildMemberLastPlayedPacket.MemberInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_pid() != 0) {
    _this->_internal_set_pid(from._internal_pid());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCGuildMemberLastPlayedPacket_MemberInfo::CopyFrom(const GCGuildMemberLastPlayedPacket_MemberInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCGuildMemberLastPlayedPacket.MemberInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGuildMemberLastPlayedPacket_MemberInfo::IsInitialized() const {
  return true;
}

void GCGuildMemberLastPlayedPacket_MemberInfo::InternalSwap(GCGuildMemberLastPlayedPacket_MemberInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GCGuildMemberLastPlayedPacket_MemberInfo, _impl_.timestamp_)
      + sizeof(GCGuildMemberLastPlayedPacket_MemberInfo::_impl_.timestamp_)
      - PROTOBUF_FIELD_OFFSET(GCGuildMemberLastPlayedPacket_MemberInfo, _impl_.pid_)>(
          reinterpret_cast<char*>(&_impl_.pid_),
          reinterpret_cast<char*>(&other->_impl_.pid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GCGuildMemberLastPlayedPacket_MemberInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[192]);
}

// ===================================================================

class GCGuildMemberLastPlayedPacket::_Internal {
 public:
};

GCGuildMemberLastPlayedPacket::GCGuildMemberLastPlayedPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCGuildMemberLastPlayedPacket)
}
GCGuildMemberLastPlayedPacket::GCGuildMemberLastPlayedPacket(const GCGuildMemberLastPlayedPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCGuildMemberLastPlayedPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.members_){from._impl_.members_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:network.GCGuildMemberLastPlayedPacket)
}

inline void GCGuildMemberLastPlayedPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.members_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCGuildMemberLastPlayedPacket::~GCGuildMemberLastPlayedPacket() {
  // @@protoc_insertion_point(destructor:network.GCGuildMemberLastPlayedPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCGuildMemberLastPlayedPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.members_.~RepeatedPtrField();
}

void GCGuildMemberLastPlayedPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCGuildMemberLastPlayedPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCGuildMemberLastPlayedPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.members_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCGuildMemberLastPlayedPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .network.GCGuildMemberLastPlayedPacket.MemberInfo members = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_members(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCGuildMemberLastPlayedPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCGuildMemberLastPlayedPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .network.GCGuildMemberLastPlayedPacket.MemberInfo members = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_members_size()); i < n; i++) {
    const auto& repfield = this->_internal_members(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCGuildMemberLastPlayedPacket)
  return target;
}

size_t GCGuildMemberLastPlayedPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCGuildMemberLastPlayedPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .network.GCGuildMemberLastPlayedPacket.MemberInfo members = 1;
  total_size += 1UL * this->_internal_members_size();
  for (const auto& msg : this->_impl_.members_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCGuildMemberLastPlayedPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCGuildMemberLastPlayedPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCGuildMemberLastPlayedPacket::GetClassData() const { return &_class_data_; }


void GCGuildMemberLastPlayedPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCGuildMemberLastPlayedPacket*>(&to_msg);
  auto& from = static_cast<const GCGuildMemberLastPlayedPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCGuildMemberLastPlayedPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.members_.MergeFrom(from._impl_.members_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCGuildMemberLastPlayedPacket::CopyFrom(const GCGuildMemberLastPlayedPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCGuildMemberLastPlayedPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGuildMemberLastPlayedPacket::IsInitialized() const {
  return true;
}

void GCGuildMemberLastPlayedPacket::InternalSwap(GCGuildMemberLastPlayedPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.members_.InternalSwap(&other->_impl_.members_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GCGuildMemberLastPlayedPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[193]);
}

// ===================================================================

class GCGuildBattleStatsPacket::_Internal {
 public:
};

GCGuildBattleStatsPacket::GCGuildBattleStatsPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCGuildBattleStatsPacket)
}
GCGuildBattleStatsPacket::GCGuildBattleStatsPacket(const GCGuildBattleStatsPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCGuildBattleStatsPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.wins_){from._impl_.wins_}
    , /*decltype(_impl_._wins_cached_byte_size_)*/{0}
    , decltype(_impl_.draws_){from._impl_.draws_}
    , /*decltype(_impl_._draws_cached_byte_size_)*/{0}
    , decltype(_impl_.losses_){from._impl_.losses_}
    , /*decltype(_impl_._losses_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:network.GCGuildBattleStatsPacket)
}

inline void GCGuildBattleStatsPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.wins_){arena}
    , /*decltype(_impl_._wins_cached_byte_size_)*/{0}
    , decltype(_impl_.draws_){arena}
    , /*decltype(_impl_._draws_cached_byte_size_)*/{0}
    , decltype(_impl_.losses_){arena}
    , /*decltype(_impl_._losses_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCGuildBattleStatsPacket::~GCGuildBattleStatsPacket() {
  // @@protoc_insertion_point(destructor:network.GCGuildBattleStatsPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCGuildBattleStatsPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.wins_.~RepeatedField();
  _impl_.draws_.~RepeatedField();
  _impl_.losses_.~RepeatedField();
}

void GCGuildBattleStatsPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCGuildBattleStatsPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCGuildBattleStatsPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.wins_.Clear();
  _impl_.draws_.Clear();
  _impl_.losses_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCGuildBattleStatsPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 wins = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_wins(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_wins(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 draws = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_draws(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_draws(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 losses = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_losses(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_losses(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCGuildBattleStatsPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCGuildBattleStatsPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 wins = 1;
  {
    int byte_size = _impl_._wins_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_wins(), byte_size, target);
    }
  }

  // repeated int32 draws = 2;
  {
    int byte_size = _impl_._draws_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_draws(), byte_size, target);
    }
  }

  // repeated int32 losses = 3;
  {
    int byte_size = _impl_._losses_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_losses(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCGuildBattleStatsPacket)
  return target;
}

size_t GCGuildBattleStatsPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCGuildBattleStatsPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 wins = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.wins_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._wins_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 draws = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.draws_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._draws_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 losses = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.losses_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._losses_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCGuildBattleStatsPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCGuildBattleStatsPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCGuildBattleStatsPacket::GetClassData() const { return &_class_data_; }


void GCGuildBattleStatsPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCGuildBattleStatsPacket*>(&to_msg);
  auto& from = static_cast<const GCGuildBattleStatsPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCGuildBattleStatsPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.wins_.MergeFrom(from._impl_.wins_);
  _this->_impl_.draws_.MergeFrom(from._impl_.draws_);
  _this->_impl_.losses_.MergeFrom(from._impl_.losses_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCGuildBattleStatsPacket::CopyFrom(const GCGuildBattleStatsPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCGuildBattleStatsPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGuildBattleStatsPacket::IsInitialized() const {
  return true;
}

void GCGuildBattleStatsPacket::InternalSwap(GCGuildBattleStatsPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.wins_.InternalSwap(&other->_impl_.wins_);
  _impl_.draws_.InternalSwap(&other->_impl_.draws_);
  _impl_.losses_.InternalSwap(&other->_impl_.losses_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GCGuildBattleStatsPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[194]);
}

// ===================================================================

class GCGuildWarPacket::_Internal {
 public:
};

GCGuildWarPacket::GCGuildWarPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCGuildWarPacket)
}
GCGuildWarPacket::GCGuildWarPacket(const GCGuildWarPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCGuildWarPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.guild_self_){}
    , decltype(_impl_.guild_opponent_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.war_state_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.guild_self_, &from._impl_.guild_self_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.war_state_) -
    reinterpret_cast<char*>(&_impl_.guild_self_)) + sizeof(_impl_.war_state_));
  // @@protoc_insertion_point(copy_constructor:network.GCGuildWarPacket)
}

inline void GCGuildWarPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.guild_self_){0u}
    , decltype(_impl_.guild_opponent_){0u}
    , decltype(_impl_.type_){0u}
    , decltype(_impl_.war_state_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCGuildWarPacket::~GCGuildWarPacket() {
  // @@protoc_insertion_point(destructor:network.GCGuildWarPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCGuildWarPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GCGuildWarPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCGuildWarPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCGuildWarPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.guild_self_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.war_state_) -
      reinterpret_cast<char*>(&_impl_.guild_self_)) + sizeof(_impl_.war_state_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCGuildWarPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 guild_self = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.guild_self_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 guild_opponent = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.guild_opponent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 war_state = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.war_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCGuildWarPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCGuildWarPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 guild_self = 1;
  if (this->_internal_guild_self() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_guild_self(), target);
  }

  // uint32 guild_opponent = 2;
  if (this->_internal_guild_opponent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_guild_opponent(), target);
  }

  // uint32 type = 3;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_type(), target);
  }

  // uint32 war_state = 4;
  if (this->_internal_war_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_war_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCGuildWarPacket)
  return target;
}

size_t GCGuildWarPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCGuildWarPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 guild_self = 1;
  if (this->_internal_guild_self() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_guild_self());
  }

  // uint32 guild_opponent = 2;
  if (this->_internal_guild_opponent() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_guild_opponent());
  }

  // uint32 type = 3;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
  }

  // uint32 war_state = 4;
  if (this->_internal_war_state() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_war_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCGuildWarPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCGuildWarPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCGuildWarPacket::GetClassData() const { return &_class_data_; }


void GCGuildWarPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCGuildWarPacket*>(&to_msg);
  auto& from = static_cast<const GCGuildWarPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCGuildWarPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_guild_self() != 0) {
    _this->_internal_set_guild_self(from._internal_guild_self());
  }
  if (from._internal_guild_opponent() != 0) {
    _this->_internal_set_guild_opponent(from._internal_guild_opponent());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_war_state() != 0) {
    _this->_internal_set_war_state(from._internal_war_state());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCGuildWarPacket::CopyFrom(const GCGuildWarPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCGuildWarPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGuildWarPacket::IsInitialized() const {
  return true;
}

void GCGuildWarPacket::InternalSwap(GCGuildWarPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GCGuildWarPacket, _impl_.war_state_)
      + sizeof(GCGuildWarPacket::_impl_.war_state_)
      - PROTOBUF_FIELD_OFFSET(GCGuildWarPacket, _impl_.guild_self_)>(
          reinterpret_cast<char*>(&_impl_.guild_self_),
          reinterpret_cast<char*>(&other->_impl_.guild_self_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GCGuildWarPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[195]);
}

// ===================================================================

class GCGuildNamePacket_NameInfo::_Internal {
 public:
};

GCGuildNamePacket_NameInfo::GCGuildNamePacket_NameInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCGuildNamePacket.NameInfo)
}
GCGuildNamePacket_NameInfo::GCGuildNamePacket_NameInfo(const GCGuildNamePacket_NameInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCGuildNamePacket_NameInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.guild_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.guild_id_ = from._impl_.guild_id_;
  // @@protoc_insertion_point(copy_constructor:network.GCGuildNamePacket.NameInfo)
}

inline void GCGuildNamePacket_NameInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.guild_id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GCGuildNamePacket_NameInfo::~GCGuildNamePacket_NameInfo() {
  // @@protoc_insertion_point(destructor:network.GCGuildNamePacket.NameInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCGuildNamePacket_NameInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void GCGuildNamePacket_NameInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCGuildNamePacket_NameInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCGuildNamePacket.NameInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.guild_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCGuildNamePacket_NameInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 guild_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCGuildNamePacket_NameInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCGuildNamePacket.NameInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 guild_id = 1;
  if (this->_internal_guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_guild_id(), target);
  }

  // bytes name = 2;
  if (!this->_internal_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCGuildNamePacket.NameInfo)
  return target;
}

size_t GCGuildNamePacket_NameInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCGuildNamePacket.NameInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // uint32 guild_id = 1;
  if (this->_internal_guild_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_guild_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCGuildNamePacket_NameInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCGuildNamePacket_NameInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCGuildNamePacket_NameInfo::GetClassData() const { return &_class_data_; }


void GCGuildNamePacket_NameInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCGuildNamePacket_NameInfo*>(&to_msg);
  auto& from = static_cast<const GCGuildNamePacket_NameInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCGuildNamePacket.NameInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_guild_id() != 0) {
    _this->_internal_set_guild_id(from._internal_guild_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCGuildNamePacket_NameInfo::CopyFrom(const GCGuildNamePacket_NameInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCGuildNamePacket.NameInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGuildNamePacket_NameInfo::IsInitialized() const {
  return true;
}

void GCGuildNamePacket_NameInfo::InternalSwap(GCGuildNamePacket_NameInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.guild_id_, other->_impl_.guild_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GCGuildNamePacket_NameInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[196]);
}

// ===================================================================

class GCGuildNamePacket::_Internal {
 public:
};

GCGuildNamePacket::GCGuildNamePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCGuildNamePacket)
}
GCGuildNamePacket::GCGuildNamePacket(const GCGuildNamePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCGuildNamePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.names_){from._impl_.names_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:network.GCGuildNamePacket)
}

inline void GCGuildNamePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.names_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCGuildNamePacket::~GCGuildNamePacket() {
  // @@protoc_insertion_point(destructor:network.GCGuildNamePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCGuildNamePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.names_.~RepeatedPtrField();
}

void GCGuildNamePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCGuildNamePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCGuildNamePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.names_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCGuildNamePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .network.GCGuildNamePacket.NameInfo names = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_names(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCGuildNamePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCGuildNamePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .network.GCGuildNamePacket.NameInfo names = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_names_size()); i < n; i++) {
    const auto& repfield = this->_internal_names(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCGuildNamePacket)
  return target;
}

size_t GCGuildNamePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCGuildNamePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .network.GCGuildNamePacket.NameInfo names = 1;
  total_size += 1UL * this->_internal_names_size();
  for (const auto& msg : this->_impl_.names_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCGuildNamePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCGuildNamePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCGuildNamePacket::GetClassData() const { return &_class_data_; }


void GCGuildNamePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCGuildNamePacket*>(&to_msg);
  auto& from = static_cast<const GCGuildNamePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCGuildNamePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.names_.MergeFrom(from._impl_.names_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCGuildNamePacket::CopyFrom(const GCGuildNamePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCGuildNamePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGuildNamePacket::IsInitialized() const {
  return true;
}

void GCGuildNamePacket::InternalSwap(GCGuildNamePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.names_.InternalSwap(&other->_impl_.names_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GCGuildNamePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[197]);
}

// ===================================================================

class GCGuildWarListPacket_WarInfo::_Internal {
 public:
};

GCGuildWarListPacket_WarInfo::GCGuildWarListPacket_WarInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCGuildWarListPacket.WarInfo)
}
GCGuildWarListPacket_WarInfo::GCGuildWarListPacket_WarInfo(const GCGuildWarListPacket_WarInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCGuildWarListPacket_WarInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.src_guild_id_){}
    , decltype(_impl_.dst_guild_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.src_guild_id_, &from._impl_.src_guild_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.dst_guild_id_) -
    reinterpret_cast<char*>(&_impl_.src_guild_id_)) + sizeof(_impl_.dst_guild_id_));
  // @@protoc_insertion_point(copy_constructor:network.GCGuildWarListPacket.WarInfo)
}

inline void GCGuildWarListPacket_WarInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.src_guild_id_){0u}
    , decltype(_impl_.dst_guild_id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCGuildWarListPacket_WarInfo::~GCGuildWarListPacket_WarInfo() {
  // @@protoc_insertion_point(destructor:network.GCGuildWarListPacket.WarInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCGuildWarListPacket_WarInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GCGuildWarListPacket_WarInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCGuildWarListPacket_WarInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCGuildWarListPacket.WarInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.src_guild_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.dst_guild_id_) -
      reinterpret_cast<char*>(&_impl_.src_guild_id_)) + sizeof(_impl_.dst_guild_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCGuildWarListPacket_WarInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 src_guild_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.src_guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 dst_guild_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.dst_guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCGuildWarListPacket_WarInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCGuildWarListPacket.WarInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 src_guild_id = 1;
  if (this->_internal_src_guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_src_guild_id(), target);
  }

  // uint32 dst_guild_id = 2;
  if (this->_internal_dst_guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_dst_guild_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCGuildWarListPacket.WarInfo)
  return target;
}

size_t GCGuildWarListPacket_WarInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCGuildWarListPacket.WarInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 src_guild_id = 1;
  if (this->_internal_src_guild_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_src_guild_id());
  }

  // uint32 dst_guild_id = 2;
  if (this->_internal_dst_guild_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_dst_guild_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCGuildWarListPacket_WarInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCGuildWarListPacket_WarInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCGuildWarListPacket_WarInfo::GetClassData() const { return &_class_data_; }


void GCGuildWarListPacket_WarInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCGuildWarListPacket_WarInfo*>(&to_msg);
  auto& from = static_cast<const GCGuildWarListPacket_WarInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCGuildWarListPacket.WarInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_src_guild_id() != 0) {
    _this->_internal_set_src_guild_id(from._internal_src_guild_id());
  }
  if (from._internal_dst_guild_id() != 0) {
    _this->_internal_set_dst_guild_id(from._internal_dst_guild_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCGuildWarListPacket_WarInfo::CopyFrom(const GCGuildWarListPacket_WarInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCGuildWarListPacket.WarInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGuildWarListPacket_WarInfo::IsInitialized() const {
  return true;
}

void GCGuildWarListPacket_WarInfo::InternalSwap(GCGuildWarListPacket_WarInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GCGuildWarListPacket_WarInfo, _impl_.dst_guild_id_)
      + sizeof(GCGuildWarListPacket_WarInfo::_impl_.dst_guild_id_)
      - PROTOBUF_FIELD_OFFSET(GCGuildWarListPacket_WarInfo, _impl_.src_guild_id_)>(
          reinterpret_cast<char*>(&_impl_.src_guild_id_),
          reinterpret_cast<char*>(&other->_impl_.src_guild_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GCGuildWarListPacket_WarInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[198]);
}

// ===================================================================

class GCGuildWarListPacket::_Internal {
 public:
};

GCGuildWarListPacket::GCGuildWarListPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCGuildWarListPacket)
}
GCGuildWarListPacket::GCGuildWarListPacket(const GCGuildWarListPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCGuildWarListPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.wars_){from._impl_.wars_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:network.GCGuildWarListPacket)
}

inline void GCGuildWarListPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.wars_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCGuildWarListPacket::~GCGuildWarListPacket() {
  // @@protoc_insertion_point(destructor:network.GCGuildWarListPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCGuildWarListPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.wars_.~RepeatedPtrField();
}

void GCGuildWarListPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCGuildWarListPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCGuildWarListPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.wars_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCGuildWarListPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .network.GCGuildWarListPacket.WarInfo wars = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_wars(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCGuildWarListPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCGuildWarListPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .network.GCGuildWarListPacket.WarInfo wars = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_wars_size()); i < n; i++) {
    const auto& repfield = this->_internal_wars(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCGuildWarListPacket)
  return target;
}

size_t GCGuildWarListPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCGuildWarListPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .network.GCGuildWarListPacket.WarInfo wars = 1;
  total_size += 1UL * this->_internal_wars_size();
  for (const auto& msg : this->_impl_.wars_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCGuildWarListPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCGuildWarListPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCGuildWarListPacket::GetClassData() const { return &_class_data_; }


void GCGuildWarListPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCGuildWarListPacket*>(&to_msg);
  auto& from = static_cast<const GCGuildWarListPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCGuildWarListPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.wars_.MergeFrom(from._impl_.wars_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCGuildWarListPacket::CopyFrom(const GCGuildWarListPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCGuildWarListPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGuildWarListPacket::IsInitialized() const {
  return true;
}

void GCGuildWarListPacket::InternalSwap(GCGuildWarListPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.wars_.InternalSwap(&other->_impl_.wars_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GCGuildWarListPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[199]);
}

// ===================================================================

class GCGuildWarEndListPacket::_Internal {
 public:
};

GCGuildWarEndListPacket::GCGuildWarEndListPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCGuildWarEndListPacket)
}
GCGuildWarEndListPacket::GCGuildWarEndListPacket(const GCGuildWarEndListPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCGuildWarEndListPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.wars_){from._impl_.wars_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:network.GCGuildWarEndListPacket)
}

inline void GCGuildWarEndListPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.wars_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCGuildWarEndListPacket::~GCGuildWarEndListPacket() {
  // @@protoc_insertion_point(destructor:network.GCGuildWarEndListPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCGuildWarEndListPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.wars_.~RepeatedPtrField();
}

void GCGuildWarEndListPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCGuildWarEndListPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCGuildWarEndListPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.wars_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCGuildWarEndListPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .network.GCGuildWarListPacket.WarInfo wars = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_wars(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCGuildWarEndListPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCGuildWarEndListPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .network.GCGuildWarListPacket.WarInfo wars = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_wars_size()); i < n; i++) {
    const auto& repfield = this->_internal_wars(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCGuildWarEndListPacket)
  return target;
}

size_t GCGuildWarEndListPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCGuildWarEndListPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .network.GCGuildWarListPacket.WarInfo wars = 1;
  total_size += 1UL * this->_internal_wars_size();
  for (const auto& msg : this->_impl_.wars_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCGuildWarEndListPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCGuildWarEndListPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCGuildWarEndListPacket::GetClassData() const { return &_class_data_; }


void GCGuildWarEndListPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCGuildWarEndListPacket*>(&to_msg);
  auto& from = static_cast<const GCGuildWarEndListPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCGuildWarEndListPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.wars_.MergeFrom(from._impl_.wars_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCGuildWarEndListPacket::CopyFrom(const GCGuildWarEndListPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCGuildWarEndListPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGuildWarEndListPacket::IsInitialized() const {
  return true;
}

void GCGuildWarEndListPacket::InternalSwap(GCGuildWarEndListPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.wars_.InternalSwap(&other->_impl_.wars_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GCGuildWarEndListPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[200]);
}

// ===================================================================

class GCGuildWarPointPacket::_Internal {
 public:
};

GCGuildWarPointPacket::GCGuildWarPointPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCGuildWarPointPacket)
}
GCGuildWarPointPacket::GCGuildWarPointPacket(const GCGuildWarPointPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCGuildWarPointPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.gain_guild_id_){}
    , decltype(_impl_.opponent_guild_id_){}
    , decltype(_impl_.point_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.gain_guild_id_, &from._impl_.gain_guild_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.point_) -
    reinterpret_cast<char*>(&_impl_.gain_guild_id_)) + sizeof(_impl_.point_));
  // @@protoc_insertion_point(copy_constructor:network.GCGuildWarPointPacket)
}

inline void GCGuildWarPointPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.gain_guild_id_){0u}
    , decltype(_impl_.opponent_guild_id_){0u}
    , decltype(_impl_.point_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCGuildWarPointPacket::~GCGuildWarPointPacket() {
  // @@protoc_insertion_point(destructor:network.GCGuildWarPointPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCGuildWarPointPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GCGuildWarPointPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCGuildWarPointPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCGuildWarPointPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.gain_guild_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.point_) -
      reinterpret_cast<char*>(&_impl_.gain_guild_id_)) + sizeof(_impl_.point_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCGuildWarPointPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 gain_guild_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.gain_guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 opponent_guild_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.opponent_guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 point = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.point_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCGuildWarPointPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCGuildWarPointPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 gain_guild_id = 1;
  if (this->_internal_gain_guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_gain_guild_id(), target);
  }

  // uint32 opponent_guild_id = 2;
  if (this->_internal_opponent_guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_opponent_guild_id(), target);
  }

  // int32 point = 3;
  if (this->_internal_point() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_point(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCGuildWarPointPacket)
  return target;
}

size_t GCGuildWarPointPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCGuildWarPointPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 gain_guild_id = 1;
  if (this->_internal_gain_guild_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_gain_guild_id());
  }

  // uint32 opponent_guild_id = 2;
  if (this->_internal_opponent_guild_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_opponent_guild_id());
  }

  // int32 point = 3;
  if (this->_internal_point() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_point());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCGuildWarPointPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCGuildWarPointPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCGuildWarPointPacket::GetClassData() const { return &_class_data_; }


void GCGuildWarPointPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCGuildWarPointPacket*>(&to_msg);
  auto& from = static_cast<const GCGuildWarPointPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCGuildWarPointPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_gain_guild_id() != 0) {
    _this->_internal_set_gain_guild_id(from._internal_gain_guild_id());
  }
  if (from._internal_opponent_guild_id() != 0) {
    _this->_internal_set_opponent_guild_id(from._internal_opponent_guild_id());
  }
  if (from._internal_point() != 0) {
    _this->_internal_set_point(from._internal_point());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCGuildWarPointPacket::CopyFrom(const GCGuildWarPointPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCGuildWarPointPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGuildWarPointPacket::IsInitialized() const {
  return true;
}

void GCGuildWarPointPacket::InternalSwap(GCGuildWarPointPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GCGuildWarPointPacket, _impl_.point_)
      + sizeof(GCGuildWarPointPacket::_impl_.point_)
      - PROTOBUF_FIELD_OFFSET(GCGuildWarPointPacket, _impl_.gain_guild_id_)>(
          reinterpret_cast<char*>(&_impl_.gain_guild_id_),
          reinterpret_cast<char*>(&other->_impl_.gain_guild_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GCGuildWarPointPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[201]);
}

// ===================================================================

class GCGuildMoneyChangePacket::_Internal {
 public:
};

GCGuildMoneyChangePacket::GCGuildMoneyChangePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCGuildMoneyChangePacket)
}
GCGuildMoneyChangePacket::GCGuildMoneyChangePacket(const GCGuildMoneyChangePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCGuildMoneyChangePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.gold_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.gold_ = from._impl_.gold_;
  // @@protoc_insertion_point(copy_constructor:network.GCGuildMoneyChangePacket)
}

inline void GCGuildMoneyChangePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.gold_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCGuildMoneyChangePacket::~GCGuildMoneyChangePacket() {
  // @@protoc_insertion_point(destructor:network.GCGuildMoneyChangePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCGuildMoneyChangePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GCGuildMoneyChangePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCGuildMoneyChangePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCGuildMoneyChangePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.gold_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCGuildMoneyChangePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 gold = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCGuildMoneyChangePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCGuildMoneyChangePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 gold = 1;
  if (this->_internal_gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_gold(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCGuildMoneyChangePacket)
  return target;
}

size_t GCGuildMoneyChangePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCGuildMoneyChangePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 gold = 1;
  if (this->_internal_gold() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_gold());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCGuildMoneyChangePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCGuildMoneyChangePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCGuildMoneyChangePacket::GetClassData() const { return &_class_data_; }


void GCGuildMoneyChangePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCGuildMoneyChangePacket*>(&to_msg);
  auto& from = static_cast<const GCGuildMoneyChangePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCGuildMoneyChangePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_gold() != 0) {
    _this->_internal_set_gold(from._internal_gold());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCGuildMoneyChangePacket::CopyFrom(const GCGuildMoneyChangePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCGuildMoneyChangePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGuildMoneyChangePacket::IsInitialized() const {
  return true;
}

void GCGuildMoneyChangePacket::InternalSwap(GCGuildMoneyChangePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.gold_, other->_impl_.gold_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GCGuildMoneyChangePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[202]);
}

// ===================================================================

class GCGuildSafeboxOpenPacket::_Internal {
 public:
};

GCGuildSafeboxOpenPacket::GCGuildSafeboxOpenPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCGuildSafeboxOpenPacket)
}
GCGuildSafeboxOpenPacket::GCGuildSafeboxOpenPacket(const GCGuildSafeboxOpenPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCGuildSafeboxOpenPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.size_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.size_ = from._impl_.size_;
  // @@protoc_insertion_point(copy_constructor:network.GCGuildSafeboxOpenPacket)
}

inline void GCGuildSafeboxOpenPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.size_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCGuildSafeboxOpenPacket::~GCGuildSafeboxOpenPacket() {
  // @@protoc_insertion_point(destructor:network.GCGuildSafeboxOpenPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCGuildSafeboxOpenPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GCGuildSafeboxOpenPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCGuildSafeboxOpenPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCGuildSafeboxOpenPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.size_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCGuildSafeboxOpenPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCGuildSafeboxOpenPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCGuildSafeboxOpenPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 size = 1;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCGuildSafeboxOpenPacket)
  return target;
}

size_t GCGuildSafeboxOpenPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCGuildSafeboxOpenPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 size = 1;
  if (this->_internal_size() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCGuildSafeboxOpenPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCGuildSafeboxOpenPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCGuildSafeboxOpenPacket::GetClassData() const { return &_class_data_; }


void GCGuildSafeboxOpenPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCGuildSafeboxOpenPacket*>(&to_msg);
  auto& from = static_cast<const GCGuildSafeboxOpenPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCGuildSafeboxOpenPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_size() != 0) {
    _this->_internal_set_size(from._internal_size());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCGuildSafeboxOpenPacket::CopyFrom(const GCGuildSafeboxOpenPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCGuildSafeboxOpenPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGuildSafeboxOpenPacket::IsInitialized() const {
  return true;
}

void GCGuildSafeboxOpenPacket::InternalSwap(GCGuildSafeboxOpenPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.size_, other->_impl_.size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GCGuildSafeboxOpenPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[203]);
}

// ===================================================================

class GCGuildSafeboxGoldPacket::_Internal {
 public:
};

GCGuildSafeboxGoldPacket::GCGuildSafeboxGoldPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCGuildSafeboxGoldPacket)
}
GCGuildSafeboxGoldPacket::GCGuildSafeboxGoldPacket(const GCGuildSafeboxGoldPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCGuildSafeboxGoldPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.gold_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.gold_ = from._impl_.gold_;
  // @@protoc_insertion_point(copy_constructor:network.GCGuildSafeboxGoldPacket)
}

inline void GCGuildSafeboxGoldPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.gold_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCGuildSafeboxGoldPacket::~GCGuildSafeboxGoldPacket() {
  // @@protoc_insertion_point(destructor:network.GCGuildSafeboxGoldPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCGuildSafeboxGoldPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GCGuildSafeboxGoldPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCGuildSafeboxGoldPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCGuildSafeboxGoldPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.gold_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCGuildSafeboxGoldPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 gold = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCGuildSafeboxGoldPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCGuildSafeboxGoldPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 gold = 1;
  if (this->_internal_gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_gold(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCGuildSafeboxGoldPacket)
  return target;
}

size_t GCGuildSafeboxGoldPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCGuildSafeboxGoldPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 gold = 1;
  if (this->_internal_gold() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_gold());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCGuildSafeboxGoldPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCGuildSafeboxGoldPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCGuildSafeboxGoldPacket::GetClassData() const { return &_class_data_; }


void GCGuildSafeboxGoldPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCGuildSafeboxGoldPacket*>(&to_msg);
  auto& from = static_cast<const GCGuildSafeboxGoldPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCGuildSafeboxGoldPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_gold() != 0) {
    _this->_internal_set_gold(from._internal_gold());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCGuildSafeboxGoldPacket::CopyFrom(const GCGuildSafeboxGoldPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCGuildSafeboxGoldPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGuildSafeboxGoldPacket::IsInitialized() const {
  return true;
}

void GCGuildSafeboxGoldPacket::InternalSwap(GCGuildSafeboxGoldPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.gold_, other->_impl_.gold_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GCGuildSafeboxGoldPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[204]);
}

// ===================================================================

class GCGuildSafeboxLoadLogPacket::_Internal {
 public:
};

void GCGuildSafeboxLoadLogPacket::clear_logs() {
  _impl_.logs_.Clear();
}
GCGuildSafeboxLoadLogPacket::GCGuildSafeboxLoadLogPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCGuildSafeboxLoadLogPacket)
}
GCGuildSafeboxLoadLogPacket::GCGuildSafeboxLoadLogPacket(const GCGuildSafeboxLoadLogPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCGuildSafeboxLoadLogPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.logs_){from._impl_.logs_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:network.GCGuildSafeboxLoadLogPacket)
}

inline void GCGuildSafeboxLoadLogPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.logs_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCGuildSafeboxLoadLogPacket::~GCGuildSafeboxLoadLogPacket() {
  // @@protoc_insertion_point(destructor:network.GCGuildSafeboxLoadLogPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCGuildSafeboxLoadLogPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.logs_.~RepeatedPtrField();
}

void GCGuildSafeboxLoadLogPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCGuildSafeboxLoadLogPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCGuildSafeboxLoadLogPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.logs_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCGuildSafeboxLoadLogPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .network.TGuildSafeboxLogTable logs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_logs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCGuildSafeboxLoadLogPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCGuildSafeboxLoadLogPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .network.TGuildSafeboxLogTable logs = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_logs_size()); i < n; i++) {
    const auto& repfield = this->_internal_logs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCGuildSafeboxLoadLogPacket)
  return target;
}

size_t GCGuildSafeboxLoadLogPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCGuildSafeboxLoadLogPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .network.TGuildSafeboxLogTable logs = 1;
  total_size += 1UL * this->_internal_logs_size();
  for (const auto& msg : this->_impl_.logs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCGuildSafeboxLoadLogPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCGuildSafeboxLoadLogPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCGuildSafeboxLoadLogPacket::GetClassData() const { return &_class_data_; }


void GCGuildSafeboxLoadLogPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCGuildSafeboxLoadLogPacket*>(&to_msg);
  auto& from = static_cast<const GCGuildSafeboxLoadLogPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCGuildSafeboxLoadLogPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.logs_.MergeFrom(from._impl_.logs_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCGuildSafeboxLoadLogPacket::CopyFrom(const GCGuildSafeboxLoadLogPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCGuildSafeboxLoadLogPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGuildSafeboxLoadLogPacket::IsInitialized() const {
  return true;
}

void GCGuildSafeboxLoadLogPacket::InternalSwap(GCGuildSafeboxLoadLogPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.logs_.InternalSwap(&other->_impl_.logs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GCGuildSafeboxLoadLogPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[205]);
}

// ===================================================================

class GCGuildSafeboxAppendLogPacket::_Internal {
 public:
  static const ::network::TGuildSafeboxLogTable& log(const GCGuildSafeboxAppendLogPacket* msg);
};

const ::network::TGuildSafeboxLogTable&
GCGuildSafeboxAppendLogPacket::_Internal::log(const GCGuildSafeboxAppendLogPacket* msg) {
  return *msg->_impl_.log_;
}
void GCGuildSafeboxAppendLogPacket::clear_log() {
  if (GetArenaForAllocation() == nullptr && _impl_.log_ != nullptr) {
    delete _impl_.log_;
  }
  _impl_.log_ = nullptr;
}
GCGuildSafeboxAppendLogPacket::GCGuildSafeboxAppendLogPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCGuildSafeboxAppendLogPacket)
}
GCGuildSafeboxAppendLogPacket::GCGuildSafeboxAppendLogPacket(const GCGuildSafeboxAppendLogPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCGuildSafeboxAppendLogPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.log_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_log()) {
    _this->_impl_.log_ = new ::network::TGuildSafeboxLogTable(*from._impl_.log_);
  }
  // @@protoc_insertion_point(copy_constructor:network.GCGuildSafeboxAppendLogPacket)
}

inline void GCGuildSafeboxAppendLogPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.log_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCGuildSafeboxAppendLogPacket::~GCGuildSafeboxAppendLogPacket() {
  // @@protoc_insertion_point(destructor:network.GCGuildSafeboxAppendLogPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCGuildSafeboxAppendLogPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.log_;
}

void GCGuildSafeboxAppendLogPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCGuildSafeboxAppendLogPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCGuildSafeboxAppendLogPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.log_ != nullptr) {
    delete _impl_.log_;
  }
  _impl_.log_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCGuildSafeboxAppendLogPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .network.TGuildSafeboxLogTable log = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_log(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCGuildSafeboxAppendLogPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCGuildSafeboxAppendLogPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .network.TGuildSafeboxLogTable log = 1;
  if (this->_internal_has_log()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::log(this),
        _Internal::log(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCGuildSafeboxAppendLogPacket)
  return target;
}

size_t GCGuildSafeboxAppendLogPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCGuildSafeboxAppendLogPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .network.TGuildSafeboxLogTable log = 1;
  if (this->_internal_has_log()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.log_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCGuildSafeboxAppendLogPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCGuildSafeboxAppendLogPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCGuildSafeboxAppendLogPacket::GetClassData() const { return &_class_data_; }


void GCGuildSafeboxAppendLogPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCGuildSafeboxAppendLogPacket*>(&to_msg);
  auto& from = static_cast<const GCGuildSafeboxAppendLogPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCGuildSafeboxAppendLogPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_log()) {
    _this->_internal_mutable_log()->::network::TGuildSafeboxLogTable::MergeFrom(
        from._internal_log());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCGuildSafeboxAppendLogPacket::CopyFrom(const GCGuildSafeboxAppendLogPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCGuildSafeboxAppendLogPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGuildSafeboxAppendLogPacket::IsInitialized() const {
  return true;
}

void GCGuildSafeboxAppendLogPacket::InternalSwap(GCGuildSafeboxAppendLogPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.log_, other->_impl_.log_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GCGuildSafeboxAppendLogPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[206]);
}

// ===================================================================

class GCGuildLadderListPacket::_Internal {
 public:
};

void GCGuildLadderListPacket::clear_ladders() {
  _impl_.ladders_.Clear();
}
GCGuildLadderListPacket::GCGuildLadderListPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCGuildLadderListPacket)
}
GCGuildLadderListPacket::GCGuildLadderListPacket(const GCGuildLadderListPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCGuildLadderListPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ladders_){from._impl_.ladders_}
    , decltype(_impl_.page_number_){}
    , decltype(_impl_.total_pages_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.page_number_, &from._impl_.page_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.total_pages_) -
    reinterpret_cast<char*>(&_impl_.page_number_)) + sizeof(_impl_.total_pages_));
  // @@protoc_insertion_point(copy_constructor:network.GCGuildLadderListPacket)
}

inline void GCGuildLadderListPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ladders_){arena}
    , decltype(_impl_.page_number_){0u}
    , decltype(_impl_.total_pages_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCGuildLadderListPacket::~GCGuildLadderListPacket() {
  // @@protoc_insertion_point(destructor:network.GCGuildLadderListPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCGuildLadderListPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ladders_.~RepeatedPtrField();
}

void GCGuildLadderListPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCGuildLadderListPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCGuildLadderListPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ladders_.Clear();
  ::memset(&_impl_.page_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.total_pages_) -
      reinterpret_cast<char*>(&_impl_.page_number_)) + sizeof(_impl_.total_pages_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCGuildLadderListPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .network.TGuildLadderInfo ladders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ladders(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint32 page_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.page_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 total_pages = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.total_pages_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCGuildLadderListPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCGuildLadderListPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .network.TGuildLadderInfo ladders = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_ladders_size()); i < n; i++) {
    const auto& repfield = this->_internal_ladders(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // uint32 page_number = 2;
  if (this->_internal_page_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_page_number(), target);
  }

  // uint32 total_pages = 3;
  if (this->_internal_total_pages() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_total_pages(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCGuildLadderListPacket)
  return target;
}

size_t GCGuildLadderListPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCGuildLadderListPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .network.TGuildLadderInfo ladders = 1;
  total_size += 1UL * this->_internal_ladders_size();
  for (const auto& msg : this->_impl_.ladders_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 page_number = 2;
  if (this->_internal_page_number() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_page_number());
  }

  // uint32 total_pages = 3;
  if (this->_internal_total_pages() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_total_pages());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCGuildLadderListPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCGuildLadderListPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCGuildLadderListPacket::GetClassData() const { return &_class_data_; }


void GCGuildLadderListPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCGuildLadderListPacket*>(&to_msg);
  auto& from = static_cast<const GCGuildLadderListPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCGuildLadderListPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.ladders_.MergeFrom(from._impl_.ladders_);
  if (from._internal_page_number() != 0) {
    _this->_internal_set_page_number(from._internal_page_number());
  }
  if (from._internal_total_pages() != 0) {
    _this->_internal_set_total_pages(from._internal_total_pages());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCGuildLadderListPacket::CopyFrom(const GCGuildLadderListPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCGuildLadderListPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGuildLadderListPacket::IsInitialized() const {
  return true;
}

void GCGuildLadderListPacket::InternalSwap(GCGuildLadderListPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.ladders_.InternalSwap(&other->_impl_.ladders_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GCGuildLadderListPacket, _impl_.total_pages_)
      + sizeof(GCGuildLadderListPacket::_impl_.total_pages_)
      - PROTOBUF_FIELD_OFFSET(GCGuildLadderListPacket, _impl_.page_number_)>(
          reinterpret_cast<char*>(&_impl_.page_number_),
          reinterpret_cast<char*>(&other->_impl_.page_number_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GCGuildLadderListPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[207]);
}

// ===================================================================

class GCGuildLadderSearchResultPacket::_Internal {
 public:
  static const ::network::TGuildLadderInfo& ladder(const GCGuildLadderSearchResultPacket* msg);
};

const ::network::TGuildLadderInfo&
GCGuildLadderSearchResultPacket::_Internal::ladder(const GCGuildLadderSearchResultPacket* msg) {
  return *msg->_impl_.ladder_;
}
void GCGuildLadderSearchResultPacket::clear_ladder() {
  if (GetArenaForAllocation() == nullptr && _impl_.ladder_ != nullptr) {
    delete _impl_.ladder_;
  }
  _impl_.ladder_ = nullptr;
}
GCGuildLadderSearchResultPacket::GCGuildLadderSearchResultPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCGuildLadderSearchResultPacket)
}
GCGuildLadderSearchResultPacket::GCGuildLadderSearchResultPacket(const GCGuildLadderSearchResultPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCGuildLadderSearchResultPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ladder_){nullptr}
    , decltype(_impl_.rank_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ladder()) {
    _this->_impl_.ladder_ = new ::network::TGuildLadderInfo(*from._impl_.ladder_);
  }
  _this->_impl_.rank_ = from._impl_.rank_;
  // @@protoc_insertion_point(copy_constructor:network.GCGuildLadderSearchResultPacket)
}

inline void GCGuildLadderSearchResultPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ladder_){nullptr}
    , decltype(_impl_.rank_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCGuildLadderSearchResultPacket::~GCGuildLadderSearchResultPacket() {
  // @@protoc_insertion_point(destructor:network.GCGuildLadderSearchResultPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCGuildLadderSearchResultPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.ladder_;
}

void GCGuildLadderSearchResultPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCGuildLadderSearchResultPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCGuildLadderSearchResultPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.ladder_ != nullptr) {
    delete _impl_.ladder_;
  }
  _impl_.ladder_ = nullptr;
  _impl_.rank_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCGuildLadderSearchResultPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .network.TGuildLadderInfo ladder = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ladder(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 rank = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCGuildLadderSearchResultPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCGuildLadderSearchResultPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .network.TGuildLadderInfo ladder = 1;
  if (this->_internal_has_ladder()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::ladder(this),
        _Internal::ladder(this).GetCachedSize(), target, stream);
  }

  // uint32 rank = 2;
  if (this->_internal_rank() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_rank(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCGuildLadderSearchResultPacket)
  return target;
}

size_t GCGuildLadderSearchResultPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCGuildLadderSearchResultPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .network.TGuildLadderInfo ladder = 1;
  if (this->_internal_has_ladder()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ladder_);
  }

  // uint32 rank = 2;
  if (this->_internal_rank() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rank());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCGuildLadderSearchResultPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCGuildLadderSearchResultPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCGuildLadderSearchResultPacket::GetClassData() const { return &_class_data_; }


void GCGuildLadderSearchResultPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCGuildLadderSearchResultPacket*>(&to_msg);
  auto& from = static_cast<const GCGuildLadderSearchResultPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCGuildLadderSearchResultPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_ladder()) {
    _this->_internal_mutable_ladder()->::network::TGuildLadderInfo::MergeFrom(
        from._internal_ladder());
  }
  if (from._internal_rank() != 0) {
    _this->_internal_set_rank(from._internal_rank());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCGuildLadderSearchResultPacket::CopyFrom(const GCGuildLadderSearchResultPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCGuildLadderSearchResultPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGuildLadderSearchResultPacket::IsInitialized() const {
  return true;
}

void GCGuildLadderSearchResultPacket::InternalSwap(GCGuildLadderSearchResultPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GCGuildLadderSearchResultPacket, _impl_.rank_)
      + sizeof(GCGuildLadderSearchResultPacket::_impl_.rank_)
      - PROTOBUF_FIELD_OFFSET(GCGuildLadderSearchResultPacket, _impl_.ladder_)>(
          reinterpret_cast<char*>(&_impl_.ladder_),
          reinterpret_cast<char*>(&other->_impl_.ladder_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GCGuildLadderSearchResultPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[208]);
}

// ===================================================================

class GCGuildRankAndPointPacket::_Internal {
 public:
};

GCGuildRankAndPointPacket::GCGuildRankAndPointPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCGuildRankAndPointPacket)
}
GCGuildRankAndPointPacket::GCGuildRankAndPointPacket(const GCGuildRankAndPointPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCGuildRankAndPointPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.point_){}
    , decltype(_impl_.rank_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.point_, &from._impl_.point_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.rank_) -
    reinterpret_cast<char*>(&_impl_.point_)) + sizeof(_impl_.rank_));
  // @@protoc_insertion_point(copy_constructor:network.GCGuildRankAndPointPacket)
}

inline void GCGuildRankAndPointPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.point_){0}
    , decltype(_impl_.rank_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCGuildRankAndPointPacket::~GCGuildRankAndPointPacket() {
  // @@protoc_insertion_point(destructor:network.GCGuildRankAndPointPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCGuildRankAndPointPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GCGuildRankAndPointPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCGuildRankAndPointPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCGuildRankAndPointPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.point_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.rank_) -
      reinterpret_cast<char*>(&_impl_.point_)) + sizeof(_impl_.rank_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCGuildRankAndPointPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 point = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.point_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 rank = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCGuildRankAndPointPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCGuildRankAndPointPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 point = 1;
  if (this->_internal_point() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_point(), target);
  }

  // uint32 rank = 2;
  if (this->_internal_rank() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_rank(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCGuildRankAndPointPacket)
  return target;
}

size_t GCGuildRankAndPointPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCGuildRankAndPointPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 point = 1;
  if (this->_internal_point() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_point());
  }

  // uint32 rank = 2;
  if (this->_internal_rank() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rank());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCGuildRankAndPointPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCGuildRankAndPointPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCGuildRankAndPointPacket::GetClassData() const { return &_class_data_; }


void GCGuildRankAndPointPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCGuildRankAndPointPacket*>(&to_msg);
  auto& from = static_cast<const GCGuildRankAndPointPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCGuildRankAndPointPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_point() != 0) {
    _this->_internal_set_point(from._internal_point());
  }
  if (from._internal_rank() != 0) {
    _this->_internal_set_rank(from._internal_rank());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCGuildRankAndPointPacket::CopyFrom(const GCGuildRankAndPointPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCGuildRankAndPointPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGuildRankAndPointPacket::IsInitialized() const {
  return true;
}

void GCGuildRankAndPointPacket::InternalSwap(GCGuildRankAndPointPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GCGuildRankAndPointPacket, _impl_.rank_)
      + sizeof(GCGuildRankAndPointPacket::_impl_.rank_)
      - PROTOBUF_FIELD_OFFSET(GCGuildRankAndPointPacket, _impl_.point_)>(
          reinterpret_cast<char*>(&_impl_.point_),
          reinterpret_cast<char*>(&other->_impl_.point_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GCGuildRankAndPointPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[209]);
}

// ===================================================================

class GCGuildSymbolDataPacket::_Internal {
 public:
};

GCGuildSymbolDataPacket::GCGuildSymbolDataPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCGuildSymbolDataPacket)
}
GCGuildSymbolDataPacket::GCGuildSymbolDataPacket(const GCGuildSymbolDataPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCGuildSymbolDataPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.image_){}
    , decltype(_impl_.guild_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.image_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.image_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_image().empty()) {
    _this->_impl_.image_.Set(from._internal_image(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.guild_id_ = from._impl_.guild_id_;
  // @@protoc_insertion_point(copy_constructor:network.GCGuildSymbolDataPacket)
}

inline void GCGuildSymbolDataPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.image_){}
    , decltype(_impl_.guild_id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.image_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.image_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GCGuildSymbolDataPacket::~GCGuildSymbolDataPacket() {
  // @@protoc_insertion_point(destructor:network.GCGuildSymbolDataPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCGuildSymbolDataPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.image_.Destroy();
}

void GCGuildSymbolDataPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCGuildSymbolDataPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCGuildSymbolDataPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.image_.ClearToEmpty();
  _impl_.guild_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCGuildSymbolDataPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 guild_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes image = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_image();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCGuildSymbolDataPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCGuildSymbolDataPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 guild_id = 1;
  if (this->_internal_guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_guild_id(), target);
  }

  // bytes image = 2;
  if (!this->_internal_image().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_image(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCGuildSymbolDataPacket)
  return target;
}

size_t GCGuildSymbolDataPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCGuildSymbolDataPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes image = 2;
  if (!this->_internal_image().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_image());
  }

  // uint32 guild_id = 1;
  if (this->_internal_guild_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_guild_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCGuildSymbolDataPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCGuildSymbolDataPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCGuildSymbolDataPacket::GetClassData() const { return &_class_data_; }


void GCGuildSymbolDataPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCGuildSymbolDataPacket*>(&to_msg);
  auto& from = static_cast<const GCGuildSymbolDataPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCGuildSymbolDataPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_image().empty()) {
    _this->_internal_set_image(from._internal_image());
  }
  if (from._internal_guild_id() != 0) {
    _this->_internal_set_guild_id(from._internal_guild_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCGuildSymbolDataPacket::CopyFrom(const GCGuildSymbolDataPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCGuildSymbolDataPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGuildSymbolDataPacket::IsInitialized() const {
  return true;
}

void GCGuildSymbolDataPacket::InternalSwap(GCGuildSymbolDataPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.image_, lhs_arena,
      &other->_impl_.image_, rhs_arena
  );
  swap(_impl_.guild_id_, other->_impl_.guild_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GCGuildSymbolDataPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[210]);
}

// ===================================================================

class GCMarkIDXListPacket_Element::_Internal {
 public:
};

GCMarkIDXListPacket_Element::GCMarkIDXListPacket_Element(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCMarkIDXListPacket.Element)
}
GCMarkIDXListPacket_Element::GCMarkIDXListPacket_Element(const GCMarkIDXListPacket_Element& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCMarkIDXListPacket_Element* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.guild_id_){}
    , decltype(_impl_.mark_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.guild_id_, &from._impl_.guild_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.mark_id_) -
    reinterpret_cast<char*>(&_impl_.guild_id_)) + sizeof(_impl_.mark_id_));
  // @@protoc_insertion_point(copy_constructor:network.GCMarkIDXListPacket.Element)
}

inline void GCMarkIDXListPacket_Element::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.guild_id_){0u}
    , decltype(_impl_.mark_id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCMarkIDXListPacket_Element::~GCMarkIDXListPacket_Element() {
  // @@protoc_insertion_point(destructor:network.GCMarkIDXListPacket.Element)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCMarkIDXListPacket_Element::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GCMarkIDXListPacket_Element::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCMarkIDXListPacket_Element::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCMarkIDXListPacket.Element)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.guild_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.mark_id_) -
      reinterpret_cast<char*>(&_impl_.guild_id_)) + sizeof(_impl_.mark_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCMarkIDXListPacket_Element::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 guild_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 mark_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.mark_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCMarkIDXListPacket_Element::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCMarkIDXListPacket.Element)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 guild_id = 1;
  if (this->_internal_guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_guild_id(), target);
  }

  // uint32 mark_id = 2;
  if (this->_internal_mark_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_mark_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCMarkIDXListPacket.Element)
  return target;
}

size_t GCMarkIDXListPacket_Element::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCMarkIDXListPacket.Element)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 guild_id = 1;
  if (this->_internal_guild_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_guild_id());
  }

  // uint32 mark_id = 2;
  if (this->_internal_mark_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_mark_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCMarkIDXListPacket_Element::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCMarkIDXListPacket_Element::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCMarkIDXListPacket_Element::GetClassData() const { return &_class_data_; }


void GCMarkIDXListPacket_Element::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCMarkIDXListPacket_Element*>(&to_msg);
  auto& from = static_cast<const GCMarkIDXListPacket_Element&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCMarkIDXListPacket.Element)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_guild_id() != 0) {
    _this->_internal_set_guild_id(from._internal_guild_id());
  }
  if (from._internal_mark_id() != 0) {
    _this->_internal_set_mark_id(from._internal_mark_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCMarkIDXListPacket_Element::CopyFrom(const GCMarkIDXListPacket_Element& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCMarkIDXListPacket.Element)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCMarkIDXListPacket_Element::IsInitialized() const {
  return true;
}

void GCMarkIDXListPacket_Element::InternalSwap(GCMarkIDXListPacket_Element* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GCMarkIDXListPacket_Element, _impl_.mark_id_)
      + sizeof(GCMarkIDXListPacket_Element::_impl_.mark_id_)
      - PROTOBUF_FIELD_OFFSET(GCMarkIDXListPacket_Element, _impl_.guild_id_)>(
          reinterpret_cast<char*>(&_impl_.guild_id_),
          reinterpret_cast<char*>(&other->_impl_.guild_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GCMarkIDXListPacket_Element::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[211]);
}

// ===================================================================

class GCMarkIDXListPacket::_Internal {
 public:
};

GCMarkIDXListPacket::GCMarkIDXListPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCMarkIDXListPacket)
}
GCMarkIDXListPacket::GCMarkIDXListPacket(const GCMarkIDXListPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCMarkIDXListPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.elems_){from._impl_.elems_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:network.GCMarkIDXListPacket)
}

inline void GCMarkIDXListPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.elems_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GCMarkIDXListPacket::~GCMarkIDXListPacket() {
  // @@protoc_insertion_point(destructor:network.GCMarkIDXListPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCMarkIDXListPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.elems_.~RepeatedPtrField();
}

void GCMarkIDXListPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCMarkIDXListPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCMarkIDXListPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.elems_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCMarkIDXListPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .network.GCMarkIDXListPacket.Element elems = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_elems(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCMarkIDXListPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCMarkIDXListPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .network.GCMarkIDXListPacket.Element elems = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_elems_size()); i < n; i++) {
    const auto& repfield = this->_internal_elems(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCMarkIDXListPacket)
  return target;
}

size_t GCMarkIDXListPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCMarkIDXListPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .network.GCMarkIDXListPacket.Element elems = 1;
  total_size += 1UL * this->_internal_elems_size();
  for (const auto& msg : this->_impl_.elems_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCMarkIDXListPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCMarkIDXListPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCMarkIDXListPacket::GetClassData() const { return &_class_data_; }


void GCMarkIDXListPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCMarkIDXListPacket*>(&to_msg);
  auto& from = static_cast<const GCMarkIDXListPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCMarkIDXListPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.elems_.MergeFrom(from._impl_.elems_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCMarkIDXListPacket::CopyFrom(const GCMarkIDXListPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCMarkIDXListPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCMarkIDXListPacket::IsInitialized() const {
  return true;
}

void GCMarkIDXListPacket::InternalSwap(GCMarkIDXListPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.elems_.InternalSwap(&other->_impl_.elems_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GCMarkIDXListPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[212]);
}

// ===================================================================

class GCMarkBlockPacket::_Internal {
 public:
};

GCMarkBlockPacket::GCMarkBlockPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:network.GCMarkBlockPacket)
}
GCMarkBlockPacket::GCMarkBlockPacket(const GCMarkBlockPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GCMarkBlockPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.image_){}
    , decltype(_impl_.image_index_){}
    , decltype(_impl_.block_count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.image_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.image_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_image().empty()) {
    _this->_impl_.image_.Set(from._internal_image(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.image_index_, &from._impl_.image_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.block_count_) -
    reinterpret_cast<char*>(&_impl_.image_index_)) + sizeof(_impl_.block_count_));
  // @@protoc_insertion_point(copy_constructor:network.GCMarkBlockPacket)
}

inline void GCMarkBlockPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.image_){}
    , decltype(_impl_.image_index_){0u}
    , decltype(_impl_.block_count_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.image_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.image_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GCMarkBlockPacket::~GCMarkBlockPacket() {
  // @@protoc_insertion_point(destructor:network.GCMarkBlockPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GCMarkBlockPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.image_.Destroy();
}

void GCMarkBlockPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GCMarkBlockPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:network.GCMarkBlockPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.image_.ClearToEmpty();
  ::memset(&_impl_.image_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.block_count_) -
      reinterpret_cast<char*>(&_impl_.image_index_)) + sizeof(_impl_.block_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCMarkBlockPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 image_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.image_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 block_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.block_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes image = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_image();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GCMarkBlockPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.GCMarkBlockPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 image_index = 1;
  if (this->_internal_image_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_image_index(), target);
  }

  // uint32 block_count = 2;
  if (this->_internal_block_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_block_count(), target);
  }

  // bytes image = 3;
  if (!this->_internal_image().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_image(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network.GCMarkBlockPacket)
  return target;
}

size_t GCMarkBlockPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.GCMarkBlockPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes image = 3;
  if (!this->_internal_image().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_image());
  }

  // uint32 image_index = 1;
  if (this->_internal_image_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_image_index());
  }

  // uint32 block_count = 2;
  if (this->_internal_block_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_block_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GCMarkBlockPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GCMarkBlockPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GCMarkBlockPacket::GetClassData() const { return &_class_data_; }


void GCMarkBlockPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GCMarkBlockPacket*>(&to_msg);
  auto& from = static_cast<const GCMarkBlockPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:network.GCMarkBlockPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_image().empty()) {
    _this->_internal_set_image(from._internal_image());
  }
  if (from._internal_image_index() != 0) {
    _this->_internal_set_image_index(from._internal_image_index());
  }
  if (from._internal_block_count() != 0) {
    _this->_internal_set_block_count(from._internal_block_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GCMarkBlockPacket::CopyFrom(const GCMarkBlockPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.GCMarkBlockPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCMarkBlockPacket::IsInitialized() const {
  return true;
}

void GCMarkBlockPacket::InternalSwap(GCMarkBlockPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.image_, lhs_arena,
      &other->_impl_.image_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GCMarkBlockPacket, _impl_.block_count_)
      + sizeof(GCMarkBlockPacket::_impl_.block_count_)
      - PROTOBUF_FIELD_OFFSET(GCMarkBlockPacket, _impl_.image_index_)>(
          reinterpret_cast<char*>(&_impl_.image_index_),
          reinterpret_cast<char*>(&other->_impl_.image_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GCMarkBlockPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gc_5fpackets_2eproto_getter, &descriptor_table_gc_5fpackets_2eproto_once,
      file_level_metadata_gc_5fpackets_2eproto[213]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace network
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::network::GCSetVerifyKeyPacket*
Arena::CreateMaybeMessage< ::network::GCSetVerifyKeyPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCSetVerifyKeyPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCLoginFailurePacket*
Arena::CreateMaybeMessage< ::network::GCLoginFailurePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCLoginFailurePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCCreateFailurePacket*
Arena::CreateMaybeMessage< ::network::GCCreateFailurePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCCreateFailurePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCDeleteSuccessPacket*
Arena::CreateMaybeMessage< ::network::GCDeleteSuccessPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCDeleteSuccessPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCPlayerCreateSuccessPacket*
Arena::CreateMaybeMessage< ::network::GCPlayerCreateSuccessPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCPlayerCreateSuccessPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCEmpirePacket*
Arena::CreateMaybeMessage< ::network::GCEmpirePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCEmpirePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCLoginSuccessPacket*
Arena::CreateMaybeMessage< ::network::GCLoginSuccessPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCLoginSuccessPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCAuthSuccessPacket*
Arena::CreateMaybeMessage< ::network::GCAuthSuccessPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCAuthSuccessPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCAuthSuccessOpenIDPacket*
Arena::CreateMaybeMessage< ::network::GCAuthSuccessOpenIDPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCAuthSuccessOpenIDPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCChangeNamePacket*
Arena::CreateMaybeMessage< ::network::GCChangeNamePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCChangeNamePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCHybridCryptSDBPacket*
Arena::CreateMaybeMessage< ::network::GCHybridCryptSDBPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCHybridCryptSDBPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCHybridCryptKeysPacket*
Arena::CreateMaybeMessage< ::network::GCHybridCryptKeysPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCHybridCryptKeysPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCRespondChannelStatusPacket*
Arena::CreateMaybeMessage< ::network::GCRespondChannelStatusPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCRespondChannelStatusPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCPhasePacket*
Arena::CreateMaybeMessage< ::network::GCPhasePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCPhasePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCHandshakePacket*
Arena::CreateMaybeMessage< ::network::GCHandshakePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCHandshakePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCKeyAgreementPacket*
Arena::CreateMaybeMessage< ::network::GCKeyAgreementPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCKeyAgreementPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCXTrapCS1RequestPacket*
Arena::CreateMaybeMessage< ::network::GCXTrapCS1RequestPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCXTrapCS1RequestPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCPanamaPackPacket*
Arena::CreateMaybeMessage< ::network::GCPanamaPackPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCPanamaPackPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCLoginVersionAnswerPacket*
Arena::CreateMaybeMessage< ::network::GCLoginVersionAnswerPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCLoginVersionAnswerPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCTimePacket*
Arena::CreateMaybeMessage< ::network::GCTimePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCTimePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCChannelPacket*
Arena::CreateMaybeMessage< ::network::GCChannelPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCChannelPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCWhisperPacket*
Arena::CreateMaybeMessage< ::network::GCWhisperPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCWhisperPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCChatPacket*
Arena::CreateMaybeMessage< ::network::GCChatPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCChatPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCMovePacket*
Arena::CreateMaybeMessage< ::network::GCMovePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCMovePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCSyncPositionPacket*
Arena::CreateMaybeMessage< ::network::GCSyncPositionPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCSyncPositionPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCFlyTargetingPacket*
Arena::CreateMaybeMessage< ::network::GCFlyTargetingPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCFlyTargetingPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCAddFlyTargetingPacket*
Arena::CreateMaybeMessage< ::network::GCAddFlyTargetingPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCAddFlyTargetingPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCTargetPacket*
Arena::CreateMaybeMessage< ::network::GCTargetPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCTargetPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCTargetMonsterInfoPacket*
Arena::CreateMaybeMessage< ::network::GCTargetMonsterInfoPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCTargetMonsterInfoPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCPlayerOnlineInformationPacket*
Arena::CreateMaybeMessage< ::network::GCPlayerOnlineInformationPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCPlayerOnlineInformationPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCUpdateCharacterScalePacket*
Arena::CreateMaybeMessage< ::network::GCUpdateCharacterScalePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCUpdateCharacterScalePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCMaintenanceInfoPacket*
Arena::CreateMaybeMessage< ::network::GCMaintenanceInfoPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCMaintenanceInfoPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCObserverAddPacket*
Arena::CreateMaybeMessage< ::network::GCObserverAddPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCObserverAddPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCObserverRemovePacket*
Arena::CreateMaybeMessage< ::network::GCObserverRemovePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCObserverRemovePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCObserverMovePacket*
Arena::CreateMaybeMessage< ::network::GCObserverMovePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCObserverMovePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCSafeboxSizePacket*
Arena::CreateMaybeMessage< ::network::GCSafeboxSizePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCSafeboxSizePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCSafeboxMoneyChangePacket*
Arena::CreateMaybeMessage< ::network::GCSafeboxMoneyChangePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCSafeboxMoneyChangePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCWarpPacket*
Arena::CreateMaybeMessage< ::network::GCWarpPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCWarpPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCPVPPacket*
Arena::CreateMaybeMessage< ::network::GCPVPPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCPVPPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCDuelStartPacket*
Arena::CreateMaybeMessage< ::network::GCDuelStartPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCDuelStartPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCOwnershipPacket*
Arena::CreateMaybeMessage< ::network::GCOwnershipPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCOwnershipPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCPositionPacket*
Arena::CreateMaybeMessage< ::network::GCPositionPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCPositionPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCStunPacket*
Arena::CreateMaybeMessage< ::network::GCStunPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCStunPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCDeadPacket*
Arena::CreateMaybeMessage< ::network::GCDeadPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCDeadPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCPointsPacket*
Arena::CreateMaybeMessage< ::network::GCPointsPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCPointsPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCPointChangePacket*
Arena::CreateMaybeMessage< ::network::GCPointChangePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCPointChangePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCRealPointSetPacket*
Arena::CreateMaybeMessage< ::network::GCRealPointSetPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCRealPointSetPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCQuickslotAddPacket*
Arena::CreateMaybeMessage< ::network::GCQuickslotAddPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCQuickslotAddPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCQuickslotDelPacket*
Arena::CreateMaybeMessage< ::network::GCQuickslotDelPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCQuickslotDelPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCQuickslotSwapPacket*
Arena::CreateMaybeMessage< ::network::GCQuickslotSwapPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCQuickslotSwapPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCMotionPacket*
Arena::CreateMaybeMessage< ::network::GCMotionPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCMotionPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCDamageInfoPacket*
Arena::CreateMaybeMessage< ::network::GCDamageInfoPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCDamageInfoPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCCreateFlyPacket*
Arena::CreateMaybeMessage< ::network::GCCreateFlyPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCCreateFlyPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCDungeonDestinationPositionPacket*
Arena::CreateMaybeMessage< ::network::GCDungeonDestinationPositionPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCDungeonDestinationPositionPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCSkillLevelPacket*
Arena::CreateMaybeMessage< ::network::GCSkillLevelPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCSkillLevelPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCMessengerListPacket_Entry*
Arena::CreateMaybeMessage< ::network::GCMessengerListPacket_Entry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCMessengerListPacket_Entry >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCMessengerListPacket*
Arena::CreateMaybeMessage< ::network::GCMessengerListPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCMessengerListPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCMessengerBlockListPacket_Entry*
Arena::CreateMaybeMessage< ::network::GCMessengerBlockListPacket_Entry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCMessengerBlockListPacket_Entry >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCMessengerBlockListPacket*
Arena::CreateMaybeMessage< ::network::GCMessengerBlockListPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCMessengerBlockListPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCMessengerLoginPacket*
Arena::CreateMaybeMessage< ::network::GCMessengerLoginPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCMessengerLoginPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCMessengerLogoutPacket*
Arena::CreateMaybeMessage< ::network::GCMessengerLogoutPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCMessengerLogoutPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCMessengerBlockLoginPacket*
Arena::CreateMaybeMessage< ::network::GCMessengerBlockLoginPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCMessengerBlockLoginPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCMessengerBlockLogoutPacket*
Arena::CreateMaybeMessage< ::network::GCMessengerBlockLogoutPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCMessengerBlockLogoutPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCMessengerMobilePacket*
Arena::CreateMaybeMessage< ::network::GCMessengerMobilePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCMessengerMobilePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCWalkModePacket*
Arena::CreateMaybeMessage< ::network::GCWalkModePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCWalkModePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCChangeSkillGroupPacket*
Arena::CreateMaybeMessage< ::network::GCChangeSkillGroupPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCChangeSkillGroupPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCRefineInformationPacket*
Arena::CreateMaybeMessage< ::network::GCRefineInformationPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCRefineInformationPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCSpecialEffectPacket*
Arena::CreateMaybeMessage< ::network::GCSpecialEffectPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCSpecialEffectPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCNPCListPacket_Position*
Arena::CreateMaybeMessage< ::network::GCNPCListPacket_Position >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCNPCListPacket_Position >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCNPCListPacket*
Arena::CreateMaybeMessage< ::network::GCNPCListPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCNPCListPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCViewEquipPacket*
Arena::CreateMaybeMessage< ::network::GCViewEquipPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCViewEquipPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCLandListPacket*
Arena::CreateMaybeMessage< ::network::GCLandListPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCLandListPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCTargetCreatePacket*
Arena::CreateMaybeMessage< ::network::GCTargetCreatePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCTargetCreatePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCTargetUpdatePacket*
Arena::CreateMaybeMessage< ::network::GCTargetUpdatePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCTargetUpdatePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCTargetDeletePacket*
Arena::CreateMaybeMessage< ::network::GCTargetDeletePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCTargetDeletePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCAffectAddPacket*
Arena::CreateMaybeMessage< ::network::GCAffectAddPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCAffectAddPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCAffectRemovePacket*
Arena::CreateMaybeMessage< ::network::GCAffectRemovePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCAffectRemovePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCMallOpenPacket*
Arena::CreateMaybeMessage< ::network::GCMallOpenPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCMallOpenPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCLoverInfoPacket*
Arena::CreateMaybeMessage< ::network::GCLoverInfoPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCLoverInfoPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCLoverPointUpdatePacket*
Arena::CreateMaybeMessage< ::network::GCLoverPointUpdatePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCLoverPointUpdatePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCDigMotionPacket*
Arena::CreateMaybeMessage< ::network::GCDigMotionPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCDigMotionPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCSpecificEffectPacket*
Arena::CreateMaybeMessage< ::network::GCSpecificEffectPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCSpecificEffectPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCDragonSoulRefinePacket*
Arena::CreateMaybeMessage< ::network::GCDragonSoulRefinePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCDragonSoulRefinePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCTeamlerStatusPacket*
Arena::CreateMaybeMessage< ::network::GCTeamlerStatusPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCTeamlerStatusPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCTeamlerShowPacket*
Arena::CreateMaybeMessage< ::network::GCTeamlerShowPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCTeamlerShowPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCPartyPositionPacket*
Arena::CreateMaybeMessage< ::network::GCPartyPositionPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCPartyPositionPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCWikiPacket*
Arena::CreateMaybeMessage< ::network::GCWikiPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCWikiPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCWikiMobPacket*
Arena::CreateMaybeMessage< ::network::GCWikiMobPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCWikiMobPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCSendCombatZonePacket*
Arena::CreateMaybeMessage< ::network::GCSendCombatZonePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCSendCombatZonePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCCombatZoneRankingDataPacket*
Arena::CreateMaybeMessage< ::network::GCCombatZoneRankingDataPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCCombatZoneRankingDataPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCEventRequestPacket*
Arena::CreateMaybeMessage< ::network::GCEventRequestPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCEventRequestPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCEventCancelPacket*
Arena::CreateMaybeMessage< ::network::GCEventCancelPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCEventCancelPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCEventEmpireWarLoadPacket*
Arena::CreateMaybeMessage< ::network::GCEventEmpireWarLoadPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCEventEmpireWarLoadPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCEventEmpireWarUpdatePacket*
Arena::CreateMaybeMessage< ::network::GCEventEmpireWarUpdatePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCEventEmpireWarUpdatePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCAttrtreeLevelPacket*
Arena::CreateMaybeMessage< ::network::GCAttrtreeLevelPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCAttrtreeLevelPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCAttrtreeRefinePacket*
Arena::CreateMaybeMessage< ::network::GCAttrtreeRefinePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCAttrtreeRefinePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCRunePacket*
Arena::CreateMaybeMessage< ::network::GCRunePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCRunePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCRuneRefinePacket*
Arena::CreateMaybeMessage< ::network::GCRuneRefinePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCRuneRefinePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCRunePagePacket*
Arena::CreateMaybeMessage< ::network::GCRunePagePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCRunePagePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCRuneLevelupPacket*
Arena::CreateMaybeMessage< ::network::GCRuneLevelupPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCRuneLevelupPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCEquipmentPageLoadPacket*
Arena::CreateMaybeMessage< ::network::GCEquipmentPageLoadPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCEquipmentPageLoadPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCDmgMeterPacket*
Arena::CreateMaybeMessage< ::network::GCDmgMeterPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCDmgMeterPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCSkillMotionPacket*
Arena::CreateMaybeMessage< ::network::GCSkillMotionPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCSkillMotionPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCFakeBuffSkillPacket*
Arena::CreateMaybeMessage< ::network::GCFakeBuffSkillPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCFakeBuffSkillPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCCBTItemSetPacket*
Arena::CreateMaybeMessage< ::network::GCCBTItemSetPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCCBTItemSetPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCSoulRefineInfoPacket*
Arena::CreateMaybeMessage< ::network::GCSoulRefineInfoPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCSoulRefineInfoPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCPVPTeamPacket*
Arena::CreateMaybeMessage< ::network::GCPVPTeamPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCPVPTeamPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCInventoryMaxNumPacket*
Arena::CreateMaybeMessage< ::network::GCInventoryMaxNumPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCInventoryMaxNumPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCAttributesToClientPacket_Attribute*
Arena::CreateMaybeMessage< ::network::GCAttributesToClientPacket_Attribute >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCAttributesToClientPacket_Attribute >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCAttributesToClientPacket*
Arena::CreateMaybeMessage< ::network::GCAttributesToClientPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCAttributesToClientPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCHorseRefineInfoPacket*
Arena::CreateMaybeMessage< ::network::GCHorseRefineInfoPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCHorseRefineInfoPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCHorseRefineResultPacket*
Arena::CreateMaybeMessage< ::network::GCHorseRefineResultPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCHorseRefineResultPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCGayaShopOpenPacket*
Arena::CreateMaybeMessage< ::network::GCGayaShopOpenPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCGayaShopOpenPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCBattlepassDataPacket*
Arena::CreateMaybeMessage< ::network::GCBattlepassDataPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCBattlepassDataPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCCrystalRefinePacket*
Arena::CreateMaybeMessage< ::network::GCCrystalRefinePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCCrystalRefinePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCCrystalUsingSlotPacket*
Arena::CreateMaybeMessage< ::network::GCCrystalUsingSlotPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCCrystalUsingSlotPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCAuctionOwnedGoldPacket*
Arena::CreateMaybeMessage< ::network::GCAuctionOwnedGoldPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCAuctionOwnedGoldPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCAuctionOwnedItemPacket*
Arena::CreateMaybeMessage< ::network::GCAuctionOwnedItemPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCAuctionOwnedItemPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCAuctionSearchResultPacket*
Arena::CreateMaybeMessage< ::network::GCAuctionSearchResultPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCAuctionSearchResultPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCAuctionMessagePacket*
Arena::CreateMaybeMessage< ::network::GCAuctionMessagePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCAuctionMessagePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCAuctionShopOwnedPacket*
Arena::CreateMaybeMessage< ::network::GCAuctionShopOwnedPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCAuctionShopOwnedPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCAuctionShopPacket*
Arena::CreateMaybeMessage< ::network::GCAuctionShopPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCAuctionShopPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCAuctionShopGoldPacket*
Arena::CreateMaybeMessage< ::network::GCAuctionShopGoldPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCAuctionShopGoldPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCAuctionShopTimeoutPacket*
Arena::CreateMaybeMessage< ::network::GCAuctionShopTimeoutPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCAuctionShopTimeoutPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCAuctionShopGuestOpenPacket*
Arena::CreateMaybeMessage< ::network::GCAuctionShopGuestOpenPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCAuctionShopGuestOpenPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCAuctionShopGuestUpdatePacket*
Arena::CreateMaybeMessage< ::network::GCAuctionShopGuestUpdatePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCAuctionShopGuestUpdatePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCAuctionShopHistoryPacket*
Arena::CreateMaybeMessage< ::network::GCAuctionShopHistoryPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCAuctionShopHistoryPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCAuctionAveragePricePacket*
Arena::CreateMaybeMessage< ::network::GCAuctionAveragePricePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCAuctionAveragePricePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCMainCharacterPacket*
Arena::CreateMaybeMessage< ::network::GCMainCharacterPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCMainCharacterPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCCharacterAddPacket_AffectColor*
Arena::CreateMaybeMessage< ::network::GCCharacterAddPacket_AffectColor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCCharacterAddPacket_AffectColor >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCCharacterAddPacket*
Arena::CreateMaybeMessage< ::network::GCCharacterAddPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCCharacterAddPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCCharacterAdditionalInfoPacket*
Arena::CreateMaybeMessage< ::network::GCCharacterAdditionalInfoPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCCharacterAdditionalInfoPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCCharacterUpdatePacket*
Arena::CreateMaybeMessage< ::network::GCCharacterUpdatePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCCharacterUpdatePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCCharacterShiningPacket*
Arena::CreateMaybeMessage< ::network::GCCharacterShiningPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCCharacterShiningPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCCharacterDeletePacket*
Arena::CreateMaybeMessage< ::network::GCCharacterDeletePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCCharacterDeletePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCFishingStartPacket*
Arena::CreateMaybeMessage< ::network::GCFishingStartPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCFishingStartPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCFishingStopPacket*
Arena::CreateMaybeMessage< ::network::GCFishingStopPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCFishingStopPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCFishingReactPacket*
Arena::CreateMaybeMessage< ::network::GCFishingReactPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCFishingReactPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCFishingSuccessPacket*
Arena::CreateMaybeMessage< ::network::GCFishingSuccessPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCFishingSuccessPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCFishingFailPacket*
Arena::CreateMaybeMessage< ::network::GCFishingFailPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCFishingFailPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCFishingFishInfoPacket*
Arena::CreateMaybeMessage< ::network::GCFishingFishInfoPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCFishingFishInfoPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCItemSetPacket*
Arena::CreateMaybeMessage< ::network::GCItemSetPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCItemSetPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCItemUpdatePacket*
Arena::CreateMaybeMessage< ::network::GCItemUpdatePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCItemUpdatePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCItemGroundAddPacket*
Arena::CreateMaybeMessage< ::network::GCItemGroundAddPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCItemGroundAddPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCItemGroundDeletePacket*
Arena::CreateMaybeMessage< ::network::GCItemGroundDeletePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCItemGroundDeletePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCItemOwnershipPacket*
Arena::CreateMaybeMessage< ::network::GCItemOwnershipPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCItemOwnershipPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCExchangeStartPacket*
Arena::CreateMaybeMessage< ::network::GCExchangeStartPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCExchangeStartPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCExchangeItemAddPacket*
Arena::CreateMaybeMessage< ::network::GCExchangeItemAddPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCExchangeItemAddPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCExchangeItemDelPacket*
Arena::CreateMaybeMessage< ::network::GCExchangeItemDelPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCExchangeItemDelPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCExchangeGoldAddPacket*
Arena::CreateMaybeMessage< ::network::GCExchangeGoldAddPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCExchangeGoldAddPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCExchangeAcceptPacket*
Arena::CreateMaybeMessage< ::network::GCExchangeAcceptPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCExchangeAcceptPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCShopStartPacket*
Arena::CreateMaybeMessage< ::network::GCShopStartPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCShopStartPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCShopExStartPacket*
Arena::CreateMaybeMessage< ::network::GCShopExStartPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCShopExStartPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCShopUpdateItemPacket*
Arena::CreateMaybeMessage< ::network::GCShopUpdateItemPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCShopUpdateItemPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCShopSignPacket*
Arena::CreateMaybeMessage< ::network::GCShopSignPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCShopSignPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCQuestInfoPacket*
Arena::CreateMaybeMessage< ::network::GCQuestInfoPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCQuestInfoPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCScriptPacket*
Arena::CreateMaybeMessage< ::network::GCScriptPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCScriptPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCQuestConfirmPacket*
Arena::CreateMaybeMessage< ::network::GCQuestConfirmPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCQuestConfirmPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCQuestCooldownPacket_Cooldown*
Arena::CreateMaybeMessage< ::network::GCQuestCooldownPacket_Cooldown >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCQuestCooldownPacket_Cooldown >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCQuestCooldownPacket*
Arena::CreateMaybeMessage< ::network::GCQuestCooldownPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCQuestCooldownPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCPetSummonPacket*
Arena::CreateMaybeMessage< ::network::GCPetSummonPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCPetSummonPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCPetUpdateExpPacket*
Arena::CreateMaybeMessage< ::network::GCPetUpdateExpPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCPetUpdateExpPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCPetUpdateLevelPacket*
Arena::CreateMaybeMessage< ::network::GCPetUpdateLevelPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCPetUpdateLevelPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCPetUpdateSkillPacket*
Arena::CreateMaybeMessage< ::network::GCPetUpdateSkillPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCPetUpdateSkillPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCPetUpdateAttrPacket*
Arena::CreateMaybeMessage< ::network::GCPetUpdateAttrPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCPetUpdateAttrPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCPetUpdateSkillpowerPacket*
Arena::CreateMaybeMessage< ::network::GCPetUpdateSkillpowerPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCPetUpdateSkillpowerPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCPetEvolutionInfoPacket*
Arena::CreateMaybeMessage< ::network::GCPetEvolutionInfoPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCPetEvolutionInfoPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCPetEvolveResultPacket*
Arena::CreateMaybeMessage< ::network::GCPetEvolveResultPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCPetEvolveResultPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCPetAttrRefineInfoPacket*
Arena::CreateMaybeMessage< ::network::GCPetAttrRefineInfoPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCPetAttrRefineInfoPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCPartyInvitePacket*
Arena::CreateMaybeMessage< ::network::GCPartyInvitePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCPartyInvitePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCPartyAddPacket*
Arena::CreateMaybeMessage< ::network::GCPartyAddPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCPartyAddPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCPartyUpdatePacket*
Arena::CreateMaybeMessage< ::network::GCPartyUpdatePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCPartyUpdatePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCPartyRemovePacket*
Arena::CreateMaybeMessage< ::network::GCPartyRemovePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCPartyRemovePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCPartyLinkPacket*
Arena::CreateMaybeMessage< ::network::GCPartyLinkPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCPartyLinkPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCPartyUnlinkPacket*
Arena::CreateMaybeMessage< ::network::GCPartyUnlinkPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCPartyUnlinkPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCPartyParameterPacket*
Arena::CreateMaybeMessage< ::network::GCPartyParameterPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCPartyParameterPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCGuildLoginPacket*
Arena::CreateMaybeMessage< ::network::GCGuildLoginPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCGuildLoginPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCGuildLogoutPacket*
Arena::CreateMaybeMessage< ::network::GCGuildLogoutPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCGuildLogoutPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCGuildRemovePacket*
Arena::CreateMaybeMessage< ::network::GCGuildRemovePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCGuildRemovePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCGuildMemberListPacket*
Arena::CreateMaybeMessage< ::network::GCGuildMemberListPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCGuildMemberListPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCGuildGradePacket_GradeData*
Arena::CreateMaybeMessage< ::network::GCGuildGradePacket_GradeData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCGuildGradePacket_GradeData >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCGuildGradePacket*
Arena::CreateMaybeMessage< ::network::GCGuildGradePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCGuildGradePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCGuildGradeNamePacket*
Arena::CreateMaybeMessage< ::network::GCGuildGradeNamePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCGuildGradeNamePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCGuildGradeAuthPacket*
Arena::CreateMaybeMessage< ::network::GCGuildGradeAuthPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCGuildGradeAuthPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCGuildInfoPacket*
Arena::CreateMaybeMessage< ::network::GCGuildInfoPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCGuildInfoPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCGuildCommentsPacket_Comment*
Arena::CreateMaybeMessage< ::network::GCGuildCommentsPacket_Comment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCGuildCommentsPacket_Comment >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCGuildCommentsPacket*
Arena::CreateMaybeMessage< ::network::GCGuildCommentsPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCGuildCommentsPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCGuildChangeExpPacket*
Arena::CreateMaybeMessage< ::network::GCGuildChangeExpPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCGuildChangeExpPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCGuildChangeMemberGradePacket*
Arena::CreateMaybeMessage< ::network::GCGuildChangeMemberGradePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCGuildChangeMemberGradePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCGuildSkillInfoPacket*
Arena::CreateMaybeMessage< ::network::GCGuildSkillInfoPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCGuildSkillInfoPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCGuildChangeMemberGeneralPacket*
Arena::CreateMaybeMessage< ::network::GCGuildChangeMemberGeneralPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCGuildChangeMemberGeneralPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCGuildInvitePacket*
Arena::CreateMaybeMessage< ::network::GCGuildInvitePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCGuildInvitePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCGuildMemberLastPlayedPacket_MemberInfo*
Arena::CreateMaybeMessage< ::network::GCGuildMemberLastPlayedPacket_MemberInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCGuildMemberLastPlayedPacket_MemberInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCGuildMemberLastPlayedPacket*
Arena::CreateMaybeMessage< ::network::GCGuildMemberLastPlayedPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCGuildMemberLastPlayedPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCGuildBattleStatsPacket*
Arena::CreateMaybeMessage< ::network::GCGuildBattleStatsPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCGuildBattleStatsPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCGuildWarPacket*
Arena::CreateMaybeMessage< ::network::GCGuildWarPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCGuildWarPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCGuildNamePacket_NameInfo*
Arena::CreateMaybeMessage< ::network::GCGuildNamePacket_NameInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCGuildNamePacket_NameInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCGuildNamePacket*
Arena::CreateMaybeMessage< ::network::GCGuildNamePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCGuildNamePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCGuildWarListPacket_WarInfo*
Arena::CreateMaybeMessage< ::network::GCGuildWarListPacket_WarInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCGuildWarListPacket_WarInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCGuildWarListPacket*
Arena::CreateMaybeMessage< ::network::GCGuildWarListPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCGuildWarListPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCGuildWarEndListPacket*
Arena::CreateMaybeMessage< ::network::GCGuildWarEndListPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCGuildWarEndListPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCGuildWarPointPacket*
Arena::CreateMaybeMessage< ::network::GCGuildWarPointPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCGuildWarPointPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCGuildMoneyChangePacket*
Arena::CreateMaybeMessage< ::network::GCGuildMoneyChangePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCGuildMoneyChangePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCGuildSafeboxOpenPacket*
Arena::CreateMaybeMessage< ::network::GCGuildSafeboxOpenPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCGuildSafeboxOpenPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCGuildSafeboxGoldPacket*
Arena::CreateMaybeMessage< ::network::GCGuildSafeboxGoldPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCGuildSafeboxGoldPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCGuildSafeboxLoadLogPacket*
Arena::CreateMaybeMessage< ::network::GCGuildSafeboxLoadLogPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCGuildSafeboxLoadLogPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCGuildSafeboxAppendLogPacket*
Arena::CreateMaybeMessage< ::network::GCGuildSafeboxAppendLogPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCGuildSafeboxAppendLogPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCGuildLadderListPacket*
Arena::CreateMaybeMessage< ::network::GCGuildLadderListPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCGuildLadderListPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCGuildLadderSearchResultPacket*
Arena::CreateMaybeMessage< ::network::GCGuildLadderSearchResultPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCGuildLadderSearchResultPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCGuildRankAndPointPacket*
Arena::CreateMaybeMessage< ::network::GCGuildRankAndPointPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCGuildRankAndPointPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCGuildSymbolDataPacket*
Arena::CreateMaybeMessage< ::network::GCGuildSymbolDataPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCGuildSymbolDataPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCMarkIDXListPacket_Element*
Arena::CreateMaybeMessage< ::network::GCMarkIDXListPacket_Element >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCMarkIDXListPacket_Element >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCMarkIDXListPacket*
Arena::CreateMaybeMessage< ::network::GCMarkIDXListPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCMarkIDXListPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::network::GCMarkBlockPacket*
Arena::CreateMaybeMessage< ::network::GCMarkBlockPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network::GCMarkBlockPacket >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
